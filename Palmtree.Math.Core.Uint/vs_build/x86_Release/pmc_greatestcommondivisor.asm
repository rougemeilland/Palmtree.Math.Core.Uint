; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_greatestcommondivisor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_GreatestCommonDivisor
PUBLIC	_PMC_GreatestCommonDivisor_I_X@12
PUBLIC	_PMC_GreatestCommonDivisor_L_X@16
PUBLIC	_PMC_GreatestCommonDivisor_X_I@12
PUBLIC	_PMC_GreatestCommonDivisor_X_L@16
PUBLIC	_PMC_GreatestCommonDivisor_X_X@12
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	_RightShift_Imp:PROC
EXTRN	_LeftShift_Imp:PROC
EXTRN	_Subtruct_Imp:PROC
EXTRN	_Compare_Imp:PROC
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_L_Imp
_TEXT	SEGMENT
_k$1$ = -40						; size = 4
_k$1$ = -36						; size = 4
tv562 = -36						; size = 4
_result$8$ = -36					; size = 4
_work_v_buf$1$ = -32					; size = 4
_work_v_buf_code$1 = -32				; size = 4
_work_u_buf_code$2 = -28				; size = 4
_work_u_buf_code$3 = -28				; size = 4
_work_bit_count$1$ = -24				; size = 4
_work_v_buf_code$4 = -24				; size = 4
_w_buf_count$5 = -24					; size = 4
_v_tzcnt$1$ = -20					; size = 4
_nw_check_code$6 = -20					; size = 4
_work_bit_count$1$ = -16				; size = 4
_work_v_buf_words$7 = -16				; size = 4
$T8 = -12						; size = 4
_result$3$ = -12					; size = 4
_work_v_buf_words$9 = -12				; size = 4
_work_u_buf_words$10 = -8				; size = 4
_work_u_buf_words$11 = -8				; size = 4
_work_v_buf$1$ = -4					; size = 4
_nw_check_code$12 = -4					; size = 4
_work_u_buf$1$ = 8					; size = 4
_work_u_buf$1$ = 8					; size = 4
_w_buf_count$13 = 8					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_X_L_Imp PROC			; COMDAT

; 215  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi

; 216  :     PMC_STATUS_CODE result;
; 217  :     if (u->IS_ZERO)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	BYTE PTR [esi], 1
	je	SHORT $LN2@PMC_Greate

; 218  :     {
; 219  :         // u が 0 である場合
; 220  : 
; 221  :         if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	or	eax, edx
	jne	SHORT $LN4@PMC_Greate

; 432  : }

	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@PMC_Greate:

; 222  :         {
; 223  :             // v が 0 である場合
; 224  : 
; 225  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 226  :             return (PMC_STATUS_ARGUMENT_ERROR);
; 227  :         }
; 228  :         else
; 229  :         {
; 230  :             // v が 0 ではない場合
; 231  : 
; 232  :             // GCD は v そのものであるため、v を計算結果として返す。
; 233  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	edx
	push	ecx
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN13@PMC_Greate

; 432  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@PMC_Greate:

; 234  :                 return (result);
; 235  :         }
; 236  :     }
; 237  :     else
; 238  :     {
; 239  :         // u が 0 ではない場合
; 240  : 
; 241  :         if (v == 0)

	mov	ebx, DWORD PTR _v$[ebp]
	mov	eax, ebx
	mov	ecx, DWORD PTR _v$[ebp+4]
	or	eax, ecx
	jne	SHORT $LN7@PMC_Greate

; 242  :         {
; 243  :             // v が 0 である場合
; 244  : 
; 245  :             // GCD は u そのものであるため、u を計算結果として返す。
; 246  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN13@PMC_Greate

; 432  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@PMC_Greate:

; 247  :                 return (result);
; 248  :         }
; 249  :         else
; 250  :         {
; 251  :             // u と v がともに 0 ではない場合
; 252  : 
; 253  :             // u と v の GCD を計算する
; 254  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 255  :             {
; 256  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 257  : 
; 258  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+16]

; 259  :                 _UINT32_T v_hi;
; 260  :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 261  :                 if (v_hi == 0)

	test	ecx, ecx
	jne	$LN12@PMC_Greate
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 591  :         if (x == 0)

	test	ebx, ebx
	jne	SHORT $LN48@PMC_Greate

; 592  :             return (sizeof(x) * 8);

	lea	ecx, DWORD PTR [ebx+32]
	jmp	SHORT $LN47@PMC_Greate
$LN48@PMC_Greate:

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, ebx

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
$LN47@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 264  :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	edi, 32					; 00000020H

; 269  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$3[ebp]
	sub	edi, ecx
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	cmp	edx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 269  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$11[ebp]
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	cmovae	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 269  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 269  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$1$[ebp], eax

; 270  :                     if (work_u_buf == NULL)

	test	eax, eax
	je	SHORT $LN92@PMC_Greate

; 271  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 272  : 
; 273  :                     __UNIT_TYPE work_v_buf_code;
; 274  :                     __UNIT_TYPE work_v_buf_words;
; 275  :                     __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$1[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$7[ebp]
	push	eax
	push	edi
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], eax

; 276  :                     if (work_v_buf == NULL)

	test	eax, eax
	jne	SHORT $LN15@PMC_Greate
$LN96@PMC_Greate:

; 432  : }

	push	DWORD PTR _work_u_buf_words$11[ebp]
	push	DWORD PTR _work_u_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 8
$LN92@PMC_Greate:
	pop	edi
	pop	esi
	mov	eax, -6					; fffffffaH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@PMC_Greate:

; 277  :                     {
; 278  :                         DeallocateBlock(work_u_buf, work_u_buf_words);
; 279  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 280  :                     }
; 281  : 
; 282  :                     __UNIT_TYPE nw_check_code;
; 283  :                     if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$6[ebp]
	push	eax
	push	edi
	push	DWORD PTR _w$[ebp]
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$3$[ebp], eax
	test	eax, eax
	je	SHORT $LN16@PMC_Greate

; 284  :                     {
; 285  :                         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$7[ebp]
	mov	eax, DWORD PTR _work_v_buf$1$[ebp]
	push	eax
	call	_DeallocateBlock

; 286  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$11[ebp]
	push	DWORD PTR _work_u_buf$1$[ebp]
	call	_DeallocateBlock

; 287  :                         return (result);

	mov	eax, DWORD PTR _result$3$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 432  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@PMC_Greate:

; 288  :                     }
; 289  : 
; 290  :                     __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 705  :             return (sizeof(x) * 8);

	mov	ecx, 32					; 00000020H
	test	ebx, ebx
	je	SHORT $LN93@PMC_Greate

; 709  :         _BitScanForward(&pos, x);

	bsf	ecx, ebx
$LN93@PMC_Greate:

; 203  :         return (x <= y ? x : y);

	cmp	eax, ecx
	mov	DWORD PTR $T8[ebp], ecx
	mov	edx, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 292  :                     __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	ecx, DWORD PTR [esi+12]
	mov	esi, DWORD PTR [esi+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 203  :         return (x <= y ? x : y);

	cmovbe	edx, eax
	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 293  :                     if (u_tzcnt > 0)

	test	eax, eax
	je	SHORT $LN17@PMC_Greate

; 294  :                         RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	push	DWORD PTR _work_u_buf$1$[ebp]
	push	eax
	push	ecx
	push	esi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN57@PMC_Greate
$LN17@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _work_u_buf$1$[ebp]
	rep movsd
	mov	edi, DWORD PTR _work_bit_count$1$[ebp]
$LN57@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 297  :                     work_v_buf[0] = v_lo >> v_tzcnt;

	mov	eax, DWORD PTR _work_v_buf$1$[ebp]
	mov	ecx, DWORD PTR $T8[ebp]

; 300  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	esi, DWORD PTR _w$[ebp]
	shr	ebx, cl
	mov	DWORD PTR [eax], ebx
	lea	eax, DWORD PTR _w_buf_count$5[ebp]
	mov	ebx, DWORD PTR _work_u_buf$1$[ebp]
	push	eax
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	eax, DWORD PTR [edi+31]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 300  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 300  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	push	eax
	push	edi
	push	ebx
	call	_GreatestCommonDivisor_Imp

; 301  :                     if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$3[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@PMC_Greate

; 302  :                         return (result);
; 303  :                     if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$1[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate

; 304  :                         return (result);
; 305  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR _nw_check_code$6[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate

; 306  :                         return (result);
; 307  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$7[ebp]
	push	edi
	call	_DeallocateBlock

; 308  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$11[ebp]
	push	ebx
	call	_DeallocateBlock

; 309  : 
; 310  :                     LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	mov	eax, DWORD PTR [esi]
	push	1
	mov	eax, DWORD PTR [eax+36]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$5[ebp]
	push	eax
	call	_LeftShift_Imp

; 311  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR _nw_check_code$6[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	$LN1@PMC_Greate

; 312  :                         return (result);
; 313  :                     CommitNumber(*w);

	push	DWORD PTR [esi]

; 371  :                 }
; 372  :             }
; 373  :             else
; 374  :             {
; 375  :                 // _UINT64_T が 1 ワードで表現できる場合
; 376  : 
; 377  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 378  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 379  :                 __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);
; 380  : 
; 381  :                 __UNIT_TYPE work_u_buf_code;
; 382  :                 __UNIT_TYPE work_u_buf_words;
; 383  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);
; 384  :                 if (work_u_buf == NULL)
; 385  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 386  : 
; 387  :                 __UNIT_TYPE work_v_buf_code;
; 388  :                 __UNIT_TYPE work_v_buf_words;
; 389  :                 __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);
; 390  :                 if (work_v_buf == NULL)
; 391  :                 {
; 392  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 393  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 394  :                 }
; 395  : 
; 396  :                 __UNIT_TYPE nw_check_code;
; 397  :                 if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)
; 398  :                 {
; 399  :                     DeallocateBlock(work_v_buf, work_v_buf_words);
; 400  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 401  :                     return (result);
; 402  :                 }
; 403  : 
; 404  :                 __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;
; 405  :                 __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 406  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);
; 407  :                 if (u_tzcnt > 0)
; 408  :                     RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);
; 409  :                 else
; 410  :                     _COPY_MEMORY_UNIT(work_u_buf, u->BLOCK, u->UNIT_WORD_COUNT);
; 411  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);
; 412  : 
; 413  :                 __UNIT_TYPE w_buf_count;
; 414  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);
; 415  :                 if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)
; 416  :                     return (result);
; 417  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)
; 418  :                     return (result);
; 419  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 420  :                     return (result);
; 421  :                 DeallocateBlock(work_v_buf, work_v_buf_words);
; 422  :                 DeallocateBlock(work_u_buf, work_u_buf_words);
; 423  : 
; 424  :                 LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);
; 425  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 426  :                     return (result);
; 427  :                 CommitNumber(*w);
; 428  :             }
; 429  :         }
; 430  :     }
; 431  :     return (PMC_STATUS_OK);

	call	_CommitNumber
	add	esp, 4
	xor	eax, eax
	pop	edi

; 432  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, ecx

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 318  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	edi, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 323  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$2[ebp]
	sub	edi, ecx
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	cmp	edx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 323  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$10[ebp]
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	cmovae	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 323  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 323  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$1$[ebp], eax

; 324  :                     if (work_u_buf == NULL)

	test	eax, eax
	je	$LN92@PMC_Greate

; 325  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 326  : 
; 327  :                     __UNIT_TYPE work_v_buf_code;
; 328  :                     __UNIT_TYPE work_v_buf_words;
; 329  :                     __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$4[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$9[ebp]
	push	eax
	push	edi
	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], edi

; 330  :                     if (work_v_buf == NULL)

	test	edi, edi
	je	$LN96@PMC_Greate

; 331  :                     {
; 332  :                         DeallocateBlock(work_u_buf, work_u_buf_words);
; 333  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 334  :                     }
; 335  : 
; 336  :                     __UNIT_TYPE nw_check_code;
; 337  :                     if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$12[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	push	DWORD PTR _w$[ebp]
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$8$[ebp], eax
	test	eax, eax
	je	SHORT $LN25@PMC_Greate

; 338  :                     {
; 339  :                         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$9[ebp]
	push	edi
	call	_DeallocateBlock

; 340  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$10[ebp]
	push	DWORD PTR _work_u_buf$1$[ebp]
	call	_DeallocateBlock

; 341  :                         return (result);

	mov	eax, DWORD PTR _result$8$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 432  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@PMC_Greate:

; 342  :                     }
; 343  : 
; 344  :                     __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR [esi+24]

; 345  :                     __UNIT_TYPE v_tzcnt = v_lo == 0 ? 32 + _TZCNT_ALT_UNIT(v_hi) : _TZCNT_ALT_UNIT(v_lo);

	test	ebx, ebx
	jne	SHORT $LN43@PMC_Greate
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 709  :         _BitScanForward(&pos, x);

	mov	eax, DWORD PTR _v$[ebp+4]
	bsf	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 345  :                     __UNIT_TYPE v_tzcnt = v_lo == 0 ? 32 + _TZCNT_ALT_UNIT(v_hi) : _TZCNT_ALT_UNIT(v_lo);

	add	edx, 32					; 00000020H
	jmp	SHORT $LN95@PMC_Greate
$LN43@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 709  :         _BitScanForward(&pos, x);

	bsf	edx, ebx
$LN95@PMC_Greate:

; 203  :         return (x <= y ? x : y);

	cmp	ecx, edx
	mov	DWORD PTR _v_tzcnt$1$[ebp], edx
	mov	eax, edx
	cmovbe	eax, ecx
	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 346  :                     __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	eax, DWORD PTR [esi+12]
	mov	esi, DWORD PTR [esi+36]
	mov	DWORD PTR tv562[ebp], esi

; 347  :                     if (u_tzcnt > 0)

	test	ecx, ecx
	je	SHORT $LN26@PMC_Greate

; 348  :                         RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	esi, DWORD PTR _work_u_buf$1$[ebp]
	push	0
	push	esi
	push	ecx
	push	eax
	push	DWORD PTR tv562[ebp]
	call	_RightShift_Imp
	mov	edx, DWORD PTR _v_tzcnt$1$[ebp]
	add	esp, 20					; 00000014H
	jmp	SHORT $LN74@PMC_Greate
$LN26@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _work_u_buf$1$[ebp]
	mov	ecx, eax
	rep movsd
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
	mov	esi, DWORD PTR _work_u_buf$1$[ebp]
$LN74@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 352  :                     work_v_buf[1] = v_hi;

	mov	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], eax

; 353  :                     if (v_tzcnt > 0)

	test	edx, edx
	je	SHORT $LN28@PMC_Greate

; 354  :                         RightShift_Imp(work_v_buf, 2, v_tzcnt, work_v_buf, TRUE);

	push	1
	push	edi
	push	edx
	push	2
	push	edi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
$LN28@PMC_Greate:

; 357  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	ebx, DWORD PTR _w$[ebp]
	lea	eax, DWORD PTR _w_buf_count$13[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR [eax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _work_bit_count$1$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 357  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	push	eax
	push	edi
	push	esi
	call	_GreatestCommonDivisor_Imp

; 358  :                     if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$2[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 359  :                         return (result);
; 360  :                     if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$4[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 361  :                         return (result);
; 362  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _nw_check_code$12[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 363  :                         return (result);
; 364  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$9[ebp]
	push	edi
	call	_DeallocateBlock

; 365  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$10[ebp]
	push	esi
	call	_DeallocateBlock

; 366  : 
; 367  :                     LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	mov	eax, DWORD PTR [ebx]
	push	1
	mov	eax, DWORD PTR [eax+36]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$13[ebp]
	push	eax
	call	_LeftShift_Imp

; 368  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _nw_check_code$12[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 369  :                         return (result);
; 370  :                     CommitNumber(*w);

	push	DWORD PTR [ebx]

; 371  :                 }
; 372  :             }
; 373  :             else
; 374  :             {
; 375  :                 // _UINT64_T が 1 ワードで表現できる場合
; 376  : 
; 377  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 378  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 379  :                 __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);
; 380  : 
; 381  :                 __UNIT_TYPE work_u_buf_code;
; 382  :                 __UNIT_TYPE work_u_buf_words;
; 383  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);
; 384  :                 if (work_u_buf == NULL)
; 385  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 386  : 
; 387  :                 __UNIT_TYPE work_v_buf_code;
; 388  :                 __UNIT_TYPE work_v_buf_words;
; 389  :                 __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);
; 390  :                 if (work_v_buf == NULL)
; 391  :                 {
; 392  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 393  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 394  :                 }
; 395  : 
; 396  :                 __UNIT_TYPE nw_check_code;
; 397  :                 if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)
; 398  :                 {
; 399  :                     DeallocateBlock(work_v_buf, work_v_buf_words);
; 400  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 401  :                     return (result);
; 402  :                 }
; 403  : 
; 404  :                 __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;
; 405  :                 __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 406  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);
; 407  :                 if (u_tzcnt > 0)
; 408  :                     RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);
; 409  :                 else
; 410  :                     _COPY_MEMORY_UNIT(work_u_buf, u->BLOCK, u->UNIT_WORD_COUNT);
; 411  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);
; 412  : 
; 413  :                 __UNIT_TYPE w_buf_count;
; 414  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);
; 415  :                 if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)
; 416  :                     return (result);
; 417  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)
; 418  :                     return (result);
; 419  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 420  :                     return (result);
; 421  :                 DeallocateBlock(work_v_buf, work_v_buf_words);
; 422  :                 DeallocateBlock(work_u_buf, work_u_buf_words);
; 423  : 
; 424  :                 LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);
; 425  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 426  :                     return (result);
; 427  :                 CommitNumber(*w);
; 428  :             }
; 429  :         }
; 430  :     }
; 431  :     return (PMC_STATUS_OK);

	call	_CommitNumber
	add	esp, 4
$LN13@PMC_Greate:
	xor	eax, eax
$LN1@PMC_Greate:
	pop	edi

; 432  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_PMC_GreatestCommonDivisor_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_I_Imp
_TEXT	SEGMENT
_work_v_buf_code$1 = -32				; size = 4
_work_u_buf_code$2 = -28				; size = 4
_pos$1$ = -24						; size = 4
_w_buf_count$3 = -24					; size = 4
_work_v_buf$1$ = -20					; size = 4
_nw_check_code$4 = -16					; size = 4
_work_v_buf_words$5 = -12				; size = 4
_work_bit_count$1$ = -8					; size = 4
_k$1$ = -4						; size = 4
_result$3$ = -4						; size = 4
_work_u_buf_words$6 = 8					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_I_Imp PROC			; COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp

; 74   :     PMC_STATUS_CODE result;
; 75   :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	BYTE PTR [esi], 1
	je	SHORT $LN2@PMC_Greate

; 76   :     {
; 77   :         // u が 0 である場合
; 78   : 
; 79   :         if (v == 0)

	test	eax, eax
	jne	SHORT $LN4@PMC_Greate

; 166  : }

	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@PMC_Greate:

; 80   :         {
; 81   :             // v が 0 である場合
; 82   : 
; 83   :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 84   :             return (PMC_STATUS_ARGUMENT_ERROR);
; 85   :         }
; 86   :         else
; 87   :         {
; 88   :             // v が 0 ではない場合
; 89   : 
; 90   :             // GCD は v そのものであるため、v を計算結果として返す。
; 91   :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	eax
	call	_From_I_Imp
	add	esp, 8
	test	eax, eax
	je	$LN8@PMC_Greate

; 166  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@PMC_Greate:

; 92   :                 return (result);
; 93   :         }
; 94   :     }
; 95   :     else
; 96   :     {
; 97   :         // u が 0 ではない場合
; 98   : 
; 99   :         if (v == 0)

	test	eax, eax
	jne	SHORT $LN7@PMC_Greate

; 100  :         {
; 101  :             // v が 0 である場合
; 102  : 
; 103  :             // GCD は u そのものであるため、u を計算結果として返す。
; 104  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN8@PMC_Greate

; 166  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 113  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	edi, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 118  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$2[ebp]
	sub	edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	cmp	DWORD PTR [esi+16], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 118  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	cmovae	edi, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 118  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$6[ebp]
	push	eax
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 118  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 119  :             if (work_u_buf == NULL)

	test	ebx, ebx
	je	SHORT $LN34@PMC_Greate

; 120  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 121  : 
; 122  :             __UNIT_TYPE work_v_buf_code;
; 123  :             __UNIT_TYPE work_v_buf_words;
; 124  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$1[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$5[ebp]
	push	eax
	push	edi
	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], edi

; 125  :             if (work_v_buf == NULL)

	test	edi, edi
	jne	SHORT $LN11@PMC_Greate

; 126  :             {
; 127  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$6[ebp]
	push	ebx
	call	_DeallocateBlock
	add	esp, 8
$LN34@PMC_Greate:

; 166  : }

	pop	edi
	pop	esi
	mov	eax, -6					; fffffffaH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@PMC_Greate:

; 128  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 129  :             }
; 130  : 
; 131  :             __UNIT_TYPE nw_check_code;
; 132  :             if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$4[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	push	DWORD PTR _w$[ebp]
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$3$[ebp], eax
	test	eax, eax
	je	SHORT $LN12@PMC_Greate

; 133  :             {
; 134  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock

; 135  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$6[ebp]
	push	ebx
	call	_DeallocateBlock

; 136  :                 return (result);

	mov	eax, DWORD PTR _result$3$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 166  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 709  :         _BitScanForward(&pos, x);

	mov	eax, DWORD PTR _v$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 139  :             __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 709  :         _BitScanForward(&pos, x);

	bsf	edx, eax

; 203  :         return (x <= y ? x : y);

	cmp	ecx, edx

; 709  :         _BitScanForward(&pos, x);

	mov	DWORD PTR _pos$1$[ebp], edx

; 203  :         return (x <= y ? x : y);

	cmovbe	edx, ecx
	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 141  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	edx, DWORD PTR [esi+12]
	mov	esi, DWORD PTR [esi+36]

; 142  :             if (u_tzcnt > 0)

	test	ecx, ecx
	je	SHORT $LN13@PMC_Greate

; 143  :                 RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	push	ebx
	push	ecx
	push	edx
	push	esi
	call	_RightShift_Imp
	mov	eax, DWORD PTR _v$[ebp]
	add	esp, 20					; 00000014H
	jmp	SHORT $LN30@PMC_Greate
$LN13@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, ebx
	mov	ecx, edx
	rep movsd
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
$LN30@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 146  :             work_v_buf[0] = v >> v_tzcnt;

	mov	ecx, DWORD PTR _pos$1$[ebp]

; 149  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	esi, DWORD PTR _w$[ebp]
	shr	eax, cl
	mov	DWORD PTR [edi], eax
	lea	eax, DWORD PTR _w_buf_count$3[ebp]
	push	eax
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _work_bit_count$1$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 149  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	push	eax
	push	edi
	push	ebx
	call	_GreatestCommonDivisor_Imp

; 150  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$2[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 151  :                 return (result);
; 152  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$1[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 153  :                 return (result);
; 154  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR _nw_check_code$4[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 155  :                 return (result);
; 156  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock

; 157  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$6[ebp]
	push	ebx
	call	_DeallocateBlock

; 158  : 
; 159  :             LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	mov	eax, DWORD PTR [esi]
	push	1
	mov	eax, DWORD PTR [eax+36]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$3[ebp]
	push	eax
	call	_LeftShift_Imp

; 160  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR _nw_check_code$4[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 161  :                 return (result);
; 162  :             CommitNumber(*w);

	push	DWORD PTR [esi]
	call	_CommitNumber
	add	esp, 4
$LN8@PMC_Greate:

; 163  :         }
; 164  :     }
; 165  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:
	pop	edi

; 166  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_PMC_GreatestCommonDivisor_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _GreatestCommonDivisor_Imp
_TEXT	SEGMENT
_p1_buf$ = 8						; size = 4
_p2_buf$ = 12						; size = 4
_word_count$ = 16					; size = 4
_w_buf$ = 20						; size = 4
_w_buf_count$ = 24					; size = 4
_GreatestCommonDivisor_Imp PROC				; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	push	ebx

; 33   :     __UNIT_TYPE* u = p1_buf;
; 34   :     __UNIT_TYPE* v = p2_buf;

	mov	ebx, DWORD PTR _word_count$[ebp]
	push	esi
	mov	esi, DWORD PTR _p1_buf$[ebp]
	push	edi
	mov	edi, DWORD PTR _p2_buf$[ebp]
	npad	1
$LL2@GreatestCo:

; 35   :     for (;;)
; 36   :     {
; 37   :         while (word_count > 0 && u[word_count - 1] == 0 && v[word_count - 1] == 0)

	test	ebx, ebx
	je	SHORT $LN29@GreatestCo
	lea	eax, DWORD PTR [ebx-1]
	mov	ecx, esi
	lea	eax, DWORD PTR [edi+eax*4]
	sub	ecx, edi
	npad	2
$LL5@GreatestCo:
	cmp	DWORD PTR [ecx+eax], 0
	jne	SHORT $LN6@GreatestCo
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@GreatestCo

; 38   :             --word_count;

	sub	eax, 4
	sub	ebx, 1
	jne	SHORT $LL5@GreatestCo

; 39   :         if (word_count <= 0)

	jmp	SHORT $LN29@GreatestCo
$LN6@GreatestCo:
	test	ebx, ebx
	jne	SHORT $LN9@GreatestCo
$LN29@GreatestCo:

; 40   :         {
; 41   :             // このルートへの到達はあり得ないはず。
; 42   :             w_buf[0] = 0;

	mov	eax, DWORD PTR _w_buf$[ebp]
	mov	DWORD PTR [eax], 0

; 43   :             *w_buf_count = 1;

	mov	eax, DWORD PTR _w_buf_count$[ebp]
	mov	DWORD PTR [eax], 1
$LN9@GreatestCo:

; 44   :         }
; 45   :         int c = Compare_Imp(u, v, word_count);

	push	ebx
	push	edi
	push	esi
	call	_Compare_Imp
	add	esp, 12					; 0000000cH

; 46   :         if (c == 0)

	test	eax, eax
	je	SHORT $LN19@GreatestCo

; 53   :             return;
; 54   :         }
; 55   :         if (c < 0)

	jns	SHORT $LN11@GreatestCo

; 56   :         {
; 57   :             __UNIT_TYPE* tt = u;

	mov	eax, esi

; 58   :             u = v;

	mov	esi, edi

; 59   :             v = tt;

	mov	edi, eax
$LN11@GreatestCo:

; 60   :         }
; 61   :         // この時点で u > v かつ u と v はともに奇数である
; 62   : 
; 63   :         Subtruct_Imp(u, word_count, v, word_count, u, word_count);

	push	ebx
	push	esi
	push	ebx
	push	edi
	push	ebx
	push	esi
	call	_Subtruct_Imp
	add	esp, 24					; 00000018H

; 64   : 
; 65   :         // この時点で u は偶数
; 66   : 
; 67   :         while ((*u & 1) == 0)

	test	BYTE PTR [esi], 1
	jne	SHORT $LL2@GreatestCo
$LL7@GreatestCo:

; 68   :             RightShift_Imp(u, word_count, 1, u, TRUE);

	push	1
	push	esi
	push	1
	push	ebx
	push	esi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	test	BYTE PTR [esi], 1
	je	SHORT $LL7@GreatestCo
	jmp	SHORT $LL2@GreatestCo
$LN19@GreatestCo:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _w_buf$[ebp]
	mov	ecx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 52   :             *w_buf_count = word_count;

	mov	eax, DWORD PTR _w_buf_count$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 52   :             *w_buf_count = word_count;

	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ebx
	pop	ebx

; 69   :     }
; 70   : }

	pop	ebp
	ret	0
_GreatestCommonDivisor_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __TZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__TZCNT_ALT_UNIT PROC					; COMDAT

; 703  :     {

	push	ebp
	mov	ebp, esp

; 704  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@TZCNT_ALT_

; 705  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 710  : #elif defined(__GNUC__)
; 711  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 712  : #else
; 713  : #error unknown compiler
; 714  : #endif
; 715  : #elif defined(_M_X64)
; 716  : #ifdef _MSC_VER
; 717  :         _UINT32_T pos;
; 718  :         _BitScanForward64(&pos, x);
; 719  : #elif defined(__GNUC__)
; 720  :         _UINT64_T pos;
; 721  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 722  : #else
; 723  : #error unknown compiler
; 724  : #endif
; 725  : #else
; 726  : #error unknown platform
; 727  : #endif
; 728  :         return (pos);
; 729  :     }

	pop	ebp
	ret	0
$LN2@TZCNT_ALT_:

; 706  : #ifdef _M_IX86
; 707  :         _UINT32_T pos;
; 708  : #ifdef _MSC_VER
; 709  :         _BitScanForward(&pos, x);

	bsf	eax, eax

; 710  : #elif defined(__GNUC__)
; 711  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 712  : #else
; 713  : #error unknown compiler
; 714  : #endif
; 715  : #elif defined(_M_X64)
; 716  : #ifdef _MSC_VER
; 717  :         _UINT32_T pos;
; 718  :         _BitScanForward64(&pos, x);
; 719  : #elif defined(__GNUC__)
; 720  :         _UINT64_T pos;
; 721  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 722  : #else
; 723  : #error unknown compiler
; 724  : #endif
; 725  : #else
; 726  : #error unknown platform
; 727  : #endif
; 728  :         return (pos);
; 729  :     }

	pop	ebp
	ret	0
__TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :     {

	push	ebp
	mov	ebp, esp

; 624  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 649  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 649  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 590  :     {

	push	ebp
	mov	ebp, esp

; 591  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 602  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 602  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MINIMUM_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MINIMUM_UNIT PROC					; COMDAT

; 202  :     {

	push	ebp
	mov	ebp, esp

; 203  :         return (x <= y ? x : y);

	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	cmovbe	eax, DWORD PTR _x$[ebp]

; 204  :     }

	pop	ebp
	ret	0
__MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MAXIMUM_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC					; COMDAT

; 197  :     {

	push	ebp
	mov	ebp, esp

; 198  :         return (x >= y ? x : y);

	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	cmovae	eax, DWORD PTR _x$[ebp]

; 199  :     }

	pop	ebp
	ret	0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC				; COMDAT

; 187  :     {

	push	ebp
	mov	ebp, esp

; 188  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _u$[ebp]
	xor	edx, edx
	dec	eax
	add	eax, DWORD PTR _v$[ebp]
	div	DWORD PTR _v$[ebp]

; 189  :     }

	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 176  :     {

	push	ebp
	mov	ebp, esp

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 179  :     }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	push	ebp
	mov	ebp, esp

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);
; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_X@12
_TEXT	SEGMENT
_k$1$ = -36						; size = 4
_work_v_buf_code$1 = -32				; size = 4
_work_u_buf_code$2 = -28				; size = 4
_work_u_buf$1$ = -24					; size = 4
_v_tzcnt$1$ = -20					; size = 4
_result$5$ = -20					; size = 4
_nw_check_code$3 = -16					; size = 4
_work_v_buf_words$4 = -12				; size = 4
_work_u_buf_words$5 = -8				; size = 4
_work_bit_count$1$ = -4					; size = 4
_nw$ = 8						; size = 4
_u$ = 8							; size = 4
_work_v_buf$1$ = 12					; size = 4
_w_buf_count$6 = 12					; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_X@12 PROC			; COMDAT

; 481  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi

; 482  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN37@PMC_Greate

; 483  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 484  :     if (v == NULL)

	mov	ebx, DWORD PTR _v$[ebp]
	test	ebx, ebx
	je	$LN37@PMC_Greate

; 485  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 486  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	$LN37@PMC_Greate

; 487  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 488  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 489  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 490  :     PMC_STATUS_CODE result;
; 491  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Greate

; 492  :         return (result);
; 493  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Greate

; 494  :         return (result);
; 495  :     NUMBER_HEADER* nw;
; 496  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR [ebx]
	and	eax, 1
	test	BYTE PTR [esi], 1
	je	SHORT $LN7@PMC_Greate

; 497  :     {
; 498  :         // u が 0 である場合
; 499  : 
; 500  :         if (nv->IS_ZERO)

	test	eax, eax
	jne	$LN37@PMC_Greate

; 506  :         }
; 507  :         else
; 508  :         {
; 509  :             // v が 0 ではない場合
; 510  : 
; 511  :             // GCD は v そのものであるため、v を計算結果として返す。
; 512  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	ebx
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@PMC_Greate

; 597  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Greate:

; 513  :                 return (result);
; 514  :             *w = (PMC_HANDLE_UINT)nw;
; 515  :         }
; 516  :     }
; 517  :     else
; 518  :     {
; 519  :         // u が 0 ではない場合
; 520  : 
; 521  :         if (nv->IS_ZERO)

	test	eax, eax
	je	SHORT $LN12@PMC_Greate

; 522  :         {
; 523  :             // v が 0 である場合
; 524  : 
; 525  :             // GCD は u そのものであるため、u を計算結果として返す。
; 526  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate
$LN14@PMC_Greate:

; 527  :                 return (result);
; 528  :             *w = (PMC_HANDLE_UINT)nw;

	mov	eax, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [edi], eax

; 590  :         }
; 591  :     }
; 592  : #ifdef _DEBUG
; 593  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 594  :         return (result);
; 595  : #endif
; 596  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 597  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN12@PMC_Greate:

; 529  :         }
; 530  :         else
; 531  :         {
; 532  :             // u と v がともに 0 ではない場合
; 533  : 
; 534  :             // u と v の GCD を計算する
; 535  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 536  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR [ebx+16]

; 541  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$2[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	cmp	DWORD PTR [esi+16], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 541  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	cmovae	ecx, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 541  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$5[ebp]
	push	eax
	push	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 198  :         return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 541  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$1$[ebp], edi

; 542  :             if (work_u_buf == NULL)

	test	edi, edi
	je	SHORT $LN38@PMC_Greate

; 543  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 544  : 
; 545  :             __UNIT_TYPE work_v_buf_code;
; 546  :             __UNIT_TYPE work_v_buf_words;
; 547  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$1[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$4[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], eax

; 548  :             if (work_v_buf == NULL)

	test	eax, eax
	jne	SHORT $LN16@PMC_Greate

; 549  :             {
; 550  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock
	add	esp, 8
$LN38@PMC_Greate:

; 597  : }

	pop	edi
	pop	esi
	mov	eax, -6					; fffffffaH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN16@PMC_Greate:

; 551  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 552  :             }
; 553  : 
; 554  :             __UNIT_TYPE nw_check_code;
; 555  :             if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$3[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$5$[ebp], eax
	test	eax, eax
	je	SHORT $LN17@PMC_Greate

; 556  :             {
; 557  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$4[ebp]
	mov	ebx, DWORD PTR _work_v_buf$1$[ebp]
	push	ebx
	call	_DeallocateBlock

; 558  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock

; 559  :                 return (result);

	mov	eax, DWORD PTR _result$5$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 597  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN17@PMC_Greate:

; 560  :             }
; 561  : 
; 562  :             __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR [esi+24]

; 563  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	eax, DWORD PTR [ebx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 203  :         return (x <= y ? x : y);

	cmp	ecx, eax
	mov	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 563  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	DWORD PTR _v_tzcnt$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 203  :         return (x <= y ? x : y);

	cmovbe	edx, ecx
	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 564  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	edx, DWORD PTR [esi+12]
	mov	esi, DWORD PTR [esi+36]

; 565  :             if (u_tzcnt > 0)

	test	ecx, ecx
	je	SHORT $LN18@PMC_Greate

; 566  :                 RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	push	edi
	push	ecx
	push	edx
	push	esi
	call	_RightShift_Imp
	mov	eax, DWORD PTR _v_tzcnt$1$[ebp]
	add	esp, 20					; 00000014H
	jmp	SHORT $LN31@PMC_Greate
$LN18@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, edx
	rep movsd
$LN31@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 569  :             if (v_tzcnt > 0)

	mov	ecx, DWORD PTR [ebx+12]
	mov	esi, DWORD PTR [ebx+36]
	mov	ebx, DWORD PTR _work_v_buf$1$[ebp]
	test	eax, eax
	je	SHORT $LN20@PMC_Greate

; 570  :                 RightShift_Imp(nv->BLOCK, nv->UNIT_WORD_COUNT, v_tzcnt, work_v_buf, FALSE);

	push	0
	push	ebx
	push	eax
	push	ecx
	push	esi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN33@PMC_Greate
$LN20@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, ebx
	rep movsd
$LN33@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 575  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	esi, DWORD PTR _work_u_buf$1$[ebp]
	lea	eax, DWORD PTR _w_buf_count$6[ebp]
	push	eax
	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _work_bit_count$1$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 575  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	push	eax
	push	ebx
	push	esi
	call	_GreatestCommonDivisor_Imp

; 576  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$2[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@PMC_Greate

; 577  :                 return (result);
; 578  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$1[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 579  :                 return (result);
; 580  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_check_code$3[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 581  :                 return (result);
; 582  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$4[ebp]
	push	ebx
	call	_DeallocateBlock

; 583  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	esi
	call	_DeallocateBlock

; 584  : 
; 585  :             LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	eax, DWORD PTR _nw$[ebp]
	push	1
	mov	eax, DWORD PTR [eax+36]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$6[ebp]
	push	eax
	call	_LeftShift_Imp

; 586  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_check_code$3[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 587  :                 return (result);
; 588  :             CommitNumber(nw);

	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber

; 589  :             *w = (PMC_HANDLE_UINT)nw;

	mov	ecx, DWORD PTR _w$[ebp]
	add	esp, 4
	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi

; 597  : }

	pop	esi
	mov	DWORD PTR [ecx], eax
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN37@PMC_Greate:

; 501  :         {
; 502  :             // v が 0 である場合
; 503  : 
; 504  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 505  :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Greate:
	pop	edi

; 597  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_L@16
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_X_L@16 PROC			; COMDAT

; 458  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 459  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 460  :     {
; 461  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 462  :         return (PMC_STATUS_INTERNAL_ERROR);
; 463  :     }
; 464  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Greate

; 465  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 466  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Greate

; 468  :     PMC_STATUS_CODE result;
; 469  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 470  :         return (result);
; 471  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _v$[ebp+4]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_PMC_GreatestCommonDivisor_X_L_Imp
	add	esp, 16					; 00000010H
	pop	esi

; 472  :         return (result);
; 473  : #ifdef _DEBUG
; 474  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 475  :         return (result);
; 476  : #endif
; 477  :     return (PMC_STATUS_OK);
; 478  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Greate:

; 467  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Greate:
	pop	esi

; 472  :         return (result);
; 473  : #ifdef _DEBUG
; 474  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 475  :         return (result);
; 476  : #endif
; 477  :     return (PMC_STATUS_OK);
; 478  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_GreatestCommonDivisor_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_I@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_I@12 PROC			; COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 193  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 194  :     {
; 195  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 196  :         return (PMC_STATUS_INTERNAL_ERROR);
; 197  :     }
; 198  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Greate

; 199  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 200  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Greate

; 202  :     PMC_STATUS_CODE result;
; 203  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 204  :         return (result);
; 205  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_PMC_GreatestCommonDivisor_X_I_Imp
	add	esp, 12					; 0000000cH
	pop	esi

; 206  :         return (result);
; 207  : #ifdef _DEBUG
; 208  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 209  :         return (result);
; 210  : #endif
; 211  :     return (PMC_STATUS_OK);
; 212  : }

	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Greate:

; 201  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Greate:
	pop	esi

; 206  :         return (result);
; 207  : #ifdef _DEBUG
; 208  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 209  :         return (result);
; 210  : #endif
; 211  :     return (PMC_STATUS_OK);
; 212  : }

	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_L_X@16
_TEXT	SEGMENT
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_L_X@16 PROC			; COMDAT

; 435  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 436  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 437  :     {
; 438  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 439  :         return (PMC_STATUS_INTERNAL_ERROR);
; 440  :     }
; 441  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Greate

; 442  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 443  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Greate

; 445  :     PMC_STATUS_CODE result;
; 446  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 447  :         return (result);
; 448  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _u$[ebp+4]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_PMC_GreatestCommonDivisor_X_L_Imp
	add	esp, 16					; 00000010H
	pop	esi

; 449  :         return (result);
; 450  : #ifdef _DEBUG
; 451  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 452  :         return (result);
; 453  : #endif
; 454  :     return (PMC_STATUS_OK);
; 455  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Greate:

; 444  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Greate:
	pop	esi

; 449  :         return (result);
; 450  : #ifdef _DEBUG
; 451  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 452  :         return (result);
; 453  : #endif
; 454  :     return (PMC_STATUS_OK);
; 455  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_GreatestCommonDivisor_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_I_X@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_I_X@12 PROC			; COMDAT

; 169  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 170  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 171  :     {
; 172  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 173  :         return (PMC_STATUS_INTERNAL_ERROR);
; 174  :     }
; 175  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Greate

; 176  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 177  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Greate

; 179  :     PMC_STATUS_CODE result;
; 180  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 181  :         return (result);
; 182  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_PMC_GreatestCommonDivisor_X_I_Imp
	add	esp, 12					; 0000000cH
	pop	esi

; 183  :         return (result);
; 184  : #ifdef _DEBUG
; 185  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 186  :         return (result);
; 187  : #endif
; 188  :     return (PMC_STATUS_OK);
; 189  : }

	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Greate:

; 178  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Greate:
	pop	esi

; 183  :         return (result);
; 184  : #ifdef _DEBUG
; 185  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 186  :         return (result);
; 187  : #endif
; 188  :     return (PMC_STATUS_OK);
; 189  : }

	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _Initialize_GreatestCommonDivisor
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_GreatestCommonDivisor PROC			; COMDAT

; 601  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 602  : }

	ret	0
_Initialize_GreatestCommonDivisor ENDP
_TEXT	ENDS
END
