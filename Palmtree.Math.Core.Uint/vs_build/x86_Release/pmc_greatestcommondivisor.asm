; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_greatestcommondivisor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_GreatestCommonDivisor
PUBLIC	_PMC_GreatestCommonDivisor_I_X@12
PUBLIC	_PMC_GreatestCommonDivisor_L_X@16
PUBLIC	_PMC_GreatestCommonDivisor_X_I@12
PUBLIC	_PMC_GreatestCommonDivisor_X_L@16
PUBLIC	_PMC_GreatestCommonDivisor_X_X@12
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	_RightShift_Imp:PROC
EXTRN	_LeftShift_Imp:PROC
EXTRN	_Subtruct_Imp:PROC
EXTRN	_Compare_Imp:PROC
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_L_Imp
_TEXT	SEGMENT
_k$1$ = -40						; size = 4
_k$1$ = -36						; size = 4
tv570 = -36						; size = 4
_result$8$ = -36					; size = 4
_work_v_buf$1$ = -32					; size = 4
_work_v_buf_code$1 = -32				; size = 4
_work_u_buf_code$2 = -28				; size = 4
_work_u_buf_code$3 = -28				; size = 4
_work_bit_count$1$ = -24				; size = 4
_work_v_buf_code$4 = -24				; size = 4
_w_buf_count$5 = -24					; size = 4
_v_tzcnt$1$ = -20					; size = 4
_nw_check_code$6 = -20					; size = 4
_work_bit_count$1$ = -16				; size = 4
_work_v_buf_words$7 = -16				; size = 4
$T8 = -12						; size = 4
_result$3$ = -12					; size = 4
_work_v_buf_words$9 = -12				; size = 4
_work_u_buf_words$10 = -8				; size = 4
_work_u_buf_words$11 = -8				; size = 4
_work_v_buf$1$ = -4					; size = 4
_nw_check_code$12 = -4					; size = 4
_work_u_buf$1$ = 8					; size = 4
_work_u_buf$1$ = 8					; size = 4
_w_buf_count$13 = 8					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_X_L_Imp PROC			; COMDAT

; 222  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi

; 223  :     PMC_STATUS_CODE result;
; 224  :     if (u->IS_ZERO)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	BYTE PTR [esi+24], 2
	je	SHORT $LN2@PMC_Greate

; 225  :     {
; 226  :         // u が 0 である場合
; 227  : 
; 228  :         if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	or	eax, edx
	jne	SHORT $LN4@PMC_Greate

; 439  : }

	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@PMC_Greate:

; 229  :         {
; 230  :             // v が 0 である場合
; 231  : 
; 232  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 233  :             return (PMC_STATUS_ARGUMENT_ERROR);
; 234  :         }
; 235  :         else
; 236  :         {
; 237  :             // v が 0 ではない場合
; 238  : 
; 239  :             // GCD は v そのものであるため、v を計算結果として返す。
; 240  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	edx
	push	ecx
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN13@PMC_Greate

; 439  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@PMC_Greate:

; 241  :                 return (result);
; 242  :         }
; 243  :     }
; 244  :     else
; 245  :     {
; 246  :         // u が 0 ではない場合
; 247  : 
; 248  :         if (v == 0)

	mov	ebx, DWORD PTR _v$[ebp]
	mov	eax, ebx
	mov	ecx, DWORD PTR _v$[ebp+4]
	or	eax, ecx
	jne	SHORT $LN7@PMC_Greate

; 249  :         {
; 250  :             // v が 0 である場合
; 251  : 
; 252  :             // GCD は u そのものであるため、u を計算結果として返す。
; 253  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN13@PMC_Greate

; 439  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@PMC_Greate:

; 254  :                 return (result);
; 255  :         }
; 256  :         else
; 257  :         {
; 258  :             // u と v がともに 0 ではない場合
; 259  : 
; 260  :             // u と v の GCD を計算する
; 261  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 262  :             {
; 263  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 264  : 
; 265  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+12]

; 266  :                 _UINT32_T v_hi;
; 267  :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 268  :                 if (v_hi == 0)

	test	ecx, ecx
	jne	$LN12@PMC_Greate
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 597  :         if (x == 0)

	test	ebx, ebx
	jne	SHORT $LN48@PMC_Greate

; 598  :             return (sizeof(x) * 8);

	lea	ecx, DWORD PTR [ebx+32]
	jmp	SHORT $LN47@PMC_Greate
$LN48@PMC_Greate:

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, ebx

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
$LN47@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 271  :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	edi, 32					; 00000020H

; 276  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$3[ebp]
	sub	edi, ecx
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	edx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 276  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$11[ebp]
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmovae	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 276  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 276  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$1$[ebp], eax

; 277  :                     if (work_u_buf == NULL)

	test	eax, eax
	je	SHORT $LN92@PMC_Greate

; 278  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 279  : 
; 280  :                     __UNIT_TYPE work_v_buf_code;
; 281  :                     __UNIT_TYPE work_v_buf_words;
; 282  :                     __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$1[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$7[ebp]
	push	eax
	push	edi
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], eax

; 283  :                     if (work_v_buf == NULL)

	test	eax, eax
	jne	SHORT $LN15@PMC_Greate
$LN96@PMC_Greate:

; 439  : }

	push	DWORD PTR _work_u_buf_words$11[ebp]
	push	DWORD PTR _work_u_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 8
$LN92@PMC_Greate:
	pop	edi
	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@PMC_Greate:

; 284  :                     {
; 285  :                         DeallocateBlock(work_u_buf, work_u_buf_words);
; 286  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 287  :                     }
; 288  : 
; 289  :                     __UNIT_TYPE nw_check_code;
; 290  :                     if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$6[ebp]
	push	eax
	push	edi
	push	DWORD PTR _w$[ebp]
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$3$[ebp], eax
	test	eax, eax
	je	SHORT $LN16@PMC_Greate

; 291  :                     {
; 292  :                         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$7[ebp]
	mov	eax, DWORD PTR _work_v_buf$1$[ebp]
	push	eax
	call	_DeallocateBlock

; 293  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$11[ebp]
	push	DWORD PTR _work_u_buf$1$[ebp]
	call	_DeallocateBlock

; 294  :                         return (result);

	mov	eax, DWORD PTR _result$3$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 439  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@PMC_Greate:

; 295  :                     }
; 296  : 
; 297  :                     __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 711  :             return (sizeof(x) * 8);

	mov	ecx, 32					; 00000020H
	test	ebx, ebx
	je	SHORT $LN93@PMC_Greate

; 715  :         _BitScanForward(&pos, x);

	bsf	ecx, ebx
$LN93@PMC_Greate:

; 209  :         return (x <= y ? x : y);

	cmp	eax, ecx
	mov	DWORD PTR $T8[ebp], ecx
	mov	edx, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 299  :                     __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	ecx, DWORD PTR [esi+8]
	mov	esi, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (x <= y ? x : y);

	cmovbe	edx, eax
	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 300  :                     if (u_tzcnt > 0)

	test	eax, eax
	je	SHORT $LN17@PMC_Greate

; 301  :                         RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	push	DWORD PTR _work_u_buf$1$[ebp]
	push	eax
	push	ecx
	push	esi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN57@PMC_Greate
$LN17@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _work_u_buf$1$[ebp]
	rep movsd
	mov	edi, DWORD PTR _work_bit_count$1$[ebp]
$LN57@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 304  :                     work_v_buf[0] = v_lo >> v_tzcnt;

	mov	eax, DWORD PTR _work_v_buf$1$[ebp]
	mov	ecx, DWORD PTR $T8[ebp]

; 307  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	esi, DWORD PTR _w$[ebp]
	shr	ebx, cl
	mov	DWORD PTR [eax], ebx
	lea	eax, DWORD PTR _w_buf_count$5[ebp]
	mov	ebx, DWORD PTR _work_u_buf$1$[ebp]
	push	eax
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	lea	eax, DWORD PTR [edi+31]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 307  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 307  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	push	eax
	push	edi
	push	ebx
	call	_GreatestCommonDivisor_Imp

; 308  :                     if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$3[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@PMC_Greate

; 309  :                         return (result);
; 310  :                     if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$1[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate

; 311  :                         return (result);
; 312  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR _nw_check_code$6[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate

; 313  :                         return (result);
; 314  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$7[ebp]
	push	edi
	call	_DeallocateBlock

; 315  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$11[ebp]
	push	ebx
	call	_DeallocateBlock

; 316  : 
; 317  :                     LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	mov	eax, DWORD PTR [esi]
	push	1
	mov	eax, DWORD PTR [eax+32]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$5[ebp]
	push	eax
	call	_LeftShift_Imp

; 318  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR _nw_check_code$6[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	$LN1@PMC_Greate

; 319  :                         return (result);
; 320  :                     CommitNumber(*w);

	push	DWORD PTR [esi]

; 378  :                 }
; 379  :             }
; 380  :             else
; 381  :             {
; 382  :                 // _UINT64_T が 1 ワードで表現できる場合
; 383  : 
; 384  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 385  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 386  :                 __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);
; 387  : 
; 388  :                 __UNIT_TYPE work_u_buf_code;
; 389  :                 __UNIT_TYPE work_u_buf_words;
; 390  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);
; 391  :                 if (work_u_buf == NULL)
; 392  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 393  : 
; 394  :                 __UNIT_TYPE work_v_buf_code;
; 395  :                 __UNIT_TYPE work_v_buf_words;
; 396  :                 __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);
; 397  :                 if (work_v_buf == NULL)
; 398  :                 {
; 399  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 400  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 401  :                 }
; 402  : 
; 403  :                 __UNIT_TYPE nw_check_code;
; 404  :                 if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)
; 405  :                 {
; 406  :                     DeallocateBlock(work_v_buf, work_v_buf_words);
; 407  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 408  :                     return (result);
; 409  :                 }
; 410  : 
; 411  :                 __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;
; 412  :                 __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 413  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);
; 414  :                 if (u_tzcnt > 0)
; 415  :                     RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);
; 416  :                 else
; 417  :                     _COPY_MEMORY_UNIT(work_u_buf, u->BLOCK, u->UNIT_WORD_COUNT);
; 418  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);
; 419  : 
; 420  :                 __UNIT_TYPE w_buf_count;
; 421  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);
; 422  :                 if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)
; 423  :                     return (result);
; 424  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)
; 425  :                     return (result);
; 426  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 427  :                     return (result);
; 428  :                 DeallocateBlock(work_v_buf, work_v_buf_words);
; 429  :                 DeallocateBlock(work_u_buf, work_u_buf_words);
; 430  : 
; 431  :                 LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);
; 432  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 433  :                     return (result);
; 434  :                 CommitNumber(*w);
; 435  :             }
; 436  :         }
; 437  :     }
; 438  :     return (PMC_STATUS_OK);

	call	_CommitNumber
	add	esp, 4
	xor	eax, eax
	pop	edi

; 439  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, ecx

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 325  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	edi, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 330  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$2[ebp]
	sub	edi, ecx
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	edx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 330  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$10[ebp]
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmovae	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 330  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 330  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$1$[ebp], eax

; 331  :                     if (work_u_buf == NULL)

	test	eax, eax
	je	$LN92@PMC_Greate

; 332  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 333  : 
; 334  :                     __UNIT_TYPE work_v_buf_code;
; 335  :                     __UNIT_TYPE work_v_buf_words;
; 336  :                     __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$4[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$9[ebp]
	push	eax
	push	edi
	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], edi

; 337  :                     if (work_v_buf == NULL)

	test	edi, edi
	je	$LN96@PMC_Greate

; 338  :                     {
; 339  :                         DeallocateBlock(work_u_buf, work_u_buf_words);
; 340  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 341  :                     }
; 342  : 
; 343  :                     __UNIT_TYPE nw_check_code;
; 344  :                     if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$12[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	push	DWORD PTR _w$[ebp]
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$8$[ebp], eax
	test	eax, eax
	je	SHORT $LN25@PMC_Greate

; 345  :                     {
; 346  :                         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$9[ebp]
	push	edi
	call	_DeallocateBlock

; 347  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$10[ebp]
	push	DWORD PTR _work_u_buf$1$[ebp]
	call	_DeallocateBlock

; 348  :                         return (result);

	mov	eax, DWORD PTR _result$8$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 439  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@PMC_Greate:

; 349  :                     }
; 350  : 
; 351  :                     __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR [esi+20]

; 352  :                     __UNIT_TYPE v_tzcnt = v_lo == 0 ? 32 + _TZCNT_ALT_UNIT(v_hi) : _TZCNT_ALT_UNIT(v_lo);

	test	ebx, ebx
	jne	SHORT $LN43@PMC_Greate
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 715  :         _BitScanForward(&pos, x);

	mov	eax, DWORD PTR _v$[ebp+4]
	bsf	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 352  :                     __UNIT_TYPE v_tzcnt = v_lo == 0 ? 32 + _TZCNT_ALT_UNIT(v_hi) : _TZCNT_ALT_UNIT(v_lo);

	add	edx, 32					; 00000020H
	jmp	SHORT $LN95@PMC_Greate
$LN43@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 715  :         _BitScanForward(&pos, x);

	bsf	edx, ebx
$LN95@PMC_Greate:

; 209  :         return (x <= y ? x : y);

	cmp	ecx, edx
	mov	DWORD PTR _v_tzcnt$1$[ebp], edx
	mov	eax, edx
	cmovbe	eax, ecx
	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 353  :                     __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	eax, DWORD PTR [esi+8]
	mov	esi, DWORD PTR [esi+32]
	mov	DWORD PTR tv570[ebp], esi

; 354  :                     if (u_tzcnt > 0)

	test	ecx, ecx
	je	SHORT $LN26@PMC_Greate

; 355  :                         RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	esi, DWORD PTR _work_u_buf$1$[ebp]
	push	0
	push	esi
	push	ecx
	push	eax
	push	DWORD PTR tv570[ebp]
	call	_RightShift_Imp
	mov	edx, DWORD PTR _v_tzcnt$1$[ebp]
	add	esp, 20					; 00000014H
	jmp	SHORT $LN74@PMC_Greate
$LN26@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _work_u_buf$1$[ebp]
	mov	ecx, eax
	rep movsd
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
	mov	esi, DWORD PTR _work_u_buf$1$[ebp]
$LN74@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 359  :                     work_v_buf[1] = v_hi;

	mov	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], eax

; 360  :                     if (v_tzcnt > 0)

	test	edx, edx
	je	SHORT $LN28@PMC_Greate

; 361  :                         RightShift_Imp(work_v_buf, 2, v_tzcnt, work_v_buf, TRUE);

	push	1
	push	edi
	push	edx
	push	2
	push	edi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
$LN28@PMC_Greate:

; 364  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	ebx, DWORD PTR _w$[ebp]
	lea	eax, DWORD PTR _w_buf_count$13[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR [eax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _work_bit_count$1$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 364  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	push	eax
	push	edi
	push	esi
	call	_GreatestCommonDivisor_Imp

; 365  :                     if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$2[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 366  :                         return (result);
; 367  :                     if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$4[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 368  :                         return (result);
; 369  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _nw_check_code$12[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 370  :                         return (result);
; 371  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$9[ebp]
	push	edi
	call	_DeallocateBlock

; 372  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$10[ebp]
	push	esi
	call	_DeallocateBlock

; 373  : 
; 374  :                     LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	mov	eax, DWORD PTR [ebx]
	push	1
	mov	eax, DWORD PTR [eax+32]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$13[ebp]
	push	eax
	call	_LeftShift_Imp

; 375  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _nw_check_code$12[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 376  :                         return (result);
; 377  :                     CommitNumber(*w);

	push	DWORD PTR [ebx]

; 378  :                 }
; 379  :             }
; 380  :             else
; 381  :             {
; 382  :                 // _UINT64_T が 1 ワードで表現できる場合
; 383  : 
; 384  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 385  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 386  :                 __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);
; 387  : 
; 388  :                 __UNIT_TYPE work_u_buf_code;
; 389  :                 __UNIT_TYPE work_u_buf_words;
; 390  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);
; 391  :                 if (work_u_buf == NULL)
; 392  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 393  : 
; 394  :                 __UNIT_TYPE work_v_buf_code;
; 395  :                 __UNIT_TYPE work_v_buf_words;
; 396  :                 __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);
; 397  :                 if (work_v_buf == NULL)
; 398  :                 {
; 399  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 400  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 401  :                 }
; 402  : 
; 403  :                 __UNIT_TYPE nw_check_code;
; 404  :                 if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)
; 405  :                 {
; 406  :                     DeallocateBlock(work_v_buf, work_v_buf_words);
; 407  :                     DeallocateBlock(work_u_buf, work_u_buf_words);
; 408  :                     return (result);
; 409  :                 }
; 410  : 
; 411  :                 __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;
; 412  :                 __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 413  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);
; 414  :                 if (u_tzcnt > 0)
; 415  :                     RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);
; 416  :                 else
; 417  :                     _COPY_MEMORY_UNIT(work_u_buf, u->BLOCK, u->UNIT_WORD_COUNT);
; 418  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);
; 419  : 
; 420  :                 __UNIT_TYPE w_buf_count;
; 421  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);
; 422  :                 if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)
; 423  :                     return (result);
; 424  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)
; 425  :                     return (result);
; 426  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 427  :                     return (result);
; 428  :                 DeallocateBlock(work_v_buf, work_v_buf_words);
; 429  :                 DeallocateBlock(work_u_buf, work_u_buf_words);
; 430  : 
; 431  :                 LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);
; 432  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)
; 433  :                     return (result);
; 434  :                 CommitNumber(*w);
; 435  :             }
; 436  :         }
; 437  :     }
; 438  :     return (PMC_STATUS_OK);

	call	_CommitNumber
	add	esp, 4
$LN13@PMC_Greate:
	xor	eax, eax
$LN1@PMC_Greate:
	pop	edi

; 439  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_PMC_GreatestCommonDivisor_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_I_Imp
_TEXT	SEGMENT
_work_v_buf_code$1 = -32				; size = 4
_work_u_buf_code$2 = -28				; size = 4
_pos$1$ = -24						; size = 4
_w_buf_count$3 = -24					; size = 4
_work_v_buf$1$ = -20					; size = 4
_nw_check_code$4 = -16					; size = 4
_work_v_buf_words$5 = -12				; size = 4
_work_bit_count$1$ = -8					; size = 4
_k$1$ = -4						; size = 4
_result$3$ = -4						; size = 4
_work_u_buf_words$6 = 8					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_I_Imp PROC			; COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp

; 81   :     PMC_STATUS_CODE result;
; 82   :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	BYTE PTR [esi+24], 2
	je	SHORT $LN2@PMC_Greate

; 83   :     {
; 84   :         // u が 0 である場合
; 85   : 
; 86   :         if (v == 0)

	test	eax, eax
	jne	SHORT $LN4@PMC_Greate

; 173  : }

	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@PMC_Greate:

; 87   :         {
; 88   :             // v が 0 である場合
; 89   : 
; 90   :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 91   :             return (PMC_STATUS_ARGUMENT_ERROR);
; 92   :         }
; 93   :         else
; 94   :         {
; 95   :             // v が 0 ではない場合
; 96   : 
; 97   :             // GCD は v そのものであるため、v を計算結果として返す。
; 98   :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	eax
	call	_From_I_Imp
	add	esp, 8
	test	eax, eax
	je	$LN8@PMC_Greate

; 173  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@PMC_Greate:

; 99   :                 return (result);
; 100  :         }
; 101  :     }
; 102  :     else
; 103  :     {
; 104  :         // u が 0 ではない場合
; 105  : 
; 106  :         if (v == 0)

	test	eax, eax
	jne	SHORT $LN7@PMC_Greate

; 107  :         {
; 108  :             // v が 0 である場合
; 109  : 
; 110  :             // GCD は u そのものであるため、u を計算結果として返す。
; 111  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN8@PMC_Greate

; 173  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 120  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	edi, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 125  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$2[ebp]
	sub	edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	DWORD PTR [esi+12], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 125  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmovae	edi, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 125  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$6[ebp]
	push	eax
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 125  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 126  :             if (work_u_buf == NULL)

	test	ebx, ebx
	je	SHORT $LN34@PMC_Greate

; 127  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 128  : 
; 129  :             __UNIT_TYPE work_v_buf_code;
; 130  :             __UNIT_TYPE work_v_buf_words;
; 131  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$1[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$5[ebp]
	push	eax
	push	edi
	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], edi

; 132  :             if (work_v_buf == NULL)

	test	edi, edi
	jne	SHORT $LN11@PMC_Greate

; 133  :             {
; 134  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$6[ebp]
	push	ebx
	call	_DeallocateBlock
	add	esp, 8
$LN34@PMC_Greate:

; 173  : }

	pop	edi
	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@PMC_Greate:

; 135  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 136  :             }
; 137  : 
; 138  :             __UNIT_TYPE nw_check_code;
; 139  :             if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$4[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	push	DWORD PTR _w$[ebp]
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$3$[ebp], eax
	test	eax, eax
	je	SHORT $LN12@PMC_Greate

; 140  :             {
; 141  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock

; 142  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$6[ebp]
	push	ebx
	call	_DeallocateBlock

; 143  :                 return (result);

	mov	eax, DWORD PTR _result$3$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 173  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 715  :         _BitScanForward(&pos, x);

	mov	eax, DWORD PTR _v$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 146  :             __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 715  :         _BitScanForward(&pos, x);

	bsf	edx, eax

; 209  :         return (x <= y ? x : y);

	cmp	ecx, edx

; 715  :         _BitScanForward(&pos, x);

	mov	DWORD PTR _pos$1$[ebp], edx

; 209  :         return (x <= y ? x : y);

	cmovbe	edx, ecx
	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 148  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	edx, DWORD PTR [esi+8]
	mov	esi, DWORD PTR [esi+32]

; 149  :             if (u_tzcnt > 0)

	test	ecx, ecx
	je	SHORT $LN13@PMC_Greate

; 150  :                 RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	push	ebx
	push	ecx
	push	edx
	push	esi
	call	_RightShift_Imp
	mov	eax, DWORD PTR _v$[ebp]
	add	esp, 20					; 00000014H
	jmp	SHORT $LN30@PMC_Greate
$LN13@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, ebx
	mov	ecx, edx
	rep movsd
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
$LN30@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 153  :             work_v_buf[0] = v >> v_tzcnt;

	mov	ecx, DWORD PTR _pos$1$[ebp]

; 156  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	esi, DWORD PTR _w$[ebp]
	shr	eax, cl
	mov	DWORD PTR [edi], eax
	lea	eax, DWORD PTR _w_buf_count$3[ebp]
	push	eax
	mov	eax, DWORD PTR [esi]
	push	DWORD PTR [eax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _work_bit_count$1$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 156  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	push	eax
	push	edi
	push	ebx
	call	_GreatestCommonDivisor_Imp

; 157  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$2[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 158  :                 return (result);
; 159  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$1[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 160  :                 return (result);
; 161  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR _nw_check_code$4[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 162  :                 return (result);
; 163  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock

; 164  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$6[ebp]
	push	ebx
	call	_DeallocateBlock

; 165  : 
; 166  :             LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	mov	eax, DWORD PTR [esi]
	push	1
	mov	eax, DWORD PTR [eax+32]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$3[ebp]
	push	eax
	call	_LeftShift_Imp

; 167  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [esi]
	push	DWORD PTR _nw_check_code$4[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 168  :                 return (result);
; 169  :             CommitNumber(*w);

	push	DWORD PTR [esi]
	call	_CommitNumber
	add	esp, 4
$LN8@PMC_Greate:

; 170  :         }
; 171  :     }
; 172  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:
	pop	edi

; 173  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_PMC_GreatestCommonDivisor_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _GreatestCommonDivisor_Imp
_TEXT	SEGMENT
_p1_buf$ = 8						; size = 4
_p2_buf$ = 12						; size = 4
_word_count$ = 16					; size = 4
_w_buf$ = 20						; size = 4
_w_buf_count$ = 24					; size = 4
_GreatestCommonDivisor_Imp PROC				; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	push	ebx

; 40   :     __UNIT_TYPE* u = p1_buf;
; 41   :     __UNIT_TYPE* v = p2_buf;

	mov	ebx, DWORD PTR _word_count$[ebp]
	push	esi
	mov	esi, DWORD PTR _p1_buf$[ebp]
	push	edi
	mov	edi, DWORD PTR _p2_buf$[ebp]
	npad	1
$LL2@GreatestCo:

; 42   :     for (;;)
; 43   :     {
; 44   :         while (word_count > 0 && u[word_count - 1] == 0 && v[word_count - 1] == 0)

	test	ebx, ebx
	je	SHORT $LN29@GreatestCo
	lea	eax, DWORD PTR [ebx-1]
	mov	ecx, esi
	lea	eax, DWORD PTR [edi+eax*4]
	sub	ecx, edi
	npad	2
$LL5@GreatestCo:
	cmp	DWORD PTR [ecx+eax], 0
	jne	SHORT $LN6@GreatestCo
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@GreatestCo

; 45   :             --word_count;

	sub	eax, 4
	sub	ebx, 1
	jne	SHORT $LL5@GreatestCo

; 46   :         if (word_count <= 0)

	jmp	SHORT $LN29@GreatestCo
$LN6@GreatestCo:
	test	ebx, ebx
	jne	SHORT $LN9@GreatestCo
$LN29@GreatestCo:

; 47   :         {
; 48   :             // このルートへの到達はあり得ないはず。
; 49   :             w_buf[0] = 0;

	mov	eax, DWORD PTR _w_buf$[ebp]
	mov	DWORD PTR [eax], 0

; 50   :             *w_buf_count = 1;

	mov	eax, DWORD PTR _w_buf_count$[ebp]
	mov	DWORD PTR [eax], 1
$LN9@GreatestCo:

; 51   :         }
; 52   :         int c = Compare_Imp(u, v, word_count);

	push	ebx
	push	edi
	push	esi
	call	_Compare_Imp
	add	esp, 12					; 0000000cH

; 53   :         if (c == 0)

	test	eax, eax
	je	SHORT $LN19@GreatestCo

; 60   :             return;
; 61   :         }
; 62   :         if (c < 0)

	jns	SHORT $LN11@GreatestCo

; 63   :         {
; 64   :             __UNIT_TYPE* tt = u;

	mov	eax, esi

; 65   :             u = v;

	mov	esi, edi

; 66   :             v = tt;

	mov	edi, eax
$LN11@GreatestCo:

; 67   :         }
; 68   :         // この時点で u > v かつ u と v はともに奇数である
; 69   : 
; 70   :         Subtruct_Imp(u, word_count, v, word_count, u, word_count);

	push	ebx
	push	esi
	push	ebx
	push	edi
	push	ebx
	push	esi
	call	_Subtruct_Imp
	add	esp, 24					; 00000018H

; 71   : 
; 72   :         // この時点で u は偶数
; 73   : 
; 74   :         while ((*u & 1) == 0)

	test	BYTE PTR [esi], 1
	jne	SHORT $LL2@GreatestCo
$LL7@GreatestCo:

; 75   :             RightShift_Imp(u, word_count, 1, u, TRUE);

	push	1
	push	esi
	push	1
	push	ebx
	push	esi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	test	BYTE PTR [esi], 1
	je	SHORT $LL7@GreatestCo
	jmp	SHORT $LL2@GreatestCo
$LN19@GreatestCo:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _w_buf$[ebp]
	mov	ecx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 59   :             *w_buf_count = word_count;

	mov	eax, DWORD PTR _w_buf_count$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 59   :             *w_buf_count = word_count;

	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ebx
	pop	ebx

; 76   :     }
; 77   : }

	pop	ebp
	ret	0
_GreatestCommonDivisor_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __TZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__TZCNT_ALT_UNIT PROC					; COMDAT

; 709  :     {

	push	ebp
	mov	ebp, esp

; 710  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@TZCNT_ALT_

; 711  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 716  : #elif defined(__GNUC__)
; 717  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 718  : #else
; 719  : #error unknown compiler
; 720  : #endif
; 721  : #elif defined(_M_X64)
; 722  : #ifdef _MSC_VER
; 723  :         _UINT32_T pos;
; 724  :         _BitScanForward64(&pos, x);
; 725  : #elif defined(__GNUC__)
; 726  :         _UINT64_T pos;
; 727  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 728  : #else
; 729  : #error unknown compiler
; 730  : #endif
; 731  : #else
; 732  : #error unknown platform
; 733  : #endif
; 734  :         return (pos);
; 735  :     }

	pop	ebp
	ret	0
$LN2@TZCNT_ALT_:

; 712  : #ifdef _M_IX86
; 713  :         _UINT32_T pos;
; 714  : #ifdef _MSC_VER
; 715  :         _BitScanForward(&pos, x);

	bsf	eax, eax

; 716  : #elif defined(__GNUC__)
; 717  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 718  : #else
; 719  : #error unknown compiler
; 720  : #endif
; 721  : #elif defined(_M_X64)
; 722  : #ifdef _MSC_VER
; 723  :         _UINT32_T pos;
; 724  :         _BitScanForward64(&pos, x);
; 725  : #elif defined(__GNUC__)
; 726  :         _UINT64_T pos;
; 727  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 728  : #else
; 729  : #error unknown compiler
; 730  : #endif
; 731  : #else
; 732  : #error unknown platform
; 733  : #endif
; 734  :         return (pos);
; 735  :     }

	pop	ebp
	ret	0
__TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 629  :     {

	push	ebp
	mov	ebp, esp

; 630  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 655  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);
; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 655  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 596  :     {

	push	ebp
	mov	ebp, esp

; 597  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 598  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 608  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 608  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MINIMUM_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MINIMUM_UNIT PROC					; COMDAT

; 208  :     {

	push	ebp
	mov	ebp, esp

; 209  :         return (x <= y ? x : y);

	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	cmovbe	eax, DWORD PTR _x$[ebp]

; 210  :     }

	pop	ebp
	ret	0
__MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MAXIMUM_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC					; COMDAT

; 203  :     {

	push	ebp
	mov	ebp, esp

; 204  :         return (x >= y ? x : y);

	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	cmovae	eax, DWORD PTR _x$[ebp]

; 205  :     }

	pop	ebp
	ret	0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC				; COMDAT

; 193  :     {

	push	ebp
	mov	ebp, esp

; 194  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _u$[ebp]
	xor	edx, edx
	dec	eax
	add	eax, DWORD PTR _v$[ebp]
	div	DWORD PTR _v$[ebp]

; 195  :     }

	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 182  :     {

	push	ebp
	mov	ebp, esp

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 184  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 185  :     }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 66   :     {

	push	ebp
	mov	ebp, esp

; 67   : #ifdef _M_IX86
; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 69   : #elif defined(_M_X64)
; 70   :         __movsq(d, s, count);
; 71   : #else
; 72   : #error unknown platform
; 73   : #endif
; 74   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_X@12
_TEXT	SEGMENT
_k$1$ = -36						; size = 4
_work_v_buf_code$1 = -32				; size = 4
_work_u_buf_code$2 = -28				; size = 4
_work_u_buf$1$ = -24					; size = 4
_v_tzcnt$1$ = -20					; size = 4
_result$5$ = -20					; size = 4
_nw_check_code$3 = -16					; size = 4
_work_v_buf_words$4 = -12				; size = 4
_work_u_buf_words$5 = -8				; size = 4
_work_bit_count$1$ = -4					; size = 4
_nw$ = 8						; size = 4
_u$ = 8							; size = 4
_work_v_buf$1$ = 12					; size = 4
_w_buf_count$6 = 12					; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_X@12 PROC			; COMDAT

; 488  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi

; 489  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN37@PMC_Greate

; 490  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 491  :     if (v == NULL)

	mov	ebx, DWORD PTR _v$[ebp]
	test	ebx, ebx
	je	$LN37@PMC_Greate

; 492  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 493  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	$LN37@PMC_Greate

; 494  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 495  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 496  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 497  :     PMC_STATUS_CODE result;
; 498  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Greate

; 499  :         return (result);
; 500  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Greate

; 501  :         return (result);
; 502  :     NUMBER_HEADER* nw;
; 503  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR [ebx+24]
	and	eax, 2
	test	BYTE PTR [esi+24], 2
	je	SHORT $LN7@PMC_Greate

; 504  :     {
; 505  :         // u が 0 である場合
; 506  : 
; 507  :         if (nv->IS_ZERO)

	test	eax, eax
	jne	$LN37@PMC_Greate

; 513  :         }
; 514  :         else
; 515  :         {
; 516  :             // v が 0 ではない場合
; 517  : 
; 518  :             // GCD は v そのものであるため、v を計算結果として返す。
; 519  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	ebx
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@PMC_Greate

; 604  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Greate:

; 520  :                 return (result);
; 521  :             *w = nw;
; 522  :         }
; 523  :     }
; 524  :     else
; 525  :     {
; 526  :         // u が 0 ではない場合
; 527  : 
; 528  :         if (nv->IS_ZERO)

	test	eax, eax
	je	SHORT $LN12@PMC_Greate

; 529  :         {
; 530  :             // v が 0 である場合
; 531  : 
; 532  :             // GCD は u そのものであるため、u を計算結果として返す。
; 533  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Greate
$LN14@PMC_Greate:

; 534  :                 return (result);
; 535  :             *w = nw;

	mov	eax, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [edi], eax

; 597  :         }
; 598  :     }
; 599  : #ifdef _DEBUG
; 600  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 601  :         return (result);
; 602  : #endif
; 603  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 604  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN12@PMC_Greate:

; 536  :         }
; 537  :         else
; 538  :         {
; 539  :             // u と v がともに 0 ではない場合
; 540  : 
; 541  :             // u と v の GCD を計算する
; 542  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 543  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR [ebx+12]

; 548  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$2[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	DWORD PTR [esi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 548  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmovae	ecx, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 548  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_words$5[ebp]
	push	eax
	push	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	mov	DWORD PTR _work_bit_count$1$[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 548  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$1$[ebp], edi

; 549  :             if (work_u_buf == NULL)

	test	edi, edi
	je	SHORT $LN38@PMC_Greate

; 550  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 551  : 
; 552  :             __UNIT_TYPE work_v_buf_code;
; 553  :             __UNIT_TYPE work_v_buf_words;
; 554  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$1[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$4[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], eax

; 555  :             if (work_v_buf == NULL)

	test	eax, eax
	jne	SHORT $LN16@PMC_Greate

; 556  :             {
; 557  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock
	add	esp, 8
$LN38@PMC_Greate:

; 604  : }

	pop	edi
	pop	esi
	mov	eax, -5					; fffffffbH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN16@PMC_Greate:

; 558  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 559  :             }
; 560  : 
; 561  :             __UNIT_TYPE nw_check_code;
; 562  :             if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$3[ebp]
	push	eax
	push	DWORD PTR _work_bit_count$1$[ebp]
	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$5$[ebp], eax
	test	eax, eax
	je	SHORT $LN17@PMC_Greate

; 563  :             {
; 564  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$4[ebp]
	mov	ebx, DWORD PTR _work_v_buf$1$[ebp]
	push	ebx
	call	_DeallocateBlock

; 565  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	edi
	call	_DeallocateBlock

; 566  :                 return (result);

	mov	eax, DWORD PTR _result$5$[ebp]
	add	esp, 16					; 00000010H
	pop	edi

; 604  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN17@PMC_Greate:

; 567  :             }
; 568  : 
; 569  :             __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR [esi+20]

; 570  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	eax, DWORD PTR [ebx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (x <= y ? x : y);

	cmp	ecx, eax
	mov	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 570  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	DWORD PTR _v_tzcnt$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (x <= y ? x : y);

	cmovbe	edx, ecx
	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 571  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	edx, DWORD PTR [esi+8]
	mov	esi, DWORD PTR [esi+32]

; 572  :             if (u_tzcnt > 0)

	test	ecx, ecx
	je	SHORT $LN18@PMC_Greate

; 573  :                 RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	push	edi
	push	ecx
	push	edx
	push	esi
	call	_RightShift_Imp
	mov	eax, DWORD PTR _v_tzcnt$1$[ebp]
	add	esp, 20					; 00000014H
	jmp	SHORT $LN31@PMC_Greate
$LN18@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, edx
	rep movsd
$LN31@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 576  :             if (v_tzcnt > 0)

	mov	ecx, DWORD PTR [ebx+8]
	mov	esi, DWORD PTR [ebx+32]
	mov	ebx, DWORD PTR _work_v_buf$1$[ebp]
	test	eax, eax
	je	SHORT $LN20@PMC_Greate

; 577  :                 RightShift_Imp(nv->BLOCK, nv->UNIT_WORD_COUNT, v_tzcnt, work_v_buf, FALSE);

	push	0
	push	ebx
	push	eax
	push	ecx
	push	esi
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN33@PMC_Greate
$LN20@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, ebx
	rep movsd
$LN33@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 582  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	esi, DWORD PTR _work_u_buf$1$[ebp]
	lea	eax, DWORD PTR _w_buf_count$6[ebp]
	push	eax
	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _work_bit_count$1$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 582  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	push	eax
	push	ebx
	push	esi
	call	_GreatestCommonDivisor_Imp

; 583  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_u_buf_code$2[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@PMC_Greate

; 584  :                 return (result);
; 585  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$1[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 586  :                 return (result);
; 587  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_check_code$3[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 588  :                 return (result);
; 589  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$4[ebp]
	push	ebx
	call	_DeallocateBlock

; 590  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	push	DWORD PTR _work_u_buf_words$5[ebp]
	push	esi
	call	_DeallocateBlock

; 591  : 
; 592  :             LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	eax, DWORD PTR _nw$[ebp]
	push	1
	mov	eax, DWORD PTR [eax+32]
	push	eax
	push	DWORD PTR _k$1$[ebp]
	push	DWORD PTR _w_buf_count$6[ebp]
	push	eax
	call	_LeftShift_Imp

; 593  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_check_code$3[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 594  :                 return (result);
; 595  :             CommitNumber(nw);

	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber

; 596  :             *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	add	esp, 4
	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi

; 604  : }

	pop	esi
	mov	DWORD PTR [ecx], eax
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN37@PMC_Greate:

; 508  :         {
; 509  :             // v が 0 である場合
; 510  : 
; 511  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 512  :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Greate:
	pop	edi

; 604  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_L@16
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_X_L@16 PROC			; COMDAT

; 465  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 466  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 467  :     {
; 468  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 469  :         return (PMC_STATUS_INTERNAL_ERROR);
; 470  :     }
; 471  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Greate

; 472  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 473  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Greate

; 475  :     PMC_STATUS_CODE result;
; 476  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 477  :         return (result);
; 478  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _v$[ebp+4]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_PMC_GreatestCommonDivisor_X_L_Imp
	add	esp, 16					; 00000010H
	pop	esi

; 479  :         return (result);
; 480  : #ifdef _DEBUG
; 481  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 482  :         return (result);
; 483  : #endif
; 484  :     return (PMC_STATUS_OK);
; 485  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Greate:

; 474  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Greate:
	pop	esi

; 479  :         return (result);
; 480  : #ifdef _DEBUG
; 481  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 482  :         return (result);
; 483  : #endif
; 484  :     return (PMC_STATUS_OK);
; 485  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_GreatestCommonDivisor_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_I@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_I@12 PROC			; COMDAT

; 199  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 200  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 201  :     {
; 202  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 203  :         return (PMC_STATUS_INTERNAL_ERROR);
; 204  :     }
; 205  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Greate

; 206  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 207  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Greate

; 209  :     PMC_STATUS_CODE result;
; 210  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 211  :         return (result);
; 212  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_PMC_GreatestCommonDivisor_X_I_Imp
	add	esp, 12					; 0000000cH
	pop	esi

; 213  :         return (result);
; 214  : #ifdef _DEBUG
; 215  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 216  :         return (result);
; 217  : #endif
; 218  :     return (PMC_STATUS_OK);
; 219  : }

	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Greate:

; 208  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Greate:
	pop	esi

; 213  :         return (result);
; 214  : #ifdef _DEBUG
; 215  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 216  :         return (result);
; 217  : #endif
; 218  :     return (PMC_STATUS_OK);
; 219  : }

	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_L_X@16
_TEXT	SEGMENT
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_L_X@16 PROC			; COMDAT

; 442  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 443  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 444  :     {
; 445  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 446  :         return (PMC_STATUS_INTERNAL_ERROR);
; 447  :     }
; 448  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Greate

; 449  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 450  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Greate

; 452  :     PMC_STATUS_CODE result;
; 453  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 454  :         return (result);
; 455  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _u$[ebp+4]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_PMC_GreatestCommonDivisor_X_L_Imp
	add	esp, 16					; 00000010H
	pop	esi

; 456  :         return (result);
; 457  : #ifdef _DEBUG
; 458  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 459  :         return (result);
; 460  : #endif
; 461  :     return (PMC_STATUS_OK);
; 462  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Greate:

; 451  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Greate:
	pop	esi

; 456  :         return (result);
; 457  : #ifdef _DEBUG
; 458  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 459  :         return (result);
; 460  : #endif
; 461  :     return (PMC_STATUS_OK);
; 462  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_GreatestCommonDivisor_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_I_X@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_I_X@12 PROC			; COMDAT

; 176  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 177  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 178  :     {
; 179  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 180  :         return (PMC_STATUS_INTERNAL_ERROR);
; 181  :     }
; 182  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Greate

; 183  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 184  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Greate

; 186  :     PMC_STATUS_CODE result;
; 187  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 188  :         return (result);
; 189  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_PMC_GreatestCommonDivisor_X_I_Imp
	add	esp, 12					; 0000000cH
	pop	esi

; 190  :         return (result);
; 191  : #ifdef _DEBUG
; 192  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 193  :         return (result);
; 194  : #endif
; 195  :     return (PMC_STATUS_OK);
; 196  : }

	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Greate:

; 185  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Greate:
	pop	esi

; 190  :         return (result);
; 191  : #ifdef _DEBUG
; 192  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 193  :         return (result);
; 194  : #endif
; 195  :     return (PMC_STATUS_OK);
; 196  : }

	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT _Initialize_GreatestCommonDivisor
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_GreatestCommonDivisor PROC			; COMDAT

; 608  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 609  : }

	ret	0
_Initialize_GreatestCommonDivisor ENDP
_TEXT	ENDS
END
