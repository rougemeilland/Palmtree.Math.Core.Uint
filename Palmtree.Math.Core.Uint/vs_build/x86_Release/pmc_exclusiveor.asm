; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_exclusiveor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_ExclusiveOr
PUBLIC	_PMC_ExclusiveOr_I_X@12
PUBLIC	_PMC_ExclusiveOr_L_X@16
PUBLIC	_PMC_ExclusiveOr_X_I@12
PUBLIC	_PMC_ExclusiveOr_X_L@16
PUBLIC	_PMC_ExclusiveOr_X_X@12
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	_number_zero:BYTE
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _PMC_ExclusiveOr_X_L_Imp
_TEXT	SEGMENT
_nw_light_check_code$1 = -4				; size = 4
_nw_light_check_code$2 = 8				; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_ExclusiveOr_X_L_Imp PROC				; COMDAT

; 282  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi

; 283  :     PMC_STATUS_CODE result;
; 284  :     if (u->IS_ZERO)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	BYTE PTR [esi+24], 2
	je	SHORT $LN2@PMC_Exclus

; 285  :     {
; 286  :         // x が 0 である場合
; 287  :         if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	or	eax, edx
	jne	SHORT $LN4@PMC_Exclus

; 288  :         {
; 289  :             // v が 0 である場合
; 290  :             *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	pop	edi

; 361  : }

	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], OFFSET _number_zero
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@PMC_Exclus:

; 291  :         }
; 292  :         else
; 293  :         {
; 294  :             // v が 0 でない場合
; 295  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	edx
	push	ecx
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN20@PMC_Exclus

; 361  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@PMC_Exclus:

; 296  :                 return (result);
; 297  :         }
; 298  :     }
; 299  :     else if (v == 0)

	mov	edi, DWORD PTR _v$[ebp]
	mov	eax, edi
	mov	ecx, DWORD PTR _v$[ebp+4]
	or	eax, ecx
	jne	SHORT $LN7@PMC_Exclus

; 300  :     {
; 301  :         // y が 0 である場合
; 302  :         if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN20@PMC_Exclus

; 361  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@PMC_Exclus:

; 303  :             return (result);
; 304  :     }
; 305  :     else
; 306  :     {
; 307  :         // u と v がともに 0 ではない場合
; 308  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 309  :         {
; 310  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 311  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+12]

; 312  :             _UINT32_T v_hi;
; 313  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 314  :             if (v_hi == 0)

	test	ecx, ecx
	jne	SHORT $LN12@PMC_Exclus
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 597  :         if (x == 0)

	test	edi, edi
	jne	SHORT $LN25@PMC_Exclus

; 598  :             return (sizeof(x) * 8);

	lea	ecx, DWORD PTR [edi+32]
	jmp	SHORT $LN24@PMC_Exclus
$LN25@PMC_Exclus:

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, edi

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
$LN24@PMC_Exclus:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 320  :                 if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _w$[ebp]
	mov	eax, 32					; 00000020H
	sub	eax, ecx
	lea	ecx, DWORD PTR _nw_light_check_code$2[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 320  :                 if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmovae	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 320  :                 if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	eax
	push	ebx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN1@PMC_Exclus

; 321  :                     return (result);
; 322  :                 ExclusiveOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, (*w)->BLOCK);

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR [eax+32]
	push	edi
	push	DWORD PTR [esi+8]
	push	DWORD PTR [esi+32]
	call	_ExclusiveOr_X_1W

; 323  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _nw_light_check_code$2[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN17@PMC_Exclus

; 361  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@PMC_Exclus:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 332  :                 if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _w$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 329  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	eax, 64					; 00000040H
	sub	eax, ecx

; 332  :                 if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nw_light_check_code$1[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 332  :                 if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmovae	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 332  :                 if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	eax
	push	ebx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Exclus

; 333  :                     return (result);
; 334  :                 ExclusiveOr_X_2W(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, (*w)->BLOCK);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+8]
	mov	esi, DWORD PTR [esi+32]
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [esi]
	xor	eax, edi

; 53   :     if (u_count == 1)

	mov	DWORD PTR [edx], eax
	cmp	ecx, 1
	jne	SHORT $LN35@PMC_Exclus

; 54   :     {
; 55   :         w[0] = u[0] ^ v_lo;
; 56   :         w[1] = v_hi;

	mov	ecx, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR [edx+4], ecx

; 57   :     }

	jmp	SHORT $LN40@PMC_Exclus
$LN35@PMC_Exclus:

; 58   :     else if (u_count == 2)

	mov	eax, DWORD PTR [esi+4]
	xor	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR [edx+4], eax
	cmp	ecx, 2
	je	SHORT $LN40@PMC_Exclus

; 59   :     {
; 60   :         w[0] = u[0] ^ v_lo;
; 61   :         w[1] = u[1] ^ v_hi;
; 62   :     }
; 63   :     else
; 64   :     {
; 65   :         w[0] = u[0] ^ v_lo;
; 66   :         w[1] = u[1] ^ v_hi;
; 67   :         _COPY_MEMORY_UNIT(w + 2, u + 2, u_count - 2);

	add	ecx, -2					; fffffffeH
	lea	edi, DWORD PTR [edx+8]
	add	esi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
$LN40@PMC_Exclus:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 335  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _nw_light_check_code$1[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Exclus
$LN17@PMC_Exclus:

; 336  :                     return (result);
; 337  :             }
; 338  :         }
; 339  :         else
; 340  :         {
; 341  :             // _UINT64_T が 1 ワードで表現できる場合
; 342  : 
; 343  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 344  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 345  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;
; 346  :             __UNIT_TYPE nw_light_check_code;
; 347  :             if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)
; 348  :                 return (result);
; 349  :             ExclusiveOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*w)->BLOCK);
; 350  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)
; 351  :                 return (result);
; 352  :         }
; 353  :         CommitNumber(*w);

	push	DWORD PTR [ebx]
	call	_CommitNumber

; 354  :         if ((*w)->IS_ZERO)

	mov	eax, DWORD PTR [ebx]
	add	esp, 4
	test	BYTE PTR [eax+24], 2
	je	SHORT $LN20@PMC_Exclus

; 355  :         {
; 356  :             DeallocateNumber(*w);

	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 357  :             *w = &number_zero;

	mov	DWORD PTR [ebx], OFFSET _number_zero
$LN20@PMC_Exclus:

; 358  :         }
; 359  :     }
; 360  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Exclus:
	pop	edi

; 361  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_PMC_ExclusiveOr_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _PMC_ExclusiveOr_X_I_Imp
_TEXT	SEGMENT
_nz_check_code$1 = 8					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_ExclusiveOr_X_I_Imp PROC				; COMDAT

; 188  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v$[ebp]
	push	edi

; 189  :     PMC_STATUS_CODE result;
; 190  :     if (u->IS_ZERO)

	mov	edi, DWORD PTR _u$[ebp]
	test	BYTE PTR [edi+24], 2
	je	SHORT $LN2@PMC_Exclus

; 191  :     {
; 192  :         // u が 0 である場合
; 193  :         if (v == 0)

	test	esi, esi
	jne	SHORT $LN4@PMC_Exclus

; 194  :         {
; 195  :             // v が 0 である場合
; 196  :             *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	pop	edi

; 231  : }

	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], OFFSET _number_zero
	xor	eax, eax
	pop	ebp
	ret	0
$LN4@PMC_Exclus:

; 197  :         }
; 198  :         else
; 199  :         {
; 200  :             // v が 0 でない場合
; 201  :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	esi
	call	_From_I_Imp
	add	esp, 8
	test	eax, eax
	je	$LN12@PMC_Exclus

; 231  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN2@PMC_Exclus:

; 202  :                 return (result);
; 203  :         }
; 204  :     }
; 205  :     else if (v == 0)

	test	esi, esi
	jne	SHORT $LN7@PMC_Exclus

; 206  :     {
; 207  :         // v が 0 である場合
; 208  :         if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	edi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN12@PMC_Exclus

; 231  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN7@PMC_Exclus:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 218  :         if ((result = AllocateNumber(w, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _w$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 215  :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	eax, 32					; 00000020H
	sub	eax, ecx

; 218  :         if ((result = AllocateNumber(w, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nz_check_code$1[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 218  :         if ((result = AllocateNumber(w, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	push	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmovae	eax, DWORD PTR [edi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 216  :         __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	inc	eax

; 218  :         if ((result = AllocateNumber(w, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	push	eax
	push	ebx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Exclus

; 219  :             return (result);
; 220  :         ExclusiveOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v, (*w)->BLOCK);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [edi+8]
	mov	edi, DWORD PTR [edi+32]
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edi]
	xor	eax, esi
	mov	DWORD PTR [edx], eax

; 41   :     if (u_count == 1)

	cmp	ecx, 1
	je	SHORT $LN23@PMC_Exclus

; 42   :         w[0] = u[0] ^ v;
; 43   :     else
; 44   :     {
; 45   :         w[0] = u[0] ^ v;
; 46   :         _COPY_MEMORY_UNIT(w + 1, u + 1, u_count - 1);

	lea	esi, DWORD PTR [edi+4]
	dec	ecx
	lea	edi, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
$LN23@PMC_Exclus:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 221  :         if ((result = CheckBlockLight((*w)->BLOCK, nz_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _nz_check_code$1[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@PMC_Exclus

; 222  :             return (result);
; 223  :         CommitNumber(*w);

	push	DWORD PTR [ebx]
	call	_CommitNumber

; 224  :         if ((*w)->IS_ZERO)

	mov	eax, DWORD PTR [ebx]
	add	esp, 4
	test	BYTE PTR [eax+24], 2
	je	SHORT $LN12@PMC_Exclus

; 225  :         {
; 226  :             DeallocateNumber(*w);

	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 227  :             *w = &number_zero;

	mov	DWORD PTR [ebx], OFFSET _number_zero
$LN12@PMC_Exclus:

; 228  :         }
; 229  :     }
; 230  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Exclus:
	pop	edi

; 231  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_PMC_ExclusiveOr_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _ExclusiveOr_X_X
_TEXT	SEGMENT
tv2458 = -32						; size = 4
tv2453 = -32						; size = 4
tv2455 = -28						; size = 4
tv2454 = -28						; size = 4
tv2456 = -24						; size = 4
tv2459 = -20						; size = 4
_count$1$ = -16						; size = 4
_v$1$ = -12						; size = 4
tv2460 = -8						; size = 4
tv2457 = -8						; size = 4
_w$1$ = -8						; size = 4
_u$1$ = -4						; size = 4
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w$ = 24						; size = 4
_ExclusiveOr_X_X PROC					; COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 74   :     __UNIT_TYPE or_count = v_count;
; 75   :     __UNIT_TYPE cp_count = u_count - v_count;
; 76   : 
; 77   :     __UNIT_TYPE count = or_count >> 5;
; 78   :     while (count > 0)

	mov	edx, DWORD PTR _v$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _v_count$[ebp]
	mov	eax, ebx
	sub	DWORD PTR _u_count$[ebp], ebx
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$1$[ebp], eax
	mov	DWORD PTR _u$1$[ebp], esi
	push	edi
	mov	edi, DWORD PTR _w$[ebp]
	mov	DWORD PTR _w$1$[ebp], edi
	test	eax, eax
	je	$LN3@ExclusiveO
	mov	DWORD PTR _v$1$[ebp], edx
$LL2@ExclusiveO:

; 79   :     {
; 80   :         w[0] = u[0] ^ v[0];

	lea	ecx, DWORD PTR [edx+16]
	xor	ebx, ebx
	lea	eax, DWORD PTR [ecx+108]
	cmp	edi, eax
	ja	SHORT $LN29@ExclusiveO
	lea	eax, DWORD PTR [edi+124]
	cmp	eax, edx
	jae	SHORT $LN69@ExclusiveO
$LN29@ExclusiveO:
	lea	eax, DWORD PTR [esi+48]
	mov	DWORD PTR tv2453[ebp], eax
	add	eax, 76					; 0000004cH
	cmp	edi, eax
	ja	SHORT $LN30@ExclusiveO
	lea	eax, DWORD PTR [edi+124]
	cmp	eax, esi
	jb	SHORT $LN30@ExclusiveO
$LN69@ExclusiveO:
	mov	DWORD PTR tv2460[ebp], esi
	mov	ecx, edi
	sub	esi, edx
	mov	eax, edx
	sub	ecx, edx
	mov	ebx, 32					; 00000020H
	mov	DWORD PTR tv2457[ebp], ecx
	mov	edx, ecx
	npad	3
$LL67@ExclusiveO:
	mov	ecx, DWORD PTR [eax+esi]
	lea	eax, DWORD PTR [eax+4]
	xor	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR [eax+edx-4], ecx
	sub	ebx, 1
	jne	SHORT $LL67@ExclusiveO
	mov	esi, DWORD PTR _u$1$[ebp]
	jmp	$LN73@ExclusiveO
$LN30@ExclusiveO:
	lea	eax, DWORD PTR [edi+32]
	mov	edi, esi
	mov	esi, DWORD PTR _w$1$[ebp]
	sub	edi, edx
	sub	esi, edx
	mov	DWORD PTR tv2459[ebp], edi
	mov	DWORD PTR tv2456[ebp], esi
	mov	esi, DWORD PTR _u$1$[ebp]
	mov	edx, esi
	sub	edx, DWORD PTR _w$1$[ebp]
	mov	DWORD PTR tv2454[ebp], edx
	mov	edx, edi
	mov	edi, DWORD PTR tv2456[ebp]
	npad	4
$LL14@ExclusiveO:
	movups	xmm1, XMMWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR tv2454[ebp]
	lea	ecx, DWORD PTR [ecx+64]
	movups	xmm0, XMMWORD PTR [ecx-80]
	lea	eax, DWORD PTR [eax+64]
	pxor	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [ecx-64]
	movups	XMMWORD PTR [eax-96], xmm1
	movups	xmm1, XMMWORD PTR [edx+ecx-64]
	pxor	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [ecx-48]
	movups	XMMWORD PTR [edi+ecx-64], xmm1
	movups	xmm1, XMMWORD PTR [esi+eax-64]
	mov	esi, DWORD PTR tv2453[ebp]
	pxor	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [ecx-32]
	movups	XMMWORD PTR [eax-64], xmm1
	movups	xmm1, XMMWORD PTR [esi+ebx*4]
	mov	esi, DWORD PTR _u$1$[ebp]
	add	ebx, 16					; 00000010H
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [eax-48], xmm1
	cmp	ebx, 32					; 00000020H
	jl	SHORT $LL14@ExclusiveO
	mov	edi, DWORD PTR _w$1$[ebp]
$LN73@ExclusiveO:

; 81   :         w[1] = u[1] ^ v[1];
; 82   :         w[2] = u[2] ^ v[2];
; 83   :         w[3] = u[3] ^ v[3];
; 84   :         w[4] = u[4] ^ v[4];
; 85   :         w[5] = u[5] ^ v[5];
; 86   :         w[6] = u[6] ^ v[6];
; 87   :         w[7] = u[7] ^ v[7];
; 88   :         w[8] = u[8] ^ v[8];
; 89   :         w[9] = u[9] ^ v[9];
; 90   :         w[10] = u[10] ^ v[10];
; 91   :         w[11] = u[11] ^ v[11];
; 92   :         w[12] = u[12] ^ v[12];
; 93   :         w[13] = u[13] ^ v[13];
; 94   :         w[14] = u[14] ^ v[14];
; 95   :         w[15] = u[15] ^ v[15];
; 96   :         w[16] = u[16] ^ v[16];
; 97   :         w[17] = u[17] ^ v[17];
; 98   :         w[18] = u[18] ^ v[18];
; 99   :         w[19] = u[19] ^ v[19];
; 100  :         w[20] = u[20] ^ v[20];
; 101  :         w[21] = u[21] ^ v[21];
; 102  :         w[22] = u[22] ^ v[22];
; 103  :         w[23] = u[23] ^ v[23];
; 104  :         w[24] = u[24] ^ v[24];
; 105  :         w[25] = u[25] ^ v[25];
; 106  :         w[26] = u[26] ^ v[26];
; 107  :         w[27] = u[27] ^ v[27];
; 108  :         w[28] = u[28] ^ v[28];
; 109  :         w[29] = u[29] ^ v[29];
; 110  :         w[30] = u[30] ^ v[30];
; 111  :         w[31] = u[31] ^ v[31];
; 112  :         u += 32;

	mov	edx, DWORD PTR _v$1$[ebp]
	sub	esi, -128				; ffffff80H

; 113  :         v += 32;

	sub	edx, -128				; ffffff80H
	mov	DWORD PTR _u$1$[ebp], esi

; 114  :         w += 32;

	sub	edi, -128				; ffffff80H
	mov	DWORD PTR _v$1$[ebp], edx

; 115  :         --count;

	sub	DWORD PTR _count$1$[ebp], 1
	mov	DWORD PTR _w$1$[ebp], edi
	jne	$LL2@ExclusiveO

; 74   :     __UNIT_TYPE or_count = v_count;
; 75   :     __UNIT_TYPE cp_count = u_count - v_count;
; 76   : 
; 77   :     __UNIT_TYPE count = or_count >> 5;
; 78   :     while (count > 0)

	mov	ebx, DWORD PTR _v_count$[ebp]
$LN3@ExclusiveO:

; 116  :     }
; 117  : 
; 118  :     if (or_count & 0x10)

	test	bl, 16					; 00000010H
	je	$LN4@ExclusiveO

; 119  :     {
; 120  :         w[0] = u[0] ^ v[0];

	lea	eax, DWORD PTR [edx+60]
	lea	ecx, DWORD PTR [edi+60]
	cmp	edi, eax
	ja	SHORT $LN33@ExclusiveO
	cmp	ecx, edx
	jae	SHORT $LN71@ExclusiveO
$LN33@ExclusiveO:
	lea	eax, DWORD PTR [esi+60]
	cmp	edi, eax
	ja	SHORT $LN34@ExclusiveO
	cmp	ecx, esi
	jb	SHORT $LN34@ExclusiveO
$LN71@ExclusiveO:
	mov	eax, esi
	mov	ecx, edx
	sub	eax, edx
	mov	ebx, 16					; 00000010H
	mov	DWORD PTR tv2458[ebp], eax
	mov	eax, edi
	mov	edi, DWORD PTR tv2458[ebp]
	sub	eax, edx
	mov	DWORD PTR tv2455[ebp], eax
	mov	esi, eax
	npad	5
$LL68@ExclusiveO:
	mov	eax, DWORD PTR [edi+ecx]
	lea	ecx, DWORD PTR [ecx+4]
	xor	eax, DWORD PTR [ecx-4]
	mov	DWORD PTR [esi+ecx-4], eax
	sub	ebx, 1
	jne	SHORT $LL68@ExclusiveO
	mov	edi, DWORD PTR _w$1$[ebp]
	mov	esi, DWORD PTR _u$1$[ebp]
	mov	ebx, DWORD PTR _v_count$[ebp]
	jmp	SHORT $LN17@ExclusiveO
$LN34@ExclusiveO:
	movups	xmm0, XMMWORD PTR [edx]
	movups	xmm1, XMMWORD PTR [esi]
	pxor	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [edx+16]
	movups	XMMWORD PTR [edi], xmm1
	movups	xmm1, XMMWORD PTR [esi+16]
	pxor	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [edx+32]
	movups	XMMWORD PTR [edi+16], xmm1
	movups	xmm1, XMMWORD PTR [esi+32]
	pxor	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [edx+48]
	movups	XMMWORD PTR [edi+32], xmm1
	movups	xmm1, XMMWORD PTR [esi+48]
	pxor	xmm1, xmm0
	movups	XMMWORD PTR [edi+48], xmm1
$LN17@ExclusiveO:

; 121  :         w[1] = u[1] ^ v[1];
; 122  :         w[2] = u[2] ^ v[2];
; 123  :         w[3] = u[3] ^ v[3];
; 124  :         w[4] = u[4] ^ v[4];
; 125  :         w[5] = u[5] ^ v[5];
; 126  :         w[6] = u[6] ^ v[6];
; 127  :         w[7] = u[7] ^ v[7];
; 128  :         w[8] = u[8] ^ v[8];
; 129  :         w[9] = u[9] ^ v[9];
; 130  :         w[10] = u[10] ^ v[10];
; 131  :         w[11] = u[11] ^ v[11];
; 132  :         w[12] = u[12] ^ v[12];
; 133  :         w[13] = u[13] ^ v[13];
; 134  :         w[14] = u[14] ^ v[14];
; 135  :         w[15] = u[15] ^ v[15];
; 136  :         u += 16;

	add	esi, 64					; 00000040H

; 137  :         v += 16;

	add	edx, 64					; 00000040H

; 138  :         w += 16;

	add	edi, 64					; 00000040H
$LN4@ExclusiveO:

; 139  :     }
; 140  : 
; 141  :     if (or_count & 0x8)

	test	bl, 8
	je	SHORT $LN5@ExclusiveO

; 142  :     {
; 143  :         w[0] = u[0] ^ v[0];

	mov	eax, DWORD PTR [esi]
	xor	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [esi+4]
	xor	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR [esi+8]
	xor	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [edi+8], eax
	mov	eax, DWORD PTR [esi+12]
	xor	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [edi+12], eax
	mov	eax, DWORD PTR [esi+16]
	xor	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [edi+16], eax
	mov	eax, DWORD PTR [esi+20]
	xor	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [edi+20], eax
	mov	eax, DWORD PTR [esi+24]
	xor	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [edi+24], eax
	mov	eax, DWORD PTR [esi+28]

; 144  :         w[1] = u[1] ^ v[1];
; 145  :         w[2] = u[2] ^ v[2];
; 146  :         w[3] = u[3] ^ v[3];
; 147  :         w[4] = u[4] ^ v[4];
; 148  :         w[5] = u[5] ^ v[5];
; 149  :         w[6] = u[6] ^ v[6];
; 150  :         w[7] = u[7] ^ v[7];
; 151  :         u += 8;

	add	esi, 32					; 00000020H
	xor	eax, DWORD PTR [edx+28]

; 152  :         v += 8;

	add	edx, 32					; 00000020H
	mov	DWORD PTR [edi+28], eax

; 153  :         w += 8;

	add	edi, 32					; 00000020H
$LN5@ExclusiveO:

; 154  :     }
; 155  : 
; 156  :     if (or_count & 0x4)

	test	bl, 4
	je	SHORT $LN6@ExclusiveO

; 157  :     {
; 158  :         w[0] = u[0] ^ v[0];

	mov	eax, DWORD PTR [esi]
	xor	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [esi+4]
	xor	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR [esi+8]
	xor	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [edi+8], eax
	mov	eax, DWORD PTR [esi+12]

; 159  :         w[1] = u[1] ^ v[1];
; 160  :         w[2] = u[2] ^ v[2];
; 161  :         w[3] = u[3] ^ v[3];
; 162  :         u += 4;

	add	esi, 16					; 00000010H
	xor	eax, DWORD PTR [edx+12]

; 163  :         v += 4;

	add	edx, 16					; 00000010H
	mov	DWORD PTR [edi+12], eax

; 164  :         w += 4;

	add	edi, 16					; 00000010H
$LN6@ExclusiveO:

; 165  :     }
; 166  : 
; 167  :     if (or_count & 0x2)

	test	bl, 2
	je	SHORT $LN7@ExclusiveO

; 168  :     {
; 169  :         w[0] = u[0] ^ v[0];

	mov	eax, DWORD PTR [esi]
	xor	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 170  :         w[1] = u[1] ^ v[1];

	mov	eax, DWORD PTR [esi+4]

; 171  :         u += 2;

	add	esi, 8
	xor	eax, DWORD PTR [edx+4]

; 172  :         v += 2;

	add	edx, 8
	mov	DWORD PTR [edi+4], eax

; 173  :         w += 2;

	add	edi, 8
$LN7@ExclusiveO:

; 174  :     }
; 175  : 
; 176  :     if (or_count & 0x1)

	test	bl, 1
	je	SHORT $LN8@ExclusiveO

; 177  :     {
; 178  :         w[0] = u[0] ^ v[0];

	mov	eax, DWORD PTR [esi]

; 179  :         u += 1;

	add	esi, 4
	xor	eax, DWORD PTR [edx]
	mov	DWORD PTR [edi], eax

; 180  :         v += 1;
; 181  :         w += 1;

	add	edi, 4
$LN8@ExclusiveO:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _u_count$[ebp]
	rep movsd
	pop	edi
	pop	esi
	pop	ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 185  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ExclusiveOr_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _ExclusiveOr_X_2W
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w$ = 24						; size = 4
_ExclusiveOr_X_2W PROC					; COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp

; 53   :     if (u_count == 1)

	mov	edx, DWORD PTR _u_count$[ebp]
	mov	ecx, DWORD PTR _v_hi$[ebp]
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	mov	edi, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [esi]
	xor	eax, DWORD PTR _v_lo$[ebp]
	mov	DWORD PTR [edi], eax
	cmp	edx, 1
	jne	SHORT $LN2@ExclusiveO

; 54   :     {
; 55   :         w[0] = u[0] ^ v_lo;
; 56   :         w[1] = v_hi;

	mov	DWORD PTR [edi+4], ecx
	pop	edi

; 69   : }

	pop	esi
	pop	ebp
	ret	0
$LN2@ExclusiveO:

; 57   :     }
; 58   :     else if (u_count == 2)

	mov	eax, DWORD PTR [esi+4]
	xor	eax, ecx
	mov	DWORD PTR [edi+4], eax
	cmp	edx, 2
	je	SHORT $LN7@ExclusiveO

; 59   :     {
; 60   :         w[0] = u[0] ^ v_lo;
; 61   :         w[1] = u[1] ^ v_hi;
; 62   :     }
; 63   :     else
; 64   :     {
; 65   :         w[0] = u[0] ^ v_lo;
; 66   :         w[1] = u[1] ^ v_hi;
; 67   :         _COPY_MEMORY_UNIT(w + 2, u + 2, u_count - 2);

	add	esi, 8
	lea	ecx, DWORD PTR [edx-2]
	add	edi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
$LN7@ExclusiveO:
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 69   : }

	pop	esi
	pop	ebp
	ret	0
_ExclusiveOr_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _ExclusiveOr_X_1W
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_ExclusiveOr_X_1W PROC					; COMDAT

; 40   : {

	push	ebp
	mov	ebp, esp

; 41   :     if (u_count == 1)

	mov	ecx, DWORD PTR _u_count$[ebp]
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	mov	edi, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [esi]
	xor	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR [edi], eax
	cmp	ecx, 1
	je	SHORT $LN5@ExclusiveO

; 42   :         w[0] = u[0] ^ v;
; 43   :     else
; 44   :     {
; 45   :         w[0] = u[0] ^ v;
; 46   :         _COPY_MEMORY_UNIT(w + 1, u + 1, u_count - 1);

	dec	ecx
	add	esi, 4
	add	edi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
$LN5@ExclusiveO:
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 48   : }

	pop	esi
	pop	ebp
	ret	0
_ExclusiveOr_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 629  :     {

	push	ebp
	mov	ebp, esp

; 630  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 655  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);
; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 655  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 596  :     {

	push	ebp
	mov	ebp, esp

; 597  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 598  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 608  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 608  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MAXIMUM_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC					; COMDAT

; 203  :     {

	push	ebp
	mov	ebp, esp

; 204  :         return (x >= y ? x : y);

	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	cmovae	eax, DWORD PTR _x$[ebp]

; 205  :     }

	pop	ebp
	ret	0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 182  :     {

	push	ebp
	mov	ebp, esp

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 184  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 185  :     }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 66   :     {

	push	ebp
	mov	ebp, esp

; 67   : #ifdef _M_IX86
; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 69   : #elif defined(_M_X64)
; 70   :         __movsq(d, s, count);
; 71   : #else
; 72   : #error unknown platform
; 73   : #endif
; 74   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _PMC_ExclusiveOr_X_X@12
_TEXT	SEGMENT
tv310 = 8						; size = 4
_u$ = 8							; size = 4
_nw$ = 12						; size = 4
_v$ = 12						; size = 4
_nw_light_check_code$1 = 16				; size = 4
_w$ = 16						; size = 4
_PMC_ExclusiveOr_X_X@12 PROC				; COMDAT

; 412  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	mov	edi, DWORD PTR _u$[ebp]

; 413  :     if (u == NULL)

	test	edi, edi
	je	$LN20@PMC_Exclus

; 414  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 415  :     if (v == NULL)

	test	esi, esi
	je	$LN20@PMC_Exclus

; 416  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 417  :     if (w == NULL)

	mov	ebx, DWORD PTR _w$[ebp]
	test	ebx, ebx
	je	$LN20@PMC_Exclus

; 419  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 420  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 421  :     PMC_STATUS_CODE result;
; 422  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Exclus

; 423  :         return (result);
; 424  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Exclus

; 425  :         return (result);
; 426  :     NUMBER_HEADER* nw;
; 427  :     if (nu->IS_ZERO)

	test	BYTE PTR [edi+24], 2
	lea	eax, DWORD PTR _nw$[ebp]
	je	SHORT $LN7@PMC_Exclus

; 428  :     {
; 429  :         if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	SHORT $LN21@PMC_Exclus

; 467  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Exclus:

; 430  :             return (result);
; 431  :     }
; 432  :     else if (nv->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	je	SHORT $LN10@PMC_Exclus

; 433  :     {
; 434  :         if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	push	eax
	push	edi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Exclus
$LN21@PMC_Exclus:

; 428  :     {
; 429  :         if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	pop	edi

; 459  :         }
; 460  :     }
; 461  :     *w = nw;

	mov	DWORD PTR [ebx], eax

; 462  : #ifdef _DEBUG
; 463  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 464  :         return (result);
; 465  : #endif
; 466  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 467  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN10@PMC_Exclus:

; 435  :             return (result);
; 436  :     }
; 437  :     else
; 438  :     {
; 439  :         if (nu->UNIT_WORD_COUNT < nv->UNIT_WORD_COUNT)

	mov	ecx, DWORD PTR [edi+8]

; 440  :         {
; 441  :             NUMBER_HEADER* t = nu;
; 442  :             nu = nv;
; 443  :             nv = t;
; 444  :         }
; 445  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, edi
	cmp	ecx, DWORD PTR [esi+8]
	cmovae	edx, esi
	cmovae	esi, edi
	mov	DWORD PTR tv310[ebp], edx

; 446  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR [edx+12]

; 449  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nw_light_check_code$1[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	DWORD PTR [esi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 449  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmovae	ecx, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c

; 449  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	ecx
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Exclus

; 450  :             return (result);
; 451  :         ExclusiveOr_X_X(nu->BLOCK, nu->UNIT_WORD_COUNT, nv->BLOCK, nv->UNIT_WORD_COUNT, nw->BLOCK);

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+32]
	mov	eax, DWORD PTR tv310[ebp]
	push	DWORD PTR [eax+8]
	push	DWORD PTR [eax+32]
	push	DWORD PTR [esi+8]
	push	DWORD PTR [esi+32]
	call	_ExclusiveOr_X_X

; 452  :         if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_light_check_code$1[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Exclus

; 453  :             return (result);
; 454  :         CommitNumber(nw);

	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber

; 455  :         if (nw->IS_ZERO)

	mov	eax, DWORD PTR _nw$[ebp]
	add	esp, 4
	test	BYTE PTR [eax+24], 2
	je	SHORT $LN16@PMC_Exclus

; 456  :         {
; 457  :             DeallocateNumber(nw);

	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 458  :             nw = &number_zero;

	mov	eax, OFFSET _number_zero
$LN16@PMC_Exclus:

; 459  :         }
; 460  :     }
; 461  :     *w = nw;

	pop	edi
	mov	DWORD PTR [ebx], eax

; 462  : #ifdef _DEBUG
; 463  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 464  :         return (result);
; 465  : #endif
; 466  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 467  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN20@PMC_Exclus:

; 418  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Exclus:
	pop	edi

; 467  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
_PMC_ExclusiveOr_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _PMC_ExclusiveOr_X_L@16
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_ExclusiveOr_X_L@16 PROC				; COMDAT

; 388  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 389  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 390  :     {
; 391  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 392  :         return (PMC_STATUS_INTERNAL_ERROR);
; 393  :     }
; 394  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Exclus

; 395  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 396  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Exclus

; 398  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 399  :     PMC_STATUS_CODE result;
; 400  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Exclus

; 401  :         return (result);
; 402  :     if ((result = PMC_ExclusiveOr_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _v$[ebp+4]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_PMC_ExclusiveOr_X_L_Imp
	add	esp, 16					; 00000010H
	pop	esi

; 403  :         return (result);
; 404  : #ifdef _DEBUG
; 405  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 406  :         return (result);
; 407  : #endif
; 408  :     return (PMC_STATUS_OK);
; 409  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Exclus:

; 397  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Exclus:
	pop	esi

; 403  :         return (result);
; 404  : #ifdef _DEBUG
; 405  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 406  :         return (result);
; 407  : #endif
; 408  :     return (PMC_STATUS_OK);
; 409  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_ExclusiveOr_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _PMC_ExclusiveOr_X_I@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_ExclusiveOr_X_I@12 PROC				; COMDAT

; 258  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 259  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 260  :     {
; 261  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 262  :         return (PMC_STATUS_INTERNAL_ERROR);
; 263  :     }
; 264  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Exclus

; 265  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 266  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Exclus

; 268  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 269  :     PMC_STATUS_CODE result;
; 270  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Exclus

; 271  :         return (result);
; 272  :     if ((result = PMC_ExclusiveOr_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_PMC_ExclusiveOr_X_I_Imp
	add	esp, 12					; 0000000cH
	pop	esi

; 273  :         return (result);
; 274  : #ifdef _DEBUG
; 275  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 276  :         return (result);
; 277  : #endif
; 278  :     return (PMC_STATUS_OK);
; 279  : }

	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Exclus:

; 267  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Exclus:
	pop	esi

; 273  :         return (result);
; 274  : #ifdef _DEBUG
; 275  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 276  :         return (result);
; 277  : #endif
; 278  :     return (PMC_STATUS_OK);
; 279  : }

	pop	ebp
	ret	12					; 0000000cH
_PMC_ExclusiveOr_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _PMC_ExclusiveOr_L_X@16
_TEXT	SEGMENT
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_ExclusiveOr_L_X@16 PROC				; COMDAT

; 364  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 365  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 366  :     {
; 367  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 368  :         return (PMC_STATUS_INTERNAL_ERROR);
; 369  :     }
; 370  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Exclus

; 371  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 372  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Exclus

; 374  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)v;
; 375  :     PMC_STATUS_CODE result;
; 376  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Exclus

; 377  :         return (result);
; 378  :     if ((result = PMC_ExclusiveOr_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _u$[ebp+4]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_PMC_ExclusiveOr_X_L_Imp
	add	esp, 16					; 00000010H
	pop	esi

; 379  :         return (result);
; 380  : #ifdef _DEBUG
; 381  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 382  :         return (result);
; 383  : #endif
; 384  :     return (PMC_STATUS_OK);
; 385  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Exclus:

; 373  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Exclus:
	pop	esi

; 379  :         return (result);
; 380  : #ifdef _DEBUG
; 381  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 382  :         return (result);
; 383  : #endif
; 384  :     return (PMC_STATUS_OK);
; 385  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_ExclusiveOr_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _PMC_ExclusiveOr_I_X@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_ExclusiveOr_I_X@12 PROC				; COMDAT

; 234  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 235  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 236  :     {
; 237  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 238  :         return (PMC_STATUS_INTERNAL_ERROR);
; 239  :     }
; 240  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Exclus

; 241  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 242  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Exclus

; 244  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)v;
; 245  :     PMC_STATUS_CODE result;
; 246  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Exclus

; 247  :         return (result);
; 248  :     if ((result = PMC_ExclusiveOr_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_PMC_ExclusiveOr_X_I_Imp
	add	esp, 12					; 0000000cH
	pop	esi

; 249  :         return (result);
; 250  : #ifdef _DEBUG
; 251  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 252  :         return (result);
; 253  : #endif
; 254  :     return (PMC_STATUS_OK);
; 255  : }

	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Exclus:

; 243  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Exclus:
	pop	esi

; 249  :         return (result);
; 250  : #ifdef _DEBUG
; 251  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 252  :         return (result);
; 253  : #endif
; 254  :     return (PMC_STATUS_OK);
; 255  : }

	pop	ebp
	ret	12					; 0000000cH
_PMC_ExclusiveOr_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.c
;	COMDAT _Initialize_ExclusiveOr
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_ExclusiveOr PROC				; COMDAT

; 471  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 472  : }

	ret	0
_Initialize_ExclusiveOr ENDP
_TEXT	ENDS
END
