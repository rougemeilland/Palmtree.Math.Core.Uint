; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_shift.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_RightShift_Imp_DIV
PUBLIC	_RightShift_Imp
PUBLIC	_LeftShift_Imp_DIV
PUBLIC	_LeftShift_Imp
PUBLIC	_Initialize_Shift
PUBLIC	_PMC_RightShift_X_I@12
PUBLIC	_PMC_LeftShift_X_I@12
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_number_zero:BYTE
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_UNIT_DIV
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT_DIV PROC				; COMDAT

; 121  :     {

	push	ebp
	mov	ebp, esp

; 122  : #ifdef _M_IX86
; 123  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 124  : #elif defined(_M_X64)
; 125  : #ifdef _MSC_VER
; 126  :         __stosd((unsigned long*)d, 0, (unsigned long)count);
; 127  : #elif defined(__GNUC__)
; 128  :         __stosq(d, 0, count);
; 129  : #else
; 130  : #error unknown compiler
; 131  : #endif
; 132  : #else
; 133  : #error unknown platform
; 134  : #endif
; 135  :     }

	pop	ebp
	ret	0
__ZERO_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT PROC					; COMDAT

; 110  :     {

	push	ebp
	mov	ebp, esp

; 111  : #ifdef _M_IX86
; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 113  : #elif defined(_M_X64)
; 114  :         __stosq(d, 0, count);
; 115  : #else
; 116  : #error unknown platform
; 117  : #endif
; 118  :     }

	pop	ebp
	ret	0
__ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT_DIV
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT_DIV PROC				; COMDAT

; 71   :     {

	push	ebp
	mov	ebp, esp

; 72   : #ifdef _M_IX86
; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 74   : #elif defined(_M_X64)
; 75   : #ifdef _MSC_VER
; 76   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 77   : #elif defined(__GNUC__)
; 78   :         __movsq(d, s, count);
; 79   : #else
; 80   : #error unknown compiler
; 81   : #endif
; 82   : #else
; 83   : #error unknown platform
; 84   : #endif
; 85   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	push	ebp
	mov	ebp, esp

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);
; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT _PMC_LeftShift_X_I@12
_TEXT	SEGMENT
_no$ = 8						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
_no_light_check_code$1 = 16				; size = 4
_o$ = 16						; size = 4
_PMC_LeftShift_X_I@12 PROC				; COMDAT

; 621  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 622  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)
; 623  :     {
; 624  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 625  :         return (PMC_STATUS_NOT_SUPPORTED);
; 626  :     }
; 627  :     if (p == NULL)

	mov	esi, DWORD PTR _p$[ebp]
	push	edi
	test	esi, esi
	je	$LN14@PMC_LeftSh

; 628  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 629  :     if (o == NULL)

	mov	edi, DWORD PTR _o$[ebp]
	test	edi, edi
	je	$LN14@PMC_LeftSh

; 631  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 632  :     NUMBER_HEADER* no;
; 633  :     PMC_STATUS_CODE result;
; 634  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_LeftSh

; 635  :         return (result);
; 636  :     if (np->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	push	ebx
	je	SHORT $LN6@PMC_LeftSh

; 637  :         *o = (PMC_HANDLE_UINT)&number_zero;

	pop	ebx
	mov	DWORD PTR [edi], OFFSET _number_zero
	pop	edi

; 662  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN6@PMC_LeftSh:

; 638  :     else if (n == 0)

	mov	ebx, DWORD PTR _n$[ebp]
	test	ebx, ebx
	jne	SHORT $LN8@PMC_LeftSh

; 639  :     {
; 640  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@PMC_LeftSh
$LN15@PMC_LeftSh:
	pop	ebx
$LN1@PMC_LeftSh:
	pop	edi

; 662  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_LeftSh:

; 641  :             return (result);
; 642  :         *o = (PMC_HANDLE_UINT)no;
; 643  :     }
; 644  :     else
; 645  :     {
; 646  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;
; 647  :         __UNIT_TYPE o_bit_count = p_bit_count + n;

	mov	eax, DWORD PTR [esi+12]

; 648  :         __UNIT_TYPE no_light_check_code;
; 649  :         if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _no_light_check_code$1[ebp]
	add	eax, ebx
	push	ecx
	push	eax
	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN15@PMC_LeftSh

; 650  :             return (result);
; 651  :         LeftShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, n, no->BLOCK, FALSE);

	push	eax
	mov	eax, DWORD PTR _no$[ebp]
	push	DWORD PTR [eax+32]
	push	ebx
	push	DWORD PTR [esi+8]
	push	DWORD PTR [esi+32]
	call	_LeftShift_Imp

; 652  :         if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _no$[ebp]
	push	DWORD PTR _no_light_check_code$1[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN15@PMC_LeftSh

; 653  :             return (result);
; 654  :         CommitNumber(no);

	push	DWORD PTR _no$[ebp]
	call	_CommitNumber
	add	esp, 4
$LN16@PMC_LeftSh:

; 655  :         *o = (PMC_HANDLE_UINT)no;
; 656  :     }
; 657  : #ifdef _DEBUG
; 658  :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)
; 659  :         return (result);
; 660  : #endif
; 661  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _no$[ebp]
	pop	ebx
	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 662  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN14@PMC_LeftSh:
	pop	edi

; 630  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 662  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
_PMC_LeftShift_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT _PMC_RightShift_X_I@12
_TEXT	SEGMENT
_no$ = 8						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
_no_light_check_code$1 = 16				; size = 4
_o$ = 16						; size = 4
_PMC_RightShift_X_I@12 PROC				; COMDAT

; 572  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 573  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)
; 574  :     {
; 575  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 576  :         return (PMC_STATUS_NOT_SUPPORTED);
; 577  :     }
; 578  :     if (p == NULL)

	mov	esi, DWORD PTR _p$[ebp]
	push	edi
	test	esi, esi
	je	$LN17@PMC_RightS

; 579  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 580  :     if (o == NULL)

	mov	edi, DWORD PTR _o$[ebp]
	test	edi, edi
	je	$LN17@PMC_RightS

; 582  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 583  :     NUMBER_HEADER* no;
; 584  :     PMC_STATUS_CODE result;
; 585  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_RightS

; 586  :         return (result);
; 587  :     if (np->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	push	ebx
	jne	$LN16@PMC_RightS

; 588  :         *o = (PMC_HANDLE_UINT)&number_zero;
; 589  :     else if (n == 0)

	mov	ebx, DWORD PTR _n$[ebp]
	test	ebx, ebx
	jne	SHORT $LN8@PMC_RightS

; 590  :     {
; 591  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@PMC_RightS

; 592  :             return (result);
; 593  :         *o = (PMC_HANDLE_UINT)no;

	mov	eax, DWORD PTR _no$[ebp]
	pop	ebx
	mov	DWORD PTR [edi], eax

; 611  :         }
; 612  :     }
; 613  : #ifdef _DEBUG
; 614  :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)
; 615  :         return (result);
; 616  : #endif
; 617  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 618  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_RightS:

; 594  :     }
; 595  :     else
; 596  :     {
; 597  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR [esi+12]

; 598  :         if (p_bit_count <= n)

	cmp	eax, ebx
	jbe	SHORT $LN16@PMC_RightS

; 600  :         else
; 601  :         {
; 602  :             __UNIT_TYPE o_bit_count = p_bit_count - n;
; 603  :             __UNIT_TYPE no_light_check_code;
; 604  :             if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _no_light_check_code$1[ebp]
	sub	eax, ebx
	push	ecx
	push	eax
	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN18@PMC_RightS

; 605  :                 return (result);
; 606  :             RightShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, n, no->BLOCK, FALSE);

	push	eax
	mov	eax, DWORD PTR _no$[ebp]
	push	DWORD PTR [eax+32]
	push	ebx
	push	DWORD PTR [esi+8]
	push	DWORD PTR [esi+32]
	call	_RightShift_Imp

; 607  :             if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _no$[ebp]
	push	DWORD PTR _no_light_check_code$1[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN18@PMC_RightS

; 608  :                 return (result);
; 609  :             CommitNumber(no);

	push	DWORD PTR _no$[ebp]
	call	_CommitNumber

; 610  :             *o = (PMC_HANDLE_UINT)no;

	mov	eax, DWORD PTR _no$[ebp]
	add	esp, 4
	mov	DWORD PTR [edi], eax

; 611  :         }
; 612  :     }
; 613  : #ifdef _DEBUG
; 614  :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)
; 615  :         return (result);
; 616  : #endif
; 617  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	ebx
	pop	edi

; 618  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN16@PMC_RightS:

; 599  :             *o = (PMC_HANDLE_UINT)&number_zero;

	mov	DWORD PTR [edi], OFFSET _number_zero

; 611  :         }
; 612  :     }
; 613  : #ifdef _DEBUG
; 614  :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)
; 615  :         return (result);
; 616  : #endif
; 617  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN18@PMC_RightS:
	pop	ebx
$LN1@PMC_RightS:
	pop	edi

; 618  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN17@PMC_RightS:
	pop	edi

; 581  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 618  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
_PMC_RightShift_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT _Initialize_Shift
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Shift PROC					; COMDAT

; 666  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 667  : }

	ret	0
_Initialize_Shift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT _LeftShift_Imp
_TEXT	SEGMENT
_n_word_count$1$ = -12					; size = 4
_count$1$ = -8						; size = 4
_n_rshift_bit_count$1$ = -4				; size = 4
_p_count$1$ = 8						; size = 4
_p$ = 8							; size = 4
_work$62$ = 12						; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
_LeftShift_Imp PROC					; COMDAT

; 302  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 303  :     __UNIT_TYPE* pp = p;
; 304  :     __UNIT_TYPE p_count = p_word_count;
; 305  :     __UNIT_TYPE* op = o;
; 306  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;
; 307  :     __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;
; 308  :     if (n_lshift_bit_count == 0)

	mov	ecx, DWORD PTR _p_word_count$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _n$[ebp]
	mov	edx, edi
	shr	edx, 5
	and	edi, 31					; 0000001fH
	mov	DWORD PTR _n_word_count$1$[ebp], edx
	mov	DWORD PTR _n$[ebp], edi
	jne	SHORT $LN4@LeftShift_

; 312  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	mov	eax, DWORD PTR _o$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	esi, DWORD PTR _p$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 311  :         _COPY_MEMORY_UNIT(op + n_word_count, pp, p_count);

	lea	edi, DWORD PTR [eax+edx*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 312  :         if (padding_zero)

	je	$LN19@LeftShift_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, eax
	mov	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 434  : }

	xor	eax, eax
	rep stosd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@LeftShift_:

; 313  :             _ZERO_MEMORY_UNIT(op, n_word_count);
; 314  :     }
; 315  :     else
; 316  :     {
; 317  :         __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;
; 318  :         pp += p_count - 1;

	mov	eax, DWORD PTR _p$[ebp]
	mov	edx, 32					; 00000020H

; 319  :         op += p_count + n_word_count;

	mov	esi, DWORD PTR _o$[ebp]
	sub	edx, edi
	push	ebx
	lea	ebx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _n_rshift_bit_count$1$[ebp], edx
	mov	eax, DWORD PTR _n_word_count$1$[ebp]
	add	eax, ecx

; 320  :         p_count -= 1;

	dec	ecx
	mov	DWORD PTR _p_count$1$[ebp], ecx

; 321  :         __UNIT_TYPE temp = *pp;
; 322  :         __UNIT_TYPE work = temp >> n_rshift_bit_count;

	mov	ecx, edx
	lea	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR [ebx-4]
	mov	edx, esi
	mov	DWORD PTR _work$62$[ebp], esi
	shr	edx, cl

; 323  :         if (work != 0)

	test	edx, edx
	je	SHORT $LN7@LeftShift_

; 324  :             *op = work;

	mov	DWORD PTR [eax], edx
$LN7@LeftShift_:

; 325  :         --pp;
; 326  :         --op;
; 327  : 
; 328  :         __UNIT_TYPE count = p_count >> 5;

	mov	ecx, DWORD PTR _p_count$1$[ebp]
	sub	ebx, 8
	mov	edx, ecx
	sub	eax, 4
	shr	edx, 5
	mov	DWORD PTR _count$1$[ebp], edx

; 329  :         while (count != 0)

	test	edx, edx
	je	$LN3@LeftShift_
	npad	4
$LL2@LeftShift_:

; 330  :         {
; 331  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	mov	DWORD PTR _work$62$[ebp], esi
	mov	esi, DWORD PTR [ebx]
	mov	edx, esi
	shr	edx, cl

; 332  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	ecx, edi
	or	edx, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edi, DWORD PTR [ebx-4]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi

; 333  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-4], edx
	mov	esi, DWORD PTR [ebx-8]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 334  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-8], edx
	mov	edi, DWORD PTR [ebx-12]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 335  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-12], edx
	mov	esi, DWORD PTR [ebx-16]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 336  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-16], edx
	mov	edi, DWORD PTR [ebx-20]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 337  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-20], edx
	mov	esi, DWORD PTR [ebx-24]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 338  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-24], edx
	mov	edi, DWORD PTR [ebx-28]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 339  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-28], edx
	mov	esi, DWORD PTR [ebx-32]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 340  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-32], edx
	mov	edi, DWORD PTR [ebx-36]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi
	mov	DWORD PTR [eax-36], edx

; 341  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	esi, DWORD PTR [ebx-40]
	mov	edx, esi
	mov	ecx, DWORD PTR _n$[ebp]
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 342  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-40], edx
	mov	edi, DWORD PTR [ebx-44]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi

; 343  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-44], edx
	mov	esi, DWORD PTR [ebx-48]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 344  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-48], edx
	mov	edi, DWORD PTR [ebx-52]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 345  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-52], edx
	mov	esi, DWORD PTR [ebx-56]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 346  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-56], edx
	mov	edi, DWORD PTR [ebx-60]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 347  :             work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-60], edx
	mov	esi, DWORD PTR [ebx-64]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 348  :             work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-64], edx
	mov	edi, DWORD PTR [ebx-68]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 349  :             work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-68], edx
	mov	esi, DWORD PTR [ebx-72]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 350  :             work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-72], edx
	mov	edi, DWORD PTR [ebx-76]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 351  :             work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-76], edx
	mov	esi, DWORD PTR [ebx-80]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 352  :             work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-80], edx
	mov	edi, DWORD PTR [ebx-84]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi

; 353  :             work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-84], edx
	mov	esi, DWORD PTR [ebx-88]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 354  :             work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-88], edx
	mov	edi, DWORD PTR [ebx-92]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 355  :             work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-92], edx
	mov	esi, DWORD PTR [ebx-96]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 356  :             work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-96], edx
	mov	edi, DWORD PTR [ebx-100]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 357  :             work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-100], edx
	mov	esi, DWORD PTR [ebx-104]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 358  :             work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-104], edx
	mov	edi, DWORD PTR [ebx-108]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 359  :             work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-108], edx
	mov	esi, DWORD PTR [ebx-112]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 360  :             work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-112], edx
	mov	edi, DWORD PTR [ebx-116]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 361  :             work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-116], edx
	shl	edi, cl
	mov	esi, DWORD PTR [ebx-120]
	mov	edx, esi
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 362  :             work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

	mov	edi, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-120], edx
	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR [ebx-124]
	mov	edx, ecx
	mov	DWORD PTR _work$62$[ebp], ecx

; 363  :             pp -= 32;

	add	ebx, -128				; ffffff80H
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi
	mov	esi, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax-124], edx

; 364  :             op -= 32;

	add	eax, -128				; ffffff80H

; 365  :             --count;

	sub	DWORD PTR _count$1$[ebp], 1
	jne	$LL2@LeftShift_
	mov	ecx, DWORD PTR _p_count$1$[ebp]
$LN3@LeftShift_:

; 366  :         }
; 367  : 
; 368  :         if (p_count & 0x10)

	test	cl, 16					; 00000010H
	je	$LN8@LeftShift_

; 369  :         {
; 370  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	mov	DWORD PTR _work$62$[ebp], esi
	mov	esi, DWORD PTR [ebx]
	mov	edx, esi
	shr	edx, cl

; 371  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	ecx, edi
	or	edx, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edi, DWORD PTR [ebx-4]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi

; 372  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-4], edx
	mov	esi, DWORD PTR [ebx-8]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 373  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-8], edx
	mov	edi, DWORD PTR [ebx-12]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 374  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-12], edx
	mov	esi, DWORD PTR [ebx-16]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 375  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-16], edx
	mov	edi, DWORD PTR [ebx-20]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 376  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-20], edx
	mov	esi, DWORD PTR [ebx-24]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 377  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-24], edx
	mov	edi, DWORD PTR [ebx-28]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 378  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-28], edx
	mov	esi, DWORD PTR [ebx-32]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 379  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-32], edx
	mov	edi, DWORD PTR [ebx-36]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi
	mov	DWORD PTR [eax-36], edx

; 380  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	esi, DWORD PTR [ebx-40]
	mov	edx, esi
	mov	ecx, DWORD PTR _n$[ebp]
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 381  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-40], edx
	mov	edi, DWORD PTR [ebx-44]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 382  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-44], edx
	mov	esi, DWORD PTR [ebx-48]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 383  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-48], edx
	mov	edi, DWORD PTR [ebx-52]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 384  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-52], edx
	mov	esi, DWORD PTR [ebx-56]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 385  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	edi, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-56], edx
	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR [ebx-60]
	mov	edx, ecx
	mov	DWORD PTR _work$62$[ebp], ecx

; 386  :             pp -= 16;

	sub	ebx, 64					; 00000040H
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	mov	ecx, DWORD PTR _p_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-60], edx

; 387  :             op -= 16;

	sub	eax, 64					; 00000040H
$LN8@LeftShift_:

; 388  :         }
; 389  : 
; 390  :         if (p_count & 0x8)

	test	cl, 8
	je	$LN9@LeftShift_

; 391  :         {
; 392  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	esi, DWORD PTR [ebx]
	mov	ecx, edi
	shl	DWORD PTR _work$62$[ebp], cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 393  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	ecx, edi
	or	edx, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edi, DWORD PTR [ebx-4]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 394  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-4], edx
	mov	esi, DWORD PTR [ebx-8]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 395  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-8], edx
	mov	edi, DWORD PTR [ebx-12]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 396  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-12], edx
	mov	esi, DWORD PTR [ebx-16]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 397  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-16], edx
	mov	edi, DWORD PTR [ebx-20]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 398  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-20], edx
	mov	esi, DWORD PTR [ebx-24]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 399  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	edi, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-24], edx
	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR [ebx-28]
	mov	edx, ecx
	mov	DWORD PTR _work$62$[ebp], ecx

; 400  :             pp -= 8;

	sub	ebx, 32					; 00000020H
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	mov	ecx, DWORD PTR _p_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-28], edx

; 401  :             op -= 8;

	sub	eax, 32					; 00000020H
$LN9@LeftShift_:

; 402  :         }
; 403  : 
; 404  :         if (p_count & 0x4)

	test	cl, 4
	je	SHORT $LN10@LeftShift_

; 405  :         {
; 406  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	esi, DWORD PTR [ebx]
	mov	ecx, edi
	shl	DWORD PTR _work$62$[ebp], cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 407  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	ecx, edi
	or	edx, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edi, DWORD PTR [ebx-4]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 408  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-4], edx
	mov	esi, DWORD PTR [ebx-8]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 409  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	edi, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-8], edx
	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR [ebx-12]
	mov	edx, ecx
	mov	DWORD PTR _work$62$[ebp], ecx

; 410  :             pp -= 4;

	sub	ebx, 16					; 00000010H
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	mov	ecx, DWORD PTR _p_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-12], edx

; 411  :             op -= 4;

	sub	eax, 16					; 00000010H
$LN10@LeftShift_:

; 412  :         }
; 413  : 
; 414  :         if (p_count & 0x2)

	test	cl, 2
	je	SHORT $LN11@LeftShift_

; 415  :         {
; 416  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	esi, DWORD PTR [ebx]
	mov	ecx, edi
	shl	DWORD PTR _work$62$[ebp], cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 417  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	ecx, edi
	or	edx, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax], edx
	shl	esi, cl
	mov	ecx, DWORD PTR [ebx-4]
	mov	edx, ecx
	mov	DWORD PTR _work$62$[ebp], ecx

; 418  :             pp -= 2;

	sub	ebx, 8
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	mov	ecx, DWORD PTR _p_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-4], edx

; 419  :             op -= 2;

	sub	eax, 8
$LN11@LeftShift_:

; 420  :         }
; 421  : 
; 422  :         if (p_count & 0x1)

	test	cl, 1
	je	SHORT $LN12@LeftShift_

; 423  :         {
; 424  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	esi, DWORD PTR _work$62$[ebp]
	mov	ecx, edi
	mov	edx, DWORD PTR [ebx]
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	mov	DWORD PTR _work$62$[ebp], edx
	shr	edx, cl
	or	edx, esi
	mov	DWORD PTR [eax], edx

; 425  :             pp -= 1;
; 426  :             op -= 1;

	sub	eax, 4
$LN12@LeftShift_:

; 427  :         }
; 428  :         work = temp << n_lshift_bit_count;

	mov	edx, DWORD PTR _work$62$[ebp]
	mov	ecx, edi
	shl	edx, cl

; 429  :         *op = work;
; 430  : 
; 431  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	mov	DWORD PTR [eax], edx
	pop	ebx
	je	SHORT $LN19@LeftShift_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, DWORD PTR _o$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 434  : }

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _n_word_count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 434  : }

	rep stosd
$LN19@LeftShift_:
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_LeftShift_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT _LeftShift_Imp_DIV
_TEXT	SEGMENT
_n_word_count$1$ = -12					; size = 4
_count$1$ = -8						; size = 4
_n_rshift_bit_count$1$ = -4				; size = 4
_p_count$1$ = 8						; size = 4
_p$ = 8							; size = 4
_work$62$ = 12						; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
_LeftShift_Imp_DIV PROC					; COMDAT

; 437  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 438  :     __UNIT_TYPE_DIV* pp = p;
; 439  :     __UNIT_TYPE p_count = p_word_count;
; 440  :     __UNIT_TYPE_DIV* op = o;
; 441  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;
; 442  :     __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;
; 443  :     if (n_lshift_bit_count == 0)

	mov	ecx, DWORD PTR _p_word_count$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _n$[ebp]
	mov	edx, edi
	shr	edx, 5
	and	edi, 31					; 0000001fH
	mov	DWORD PTR _n_word_count$1$[ebp], edx
	mov	DWORD PTR _n$[ebp], edi
	jne	SHORT $LN4@LeftShift_

; 447  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	mov	eax, DWORD PTR _o$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	esi, DWORD PTR _p$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 446  :         _COPY_MEMORY_UNIT_DIV(op + n_word_count, pp, p_count);

	lea	edi, DWORD PTR [eax+edx*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 447  :         if (padding_zero)

	je	$LN19@LeftShift_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 123  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, eax
	mov	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 569  : }

	xor	eax, eax
	rep stosd
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@LeftShift_:

; 448  :             _ZERO_MEMORY_UNIT_DIV(op, n_word_count);
; 449  :     }
; 450  :     else
; 451  :     {
; 452  :         __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;
; 453  :         pp += p_count - 1;

	mov	eax, DWORD PTR _p$[ebp]
	mov	edx, 32					; 00000020H

; 454  :         op += p_count + n_word_count;

	mov	esi, DWORD PTR _o$[ebp]
	sub	edx, edi
	push	ebx
	lea	ebx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _n_rshift_bit_count$1$[ebp], edx
	mov	eax, DWORD PTR _n_word_count$1$[ebp]
	add	eax, ecx

; 455  :         p_count -= 1;

	dec	ecx
	mov	DWORD PTR _p_count$1$[ebp], ecx

; 456  :         __UNIT_TYPE_DIV temp = *pp;
; 457  :         __UNIT_TYPE_DIV work = temp >> n_rshift_bit_count;

	mov	ecx, edx
	lea	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR [ebx-4]
	mov	edx, esi
	mov	DWORD PTR _work$62$[ebp], esi
	shr	edx, cl

; 458  :         if (work != 0)

	test	edx, edx
	je	SHORT $LN7@LeftShift_

; 459  :             *op = work;

	mov	DWORD PTR [eax], edx
$LN7@LeftShift_:

; 460  :         --pp;
; 461  :         --op;
; 462  : 
; 463  :         __UNIT_TYPE count = p_count >> 5;

	mov	ecx, DWORD PTR _p_count$1$[ebp]
	sub	ebx, 8
	mov	edx, ecx
	sub	eax, 4
	shr	edx, 5
	mov	DWORD PTR _count$1$[ebp], edx

; 464  :         while (count != 0)

	test	edx, edx
	je	$LN3@LeftShift_
	npad	4
$LL2@LeftShift_:

; 465  :         {
; 466  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	mov	DWORD PTR _work$62$[ebp], esi
	mov	esi, DWORD PTR [ebx]
	mov	edx, esi
	shr	edx, cl

; 467  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	ecx, edi
	or	edx, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edi, DWORD PTR [ebx-4]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi

; 468  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-4], edx
	mov	esi, DWORD PTR [ebx-8]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 469  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-8], edx
	mov	edi, DWORD PTR [ebx-12]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 470  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-12], edx
	mov	esi, DWORD PTR [ebx-16]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 471  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-16], edx
	mov	edi, DWORD PTR [ebx-20]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 472  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-20], edx
	mov	esi, DWORD PTR [ebx-24]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 473  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-24], edx
	mov	edi, DWORD PTR [ebx-28]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 474  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-28], edx
	mov	esi, DWORD PTR [ebx-32]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 475  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-32], edx
	mov	edi, DWORD PTR [ebx-36]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi
	mov	DWORD PTR [eax-36], edx

; 476  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	esi, DWORD PTR [ebx-40]
	mov	edx, esi
	mov	ecx, DWORD PTR _n$[ebp]
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 477  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-40], edx
	mov	edi, DWORD PTR [ebx-44]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi

; 478  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-44], edx
	mov	esi, DWORD PTR [ebx-48]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 479  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-48], edx
	mov	edi, DWORD PTR [ebx-52]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 480  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-52], edx
	mov	esi, DWORD PTR [ebx-56]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 481  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-56], edx
	mov	edi, DWORD PTR [ebx-60]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 482  :             work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-60], edx
	mov	esi, DWORD PTR [ebx-64]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 483  :             work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-64], edx
	mov	edi, DWORD PTR [ebx-68]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 484  :             work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-68], edx
	mov	esi, DWORD PTR [ebx-72]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 485  :             work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-72], edx
	mov	edi, DWORD PTR [ebx-76]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 486  :             work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-76], edx
	mov	esi, DWORD PTR [ebx-80]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 487  :             work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-80], edx
	mov	edi, DWORD PTR [ebx-84]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi

; 488  :             work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-84], edx
	mov	esi, DWORD PTR [ebx-88]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 489  :             work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-88], edx
	mov	edi, DWORD PTR [ebx-92]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 490  :             work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-92], edx
	mov	esi, DWORD PTR [ebx-96]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 491  :             work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-96], edx
	mov	edi, DWORD PTR [ebx-100]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 492  :             work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-100], edx
	mov	esi, DWORD PTR [ebx-104]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 493  :             work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-104], edx
	mov	edi, DWORD PTR [ebx-108]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 494  :             work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-108], edx
	mov	esi, DWORD PTR [ebx-112]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 495  :             work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-112], edx
	mov	edi, DWORD PTR [ebx-116]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 496  :             work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-116], edx
	shl	edi, cl
	mov	esi, DWORD PTR [ebx-120]
	mov	edx, esi
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 497  :             work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

	mov	edi, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-120], edx
	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR [ebx-124]
	mov	edx, ecx
	mov	DWORD PTR _work$62$[ebp], ecx

; 498  :             pp -= 32;

	add	ebx, -128				; ffffff80H
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi
	mov	esi, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax-124], edx

; 499  :             op -= 32;

	add	eax, -128				; ffffff80H

; 500  :             --count;

	sub	DWORD PTR _count$1$[ebp], 1
	jne	$LL2@LeftShift_
	mov	ecx, DWORD PTR _p_count$1$[ebp]
$LN3@LeftShift_:

; 501  :         }
; 502  : 
; 503  :         if (p_count & 0x10)

	test	cl, 16					; 00000010H
	je	$LN8@LeftShift_

; 504  :         {
; 505  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	mov	DWORD PTR _work$62$[ebp], esi
	mov	esi, DWORD PTR [ebx]
	mov	edx, esi
	shr	edx, cl

; 506  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	ecx, edi
	or	edx, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edi, DWORD PTR [ebx-4]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi

; 507  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-4], edx
	mov	esi, DWORD PTR [ebx-8]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 508  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-8], edx
	mov	edi, DWORD PTR [ebx-12]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 509  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-12], edx
	mov	esi, DWORD PTR [ebx-16]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 510  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-16], edx
	mov	edi, DWORD PTR [ebx-20]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 511  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-20], edx
	mov	esi, DWORD PTR [ebx-24]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 512  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-24], edx
	mov	edi, DWORD PTR [ebx-28]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 513  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-28], edx
	mov	esi, DWORD PTR [ebx-32]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 514  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-32], edx
	mov	edi, DWORD PTR [ebx-36]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, esi
	mov	DWORD PTR [eax-36], edx

; 515  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	esi, DWORD PTR [ebx-40]
	mov	edx, esi
	mov	ecx, DWORD PTR _n$[ebp]
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 516  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-40], edx
	mov	edi, DWORD PTR [ebx-44]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 517  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-44], edx
	mov	esi, DWORD PTR [ebx-48]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 518  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-48], edx
	mov	edi, DWORD PTR [ebx-52]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 519  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-52], edx
	mov	esi, DWORD PTR [ebx-56]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 520  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	edi, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-56], edx
	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR [ebx-60]
	mov	edx, ecx
	mov	DWORD PTR _work$62$[ebp], ecx

; 521  :             pp -= 16;

	sub	ebx, 64					; 00000040H
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	mov	ecx, DWORD PTR _p_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-60], edx

; 522  :             op -= 16;

	sub	eax, 64					; 00000040H
$LN8@LeftShift_:

; 523  :         }
; 524  : 
; 525  :         if (p_count & 0x8)

	test	cl, 8
	je	$LN9@LeftShift_

; 526  :         {
; 527  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	esi, DWORD PTR [ebx]
	mov	ecx, edi
	shl	DWORD PTR _work$62$[ebp], cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 528  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	ecx, edi
	or	edx, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edi, DWORD PTR [ebx-4]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 529  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-4], edx
	mov	esi, DWORD PTR [ebx-8]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 530  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-8], edx
	mov	edi, DWORD PTR [ebx-12]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 531  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-12], edx
	mov	esi, DWORD PTR [ebx-16]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 532  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, edi
	mov	DWORD PTR [eax-16], edx
	mov	edi, DWORD PTR [ebx-20]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 533  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-20], edx
	mov	esi, DWORD PTR [ebx-24]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 534  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	edi, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-24], edx
	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR [ebx-28]
	mov	edx, ecx
	mov	DWORD PTR _work$62$[ebp], ecx

; 535  :             pp -= 8;

	sub	ebx, 32					; 00000020H
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	mov	ecx, DWORD PTR _p_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-28], edx

; 536  :             op -= 8;

	sub	eax, 32					; 00000020H
$LN9@LeftShift_:

; 537  :         }
; 538  : 
; 539  :         if (p_count & 0x4)

	test	cl, 4
	je	SHORT $LN10@LeftShift_

; 540  :         {
; 541  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	esi, DWORD PTR [ebx]
	mov	ecx, edi
	shl	DWORD PTR _work$62$[ebp], cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 542  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	ecx, edi
	or	edx, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax], edx
	mov	edi, DWORD PTR [ebx-4]
	mov	edx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 543  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-4], edx
	mov	esi, DWORD PTR [ebx-8]
	mov	edx, esi
	shl	edi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	or	edx, edi

; 544  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	edi, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax-8], edx
	mov	ecx, edi
	shl	esi, cl
	mov	ecx, DWORD PTR [ebx-12]
	mov	edx, ecx
	mov	DWORD PTR _work$62$[ebp], ecx

; 545  :             pp -= 4;

	sub	ebx, 16					; 00000010H
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	mov	ecx, DWORD PTR _p_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-12], edx

; 546  :             op -= 4;

	sub	eax, 16					; 00000010H
$LN10@LeftShift_:

; 547  :         }
; 548  : 
; 549  :         if (p_count & 0x2)

	test	cl, 2
	je	SHORT $LN11@LeftShift_

; 550  :         {
; 551  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	esi, DWORD PTR [ebx]
	mov	ecx, edi
	shl	DWORD PTR _work$62$[ebp], cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl

; 552  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	ecx, edi
	or	edx, DWORD PTR _work$62$[ebp]
	mov	DWORD PTR [eax], edx
	shl	esi, cl
	mov	ecx, DWORD PTR [ebx-4]
	mov	edx, ecx
	mov	DWORD PTR _work$62$[ebp], ecx

; 553  :             pp -= 2;

	sub	ebx, 8
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	shr	edx, cl
	mov	ecx, DWORD PTR _p_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [eax-4], edx

; 554  :             op -= 2;

	sub	eax, 8
$LN11@LeftShift_:

; 555  :         }
; 556  : 
; 557  :         if (p_count & 0x1)

	test	cl, 1
	je	SHORT $LN12@LeftShift_

; 558  :         {
; 559  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	esi, DWORD PTR _work$62$[ebp]
	mov	ecx, edi
	mov	edx, DWORD PTR [ebx]
	shl	esi, cl
	mov	ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
	mov	DWORD PTR _work$62$[ebp], edx
	shr	edx, cl
	or	edx, esi
	mov	DWORD PTR [eax], edx

; 560  :             pp -= 1;
; 561  :             op -= 1;

	sub	eax, 4
$LN12@LeftShift_:

; 562  :         }
; 563  :         work = temp << n_lshift_bit_count;

	mov	edx, DWORD PTR _work$62$[ebp]
	mov	ecx, edi
	shl	edx, cl

; 564  :         *op = work;
; 565  : 
; 566  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	mov	DWORD PTR [eax], edx
	pop	ebx
	je	SHORT $LN19@LeftShift_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 123  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, DWORD PTR _o$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 569  : }

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 123  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _n_word_count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 569  : }

	rep stosd
$LN19@LeftShift_:
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_LeftShift_Imp_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT _RightShift_Imp
_TEXT	SEGMENT
tv1058 = -28						; size = 4
tv1059 = -24						; size = 4
tv1057 = -24						; size = 4
_n_word_count$1$ = -20					; size = 4
_count$1$ = -16						; size = 4
tv1064 = -16						; size = 4
_op$1$ = -12						; size = 4
_t_count$1$ = -8					; size = 4
_n_lshift_bit_count$1$ = -4				; size = 4
_pp$1$ = 8						; size = 4
_p$ = 8							; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
_RightShift_Imp PROC					; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 33   :     __UNIT_TYPE* pp = p;
; 34   :     __UNIT_TYPE p_count = p_word_count;
; 35   :     __UNIT_TYPE* op = o;
; 36   :     // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 37   :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	mov	ecx, DWORD PTR _n$[ebp]

; 38   :     __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _p$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _o$[ebp]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _op$1$[ebp], ebx
	shr	esi, 5
	and	ecx, 31					; 0000001fH
	push	edi
	mov	DWORD PTR _n_word_count$1$[ebp], esi
	mov	DWORD PTR _n$[ebp], ecx
	lea	edx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR _p_word_count$[ebp]
	sub	eax, esi
	mov	DWORD PTR _p_word_count$[ebp], eax

; 39   :     if (n_rshift_bit_count == 0)

	test	ecx, ecx
	jne	SHORT $LN4@RightShift

; 43   :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, ebx
	mov	esi, edx
	mov	ecx, eax
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 43   :         if (padding_zero)

	je	$LN20@RightShift

; 163  :     }
; 164  : }

	mov	ecx, DWORD PTR _n_word_count$1$[ebp]
	lea	edi, DWORD PTR [ebx+eax*4]
	xor	eax, eax
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@RightShift:

; 44   :             _ZERO_MEMORY_UNIT(op + p_count - n_word_count, n_word_count);
; 45   :     }
; 46   :     else
; 47   :     {
; 48   :         pp += n_word_count;
; 49   :         __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;
; 50   :         // p_count - n_word_count 回繰り返し
; 51   : 
; 52   :         __UNIT_TYPE temp = *pp++;

	mov	eax, DWORD PTR [edx]
	mov	edi, 32					; 00000020H
	sub	edi, ecx
	add	edx, 4

; 53   :         __UNIT_TYPE work;
; 54   :         __UNIT_TYPE t_count = p_count - n_word_count - 1;

	mov	ecx, DWORD PTR _p_word_count$[ebp]
	dec	ecx
	mov	DWORD PTR _n_lshift_bit_count$1$[ebp], edi

; 55   : 
; 56   :         __UNIT_TYPE count = t_count >> 5;

	mov	esi, ecx
	mov	DWORD PTR _t_count$1$[ebp], ecx

; 57   :         while ( count > 0)

	mov	ecx, DWORD PTR _n$[ebp]
	shr	esi, 5
	mov	DWORD PTR _pp$1$[ebp], edx
	mov	DWORD PTR _count$1$[ebp], esi
	test	esi, esi
	je	SHORT $LN3@RightShift
	npad	3
$LL2@RightShift:

; 58   :         {
; 59   :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	sub	edx, ebx
	mov	edi, ebx
	mov	DWORD PTR tv1059[ebp], edx
	mov	ebx, 32					; 00000020H
	npad	4
$LL37@RightShift:
	shr	eax, cl
	lea	edi, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	esi, eax
	mov	eax, DWORD PTR [edx+edi-4]
	mov	edx, eax
	shl	edx, cl
	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [edi-4], edx
	mov	edx, DWORD PTR tv1059[ebp]
	sub	ebx, 1
	jne	SHORT $LL37@RightShift

; 60   :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 61   :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 62   :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 63   :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 64   :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 65   :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 66   :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 67   :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;
; 68   :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;
; 69   :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;
; 70   :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;
; 71   :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;
; 72   :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;
; 73   :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;
; 74   :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;
; 75   :             work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;
; 76   :             work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;
; 77   :             work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;
; 78   :             work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;
; 79   :             work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;
; 80   :             work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;
; 81   :             work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;
; 82   :             work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;
; 83   :             work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;
; 84   :             work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;
; 85   :             work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;
; 86   :             work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;
; 87   :             work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;
; 88   :             work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;
; 89   :             work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;
; 90   :             work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;
; 91   :             --count;

	mov	esi, DWORD PTR _count$1$[ebp]

; 92   :             pp += 32;

	mov	edx, DWORD PTR _pp$1$[ebp]
	dec	esi

; 93   :             op += 32;

	mov	ebx, DWORD PTR _op$1$[ebp]
	sub	edx, -128				; ffffff80H
	sub	ebx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], esi
	mov	DWORD PTR _pp$1$[ebp], edx
	mov	DWORD PTR _op$1$[ebp], ebx
	test	esi, esi
	jne	SHORT $LL2@RightShift
	mov	edi, DWORD PTR _n_lshift_bit_count$1$[ebp]
$LN3@RightShift:

; 94   :         }
; 95   : 
; 96   :         if (t_count & 0x10)

	test	BYTE PTR _t_count$1$[ebp], 16		; 00000010H
	je	SHORT $LN7@RightShift

; 97   :         {
; 98   :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	sub	edx, ebx
	mov	DWORD PTR tv1057[ebp], ebx
	mov	DWORD PTR tv1058[ebp], edx
	mov	DWORD PTR tv1064[ebp], 16		; 00000010H
$LL39@RightShift:
	shr	eax, cl
	lea	ebx, DWORD PTR [ebx+4]
	mov	esi, eax
	mov	ecx, edi
	mov	eax, DWORD PTR [ebx+edx-4]
	mov	edx, eax
	shl	edx, cl
	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	sub	DWORD PTR tv1064[ebp], 1
	mov	DWORD PTR [ebx-4], edx
	mov	edx, DWORD PTR tv1058[ebp]
	jne	SHORT $LL39@RightShift

; 99   :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 100  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 101  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 102  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 103  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 104  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 105  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 106  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;
; 107  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;
; 108  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;
; 109  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;
; 110  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;
; 111  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;
; 112  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;
; 113  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;
; 114  :             pp += 16;

	mov	edx, DWORD PTR _pp$1$[ebp]

; 115  :             op += 16;

	mov	ebx, DWORD PTR _op$1$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _pp$1$[ebp], edx
	add	ebx, 64					; 00000040H
$LN7@RightShift:

; 116  :         }
; 117  : 
; 118  :         if (t_count & 0x8)

	mov	ecx, DWORD PTR _t_count$1$[ebp]
	mov	edi, DWORD PTR _n$[ebp]
	test	cl, 8
	je	$LN8@RightShift

; 119  :         {
; 120  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	esi, DWORD PTR [edx]
	mov	ecx, edi
	shr	eax, cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	shl	edx, cl
	mov	ecx, edi
	or	edx, eax
	shr	esi, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx], edx
	mov	edx, DWORD PTR _pp$1$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	eax, edx
	shl	eax, cl
	mov	ecx, edi
	or	eax, esi
	shr	edx, cl
	mov	DWORD PTR [ebx+4], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	eax, esi
	shl	eax, cl
	mov	ecx, edi
	or	eax, edx
	shr	esi, cl
	mov	DWORD PTR [ebx+8], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, edx
	shl	eax, cl
	mov	ecx, edi
	or	eax, esi
	shr	edx, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+12], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	esi, DWORD PTR [eax+16]
	mov	eax, esi
	shl	eax, cl
	mov	ecx, edi
	or	eax, edx
	shr	esi, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+16], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, edx
	shl	eax, cl
	mov	ecx, edi
	or	eax, esi
	shr	edx, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+20], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	esi, DWORD PTR [eax+24]
	mov	eax, esi
	shl	eax, cl
	mov	ecx, edi
	or	eax, edx
	shr	esi, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+24], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	edx, eax
	shl	edx, cl
	mov	ecx, DWORD PTR _t_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [ebx+28], edx

; 121  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 122  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 123  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 124  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 125  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 126  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 127  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 128  :             pp += 8;

	mov	edx, DWORD PTR _pp$1$[ebp]
	add	edx, 32					; 00000020H

; 129  :             op += 8;

	add	ebx, 32					; 00000020H
	mov	DWORD PTR _pp$1$[ebp], edx
$LN8@RightShift:

; 130  :         }
; 131  : 
; 132  :         if (t_count & 0x4)

	test	cl, 4
	je	SHORT $LN9@RightShift

; 133  :         {
; 134  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	esi, DWORD PTR [edx]
	mov	ecx, edi
	shr	eax, cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	shl	edx, cl
	mov	ecx, edi
	or	edx, eax
	shr	esi, cl
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, edx
	shl	eax, cl
	mov	ecx, edi
	or	eax, esi
	shr	edx, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+4], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	eax, esi
	shl	eax, cl
	mov	ecx, edi
	or	eax, edx
	shr	esi, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+8], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	edx, eax
	shl	edx, cl
	mov	ecx, DWORD PTR _t_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [ebx+12], edx

; 135  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 136  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 137  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 138  :             pp += 4;

	mov	edx, DWORD PTR _pp$1$[ebp]
	add	edx, 16					; 00000010H

; 139  :             op += 4;

	add	ebx, 16					; 00000010H
	mov	DWORD PTR _pp$1$[ebp], edx
$LN9@RightShift:

; 140  :         }
; 141  : 
; 142  :         if (t_count & 0x2)

	test	cl, 2
	je	SHORT $LN10@RightShift

; 143  :         {
; 144  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	esi, DWORD PTR [edx]
	mov	ecx, edi
	shr	eax, cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	shl	edx, cl

; 145  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	ecx, edi
	or	edx, eax
	shr	esi, cl
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	edx, eax
	shl	edx, cl
	mov	ecx, DWORD PTR _t_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [ebx+4], edx

; 146  :             pp += 2;

	mov	edx, DWORD PTR _pp$1$[ebp]
	add	edx, 8

; 147  :             op += 2;

	add	ebx, 8
$LN10@RightShift:

; 148  :         }
; 149  : 
; 150  :         if (t_count & 0x1)

	test	cl, 1
	je	SHORT $LN11@RightShift

; 151  :         {
; 152  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	ecx, edi
	shr	eax, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	esi, eax
	mov	eax, DWORD PTR [edx]
	mov	edx, eax
	shl	edx, cl
	or	edx, esi
	mov	DWORD PTR [ebx], edx

; 153  :             pp += 1;
; 154  :             op += 1;

	add	ebx, 4
$LN11@RightShift:

; 155  :         }
; 156  : 
; 157  :         work = temp >> n_rshift_bit_count;

	mov	ecx, edi
	shr	eax, cl

; 158  :         if (work != 0 || padding_zero)

	mov	ecx, DWORD PTR _padding_zero$[ebp]
	test	eax, eax
	jne	SHORT $LN13@RightShift
	test	ecx, ecx
	je	SHORT $LN20@RightShift
$LN13@RightShift:

; 159  :             *op = work;

	mov	DWORD PTR [ebx], eax

; 160  : 
; 161  :         if (padding_zero)

	test	ecx, ecx
	je	SHORT $LN20@RightShift

; 162  :             _ZERO_MEMORY_UNIT(o + p_word_count - n_word_count, n_word_count);

	mov	eax, DWORD PTR _p_word_count$[ebp]
	mov	ecx, DWORD PTR _o$[ebp]
	lea	edi, DWORD PTR [ecx+eax*4]

; 163  :     }
; 164  : }

	mov	ecx, DWORD PTR _n_word_count$1$[ebp]
	xor	eax, eax
	rep stosd
$LN20@RightShift:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_RightShift_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT _RightShift_Imp_DIV
_TEXT	SEGMENT
tv1058 = -28						; size = 4
tv1059 = -24						; size = 4
tv1057 = -24						; size = 4
_n_word_count$1$ = -20					; size = 4
_count$1$ = -16						; size = 4
tv1064 = -16						; size = 4
_op$1$ = -12						; size = 4
_t_count$1$ = -8					; size = 4
_n_lshift_bit_count$1$ = -4				; size = 4
_pp$1$ = 8						; size = 4
_p$ = 8							; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
_RightShift_Imp_DIV PROC				; COMDAT

; 167  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 168  :     __UNIT_TYPE_DIV* pp = p;
; 169  :     __UNIT_TYPE p_count = p_word_count;
; 170  :     __UNIT_TYPE_DIV* op = o;
; 171  :     // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 172  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	mov	ecx, DWORD PTR _n$[ebp]

; 173  :     __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _p$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _o$[ebp]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _op$1$[ebp], ebx
	shr	esi, 5
	and	ecx, 31					; 0000001fH
	push	edi
	mov	DWORD PTR _n_word_count$1$[ebp], esi
	mov	DWORD PTR _n$[ebp], ecx
	lea	edx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR _p_word_count$[ebp]
	sub	eax, esi
	mov	DWORD PTR _p_word_count$[ebp], eax

; 174  :     if (n_rshift_bit_count == 0)

	test	ecx, ecx
	jne	SHORT $LN4@RightShift

; 178  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, ebx
	mov	esi, edx
	mov	ecx, eax
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c

; 178  :         if (padding_zero)

	je	$LN20@RightShift

; 298  :     }
; 299  : }

	mov	ecx, DWORD PTR _n_word_count$1$[ebp]
	lea	edi, DWORD PTR [ebx+eax*4]
	xor	eax, eax
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@RightShift:

; 179  :             _ZERO_MEMORY_UNIT_DIV(op + p_count - n_word_count, n_word_count);
; 180  :     }
; 181  :     else
; 182  :     {
; 183  :         pp += n_word_count;
; 184  :         __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;
; 185  :         // p_count - n_word_count 回繰り返し
; 186  : 
; 187  :         __UNIT_TYPE_DIV temp = *pp++;

	mov	eax, DWORD PTR [edx]
	mov	edi, 32					; 00000020H
	sub	edi, ecx
	add	edx, 4

; 188  :         __UNIT_TYPE_DIV work;
; 189  :         __UNIT_TYPE t_count = p_count - n_word_count - 1;

	mov	ecx, DWORD PTR _p_word_count$[ebp]
	dec	ecx
	mov	DWORD PTR _n_lshift_bit_count$1$[ebp], edi

; 190  : 
; 191  :         __UNIT_TYPE count = t_count >> 5;

	mov	esi, ecx
	mov	DWORD PTR _t_count$1$[ebp], ecx

; 192  :         while (count > 0)

	mov	ecx, DWORD PTR _n$[ebp]
	shr	esi, 5
	mov	DWORD PTR _pp$1$[ebp], edx
	mov	DWORD PTR _count$1$[ebp], esi
	test	esi, esi
	je	SHORT $LN3@RightShift
	npad	3
$LL2@RightShift:

; 193  :         {
; 194  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	sub	edx, ebx
	mov	edi, ebx
	mov	DWORD PTR tv1059[ebp], edx
	mov	ebx, 32					; 00000020H
	npad	4
$LL37@RightShift:
	shr	eax, cl
	lea	edi, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	esi, eax
	mov	eax, DWORD PTR [edx+edi-4]
	mov	edx, eax
	shl	edx, cl
	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	mov	DWORD PTR [edi-4], edx
	mov	edx, DWORD PTR tv1059[ebp]
	sub	ebx, 1
	jne	SHORT $LL37@RightShift

; 195  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 196  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 197  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 198  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 199  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 200  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 201  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 202  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;
; 203  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;
; 204  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;
; 205  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;
; 206  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;
; 207  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;
; 208  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;
; 209  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;
; 210  :             work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;
; 211  :             work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;
; 212  :             work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;
; 213  :             work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;
; 214  :             work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;
; 215  :             work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;
; 216  :             work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;
; 217  :             work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;
; 218  :             work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;
; 219  :             work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;
; 220  :             work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;
; 221  :             work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;
; 222  :             work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;
; 223  :             work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;
; 224  :             work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;
; 225  :             work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;
; 226  :             --count;

	mov	esi, DWORD PTR _count$1$[ebp]

; 227  :             pp += 32;

	mov	edx, DWORD PTR _pp$1$[ebp]
	dec	esi

; 228  :             op += 32;

	mov	ebx, DWORD PTR _op$1$[ebp]
	sub	edx, -128				; ffffff80H
	sub	ebx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], esi
	mov	DWORD PTR _pp$1$[ebp], edx
	mov	DWORD PTR _op$1$[ebp], ebx
	test	esi, esi
	jne	SHORT $LL2@RightShift
	mov	edi, DWORD PTR _n_lshift_bit_count$1$[ebp]
$LN3@RightShift:

; 229  :         }
; 230  : 
; 231  :         if (t_count & 0x10)

	test	BYTE PTR _t_count$1$[ebp], 16		; 00000010H
	je	SHORT $LN7@RightShift

; 232  :         {
; 233  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	sub	edx, ebx
	mov	DWORD PTR tv1057[ebp], ebx
	mov	DWORD PTR tv1058[ebp], edx
	mov	DWORD PTR tv1064[ebp], 16		; 00000010H
$LL39@RightShift:
	shr	eax, cl
	lea	ebx, DWORD PTR [ebx+4]
	mov	esi, eax
	mov	ecx, edi
	mov	eax, DWORD PTR [ebx+edx-4]
	mov	edx, eax
	shl	edx, cl
	mov	ecx, DWORD PTR _n$[ebp]
	or	edx, esi
	sub	DWORD PTR tv1064[ebp], 1
	mov	DWORD PTR [ebx-4], edx
	mov	edx, DWORD PTR tv1058[ebp]
	jne	SHORT $LL39@RightShift

; 234  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 235  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 236  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 237  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 238  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 239  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 240  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 241  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;
; 242  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;
; 243  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;
; 244  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;
; 245  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;
; 246  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;
; 247  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;
; 248  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;
; 249  :             pp += 16;

	mov	edx, DWORD PTR _pp$1$[ebp]

; 250  :             op += 16;

	mov	ebx, DWORD PTR _op$1$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _pp$1$[ebp], edx
	add	ebx, 64					; 00000040H
$LN7@RightShift:

; 251  :         }
; 252  : 
; 253  :         if (t_count & 0x8)

	mov	ecx, DWORD PTR _t_count$1$[ebp]
	mov	edi, DWORD PTR _n$[ebp]
	test	cl, 8
	je	$LN8@RightShift

; 254  :         {
; 255  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	esi, DWORD PTR [edx]
	mov	ecx, edi
	shr	eax, cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	shl	edx, cl
	mov	ecx, edi
	or	edx, eax
	shr	esi, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx], edx
	mov	edx, DWORD PTR _pp$1$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	eax, edx
	shl	eax, cl
	mov	ecx, edi
	or	eax, esi
	shr	edx, cl
	mov	DWORD PTR [ebx+4], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	eax, esi
	shl	eax, cl
	mov	ecx, edi
	or	eax, edx
	shr	esi, cl
	mov	DWORD PTR [ebx+8], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, edx
	shl	eax, cl
	mov	ecx, edi
	or	eax, esi
	shr	edx, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+12], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	esi, DWORD PTR [eax+16]
	mov	eax, esi
	shl	eax, cl
	mov	ecx, edi
	or	eax, edx
	shr	esi, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+16], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, edx
	shl	eax, cl
	mov	ecx, edi
	or	eax, esi
	shr	edx, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+20], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	esi, DWORD PTR [eax+24]
	mov	eax, esi
	shl	eax, cl
	mov	ecx, edi
	or	eax, edx
	shr	esi, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+24], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	eax, DWORD PTR [eax+28]
	mov	edx, eax
	shl	edx, cl
	mov	ecx, DWORD PTR _t_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [ebx+28], edx

; 256  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 257  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 258  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 259  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 260  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 261  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 262  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 263  :             pp += 8;

	mov	edx, DWORD PTR _pp$1$[ebp]
	add	edx, 32					; 00000020H

; 264  :             op += 8;

	add	ebx, 32					; 00000020H
	mov	DWORD PTR _pp$1$[ebp], edx
$LN8@RightShift:

; 265  :         }
; 266  : 
; 267  :         if (t_count & 0x4)

	test	cl, 4
	je	SHORT $LN9@RightShift

; 268  :         {
; 269  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	esi, DWORD PTR [edx]
	mov	ecx, edi
	shr	eax, cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	shl	edx, cl
	mov	ecx, edi
	or	edx, eax
	shr	esi, cl
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, edx
	shl	eax, cl
	mov	ecx, edi
	or	eax, esi
	shr	edx, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+4], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	esi, DWORD PTR [eax+8]
	mov	eax, esi
	shl	eax, cl
	mov	ecx, edi
	or	eax, edx
	shr	esi, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx+8], eax
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	edx, eax
	shl	edx, cl
	mov	ecx, DWORD PTR _t_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [ebx+12], edx

; 270  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 271  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 272  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 273  :             pp += 4;

	mov	edx, DWORD PTR _pp$1$[ebp]
	add	edx, 16					; 00000010H

; 274  :             op += 4;

	add	ebx, 16					; 00000010H
	mov	DWORD PTR _pp$1$[ebp], edx
$LN9@RightShift:

; 275  :         }
; 276  : 
; 277  :         if (t_count & 0x2)

	test	cl, 2
	je	SHORT $LN10@RightShift

; 278  :         {
; 279  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	esi, DWORD PTR [edx]
	mov	ecx, edi
	shr	eax, cl
	mov	edx, esi
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	shl	edx, cl

; 280  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	ecx, edi
	or	edx, eax
	shr	esi, cl
	mov	eax, DWORD PTR _pp$1$[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	DWORD PTR [ebx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	edx, eax
	shl	edx, cl
	mov	ecx, DWORD PTR _t_count$1$[ebp]
	or	edx, esi
	mov	DWORD PTR [ebx+4], edx

; 281  :             pp += 2;

	mov	edx, DWORD PTR _pp$1$[ebp]
	add	edx, 8

; 282  :             op += 2;

	add	ebx, 8
$LN10@RightShift:

; 283  :         }
; 284  : 
; 285  :         if (t_count & 0x1)

	test	cl, 1
	je	SHORT $LN11@RightShift

; 286  :         {
; 287  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	ecx, edi
	shr	eax, cl
	mov	ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
	mov	esi, eax
	mov	eax, DWORD PTR [edx]
	mov	edx, eax
	shl	edx, cl
	or	edx, esi
	mov	DWORD PTR [ebx], edx

; 288  :             pp += 1;
; 289  :             op += 1;

	add	ebx, 4
$LN11@RightShift:

; 290  :         }
; 291  : 
; 292  :         work = temp >> n_rshift_bit_count;

	mov	ecx, edi
	shr	eax, cl

; 293  :         if (work != 0 || padding_zero)

	mov	ecx, DWORD PTR _padding_zero$[ebp]
	test	eax, eax
	jne	SHORT $LN13@RightShift
	test	ecx, ecx
	je	SHORT $LN20@RightShift
$LN13@RightShift:

; 294  :             *op = work;

	mov	DWORD PTR [ebx], eax

; 295  : 
; 296  :         if (padding_zero)

	test	ecx, ecx
	je	SHORT $LN20@RightShift

; 297  :             _ZERO_MEMORY_UNIT_DIV(o + p_word_count - n_word_count, n_word_count);

	mov	eax, DWORD PTR _p_word_count$[ebp]
	mov	ecx, DWORD PTR _o$[ebp]
	lea	edi, DWORD PTR [ecx+eax*4]

; 298  :     }
; 299  : }

	mov	ecx, DWORD PTR _n_word_count$1$[ebp]
	xor	eax, eax
	rep stosd
$LN20@RightShift:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_RightShift_Imp_DIV ENDP
_TEXT	ENDS
END
