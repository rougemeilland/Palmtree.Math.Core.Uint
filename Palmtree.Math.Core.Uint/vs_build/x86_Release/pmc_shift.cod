; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_shift.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
PUBLIC	?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
PUBLIC	?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Shift
PUBLIC	?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
PUBLIC	?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_13ICFKHAEN@?$AAu@				; `string'
PUBLIC	??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
CONST	SEGMENT
??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ DB 015H
	DB	'_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13ICFKHAEN@?$AAu@
CONST	SEGMENT
??_C@_13ICFKHAEN@?$AAu@ DB 'u', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0
__ehfuncinfo$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0
__ehfuncinfo$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z$0
__ehfuncinfo$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z$0
__ehfuncinfo$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
__ehfuncinfo$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gexception@std@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
_TEXT	SEGMENT
_root$2 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_n$ = 12						; size = 4
?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp, COMDAT

; 332  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 333  :         if (u->IS_ZERO)

  00028	8b 7d 08	 mov	 edi, DWORD PTR _u$[ebp]
  0002b	f6 47 04 01	 test	 BYTE PTR [edi+4], 1
  0002f	74 17		 je	 SHORT $LN2@PMC_LeftSh

; 334  :             return (&number_zero);

  00031	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 348  :         }
; 349  :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN2@PMC_LeftSh:

; 335  :         else if (n == 0)

  00048	8b 5d 0c	 mov	 ebx, DWORD PTR _n$[ebp]
  0004b	85 db		 test	 ebx, ebx
  0004d	75 1b		 jne	 SHORT $LN4@PMC_LeftSh

; 336  :             return (DuplicateNumber(u));

  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00055	83 c4 04	 add	 esp, 4

; 348  :         }
; 349  :     }

  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN4@PMC_LeftSh:

; 337  :         else
; 338  :         {
; 339  :             ResourceHolderUINT root;

  0006a	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  0006d	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 340  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 341  :             __UNIT_TYPE w_bit_count = u_bit_count + n;
; 342  :             NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  00079	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  0007c	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0007f	03 c3		 add	 eax, ebx
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00087	8b f0		 mov	 esi, eax

; 343  :             LeftShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, n, w->BLOCK, FALSE);

  00089	6a 00		 push	 0
  0008b	ff 76 24	 push	 DWORD PTR [esi+36]
  0008e	53		 push	 ebx
  0008f	ff 77 10	 push	 DWORD PTR [edi+16]
  00092	ff 77 24	 push	 DWORD PTR [edi+36]
  00095	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
  0009a	83 c4 14	 add	 esp, 20			; 00000014H

; 344  :             root.CheckNumber(w);

  0009d	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000a0	56		 push	 esi
  000a1	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 345  :             CommitNumber(w);

  000a6	56		 push	 esi
  000a7	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  000ac	83 c4 04	 add	 esp, 4

; 346  :             root.UnlinkNumber(w);

  000af	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000b2	56		 push	 esi
  000b3	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 347  :             return (w);

  000b8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bf	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000c2	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000c7	8b c6		 mov	 eax, esi

; 348  :         }
; 349  :     }

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d3	59		 pop	 ecx
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
_TEXT	SEGMENT
_root$2 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_n$ = 12						; size = 4
?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp, COMDAT

; 307  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 308  :         if (u->IS_ZERO)

  00028	8b 7d 08	 mov	 edi, DWORD PTR _u$[ebp]
  0002b	f6 47 04 01	 test	 BYTE PTR [edi+4], 1
  0002f	74 17		 je	 SHORT $LN2@PMC_RightS
$LN11@PMC_RightS:

; 327  :             }
; 328  :         }
; 329  :     }

  00031	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN2@PMC_RightS:

; 309  :             return (&number_zero);
; 310  :         else if (n == 0)

  00048	8b 5d 0c	 mov	 ebx, DWORD PTR _n$[ebp]
  0004b	85 db		 test	 ebx, ebx
  0004d	75 1b		 jne	 SHORT $LN4@PMC_RightS

; 311  :             return (DuplicateNumber(u));

  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00055	83 c4 04	 add	 esp, 4

; 327  :             }
; 328  :         }
; 329  :     }

  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN4@PMC_RightS:

; 312  :         else
; 313  :         {
; 314  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  0006a	8b 77 14	 mov	 esi, DWORD PTR [edi+20]

; 315  :             if (u_bit_count <= n)

  0006d	3b f3		 cmp	 esi, ebx
  0006f	76 c0		 jbe	 SHORT $LN11@PMC_RightS

; 316  :                 return (&number_zero);
; 317  :             else
; 318  :             {
; 319  :                 ResourceHolderUINT root;

  00071	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00074	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 320  :                 __UNIT_TYPE w_bit_count = u_bit_count - n;

  00080	2b f3		 sub	 esi, ebx

; 321  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  00082	56		 push	 esi
  00083	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00086	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0008b	8b f0		 mov	 esi, eax

; 322  :                 RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, n, w->BLOCK, FALSE);

  0008d	6a 00		 push	 0
  0008f	ff 76 24	 push	 DWORD PTR [esi+36]
  00092	53		 push	 ebx
  00093	ff 77 10	 push	 DWORD PTR [edi+16]
  00096	ff 77 24	 push	 DWORD PTR [edi+36]
  00099	e8 00 00 00 00	 call	 ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
  0009e	83 c4 14	 add	 esp, 20			; 00000014H

; 323  :                 root.CheckNumber(w);

  000a1	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 324  :                 CommitNumber(w);

  000aa	56		 push	 esi
  000ab	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  000b0	83 c4 04	 add	 esp, 4

; 325  :                 root.UnlinkNumber(w);

  000b3	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000b6	56		 push	 esi
  000b7	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 326  :                 return (w);

  000bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c3	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000c6	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000cb	8b c6		 mov	 eax, esi

; 327  :             }
; 328  :         }
; 329  :     }

  000cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d7	59		 pop	 ecx
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	5b		 pop	 ebx
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_32
_TEXT	SEGMENT
_u$ = 8							; size = 4
_sign$ = 12						; size = 4
_GET_ABS_32 PROC					; COMDAT

; 582  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 583  :             if (u > 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	7e 0a		 jle	 SHORT $LN9@GET_ABS_32

; 584  :             {
; 585  :                 *sign = 1;

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _sign$[ebp]

; 597  :             }
; 598  :         }

  0000d	8b c2		 mov	 eax, edx
  0000f	c6 01 01	 mov	 BYTE PTR [ecx], 1
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
$LN9@GET_ABS_32:

; 586  :                 return ((_UINT32_T)u);
; 587  :             }
; 588  :             else if (u == 0)

  00014	8b 45 0c	 mov	 eax, DWORD PTR _sign$[ebp]
  00017	75 07		 jne	 SHORT $LN4@GET_ABS_32

; 589  :             {
; 590  :                 *sign = 0;

  00019	c6 00 00	 mov	 BYTE PTR [eax], 0

; 591  :                 return (0);

  0001c	33 c0		 xor	 eax, eax

; 597  :             }
; 598  :         }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
$LN4@GET_ABS_32:

; 592  :             }
; 593  :             else
; 594  :             {
; 595  :                 *sign = -1;

  00020	c6 00 ff	 mov	 BYTE PTR [eax], -1

; 596  :                 return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

  00023	81 fa 00 00 00
	80		 cmp	 edx, -2147483648	; 80000000H
  00029	75 04		 jne	 SHORT $LN7@GET_ABS_32

; 597  :             }
; 598  :         }

  0002b	8b c2		 mov	 eax, edx
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN7@GET_ABS_32:

; 596  :                 return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

  0002f	f7 da		 neg	 edx

; 597  :             }
; 598  :         }

  00031	8b c2		 mov	 eax, edx
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT PROC					; COMDAT

; 96   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 97   : #ifdef _M_IX86
; 98   :             __stosd((unsigned long*)d, 0, (unsigned long)count);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _count$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  0000c	f3 ab		 rep stosd
  0000e	5f		 pop	 edi

; 99   : #elif defined(_M_X64)
; 100  :             __stosq(d, 0, count);
; 101  : #else
; 102  : #error unknown platform
; 103  : #endif
; 104  :         }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
__ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _count$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  0000e	f3 a5		 rep movsd
  00010	5f		 pop	 edi
  00011	5e		 pop	 esi

; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);
; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_n$ = 12						; size = 4
?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z PROC ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I, COMDAT

; 375  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 376  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)
; 377  :         {
; 378  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 379  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_LeftShift_X_I;1");
; 380  :         }
; 381  :         if (u == nullptr)

  00026	8b 75 08	 mov	 esi, DWORD PTR _u$[ebp]
  00029	85 f6		 test	 esi, esi
  0002b	74 78		 je	 SHORT $LN21@PMC_LeftSh

; 383  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 384  :         CheckNumber(nu);

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00033	83 c4 04	 add	 esp, 4

; 385  :         ResourceHolderUINT root;

  00036	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00039	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 583  :             if (u > 0)

  00045	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  00048	85 c0		 test	 eax, eax
  0004a	7f 04		 jg	 SHORT $LN16@PMC_LeftSh

; 584  :             {
; 585  :                 *sign = 1;
; 586  :                 return ((_UINT32_T)u);
; 587  :             }
; 588  :             else if (u == 0)

  0004c	75 0b		 jne	 SHORT $LN11@PMC_LeftSh

; 589  :             {
; 590  :                 *sign = 0;
; 591  :                 return (0);

  0004e	33 c0		 xor	 eax, eax
$LN16@PMC_LeftSh:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp

; 388  :         NUMBER_HEADER* w = n_sign >= 0 ? PMC_LeftShift_X_I_Imp(nu, n_abs) : PMC_RightShift_X_I_Imp(nu, n_abs);

  00050	50		 push	 eax
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
  00057	eb 12		 jmp	 SHORT $LN19@PMC_LeftSh
$LN11@PMC_LeftSh:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 596  :                 return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

  00059	3d 00 00 00 80	 cmp	 eax, -2147483648	; 80000000H
  0005e	75 02		 jne	 SHORT $LN14@PMC_LeftSh
  00060	eb 02		 jmp	 SHORT $LN5@PMC_LeftSh
$LN14@PMC_LeftSh:
  00062	f7 d8		 neg	 eax
$LN5@PMC_LeftSh:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp

; 388  :         NUMBER_HEADER* w = n_sign >= 0 ? PMC_LeftShift_X_I_Imp(nu, n_abs) : PMC_RightShift_X_I_Imp(nu, n_abs);

  00064	50		 push	 eax
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
$LN19@PMC_LeftSh:

; 389  :         root.HookNumber(w);

  0006b	83 c4 08	 add	 esp, 8
  0006e	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00071	8b f0		 mov	 esi, eax
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 390  : #ifdef _DEBUG
; 391  :         CheckNumber(w);
; 392  : #endif
; 393  :         root.UnlinkNumber(w);

  00079	56		 push	 esi
  0007a	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0007d	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 394  :         return ((PMC_HANDLE_UINT)w);

  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0008c	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00091	8b c6		 mov	 eax, esi

; 395  :     }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5e		 pop	 esi
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 08 00	 ret	 8
$LN21@PMC_LeftSh:

; 382  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_13ICFKHAEN@?$AAu@
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  000af	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  000b2	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000b7	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000bc	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN18@PMC_LeftSh:
  000c5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z ENDP ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_n$ = 12						; size = 4
?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z PROC ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I, COMDAT

; 352  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 353  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)
; 354  :         {
; 355  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 356  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_shift.cpp;PMC_RightShift_X_I;1");
; 357  :         }
; 358  :         if (u == nullptr)

  00026	8b 75 08	 mov	 esi, DWORD PTR _u$[ebp]
  00029	85 f6		 test	 esi, esi
  0002b	74 78		 je	 SHORT $LN21@PMC_RightS

; 360  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 361  :         CheckNumber(nu);

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00033	83 c4 04	 add	 esp, 4

; 362  :         ResourceHolderUINT root;

  00036	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00039	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 583  :             if (u > 0)

  00045	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  00048	85 c0		 test	 eax, eax
  0004a	7f 04		 jg	 SHORT $LN16@PMC_RightS

; 584  :             {
; 585  :                 *sign = 1;
; 586  :                 return ((_UINT32_T)u);
; 587  :             }
; 588  :             else if (u == 0)

  0004c	75 0b		 jne	 SHORT $LN11@PMC_RightS

; 589  :             {
; 590  :                 *sign = 0;
; 591  :                 return (0);

  0004e	33 c0		 xor	 eax, eax
$LN16@PMC_RightS:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp

; 365  :         NUMBER_HEADER* w = n_sign >= 0 ? PMC_RightShift_X_I_Imp(nu, n_abs) : PMC_LeftShift_X_I_Imp(nu, n_abs);

  00050	50		 push	 eax
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
  00057	eb 12		 jmp	 SHORT $LN19@PMC_RightS
$LN11@PMC_RightS:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 596  :                 return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

  00059	3d 00 00 00 80	 cmp	 eax, -2147483648	; 80000000H
  0005e	75 02		 jne	 SHORT $LN14@PMC_RightS
  00060	eb 02		 jmp	 SHORT $LN5@PMC_RightS
$LN14@PMC_RightS:
  00062	f7 d8		 neg	 eax
$LN5@PMC_RightS:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp

; 365  :         NUMBER_HEADER* w = n_sign >= 0 ? PMC_RightShift_X_I_Imp(nu, n_abs) : PMC_LeftShift_X_I_Imp(nu, n_abs);

  00064	50		 push	 eax
  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
$LN19@PMC_RightS:

; 366  :         root.HookNumber(w);

  0006b	83 c4 08	 add	 esp, 8
  0006e	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00071	8b f0		 mov	 esi, eax
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 367  : #ifdef _DEBUG
; 368  :         CheckNumber(w);
; 369  : #endif
; 370  :         root.UnlinkNumber(w);

  00079	56		 push	 esi
  0007a	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0007d	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 371  :         return ((PMC_HANDLE_UINT)w);

  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0008c	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00091	8b c6		 mov	 eax, esi

; 372  :     }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5e		 pop	 esi
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c2 08 00	 ret	 8
$LN21@PMC_RightS:

; 359  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_13ICFKHAEN@?$AAu@
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  000af	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  000b2	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000b7	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000bc	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN18@PMC_RightS:
  000c5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z ENDP ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Shift, COMDAT

; 399  :         return (PMC_STATUS_OK);

  00000	33 c0		 xor	 eax, eax

; 400  :     }

  00002	c3		 ret	 0
?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Shift
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z
_TEXT	SEGMENT
_n_word_count$1$ = -12					; size = 4
_count$1$ = -8						; size = 4
_n_rshift_bit_count$1$ = -4				; size = 4
_p_count$1$ = 8						; size = 4
_p$ = 8							; size = 4
_work$62$ = 12						; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z PROC ; Palmtree::Math::Core::Internal::LeftShift_Imp, COMDAT

; 172  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 173  :         __UNIT_TYPE* pp = p;
; 174  :         __UNIT_TYPE p_count = p_word_count;
; 175  :         __UNIT_TYPE* op = o;
; 176  :         __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;
; 177  :         __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;
; 178  :         if (n_lshift_bit_count == 0)

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _p_word_count$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR _n$[ebp]
  0000e	8b d7		 mov	 edx, edi
  00010	c1 ea 05	 shr	 edx, 5
  00013	83 e7 1f	 and	 edi, 31			; 0000001fH
  00016	89 55 f4	 mov	 DWORD PTR _n_word_count$1$[ebp], edx
  00019	89 7d 10	 mov	 DWORD PTR _n$[ebp], edi
  0001c	75 23		 jne	 SHORT $LN4@LeftShift_

; 182  :             if (padding_zero)

  0001e	83 7d 18 00	 cmp	 DWORD PTR _padding_zero$[ebp], 0
  00022	8b 45 14	 mov	 eax, DWORD PTR _o$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00025	8b 75 08	 mov	 esi, DWORD PTR _p$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp

; 181  :             _COPY_MEMORY_UNIT(op + n_word_count, pp, p_count);

  00028	8d 3c 90	 lea	 edi, DWORD PTR [eax+edx*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0002b	f3 a5		 rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp

; 182  :             if (padding_zero)

  0002d	0f 84 d3 05 00
	00		 je	 $LN13@LeftShift_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 98   :             __stosd((unsigned long*)d, 0, (unsigned long)count);

  00033	8b f8		 mov	 edi, eax
  00035	8b ca		 mov	 ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp

; 304  :     }

  00037	33 c0		 xor	 eax, eax
  00039	f3 ab		 rep stosd
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN4@LeftShift_:

; 183  :                 _ZERO_MEMORY_UNIT(op, n_word_count);
; 184  :         }
; 185  :         else
; 186  :         {
; 187  :             __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;
; 188  :             pp += p_count - 1;

  00041	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00044	ba 20 00 00 00	 mov	 edx, 32			; 00000020H

; 189  :             op += p_count + n_word_count;

  00049	8b 75 14	 mov	 esi, DWORD PTR _o$[ebp]
  0004c	2b d7		 sub	 edx, edi
  0004e	53		 push	 ebx
  0004f	8d 1c 88	 lea	 ebx, DWORD PTR [eax+ecx*4]
  00052	89 55 fc	 mov	 DWORD PTR _n_rshift_bit_count$1$[ebp], edx
  00055	8b 45 f4	 mov	 eax, DWORD PTR _n_word_count$1$[ebp]
  00058	03 c1		 add	 eax, ecx

; 190  :             p_count -= 1;

  0005a	49		 dec	 ecx
  0005b	89 4d 08	 mov	 DWORD PTR _p_count$1$[ebp], ecx

; 191  :             __UNIT_TYPE temp = *pp;
; 192  :             __UNIT_TYPE work = temp >> n_rshift_bit_count;

  0005e	8b ca		 mov	 ecx, edx
  00060	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  00063	8b 73 fc	 mov	 esi, DWORD PTR [ebx-4]
  00066	8b d6		 mov	 edx, esi
  00068	89 75 0c	 mov	 DWORD PTR _work$62$[ebp], esi
  0006b	d3 ea		 shr	 edx, cl

; 193  :             if (work != 0)

  0006d	85 d2		 test	 edx, edx
  0006f	74 02		 je	 SHORT $LN7@LeftShift_

; 194  :                 *op = work;

  00071	89 10		 mov	 DWORD PTR [eax], edx
$LN7@LeftShift_:

; 195  :             --pp;
; 196  :             --op;
; 197  : 
; 198  :             __UNIT_TYPE count = p_count >> 5;

  00073	8b 4d 08	 mov	 ecx, DWORD PTR _p_count$1$[ebp]
  00076	83 eb 08	 sub	 ebx, 8
  00079	8b d1		 mov	 edx, ecx
  0007b	83 e8 04	 sub	 eax, 4
  0007e	c1 ea 05	 shr	 edx, 5
  00081	89 55 f8	 mov	 DWORD PTR _count$1$[ebp], edx

; 199  :             while (count != 0)

  00084	85 d2		 test	 edx, edx
  00086	0f 84 9f 02 00
	00		 je	 $LN3@LeftShift_
  0008c	0f 1f 40 00	 npad	 4
$LL2@LeftShift_:

; 200  :             {
; 201  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  00090	8b cf		 mov	 ecx, edi
  00092	d3 e6		 shl	 esi, cl
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00097	89 75 0c	 mov	 DWORD PTR _work$62$[ebp], esi
  0009a	8b 33		 mov	 esi, DWORD PTR [ebx]
  0009c	8b d6		 mov	 edx, esi
  0009e	d3 ea		 shr	 edx, cl

; 202  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  000a0	8b cf		 mov	 ecx, edi
  000a2	0b 55 0c	 or	 edx, DWORD PTR _work$62$[ebp]
  000a5	89 10		 mov	 DWORD PTR [eax], edx
  000a7	8b 7b fc	 mov	 edi, DWORD PTR [ebx-4]
  000aa	8b d7		 mov	 edx, edi
  000ac	d3 e6		 shl	 esi, cl
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  000b1	d3 ea		 shr	 edx, cl
  000b3	0b d6		 or	 edx, esi

; 203  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  000b5	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  000b8	89 50 fc	 mov	 DWORD PTR [eax-4], edx
  000bb	8b 73 f8	 mov	 esi, DWORD PTR [ebx-8]
  000be	8b d6		 mov	 edx, esi
  000c0	d3 e7		 shl	 edi, cl
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  000c5	d3 ea		 shr	 edx, cl

; 204  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  000c7	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  000ca	0b d7		 or	 edx, edi
  000cc	89 50 f8	 mov	 DWORD PTR [eax-8], edx
  000cf	8b 7b f4	 mov	 edi, DWORD PTR [ebx-12]
  000d2	8b d7		 mov	 edx, edi
  000d4	d3 e6		 shl	 esi, cl
  000d6	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  000d9	d3 ea		 shr	 edx, cl

; 205  :                 work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

  000db	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  000de	0b d6		 or	 edx, esi
  000e0	89 50 f4	 mov	 DWORD PTR [eax-12], edx
  000e3	8b 73 f0	 mov	 esi, DWORD PTR [ebx-16]
  000e6	8b d6		 mov	 edx, esi
  000e8	d3 e7		 shl	 edi, cl
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  000ed	d3 ea		 shr	 edx, cl

; 206  :                 work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

  000ef	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  000f2	0b d7		 or	 edx, edi
  000f4	89 50 f0	 mov	 DWORD PTR [eax-16], edx
  000f7	8b 7b ec	 mov	 edi, DWORD PTR [ebx-20]
  000fa	8b d7		 mov	 edx, edi
  000fc	d3 e6		 shl	 esi, cl
  000fe	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00101	d3 ea		 shr	 edx, cl

; 207  :                 work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

  00103	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00106	0b d6		 or	 edx, esi
  00108	89 50 ec	 mov	 DWORD PTR [eax-20], edx
  0010b	8b 73 e8	 mov	 esi, DWORD PTR [ebx-24]
  0010e	8b d6		 mov	 edx, esi
  00110	d3 e7		 shl	 edi, cl
  00112	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00115	d3 ea		 shr	 edx, cl

; 208  :                 work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

  00117	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0011a	0b d7		 or	 edx, edi
  0011c	89 50 e8	 mov	 DWORD PTR [eax-24], edx
  0011f	8b 7b e4	 mov	 edi, DWORD PTR [ebx-28]
  00122	8b d7		 mov	 edx, edi
  00124	d3 e6		 shl	 esi, cl
  00126	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00129	d3 ea		 shr	 edx, cl

; 209  :                 work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

  0012b	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0012e	0b d6		 or	 edx, esi
  00130	89 50 e4	 mov	 DWORD PTR [eax-28], edx
  00133	8b 73 e0	 mov	 esi, DWORD PTR [ebx-32]
  00136	8b d6		 mov	 edx, esi
  00138	d3 e7		 shl	 edi, cl
  0013a	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0013d	d3 ea		 shr	 edx, cl

; 210  :                 work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

  0013f	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00142	0b d7		 or	 edx, edi
  00144	89 50 e0	 mov	 DWORD PTR [eax-32], edx
  00147	8b 7b dc	 mov	 edi, DWORD PTR [ebx-36]
  0014a	8b d7		 mov	 edx, edi
  0014c	d3 e6		 shl	 esi, cl
  0014e	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00151	d3 ea		 shr	 edx, cl
  00153	0b d6		 or	 edx, esi
  00155	89 50 dc	 mov	 DWORD PTR [eax-36], edx

; 211  :                 work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

  00158	8b 73 d8	 mov	 esi, DWORD PTR [ebx-40]
  0015b	8b d6		 mov	 edx, esi
  0015d	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00160	d3 e7		 shl	 edi, cl
  00162	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00165	d3 ea		 shr	 edx, cl
  00167	0b d7		 or	 edx, edi

; 212  :                 work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

  00169	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0016c	89 50 d8	 mov	 DWORD PTR [eax-40], edx
  0016f	8b 7b d4	 mov	 edi, DWORD PTR [ebx-44]
  00172	8b d7		 mov	 edx, edi
  00174	d3 e6		 shl	 esi, cl
  00176	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00179	d3 ea		 shr	 edx, cl
  0017b	0b d6		 or	 edx, esi

; 213  :                 work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

  0017d	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00180	89 50 d4	 mov	 DWORD PTR [eax-44], edx
  00183	8b 73 d0	 mov	 esi, DWORD PTR [ebx-48]
  00186	8b d6		 mov	 edx, esi
  00188	d3 e7		 shl	 edi, cl
  0018a	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0018d	d3 ea		 shr	 edx, cl

; 214  :                 work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

  0018f	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00192	0b d7		 or	 edx, edi
  00194	89 50 d0	 mov	 DWORD PTR [eax-48], edx
  00197	8b 7b cc	 mov	 edi, DWORD PTR [ebx-52]
  0019a	8b d7		 mov	 edx, edi
  0019c	d3 e6		 shl	 esi, cl
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  001a1	d3 ea		 shr	 edx, cl

; 215  :                 work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

  001a3	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  001a6	0b d6		 or	 edx, esi
  001a8	89 50 cc	 mov	 DWORD PTR [eax-52], edx
  001ab	8b 73 c8	 mov	 esi, DWORD PTR [ebx-56]
  001ae	8b d6		 mov	 edx, esi
  001b0	d3 e7		 shl	 edi, cl
  001b2	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  001b5	d3 ea		 shr	 edx, cl

; 216  :                 work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

  001b7	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  001ba	0b d7		 or	 edx, edi
  001bc	89 50 c8	 mov	 DWORD PTR [eax-56], edx
  001bf	8b 7b c4	 mov	 edi, DWORD PTR [ebx-60]
  001c2	8b d7		 mov	 edx, edi
  001c4	d3 e6		 shl	 esi, cl
  001c6	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  001c9	d3 ea		 shr	 edx, cl

; 217  :                 work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

  001cb	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  001ce	0b d6		 or	 edx, esi
  001d0	89 50 c4	 mov	 DWORD PTR [eax-60], edx
  001d3	8b 73 c0	 mov	 esi, DWORD PTR [ebx-64]
  001d6	8b d6		 mov	 edx, esi
  001d8	d3 e7		 shl	 edi, cl
  001da	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  001dd	d3 ea		 shr	 edx, cl

; 218  :                 work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

  001df	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  001e2	0b d7		 or	 edx, edi
  001e4	89 50 c0	 mov	 DWORD PTR [eax-64], edx
  001e7	8b 7b bc	 mov	 edi, DWORD PTR [ebx-68]
  001ea	8b d7		 mov	 edx, edi
  001ec	d3 e6		 shl	 esi, cl
  001ee	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  001f1	d3 ea		 shr	 edx, cl

; 219  :                 work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

  001f3	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  001f6	0b d6		 or	 edx, esi
  001f8	89 50 bc	 mov	 DWORD PTR [eax-68], edx
  001fb	8b 73 b8	 mov	 esi, DWORD PTR [ebx-72]
  001fe	8b d6		 mov	 edx, esi
  00200	d3 e7		 shl	 edi, cl
  00202	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00205	d3 ea		 shr	 edx, cl

; 220  :                 work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

  00207	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0020a	0b d7		 or	 edx, edi
  0020c	89 50 b8	 mov	 DWORD PTR [eax-72], edx
  0020f	8b 7b b4	 mov	 edi, DWORD PTR [ebx-76]
  00212	8b d7		 mov	 edx, edi
  00214	d3 e6		 shl	 esi, cl
  00216	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00219	d3 ea		 shr	 edx, cl

; 221  :                 work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

  0021b	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0021e	0b d6		 or	 edx, esi
  00220	89 50 b4	 mov	 DWORD PTR [eax-76], edx
  00223	8b 73 b0	 mov	 esi, DWORD PTR [ebx-80]
  00226	8b d6		 mov	 edx, esi
  00228	d3 e7		 shl	 edi, cl
  0022a	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0022d	d3 ea		 shr	 edx, cl
  0022f	0b d7		 or	 edx, edi

; 222  :                 work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

  00231	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00234	89 50 b0	 mov	 DWORD PTR [eax-80], edx
  00237	8b 7b ac	 mov	 edi, DWORD PTR [ebx-84]
  0023a	8b d7		 mov	 edx, edi
  0023c	d3 e6		 shl	 esi, cl
  0023e	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00241	d3 ea		 shr	 edx, cl
  00243	0b d6		 or	 edx, esi

; 223  :                 work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

  00245	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00248	89 50 ac	 mov	 DWORD PTR [eax-84], edx
  0024b	8b 73 a8	 mov	 esi, DWORD PTR [ebx-88]
  0024e	8b d6		 mov	 edx, esi
  00250	d3 e7		 shl	 edi, cl
  00252	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00255	d3 ea		 shr	 edx, cl

; 224  :                 work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

  00257	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0025a	0b d7		 or	 edx, edi
  0025c	89 50 a8	 mov	 DWORD PTR [eax-88], edx
  0025f	8b 7b a4	 mov	 edi, DWORD PTR [ebx-92]
  00262	8b d7		 mov	 edx, edi
  00264	d3 e6		 shl	 esi, cl
  00266	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00269	d3 ea		 shr	 edx, cl

; 225  :                 work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

  0026b	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0026e	0b d6		 or	 edx, esi
  00270	89 50 a4	 mov	 DWORD PTR [eax-92], edx
  00273	8b 73 a0	 mov	 esi, DWORD PTR [ebx-96]
  00276	8b d6		 mov	 edx, esi
  00278	d3 e7		 shl	 edi, cl
  0027a	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0027d	d3 ea		 shr	 edx, cl

; 226  :                 work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

  0027f	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00282	0b d7		 or	 edx, edi
  00284	89 50 a0	 mov	 DWORD PTR [eax-96], edx
  00287	8b 7b 9c	 mov	 edi, DWORD PTR [ebx-100]
  0028a	8b d7		 mov	 edx, edi
  0028c	d3 e6		 shl	 esi, cl
  0028e	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00291	d3 ea		 shr	 edx, cl

; 227  :                 work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

  00293	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00296	0b d6		 or	 edx, esi
  00298	89 50 9c	 mov	 DWORD PTR [eax-100], edx
  0029b	8b 73 98	 mov	 esi, DWORD PTR [ebx-104]
  0029e	8b d6		 mov	 edx, esi
  002a0	d3 e7		 shl	 edi, cl
  002a2	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  002a5	d3 ea		 shr	 edx, cl

; 228  :                 work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

  002a7	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  002aa	0b d7		 or	 edx, edi
  002ac	89 50 98	 mov	 DWORD PTR [eax-104], edx
  002af	8b 7b 94	 mov	 edi, DWORD PTR [ebx-108]
  002b2	8b d7		 mov	 edx, edi
  002b4	d3 e6		 shl	 esi, cl
  002b6	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  002b9	d3 ea		 shr	 edx, cl

; 229  :                 work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

  002bb	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  002be	0b d6		 or	 edx, esi
  002c0	89 50 94	 mov	 DWORD PTR [eax-108], edx
  002c3	8b 73 90	 mov	 esi, DWORD PTR [ebx-112]
  002c6	8b d6		 mov	 edx, esi
  002c8	d3 e7		 shl	 edi, cl
  002ca	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  002cd	d3 ea		 shr	 edx, cl

; 230  :                 work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

  002cf	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  002d2	0b d7		 or	 edx, edi
  002d4	89 50 90	 mov	 DWORD PTR [eax-112], edx
  002d7	8b 7b 8c	 mov	 edi, DWORD PTR [ebx-116]
  002da	8b d7		 mov	 edx, edi
  002dc	d3 e6		 shl	 esi, cl
  002de	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  002e1	d3 ea		 shr	 edx, cl

; 231  :                 work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

  002e3	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  002e6	0b d6		 or	 edx, esi
  002e8	89 50 8c	 mov	 DWORD PTR [eax-116], edx
  002eb	d3 e7		 shl	 edi, cl
  002ed	8b 73 88	 mov	 esi, DWORD PTR [ebx-120]
  002f0	8b d6		 mov	 edx, esi
  002f2	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  002f5	d3 ea		 shr	 edx, cl
  002f7	0b d7		 or	 edx, edi

; 232  :                 work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

  002f9	8b 7d 10	 mov	 edi, DWORD PTR _n$[ebp]
  002fc	89 50 88	 mov	 DWORD PTR [eax-120], edx
  002ff	8b cf		 mov	 ecx, edi
  00301	d3 e6		 shl	 esi, cl
  00303	8b 4b 84	 mov	 ecx, DWORD PTR [ebx-124]
  00306	8b d1		 mov	 edx, ecx
  00308	89 4d 0c	 mov	 DWORD PTR _work$62$[ebp], ecx

; 233  :                 pp -= 32;

  0030b	83 c3 80	 add	 ebx, -128		; ffffff80H
  0030e	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00311	d3 ea		 shr	 edx, cl
  00313	0b d6		 or	 edx, esi
  00315	8b 75 0c	 mov	 esi, DWORD PTR _work$62$[ebp]
  00318	89 50 84	 mov	 DWORD PTR [eax-124], edx

; 234  :                 op -= 32;

  0031b	83 c0 80	 add	 eax, -128		; ffffff80H

; 235  :                 --count;

  0031e	83 6d f8 01	 sub	 DWORD PTR _count$1$[ebp], 1
  00322	0f 85 68 fd ff
	ff		 jne	 $LL2@LeftShift_
  00328	8b 4d 08	 mov	 ecx, DWORD PTR _p_count$1$[ebp]
$LN3@LeftShift_:

; 236  :             }
; 237  : 
; 238  :             if (p_count & 0x10)

  0032b	f6 c1 10	 test	 cl, 16			; 00000010H
  0032e	0f 84 4e 01 00
	00		 je	 $LN8@LeftShift_

; 239  :             {
; 240  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  00334	8b cf		 mov	 ecx, edi
  00336	d3 e6		 shl	 esi, cl
  00338	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0033b	89 75 0c	 mov	 DWORD PTR _work$62$[ebp], esi
  0033e	8b 33		 mov	 esi, DWORD PTR [ebx]
  00340	8b d6		 mov	 edx, esi
  00342	d3 ea		 shr	 edx, cl

; 241  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  00344	8b cf		 mov	 ecx, edi
  00346	0b 55 0c	 or	 edx, DWORD PTR _work$62$[ebp]
  00349	89 10		 mov	 DWORD PTR [eax], edx
  0034b	8b 7b fc	 mov	 edi, DWORD PTR [ebx-4]
  0034e	8b d7		 mov	 edx, edi
  00350	d3 e6		 shl	 esi, cl
  00352	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00355	d3 ea		 shr	 edx, cl
  00357	0b d6		 or	 edx, esi

; 242  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  00359	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0035c	89 50 fc	 mov	 DWORD PTR [eax-4], edx
  0035f	8b 73 f8	 mov	 esi, DWORD PTR [ebx-8]
  00362	8b d6		 mov	 edx, esi
  00364	d3 e7		 shl	 edi, cl
  00366	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00369	d3 ea		 shr	 edx, cl

; 243  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  0036b	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0036e	0b d7		 or	 edx, edi
  00370	89 50 f8	 mov	 DWORD PTR [eax-8], edx
  00373	8b 7b f4	 mov	 edi, DWORD PTR [ebx-12]
  00376	8b d7		 mov	 edx, edi
  00378	d3 e6		 shl	 esi, cl
  0037a	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0037d	d3 ea		 shr	 edx, cl

; 244  :                 work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

  0037f	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00382	0b d6		 or	 edx, esi
  00384	89 50 f4	 mov	 DWORD PTR [eax-12], edx
  00387	8b 73 f0	 mov	 esi, DWORD PTR [ebx-16]
  0038a	8b d6		 mov	 edx, esi
  0038c	d3 e7		 shl	 edi, cl
  0038e	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00391	d3 ea		 shr	 edx, cl

; 245  :                 work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

  00393	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00396	0b d7		 or	 edx, edi
  00398	89 50 f0	 mov	 DWORD PTR [eax-16], edx
  0039b	8b 7b ec	 mov	 edi, DWORD PTR [ebx-20]
  0039e	8b d7		 mov	 edx, edi
  003a0	d3 e6		 shl	 esi, cl
  003a2	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  003a5	d3 ea		 shr	 edx, cl

; 246  :                 work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

  003a7	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  003aa	0b d6		 or	 edx, esi
  003ac	89 50 ec	 mov	 DWORD PTR [eax-20], edx
  003af	8b 73 e8	 mov	 esi, DWORD PTR [ebx-24]
  003b2	8b d6		 mov	 edx, esi
  003b4	d3 e7		 shl	 edi, cl
  003b6	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  003b9	d3 ea		 shr	 edx, cl

; 247  :                 work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

  003bb	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  003be	0b d7		 or	 edx, edi
  003c0	89 50 e8	 mov	 DWORD PTR [eax-24], edx
  003c3	8b 7b e4	 mov	 edi, DWORD PTR [ebx-28]
  003c6	8b d7		 mov	 edx, edi
  003c8	d3 e6		 shl	 esi, cl
  003ca	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  003cd	d3 ea		 shr	 edx, cl

; 248  :                 work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

  003cf	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  003d2	0b d6		 or	 edx, esi
  003d4	89 50 e4	 mov	 DWORD PTR [eax-28], edx
  003d7	8b 73 e0	 mov	 esi, DWORD PTR [ebx-32]
  003da	8b d6		 mov	 edx, esi
  003dc	d3 e7		 shl	 edi, cl
  003de	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  003e1	d3 ea		 shr	 edx, cl

; 249  :                 work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

  003e3	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  003e6	0b d7		 or	 edx, edi
  003e8	89 50 e0	 mov	 DWORD PTR [eax-32], edx
  003eb	8b 7b dc	 mov	 edi, DWORD PTR [ebx-36]
  003ee	8b d7		 mov	 edx, edi
  003f0	d3 e6		 shl	 esi, cl
  003f2	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  003f5	d3 ea		 shr	 edx, cl
  003f7	0b d6		 or	 edx, esi
  003f9	89 50 dc	 mov	 DWORD PTR [eax-36], edx

; 250  :                 work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

  003fc	8b 73 d8	 mov	 esi, DWORD PTR [ebx-40]
  003ff	8b d6		 mov	 edx, esi
  00401	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00404	d3 e7		 shl	 edi, cl
  00406	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00409	d3 ea		 shr	 edx, cl

; 251  :                 work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

  0040b	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0040e	0b d7		 or	 edx, edi
  00410	89 50 d8	 mov	 DWORD PTR [eax-40], edx
  00413	8b 7b d4	 mov	 edi, DWORD PTR [ebx-44]
  00416	8b d7		 mov	 edx, edi
  00418	d3 e6		 shl	 esi, cl
  0041a	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0041d	d3 ea		 shr	 edx, cl

; 252  :                 work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

  0041f	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00422	0b d6		 or	 edx, esi
  00424	89 50 d4	 mov	 DWORD PTR [eax-44], edx
  00427	8b 73 d0	 mov	 esi, DWORD PTR [ebx-48]
  0042a	8b d6		 mov	 edx, esi
  0042c	d3 e7		 shl	 edi, cl
  0042e	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00431	d3 ea		 shr	 edx, cl

; 253  :                 work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

  00433	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00436	0b d7		 or	 edx, edi
  00438	89 50 d0	 mov	 DWORD PTR [eax-48], edx
  0043b	8b 7b cc	 mov	 edi, DWORD PTR [ebx-52]
  0043e	8b d7		 mov	 edx, edi
  00440	d3 e6		 shl	 esi, cl
  00442	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00445	d3 ea		 shr	 edx, cl

; 254  :                 work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

  00447	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  0044a	0b d6		 or	 edx, esi
  0044c	89 50 cc	 mov	 DWORD PTR [eax-52], edx
  0044f	8b 73 c8	 mov	 esi, DWORD PTR [ebx-56]
  00452	8b d6		 mov	 edx, esi
  00454	d3 e7		 shl	 edi, cl
  00456	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00459	d3 ea		 shr	 edx, cl
  0045b	0b d7		 or	 edx, edi

; 255  :                 work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

  0045d	8b 7d 10	 mov	 edi, DWORD PTR _n$[ebp]
  00460	89 50 c8	 mov	 DWORD PTR [eax-56], edx
  00463	8b cf		 mov	 ecx, edi
  00465	d3 e6		 shl	 esi, cl
  00467	8b 4b c4	 mov	 ecx, DWORD PTR [ebx-60]
  0046a	8b d1		 mov	 edx, ecx
  0046c	89 4d 0c	 mov	 DWORD PTR _work$62$[ebp], ecx

; 256  :                 pp -= 16;

  0046f	83 eb 40	 sub	 ebx, 64			; 00000040H
  00472	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00475	d3 ea		 shr	 edx, cl
  00477	8b 4d 08	 mov	 ecx, DWORD PTR _p_count$1$[ebp]
  0047a	0b d6		 or	 edx, esi
  0047c	89 50 c4	 mov	 DWORD PTR [eax-60], edx

; 257  :                 op -= 16;

  0047f	83 e8 40	 sub	 eax, 64			; 00000040H
$LN8@LeftShift_:

; 258  :             }
; 259  : 
; 260  :             if (p_count & 0x8)

  00482	f6 c1 08	 test	 cl, 8
  00485	0f 84 ac 00 00
	00		 je	 $LN9@LeftShift_

; 261  :             {
; 262  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  0048b	8b 33		 mov	 esi, DWORD PTR [ebx]
  0048d	8b cf		 mov	 ecx, edi
  0048f	d3 65 0c	 shl	 DWORD PTR _work$62$[ebp], cl
  00492	8b d6		 mov	 edx, esi
  00494	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00497	d3 ea		 shr	 edx, cl

; 263  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  00499	8b cf		 mov	 ecx, edi
  0049b	0b 55 0c	 or	 edx, DWORD PTR _work$62$[ebp]
  0049e	89 10		 mov	 DWORD PTR [eax], edx
  004a0	8b 7b fc	 mov	 edi, DWORD PTR [ebx-4]
  004a3	8b d7		 mov	 edx, edi
  004a5	d3 e6		 shl	 esi, cl
  004a7	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  004aa	d3 ea		 shr	 edx, cl

; 264  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  004ac	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  004af	0b d6		 or	 edx, esi
  004b1	89 50 fc	 mov	 DWORD PTR [eax-4], edx
  004b4	8b 73 f8	 mov	 esi, DWORD PTR [ebx-8]
  004b7	8b d6		 mov	 edx, esi
  004b9	d3 e7		 shl	 edi, cl
  004bb	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  004be	d3 ea		 shr	 edx, cl

; 265  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  004c0	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  004c3	0b d7		 or	 edx, edi
  004c5	89 50 f8	 mov	 DWORD PTR [eax-8], edx
  004c8	8b 7b f4	 mov	 edi, DWORD PTR [ebx-12]
  004cb	8b d7		 mov	 edx, edi
  004cd	d3 e6		 shl	 esi, cl
  004cf	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  004d2	d3 ea		 shr	 edx, cl

; 266  :                 work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

  004d4	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  004d7	0b d6		 or	 edx, esi
  004d9	89 50 f4	 mov	 DWORD PTR [eax-12], edx
  004dc	8b 73 f0	 mov	 esi, DWORD PTR [ebx-16]
  004df	8b d6		 mov	 edx, esi
  004e1	d3 e7		 shl	 edi, cl
  004e3	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  004e6	d3 ea		 shr	 edx, cl

; 267  :                 work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

  004e8	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  004eb	0b d7		 or	 edx, edi
  004ed	89 50 f0	 mov	 DWORD PTR [eax-16], edx
  004f0	8b 7b ec	 mov	 edi, DWORD PTR [ebx-20]
  004f3	8b d7		 mov	 edx, edi
  004f5	d3 e6		 shl	 esi, cl
  004f7	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  004fa	d3 ea		 shr	 edx, cl

; 268  :                 work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

  004fc	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  004ff	0b d6		 or	 edx, esi
  00501	89 50 ec	 mov	 DWORD PTR [eax-20], edx
  00504	8b 73 e8	 mov	 esi, DWORD PTR [ebx-24]
  00507	8b d6		 mov	 edx, esi
  00509	d3 e7		 shl	 edi, cl
  0050b	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0050e	d3 ea		 shr	 edx, cl
  00510	0b d7		 or	 edx, edi

; 269  :                 work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

  00512	8b 7d 10	 mov	 edi, DWORD PTR _n$[ebp]
  00515	89 50 e8	 mov	 DWORD PTR [eax-24], edx
  00518	8b cf		 mov	 ecx, edi
  0051a	d3 e6		 shl	 esi, cl
  0051c	8b 4b e4	 mov	 ecx, DWORD PTR [ebx-28]
  0051f	8b d1		 mov	 edx, ecx
  00521	89 4d 0c	 mov	 DWORD PTR _work$62$[ebp], ecx

; 270  :                 pp -= 8;

  00524	83 eb 20	 sub	 ebx, 32			; 00000020H
  00527	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0052a	d3 ea		 shr	 edx, cl
  0052c	8b 4d 08	 mov	 ecx, DWORD PTR _p_count$1$[ebp]
  0052f	0b d6		 or	 edx, esi
  00531	89 50 e4	 mov	 DWORD PTR [eax-28], edx

; 271  :                 op -= 8;

  00534	83 e8 20	 sub	 eax, 32			; 00000020H
$LN9@LeftShift_:

; 272  :             }
; 273  : 
; 274  :             if (p_count & 0x4)

  00537	f6 c1 04	 test	 cl, 4
  0053a	74 5c		 je	 SHORT $LN10@LeftShift_

; 275  :             {
; 276  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  0053c	8b 33		 mov	 esi, DWORD PTR [ebx]
  0053e	8b cf		 mov	 ecx, edi
  00540	d3 65 0c	 shl	 DWORD PTR _work$62$[ebp], cl
  00543	8b d6		 mov	 edx, esi
  00545	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  00548	d3 ea		 shr	 edx, cl

; 277  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  0054a	8b cf		 mov	 ecx, edi
  0054c	0b 55 0c	 or	 edx, DWORD PTR _work$62$[ebp]
  0054f	89 10		 mov	 DWORD PTR [eax], edx
  00551	8b 7b fc	 mov	 edi, DWORD PTR [ebx-4]
  00554	8b d7		 mov	 edx, edi
  00556	d3 e6		 shl	 esi, cl
  00558	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0055b	d3 ea		 shr	 edx, cl

; 278  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  0055d	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00560	0b d6		 or	 edx, esi
  00562	89 50 fc	 mov	 DWORD PTR [eax-4], edx
  00565	8b 73 f8	 mov	 esi, DWORD PTR [ebx-8]
  00568	8b d6		 mov	 edx, esi
  0056a	d3 e7		 shl	 edi, cl
  0056c	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0056f	d3 ea		 shr	 edx, cl
  00571	0b d7		 or	 edx, edi

; 279  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  00573	8b 7d 10	 mov	 edi, DWORD PTR _n$[ebp]
  00576	89 50 f8	 mov	 DWORD PTR [eax-8], edx
  00579	8b cf		 mov	 ecx, edi
  0057b	d3 e6		 shl	 esi, cl
  0057d	8b 4b f4	 mov	 ecx, DWORD PTR [ebx-12]
  00580	8b d1		 mov	 edx, ecx
  00582	89 4d 0c	 mov	 DWORD PTR _work$62$[ebp], ecx

; 280  :                 pp -= 4;

  00585	83 eb 10	 sub	 ebx, 16			; 00000010H
  00588	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  0058b	d3 ea		 shr	 edx, cl
  0058d	8b 4d 08	 mov	 ecx, DWORD PTR _p_count$1$[ebp]
  00590	0b d6		 or	 edx, esi
  00592	89 50 f4	 mov	 DWORD PTR [eax-12], edx

; 281  :                 op -= 4;

  00595	83 e8 10	 sub	 eax, 16			; 00000010H
$LN10@LeftShift_:

; 282  :             }
; 283  : 
; 284  :             if (p_count & 0x2)

  00598	f6 c1 02	 test	 cl, 2
  0059b	74 32		 je	 SHORT $LN11@LeftShift_

; 285  :             {
; 286  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  0059d	8b 33		 mov	 esi, DWORD PTR [ebx]
  0059f	8b cf		 mov	 ecx, edi
  005a1	d3 65 0c	 shl	 DWORD PTR _work$62$[ebp], cl
  005a4	8b d6		 mov	 edx, esi
  005a6	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  005a9	d3 ea		 shr	 edx, cl

; 287  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  005ab	8b cf		 mov	 ecx, edi
  005ad	0b 55 0c	 or	 edx, DWORD PTR _work$62$[ebp]
  005b0	89 10		 mov	 DWORD PTR [eax], edx
  005b2	d3 e6		 shl	 esi, cl
  005b4	8b 4b fc	 mov	 ecx, DWORD PTR [ebx-4]
  005b7	8b d1		 mov	 edx, ecx
  005b9	89 4d 0c	 mov	 DWORD PTR _work$62$[ebp], ecx

; 288  :                 pp -= 2;

  005bc	83 eb 08	 sub	 ebx, 8
  005bf	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  005c2	d3 ea		 shr	 edx, cl
  005c4	8b 4d 08	 mov	 ecx, DWORD PTR _p_count$1$[ebp]
  005c7	0b d6		 or	 edx, esi
  005c9	89 50 fc	 mov	 DWORD PTR [eax-4], edx

; 289  :                 op -= 2;

  005cc	83 e8 08	 sub	 eax, 8
$LN11@LeftShift_:

; 290  :             }
; 291  : 
; 292  :             if (p_count & 0x1)

  005cf	f6 c1 01	 test	 cl, 1
  005d2	74 18		 je	 SHORT $LN12@LeftShift_

; 293  :             {
; 294  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  005d4	8b 75 0c	 mov	 esi, DWORD PTR _work$62$[ebp]
  005d7	8b cf		 mov	 ecx, edi
  005d9	8b 13		 mov	 edx, DWORD PTR [ebx]
  005db	d3 e6		 shl	 esi, cl
  005dd	8b 4d fc	 mov	 ecx, DWORD PTR _n_rshift_bit_count$1$[ebp]
  005e0	89 55 0c	 mov	 DWORD PTR _work$62$[ebp], edx
  005e3	d3 ea		 shr	 edx, cl
  005e5	0b d6		 or	 edx, esi
  005e7	89 10		 mov	 DWORD PTR [eax], edx

; 295  :                 pp -= 1;
; 296  :                 op -= 1;

  005e9	83 e8 04	 sub	 eax, 4
$LN12@LeftShift_:

; 297  :             }
; 298  :             work = temp << n_lshift_bit_count;

  005ec	8b 55 0c	 mov	 edx, DWORD PTR _work$62$[ebp]
  005ef	8b cf		 mov	 ecx, edi
  005f1	d3 e2		 shl	 edx, cl

; 299  :             *op = work;
; 300  : 
; 301  :             if (padding_zero)

  005f3	83 7d 18 00	 cmp	 DWORD PTR _padding_zero$[ebp], 0
  005f7	89 10		 mov	 DWORD PTR [eax], edx
  005f9	5b		 pop	 ebx
  005fa	74 0a		 je	 SHORT $LN13@LeftShift_
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 98   :             __stosd((unsigned long*)d, 0, (unsigned long)count);

  005fc	8b 7d 14	 mov	 edi, DWORD PTR _o$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp

; 304  :     }

  005ff	33 c0		 xor	 eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 98   :             __stosd((unsigned long*)d, 0, (unsigned long)count);

  00601	8b 4d f4	 mov	 ecx, DWORD PTR _n_word_count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp

; 304  :     }

  00604	f3 ab		 rep stosd
$LN13@LeftShift_:
  00606	5f		 pop	 edi
  00607	5e		 pop	 esi
  00608	8b e5		 mov	 esp, ebp
  0060a	5d		 pop	 ebp
  0060b	c3		 ret	 0
?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ENDP ; Palmtree::Math::Core::Internal::LeftShift_Imp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z
_TEXT	SEGMENT
tv1058 = -28						; size = 4
tv1059 = -24						; size = 4
tv1057 = -24						; size = 4
_n_word_count$1$ = -20					; size = 4
_count$1$ = -16						; size = 4
tv1064 = -16						; size = 4
_op$1$ = -12						; size = 4
_t_count$1$ = -8					; size = 4
_n_lshift_bit_count$1$ = -4				; size = 4
_pp$1$ = 8						; size = 4
_p$ = 8							; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z PROC ; Palmtree::Math::Core::Internal::RightShift_Imp, COMDAT

; 37   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 38   :         __UNIT_TYPE* pp = p;
; 39   :         __UNIT_TYPE p_count = p_word_count;
; 40   :         __UNIT_TYPE* op = o;
; 41   :         // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 42   :         __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

  00006	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]

; 43   :         __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

  00009	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0000c	53		 push	 ebx
  0000d	8b 5d 14	 mov	 ebx, DWORD PTR _o$[ebp]
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
  00013	89 5d f4	 mov	 DWORD PTR _op$1$[ebp], ebx
  00016	c1 ee 05	 shr	 esi, 5
  00019	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0001c	57		 push	 edi
  0001d	89 75 ec	 mov	 DWORD PTR _n_word_count$1$[ebp], esi
  00020	89 4d 10	 mov	 DWORD PTR _n$[ebp], ecx
  00023	8d 14 b0	 lea	 edx, DWORD PTR [eax+esi*4]
  00026	8b 45 0c	 mov	 eax, DWORD PTR _p_word_count$[ebp]
  00029	2b c6		 sub	 eax, esi
  0002b	89 45 0c	 mov	 DWORD PTR _p_word_count$[ebp], eax

; 44   :         if (n_rshift_bit_count == 0)

  0002e	85 c9		 test	 ecx, ecx
  00030	75 23		 jne	 SHORT $LN4@RightShift

; 48   :             if (padding_zero)

  00032	83 7d 18 00	 cmp	 DWORD PTR _padding_zero$[ebp], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00036	8b fb		 mov	 edi, ebx
  00038	8b f2		 mov	 esi, edx
  0003a	8b c8		 mov	 ecx, eax
  0003c	f3 a5		 rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp

; 48   :             if (padding_zero)

  0003e	0f 84 7c 02 00
	00		 je	 $LN14@RightShift

; 168  :         }
; 169  :     }

  00044	8b 4d ec	 mov	 ecx, DWORD PTR _n_word_count$1$[ebp]
  00047	8d 3c 83	 lea	 edi, DWORD PTR [ebx+eax*4]
  0004a	33 c0		 xor	 eax, eax
  0004c	f3 ab		 rep stosd
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN4@RightShift:

; 49   :                 _ZERO_MEMORY_UNIT(op + p_count - n_word_count, n_word_count);
; 50   :         }
; 51   :         else
; 52   :         {
; 53   :             pp += n_word_count;
; 54   :             __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;
; 55   :             // p_count - n_word_count 回繰り返し
; 56   : 
; 57   :             __UNIT_TYPE temp = *pp++;

  00055	8b 02		 mov	 eax, DWORD PTR [edx]
  00057	bf 20 00 00 00	 mov	 edi, 32			; 00000020H
  0005c	2b f9		 sub	 edi, ecx
  0005e	83 c2 04	 add	 edx, 4

; 58   :             __UNIT_TYPE work;
; 59   :             __UNIT_TYPE t_count = p_count - n_word_count - 1;

  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _p_word_count$[ebp]
  00064	49		 dec	 ecx
  00065	89 7d fc	 mov	 DWORD PTR _n_lshift_bit_count$1$[ebp], edi

; 60   : 
; 61   :             __UNIT_TYPE count = t_count >> 5;

  00068	8b f1		 mov	 esi, ecx
  0006a	89 4d f8	 mov	 DWORD PTR _t_count$1$[ebp], ecx

; 62   :             while (count > 0)

  0006d	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  00070	c1 ee 05	 shr	 esi, 5
  00073	89 55 08	 mov	 DWORD PTR _pp$1$[ebp], edx
  00076	89 75 f0	 mov	 DWORD PTR _count$1$[ebp], esi
  00079	85 f6		 test	 esi, esi
  0007b	74 55		 je	 SHORT $LN3@RightShift
  0007d	0f 1f 00	 npad	 3
$LL2@RightShift:

; 63   :             {
; 64   :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  00080	2b d3		 sub	 edx, ebx
  00082	8b fb		 mov	 edi, ebx
  00084	89 55 e8	 mov	 DWORD PTR tv1059[ebp], edx
  00087	bb 20 00 00 00	 mov	 ebx, 32			; 00000020H
  0008c	0f 1f 40 00	 npad	 4
$LL37@RightShift:
  00090	d3 e8		 shr	 eax, cl
  00092	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  00098	8b f0		 mov	 esi, eax
  0009a	8b 44 3a fc	 mov	 eax, DWORD PTR [edx+edi-4]
  0009e	8b d0		 mov	 edx, eax
  000a0	d3 e2		 shl	 edx, cl
  000a2	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  000a5	0b d6		 or	 edx, esi
  000a7	89 57 fc	 mov	 DWORD PTR [edi-4], edx
  000aa	8b 55 e8	 mov	 edx, DWORD PTR tv1059[ebp]
  000ad	83 eb 01	 sub	 ebx, 1
  000b0	75 de		 jne	 SHORT $LL37@RightShift

; 65   :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 66   :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 67   :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 68   :                 work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 69   :                 work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 70   :                 work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 71   :                 work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 72   :                 work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;
; 73   :                 work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;
; 74   :                 work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;
; 75   :                 work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;
; 76   :                 work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;
; 77   :                 work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;
; 78   :                 work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;
; 79   :                 work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;
; 80   :                 work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;
; 81   :                 work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;
; 82   :                 work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;
; 83   :                 work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;
; 84   :                 work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;
; 85   :                 work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;
; 86   :                 work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;
; 87   :                 work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;
; 88   :                 work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;
; 89   :                 work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;
; 90   :                 work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;
; 91   :                 work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;
; 92   :                 work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;
; 93   :                 work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;
; 94   :                 work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;
; 95   :                 work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;
; 96   :                 --count;

  000b2	8b 75 f0	 mov	 esi, DWORD PTR _count$1$[ebp]

; 97   :                 pp += 32;

  000b5	8b 55 08	 mov	 edx, DWORD PTR _pp$1$[ebp]
  000b8	4e		 dec	 esi

; 98   :                 op += 32;

  000b9	8b 5d f4	 mov	 ebx, DWORD PTR _op$1$[ebp]
  000bc	83 ea 80	 sub	 edx, -128		; ffffff80H
  000bf	83 eb 80	 sub	 ebx, -128		; ffffff80H
  000c2	89 75 f0	 mov	 DWORD PTR _count$1$[ebp], esi
  000c5	89 55 08	 mov	 DWORD PTR _pp$1$[ebp], edx
  000c8	89 5d f4	 mov	 DWORD PTR _op$1$[ebp], ebx
  000cb	85 f6		 test	 esi, esi
  000cd	75 b1		 jne	 SHORT $LL2@RightShift
  000cf	8b 7d fc	 mov	 edi, DWORD PTR _n_lshift_bit_count$1$[ebp]
$LN3@RightShift:

; 99   :             }
; 100  : 
; 101  :             if (t_count & 0x10)

  000d2	f6 45 f8 10	 test	 BYTE PTR _t_count$1$[ebp], 16 ; 00000010H
  000d6	74 40		 je	 SHORT $LN7@RightShift

; 102  :             {
; 103  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  000d8	2b d3		 sub	 edx, ebx
  000da	89 5d e8	 mov	 DWORD PTR tv1057[ebp], ebx
  000dd	89 55 e4	 mov	 DWORD PTR tv1058[ebp], edx
  000e0	c7 45 f0 10 00
	00 00		 mov	 DWORD PTR tv1064[ebp], 16 ; 00000010H
$LL39@RightShift:
  000e7	d3 e8		 shr	 eax, cl
  000e9	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]
  000ec	8b f0		 mov	 esi, eax
  000ee	8b cf		 mov	 ecx, edi
  000f0	8b 44 13 fc	 mov	 eax, DWORD PTR [ebx+edx-4]
  000f4	8b d0		 mov	 edx, eax
  000f6	d3 e2		 shl	 edx, cl
  000f8	8b 4d 10	 mov	 ecx, DWORD PTR _n$[ebp]
  000fb	0b d6		 or	 edx, esi
  000fd	83 6d f0 01	 sub	 DWORD PTR tv1064[ebp], 1
  00101	89 53 fc	 mov	 DWORD PTR [ebx-4], edx
  00104	8b 55 e4	 mov	 edx, DWORD PTR tv1058[ebp]
  00107	75 de		 jne	 SHORT $LL39@RightShift

; 104  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 105  :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 106  :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 107  :                 work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 108  :                 work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 109  :                 work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 110  :                 work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 111  :                 work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;
; 112  :                 work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;
; 113  :                 work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;
; 114  :                 work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;
; 115  :                 work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;
; 116  :                 work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;
; 117  :                 work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;
; 118  :                 work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;
; 119  :                 pp += 16;

  00109	8b 55 08	 mov	 edx, DWORD PTR _pp$1$[ebp]

; 120  :                 op += 16;

  0010c	8b 5d f4	 mov	 ebx, DWORD PTR _op$1$[ebp]
  0010f	83 c2 40	 add	 edx, 64			; 00000040H
  00112	89 55 08	 mov	 DWORD PTR _pp$1$[ebp], edx
  00115	83 c3 40	 add	 ebx, 64			; 00000040H
$LN7@RightShift:

; 121  :             }
; 122  : 
; 123  :             if (t_count & 0x8)

  00118	8b 4d f8	 mov	 ecx, DWORD PTR _t_count$1$[ebp]
  0011b	8b 7d 10	 mov	 edi, DWORD PTR _n$[ebp]
  0011e	f6 c1 08	 test	 cl, 8
  00121	0f 84 ba 00 00
	00		 je	 $LN8@RightShift

; 124  :             {
; 125  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  00127	8b 32		 mov	 esi, DWORD PTR [edx]
  00129	8b cf		 mov	 ecx, edi
  0012b	d3 e8		 shr	 eax, cl
  0012d	8b d6		 mov	 edx, esi
  0012f	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  00132	d3 e2		 shl	 edx, cl
  00134	8b cf		 mov	 ecx, edi
  00136	0b d0		 or	 edx, eax
  00138	d3 ee		 shr	 esi, cl
  0013a	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  0013d	89 13		 mov	 DWORD PTR [ebx], edx
  0013f	8b 55 08	 mov	 edx, DWORD PTR _pp$1$[ebp]
  00142	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00145	8b c2		 mov	 eax, edx
  00147	d3 e0		 shl	 eax, cl
  00149	8b cf		 mov	 ecx, edi
  0014b	0b c6		 or	 eax, esi
  0014d	d3 ea		 shr	 edx, cl
  0014f	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00152	8b 45 08	 mov	 eax, DWORD PTR _pp$1$[ebp]
  00155	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  00158	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0015b	8b c6		 mov	 eax, esi
  0015d	d3 e0		 shl	 eax, cl
  0015f	8b cf		 mov	 ecx, edi
  00161	0b c2		 or	 eax, edx
  00163	d3 ee		 shr	 esi, cl
  00165	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00168	8b 45 08	 mov	 eax, DWORD PTR _pp$1$[ebp]
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  0016e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00171	8b c2		 mov	 eax, edx
  00173	d3 e0		 shl	 eax, cl
  00175	8b cf		 mov	 ecx, edi
  00177	0b c6		 or	 eax, esi
  00179	d3 ea		 shr	 edx, cl
  0017b	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  0017e	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  00181	8b 45 08	 mov	 eax, DWORD PTR _pp$1$[ebp]
  00184	8b 70 10	 mov	 esi, DWORD PTR [eax+16]
  00187	8b c6		 mov	 eax, esi
  00189	d3 e0		 shl	 eax, cl
  0018b	8b cf		 mov	 ecx, edi
  0018d	0b c2		 or	 eax, edx
  0018f	d3 ee		 shr	 esi, cl
  00191	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  00194	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  00197	8b 45 08	 mov	 eax, DWORD PTR _pp$1$[ebp]
  0019a	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0019d	8b c2		 mov	 eax, edx
  0019f	d3 e0		 shl	 eax, cl
  001a1	8b cf		 mov	 ecx, edi
  001a3	0b c6		 or	 eax, esi
  001a5	d3 ea		 shr	 edx, cl
  001a7	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  001aa	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  001ad	8b 45 08	 mov	 eax, DWORD PTR _pp$1$[ebp]
  001b0	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  001b3	8b c6		 mov	 eax, esi
  001b5	d3 e0		 shl	 eax, cl
  001b7	8b cf		 mov	 ecx, edi
  001b9	0b c2		 or	 eax, edx
  001bb	d3 ee		 shr	 esi, cl
  001bd	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  001c0	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  001c3	8b 45 08	 mov	 eax, DWORD PTR _pp$1$[ebp]
  001c6	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  001c9	8b d0		 mov	 edx, eax
  001cb	d3 e2		 shl	 edx, cl
  001cd	8b 4d f8	 mov	 ecx, DWORD PTR _t_count$1$[ebp]
  001d0	0b d6		 or	 edx, esi
  001d2	89 53 1c	 mov	 DWORD PTR [ebx+28], edx

; 126  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 127  :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 128  :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 129  :                 work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;
; 130  :                 work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;
; 131  :                 work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;
; 132  :                 work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;
; 133  :                 pp += 8;

  001d5	8b 55 08	 mov	 edx, DWORD PTR _pp$1$[ebp]
  001d8	83 c2 20	 add	 edx, 32			; 00000020H

; 134  :                 op += 8;

  001db	83 c3 20	 add	 ebx, 32			; 00000020H
  001de	89 55 08	 mov	 DWORD PTR _pp$1$[ebp], edx
$LN8@RightShift:

; 135  :             }
; 136  : 
; 137  :             if (t_count & 0x4)

  001e1	f6 c1 04	 test	 cl, 4
  001e4	74 62		 je	 SHORT $LN9@RightShift

; 138  :             {
; 139  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  001e6	8b 32		 mov	 esi, DWORD PTR [edx]
  001e8	8b cf		 mov	 ecx, edi
  001ea	d3 e8		 shr	 eax, cl
  001ec	8b d6		 mov	 edx, esi
  001ee	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  001f1	d3 e2		 shl	 edx, cl
  001f3	8b cf		 mov	 ecx, edi
  001f5	0b d0		 or	 edx, eax
  001f7	d3 ee		 shr	 esi, cl
  001f9	8b 45 08	 mov	 eax, DWORD PTR _pp$1$[ebp]
  001fc	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  001ff	89 13		 mov	 DWORD PTR [ebx], edx
  00201	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00204	8b c2		 mov	 eax, edx
  00206	d3 e0		 shl	 eax, cl
  00208	8b cf		 mov	 ecx, edi
  0020a	0b c6		 or	 eax, esi
  0020c	d3 ea		 shr	 edx, cl
  0020e	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  00211	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00214	8b 45 08	 mov	 eax, DWORD PTR _pp$1$[ebp]
  00217	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0021a	8b c6		 mov	 eax, esi
  0021c	d3 e0		 shl	 eax, cl
  0021e	8b cf		 mov	 ecx, edi
  00220	0b c2		 or	 eax, edx
  00222	d3 ee		 shr	 esi, cl
  00224	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  00227	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0022a	8b 45 08	 mov	 eax, DWORD PTR _pp$1$[ebp]
  0022d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00230	8b d0		 mov	 edx, eax
  00232	d3 e2		 shl	 edx, cl
  00234	8b 4d f8	 mov	 ecx, DWORD PTR _t_count$1$[ebp]
  00237	0b d6		 or	 edx, esi
  00239	89 53 0c	 mov	 DWORD PTR [ebx+12], edx

; 140  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;
; 141  :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;
; 142  :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;
; 143  :                 pp += 4;

  0023c	8b 55 08	 mov	 edx, DWORD PTR _pp$1$[ebp]
  0023f	83 c2 10	 add	 edx, 16			; 00000010H

; 144  :                 op += 4;

  00242	83 c3 10	 add	 ebx, 16			; 00000010H
  00245	89 55 08	 mov	 DWORD PTR _pp$1$[ebp], edx
$LN9@RightShift:

; 145  :             }
; 146  : 
; 147  :             if (t_count & 0x2)

  00248	f6 c1 02	 test	 cl, 2
  0024b	74 33		 je	 SHORT $LN10@RightShift

; 148  :             {
; 149  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  0024d	8b 32		 mov	 esi, DWORD PTR [edx]
  0024f	8b cf		 mov	 ecx, edi
  00251	d3 e8		 shr	 eax, cl
  00253	8b d6		 mov	 edx, esi
  00255	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  00258	d3 e2		 shl	 edx, cl

; 150  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  0025a	8b cf		 mov	 ecx, edi
  0025c	0b d0		 or	 edx, eax
  0025e	d3 ee		 shr	 esi, cl
  00260	8b 45 08	 mov	 eax, DWORD PTR _pp$1$[ebp]
  00263	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  00266	89 13		 mov	 DWORD PTR [ebx], edx
  00268	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0026b	8b d0		 mov	 edx, eax
  0026d	d3 e2		 shl	 edx, cl
  0026f	8b 4d f8	 mov	 ecx, DWORD PTR _t_count$1$[ebp]
  00272	0b d6		 or	 edx, esi
  00274	89 53 04	 mov	 DWORD PTR [ebx+4], edx

; 151  :                 pp += 2;

  00277	8b 55 08	 mov	 edx, DWORD PTR _pp$1$[ebp]
  0027a	83 c2 08	 add	 edx, 8

; 152  :                 op += 2;

  0027d	83 c3 08	 add	 ebx, 8
$LN10@RightShift:

; 153  :             }
; 154  : 
; 155  :             if (t_count & 0x1)

  00280	f6 c1 01	 test	 cl, 1
  00283	74 16		 je	 SHORT $LN11@RightShift

; 156  :             {
; 157  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  00285	8b cf		 mov	 ecx, edi
  00287	d3 e8		 shr	 eax, cl
  00289	8b 4d fc	 mov	 ecx, DWORD PTR _n_lshift_bit_count$1$[ebp]
  0028c	8b f0		 mov	 esi, eax
  0028e	8b 02		 mov	 eax, DWORD PTR [edx]
  00290	8b d0		 mov	 edx, eax
  00292	d3 e2		 shl	 edx, cl
  00294	0b d6		 or	 edx, esi
  00296	89 13		 mov	 DWORD PTR [ebx], edx

; 158  :                 pp += 1;
; 159  :                 op += 1;

  00298	83 c3 04	 add	 ebx, 4
$LN11@RightShift:

; 160  :             }
; 161  : 
; 162  :             work = temp >> n_rshift_bit_count;

  0029b	8b cf		 mov	 ecx, edi
  0029d	d3 e8		 shr	 eax, cl

; 163  :             if (work != 0 || padding_zero)

  0029f	8b 4d 18	 mov	 ecx, DWORD PTR _padding_zero$[ebp]
  002a2	85 c0		 test	 eax, eax
  002a4	75 04		 jne	 SHORT $LN13@RightShift
  002a6	85 c9		 test	 ecx, ecx
  002a8	74 16		 je	 SHORT $LN14@RightShift
$LN13@RightShift:

; 164  :                 *op = work;

  002aa	89 03		 mov	 DWORD PTR [ebx], eax

; 165  : 
; 166  :             if (padding_zero)

  002ac	85 c9		 test	 ecx, ecx
  002ae	74 10		 je	 SHORT $LN14@RightShift

; 167  :                 _ZERO_MEMORY_UNIT(o + p_word_count - n_word_count, n_word_count);

  002b0	8b 45 0c	 mov	 eax, DWORD PTR _p_word_count$[ebp]
  002b3	8b 4d 14	 mov	 ecx, DWORD PTR _o$[ebp]
  002b6	8d 3c 81	 lea	 edi, DWORD PTR [ecx+eax*4]

; 168  :         }
; 169  :     }

  002b9	8b 4d ec	 mov	 ecx, DWORD PTR _n_word_count$1$[ebp]
  002bc	33 c0		 xor	 eax, eax
  002be	f3 ab		 rep stosd
$LN14@RightShift:
  002c0	5f		 pop	 edi
  002c1	5e		 pop	 esi
  002c2	5b		 pop	 ebx
  002c3	8b e5		 mov	 esp, ebp
  002c5	5d		 pop	 ebp
  002c6	c3		 ret	 0
?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ENDP ; Palmtree::Math::Core::Internal::RightShift_Imp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 295  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 296  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 296  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 296  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	c7 41 0c 00 ff
	ff ff		 mov	 DWORD PTR [ecx+12], -256 ; ffffff00H
  00051	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)
; 234  :         {
; 235  :         }
; 236  : 
; 237  :         virtual ~InsufficientBufferException() noexcept(true)
; 238  :         {
; 239  :         }
; 240  :     };
; 241  : 
; 242  :     class NotEnoughMemoryException
; 243  :         : public Exception
; 244  :     {
; 245  :     public:
; 246  :         NotEnoughMemoryException(const wchar_t* message) noexcept(true)
; 247  :             : Exception(PMC_STATUS_NOT_ENOUGH_MEMORY, message)
; 248  :         {
; 249  :         }
; 250  : 
; 251  :         NotEnoughMemoryException(const NotEnoughMemoryException& p) noexcept(true)
; 252  :             : Exception(p)
; 253  :         {
; 254  :         }
; 255  : 
; 256  :         virtual ~NotEnoughMemoryException() noexcept(true)
; 257  :         {
; 258  :         }
; 259  :     };
; 260  : 
; 261  :     class NotSupportedException
; 262  :         : public Exception
; 263  :     {
; 264  :     public:
; 265  :         NotSupportedException(const wchar_t* message) noexcept(true)
; 266  :             : Exception(PMC_STATUS_NOT_SUPPORTED, message)
; 267  :         {
; 268  :         }
; 269  : 
; 270  :         NotSupportedException(const NotSupportedException& p) noexcept(true)
; 271  :             : Exception(p)
; 272  :         {
; 273  :         }
; 274  : 
; 275  :         virtual ~NotSupportedException() noexcept(true)
; 276  :         {
; 277  :         }
; 278  :     };
; 279  : 
; 280  :     class InternalErrorException
; 281  :         : public Exception
; 282  :     {
; 283  :     public:
; 284  :         InternalErrorException(const wchar_t* message, const wchar_t* data) noexcept(true)
; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 286  :         {

  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b c1		 mov	 eax, ecx
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 124  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 125  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 125  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 125  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 120  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	c7 41 0c fe ff
	ff ff		 mov	 DWORD PTR [ecx+12], -2	; fffffffeH
  00051	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 115  :         {

  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b c1		 mov	 eax, ecx
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 70   :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00036	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00039	50		 push	 eax
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00040	e8 00 00 00 00	 call	 ___std_exception_destroy
  00045	83 c4 04	 add	 esp, 4
  00048	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0004c	74 0b		 je	 SHORT $LN9@scalar
  0004e	6a 18		 push	 24			; 00000018H
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00059	8b c6		 mov	 eax, esi
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5e		 pop	 esi
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00033	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00036	50		 push	 eax
  00037	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 71   :         }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }

  00058	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005f	8b c2		 mov	 eax, edx
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0003e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 57   :             _message = message;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  00044	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00047	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  0004a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00050	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b c1		 mov	 eax, ecx
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gexception@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00025	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ___std_exception_destroy
  00034	83 c4 04	 add	 esp, 4
  00037	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003b	74 0b		 je	 SHORT $LN6@scalar
  0003d	6a 0c		 push	 12			; 0000000cH
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00048	8b c6		 mov	 eax, esi
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gexception@std@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gexception@std@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 92   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 86   :         __std_exception_destroy(&_Data);

  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ___std_exception_destroy
  00031	83 c4 04	 add	 esp, 4

; 87   :     }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 51   :     }

  0000e	8b c1		 mov	 eax, ecx
  00010	c3		 ret	 0
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
_TEXT	ENDS
END
