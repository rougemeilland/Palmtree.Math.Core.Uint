; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_tostring.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::FormatException::FormatException
PUBLIC	??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::FormatException::FormatException
PUBLIC	??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::FormatException::~FormatException
PUBLIC	??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::FormatException::`scalar deleting destructor'
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
PUBLIC	??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
PUBLIC	??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException
PUBLIC	??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException
PUBLIC	??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::NotSupportedException::~NotSupportedException
PUBLIC	??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::NotSupportedException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ; Palmtree::Math::Core::Internal::StringReader::PeekChar
PUBLIC	?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ ; Palmtree::Math::Core::Internal::StringReader::Progress
PUBLIC	?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
PUBLIC	?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::StringReader::SkipString
PUBLIC	?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ; Palmtree::Math::Core::Internal::ReverseStringReader::PeekChar
PUBLIC	?Progress@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXXZ ; Palmtree::Math::Core::Internal::ReverseStringReader::Progress
PUBLIC	?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith
PUBLIC	?SkipString@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::SkipString
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::StringWriter::GetString
PUBLIC	??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter
PUBLIC	?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write
PUBLIC	?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write
PUBLIC	?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::ReverseStringWriter::GetString
PUBLIC	?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
PUBLIC	?Initialize_ToString@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_ToString
PUBLIC	?PMC_InitializeNumberFormatInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::PMC_InitializeNumberFormatInfo
PUBLIC	?PMC_ToString@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ; Palmtree::Math::Core::Internal::PMC_ToString
PUBLIC	??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter
PUBLIC	?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
PUBLIC	?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
PUBLIC	?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::GetString
PUBLIC	?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format
PUBLIC	?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally
PUBLIC	?ConstructSimpleNumberSequence@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEPA_WPAIIPA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConstructSimpleNumberSequence
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteZeroValue
PUBLIC	?WritePrefix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteSuffix
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteZeroValue
PUBLIC	?WritePrefix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteSuffix
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteZeroValue
PUBLIC	?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatInternally
PUBLIC	?WritePrefix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteSuffix
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteZeroValue
PUBLIC	?WritePrefix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteSuffix
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteZeroValue
PUBLIC	?WritePrefix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteSuffix
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteZeroValue
PUBLIC	?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatInternally
PUBLIC	?WritePrefix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteSuffix
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7FormatException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::FormatException::`vftable'
PUBLIC	??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
PUBLIC	??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::NotSupportedException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	??_7StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ ; `string'
PUBLIC	??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringReader::`vftable'
PUBLIC	??_C@_1FO@BNHGDLLE@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_C@_1GC@GGAPGHKN@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
PUBLIC	__TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ ; `string'
PUBLIC	??_7ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringWriter::`vftable'
PUBLIC	??_7ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`vftable'
PUBLIC	??_7Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`vftable'
PUBLIC	??_C@_1EK@CCPHDNPL@?$AAp?$AAm?$AAc?$AA_?$AAt?$AAo?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?4?$AAc?$AAp@ ; `string'
PUBLIC	??_7FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`vftable'
PUBLIC	??_7FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`vftable'
PUBLIC	??_7FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`vftable'
PUBLIC	??_C@_19NKFEMDNP@?$AA?$CL?$AA0?$AA0?$AA0@	; `string'
PUBLIC	??_C@_19GGGBJDH@?$AA?$CF?$AA0?$AA3?$AAd@	; `string'
PUBLIC	??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`vftable'
PUBLIC	??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`vftable'
PUBLIC	??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`vftable'
PUBLIC	__TI2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::NotSupportedException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1DO@MFGCBHKN@?$PP?$KL?$PP?$LJ?$PP?$LP?$PP?$OA?$PP?x?$AA?$AP?$AAk?$PP?$II?$PP?$IL?$AAT?$AAo?$AAS?$AAt?$AAr?$AAi@ ; `string'
PUBLIC	__TI2?AVFormatException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVFormatException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::FormatException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1BI@BIIKHCEK@?$AA?$CK?$PP?e?$AAn?$PP?x?$AA?$AP?$AA?$AH?$PP?$JK?$AAP?$AAg?$AAY?$AA?$AC@ ; `string'
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_13HADAKIJA@?$AAx@				; `string'
PUBLIC	??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ ; `string'
PUBLIC	??_C@_13JOFGPIOO@?$AA?4@			; `string'
PUBLIC	??_C@_13DEFPDAGF@?$AA?0@			; `string'
PUBLIC	??_C@_13DMCFHHKM@?$AA3@				; `string'
PUBLIC	??_C@_13BMLCKOLB@?$PP?$KE@			; `string'
PUBLIC	??_C@_13IMODFHAA@?$AA?9@			; `string'
PUBLIC	??_C@_13EJFHHPOP@?$AA?$CF@			; `string'
PUBLIC	??_C@_13BGNNJOKC@?$AA0@				; `string'
PUBLIC	??_C@_13KJIIAINM@?$AA?$CL@			; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::FormatException::`RTTI Complete Object Locator'
PUBLIC	??_R3FormatException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::FormatException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::FormatException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::FormatException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4NotSupportedException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Complete Object Locator'
PUBLIC	??_R3NotSupportedException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NotSupportedException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NotSupportedException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
PUBLIC	??_R3StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ReverseStringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVReverseStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader `RTTI Type Descriptor'
PUBLIC	??_R3ReverseStringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ReverseStringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ReverseStringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
PUBLIC	??_R3StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVReverseStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter `RTTI Type Descriptor'
PUBLIC	??_R3ReverseStringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ReverseStringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ReverseStringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter `RTTI Type Descriptor'
PUBLIC	??_R3ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter `RTTI Type Descriptor'
PUBLIC	??_R3Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	__imp__wsprintfW:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::FormatException::`vector deleting destructor'
EXTRN	??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vector deleting destructor'
EXTRN	??_ENotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::NotSupportedException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z:PROC ; Palmtree::Math::Core::Internal::From_I_Imp
EXTRN	?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z:PROC ; Palmtree::Math::Core::Internal::DivRem_X_1W
EXTRN	?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
EXTRN	?PMC_Pow_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Pow_X_I_Imp
EXTRN	?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
EXTRN	?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock
EXTRN	?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
EXTRN	?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
EXTRN	?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
EXTRN	?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aulldvrm:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A DB 01e4H DUP (?) ; Palmtree::Math::Core::Internal::default_number_format_option
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtr'
	DB	'ee@@', 00H
data$r	ENDS
;	COMDAT ??_R4Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThousandSeparatedStringWriter@DecimalFromatter@Inter'
	DB	'nal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ReverseStringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVReverseStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ReverseStringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ReverseStringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ReverseStringWriter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReverseStringWriter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVReverseStringWriter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReverseStringWriter@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVReverseStringWriter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringWriter@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringWriter@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ReverseStringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVReverseStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ReverseStringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ReverseStringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ReverseStringReader@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReverseStringReader@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVReverseStringReader@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringReader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReverseStringReader@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4ReverseStringReader@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ReverseStringReader@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVReverseStringReader@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringReader@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringReader@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringReader@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NotSupportedException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2NotSupportedException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@NotSupportedException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3NotSupportedException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4NotSupportedException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4NotSupportedException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::FormatException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::FormatException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::FormatException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4FormatException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::FormatException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_13KJIIAINM@?$AA?$CL@
CONST	SEGMENT
??_C@_13KJIIAINM@?$AA?$CL@ DB '+', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13BGNNJOKC@?$AA0@
CONST	SEGMENT
??_C@_13BGNNJOKC@?$AA0@ DB '0 ', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13EJFHHPOP@?$AA?$CF@
CONST	SEGMENT
??_C@_13EJFHHPOP@?$AA?$CF@ DB '%', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13IMODFHAA@?$AA?9@
CONST	SEGMENT
??_C@_13IMODFHAA@?$AA?9@ DB '-', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13BMLCKOLB@?$PP?$KE@
CONST	SEGMENT
??_C@_13BMLCKOLB@?$PP?$KE@ DB 0a4H, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13DMCFHHKM@?$AA3@
CONST	SEGMENT
??_C@_13DMCFHHKM@?$AA3@ DB '3', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13DEFPDAGF@?$AA?0@
CONST	SEGMENT
??_C@_13DEFPDAGF@?$AA?0@ DB ',', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13JOFGPIOO@?$AA?4@
CONST	SEGMENT
??_C@_13JOFGPIOO@?$AA?4@ DB '.', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
CONST	SEGMENT
??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ DB 015H
	DB	'_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13HADAKIJA@?$AAx@
CONST	SEGMENT
??_C@_13HADAKIJA@?$AAx@ DB 'x', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1BI@BIIKHCEK@?$AA?$CK?$PP?e?$AAn?$PP?x?$AA?$AP?$AA?$AH?$PP?$JK?$AAP?$AAg?$AAY?$AA?$AC@
CONST	SEGMENT
??_C@_1BI@BIIKHCEK@?$AA?$CK?$PP?e?$AAn?$PP?x?$AA?$AP?$AA?$AH?$PP?$JK?$AAP?$AAg?$AAY?$AA?$AC@ DB '*'
	DB	'g', 0e5H, 'wn0', 0f8H, 'f', 0fH, '_', 07H, 'c', 09aH, '[P[g0Y'
	DB	'0', 02H, '0', 00H, 00H			; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::FormatException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVFormatException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVFormatException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVFormatException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVFormatException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVFormatException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1DO@MFGCBHKN@?$PP?$KL?$PP?$LJ?$PP?$LP?$PP?$OA?$PP?x?$AA?$AP?$AAk?$PP?$II?$PP?$IL?$AAT?$AAo?$AAS?$AAt?$AAr?$AAi@
CONST	SEGMENT
??_C@_1DO@MFGCBHKN@?$PP?$KL?$PP?$LJ?$PP?$LP?$PP?$OA?$PP?x?$AA?$AP?$AAk?$PP?$II?$PP?$IL?$AAT?$AAo?$AAS?$AAt?$AAr?$AAi@ DB 0abH
	DB	'0', 0b9H, '0', 0bfH, '0', 0e0H, '0', 0f8H, 'f', 0fH, '_k0', 088H
	DB	'0', 08bH, '0T', 00H, 'o', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 'o0', 0b5H, '0', 0ddH, '0', 0fcH, '0', 0c8H
	DB	'0U0', 08cH, '0f0D0~0[0', 093H, '0', 02H, '0', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::NotSupportedException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNotSupportedException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVNotSupportedException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVNotSupportedException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
_DATA	SEGMENT
?hexadecimal_lower_digits@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@3PA_WA DB '0'
	DB	00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H, '5', 00H, '6', 00H
	DB	'7', 00H, '8', 00H, '9', 00H, 'a', 00H, 'b', 00H, 'c', 00H, 'd'
	DB	00H, 'e', 00H, 'f', 00H, 00H, 00H		; Palmtree::Math::Core::Internal::HexaDecimalFormatter::hexadecimal_lower_digits
	ORG $+2
?hexadecimal_upper_digits@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@3PA_WA DB '0'
	DB	00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H, '5', 00H, '6', 00H
	DB	'7', 00H, '8', 00H, '9', 00H, 'A', 00H, 'B', 00H, 'C', 00H, 'D'
	DB	00H, 'E', 00H, 'F', 00H, 00H, 00H		; Palmtree::Math::Core::Internal::HexaDecimalFormatter::hexadecimal_upper_digits
_DATA	ENDS
;	COMDAT ??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_C@_19GGGBJDH@?$AA?$CF?$AA0?$AA3?$AAd@
CONST	SEGMENT
??_C@_19GGGBJDH@?$AA?$CF?$AA0?$AA3?$AAd@ DB '%', 00H, '0', 00H, '3', 00H, 'd'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19NKFEMDNP@?$AA?$CL?$AA0?$AA0?$AA0@
CONST	SEGMENT
??_C@_19NKFEMDNP@?$AA?$CL?$AA0?$AA0?$AA0@ DB '+', 00H, '0', 00H, '0', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_7FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_7FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_C@_1EK@CCPHDNPL@?$AAp?$AAm?$AAc?$AA_?$AAt?$AAo?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?4?$AAc?$AAp@
CONST	SEGMENT
??_C@_1EK@CCPHDNPL@?$AAp?$AAm?$AAc?$AA_?$AAt?$AAo?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?4?$AAc?$AAp@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 't', 00H, 'o', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, ';', 00H, 'F', 00H, 'o', 00H, 'r', 00H
	DB	'm', 00H, 'a', 00H, 't', 00H, 't', 00H, 'e', 00H, 'r', 00H, ':'
	DB	00H, ':', 00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, ';', 00H, '1', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`vftable'
	DD	FLAT:?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
	DD	FLAT:?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z
	DD	FLAT:?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
CONST	ENDS
;	COMDAT ??_7ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringWriter::`vftable'
	DD	FLAT:?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
	DD	FLAT:?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
	DD	FLAT:?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
CONST	ENDS
;	COMDAT ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
CONST	SEGMENT
??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ DB 0f8H
	DB	'fM0', 0bcH, 08fH, 07fH, '0HQ', 0d0H, '0', 0c3H, '0', 0d5H, '0'
	DB	0a1H, '0n0', 0b5H, '0', 0a4H, '0', 0baH, '0L0', 0dH, 'N', 0b3H
	DB	08dH, 'W0f0D0~0Y0', 02H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInsufficientBufferException@Internal@Core@Math@Palmt'
	DB	'ree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
	DD	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
	DD	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
	DD	FLAT:?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
CONST	ENDS
;	COMDAT ??_C@_1GC@GGAPGHKN@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1GC@GGAPGHKN@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'R', 00H, 'e', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, ':', 00H, ':', 00H, 'S', 00H, 'k', 00H, 'i', 00H, 'p'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	';', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@BNHGDLLE@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FO@BNHGDLLE@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'R', 00H, 'e', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, ':', 00H, ':', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g'
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ';', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ReverseStringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringReader::`vftable'
	DD	FLAT:?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
	DD	FLAT:?Progress@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXXZ
	DD	FLAT:?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
	DD	FLAT:?SkipString@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
CONST	ENDS
;	COMDAT ??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'S', 00H, 'k', 00H, 'i', 00H, 'p', 00H
	DB	'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ';'
	DB	00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
CONST	SEGMENT
??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ DB 085H
	DB	'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv', 01fH, 'u'
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ';', 00H, '1', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringReader@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringReader@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
	DD	FLAT:?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
	DD	FLAT:?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ
	DD	FLAT:?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
	DD	FLAT:?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
CONST	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4NotSupportedException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::NotSupportedException::`vftable'
	DD	FLAT:??_ENotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
	DD	FLAT:??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7FormatException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::FormatException::`vftable'
	DD	FLAT:??_EFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z$0
__ehfuncinfo$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0
__ehfuncinfo$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0
__ehfuncinfo$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0
__ehfuncinfo$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$2
__ehfuncinfo$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0
__ehfuncinfo$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z$0
__ehfuncinfo$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$1
__ehfuncinfo$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z$0
__ehfuncinfo$?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z$0
__ehfuncinfo$?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
__ehfuncinfo$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gexception@std@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ToString_Imp@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z
_TEXT	SEGMENT
_formatter$1 = -44					; size = 24
_formatter$2 = -44					; size = 24
_formatter$3 = -44					; size = 24
_formatter$4 = -44					; size = 24
_formatter$5 = -44					; size = 24
$T6 = -44						; size = 24
_writer$7 = -20						; size = 20
_writer$8 = -20						; size = 20
_writer$9 = -20						; size = 20
_writer$10 = -20					; size = 20
_writer$11 = -20					; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format$ = 16						; size = 4
_format_option$ = 20					; size = 4
_buffer$ = 24						; size = 4
_buffer_size$ = 28					; size = 4
?ToString_Imp@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::ToString_Imp, COMDAT

; 1392 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1357 :         if (format == nullptr)

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _format$[ebp]

; 1392 :     {

  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00009	56		 push	 esi

; 1357 :         if (format == nullptr)

  0000a	85 c9		 test	 ecx, ecx
  0000c	75 0b		 jne	 SHORT $LN18@ToString_I

; 1358 :         {
; 1359 :             *format_type = L'D';

  0000e	8d 51 44	 lea	 edx, DWORD PTR [ecx+68]

; 1360 :             *precision = -1;

  00011	83 c9 ff	 or	 ecx, -1

; 1361 :             return (TRUE);

  00014	e9 b4 00 00 00	 jmp	 $LN4@ToString_I
$LN18@ToString_I:

; 1362 :         }
; 1363 :         else if (format[0] == L'\0')

  00019	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0001c	66 85 d2	 test	 dx, dx
  0001f	75 0d		 jne	 SHORT $LN20@ToString_I

; 1364 :         {
; 1365 :             *format_type = L'D';

  00021	ba 44 00 00 00	 mov	 edx, 68			; 00000044H

; 1366 :             *precision = -1;

  00026	83 c9 ff	 or	 ecx, -1

; 1367 :             return (TRUE);

  00029	e9 9f 00 00 00	 jmp	 $LN4@ToString_I
$LN20@ToString_I:

; 1368 :         }
; 1369 :         else if (__IS_ALPHA(format[0]) && format[1] == L'\0')

  0002e	8b f2		 mov	 esi, edx
  00030	57		 push	 edi

; 1341 :         if (c >= L'A' && c <= L'Z')

  00031	8d 46 bf	 lea	 eax, DWORD PTR [esi-65]
  00034	0f b7 f8	 movzx	 edi, ax
  00037	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  0003b	76 09		 jbe	 SHORT $LN121@ToString_I

; 1342 :             return (TRUE);
; 1343 :         if (c >= L'a' && c <= L'z')

  0003d	8d 46 9f	 lea	 eax, DWORD PTR [esi-97]
  00040	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  00044	77 0c		 ja	 SHORT $LN128@ToString_I
$LN121@ToString_I:

; 1369 :         else if (__IS_ALPHA(format[0]) && format[1] == L'\0')

  00046	66 83 79 02 00	 cmp	 WORD PTR [ecx+2], 0
  0004b	75 05		 jne	 SHORT $LN128@ToString_I

; 1370 :         {
; 1371 :             *format_type = format[0];
; 1372 :             *precision = -1;

  0004d	83 c9 ff	 or	 ecx, -1

; 1373 :             return (TRUE);

  00050	eb 7a		 jmp	 SHORT $LN130@ToString_I
$LN128@ToString_I:

; 1374 :         }
; 1375 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && format[2] == L'\0')

  00052	8b c2		 mov	 eax, edx

; 1341 :         if (c >= L'A' && c <= L'Z')

  00054	83 ff 19	 cmp	 edi, 25			; 00000019H
  00057	76 09		 jbe	 SHORT $LN122@ToString_I

; 1342 :             return (TRUE);
; 1343 :         if (c >= L'a' && c <= L'z')

  00059	83 c0 9f	 add	 eax, -97		; ffffff9fH
  0005c	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  00060	77 19		 ja	 SHORT $LN24@ToString_I
$LN122@ToString_I:

; 1375 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && format[2] == L'\0')

  00062	0f b7 71 02	 movzx	 esi, WORD PTR [ecx+2]

; 1350 :         if (c >= L'0' && c <= L'9')

  00066	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  00069	66 83 f8 09	 cmp	 ax, 9
  0006d	77 0c		 ja	 SHORT $LN24@ToString_I

; 1375 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && format[2] == L'\0')

  0006f	66 83 79 04 00	 cmp	 WORD PTR [ecx+4], 0
  00074	75 05		 jne	 SHORT $LN24@ToString_I

; 1376 :         {
; 1377 :             *format_type = format[0];
; 1378 :             *precision = format[1] - L'0';

  00076	8d 4e d0	 lea	 ecx, DWORD PTR [esi-48]

; 1379 :             return (TRUE);

  00079	eb 51		 jmp	 SHORT $LN130@ToString_I
$LN24@ToString_I:

; 1380 :         }
; 1381 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && __IS_DIGIT(format[2]) && format[3] == L'\0')

  0007b	8b c2		 mov	 eax, edx

; 1341 :         if (c >= L'A' && c <= L'Z')

  0007d	83 ff 19	 cmp	 edi, 25			; 00000019H
  00080	76 0d		 jbe	 SHORT $LN124@ToString_I

; 1342 :             return (TRUE);
; 1343 :         if (c >= L'a' && c <= L'z')

  00082	83 c0 9f	 add	 eax, -97		; ffffff9fH
  00085	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  00089	0f 87 e0 01 00
	00		 ja	 $LN26@ToString_I
$LN124@ToString_I:

; 1381 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && __IS_DIGIT(format[2]) && format[3] == L'\0')

  0008f	0f b7 71 02	 movzx	 esi, WORD PTR [ecx+2]

; 1350 :         if (c >= L'0' && c <= L'9')

  00093	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  00096	66 83 f8 09	 cmp	 ax, 9
  0009a	0f 87 cf 01 00
	00		 ja	 $LN26@ToString_I

; 1381 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && __IS_DIGIT(format[2]) && format[3] == L'\0')

  000a0	0f b7 79 04	 movzx	 edi, WORD PTR [ecx+4]

; 1350 :         if (c >= L'0' && c <= L'9')

  000a4	8d 47 d0	 lea	 eax, DWORD PTR [edi-48]
  000a7	66 83 f8 09	 cmp	 ax, 9
  000ab	0f 87 be 01 00
	00		 ja	 $LN26@ToString_I

; 1381 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && __IS_DIGIT(format[2]) && format[3] == L'\0')

  000b1	66 83 79 06 00	 cmp	 WORD PTR [ecx+6], 0
  000b6	0f 85 b3 01 00
	00		 jne	 $LN26@ToString_I

; 1382 :         {
; 1383 :             *format_type = format[0];
; 1384 :             *precision = (format[1] - L'0') * 10 + (format[2] - L'0');

  000bc	8b c6		 mov	 eax, esi
  000be	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  000c1	8b c7		 mov	 eax, edi
  000c3	8d 89 f8 fe ff
	ff		 lea	 ecx, DWORD PTR [ecx-264]
  000c9	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
$LN130@ToString_I:
  000cc	5f		 pop	 edi
$LN4@ToString_I:

; 1397 :         else
; 1398 :         {
; 1399 :             switch (format_type)

  000cd	0f b7 c2	 movzx	 eax, dx
  000d0	83 c0 bd	 add	 eax, -67		; ffffffbdH
  000d3	83 f8 35	 cmp	 eax, 53			; 00000035H
  000d6	0f 87 a8 01 00
	00		 ja	 $LN15@ToString_I
  000dc	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN129@ToString_I[eax]
  000e3	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN138@ToString_I[eax*4]
$LN6@ToString_I:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  000ea	8b 55 18	 mov	 edx, DWORD PTR _buffer$[ebp]
  000ed	85 d2		 test	 edx, edx
  000ef	74 08		 je	 SHORT $LN54@ToString_I
  000f1	8b 45 1c	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  000f4	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  000f7	eb 02		 jmp	 SHORT $LN55@ToString_I
$LN54@ToString_I:
  000f9	33 c0		 xor	 eax, eax
$LN55@ToString_I:

; 203  :             _eob = eob;

  000fb	89 45 f8	 mov	 DWORD PTR _writer$11[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  000fe	b8 43 00 00 00	 mov	 eax, 67			; 00000043H

; 404  :             {

  00103	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$5[ebp], OFFSET ??_7FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
$LN136@ToString_I:

; 1430 :             }
; 1431 :         }
; 1432 :     }

  0010a	66 89 45 e0	 mov	 WORD PTR _formatter$5[ebp+12], ax
  0010e	89 55 f4	 mov	 DWORD PTR _writer$11[ebp+8], edx
  00111	89 55 f0	 mov	 DWORD PTR _writer$11[ebp+4], edx
$LN135@ToString_I:
  00114	8b 45 14	 mov	 eax, DWORD PTR _format_option$[ebp]
  00117	89 45 e8	 mov	 DWORD PTR _formatter$5[ebp+20], eax
  0011a	8d 45 ec	 lea	 eax, DWORD PTR _writer$11[ebp]
  0011d	50		 push	 eax
  0011e	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
  00121	89 4d e4	 mov	 DWORD PTR _formatter$5[ebp+16], ecx
  00124	8d 4d d4	 lea	 ecx, DWORD PTR _formatter$5[ebp]
  00127	ff 75 08	 push	 DWORD PTR _x_sign$[ebp]
  0012a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _writer$11[ebp+16], 0
  00131	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _writer$11[ebp], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
  00138	c7 45 d8 00 ca
	9a 3b		 mov	 DWORD PTR _formatter$5[ebp+4], 1000000000 ; 3b9aca00H
  0013f	c7 45 dc 09 00
	00 00		 mov	 DWORD PTR _formatter$5[ebp+8], 9
  00146	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format
  0014b	8b 45 fc	 mov	 eax, DWORD PTR _writer$11[ebp+16]
  0014e	5e		 pop	 esi
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
$LN7@ToString_I:
  00153	ff 75 1c	 push	 DWORD PTR _buffer_size$[ebp]
  00156	ff 75 18	 push	 DWORD PTR _buffer$[ebp]
  00159	ff 75 14	 push	 DWORD PTR _format_option$[ebp]
  0015c	51		 push	 ecx
$LN133@ToString_I:
  0015d	6a 44		 push	 68			; 00000044H
  0015f	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
  00162	ff 75 08	 push	 DWORD PTR _x_sign$[ebp]
  00165	e8 00 00 00 00	 call	 ?ToStringD@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringD
  0016a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0016d	5e		 pop	 esi
  0016e	8b e5		 mov	 esp, ebp
  00170	5d		 pop	 ebp
  00171	c3		 ret	 0
$LN8@ToString_I:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00172	8b 75 18	 mov	 esi, DWORD PTR _buffer$[ebp]
  00175	85 f6		 test	 esi, esi
  00177	74 08		 je	 SHORT $LN68@ToString_I
  00179	8b 45 1c	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  0017c	8d 04 46	 lea	 eax, DWORD PTR [esi+eax*2]
  0017f	eb 02		 jmp	 SHORT $LN69@ToString_I
$LN68@ToString_I:
  00181	33 c0		 xor	 eax, eax
$LN69@ToString_I:

; 201  :             _p = p;

  00183	89 75 f0	 mov	 DWORD PTR _writer$10[ebp+4], esi

; 202  :             _sob = sob;

  00186	89 75 f4	 mov	 DWORD PTR _writer$10[ebp+8], esi

; 203  :             _eob = eob;

  00189	89 45 f8	 mov	 DWORD PTR _writer$10[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  0018c	66 89 55 e0	 mov	 WORD PTR _formatter$4[ebp+12], dx

; 651  :             {

  00190	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$4[ebp], OFFSET ??_7FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 1400 :             {
; 1401 :             case L'c':
; 1402 :             case L'C':
; 1403 :                 return (DecimalFromatter::ToStringC(x_sign, x_abs, L'C', precision, format_option, buffer, buffer_size));
; 1404 :             case L'd':
; 1405 :             case L'D':
; 1406 :                 return (DecimalFromatter::ToStringD(x_sign, x_abs, L'D', precision, format_option, buffer, buffer_size));
; 1407 :             case L'e':
; 1408 :             case L'E':
; 1409 :                 return (DecimalFromatter::ToStringE(x_sign, x_abs, format_type, precision, format_option, buffer, buffer_size));

  00197	e9 78 ff ff ff	 jmp	 $LN135@ToString_I
$LN9@ToString_I:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  0019c	8b 55 18	 mov	 edx, DWORD PTR _buffer$[ebp]
  0019f	85 d2		 test	 edx, edx
  001a1	74 1a		 je	 SHORT $LN82@ToString_I
  001a3	8b 45 1c	 mov	 eax, DWORD PTR _buffer_size$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 735  :             {

  001a6	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$3[ebp], OFFSET ??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  001ad	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]

; 203  :             _eob = eob;

  001b0	89 45 f8	 mov	 DWORD PTR _writer$9[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  001b3	b8 46 00 00 00	 mov	 eax, 70			; 00000046H

; 1410 :             case L'f':
; 1411 :             case L'F':
; 1412 :                 return (DecimalFromatter::ToStringF(x_sign, x_abs, L'F', precision, format_option, buffer, buffer_size));

  001b8	e9 4d ff ff ff	 jmp	 $LN136@ToString_I
$LN82@ToString_I:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  001bd	33 c0		 xor	 eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 735  :             {

  001bf	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$3[ebp], OFFSET ??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 203  :             _eob = eob;

  001c6	89 45 f8	 mov	 DWORD PTR _writer$9[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  001c9	b8 46 00 00 00	 mov	 eax, 70			; 00000046H

; 1410 :             case L'f':
; 1411 :             case L'F':
; 1412 :                 return (DecimalFromatter::ToStringF(x_sign, x_abs, L'F', precision, format_option, buffer, buffer_size));

  001ce	e9 37 ff ff ff	 jmp	 $LN136@ToString_I
$LN11@ToString_I:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  001d3	8b 55 18	 mov	 edx, DWORD PTR _buffer$[ebp]
  001d6	85 d2		 test	 edx, edx
  001d8	74 1a		 je	 SHORT $LN96@ToString_I
  001da	8b 45 1c	 mov	 eax, DWORD PTR _buffer_size$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 781  :             {

  001dd	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$2[ebp], OFFSET ??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  001e4	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]

; 203  :             _eob = eob;

  001e7	89 45 f8	 mov	 DWORD PTR _writer$8[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  001ea	b8 4e 00 00 00	 mov	 eax, 78			; 0000004eH

; 1413 :             case L'g':
; 1414 :             case L'G':
; 1415 :                 return (DecimalFromatter::ToStringD(x_sign, x_abs, L'D', precision, format_option, buffer, buffer_size));
; 1416 :             case L'n':
; 1417 :             case L'N':
; 1418 :                 return (DecimalFromatter::ToStringN(x_sign, x_abs, L'N', precision, format_option, buffer, buffer_size));

  001ef	e9 16 ff ff ff	 jmp	 $LN136@ToString_I
$LN96@ToString_I:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  001f4	33 c0		 xor	 eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 781  :             {

  001f6	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$2[ebp], OFFSET ??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 203  :             _eob = eob;

  001fd	89 45 f8	 mov	 DWORD PTR _writer$8[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  00200	b8 4e 00 00 00	 mov	 eax, 78			; 0000004eH

; 1413 :             case L'g':
; 1414 :             case L'G':
; 1415 :                 return (DecimalFromatter::ToStringD(x_sign, x_abs, L'D', precision, format_option, buffer, buffer_size));
; 1416 :             case L'n':
; 1417 :             case L'N':
; 1418 :                 return (DecimalFromatter::ToStringN(x_sign, x_abs, L'N', precision, format_option, buffer, buffer_size));

  00205	e9 00 ff ff ff	 jmp	 $LN136@ToString_I
$LN12@ToString_I:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  0020a	8b 55 18	 mov	 edx, DWORD PTR _buffer$[ebp]
  0020d	85 d2		 test	 edx, edx
  0020f	74 1a		 je	 SHORT $LN110@ToString_I
  00211	8b 45 1c	 mov	 eax, DWORD PTR _buffer_size$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 881  :             {

  00214	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$1[ebp], OFFSET ??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  0021b	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]

; 203  :             _eob = eob;

  0021e	89 45 f8	 mov	 DWORD PTR _writer$7[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  00221	b8 50 00 00 00	 mov	 eax, 80			; 00000050H

; 1419 :             case L'p':
; 1420 :             case L'P':
; 1421 :                 return (DecimalFromatter::ToStringP(x_sign, x_abs, L'P', precision, format_option, buffer, buffer_size));

  00226	e9 df fe ff ff	 jmp	 $LN136@ToString_I
$LN110@ToString_I:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  0022b	33 c0		 xor	 eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 881  :             {

  0022d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$1[ebp], OFFSET ??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 203  :             _eob = eob;

  00234	89 45 f8	 mov	 DWORD PTR _writer$7[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  00237	b8 50 00 00 00	 mov	 eax, 80			; 00000050H

; 1419 :             case L'p':
; 1420 :             case L'P':
; 1421 :                 return (DecimalFromatter::ToStringP(x_sign, x_abs, L'P', precision, format_option, buffer, buffer_size));

  0023c	e9 c9 fe ff ff	 jmp	 $LN136@ToString_I
$LN13@ToString_I:

; 1422 :             case L'r':
; 1423 :             case L'R':
; 1424 :                 return (DecimalFromatter::ToStringD(x_sign, x_abs, L'D', 0, format_option, buffer, buffer_size));

  00241	ff 75 1c	 push	 DWORD PTR _buffer_size$[ebp]
  00244	ff 75 18	 push	 DWORD PTR _buffer$[ebp]
  00247	ff 75 14	 push	 DWORD PTR _format_option$[ebp]
  0024a	6a 00		 push	 0
  0024c	e9 0c ff ff ff	 jmp	 $LN133@ToString_I
$LN14@ToString_I:

; 1425 :             case L'x':
; 1426 :             case L'X':
; 1427 :                 return (HexaDecimalFormatter::ToStringX(x_sign, x_abs, format_type, precision, format_option, buffer, buffer_size));

  00251	ff 75 1c	 push	 DWORD PTR _buffer_size$[ebp]
  00254	ff 75 18	 push	 DWORD PTR _buffer$[ebp]
  00257	ff 75 14	 push	 DWORD PTR _format_option$[ebp]
  0025a	51		 push	 ecx
  0025b	52		 push	 edx
  0025c	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
  0025f	ff 75 08	 push	 DWORD PTR _x_sign$[ebp]
  00262	e8 00 00 00 00	 call	 ?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::ToStringX

; 1430 :             }
; 1431 :         }
; 1432 :     }

  00267	83 c4 1c	 add	 esp, 28			; 0000001cH
  0026a	5e		 pop	 esi
  0026b	8b e5		 mov	 esp, ebp
  0026d	5d		 pop	 ebp
  0026e	c3		 ret	 0
$LN26@ToString_I:

; 1393 :         wchar_t format_type;
; 1394 :         int precision;
; 1395 :         if (!ParseStandardFormat(format, &format_type, &precision))
; 1396 :             return (CustomFormatter::ToStringCustom(x_sign, x_abs, format, format_option, buffer, buffer_size));

  0026f	ff 75 1c	 push	 DWORD PTR _buffer_size$[ebp]
  00272	ff 75 18	 push	 DWORD PTR _buffer$[ebp]
  00275	ff 75 14	 push	 DWORD PTR _format_option$[ebp]
  00278	51		 push	 ecx
  00279	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
  0027c	ff 75 08	 push	 DWORD PTR _x_sign$[ebp]
  0027f	e8 00 00 00 00	 call	 ?ToStringCustom@CustomFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::CustomFormatter::ToStringCustom
$LN15@ToString_I:

; 1428 :             default:
; 1429 :                 throw FormatException(L"未知の書式指定子です。");

  00284	68 00 00 00 00	 push	 OFFSET ??_C@_1BI@BIIKHCEK@?$AA?$CK?$PP?e?$AAn?$PP?x?$AA?$AP?$AA?$AH?$PP?$JK?$AAP?$AAg?$AAY?$AA?$AC@
  00289	8d 4d d4	 lea	 ecx, DWORD PTR $T6[ebp]
  0028c	e8 00 00 00 00	 call	 ??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::FormatException::FormatException
  00291	68 00 00 00 00	 push	 OFFSET __TI2?AVFormatException@Internal@Core@Math@Palmtree@@
  00296	8d 45 d4	 lea	 eax, DWORD PTR $T6[ebp]
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN131@ToString_I:
  0029f	90		 npad	 1
$LN138@ToString_I:

; 1430 :             }
; 1431 :         }
; 1432 :     }

  002a0	00 00 00 00	 DD	 $LN6@ToString_I
  002a4	00 00 00 00	 DD	 $LN7@ToString_I
  002a8	00 00 00 00	 DD	 $LN8@ToString_I
  002ac	00 00 00 00	 DD	 $LN9@ToString_I
  002b0	00 00 00 00	 DD	 $LN11@ToString_I
  002b4	00 00 00 00	 DD	 $LN12@ToString_I
  002b8	00 00 00 00	 DD	 $LN13@ToString_I
  002bc	00 00 00 00	 DD	 $LN14@ToString_I
  002c0	00 00 00 00	 DD	 $LN15@ToString_I
$LN129@ToString_I:
  002c4	00		 DB	 0
  002c5	01		 DB	 1
  002c6	02		 DB	 2
  002c7	03		 DB	 3
  002c8	01		 DB	 1
  002c9	08		 DB	 8
  002ca	08		 DB	 8
  002cb	08		 DB	 8
  002cc	08		 DB	 8
  002cd	08		 DB	 8
  002ce	08		 DB	 8
  002cf	04		 DB	 4
  002d0	08		 DB	 8
  002d1	05		 DB	 5
  002d2	08		 DB	 8
  002d3	06		 DB	 6
  002d4	08		 DB	 8
  002d5	08		 DB	 8
  002d6	08		 DB	 8
  002d7	08		 DB	 8
  002d8	08		 DB	 8
  002d9	07		 DB	 7
  002da	08		 DB	 8
  002db	08		 DB	 8
  002dc	08		 DB	 8
  002dd	08		 DB	 8
  002de	08		 DB	 8
  002df	08		 DB	 8
  002e0	08		 DB	 8
  002e1	08		 DB	 8
  002e2	08		 DB	 8
  002e3	08		 DB	 8
  002e4	00		 DB	 0
  002e5	01		 DB	 1
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	01		 DB	 1
  002e9	08		 DB	 8
  002ea	08		 DB	 8
  002eb	08		 DB	 8
  002ec	08		 DB	 8
  002ed	08		 DB	 8
  002ee	08		 DB	 8
  002ef	04		 DB	 4
  002f0	08		 DB	 8
  002f1	05		 DB	 5
  002f2	08		 DB	 8
  002f3	06		 DB	 6
  002f4	08		 DB	 8
  002f5	08		 DB	 8
  002f6	08		 DB	 8
  002f7	08		 DB	 8
  002f8	08		 DB	 8
  002f9	07		 DB	 7
?ToString_Imp@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::ToString_Imp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ParseStandardFormat@Internal@Core@Math@Palmtree@@YAHPB_WPA_WPAH@Z
_TEXT	SEGMENT
_format$ = 8						; size = 4
_format_type$ = 12					; size = 4
_precision$ = 16					; size = 4
?ParseStandardFormat@Internal@Core@Math@Palmtree@@YAHPB_WPA_WPAH@Z PROC ; Palmtree::Math::Core::Internal::ParseStandardFormat, COMDAT

; 1356 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1357 :         if (format == nullptr)

  00003	8b 55 08	 mov	 edx, DWORD PTR _format$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 84 e2 00 00
	00		 je	 $LN42@ParseStand

; 1358 :         {
; 1359 :             *format_type = L'D';
; 1360 :             *precision = -1;
; 1361 :             return (TRUE);
; 1362 :         }
; 1363 :         else if (format[0] == L'\0')

  0000e	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00011	66 85 c9	 test	 cx, cx
  00014	0f 84 d6 00 00
	00		 je	 $LN42@ParseStand

; 1368 :         }
; 1369 :         else if (__IS_ALPHA(format[0]) && format[1] == L'\0')

  0001a	56		 push	 esi
  0001b	8b f1		 mov	 esi, ecx
  0001d	57		 push	 edi

; 1341 :         if (c >= L'A' && c <= L'Z')

  0001e	8d 46 bf	 lea	 eax, DWORD PTR [esi-65]
  00021	0f b7 f8	 movzx	 edi, ax
  00024	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  00028	76 09		 jbe	 SHORT $LN35@ParseStand

; 1342 :             return (TRUE);
; 1343 :         if (c >= L'a' && c <= L'z')

  0002a	8d 46 9f	 lea	 eax, DWORD PTR [esi-97]
  0002d	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  00031	77 1f		 ja	 SHORT $LN41@ParseStand
$LN35@ParseStand:

; 1368 :         }
; 1369 :         else if (__IS_ALPHA(format[0]) && format[1] == L'\0')

  00033	66 83 7a 02 00	 cmp	 WORD PTR [edx+2], 0
  00038	75 18		 jne	 SHORT $LN41@ParseStand

; 1370 :         {
; 1371 :             *format_type = format[0];

  0003a	8b 45 0c	 mov	 eax, DWORD PTR _format_type$[ebp]
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	66 89 08	 mov	 WORD PTR [eax], cx

; 1372 :             *precision = -1;

  00042	8b 45 10	 mov	 eax, DWORD PTR _precision$[ebp]
  00045	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 1379 :             return (TRUE);

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 1389 :     }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN41@ParseStand:

; 1373 :             return (TRUE);
; 1374 :         }
; 1375 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && format[2] == L'\0')

  00052	8b c1		 mov	 eax, ecx

; 1341 :         if (c >= L'A' && c <= L'Z')

  00054	83 ff 19	 cmp	 edi, 25			; 00000019H
  00057	76 09		 jbe	 SHORT $LN36@ParseStand

; 1342 :             return (TRUE);
; 1343 :         if (c >= L'a' && c <= L'z')

  00059	83 c0 9f	 add	 eax, -97		; ffffff9fH
  0005c	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  00060	77 2f		 ja	 SHORT $LN8@ParseStand
$LN36@ParseStand:

; 1373 :             return (TRUE);
; 1374 :         }
; 1375 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && format[2] == L'\0')

  00062	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]

; 1350 :         if (c >= L'0' && c <= L'9')

  00066	83 c0 d0	 add	 eax, -48		; ffffffd0H
  00069	66 83 f8 09	 cmp	 ax, 9
  0006d	77 22		 ja	 SHORT $LN8@ParseStand

; 1373 :             return (TRUE);
; 1374 :         }
; 1375 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && format[2] == L'\0')

  0006f	66 83 7a 04 00	 cmp	 WORD PTR [edx+4], 0
  00074	75 1b		 jne	 SHORT $LN8@ParseStand

; 1376 :         {
; 1377 :             *format_type = format[0];

  00076	8b 45 0c	 mov	 eax, DWORD PTR _format_type$[ebp]
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	66 89 08	 mov	 WORD PTR [eax], cx

; 1378 :             *precision = format[1] - L'0';

  0007e	8b 45 10	 mov	 eax, DWORD PTR _precision$[ebp]
  00081	0f b7 4a 02	 movzx	 ecx, WORD PTR [edx+2]
  00085	83 e9 30	 sub	 ecx, 48			; 00000030H
  00088	89 08		 mov	 DWORD PTR [eax], ecx

; 1379 :             return (TRUE);

  0008a	b8 01 00 00 00	 mov	 eax, 1

; 1389 :     }

  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN8@ParseStand:

; 1380 :         }
; 1381 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && __IS_DIGIT(format[2]) && format[3] == L'\0')

  00091	8b c1		 mov	 eax, ecx

; 1341 :         if (c >= L'A' && c <= L'Z')

  00093	83 ff 19	 cmp	 edi, 25			; 00000019H
  00096	76 09		 jbe	 SHORT $LN38@ParseStand

; 1342 :             return (TRUE);
; 1343 :         if (c >= L'a' && c <= L'z')

  00098	83 c0 9f	 add	 eax, -97		; ffffff9fH
  0009b	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  0009f	77 49		 ja	 SHORT $LN10@ParseStand
$LN38@ParseStand:

; 1380 :         }
; 1381 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && __IS_DIGIT(format[2]) && format[3] == L'\0')

  000a1	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]

; 1350 :         if (c >= L'0' && c <= L'9')

  000a5	83 c0 d0	 add	 eax, -48		; ffffffd0H
  000a8	66 83 f8 09	 cmp	 ax, 9
  000ac	77 3c		 ja	 SHORT $LN10@ParseStand

; 1380 :         }
; 1381 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && __IS_DIGIT(format[2]) && format[3] == L'\0')

  000ae	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]

; 1350 :         if (c >= L'0' && c <= L'9')

  000b2	83 c0 d0	 add	 eax, -48		; ffffffd0H
  000b5	66 83 f8 09	 cmp	 ax, 9
  000b9	77 2f		 ja	 SHORT $LN10@ParseStand

; 1380 :         }
; 1381 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && __IS_DIGIT(format[2]) && format[3] == L'\0')

  000bb	66 83 7a 06 00	 cmp	 WORD PTR [edx+6], 0
  000c0	75 28		 jne	 SHORT $LN10@ParseStand

; 1382 :         {
; 1383 :             *format_type = format[0];

  000c2	8b 45 0c	 mov	 eax, DWORD PTR _format_type$[ebp]
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	66 89 08	 mov	 WORD PTR [eax], cx

; 1384 :             *precision = (format[1] - L'0') * 10 + (format[2] - L'0');

  000ca	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  000ce	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  000d1	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]
  000d5	8d 89 f8 fe ff
	ff		 lea	 ecx, DWORD PTR [ecx-264]
  000db	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  000de	8b 45 10	 mov	 eax, DWORD PTR _precision$[ebp]
  000e1	89 08		 mov	 DWORD PTR [eax], ecx
  000e3	b8 01 00 00 00	 mov	 eax, 1

; 1389 :     }

  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
$LN10@ParseStand:
  000ea	5f		 pop	 edi

; 1385 :             return (TRUE);
; 1386 :         }
; 1387 :         else
; 1388 :             return (FALSE);

  000eb	33 c0		 xor	 eax, eax
  000ed	5e		 pop	 esi

; 1389 :     }

  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
$LN42@ParseStand:

; 1364 :         {
; 1365 :             *format_type = L'D';

  000f0	8b 45 0c	 mov	 eax, DWORD PTR _format_type$[ebp]
  000f3	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  000f8	66 89 08	 mov	 WORD PTR [eax], cx

; 1366 :             *precision = -1;

  000fb	8b 45 10	 mov	 eax, DWORD PTR _precision$[ebp]
  000fe	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 1367 :             return (TRUE);

  00104	8d 41 bd	 lea	 eax, DWORD PTR [ecx-67]

; 1389 :     }

  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
?ParseStandardFormat@Internal@Core@Math@Palmtree@@YAHPB_WPA_WPAH@Z ENDP ; Palmtree::Math::Core::Internal::ParseStandardFormat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?__IS_DIGIT@Internal@Core@Math@Palmtree@@YAH_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?__IS_DIGIT@Internal@Core@Math@Palmtree@@YAH_W@Z PROC	; Palmtree::Math::Core::Internal::__IS_DIGIT, COMDAT

; 1349 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1350 :         if (c >= L'0' && c <= L'9')

  00003	8b 45 08	 mov	 eax, DWORD PTR _c$[ebp]
  00006	66 b9 09 00	 mov	 cx, 9
  0000a	83 c0 d0	 add	 eax, -48		; ffffffd0H
  0000d	66 3b c8	 cmp	 cx, ax
  00010	1b c0		 sbb	 eax, eax
  00012	40		 inc	 eax

; 1351 :             return (TRUE);
; 1352 :         return (FALSE);
; 1353 :     }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?__IS_DIGIT@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP	; Palmtree::Math::Core::Internal::__IS_DIGIT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?__IS_ALPHA@Internal@Core@Math@Palmtree@@YAH_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?__IS_ALPHA@Internal@Core@Math@Palmtree@@YAH_W@Z PROC	; Palmtree::Math::Core::Internal::__IS_ALPHA, COMDAT

; 1340 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1341 :         if (c >= L'A' && c <= L'Z')

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _c$[ebp]
  00006	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  00009	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  0000d	76 0d		 jbe	 SHORT $LN5@IS_ALPHA

; 1342 :             return (TRUE);
; 1343 :         if (c >= L'a' && c <= L'z')

  0000f	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  00012	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  00016	76 04		 jbe	 SHORT $LN5@IS_ALPHA

; 1345 :         return (FALSE);

  00018	33 c0		 xor	 eax, eax

; 1346 :     }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
$LN5@IS_ALPHA:

; 1344 :             return (TRUE);

  0001c	b8 01 00 00 00	 mov	 eax, 1

; 1346 :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?__IS_ALPHA@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP	; Palmtree::Math::Core::Internal::__IS_ALPHA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ToStringCustom@CustomFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format$ = 16						; size = 4
_format_option$ = 20					; size = 4
_buffer$ = 24						; size = 4
_buffer_size$ = 28					; size = 4
?ToStringCustom@CustomFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::CustomFormatter::ToStringCustom, COMDAT

; 1313 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1314 :             // 【実験結果】
; 1315 :             // %と‰の効果は重複してかかる。%が2個なら100*100倍、%と‰なら100*1000倍。%と‰はどこに書かれていてもそのとおりの場所で表示される。【例：(-1.23456789).ToString("0■%■0") => -12■%■3 】
; 1316 :             // '#', '0', '.', ','をまず抜き出して数値を文字列化し、そのあとで'#', '0'のある場所に数値をはめ込む、みたいな実装になっているらしい。
; 1317 :             // ⇒小数部は小数点を基準に上位から順に1文字ずつはめ込まれ、はめ込めなかった分は四捨五入されて必要ならば繰り上がる。
; 1318 :             // ⇒整数部は小数点を基準に下位から順に1文字ずつはめ込まれる。
; 1319 :             // '.'の後に書かれている','は無視される。また、最初の '0', '#' の前に書かれている ',' は無視される。
; 1320 :             // 整数部にて、'0'の後に書かれている'#'は'0'と解釈される。
; 1321 :             // 小数部にて、'0'の前に書かれている'#'は'0'と解釈される。
; 1322 :             // '.'の前に '0'または '#'が一つもない場合は、'#' が一つだけあると解釈される。
; 1323 :             // 整数部の符号は最初の '#', '0'の前にどんなテキストがあろうとあらゆるテキストの最初に表示される。正値のときに自動的には'+'は表示されない。
; 1324 :             // Eの構文解析に失敗した場合はEは(そしてその次の+あるいは-も)一般テキストとしてそのまま表示される。
; 1325 :             // ⇒【例：(1.23456789).ToString("0.0E+#0  000") => 1.2E+34  568】
; 1326 :             // 逆に、構文として正しければEはどこに記述されていてもその場所のまま表示される。
; 1327 :             // ⇒【例：(-0.0123456789).ToString("0.0E+0  000") => -1.2E-2  346】
; 1328 :             // '.' が複数ある場合は最初のものを除いて無視される。【例：(-0.0123456789).ToString("0.0 00.00") => -0.0 1235】
; 1329 :             // 三つ目の';'の後の文字列は数値の符号が何であっても表示されない。つまり無視される。
; 1330 : 
; 1331 :             // c言語での実装はやめた方がいいかもしれない。理由：構文解析に動的メモリ獲得を使用しないと難易度が桁違いに上がり、動的メモリ獲得を使うとメモリリークがないことを保証するテストが大変。
; 1332 :             // 実装をどこでやるにしろ、１）多倍長整数の10進数としての桁数を調べる手段、２）１あるいは５と10のべき乗を掛けた値を取得する手段、はあると便利だと思う。それらを使って書式Eの実装をもっとスマートにやれたらいいかも。
; 1333 : 
; 1334 :             throw NotSupportedException(L"カスタム書式によるToStringはサポートされていません。");

  00006	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@MFGCBHKN@?$PP?$KL?$PP?$LJ?$PP?$LP?$PP?$OA?$PP?x?$AA?$AP?$AAk?$PP?$II?$PP?$IL?$AAT?$AAo?$AAS?$AAt?$AAr?$AAi@
  0000e	e8 00 00 00 00	 call	 ??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException
  00013	68 00 00 00 00	 push	 OFFSET __TI2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
  00018	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ToStringCu:
  00021	cc		 int	 3
?ToStringCustom@CustomFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::CustomFormatter::ToStringCustom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
_TEXT	SEGMENT
_writer$ = -52						; size = 20
_root$2 = -32						; size = 16
_count$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x_sign$ = 8						; size = 1
tv679 = 12						; size = 4
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_leading_zero_digit_count$1$ = 20			; size = 4
_temp_buf_bit_count$1$ = 20				; size = 4
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::ToStringX, COMDAT

; 1182 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00028	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0002b	bb 01 00 00 00	 mov	 ebx, 1
  00030	39 5d 14	 cmp	 DWORD PTR _precision$[ebp], ebx
  00033	0f 4d 5d 14	 cmovge	 ebx, DWORD PTR _precision$[ebp]
  00037	89 5d f0	 mov	 DWORD PTR _count$1$[ebp], ebx
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 08		 je	 SHORT $LN31@ToStringX
  0003e	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00041	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00044	eb 02		 jmp	 SHORT $LN32@ToStringX
$LN31@ToStringX:
  00046	33 c0		 xor	 eax, eax
$LN32@ToStringX:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1187 :             if (x_abs->IS_ZERO)

  00048	8b 75 0c	 mov	 esi, DWORD PTR _x_abs$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 201  :             _p = p;

  0004b	89 4d d0	 mov	 DWORD PTR _writer$[ebp+4], ecx

; 202  :             _sob = sob;

  0004e	89 4d d4	 mov	 DWORD PTR _writer$[ebp+8], ecx

; 204  :             _written = 0;

  00051	33 c9		 xor	 ecx, ecx
  00053	89 45 d8	 mov	 DWORD PTR _writer$[ebp+12], eax

; 210  :         {

  00056	b8 00 00 00 00	 mov	 eax, OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1187 :             if (x_abs->IS_ZERO)

  0005b	f6 46 04 01	 test	 BYTE PTR [esi+4], 1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 204  :             _written = 0;

  0005f	89 4d dc	 mov	 DWORD PTR _writer$[ebp+16], ecx

; 210  :         {

  00062	89 45 cc	 mov	 DWORD PTR _writer$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1187 :             if (x_abs->IS_ZERO)

  00065	74 32		 je	 SHORT $LN11@ToStringX
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  00067	85 db		 test	 ebx, ebx
  00069	74 1a		 je	 SHORT $LN37@ToStringX
  0006b	0f 1f 44 00 00	 npad	 5
$LL36@ToStringX:

; 228  :             {
; 229  :                 Write(c);

  00070	6a 30		 push	 48			; 00000030H
  00072	8d 4d cc	 lea	 ecx, DWORD PTR _writer$[ebp]
  00075	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00078	83 eb 01	 sub	 ebx, 1
  0007b	74 05		 je	 SHORT $LN95@ToStringX

; 227  :             while (count > 0)

  0007d	8b 45 cc	 mov	 eax, DWORD PTR _writer$[ebp]
  00080	eb ee		 jmp	 SHORT $LL36@ToStringX
$LN95@ToStringX:
  00082	8b 4d dc	 mov	 ecx, DWORD PTR _writer$[ebp+16]
$LN37@ToStringX:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1193 :                 return (writer.GetLength());

  00085	8b c1		 mov	 eax, ecx

; 1305 :             }
; 1306 :         }

  00087	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00091	59		 pop	 ecx
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
$LN11@ToStringX:

; 1194 :             }
; 1195 :             else
; 1196 :             {
; 1197 :                 // x != 0 の場合
; 1198 :                 ResourceHolderUINT root;

  00099	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  0009c	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1199 :                 __UNIT_TYPE temp_buf_bit_count = x_abs->UNIT_BIT_COUNT + 4;
; 1200 :                 __UNIT_TYPE* temp_buf = root.AllocateBlock(temp_buf_bit_count);

  000a8	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  000ab	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000ae	83 c0 04	 add	 eax, 4
  000b1	50		 push	 eax
  000b2	89 45 14	 mov	 DWORD PTR _temp_buf_bit_count$1$[ebp], eax
  000b5	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock

; 1201 :                 __UNIT_TYPE output_len;
; 1202 :                 wchar_t filling_char;
; 1203 :                 if (x_sign >= 0)

  000ba	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  000be	8b d8		 mov	 ebx, eax
  000c0	7c 60		 jl	 SHORT $LN13@ToStringX
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  000c2	8b 4d 0c	 mov	 ecx, DWORD PTR _x_abs$[ebp]
  000c5	8b fb		 mov	 edi, ebx

; 157  :             return ((u + v - 1) / v);

  000c7	8b 45 14	 mov	 eax, DWORD PTR _temp_buf_bit_count$1$[ebp]

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  000ca	8b 76 24	 mov	 esi, DWORD PTR [esi+36]

; 157  :             return ((u + v - 1) / v);

  000cd	83 c0 1f	 add	 eax, 31			; 0000001fH
  000d0	c1 e8 05	 shr	 eax, 5

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  000d3	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000d6	f3 a5		 rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1210 :                     unsigned char* ptr = (unsigned char*)&temp_buf[temp_buf_word_count] - 1;

  000d8	8d 3c 85 ff ff
	ff ff		 lea	 edi, DWORD PTR [eax*4-1]
  000df	03 fb		 add	 edi, ebx
  000e1	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]

; 1211 :                     while (ptr >= (unsigned char*)temp_buf)

  000e8	3b fb		 cmp	 edi, ebx
  000ea	72 2c		 jb	 SHORT $LN63@ToStringX
  000ec	8a 0f		 mov	 cl, BYTE PTR [edi]
  000ee	8d 57 ff	 lea	 edx, DWORD PTR [edi-1]
$LL2@ToStringX:

; 1212 :                     {
; 1213 :                         if ((ptr[0] >> 4) != 0 || (ptr[0] & 0xf) >= 0x8)

  000f1	f6 c1 f0	 test	 cl, 240			; 000000f0H
  000f4	75 22		 jne	 SHORT $LN63@ToStringX
  000f6	8a c1		 mov	 al, cl
  000f8	24 0f		 and	 al, 15			; 0000000fH
  000fa	3c 08		 cmp	 al, 8
  000fc	73 1a		 jae	 SHORT $LN63@ToStringX

; 1214 :                             break;
; 1215 :                         // 最上位桁が '0' で、かつ次の桁が '0'～'7'である場合
; 1216 :                         // ⇒最上位桁の '0' を削除する
; 1217 :                         --output_len;

  000fe	4e		 dec	 esi

; 1218 : 
; 1219 :                         if (&ptr[-1] < (unsigned char*)temp_buf)

  000ff	3b d3		 cmp	 edx, ebx
  00101	72 15		 jb	 SHORT $LN63@ToStringX

; 1220 :                             break;
; 1221 : 
; 1222 :                         if (ptr[0] != 0 || (ptr[-1] >> 4) >= 0x8)

  00103	84 c9		 test	 cl, cl
  00105	75 11		 jne	 SHORT $LN63@ToStringX
  00107	8a 0a		 mov	 cl, BYTE PTR [edx]
  00109	8a c1		 mov	 al, cl
  0010b	24 f0		 and	 al, 240			; 000000f0H
  0010d	3c 80		 cmp	 al, 128			; 00000080H
  0010f	73 07		 jae	 SHORT $LN63@ToStringX

; 1223 :                             break;
; 1224 :                         // 最上位桁が '0' で、かつ次の桁が '0'～'7'である場合
; 1225 :                         // ⇒最上位桁の '0' を削除する
; 1226 :                         --output_len;
; 1227 : 
; 1228 :                         --ptr;

  00111	4f		 dec	 edi
  00112	4e		 dec	 esi
  00113	4a		 dec	 edx
  00114	3b fb		 cmp	 edi, ebx
  00116	73 d9		 jae	 SHORT $LL2@ToStringX
$LN63@ToStringX:

; 1229 :                     }
; 1230 :                     filling_char = L'0';

  00118	bf 30 00 00 00	 mov	 edi, 48			; 00000030H

; 1231 :                 }
; 1232 :                 else

  0011d	e9 8a 00 00 00	 jmp	 $LN14@ToStringX
$LN13@ToStringX:

; 1233 :                 {
; 1234 :                     // x < 0 の場合
; 1235 : 
; 1236 :                     __UNIT_TYPE *in_ptr = x_abs->BLOCK;
; 1237 :                     __UNIT_TYPE *out_ptr = temp_buf;
; 1238 :                     __UNIT_TYPE count = x_abs->UNIT_WORD_COUNT;

  00122	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]

; 1239 :                     char carry = 1;

  00125	b2 01		 mov	 dl, 1
  00127	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]

; 1240 :                     while (count > 0)

  0012a	85 c9		 test	 ecx, ecx
  0012c	74 23		 je	 SHORT $LN5@ToStringX
  0012e	8b f3		 mov	 esi, ebx
$LL4@ToStringX:

; 1241 :                     {
; 1242 :                         carry = _ADD_UNIT(carry, ~*in_ptr, 0, out_ptr);

  00130	8b 07		 mov	 eax, DWORD PTR [edi]

; 1243 :                         ++in_ptr;

  00132	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00135	80 c2 ff	 add	 dl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1244 :                         ++out_ptr;

  00138	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0013b	f7 d0		 not	 eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0013d	83 d0 00	 adc	 eax, 0
  00140	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  00143	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1245 :                         --count;

  00146	83 e9 01	 sub	 ecx, 1
  00149	75 e5		 jne	 SHORT $LL4@ToStringX
  0014b	8b 75 0c	 mov	 esi, DWORD PTR _x_abs$[ebp]
  0014e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
$LN5@ToStringX:

; 1246 :                     }
; 1247 :                     output_len = x_abs->UNIT_WORD_COUNT * (__UNIT_TYPE_BIT_COUNT / 4);
; 1248 :                     unsigned char* ptr = (unsigned char*)&temp_buf[x_abs->UNIT_WORD_COUNT] - 1;

  00151	8d 53 ff	 lea	 edx, DWORD PTR [ebx-1]
  00154	8d 14 8a	 lea	 edx, DWORD PTR [edx+ecx*4]
  00157	8d 34 cd 00 00
	00 00		 lea	 esi, DWORD PTR [ecx*8]

; 1249 :                     while (ptr >= (unsigned char*)temp_buf)

  0015e	3b d3		 cmp	 edx, ebx
  00160	72 35		 jb	 SHORT $LN66@ToStringX
  00162	8a 0a		 mov	 cl, BYTE PTR [edx]
  00164	8d 7a ff	 lea	 edi, DWORD PTR [edx-1]
$LL6@ToStringX:

; 1250 :                     {
; 1251 :                         if ((ptr[0] >> 4) != 0xf || (ptr[0] & 0xf) < 0x8)

  00167	8a c1		 mov	 al, cl
  00169	24 f0		 and	 al, 240			; 000000f0H
  0016b	3c f0		 cmp	 al, 240			; 000000f0H
  0016d	75 28		 jne	 SHORT $LN66@ToStringX
  0016f	80 e1 0f	 and	 cl, 15			; 0000000fH
  00172	80 f9 08	 cmp	 cl, 8
  00175	72 20		 jb	 SHORT $LN66@ToStringX

; 1252 :                             break;
; 1253 :                         // 最上位桁が 'F' で、かつ次の桁が '8'～'F'である場合
; 1254 :                         // ⇒最上位桁の 'F' を削除する
; 1255 :                         *ptr &= 0x0f;
; 1256 :                         --output_len;

  00177	4e		 dec	 esi
  00178	88 0a		 mov	 BYTE PTR [edx], cl

; 1257 : 
; 1258 :                         if (&ptr[-1] < (unsigned char*)temp_buf)

  0017a	3b fb		 cmp	 edi, ebx
  0017c	72 19		 jb	 SHORT $LN66@ToStringX

; 1259 :                             break;
; 1260 : 
; 1261 :                         if (ptr[0] == 0xf || (ptr[-1] >> 4) < 0x8)

  0017e	80 f9 0f	 cmp	 cl, 15			; 0000000fH
  00181	74 14		 je	 SHORT $LN66@ToStringX
  00183	8a 0f		 mov	 cl, BYTE PTR [edi]
  00185	8a c1		 mov	 al, cl
  00187	24 f0		 and	 al, 240			; 000000f0H
  00189	3c 80		 cmp	 al, 128			; 00000080H
  0018b	72 0a		 jb	 SHORT $LN66@ToStringX

; 1262 :                             break;
; 1263 :                         // 最上位桁が 'F' で、かつ次の桁が '8'～'F'である場合
; 1264 :                         // ⇒最上位桁の 'F' を削除する
; 1265 :                         *ptr = 0;

  0018d	c6 02 00	 mov	 BYTE PTR [edx], 0

; 1266 :                         --output_len;

  00190	4e		 dec	 esi

; 1267 : 
; 1268 :                         --ptr;

  00191	4a		 dec	 edx
  00192	4f		 dec	 edi
  00193	3b d3		 cmp	 edx, ebx
  00195	73 d0		 jae	 SHORT $LL6@ToStringX
$LN66@ToStringX:

; 1269 :                     }
; 1270 :                     filling_char = format_type == L'X' ? L'F' : L'f';

  00197	66 83 7d 10 58	 cmp	 WORD PTR _format_type$[ebp], 88 ; 00000058H
  0019c	b8 66 00 00 00	 mov	 eax, 102		; 00000066H
  001a1	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  001a6	0f 44 c1	 cmove	 eax, ecx
  001a9	0f b7 f8	 movzx	 edi, ax
$LN14@ToStringX:

; 1271 :                 }
; 1272 :                 root.CheckBlock(temp_buf);

  001ac	53		 push	 ebx
  001ad	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  001b0	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 157  :             return ((u + v - 1) / v);

  001b5	8d 46 07	 lea	 eax, DWORD PTR [esi+7]
  001b8	c1 e8 03	 shr	 eax, 3
  001bb	89 45 0c	 mov	 DWORD PTR tv679[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1278 :                 unsigned int leading_zero_digit_count = (unsigned int)(_DIVIDE_CEILING_UNIT(output_len, __UNIT_TYPE_BIT_COUNT / 4) * (__UNIT_TYPE_BIT_COUNT / 4) - output_len);

  001be	c1 e0 03	 shl	 eax, 3
  001c1	2b c6		 sub	 eax, esi
  001c3	89 45 14	 mov	 DWORD PTR _leading_zero_digit_count$1$[ebp], eax

; 1279 : 
; 1280 : 
; 1281 :                 __UNIT_TYPE filling_digit_len; // 塗りつぶす上位桁の桁数
; 1282 :                 __UNIT_TYPE total_length; // 出力する合計の桁数
; 1283 :                 if (output_len < (__UNIT_TYPE)precision)
; 1284 :                 {
; 1285 :                     filling_digit_len = precision - output_len;
; 1286 :                     total_length = precision;
; 1287 :                 }
; 1288 :                 else
; 1289 :                 {
; 1290 :                     filling_digit_len = 0;
; 1291 :                     total_length = output_len;
; 1292 :                 }
; 1293 :                 writer.Write(filling_char, filling_digit_len);

  001c6	8b 45 f0	 mov	 eax, DWORD PTR _count$1$[ebp]
  001c9	2b c6		 sub	 eax, esi
  001cb	3b 75 f0	 cmp	 esi, DWORD PTR _count$1$[ebp]
  001ce	1b f6		 sbb	 esi, esi
  001d0	23 f0		 and	 esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  001d2	76 0f		 jbe	 SHORT $LN51@ToStringX
$LL50@ToStringX:

; 228  :             {
; 229  :                 Write(c);

  001d4	8b 45 cc	 mov	 eax, DWORD PTR _writer$[ebp]
  001d7	8d 4d cc	 lea	 ecx, DWORD PTR _writer$[ebp]
  001da	57		 push	 edi
  001db	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  001de	83 ee 01	 sub	 esi, 1
  001e1	75 f1		 jne	 SHORT $LL50@ToStringX
$LN51@ToStringX:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1295 :                 __UNIT_TYPE* s_ptr = &temp_buf[_DIVIDE_CEILING_UNIT(output_len, __UNIT_TYPE_BIT_COUNT / 4) - 1];

  001e3	8b 45 0c	 mov	 eax, DWORD PTR tv679[ebp]

; 1296 :                 wchar_t* digit_table = format_type == L'X' ? hexadecimal_upper_digits : hexadecimal_lower_digits;

  001e6	bf 00 00 00 00	 mov	 edi, OFFSET ?hexadecimal_upper_digits@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@3PA_WA
  001eb	66 83 7d 10 58	 cmp	 WORD PTR _format_type$[ebp], 88 ; 00000058H
  001f0	8d 34 83	 lea	 esi, DWORD PTR [ebx+eax*4]
  001f3	b8 00 00 00 00	 mov	 eax, OFFSET ?hexadecimal_lower_digits@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@3PA_WA
  001f8	0f 45 f8	 cmovne	 edi, eax

; 1297 :                 OutputHexNumberSequenceOneWord(*s_ptr, leading_zero_digit_count, digit_table, &writer);

  001fb	8d 45 cc	 lea	 eax, DWORD PTR _writer$[ebp]
  001fe	50		 push	 eax
  001ff	57		 push	 edi
  00200	ff 75 14	 push	 DWORD PTR _leading_zero_digit_count$1$[ebp]
  00203	ff 76 fc	 push	 DWORD PTR [esi-4]
  00206	e8 00 00 00 00	 call	 ?OutputHexNumberSequenceOneWord@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAXIIPA_WPAVStringWriter@2345@@Z ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::OutputHexNumberSequenceOneWord
  0020b	83 ee 08	 sub	 esi, 8
  0020e	83 c4 10	 add	 esp, 16			; 00000010H

; 1298 :                 --s_ptr;
; 1299 :                 while (s_ptr >= temp_buf)

  00211	3b f3		 cmp	 esi, ebx
  00213	72 18		 jb	 SHORT $LN9@ToStringX
$LL8@ToStringX:

; 1300 :                 {
; 1301 :                     OutputHexNumberSequenceOneWord(*s_ptr, 0, digit_table, &writer);

  00215	8d 45 cc	 lea	 eax, DWORD PTR _writer$[ebp]
  00218	50		 push	 eax
  00219	57		 push	 edi
  0021a	6a 00		 push	 0
  0021c	ff 36		 push	 DWORD PTR [esi]
  0021e	e8 00 00 00 00	 call	 ?OutputHexNumberSequenceOneWord@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAXIIPA_WPAVStringWriter@2345@@Z ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::OutputHexNumberSequenceOneWord

; 1302 :                     --s_ptr;

  00223	83 ee 04	 sub	 esi, 4
  00226	83 c4 10	 add	 esp, 16			; 00000010H
  00229	3b f3		 cmp	 esi, ebx
  0022b	73 e8		 jae	 SHORT $LL8@ToStringX
$LN9@ToStringX:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 250  :             return (_written);

  0022d	8b 75 dc	 mov	 esi, DWORD PTR _writer$[ebp+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1304 :                 return (writer.GetLength());

  00230	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00237	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  0023a	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0023f	8b c6		 mov	 eax, esi

; 1305 :             }
; 1306 :         }

  00241	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00244	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024b	59		 pop	 ecx
  0024c	5f		 pop	 edi
  0024d	5e		 pop	 esi
  0024e	5b		 pop	 ebx
  0024f	8b e5		 mov	 esp, ebp
  00251	5d		 pop	 ebp
  00252	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::ToStringX
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?OutputHexNumberSequenceOneWord@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAXIIPA_WPAVStringWriter@2345@@Z
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_x$ = 8							; size = 4
_skip_digit_len$ = 12					; size = 4
_digit_table$ = 16					; size = 4
_writer$ = 20						; size = 4
?OutputHexNumberSequenceOneWord@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAXIIPA_WPAVStringWriter@2345@@Z PROC ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::OutputHexNumberSequenceOneWord, COMDAT

; 1121 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1122 :             if (sizeof(__UNIT_TYPE) > sizeof(_UINT64_T))
; 1123 :             {
; 1124 :                 // 64bit を超える __UNIT_TYPE には未対応
; 1125 :                 // 対応するには以降のコーディングを見直す必要がある
; 1126 :                 throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_tostring.cpp;OutputHexNumberSequenceOneWord;1");
; 1127 :             }
; 1128 :             unsigned int count = __UNIT_TYPE_BIT_COUNT / 4;
; 1129 :             if (skip_digit_len > 0)

  00004	8b 55 0c	 mov	 edx, DWORD PTR _skip_digit_len$[ebp]
  00007	b8 08 00 00 00	 mov	 eax, 8
  0000c	89 45 fc	 mov	 DWORD PTR _count$1$[ebp], eax
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  00014	57		 push	 edi
  00015	85 d2		 test	 edx, edx
  00017	74 0e		 je	 SHORT $LN3@OutputHexN

; 1130 :             {
; 1131 :                 x = _ROTATE_L_UNIT(x, 4 * skip_digit_len);

  00019	8d 0c 95 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00020	d3 c6		 rol	 esi, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1132 :                 count -= skip_digit_len;

  00022	2b c2		 sub	 eax, edx
  00024	89 45 fc	 mov	 DWORD PTR _count$1$[ebp], eax
$LN3@OutputHexN:

; 1133 :             }
; 1134 :             if (count & 0x10)

  00027	8b 7d 14	 mov	 edi, DWORD PTR _writer$[ebp]
  0002a	8b 5d 10	 mov	 ebx, DWORD PTR _digit_table$[ebp]
  0002d	a8 10		 test	 al, 16			; 00000010H
  0002f	0f 84 2f 01 00
	00		 je	 $LN4@OutputHexN

; 1136 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00035	8b 17		 mov	 edx, DWORD PTR [edi]
  00037	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00039	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1136 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0003c	8b c6		 mov	 eax, esi
  0003e	83 e0 0f	 and	 eax, 15			; 0000000fH
  00041	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00045	50		 push	 eax
  00046	ff 52 04	 call	 DWORD PTR [edx+4]

; 1137 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00049	8b 17		 mov	 edx, DWORD PTR [edi]
  0004b	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  0004d	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1137 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00050	8b c6		 mov	 eax, esi
  00052	83 e0 0f	 and	 eax, 15			; 0000000fH
  00055	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00059	50		 push	 eax
  0005a	ff 52 04	 call	 DWORD PTR [edx+4]

; 1138 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0005d	8b 17		 mov	 edx, DWORD PTR [edi]
  0005f	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00061	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1138 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00064	8b c6		 mov	 eax, esi
  00066	83 e0 0f	 and	 eax, 15			; 0000000fH
  00069	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  0006d	50		 push	 eax
  0006e	ff 52 04	 call	 DWORD PTR [edx+4]

; 1139 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00071	8b 17		 mov	 edx, DWORD PTR [edi]
  00073	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00075	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1139 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00078	8b c6		 mov	 eax, esi
  0007a	83 e0 0f	 and	 eax, 15			; 0000000fH
  0007d	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00081	50		 push	 eax
  00082	ff 52 04	 call	 DWORD PTR [edx+4]

; 1140 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00085	8b 17		 mov	 edx, DWORD PTR [edi]
  00087	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00089	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1140 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0008c	8b c6		 mov	 eax, esi
  0008e	83 e0 0f	 and	 eax, 15			; 0000000fH
  00091	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00095	50		 push	 eax
  00096	ff 52 04	 call	 DWORD PTR [edx+4]

; 1141 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00099	8b 17		 mov	 edx, DWORD PTR [edi]
  0009b	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  0009d	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1141 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000a0	8b c6		 mov	 eax, esi
  000a2	83 e0 0f	 and	 eax, 15			; 0000000fH
  000a5	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  000a9	50		 push	 eax
  000aa	ff 52 04	 call	 DWORD PTR [edx+4]

; 1142 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000ad	8b 17		 mov	 edx, DWORD PTR [edi]
  000af	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  000b1	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1142 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000b4	8b c6		 mov	 eax, esi
  000b6	83 e0 0f	 and	 eax, 15			; 0000000fH
  000b9	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  000bd	50		 push	 eax
  000be	ff 52 04	 call	 DWORD PTR [edx+4]

; 1143 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000c1	8b 17		 mov	 edx, DWORD PTR [edi]
  000c3	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  000c5	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1143 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000c8	8b c6		 mov	 eax, esi
  000ca	83 e0 0f	 and	 eax, 15			; 0000000fH
  000cd	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  000d1	50		 push	 eax
  000d2	ff 52 04	 call	 DWORD PTR [edx+4]

; 1144 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000d5	8b 17		 mov	 edx, DWORD PTR [edi]
  000d7	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  000d9	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1144 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000dc	8b c6		 mov	 eax, esi
  000de	83 e0 0f	 and	 eax, 15			; 0000000fH
  000e1	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  000e5	50		 push	 eax
  000e6	ff 52 04	 call	 DWORD PTR [edx+4]

; 1145 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000e9	8b 17		 mov	 edx, DWORD PTR [edi]
  000eb	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  000ed	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1145 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000f0	8b c6		 mov	 eax, esi
  000f2	83 e0 0f	 and	 eax, 15			; 0000000fH
  000f5	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  000f9	50		 push	 eax
  000fa	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  000fd	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1146 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00100	8b 17		 mov	 edx, DWORD PTR [edi]
  00102	8b c6		 mov	 eax, esi
  00104	83 e0 0f	 and	 eax, 15			; 0000000fH
  00107	8b cf		 mov	 ecx, edi
  00109	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  0010d	50		 push	 eax
  0010e	ff 52 04	 call	 DWORD PTR [edx+4]

; 1147 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00111	8b 17		 mov	 edx, DWORD PTR [edi]
  00113	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00115	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1147 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00118	8b c6		 mov	 eax, esi
  0011a	83 e0 0f	 and	 eax, 15			; 0000000fH
  0011d	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00121	50		 push	 eax
  00122	ff 52 04	 call	 DWORD PTR [edx+4]

; 1148 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00125	8b 17		 mov	 edx, DWORD PTR [edi]
  00127	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00129	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1148 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0012c	8b c6		 mov	 eax, esi
  0012e	83 e0 0f	 and	 eax, 15			; 0000000fH
  00131	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00135	50		 push	 eax
  00136	ff 52 04	 call	 DWORD PTR [edx+4]

; 1149 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00139	8b 17		 mov	 edx, DWORD PTR [edi]
  0013b	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  0013d	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1149 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00140	8b c6		 mov	 eax, esi
  00142	83 e0 0f	 and	 eax, 15			; 0000000fH
  00145	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00149	50		 push	 eax
  0014a	ff 52 04	 call	 DWORD PTR [edx+4]

; 1150 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0014d	8b 17		 mov	 edx, DWORD PTR [edi]
  0014f	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00151	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1150 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00154	8b c6		 mov	 eax, esi
  00156	83 e0 0f	 and	 eax, 15			; 0000000fH
  00159	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  0015d	50		 push	 eax
  0015e	ff 52 04	 call	 DWORD PTR [edx+4]
  00161	8b 45 fc	 mov	 eax, DWORD PTR _count$1$[ebp]
$LN4@OutputHexN:

; 1151 :             }
; 1152 :             if (count & 0x8)

  00164	a8 08		 test	 al, 8
  00166	0f 84 a3 00 00
	00		 je	 $LN5@OutputHexN

; 1154 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0016c	8b 17		 mov	 edx, DWORD PTR [edi]
  0016e	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00170	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1154 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00173	8b c6		 mov	 eax, esi
  00175	83 e0 0f	 and	 eax, 15			; 0000000fH
  00178	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  0017c	50		 push	 eax
  0017d	ff 52 04	 call	 DWORD PTR [edx+4]

; 1155 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00180	8b 17		 mov	 edx, DWORD PTR [edi]
  00182	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00184	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1155 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00187	8b c6		 mov	 eax, esi
  00189	83 e0 0f	 and	 eax, 15			; 0000000fH
  0018c	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00190	50		 push	 eax
  00191	ff 52 04	 call	 DWORD PTR [edx+4]

; 1156 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00194	8b 17		 mov	 edx, DWORD PTR [edi]
  00196	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00198	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1156 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0019b	8b c6		 mov	 eax, esi
  0019d	83 e0 0f	 and	 eax, 15			; 0000000fH
  001a0	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  001a4	50		 push	 eax
  001a5	ff 52 04	 call	 DWORD PTR [edx+4]

; 1157 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001a8	8b 17		 mov	 edx, DWORD PTR [edi]
  001aa	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  001ac	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1157 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001af	8b c6		 mov	 eax, esi
  001b1	83 e0 0f	 and	 eax, 15			; 0000000fH
  001b4	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  001b8	50		 push	 eax
  001b9	ff 52 04	 call	 DWORD PTR [edx+4]

; 1158 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001bc	8b 17		 mov	 edx, DWORD PTR [edi]
  001be	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  001c0	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1158 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001c3	8b c6		 mov	 eax, esi
  001c5	83 e0 0f	 and	 eax, 15			; 0000000fH
  001c8	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  001cc	50		 push	 eax
  001cd	ff 52 04	 call	 DWORD PTR [edx+4]

; 1159 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001d0	8b 17		 mov	 edx, DWORD PTR [edi]
  001d2	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  001d4	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1159 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001d7	8b c6		 mov	 eax, esi
  001d9	83 e0 0f	 and	 eax, 15			; 0000000fH
  001dc	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  001e0	50		 push	 eax
  001e1	ff 52 04	 call	 DWORD PTR [edx+4]

; 1160 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001e4	8b 17		 mov	 edx, DWORD PTR [edi]
  001e6	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  001e8	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1160 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001eb	8b c6		 mov	 eax, esi
  001ed	83 e0 0f	 and	 eax, 15			; 0000000fH
  001f0	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  001f4	50		 push	 eax
  001f5	ff 52 04	 call	 DWORD PTR [edx+4]

; 1161 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001f8	8b 17		 mov	 edx, DWORD PTR [edi]
  001fa	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  001fc	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1161 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001ff	8b c6		 mov	 eax, esi
  00201	83 e0 0f	 and	 eax, 15			; 0000000fH
  00204	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00208	50		 push	 eax
  00209	ff 52 04	 call	 DWORD PTR [edx+4]
  0020c	8b 45 fc	 mov	 eax, DWORD PTR _count$1$[ebp]
$LN5@OutputHexN:

; 1162 :             }
; 1163 :             if (count & 0x4)

  0020f	a8 04		 test	 al, 4
  00211	74 53		 je	 SHORT $LN6@OutputHexN

; 1165 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00213	8b 17		 mov	 edx, DWORD PTR [edi]
  00215	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00217	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1165 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0021a	8b c6		 mov	 eax, esi
  0021c	83 e0 0f	 and	 eax, 15			; 0000000fH
  0021f	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00223	50		 push	 eax
  00224	ff 52 04	 call	 DWORD PTR [edx+4]

; 1166 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00227	8b 17		 mov	 edx, DWORD PTR [edi]
  00229	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  0022b	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1166 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0022e	8b c6		 mov	 eax, esi
  00230	83 e0 0f	 and	 eax, 15			; 0000000fH
  00233	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  00237	50		 push	 eax
  00238	ff 52 04	 call	 DWORD PTR [edx+4]

; 1167 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0023b	8b 17		 mov	 edx, DWORD PTR [edi]
  0023d	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  0023f	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1167 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00242	8b c6		 mov	 eax, esi
  00244	83 e0 0f	 and	 eax, 15			; 0000000fH
  00247	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  0024b	50		 push	 eax
  0024c	ff 52 04	 call	 DWORD PTR [edx+4]

; 1168 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0024f	8b 17		 mov	 edx, DWORD PTR [edi]
  00251	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00253	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1168 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00256	8b c6		 mov	 eax, esi
  00258	83 e0 0f	 and	 eax, 15			; 0000000fH
  0025b	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  0025f	50		 push	 eax
  00260	ff 52 04	 call	 DWORD PTR [edx+4]
  00263	8b 45 fc	 mov	 eax, DWORD PTR _count$1$[ebp]
$LN6@OutputHexN:

; 1169 :             }
; 1170 :             if (count & 0x2)

  00266	a8 02		 test	 al, 2
  00268	74 2b		 je	 SHORT $LN7@OutputHexN

; 1172 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0026a	8b 17		 mov	 edx, DWORD PTR [edi]
  0026c	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  0026e	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1172 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00271	8b c6		 mov	 eax, esi
  00273	83 e0 0f	 and	 eax, 15			; 0000000fH
  00276	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  0027a	50		 push	 eax
  0027b	ff 52 04	 call	 DWORD PTR [edx+4]

; 1173 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0027e	8b 17		 mov	 edx, DWORD PTR [edi]
  00280	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  00282	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1173 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00285	8b c6		 mov	 eax, esi
  00287	83 e0 0f	 and	 eax, 15			; 0000000fH
  0028a	0f b7 04 43	 movzx	 eax, WORD PTR [ebx+eax*2]
  0028e	50		 push	 eax
  0028f	ff 52 04	 call	 DWORD PTR [edx+4]
  00292	8b 45 fc	 mov	 eax, DWORD PTR _count$1$[ebp]
$LN7@OutputHexN:

; 1174 :             }
; 1175 :             if (count & 0x1)

  00295	a8 01		 test	 al, 1
  00297	74 12		 je	 SHORT $LN8@OutputHexN

; 1177 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00299	8b 17		 mov	 edx, DWORD PTR [edi]
  0029b	8b cf		 mov	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 331  :             return (_rotl(x, count));

  0029d	c1 c6 04	 rol	 esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1177 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  002a0	83 e6 0f	 and	 esi, 15			; 0000000fH
  002a3	0f b7 04 73	 movzx	 eax, WORD PTR [ebx+esi*2]
  002a7	50		 push	 eax
  002a8	ff 52 04	 call	 DWORD PTR [edx+4]
$LN8@OutputHexN:

; 1178 :             }
; 1179 :         }

  002ab	5f		 pop	 edi
  002ac	5e		 pop	 esi
  002ad	5b		 pop	 ebx
  002ae	8b e5		 mov	 esp, ebp
  002b0	5d		 pop	 ebp
  002b1	c3		 ret	 0
?OutputHexNumberSequenceOneWord@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAXIIPA_WPAVStringWriter@2345@@Z ENDP ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::OutputHexNumberSequenceOneWord
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ToStringP@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
_TEXT	SEGMENT
_formatter$ = -44					; size = 24
_writer$ = -20						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringP@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringP, COMDAT

; 1105 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00003	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1105 :         {

  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00009	85 c9		 test	 ecx, ecx
  0000b	74 08		 je	 SHORT $LN5@ToStringP
  0000d	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00010	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00013	eb 02		 jmp	 SHORT $LN6@ToStringP
$LN5@ToStringP:
  00015	33 c0		 xor	 eax, eax
$LN6@ToStringP:

; 203  :             _eob = eob;

  00017	89 45 f8	 mov	 DWORD PTR _writer$[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  0001a	b8 50 00 00 00	 mov	 eax, 80			; 00000050H
  0001f	66 89 45 e0	 mov	 WORD PTR _formatter$[ebp+12], ax

; 205  :                 _precision = precision;

  00023	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00026	89 45 e4	 mov	 DWORD PTR _formatter$[ebp+16], eax

; 206  :                 _number_format_info = number_format_info;

  00029	8b 45 18	 mov	 eax, DWORD PTR _format_option$[ebp]
  0002c	89 45 e8	 mov	 DWORD PTR _formatter$[ebp+20], eax

; 1108 :             formatter.Format(x_sign, x_abs, &writer);

  0002f	8d 45 ec	 lea	 eax, DWORD PTR _writer$[ebp]
  00032	50		 push	 eax
  00033	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 201  :             _p = p;

  00036	89 4d f0	 mov	 DWORD PTR _writer$[ebp+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1108 :             formatter.Format(x_sign, x_abs, &writer);

  00039	ff 75 08	 push	 DWORD PTR _x_sign$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 202  :             _sob = sob;

  0003c	89 4d f4	 mov	 DWORD PTR _writer$[ebp+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1108 :             formatter.Format(x_sign, x_abs, &writer);

  0003f	8d 4d d4	 lea	 ecx, DWORD PTR _formatter$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 204  :             _written = 0;

  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp+16], 0

; 210  :         {

  00049	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 187  :             const __UNIT_TYPE _10n_base_number = 1000000000U; // 10^9

  00050	c7 45 d8 00 ca
	9a 3b		 mov	 DWORD PTR _formatter$[ebp+4], 1000000000 ; 3b9aca00H

; 188  :             const int digit_count_on_word = 9;

  00057	c7 45 dc 09 00
	00 00		 mov	 DWORD PTR _formatter$[ebp+8], 9

; 881  :             {

  0005e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$[ebp], OFFSET ??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 1108 :             formatter.Format(x_sign, x_abs, &writer);

  00065	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1109 :             return (writer.GetLength());

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _writer$[ebp+16]

; 1110 :         }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?ToStringP@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ToStringN@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
_TEXT	SEGMENT
_formatter$ = -44					; size = 24
_writer$ = -20						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringN@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringN, COMDAT

; 1096 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00003	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1096 :         {

  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00009	85 c9		 test	 ecx, ecx
  0000b	74 08		 je	 SHORT $LN5@ToStringN
  0000d	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00010	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00013	eb 02		 jmp	 SHORT $LN6@ToStringN
$LN5@ToStringN:
  00015	33 c0		 xor	 eax, eax
$LN6@ToStringN:

; 203  :             _eob = eob;

  00017	89 45 f8	 mov	 DWORD PTR _writer$[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  0001a	b8 4e 00 00 00	 mov	 eax, 78			; 0000004eH
  0001f	66 89 45 e0	 mov	 WORD PTR _formatter$[ebp+12], ax

; 205  :                 _precision = precision;

  00023	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00026	89 45 e4	 mov	 DWORD PTR _formatter$[ebp+16], eax

; 206  :                 _number_format_info = number_format_info;

  00029	8b 45 18	 mov	 eax, DWORD PTR _format_option$[ebp]
  0002c	89 45 e8	 mov	 DWORD PTR _formatter$[ebp+20], eax

; 1099 :             formatter.Format(x_sign, x_abs, &writer);

  0002f	8d 45 ec	 lea	 eax, DWORD PTR _writer$[ebp]
  00032	50		 push	 eax
  00033	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 201  :             _p = p;

  00036	89 4d f0	 mov	 DWORD PTR _writer$[ebp+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1099 :             formatter.Format(x_sign, x_abs, &writer);

  00039	ff 75 08	 push	 DWORD PTR _x_sign$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 202  :             _sob = sob;

  0003c	89 4d f4	 mov	 DWORD PTR _writer$[ebp+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1099 :             formatter.Format(x_sign, x_abs, &writer);

  0003f	8d 4d d4	 lea	 ecx, DWORD PTR _formatter$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 204  :             _written = 0;

  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp+16], 0

; 210  :         {

  00049	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 187  :             const __UNIT_TYPE _10n_base_number = 1000000000U; // 10^9

  00050	c7 45 d8 00 ca
	9a 3b		 mov	 DWORD PTR _formatter$[ebp+4], 1000000000 ; 3b9aca00H

; 188  :             const int digit_count_on_word = 9;

  00057	c7 45 dc 09 00
	00 00		 mov	 DWORD PTR _formatter$[ebp+8], 9

; 781  :             {

  0005e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$[ebp], OFFSET ??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 1099 :             formatter.Format(x_sign, x_abs, &writer);

  00065	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1100 :             return (writer.GetLength());

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _writer$[ebp+16]

; 1101 :         }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?ToStringN@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringN
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ToStringF@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
_TEXT	SEGMENT
_formatter$ = -44					; size = 24
_writer$ = -20						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringF@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringF, COMDAT

; 1088 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00003	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1088 :         {

  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00009	85 c9		 test	 ecx, ecx
  0000b	74 08		 je	 SHORT $LN5@ToStringF
  0000d	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00010	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00013	eb 02		 jmp	 SHORT $LN6@ToStringF
$LN5@ToStringF:
  00015	33 c0		 xor	 eax, eax
$LN6@ToStringF:

; 203  :             _eob = eob;

  00017	89 45 f8	 mov	 DWORD PTR _writer$[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  0001a	b8 46 00 00 00	 mov	 eax, 70			; 00000046H
  0001f	66 89 45 e0	 mov	 WORD PTR _formatter$[ebp+12], ax

; 205  :                 _precision = precision;

  00023	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00026	89 45 e4	 mov	 DWORD PTR _formatter$[ebp+16], eax

; 206  :                 _number_format_info = number_format_info;

  00029	8b 45 18	 mov	 eax, DWORD PTR _format_option$[ebp]
  0002c	89 45 e8	 mov	 DWORD PTR _formatter$[ebp+20], eax

; 1091 :             formatter.Format(x_sign, x_abs, &writer);

  0002f	8d 45 ec	 lea	 eax, DWORD PTR _writer$[ebp]
  00032	50		 push	 eax
  00033	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 201  :             _p = p;

  00036	89 4d f0	 mov	 DWORD PTR _writer$[ebp+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1091 :             formatter.Format(x_sign, x_abs, &writer);

  00039	ff 75 08	 push	 DWORD PTR _x_sign$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 202  :             _sob = sob;

  0003c	89 4d f4	 mov	 DWORD PTR _writer$[ebp+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1091 :             formatter.Format(x_sign, x_abs, &writer);

  0003f	8d 4d d4	 lea	 ecx, DWORD PTR _formatter$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 204  :             _written = 0;

  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp+16], 0

; 210  :         {

  00049	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 187  :             const __UNIT_TYPE _10n_base_number = 1000000000U; // 10^9

  00050	c7 45 d8 00 ca
	9a 3b		 mov	 DWORD PTR _formatter$[ebp+4], 1000000000 ; 3b9aca00H

; 188  :             const int digit_count_on_word = 9;

  00057	c7 45 dc 09 00
	00 00		 mov	 DWORD PTR _formatter$[ebp+8], 9

; 735  :             {

  0005e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$[ebp], OFFSET ??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 1091 :             formatter.Format(x_sign, x_abs, &writer);

  00065	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1092 :             return (writer.GetLength());

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _writer$[ebp+16]

; 1093 :         }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?ToStringF@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringF
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ToStringE@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
_TEXT	SEGMENT
_formatter$ = -44					; size = 24
_writer$ = -20						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringE@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringE, COMDAT

; 1080 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00003	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1080 :         {

  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00009	85 c9		 test	 ecx, ecx
  0000b	74 08		 je	 SHORT $LN5@ToStringE
  0000d	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00010	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00013	eb 02		 jmp	 SHORT $LN6@ToStringE
$LN5@ToStringE:
  00015	33 c0		 xor	 eax, eax
$LN6@ToStringE:

; 203  :             _eob = eob;

  00017	89 45 f8	 mov	 DWORD PTR _writer$[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  0001a	66 8b 45 10	 mov	 ax, WORD PTR _format_type$[ebp]
  0001e	66 89 45 e0	 mov	 WORD PTR _formatter$[ebp+12], ax

; 205  :                 _precision = precision;

  00022	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00025	89 45 e4	 mov	 DWORD PTR _formatter$[ebp+16], eax

; 206  :                 _number_format_info = number_format_info;

  00028	8b 45 18	 mov	 eax, DWORD PTR _format_option$[ebp]
  0002b	89 45 e8	 mov	 DWORD PTR _formatter$[ebp+20], eax

; 1083 :             formatter.Format(x_sign, x_abs, &writer);

  0002e	8d 45 ec	 lea	 eax, DWORD PTR _writer$[ebp]
  00031	50		 push	 eax
  00032	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 201  :             _p = p;

  00035	89 4d f0	 mov	 DWORD PTR _writer$[ebp+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1083 :             formatter.Format(x_sign, x_abs, &writer);

  00038	ff 75 08	 push	 DWORD PTR _x_sign$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 202  :             _sob = sob;

  0003b	89 4d f4	 mov	 DWORD PTR _writer$[ebp+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1083 :             formatter.Format(x_sign, x_abs, &writer);

  0003e	8d 4d d4	 lea	 ecx, DWORD PTR _formatter$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 204  :             _written = 0;

  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp+16], 0

; 210  :         {

  00048	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 187  :             const __UNIT_TYPE _10n_base_number = 1000000000U; // 10^9

  0004f	c7 45 d8 00 ca
	9a 3b		 mov	 DWORD PTR _formatter$[ebp+4], 1000000000 ; 3b9aca00H

; 188  :             const int digit_count_on_word = 9;

  00056	c7 45 dc 09 00
	00 00		 mov	 DWORD PTR _formatter$[ebp+8], 9

; 651  :             {

  0005d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$[ebp], OFFSET ??_7FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 1083 :             formatter.Format(x_sign, x_abs, &writer);

  00064	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1084 :             return (writer.GetLength());

  00069	8b 45 fc	 mov	 eax, DWORD PTR _writer$[ebp+16]

; 1085 :         }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?ToStringE@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ToStringD@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
_TEXT	SEGMENT
_formatter$ = -44					; size = 24
_writer$ = -20						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringD@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringD, COMDAT

; 1072 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00003	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1072 :         {

  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00009	85 c9		 test	 ecx, ecx
  0000b	74 08		 je	 SHORT $LN5@ToStringD
  0000d	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00010	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00013	eb 02		 jmp	 SHORT $LN6@ToStringD
$LN5@ToStringD:
  00015	33 c0		 xor	 eax, eax
$LN6@ToStringD:

; 203  :             _eob = eob;

  00017	89 45 f8	 mov	 DWORD PTR _writer$[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  0001a	b8 44 00 00 00	 mov	 eax, 68			; 00000044H
  0001f	66 89 45 e0	 mov	 WORD PTR _formatter$[ebp+12], ax

; 205  :                 _precision = precision;

  00023	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00026	89 45 e4	 mov	 DWORD PTR _formatter$[ebp+16], eax

; 206  :                 _number_format_info = number_format_info;

  00029	8b 45 18	 mov	 eax, DWORD PTR _format_option$[ebp]
  0002c	89 45 e8	 mov	 DWORD PTR _formatter$[ebp+20], eax

; 1075 :             formatter.Format(x_sign, x_abs, &writer);

  0002f	8d 45 ec	 lea	 eax, DWORD PTR _writer$[ebp]
  00032	50		 push	 eax
  00033	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 201  :             _p = p;

  00036	89 4d f0	 mov	 DWORD PTR _writer$[ebp+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1075 :             formatter.Format(x_sign, x_abs, &writer);

  00039	ff 75 08	 push	 DWORD PTR _x_sign$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 202  :             _sob = sob;

  0003c	89 4d f4	 mov	 DWORD PTR _writer$[ebp+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1075 :             formatter.Format(x_sign, x_abs, &writer);

  0003f	8d 4d d4	 lea	 ecx, DWORD PTR _formatter$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 204  :             _written = 0;

  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp+16], 0

; 210  :         {

  00049	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 187  :             const __UNIT_TYPE _10n_base_number = 1000000000U; // 10^9

  00050	c7 45 d8 00 ca
	9a 3b		 mov	 DWORD PTR _formatter$[ebp+4], 1000000000 ; 3b9aca00H

; 188  :             const int digit_count_on_word = 9;

  00057	c7 45 dc 09 00
	00 00		 mov	 DWORD PTR _formatter$[ebp+8], 9

; 614  :             {

  0005e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$[ebp], OFFSET ??_7FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 1075 :             formatter.Format(x_sign, x_abs, &writer);

  00065	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1076 :             return (writer.GetLength());

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _writer$[ebp+16]

; 1077 :         }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?ToStringD@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringD
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ToStringC@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
_TEXT	SEGMENT
_formatter$ = -44					; size = 24
_writer$ = -20						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringC@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringC, COMDAT

; 1064 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00003	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1064 :         {

  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00009	85 c9		 test	 ecx, ecx
  0000b	74 08		 je	 SHORT $LN5@ToStringC
  0000d	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00010	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00013	eb 02		 jmp	 SHORT $LN6@ToStringC
$LN5@ToStringC:
  00015	33 c0		 xor	 eax, eax
$LN6@ToStringC:

; 203  :             _eob = eob;

  00017	89 45 f8	 mov	 DWORD PTR _writer$[ebp+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 204  :                 _format_type = format_type;

  0001a	b8 43 00 00 00	 mov	 eax, 67			; 00000043H
  0001f	66 89 45 e0	 mov	 WORD PTR _formatter$[ebp+12], ax

; 205  :                 _precision = precision;

  00023	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00026	89 45 e4	 mov	 DWORD PTR _formatter$[ebp+16], eax

; 206  :                 _number_format_info = number_format_info;

  00029	8b 45 18	 mov	 eax, DWORD PTR _format_option$[ebp]
  0002c	89 45 e8	 mov	 DWORD PTR _formatter$[ebp+20], eax

; 1067 :             formatter.Format(x_sign, x_abs, &writer);

  0002f	8d 45 ec	 lea	 eax, DWORD PTR _writer$[ebp]
  00032	50		 push	 eax
  00033	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 201  :             _p = p;

  00036	89 4d f0	 mov	 DWORD PTR _writer$[ebp+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1067 :             formatter.Format(x_sign, x_abs, &writer);

  00039	ff 75 08	 push	 DWORD PTR _x_sign$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 202  :             _sob = sob;

  0003c	89 4d f4	 mov	 DWORD PTR _writer$[ebp+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 1067 :             formatter.Format(x_sign, x_abs, &writer);

  0003f	8d 4d d4	 lea	 ecx, DWORD PTR _formatter$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 204  :             _written = 0;

  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp+16], 0

; 210  :         {

  00049	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _writer$[ebp], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 187  :             const __UNIT_TYPE _10n_base_number = 1000000000U; // 10^9

  00050	c7 45 d8 00 ca
	9a 3b		 mov	 DWORD PTR _formatter$[ebp+4], 1000000000 ; 3b9aca00H

; 188  :             const int digit_count_on_word = 9;

  00057	c7 45 dc 09 00
	00 00		 mov	 DWORD PTR _formatter$[ebp+8], 9

; 404  :             {

  0005e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _formatter$[ebp], OFFSET ??_7FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 1067 :             formatter.Format(x_sign, x_abs, &writer);

  00065	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1068 :             return (writer.GetLength());

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _writer$[ebp+16]

; 1069 :         }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?ToStringC@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteSuffix, COMDAT
; _this$ = ecx

; 995  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 996  :                 if (x_sign >= 0)

  00003	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0000f	7c 37		 jl	 SHORT $LN6@WriteSuffi

; 997  :                 {
; 998  :                     switch (_number_format_info->Percent.PositivePattern)

  00011	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  00017	83 e8 01	 sub	 eax, 1
  0001a	74 3f		 je	 SHORT $LN13@WriteSuffi
  0001c	83 e8 01	 sub	 eax, 1
  0001f	74 20		 je	 SHORT $LN4@WriteSuffi
  00021	83 e8 01	 sub	 eax, 1
  00024	74 1b		 je	 SHORT $LN4@WriteSuffi
$LN12@WriteSuffi:

; 1057 :                         break;
; 1058 :                     }
; 1059 :                 }
; 1060 :             }

  00026	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
$LN28@WriteSuffi:
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	8b ce		 mov	 ecx, esi
  0002d	6a 20		 push	 32			; 00000020H
  0002f	ff 50 04	 call	 DWORD PTR [eax+4]
$LN26@WriteSuffi:
  00032	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00035	8b ce		 mov	 ecx, esi
  00037	8b 16		 mov	 edx, DWORD PTR [esi]
  00039	05 9e 01 00 00	 add	 eax, 414		; 0000019eH
  0003e	50		 push	 eax
  0003f	ff 12		 call	 DWORD PTR [edx]
$LN4@WriteSuffi:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
$LN6@WriteSuffi:

; 999  :                     {
; 1000 :                     case 0:
; 1001 :                     default:
; 1002 :                         writer->Write(L' ');
; 1003 :                         writer->Write(_number_format_info->PercentSymbol);
; 1004 :                         break;
; 1005 :                     case 1:
; 1006 :                         writer->Write(_number_format_info->PercentSymbol);
; 1007 :                         break;
; 1008 :                     case 2:
; 1009 :                         break;
; 1010 :                     case 3:
; 1011 :                         break;
; 1012 :                     }
; 1013 :                 }
; 1014 :                 else
; 1015 :                 {
; 1016 :                     switch (_number_format_info->Percent.NegativePattern)

  00048	8b 87 30 01 00
	00		 mov	 eax, DWORD PTR [edi+304]
  0004e	48		 dec	 eax
  0004f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00052	77 d2		 ja	 SHORT $LN12@WriteSuffi
  00054	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN30@WriteSuffi[eax*4]
$LN13@WriteSuffi:

; 1057 :                         break;
; 1058 :                     }
; 1059 :                 }
; 1060 :             }

  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0005e	8d 87 9e 01 00
	00		 lea	 eax, DWORD PTR [edi+414]
  00064	50		 push	 eax
  00065	8b 11		 mov	 edx, DWORD PTR [ecx]
  00067	ff 12		 call	 DWORD PTR [edx]
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
$LN16@WriteSuffi:
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00073	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  00079	50		 push	 eax
  0007a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007c	ff 12		 call	 DWORD PTR [edx]
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	5d		 pop	 ebp
  00082	c2 08 00	 ret	 8
$LN17@WriteSuffi:

; 1017 :                     {
; 1018 :                     case 0:
; 1019 :                     default:
; 1020 :                         writer->Write(L' ');
; 1021 :                         writer->Write(_number_format_info->PercentSymbol);
; 1022 :                         break;
; 1023 :                     case 1:
; 1024 :                         writer->Write(_number_format_info->PercentSymbol);
; 1025 :                         break;
; 1026 :                     case 2:
; 1027 :                         break;
; 1028 :                     case 3:
; 1029 :                         break;
; 1030 :                     case 4:
; 1031 :                         writer->Write(_number_format_info->NegativeSign);
; 1032 :                         break;
; 1033 :                     case 5:
; 1034 :                         writer->Write(_number_format_info->NegativeSign);

  00085	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00088	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  0008e	50		 push	 eax
  0008f	8b ce		 mov	 ecx, esi
  00091	8b 16		 mov	 edx, DWORD PTR [esi]
  00093	ff 12		 call	 DWORD PTR [edx]

; 1035 :                         writer->Write(_number_format_info->PercentSymbol);
; 1036 :                         break;

  00095	eb 9b		 jmp	 SHORT $LN26@WriteSuffi
$LN18@WriteSuffi:

; 1037 :                     case 6:
; 1038 :                         writer->Write(_number_format_info->PercentSymbol);

  00097	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  0009a	8d 87 9e 01 00
	00		 lea	 eax, DWORD PTR [edi+414]
  000a0	50		 push	 eax
  000a1	8b ce		 mov	 ecx, esi
  000a3	8b 16		 mov	 edx, DWORD PTR [esi]
  000a5	ff 12		 call	 DWORD PTR [edx]

; 1039 :                         writer->Write(_number_format_info->NegativeSign);

  000a7	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 1057 :                         break;
; 1058 :                     }
; 1059 :                 }
; 1060 :             }

  000aa	8b ce		 mov	 ecx, esi
  000ac	8b 16		 mov	 edx, DWORD PTR [esi]
  000ae	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  000b3	50		 push	 eax
  000b4	ff 12		 call	 DWORD PTR [edx]
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	5d		 pop	 ebp
  000ba	c2 08 00	 ret	 8
$LN20@WriteSuffi:

; 1040 :                         break;
; 1041 :                     case 7:
; 1042 :                         break;
; 1043 :                     case 8:
; 1044 :                         writer->Write(L' ');

  000bd	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  000c0	8b ce		 mov	 ecx, esi
  000c2	6a 20		 push	 32			; 00000020H
  000c4	8b 06		 mov	 eax, DWORD PTR [esi]
  000c6	ff 50 04	 call	 DWORD PTR [eax+4]

; 1045 :                         writer->Write(_number_format_info->PercentSymbol);

  000c9	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000cc	8b ce		 mov	 ecx, esi
  000ce	8b 16		 mov	 edx, DWORD PTR [esi]
  000d0	05 9e 01 00 00	 add	 eax, 414		; 0000019eH
  000d5	50		 push	 eax
  000d6	ff 12		 call	 DWORD PTR [edx]

; 1046 :                         writer->Write(_number_format_info->NegativeSign);

  000d8	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 1057 :                         break;
; 1058 :                     }
; 1059 :                 }
; 1060 :             }

  000db	8b ce		 mov	 ecx, esi
  000dd	8b 16		 mov	 edx, DWORD PTR [esi]
  000df	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  000e4	50		 push	 eax
  000e5	ff 12		 call	 DWORD PTR [edx]
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	5d		 pop	 ebp
  000eb	c2 08 00	 ret	 8
$LN23@WriteSuffi:

; 1047 :                         break;
; 1048 :                     case 9:
; 1049 :                         writer->Write(_number_format_info->NegativeSign);
; 1050 :                         break;
; 1051 :                     case 10:
; 1052 :                         break;
; 1053 :                     case 11:
; 1054 :                         writer->Write(_number_format_info->NegativeSign);

  000ee	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  000f1	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  000f7	50		 push	 eax
  000f8	8b ce		 mov	 ecx, esi
  000fa	8b 16		 mov	 edx, DWORD PTR [esi]
  000fc	ff 12		 call	 DWORD PTR [edx]

; 1055 :                         writer->Write(L' ');
; 1056 :                         writer->Write(_number_format_info->PercentSymbol);

  000fe	e9 26 ff ff ff	 jmp	 $LN28@WriteSuffi
  00103	90		 npad	 1
$LN30@WriteSuffi:

; 1057 :                         break;
; 1058 :                     }
; 1059 :                 }
; 1060 :             }

  00104	00 00 00 00	 DD	 $LN13@WriteSuffi
  00108	00 00 00 00	 DD	 $LN4@WriteSuffi
  0010c	00 00 00 00	 DD	 $LN4@WriteSuffi
  00110	00 00 00 00	 DD	 $LN16@WriteSuffi
  00114	00 00 00 00	 DD	 $LN17@WriteSuffi
  00118	00 00 00 00	 DD	 $LN18@WriteSuffi
  0011c	00 00 00 00	 DD	 $LN4@WriteSuffi
  00120	00 00 00 00	 DD	 $LN20@WriteSuffi
  00124	00 00 00 00	 DD	 $LN16@WriteSuffi
  00128	00 00 00 00	 DD	 $LN4@WriteSuffi
  0012c	00 00 00 00	 DD	 $LN23@WriteSuffi
?WriteSuffix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_t_writer$ = -112					; size = 44
_r_writer$ = -68					; size = 20
_root$ = -48						; size = 16
_r_reader$ = -32					; size = 12
_this$1$ = -20						; size = 4
_t_writer$6$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_t_writer$3$ = 8					; size = 4
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatNumberSequence, COMDAT
; _this$ = ecx

; 977  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 978  :                 ResourceHolderUINT root;

  0002d	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00030	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 143  :             _start = p;

  0003c	8b 7d 08	 mov	 edi, DWORD PTR _number_sequence_str$[ebp]

; 144  :             _p = p + lstrlenW(p) - 1;

  0003f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__lstrlenW@4
  00045	57		 push	 edi

; 52   :             _p = p;

  00046	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _r_reader$[ebp+4], 0

; 142  :         {

  0004d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _r_reader$[ebp], OFFSET ??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@

; 143  :             _start = p;

  00054	89 7d e8	 mov	 DWORD PTR _r_reader$[ebp+8], edi

; 144  :             _p = p + lstrlenW(p) - 1;

  00057	ff d6		 call	 esi
  00059	48		 dec	 eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 980  :                 size_t work_buf_len = lstrlenW(number_sequence_str) * 2 + 1 + _precision + 1;

  0005a	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 144  :             _p = p + lstrlenW(p) - 1;

  0005b	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  0005e	89 45 e4	 mov	 DWORD PTR _r_reader$[ebp+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 980  :                 size_t work_buf_len = lstrlenW(number_sequence_str) * 2 + 1 + _precision + 1;

  00061	ff d6		 call	 esi
  00063	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]

; 981  :                 wchar_t* work_buf = root.AllocateString(work_buf_len);

  00066	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00069	03 c0		 add	 eax, eax
  0006b	83 c6 02	 add	 esi, 2
  0006e	03 f0		 add	 esi, eax
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString

; 982  :                 ReverseStringWriter r_writer(work_buf, work_buf_len);

  00076	56		 push	 esi
  00077	50		 push	 eax
  00078	8d 4d bc	 lea	 ecx, DWORD PTR _r_writer$[ebp]
  0007b	e8 00 00 00 00	 call	 ??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter

; 983  :                 ThousandSeparatedStringWriter t_writer(&r_writer, _format_type, _number_format_info);

  00080	ff 73 14	 push	 DWORD PTR [ebx+20]
  00083	0f b7 43 0c	 movzx	 eax, WORD PTR [ebx+12]
  00087	8d 4d 90	 lea	 ecx, DWORD PTR _t_writer$[ebp]
  0008a	50		 push	 eax
  0008b	8d 45 bc	 lea	 eax, DWORD PTR _r_writer$[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter
  00094	8b 45 b8	 mov	 eax, DWORD PTR _t_writer$[ebp+40]
  00097	8b 7d a4	 mov	 edi, DWORD PTR _t_writer$[ebp+20]
  0009a	8b 5d b4	 mov	 ebx, DWORD PTR _t_writer$[ebp+36]
  0009d	89 45 08	 mov	 DWORD PTR _t_writer$3$[ebp], eax
  000a0	8b 45 b0	 mov	 eax, DWORD PTR _t_writer$[ebp+32]
  000a3	89 45 f0	 mov	 DWORD PTR _t_writer$6$[ebp], eax
$LL2@FormatNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 149  :             if (_p < _start)

  000a6	8b 45 e4	 mov	 eax, DWORD PTR _r_reader$[ebp+4]
  000a9	3b 45 e8	 cmp	 eax, DWORD PTR _r_reader$[ebp+8]
  000ac	72 7f		 jb	 SHORT $LN36@FormatNumb

; 150  :                 return (L'\0');
; 151  :             return (*_p);

  000ae	0f b7 00	 movzx	 eax, WORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 984  :                 while (r_reader.PeekChar() != L'\0')

  000b1	66 85 c0	 test	 ax, ax
  000b4	74 77		 je	 SHORT $LN36@FormatNumb
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 57   :             wchar_t c = PeekChar();

  000b6	8b 45 e0	 mov	 eax, DWORD PTR _r_reader$[ebp]
  000b9	8d 4d e0	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000bc	ff 10		 call	 DWORD PTR [eax]
  000be	0f b7 f0	 movzx	 esi, ax

; 58   :             Progress();

  000c1	8d 4d e0	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000c4	8b 45 e0	 mov	 eax, DWORD PTR _r_reader$[ebp]
  000c7	ff 50 04	 call	 DWORD PTR [eax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 137  :                 if (_is_supported_thousand && c >= L'0' && c <= L'9')

  000ca	f6 45 a8 01	 test	 BYTE PTR _t_writer$[ebp+24], 1
  000ce	74 50		 je	 SHORT $LN17@FormatNumb
  000d0	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  000d3	66 83 f8 09	 cmp	 ax, 9
  000d7	77 47		 ja	 SHORT $LN17@FormatNumb

; 138  :                 {
; 139  :                     // 桁区切りをサポートする場合
; 140  :                     if (_current_group_size > 0 && _current_group_index >= _current_group_size)

  000d9	85 db		 test	 ebx, ebx
  000db	7e 36		 jle	 SHORT $LN19@FormatNumb
  000dd	39 5d 08	 cmp	 DWORD PTR _t_writer$3$[ebp], ebx
  000e0	7c 31		 jl	 SHORT $LN19@FormatNumb

; 141  :                     {
; 142  :                         // 現在のグループ幅が 0 ではなく、かつ既に出力した文字数がグループ幅に達した場合
; 143  : 
; 144  :                         // グループ区切り文字を出力してから与えられた文字を出力する
; 145  :                         _native_writer->Write(_group_separator);

  000e2	8b 07		 mov	 eax, DWORD PTR [edi]
  000e4	8b cf		 mov	 ecx, edi
  000e6	ff 75 ac	 push	 DWORD PTR _t_writer$[ebp+28]
  000e9	ff 10		 call	 DWORD PTR [eax]

; 146  :                         _native_writer->Write(c);

  000eb	8b 07		 mov	 eax, DWORD PTR [edi]
  000ed	8b cf		 mov	 ecx, edi
  000ef	56		 push	 esi
  000f0	ff 50 04	 call	 DWORD PTR [eax+4]

; 147  :                         _current_group_index = 1;
; 148  : 
; 149  :                         // 次のグループが存在すればそのグループに移行する
; 150  :                         if (_current_group[1] != L'\0')

  000f3	8b 45 f0	 mov	 eax, DWORD PTR _t_writer$6$[ebp]
  000f6	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _t_writer$3$[ebp], 1
  000fd	66 83 78 02 00	 cmp	 WORD PTR [eax+2], 0
  00102	74 a2		 je	 SHORT $LL2@FormatNumb

; 151  :                         {
; 152  :                             _current_group += 1;
; 153  :                             _current_group_size = _current_group[0] - L'0';

  00104	0f b7 58 02	 movzx	 ebx, WORD PTR [eax+2]
  00108	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
  0010b	89 4d f0	 mov	 DWORD PTR _t_writer$6$[ebp], ecx
  0010e	83 eb 30	 sub	 ebx, 48			; 00000030H

; 154  :                         }
; 155  :                     }
; 156  :                     else

  00111	eb 93		 jmp	 SHORT $LL2@FormatNumb
$LN19@FormatNumb:

; 157  :                     {
; 158  :                         // 現在のグループの幅が 0 であるかあるいは出力した文字数がグループ幅に達していない場合
; 159  :                         _native_writer->Write(c);

  00113	8b 07		 mov	 eax, DWORD PTR [edi]
  00115	8b cf		 mov	 ecx, edi
  00117	56		 push	 esi
  00118	ff 50 04	 call	 DWORD PTR [eax+4]

; 160  :                         _current_group_index += 1;

  0011b	ff 45 08	 inc	 DWORD PTR _t_writer$3$[ebp]

; 161  :                     }
; 162  :                 }
; 163  :                 else

  0011e	eb 86		 jmp	 SHORT $LL2@FormatNumb
$LN17@FormatNumb:

; 164  :                 {
; 165  :                     // 桁区切りをサポートしない場合
; 166  : 
; 167  :                     _native_writer->Write(c);

  00120	8b 07		 mov	 eax, DWORD PTR [edi]
  00122	8b cf		 mov	 ecx, edi
  00124	56		 push	 esi
  00125	ff 50 04	 call	 DWORD PTR [eax+4]

; 985  :                     t_writer.Write(r_reader.ReadChar());

  00128	e9 79 ff ff ff	 jmp	 $LL2@FormatNumb
$LN36@FormatNumb:

; 986  :                 writer->Write(t_writer.GetString());

  0012d	8b 5d 0c	 mov	 ebx, DWORD PTR _writer$[ebp]

; 179  :                 return (_native_writer->GetString());

  00130	8b cf		 mov	 ecx, edi

; 986  :                 writer->Write(t_writer.GetString());

  00132	8b 03		 mov	 eax, DWORD PTR [ebx]
  00134	8b 30		 mov	 esi, DWORD PTR [eax]

; 179  :                 return (_native_writer->GetString());

  00136	8b 07		 mov	 eax, DWORD PTR [edi]
  00138	ff 50 08	 call	 DWORD PTR [eax+8]

; 986  :                 writer->Write(t_writer.GetString());

  0013b	50		 push	 eax
  0013c	8b cb		 mov	 ecx, ebx
  0013e	ff d6		 call	 esi

; 987  :                 if (_precision > 0)

  00140	8b 75 ec	 mov	 esi, DWORD PTR _this$1$[ebp]
  00143	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00147	7e 25		 jle	 SHORT $LN27@FormatNumb

; 988  :                 {
; 989  :                     writer->Write(_number_format_info->Currency.DecimalSeparator);

  00149	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014b	8b cb		 mov	 ecx, ebx
  0014d	8b 10		 mov	 edx, DWORD PTR [eax]
  0014f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00152	83 c0 04	 add	 eax, 4
  00155	50		 push	 eax
  00156	ff d2		 call	 edx
  00158	8b 76 10	 mov	 esi, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  0015b	85 f6		 test	 esi, esi
  0015d	74 0f		 je	 SHORT $LN27@FormatNumb
  0015f	90		 npad	 1
$LL26@FormatNumb:

; 228  :             {
; 229  :                 Write(c);

  00160	8b 03		 mov	 eax, DWORD PTR [ebx]
  00162	8b cb		 mov	 ecx, ebx
  00164	6a 30		 push	 48			; 00000030H
  00166	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00169	83 ee 01	 sub	 esi, 1
  0016c	75 f2		 jne	 SHORT $LL26@FormatNumb
$LN27@FormatNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 992  :             }

  0016e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00175	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00178	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0017d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00180	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00187	59		 pop	 ecx
  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	5b		 pop	 ebx
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatNumberSequence
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WritePrefix, COMDAT
; _this$ = ecx

; 909  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  :                 if (x_sign >= 0)

  00003	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0000f	7c 49		 jl	 SHORT $LN6@WritePrefi

; 911  :                 {
; 912  :                     switch (_number_format_info->Percent.PositivePattern)

  00011	8b 87 34 01 00
	00		 mov	 eax, DWORD PTR [edi+308]
  00017	83 e8 02	 sub	 eax, 2
  0001a	74 29		 je	 SHORT $LN10@WritePrefi
  0001c	83 e8 01	 sub	 eax, 1
  0001f	0f 85 04 01 00
	00		 jne	 $LN23@WritePrefi
$LN21@WritePrefi:

; 969  :                         break;
; 970  :                     case 11:
; 971  :                         break;
; 972  :                     }
; 973  :                 }
; 974  :             }

  00025	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00028	8d 87 9e 01 00
	00		 lea	 eax, DWORD PTR [edi+414]
  0002e	50		 push	 eax
  0002f	8b ce		 mov	 ecx, esi
  00031	8b 16		 mov	 edx, DWORD PTR [esi]
  00033	ff 12		 call	 DWORD PTR [edx]
  00035	8b 06		 mov	 eax, DWORD PTR [esi]
  00037	8b ce		 mov	 ecx, esi
  00039	6a 20		 push	 32			; 00000020H
  0003b	ff 50 04	 call	 DWORD PTR [eax+4]
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	5d		 pop	 ebp
  00042	c2 08 00	 ret	 8
$LN10@WritePrefi:
  00045	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00048	8d 87 9e 01 00
	00		 lea	 eax, DWORD PTR [edi+414]
  0004e	50		 push	 eax
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	ff 12		 call	 DWORD PTR [edx]
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
$LN6@WritePrefi:

; 913  :                     {
; 914  :                     case 0:
; 915  :                     default:
; 916  :                         break;
; 917  :                     case 1:
; 918  :                         break;
; 919  :                     case 2:
; 920  :                         writer->Write(_number_format_info->PercentSymbol);
; 921  :                         break;
; 922  :                     case 3:
; 923  :                         writer->Write(_number_format_info->PercentSymbol);
; 924  :                         writer->Write(L' ');
; 925  :                         break;
; 926  :                     }
; 927  :                 }
; 928  :                 else
; 929  :                 {
; 930  :                     switch (_number_format_info->Percent.NegativePattern)

  0005a	8b 87 30 01 00
	00		 mov	 eax, DWORD PTR [edi+304]
  00060	48		 dec	 eax
  00061	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00064	0f 87 b1 00 00
	00		 ja	 $LN12@WritePrefi
  0006a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN28@WritePrefi[eax*4]
$LN14@WritePrefi:

; 931  :                     {
; 932  :                     case 0:
; 933  :                     default:
; 934  :                         writer->Write(_number_format_info->NegativeSign);
; 935  :                         break;
; 936  :                     case 1:
; 937  :                         writer->Write(_number_format_info->NegativeSign);
; 938  :                         break;
; 939  :                     case 2:
; 940  :                         writer->Write(_number_format_info->NegativeSign);

  00071	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00074	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  0007a	50		 push	 eax
  0007b	8b ce		 mov	 ecx, esi
  0007d	8b 16		 mov	 edx, DWORD PTR [esi]
  0007f	ff 12		 call	 DWORD PTR [edx]

; 941  :                         writer->Write(_number_format_info->PercentSymbol);

  00081	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00084	8b ce		 mov	 ecx, esi
  00086	8b 16		 mov	 edx, DWORD PTR [esi]
  00088	05 9e 01 00 00	 add	 eax, 414		; 0000019eH

; 969  :                         break;
; 970  :                     case 11:
; 971  :                         break;
; 972  :                     }
; 973  :                 }
; 974  :             }

  0008d	50		 push	 eax
  0008e	ff 12		 call	 DWORD PTR [edx]
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
$LN15@WritePrefi:

; 942  :                         break;
; 943  :                     case 3:
; 944  :                         writer->Write(_number_format_info->PercentSymbol);

  00097	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  0009a	8d 87 9e 01 00
	00		 lea	 eax, DWORD PTR [edi+414]
  000a0	50		 push	 eax
  000a1	8b ce		 mov	 ecx, esi
  000a3	8b 16		 mov	 edx, DWORD PTR [esi]
  000a5	ff 12		 call	 DWORD PTR [edx]

; 945  :                         writer->Write(_number_format_info->NegativeSign);

  000a7	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000aa	8b ce		 mov	 ecx, esi
  000ac	8b 16		 mov	 edx, DWORD PTR [esi]
  000ae	05 5a 01 00 00	 add	 eax, 346		; 0000015aH

; 969  :                         break;
; 970  :                     case 11:
; 971  :                         break;
; 972  :                     }
; 973  :                 }
; 974  :             }

  000b3	50		 push	 eax
  000b4	ff 12		 call	 DWORD PTR [edx]
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	5d		 pop	 ebp
  000ba	c2 08 00	 ret	 8
$LN19@WritePrefi:

; 946  :                         break;
; 947  :                     case 4:
; 948  :                         writer->Write(_number_format_info->PercentSymbol);
; 949  :                         break;
; 950  :                     case 5:
; 951  :                         break;
; 952  :                     case 6:
; 953  :                         break;
; 954  :                     case 7:
; 955  :                         writer->Write(_number_format_info->NegativeSign);

  000bd	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  000c0	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  000c6	50		 push	 eax
  000c7	8b ce		 mov	 ecx, esi
  000c9	8b 16		 mov	 edx, DWORD PTR [esi]
  000cb	ff 12		 call	 DWORD PTR [edx]

; 956  :                         writer->Write(_number_format_info->PercentSymbol);

  000cd	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000d0	8b ce		 mov	 ecx, esi
  000d2	8b 16		 mov	 edx, DWORD PTR [esi]
  000d4	05 9e 01 00 00	 add	 eax, 414		; 0000019eH
  000d9	50		 push	 eax
  000da	ff 12		 call	 DWORD PTR [edx]

; 957  :                         writer->Write(L' ');

  000dc	8b 06		 mov	 eax, DWORD PTR [esi]
  000de	8b ce		 mov	 ecx, esi
  000e0	6a 20		 push	 32			; 00000020H
  000e2	ff 50 04	 call	 DWORD PTR [eax+4]
  000e5	5f		 pop	 edi

; 969  :                         break;
; 970  :                     case 11:
; 971  :                         break;
; 972  :                     }
; 973  :                 }
; 974  :             }

  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx
  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
$LN22@WritePrefi:

; 958  :                         break;
; 959  :                     case 8:
; 960  :                         break;
; 961  :                     case 9:
; 962  :                         writer->Write(_number_format_info->PercentSymbol);
; 963  :                         writer->Write(L' ');
; 964  :                         break;
; 965  :                     case 10:
; 966  :                         writer->Write(_number_format_info->PercentSymbol);

  000ec	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  000ef	8d 87 9e 01 00
	00		 lea	 eax, DWORD PTR [edi+414]
  000f5	50		 push	 eax
  000f6	8b ce		 mov	 ecx, esi
  000f8	8b 16		 mov	 edx, DWORD PTR [esi]
  000fa	ff 12		 call	 DWORD PTR [edx]

; 967  :                         writer->Write(L' ');

  000fc	8b 06		 mov	 eax, DWORD PTR [esi]
  000fe	8b ce		 mov	 ecx, esi
  00100	6a 20		 push	 32			; 00000020H
  00102	ff 50 04	 call	 DWORD PTR [eax+4]

; 968  :                         writer->Write(_number_format_info->NegativeSign);

  00105	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00108	8b ce		 mov	 ecx, esi
  0010a	8b 16		 mov	 edx, DWORD PTR [esi]
  0010c	05 5a 01 00 00	 add	 eax, 346		; 0000015aH

; 969  :                         break;
; 970  :                     case 11:
; 971  :                         break;
; 972  :                     }
; 973  :                 }
; 974  :             }

  00111	50		 push	 eax
  00112	ff 12		 call	 DWORD PTR [edx]
  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	5b		 pop	 ebx
  00117	5d		 pop	 ebp
  00118	c2 08 00	 ret	 8
$LN12@WritePrefi:
  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0011e	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  00124	50		 push	 eax
  00125	8b 11		 mov	 edx, DWORD PTR [ecx]
  00127	ff 12		 call	 DWORD PTR [edx]
$LN23@WritePrefi:
  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	5d		 pop	 ebp
  0012d	c2 08 00	 ret	 8
$LN28@WritePrefi:
  00130	00 00 00 00	 DD	 $LN12@WritePrefi
  00134	00 00 00 00	 DD	 $LN14@WritePrefi
  00138	00 00 00 00	 DD	 $LN15@WritePrefi
  0013c	00 00 00 00	 DD	 $LN10@WritePrefi
  00140	00 00 00 00	 DD	 $LN23@WritePrefi
  00144	00 00 00 00	 DD	 $LN23@WritePrefi
  00148	00 00 00 00	 DD	 $LN19@WritePrefi
  0014c	00 00 00 00	 DD	 $LN23@WritePrefi
  00150	00 00 00 00	 DD	 $LN21@WritePrefi
  00154	00 00 00 00	 DD	 $LN22@WritePrefi
  00158	00 00 00 00	 DD	 $LN23@WritePrefi
?WritePrefix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WritePrefix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
_TEXT	SEGMENT
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_x_abs$ = 8						; size = 4
_writer$ = 12						; size = 4
?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatInternally, COMDAT
; _this$ = ecx

; 901  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 902  :                 ResourceHolderUINT root;

  00029	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0002c	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 903  :                 NUMBER_HEADER* x2_abs = PMC_Multiply_X_I_Imp(x_abs, 100);

  00038	6a 64		 push	 100			; 00000064H
  0003a	ff 75 08	 push	 DWORD PTR _x_abs$[ebp]
  0003d	e8 00 00 00 00	 call	 ?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
  00042	83 c4 08	 add	 esp, 8

; 904  :                 root.HookNumber(x2_abs);

  00045	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00048	8b f0		 mov	 esi, eax
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 905  :                 Formatter::FormatInternally(x2_abs, writer);

  00050	ff 75 0c	 push	 DWORD PTR _writer$[ebp]
  00053	8b cf		 mov	 ecx, edi
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 ?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally

; 906  :             }

  0005b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00062	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00065	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatInternally
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteZeroValue, COMDAT
; _this$ = ecx

; 891  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 892  :                 writer->Write(L'0');

  00004	8b 75 08	 mov	 esi, DWORD PTR _writer$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	6a 30		 push	 48			; 00000030H
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 50 04	 call	 DWORD PTR [eax+4]

; 893  :                 if (_precision > 0)

  00013	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00017	7e 25		 jle	 SHORT $LN6@WriteZeroV

; 894  :                 {
; 895  :                     writer->Write(_number_format_info->Currency.DecimalSeparator);

  00019	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001c	8b ce		 mov	 ecx, esi
  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	ff 12		 call	 DWORD PTR [edx]
  00026	8b 7f 10	 mov	 edi, DWORD PTR [edi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  00029	85 ff		 test	 edi, edi
  0002b	74 11		 je	 SHORT $LN6@WriteZeroV
  0002d	0f 1f 00	 npad	 3
$LL5@WriteZeroV:

; 228  :             {
; 229  :                 Write(c);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b ce		 mov	 ecx, esi
  00034	6a 30		 push	 48			; 00000030H
  00036	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00039	83 ef 01	 sub	 edi, 1
  0003c	75 f2		 jne	 SHORT $LL5@WriteZeroV
$LN6@WriteZeroV:
  0003e	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 898  :             }

  0003f	5e		 pop	 esi
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
?GetDefaultPrecisionValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 887  :                 return (_number_format_info->Currency.DecimalDigits);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 888  :             }

  00005	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_precision$ = 8						; size = 4
_number_format_info$ = 12				; size = 4
??0FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatterTypeP, COMDAT
; _this$ = ecx

; 881  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  :                 _format_type = format_type;

  00003	b8 50 00 00 00	 mov	 eax, 80			; 00000050H
  00008	c7 41 04 00 ca
	9a 3b		 mov	 DWORD PTR [ecx+4], 1000000000 ; 3b9aca00H
  0000f	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 205  :                 _precision = precision;

  00013	8b 45 08	 mov	 eax, DWORD PTR _precision$[ebp]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 206  :                 _number_format_info = number_format_info;

  00019	8b 45 0c	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001c	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 882  :             }

  0001f	8b c1		 mov	 eax, ecx

; 188  :             const int digit_count_on_word = 9;

  00021	c7 41 08 09 00
	00 00		 mov	 DWORD PTR [ecx+8], 9

; 881  :             {

  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 882  :             }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
??0FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatterTypeP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteSuffix, COMDAT
; _this$ = ecx

; 847  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 848  :                 if (x_sign >= 0)

  00003	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	7d 56		 jge	 SHORT $LN2@WriteSuffi

; 849  :                 {
; 850  :                 }
; 851  :                 else
; 852  :                 {
; 853  :                     switch (_number_format_info->Currency.NegativePattern)

  0000c	56		 push	 esi
  0000d	8b 77 14	 mov	 esi, DWORD PTR [edi+20]
  00010	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00013	83 e8 00	 sub	 eax, 0
  00016	74 3f		 je	 SHORT $LN6@WriteSuffi
  00018	83 e8 03	 sub	 eax, 3
  0001b	74 26		 je	 SHORT $LN9@WriteSuffi
  0001d	83 e8 01	 sub	 eax, 1
  00020	75 3f		 jne	 SHORT $LN12@WriteSuffi

; 865  :                         break;
; 866  :                     case 4:
; 867  :                         writer->Write(L' ');

  00022	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00025	8b ce		 mov	 ecx, esi
  00027	6a 20		 push	 32			; 00000020H
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	ff 50 04	 call	 DWORD PTR [eax+4]

; 868  :                         writer->Write(_number_format_info->NegativeSign);

  0002e	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00031	8b ce		 mov	 ecx, esi
  00033	8b 16		 mov	 edx, DWORD PTR [esi]
  00035	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  0003a	50		 push	 eax
  0003b	ff 12		 call	 DWORD PTR [edx]
  0003d	5e		 pop	 esi
  0003e	5f		 pop	 edi

; 869  :                         break;
; 870  :                     }
; 871  :                 }
; 872  :             }

  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
$LN9@WriteSuffi:

; 857  :                         break;
; 858  :                     case 1:
; 859  :                     default:
; 860  :                         break;
; 861  :                     case 2:
; 862  :                         break;
; 863  :                     case 3:
; 864  :                         writer->Write(_number_format_info->NegativeSign);

  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00046	8d 86 5a 01 00
	00		 lea	 eax, DWORD PTR [esi+346]
  0004c	50		 push	 eax
  0004d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004f	ff 12		 call	 DWORD PTR [edx]
  00051	5e		 pop	 esi
  00052	5f		 pop	 edi

; 869  :                         break;
; 870  :                     }
; 871  :                 }
; 872  :             }

  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN6@WriteSuffi:

; 854  :                     {
; 855  :                     case 0:
; 856  :                         writer->Write(L')');

  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0005a	6a 29		 push	 41			; 00000029H
  0005c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005e	ff 50 04	 call	 DWORD PTR [eax+4]
$LN12@WriteSuffi:
  00061	5e		 pop	 esi
$LN2@WriteSuffi:
  00062	5f		 pop	 edi

; 869  :                         break;
; 870  :                     }
; 871  :                 }
; 872  :             }

  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?WriteSuffix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_t_writer$ = -112					; size = 44
_r_writer$ = -68					; size = 20
_root$ = -48						; size = 16
_r_reader$ = -32					; size = 12
_this$1$ = -20						; size = 4
_t_writer$6$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_t_writer$3$ = 8					; size = 4
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatNumberSequence, COMDAT
; _this$ = ecx

; 829  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 830  :                 ResourceHolderUINT root;

  0002d	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00030	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 143  :             _start = p;

  0003c	8b 7d 08	 mov	 edi, DWORD PTR _number_sequence_str$[ebp]

; 144  :             _p = p + lstrlenW(p) - 1;

  0003f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__lstrlenW@4
  00045	57		 push	 edi

; 52   :             _p = p;

  00046	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _r_reader$[ebp+4], 0

; 142  :         {

  0004d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _r_reader$[ebp], OFFSET ??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@

; 143  :             _start = p;

  00054	89 7d e8	 mov	 DWORD PTR _r_reader$[ebp+8], edi

; 144  :             _p = p + lstrlenW(p) - 1;

  00057	ff d6		 call	 esi
  00059	48		 dec	 eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 832  :                 size_t work_buf_len = lstrlenW(number_sequence_str) * 2 + 1 + _precision + 1;

  0005a	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 144  :             _p = p + lstrlenW(p) - 1;

  0005b	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  0005e	89 45 e4	 mov	 DWORD PTR _r_reader$[ebp+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 832  :                 size_t work_buf_len = lstrlenW(number_sequence_str) * 2 + 1 + _precision + 1;

  00061	ff d6		 call	 esi
  00063	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]

; 833  :                 wchar_t* work_buf = root.AllocateString(work_buf_len);

  00066	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00069	03 c0		 add	 eax, eax
  0006b	83 c6 02	 add	 esi, 2
  0006e	03 f0		 add	 esi, eax
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString

; 834  :                 ReverseStringWriter r_writer(work_buf, work_buf_len);

  00076	56		 push	 esi
  00077	50		 push	 eax
  00078	8d 4d bc	 lea	 ecx, DWORD PTR _r_writer$[ebp]
  0007b	e8 00 00 00 00	 call	 ??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter

; 835  :                 ThousandSeparatedStringWriter t_writer(&r_writer, _format_type, _number_format_info);

  00080	ff 73 14	 push	 DWORD PTR [ebx+20]
  00083	0f b7 43 0c	 movzx	 eax, WORD PTR [ebx+12]
  00087	8d 4d 90	 lea	 ecx, DWORD PTR _t_writer$[ebp]
  0008a	50		 push	 eax
  0008b	8d 45 bc	 lea	 eax, DWORD PTR _r_writer$[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter
  00094	8b 45 b8	 mov	 eax, DWORD PTR _t_writer$[ebp+40]
  00097	8b 7d a4	 mov	 edi, DWORD PTR _t_writer$[ebp+20]
  0009a	8b 5d b4	 mov	 ebx, DWORD PTR _t_writer$[ebp+36]
  0009d	89 45 08	 mov	 DWORD PTR _t_writer$3$[ebp], eax
  000a0	8b 45 b0	 mov	 eax, DWORD PTR _t_writer$[ebp+32]
  000a3	89 45 f0	 mov	 DWORD PTR _t_writer$6$[ebp], eax
$LL2@FormatNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 149  :             if (_p < _start)

  000a6	8b 45 e4	 mov	 eax, DWORD PTR _r_reader$[ebp+4]
  000a9	3b 45 e8	 cmp	 eax, DWORD PTR _r_reader$[ebp+8]
  000ac	72 7f		 jb	 SHORT $LN36@FormatNumb

; 150  :                 return (L'\0');
; 151  :             return (*_p);

  000ae	0f b7 00	 movzx	 eax, WORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 836  :                 while (r_reader.PeekChar() != L'\0')

  000b1	66 85 c0	 test	 ax, ax
  000b4	74 77		 je	 SHORT $LN36@FormatNumb
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 57   :             wchar_t c = PeekChar();

  000b6	8b 45 e0	 mov	 eax, DWORD PTR _r_reader$[ebp]
  000b9	8d 4d e0	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000bc	ff 10		 call	 DWORD PTR [eax]
  000be	0f b7 f0	 movzx	 esi, ax

; 58   :             Progress();

  000c1	8d 4d e0	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000c4	8b 45 e0	 mov	 eax, DWORD PTR _r_reader$[ebp]
  000c7	ff 50 04	 call	 DWORD PTR [eax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 137  :                 if (_is_supported_thousand && c >= L'0' && c <= L'9')

  000ca	f6 45 a8 01	 test	 BYTE PTR _t_writer$[ebp+24], 1
  000ce	74 50		 je	 SHORT $LN17@FormatNumb
  000d0	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  000d3	66 83 f8 09	 cmp	 ax, 9
  000d7	77 47		 ja	 SHORT $LN17@FormatNumb

; 138  :                 {
; 139  :                     // 桁区切りをサポートする場合
; 140  :                     if (_current_group_size > 0 && _current_group_index >= _current_group_size)

  000d9	85 db		 test	 ebx, ebx
  000db	7e 36		 jle	 SHORT $LN19@FormatNumb
  000dd	39 5d 08	 cmp	 DWORD PTR _t_writer$3$[ebp], ebx
  000e0	7c 31		 jl	 SHORT $LN19@FormatNumb

; 141  :                     {
; 142  :                         // 現在のグループ幅が 0 ではなく、かつ既に出力した文字数がグループ幅に達した場合
; 143  : 
; 144  :                         // グループ区切り文字を出力してから与えられた文字を出力する
; 145  :                         _native_writer->Write(_group_separator);

  000e2	8b 07		 mov	 eax, DWORD PTR [edi]
  000e4	8b cf		 mov	 ecx, edi
  000e6	ff 75 ac	 push	 DWORD PTR _t_writer$[ebp+28]
  000e9	ff 10		 call	 DWORD PTR [eax]

; 146  :                         _native_writer->Write(c);

  000eb	8b 07		 mov	 eax, DWORD PTR [edi]
  000ed	8b cf		 mov	 ecx, edi
  000ef	56		 push	 esi
  000f0	ff 50 04	 call	 DWORD PTR [eax+4]

; 147  :                         _current_group_index = 1;
; 148  : 
; 149  :                         // 次のグループが存在すればそのグループに移行する
; 150  :                         if (_current_group[1] != L'\0')

  000f3	8b 45 f0	 mov	 eax, DWORD PTR _t_writer$6$[ebp]
  000f6	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _t_writer$3$[ebp], 1
  000fd	66 83 78 02 00	 cmp	 WORD PTR [eax+2], 0
  00102	74 a2		 je	 SHORT $LL2@FormatNumb

; 151  :                         {
; 152  :                             _current_group += 1;
; 153  :                             _current_group_size = _current_group[0] - L'0';

  00104	0f b7 58 02	 movzx	 ebx, WORD PTR [eax+2]
  00108	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
  0010b	89 4d f0	 mov	 DWORD PTR _t_writer$6$[ebp], ecx
  0010e	83 eb 30	 sub	 ebx, 48			; 00000030H

; 154  :                         }
; 155  :                     }
; 156  :                     else

  00111	eb 93		 jmp	 SHORT $LL2@FormatNumb
$LN19@FormatNumb:

; 157  :                     {
; 158  :                         // 現在のグループの幅が 0 であるかあるいは出力した文字数がグループ幅に達していない場合
; 159  :                         _native_writer->Write(c);

  00113	8b 07		 mov	 eax, DWORD PTR [edi]
  00115	8b cf		 mov	 ecx, edi
  00117	56		 push	 esi
  00118	ff 50 04	 call	 DWORD PTR [eax+4]

; 160  :                         _current_group_index += 1;

  0011b	ff 45 08	 inc	 DWORD PTR _t_writer$3$[ebp]

; 161  :                     }
; 162  :                 }
; 163  :                 else

  0011e	eb 86		 jmp	 SHORT $LL2@FormatNumb
$LN17@FormatNumb:

; 164  :                 {
; 165  :                     // 桁区切りをサポートしない場合
; 166  : 
; 167  :                     _native_writer->Write(c);

  00120	8b 07		 mov	 eax, DWORD PTR [edi]
  00122	8b cf		 mov	 ecx, edi
  00124	56		 push	 esi
  00125	ff 50 04	 call	 DWORD PTR [eax+4]

; 837  :                     t_writer.Write(r_reader.ReadChar());

  00128	e9 79 ff ff ff	 jmp	 $LL2@FormatNumb
$LN36@FormatNumb:

; 838  :                 writer->Write(t_writer.GetString());

  0012d	8b 5d 0c	 mov	 ebx, DWORD PTR _writer$[ebp]

; 179  :                 return (_native_writer->GetString());

  00130	8b cf		 mov	 ecx, edi

; 838  :                 writer->Write(t_writer.GetString());

  00132	8b 03		 mov	 eax, DWORD PTR [ebx]
  00134	8b 30		 mov	 esi, DWORD PTR [eax]

; 179  :                 return (_native_writer->GetString());

  00136	8b 07		 mov	 eax, DWORD PTR [edi]
  00138	ff 50 08	 call	 DWORD PTR [eax+8]

; 838  :                 writer->Write(t_writer.GetString());

  0013b	50		 push	 eax
  0013c	8b cb		 mov	 ecx, ebx
  0013e	ff d6		 call	 esi

; 839  :                 if (_precision > 0)

  00140	8b 75 ec	 mov	 esi, DWORD PTR _this$1$[ebp]
  00143	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00147	7e 25		 jle	 SHORT $LN27@FormatNumb

; 840  :                 {
; 841  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  00149	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014b	8b cb		 mov	 ecx, ebx
  0014d	8b 10		 mov	 edx, DWORD PTR [eax]
  0014f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00152	83 c0 6c	 add	 eax, 108		; 0000006cH
  00155	50		 push	 eax
  00156	ff d2		 call	 edx
  00158	8b 76 10	 mov	 esi, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  0015b	85 f6		 test	 esi, esi
  0015d	74 0f		 je	 SHORT $LN27@FormatNumb
  0015f	90		 npad	 1
$LL26@FormatNumb:

; 228  :             {
; 229  :                 Write(c);

  00160	8b 03		 mov	 eax, DWORD PTR [ebx]
  00162	8b cb		 mov	 ecx, ebx
  00164	6a 30		 push	 48			; 00000030H
  00166	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00169	83 ee 01	 sub	 esi, 1
  0016c	75 f2		 jne	 SHORT $LL26@FormatNumb
$LN27@FormatNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 844  :             }

  0016e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00175	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00178	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0017d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00180	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00187	59		 pop	 ecx
  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	5b		 pop	 ebx
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatNumberSequence
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WritePrefix, COMDAT
; _this$ = ecx

; 801  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  :                 if (x_sign >= 0)

  00003	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  00007	7d 54		 jge	 SHORT $LN10@WritePrefi

; 803  :                 {
; 804  :                 }
; 805  :                 else
; 806  :                 {
; 807  :                     switch (_number_format_info->Number.NegativePattern)

  00009	57		 push	 edi
  0000a	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  0000d	8b 87 c8 00 00
	00		 mov	 eax, DWORD PTR [edi+200]
  00013	83 f8 04	 cmp	 eax, 4
  00016	77 36		 ja	 SHORT $LN7@WritePrefi
  00018	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@WritePrefi[eax*4]
$LN6@WritePrefi:

; 808  :                     {
; 809  :                     case 0:
; 810  :                         writer->Write(L'(');

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00022	6a 28		 push	 40			; 00000028H
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 50 04	 call	 DWORD PTR [eax+4]
  00029	5f		 pop	 edi

; 819  :                         break;
; 820  :                     case 3:
; 821  :                         break;
; 822  :                     case 4:
; 823  :                         break;
; 824  :                     }
; 825  :                 }
; 826  :             }

  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
$LN8@WritePrefi:
  0002e	56		 push	 esi

; 815  :                         break;
; 816  :                     case 2:
; 817  :                         writer->Write(_number_format_info->NegativeSign);

  0002f	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00032	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  00038	50		 push	 eax
  00039	8b ce		 mov	 ecx, esi
  0003b	8b 16		 mov	 edx, DWORD PTR [esi]
  0003d	ff 12		 call	 DWORD PTR [edx]

; 818  :                         writer->Write(L' ');

  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8b ce		 mov	 ecx, esi
  00043	6a 20		 push	 32			; 00000020H
  00045	ff 50 04	 call	 DWORD PTR [eax+4]
  00048	5e		 pop	 esi
  00049	5f		 pop	 edi

; 819  :                         break;
; 820  :                     case 3:
; 821  :                         break;
; 822  :                     case 4:
; 823  :                         break;
; 824  :                     }
; 825  :                 }
; 826  :             }

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN7@WritePrefi:

; 811  :                         break;
; 812  :                     case 1:
; 813  :                     default:
; 814  :                         writer->Write(_number_format_info->NegativeSign);

  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00051	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  00057	50		 push	 eax
  00058	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005a	ff 12		 call	 DWORD PTR [edx]
$LN12@WritePrefi:
  0005c	5f		 pop	 edi
$LN10@WritePrefi:

; 819  :                         break;
; 820  :                     case 3:
; 821  :                         break;
; 822  :                     case 4:
; 823  :                         break;
; 824  :                     }
; 825  :                 }
; 826  :             }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
  00061	0f 1f 00	 npad	 3
$LN14@WritePrefi:
  00064	00 00 00 00	 DD	 $LN6@WritePrefi
  00068	00 00 00 00	 DD	 $LN7@WritePrefi
  0006c	00 00 00 00	 DD	 $LN8@WritePrefi
  00070	00 00 00 00	 DD	 $LN12@WritePrefi
  00074	00 00 00 00	 DD	 $LN12@WritePrefi
?WritePrefix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WritePrefix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteZeroValue, COMDAT
; _this$ = ecx

; 791  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 792  :                 writer->Write(L'0');

  00004	8b 75 08	 mov	 esi, DWORD PTR _writer$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	6a 30		 push	 48			; 00000030H
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 50 04	 call	 DWORD PTR [eax+4]

; 793  :                 if (_precision > 0)

  00013	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00017	7e 25		 jle	 SHORT $LN6@WriteZeroV

; 794  :                 {
; 795  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  00019	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001c	8b ce		 mov	 ecx, esi
  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
  00020	83 c0 6c	 add	 eax, 108		; 0000006cH
  00023	50		 push	 eax
  00024	ff 12		 call	 DWORD PTR [edx]
  00026	8b 7f 10	 mov	 edi, DWORD PTR [edi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  00029	85 ff		 test	 edi, edi
  0002b	74 11		 je	 SHORT $LN6@WriteZeroV
  0002d	0f 1f 00	 npad	 3
$LL5@WriteZeroV:

; 228  :             {
; 229  :                 Write(c);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b ce		 mov	 ecx, esi
  00034	6a 30		 push	 48			; 00000030H
  00036	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00039	83 ef 01	 sub	 edi, 1
  0003c	75 f2		 jne	 SHORT $LL5@WriteZeroV
$LN6@WriteZeroV:
  0003e	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 798  :             }

  0003f	5e		 pop	 esi
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
?GetDefaultPrecisionValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 787  :                 return (_number_format_info->Number.DecimalDigits);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 40 68	 mov	 eax, DWORD PTR [eax+104]

; 788  :             }

  00006	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_precision$ = 8						; size = 4
_number_format_info$ = 12				; size = 4
??0FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatterTypeN, COMDAT
; _this$ = ecx

; 781  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  :                 _format_type = format_type;

  00003	b8 4e 00 00 00	 mov	 eax, 78			; 0000004eH
  00008	c7 41 04 00 ca
	9a 3b		 mov	 DWORD PTR [ecx+4], 1000000000 ; 3b9aca00H
  0000f	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 205  :                 _precision = precision;

  00013	8b 45 08	 mov	 eax, DWORD PTR _precision$[ebp]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 206  :                 _number_format_info = number_format_info;

  00019	8b 45 0c	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001c	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 782  :             }

  0001f	8b c1		 mov	 eax, ecx

; 188  :             const int digit_count_on_word = 9;

  00021	c7 41 08 09 00
	00 00		 mov	 DWORD PTR [ecx+8], 9

; 781  :             {

  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 782  :             }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
??0FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatterTypeN
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteSuffix, COMDAT
; _this$ = ecx

; 772  :             }

  00000	c2 08 00	 ret	 8
?WriteSuffix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatNumberSequence, COMDAT
; _this$ = ecx

; 761  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 762  :                 writer->Write(number_sequence_str);

  00004	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00007	57		 push	 edi
  00008	ff 75 08	 push	 DWORD PTR _number_sequence_str$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b ce		 mov	 ecx, esi
  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	ff 10		 call	 DWORD PTR [eax]

; 763  :                 if (_precision > 0)

  00013	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00017	7e 25		 jle	 SHORT $LN6@FormatNumb

; 764  :                 {
; 765  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  00019	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001c	8b ce		 mov	 ecx, esi
  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
  00020	83 c0 6c	 add	 eax, 108		; 0000006cH
  00023	50		 push	 eax
  00024	ff 12		 call	 DWORD PTR [edx]
  00026	8b 7f 10	 mov	 edi, DWORD PTR [edi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  00029	85 ff		 test	 edi, edi
  0002b	74 11		 je	 SHORT $LN6@FormatNumb
  0002d	0f 1f 00	 npad	 3
$LL5@FormatNumb:

; 228  :             {
; 229  :                 Write(c);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b ce		 mov	 ecx, esi
  00034	6a 30		 push	 48			; 00000030H
  00036	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00039	83 ef 01	 sub	 edi, 1
  0003c	75 f2		 jne	 SHORT $LL5@FormatNumb
$LN6@FormatNumb:
  0003e	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 768  :             }

  0003f	5e		 pop	 esi
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?FormatNumberSequence@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatNumberSequence
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WritePrefix, COMDAT
; _this$ = ecx

; 755  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 756  :                 if (x_sign < 0)

  00003	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  00007	8b c1		 mov	 eax, ecx
  00009	7d 10		 jge	 SHORT $LN2@WritePrefi

; 757  :                     writer->Write(_number_format_info->NegativeSign);

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0000e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00011	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  00016	50		 push	 eax
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	ff 12		 call	 DWORD PTR [edx]
$LN2@WritePrefi:

; 758  :             }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?WritePrefix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WritePrefix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteZeroValue, COMDAT
; _this$ = ecx

; 745  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 746  :                 writer->Write(L'0');

  00004	8b 75 08	 mov	 esi, DWORD PTR _writer$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	6a 30		 push	 48			; 00000030H
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 50 04	 call	 DWORD PTR [eax+4]

; 747  :                 if (_precision > 0)

  00013	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00017	7e 25		 jle	 SHORT $LN6@WriteZeroV

; 748  :                 {
; 749  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  00019	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001c	8b ce		 mov	 ecx, esi
  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
  00020	83 c0 6c	 add	 eax, 108		; 0000006cH
  00023	50		 push	 eax
  00024	ff 12		 call	 DWORD PTR [edx]
  00026	8b 7f 10	 mov	 edi, DWORD PTR [edi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  00029	85 ff		 test	 edi, edi
  0002b	74 11		 je	 SHORT $LN6@WriteZeroV
  0002d	0f 1f 00	 npad	 3
$LL5@WriteZeroV:

; 228  :             {
; 229  :                 Write(c);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b ce		 mov	 ecx, esi
  00034	6a 30		 push	 48			; 00000030H
  00036	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00039	83 ef 01	 sub	 edi, 1
  0003c	75 f2		 jne	 SHORT $LL5@WriteZeroV
$LN6@WriteZeroV:
  0003e	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 752  :             }

  0003f	5e		 pop	 esi
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
?GetDefaultPrecisionValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 741  :                 return (_number_format_info->Number.DecimalDigits);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 40 68	 mov	 eax, DWORD PTR [eax+104]

; 742  :             }

  00006	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_precision$ = 8						; size = 4
_number_format_info$ = 12				; size = 4
??0FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatterTypeF, COMDAT
; _this$ = ecx

; 735  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  :                 _format_type = format_type;

  00003	b8 46 00 00 00	 mov	 eax, 70			; 00000046H
  00008	c7 41 04 00 ca
	9a 3b		 mov	 DWORD PTR [ecx+4], 1000000000 ; 3b9aca00H
  0000f	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 205  :                 _precision = precision;

  00013	8b 45 08	 mov	 eax, DWORD PTR _precision$[ebp]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 206  :                 _number_format_info = number_format_info;

  00019	8b 45 0c	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001c	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 736  :             }

  0001f	8b c1		 mov	 eax, ecx

; 188  :             const int digit_count_on_word = 9;

  00021	c7 41 08 09 00
	00 00		 mov	 DWORD PTR [ecx+8], 9

; 735  :             {

  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 736  :             }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
??0FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatterTypeF
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteSuffix, COMDAT
; _this$ = ecx

; 726  :             }

  00000	c2 08 00	 ret	 8
?WriteSuffix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_number_sequence_str$GSCopy$1$ = -48			; size = 4
_this$GSCopy$1$ = -44					; size = 4
tv260 = -40						; size = 4
tv259 = -40						; size = 4
_reader$ = -36						; size = 8
_exp_buf$ = -28						; size = 22
__$ArrayPad$ = -4					; size = 4
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatNumberSequence, COMDAT
; _this$ = ecx

; 695  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _number_sequence_str$[ebp]
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _writer$[ebp]
  00019	8b d9		 mov	 ebx, ecx
  0001b	89 45 d0	 mov	 DWORD PTR _number_sequence_str$GSCopy$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 64   :             wchar_t c = PeekChar();

  0001e	8d 4d dc	 lea	 ecx, DWORD PTR _reader$[ebp]

; 52   :             _p = p;

  00021	89 45 e0	 mov	 DWORD PTR _reader$[ebp+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 695  :             {

  00024	89 5d d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx

; 697  :                 writer->Write(reader.ReadChar(L'0'));

  00027	8b 07		 mov	 eax, DWORD PTR [edi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 50   :         StringReader(const wchar_t* p)

  00029	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _reader$[ebp], OFFSET ??_7StringReader@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 697  :                 writer->Write(reader.ReadChar(L'0'));

  00030	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00033	89 45 d8	 mov	 DWORD PTR tv260[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 64   :             wchar_t c = PeekChar();

  00036	e8 00 00 00 00	 call	 ?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ; Palmtree::Math::Core::Internal::StringReader::PeekChar
  0003b	0f b7 f0	 movzx	 esi, ax

; 65   :             if (c == L'\0')

  0003e	66 85 f6	 test	 si, si
  00041	75 07		 jne	 SHORT $LN10@FormatNumb

; 66   :                 return (default_char);

  00043	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  00048	eb 0b		 jmp	 SHORT $LN9@FormatNumb
$LN10@FormatNumb:

; 67   :             Progress();

  0004a	8b 45 dc	 mov	 eax, DWORD PTR _reader$[ebp]
  0004d	8d 4d dc	 lea	 ecx, DWORD PTR _reader$[ebp]
  00050	ff 50 04	 call	 DWORD PTR [eax+4]

; 68   :             return (c);

  00053	8b c6		 mov	 eax, esi
$LN9@FormatNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 697  :                 writer->Write(reader.ReadChar(L'0'));

  00055	50		 push	 eax
  00056	8b cf		 mov	 ecx, edi
  00058	ff 55 d8	 call	 DWORD PTR tv260[ebp]

; 698  :                 if (_precision > 0)

  0005b	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0
  0005f	7e 4c		 jle	 SHORT $LN3@FormatNumb

; 699  :                 {
; 700  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  00061	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00064	8b cf		 mov	 ecx, edi
  00066	8b 17		 mov	 edx, DWORD PTR [edi]
  00068	83 c0 6c	 add	 eax, 108		; 0000006cH
  0006b	50		 push	 eax
  0006c	ff 12		 call	 DWORD PTR [edx]
  0006e	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]

; 701  :                     for (int count = _precision; count > 0; --count)

  00071	85 f6		 test	 esi, esi
  00073	7e 38		 jle	 SHORT $LN3@FormatNumb
$LL4@FormatNumb:

; 702  :                         writer->Write(reader.ReadChar(L'0'));

  00075	8b 07		 mov	 eax, DWORD PTR [edi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 64   :             wchar_t c = PeekChar();

  00077	8d 4d dc	 lea	 ecx, DWORD PTR _reader$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 702  :                         writer->Write(reader.ReadChar(L'0'));

  0007a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007d	89 45 d8	 mov	 DWORD PTR tv259[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 64   :             wchar_t c = PeekChar();

  00080	8b 45 dc	 mov	 eax, DWORD PTR _reader$[ebp]
  00083	ff 10		 call	 DWORD PTR [eax]
  00085	0f b7 d8	 movzx	 ebx, ax

; 65   :             if (c == L'\0')

  00088	66 85 db	 test	 bx, bx
  0008b	75 07		 jne	 SHORT $LN13@FormatNumb

; 66   :                 return (default_char);

  0008d	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  00092	eb 0b		 jmp	 SHORT $LN12@FormatNumb
$LN13@FormatNumb:

; 67   :             Progress();

  00094	8b 45 dc	 mov	 eax, DWORD PTR _reader$[ebp]
  00097	8d 4d dc	 lea	 ecx, DWORD PTR _reader$[ebp]
  0009a	ff 50 04	 call	 DWORD PTR [eax+4]

; 68   :             return (c);

  0009d	8b c3		 mov	 eax, ebx
$LN12@FormatNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 702  :                         writer->Write(reader.ReadChar(L'0'));

  0009f	50		 push	 eax
  000a0	8b cf		 mov	 ecx, edi
  000a2	ff 55 d8	 call	 DWORD PTR tv259[ebp]
  000a5	4e		 dec	 esi
  000a6	85 f6		 test	 esi, esi
  000a8	7f cb		 jg	 SHORT $LL4@FormatNumb
  000aa	8b 5d d4	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@FormatNumb:

; 703  :                 }
; 704  :                 writer->Write(_format_type);

  000ad	8b 17		 mov	 edx, DWORD PTR [edi]
  000af	8b cf		 mov	 ecx, edi
  000b1	0f b7 43 0c	 movzx	 eax, WORD PTR [ebx+12]
  000b5	50		 push	 eax
  000b6	ff 52 04	 call	 DWORD PTR [edx+4]

; 705  :                 writer->Write(_number_format_info->PositiveSign);

  000b9	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000bc	8b cf		 mov	 ecx, edi
  000be	8b 17		 mov	 edx, DWORD PTR [edi]
  000c0	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  000c5	50		 push	 eax
  000c6	ff 12		 call	 DWORD PTR [edx]

; 706  :                 size_t exponential_part = lstrlenW(number_sequence_str) - 1;

  000c8	ff 75 d0	 push	 DWORD PTR _number_sequence_str$GSCopy$1$[ebp]
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  000d1	48		 dec	 eax

; 707  : 
; 708  :                 // 指数部を文字列化するために必要な領域の大きさについて
; 709  :                 // sizeof(w_char_t) == 2 であるため、アドレス空間が 64bit の環境における指数部の論理的な上限値は 2^63 (^はべき乗演算子)
; 710  :                 // なので、指数部を10進数表記した場合の論理的な桁数の上限値は ceil(63 * log(2) / log(10)) ==> 19 となる。
; 711  :                 // 同様に、32bit アドレス空間においては、指数部桁数の論理的上限値は ceil(31 * log(2) / log(10)) ==> 10 となる。
; 712  : 
; 713  : #ifdef _M_IX86 
; 714  :                 wchar_t exp_buf[10 + 1];
; 715  : #elif defined(_M_X64)
; 716  :                 wchar_t exp_buf[19 + 1];
; 717  : #else
; 718  : #error unknown platform
; 719  : #endif
; 720  :                 wsprintfW(exp_buf, L"%03d", exponential_part);

  000d2	50		 push	 eax
  000d3	8d 45 e4	 lea	 eax, DWORD PTR _exp_buf$[ebp]
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_19GGGBJDH@?$AA?$CF?$AA0?$AA3?$AAd@
  000db	50		 push	 eax
  000dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW

; 721  :                 writer->Write(exp_buf);

  000e2	8b 07		 mov	 eax, DWORD PTR [edi]
  000e4	8d 4d e4	 lea	 ecx, DWORD PTR _exp_buf$[ebp]
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ea	51		 push	 ecx
  000eb	8b cf		 mov	 ecx, edi
  000ed	ff 10		 call	 DWORD PTR [eax]

; 722  :             }

  000ef	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	33 cd		 xor	 ecx, ebp
  000f6	5b		 pop	 ebx
  000f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 08 00	 ret	 8
?FormatNumberSequence@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatNumberSequence
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WritePrefix, COMDAT
; _this$ = ecx

; 689  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 690  :                 if (x_sign < 0)

  00003	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  00007	8b c1		 mov	 eax, ecx
  00009	7d 10		 jge	 SHORT $LN2@WritePrefi

; 691  :                     writer->Write(_number_format_info->NegativeSign);

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0000e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00011	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  00016	50		 push	 eax
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	ff 12		 call	 DWORD PTR [edx]
$LN2@WritePrefi:

; 692  :             }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?WritePrefix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WritePrefix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
_TEXT	SEGMENT
_root$ = -60						; size = 16
_root$2 = -44						; size = 16
_root$3 = -44						; size = 16
_this$1$ = -28						; size = 4
_temp_r$4 = -24						; size = 4
_u_buf$1$ = -20						; size = 4
_e$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x_abs$ = 8						; size = 4
_writer$ = 12						; size = 4
?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatInternally, COMDAT
; _this$ = ecx

; 673  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d e4	 mov	 DWORD PTR _this$1$[ebp], ecx

; 674  :                 ResourceHolderUINT root;

  0002b	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 46   :             ResourceHolderUINT root;

  0003a	8d 4d d4	 lea	 ecx, DWORD PTR _root$3[ebp]

; 675  :                 size_t digit_count = get_digit_count_as_decimal(x_abs->BLOCK, x_abs->UNIT_WORD_COUNT);

  0003d	8b 45 08	 mov	 eax, DWORD PTR _x_abs$[ebp]
  00040	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]
  00043	8b 70 24	 mov	 esi, DWORD PTR [eax+36]

; 46   :             ResourceHolderUINT root;

  00046	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 47   :             __UNIT_TYPE* work1_buf = root.AllocateBlock(src_buf_count * __UNIT_TYPE_BIT_COUNT);

  0004f	8b fb		 mov	 edi, ebx
  00051	c1 e7 05	 shl	 edi, 5
  00054	8d 4d d4	 lea	 ecx, DWORD PTR _root$3[ebp]
  00057	57		 push	 edi
  00058	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock

; 48   :             __UNIT_TYPE* work2_buf = root.AllocateBlock(src_buf_count * __UNIT_TYPE_BIT_COUNT);

  0005d	57		 push	 edi
  0005e	8d 4d d4	 lea	 ecx, DWORD PTR _root$3[ebp]
  00061	89 45 ec	 mov	 DWORD PTR _u_buf$1$[ebp], eax
  00064	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00069	8b 7d ec	 mov	 edi, DWORD PTR _u_buf$1$[ebp]
  0006c	8b cb		 mov	 ecx, ebx
  0006e	f3 a5		 rep movsd
  00070	8b 75 ec	 mov	 esi, DWORD PTR _u_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 53   :             _UINT32_T digit_count = 0;

  00073	33 ff		 xor	 edi, edi
  00075	89 7d f0	 mov	 DWORD PTR _e$1$[ebp], edi
$LN30@FormatInte:

; 54   :             while (1)
; 55   :             {
; 56   :                 while (u_count > 0 && u_buf[u_count - 1] == 0)

  00078	8b f8		 mov	 edi, eax
  0007a	85 db		 test	 ebx, ebx
  0007c	74 17		 je	 SHORT $LN28@FormatInte
  0007e	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00081	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
$LL9@FormatInte:
  00084	83 38 00	 cmp	 DWORD PTR [eax], 0
  00087	0f 85 a2 00 00
	00		 jne	 $LN10@FormatInte

; 57   :                     --u_count;

  0008d	83 e8 04	 sub	 eax, 4
  00090	83 eb 01	 sub	 ebx, 1
  00093	75 ef		 jne	 SHORT $LL9@FormatInte
$LN28@FormatInte:

; 68   :             return (digit_count);

  00095	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00099	8d 4d d4	 lea	 ecx, DWORD PTR _root$3[ebp]
  0009c	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT

; 676  :                 if (digit_count >= (size_t)(_precision + 2))

  000a1	8b 5d e4	 mov	 ebx, DWORD PTR _this$1$[ebp]
  000a4	8b 7d f0	 mov	 edi, DWORD PTR _e$1$[ebp]
  000a7	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  000aa	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  000ad	3b f8		 cmp	 edi, eax
  000af	0f 82 a0 00 00
	00		 jb	 $LN2@FormatInte

; 677  :                 {
; 678  :                     NUMBER_HEADER* fraction_number = get_x_times_of_exponent_of_10(5, digit_count - _precision - 2);

  000b5	2b f9		 sub	 edi, ecx

; 74   :             ResourceHolderUINT root;

  000b7	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]

; 677  :                 {
; 678  :                     NUMBER_HEADER* fraction_number = get_x_times_of_exponent_of_10(5, digit_count - _precision - 2);

  000ba	83 ef 02	 sub	 edi, 2

; 74   :             ResourceHolderUINT root;

  000bd	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000c2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 75   :             NUMBER_HEADER* _10 = From_I_Imp(10);

  000c6	6a 0a		 push	 10			; 0000000aH
  000c8	e8 00 00 00 00	 call	 ?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z ; Palmtree::Math::Core::Internal::From_I_Imp
  000cd	83 c4 04	 add	 esp, 4

; 76   :             root.HookNumber(_10);

  000d0	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000d3	8b f0		 mov	 esi, eax
  000d5	56		 push	 esi
  000d6	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 77   : #if _M_IX86
; 78   :             NUMBER_HEADER* exponent_of_10 = PMC_Pow_X_I_Imp(_10, e);

  000db	57		 push	 edi
  000dc	56		 push	 esi
  000dd	e8 00 00 00 00	 call	 ?PMC_Pow_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Pow_X_I_Imp
  000e2	83 c4 08	 add	 esp, 8

; 79   : #elif defined(_M_X64)
; 80   :             NUMBER_HEADER* exponent_of_10 = PMC_Pow_X_L_Imp(_10, e);
; 81   : #else
; 82   : #error unknown platform
; 83   : #endif
; 84   :             root.HookNumber(exponent_of_10);

  000e5	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000e8	8b f0		 mov	 esi, eax
  000ea	56		 push	 esi
  000eb	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 85   :             NUMBER_HEADER* x_times_of_exponent_of_10 = PMC_Multiply_X_I_Imp(exponent_of_10, x);

  000f0	6a 05		 push	 5
  000f2	56		 push	 esi
  000f3	e8 00 00 00 00	 call	 ?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
  000f8	83 c4 08	 add	 esp, 8

; 86   :             return (x_times_of_exponent_of_10);

  000fb	8b f0		 mov	 esi, eax
  000fd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00101	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00104	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT

; 679  :                     root.HookNumber(fraction_number);

  00109	56		 push	 esi
  0010a	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  0010d	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 680  :                     NUMBER_HEADER* x2 = PMC_Add_X_X_Imp(x_abs, fraction_number);

  00112	56		 push	 esi
  00113	ff 75 08	 push	 DWORD PTR _x_abs$[ebp]
  00116	e8 00 00 00 00	 call	 ?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
  0011b	83 c4 08	 add	 esp, 8

; 681  :                     root.HookNumber(x2);

  0011e	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  00121	8b f0		 mov	 esi, eax
  00123	56		 push	 esi
  00124	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 682  :                     Formatter::FormatInternally(x2, writer);

  00129	ff 75 0c	 push	 DWORD PTR _writer$[ebp]
  0012c	56		 push	 esi

; 683  :                 }
; 684  :                 else

  0012d	eb 2c		 jmp	 SHORT $LN31@FormatInte
$LN10@FormatInte:

; 61   :                 root.ClearBlock(q_buf);

  0012f	57		 push	 edi
  00130	8d 4d d4	 lea	 ecx, DWORD PTR _root$3[ebp]
  00133	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 62   :                 DivRem_X_1W(u_buf, u_count, 10, q_buf, &temp_r);

  00138	8d 45 e8	 lea	 eax, DWORD PTR _temp_r$4[ebp]
  0013b	50		 push	 eax
  0013c	57		 push	 edi
  0013d	6a 0a		 push	 10			; 0000000aH
  0013f	53		 push	 ebx
  00140	56		 push	 esi
  00141	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  00146	83 c4 14	 add	 esp, 20			; 00000014H

; 63   :                 __UNIT_TYPE* t = u_buf;

  00149	8b c6		 mov	 eax, esi

; 64   :                 u_buf = q_buf;
; 65   :                 q_buf = t;
; 66   :                 ++digit_count;

  0014b	ff 45 f0	 inc	 DWORD PTR _e$1$[ebp]
  0014e	8b f7		 mov	 esi, edi

; 67   :             }

  00150	e9 23 ff ff ff	 jmp	 $LN30@FormatInte
$LN2@FormatInte:

; 685  :                     Formatter::FormatInternally(x_abs, writer);

  00155	ff 75 0c	 push	 DWORD PTR _writer$[ebp]
  00158	ff 75 08	 push	 DWORD PTR _x_abs$[ebp]
$LN31@FormatInte:

; 686  :             }

  0015b	8b cb		 mov	 ecx, ebx
  0015d	e8 00 00 00 00	 call	 ?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally
  00162	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00169	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  0016c	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00171	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00174	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017b	59		 pop	 ecx
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR _root$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$2:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatInternally
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteZeroValue, COMDAT
; _this$ = ecx

; 661  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 662  :                 writer->Write(L'0');

  00005	8b 75 08	 mov	 esi, DWORD PTR _writer$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	6a 30		 push	 48			; 00000030H
  0000c	8b ce		 mov	 ecx, esi
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 50 04	 call	 DWORD PTR [eax+4]

; 663  :                 if (_precision > 0)

  00013	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0
  00017	7e 26		 jle	 SHORT $LN6@WriteZeroV

; 664  :                 {
; 665  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  00019	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0001c	8b ce		 mov	 ecx, esi
  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
  00020	83 c0 6c	 add	 eax, 108		; 0000006cH
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	ff 12		 call	 DWORD PTR [edx]
  00027	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  0002a	85 ff		 test	 edi, edi
  0002c	74 10		 je	 SHORT $LN12@WriteZeroV
  0002e	66 90		 npad	 2
$LL5@WriteZeroV:

; 228  :             {
; 229  :                 Write(c);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b ce		 mov	 ecx, esi
  00034	6a 30		 push	 48			; 00000030H
  00036	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00039	83 ef 01	 sub	 edi, 1
  0003c	75 f2		 jne	 SHORT $LL5@WriteZeroV
$LN12@WriteZeroV:
  0003e	5f		 pop	 edi
$LN6@WriteZeroV:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 668  :                 writer->Write(_format_type);

  0003f	8b 16		 mov	 edx, DWORD PTR [esi]
  00041	8b ce		 mov	 ecx, esi
  00043	0f b7 43 0c	 movzx	 eax, WORD PTR [ebx+12]
  00047	50		 push	 eax
  00048	ff 52 04	 call	 DWORD PTR [edx+4]

; 669  :                 writer->Write(L"+000");

  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	8b ce		 mov	 ecx, esi
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_19NKFEMDNP@?$AA?$CL?$AA0?$AA0?$AA0@
  00054	ff 10		 call	 DWORD PTR [eax]
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx

; 670  :             }

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
?GetDefaultPrecisionValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 657  :                 return (6);

  00000	b8 06 00 00 00	 mov	 eax, 6

; 658  :             }

  00005	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_format_type$ = 8					; size = 2
_precision$ = 12					; size = 4
_number_format_info$ = 16				; size = 4
??0FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatterTypeE, COMDAT
; _this$ = ecx

; 651  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  :                 _format_type = format_type;

  00003	66 8b 45 08	 mov	 ax, WORD PTR _format_type$[ebp]
  00007	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 205  :                 _precision = precision;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _precision$[ebp]
  0000e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 206  :                 _number_format_info = number_format_info;

  00011	8b 45 10	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  00014	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 652  :             }

  00017	8b c1		 mov	 eax, ecx

; 187  :             const __UNIT_TYPE _10n_base_number = 1000000000U; // 10^9

  00019	c7 41 04 00 ca
	9a 3b		 mov	 DWORD PTR [ecx+4], 1000000000 ; 3b9aca00H

; 188  :             const int digit_count_on_word = 9;

  00020	c7 41 08 09 00
	00 00		 mov	 DWORD PTR [ecx+8], 9

; 651  :             {

  00027	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 652  :             }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
??0FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatterTypeE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteSuffix, COMDAT
; _this$ = ecx

; 642  :             }

  00000	c2 08 00	 ret	 8
?WriteSuffix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatNumberSequence, COMDAT
; _this$ = ecx

; 635  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 636  :                 writer->Write(L'0', _precision > lstrlenW(number_sequence_str) ? _precision - lstrlenW(number_sequence_str) : 0);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _number_sequence_str$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	53		 push	 ebx
  0000a	8b f9		 mov	 edi, ecx
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00012	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00015	39 47 10	 cmp	 DWORD PTR [edi+16], eax
  00018	7e 1c		 jle	 SHORT $LN7@FormatNumb
  0001a	53		 push	 ebx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00021	8b 7f 10	 mov	 edi, DWORD PTR [edi+16]
  00024	2b f8		 sub	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  00026	74 0e		 je	 SHORT $LN7@FormatNumb
$LL6@FormatNumb:

; 228  :             {
; 229  :                 Write(c);

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	8b ce		 mov	 ecx, esi
  0002c	6a 30		 push	 48			; 00000030H
  0002e	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00031	83 ef 01	 sub	 edi, 1
  00034	75 f2		 jne	 SHORT $LL6@FormatNumb
$LN7@FormatNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 637  :                 writer->Write(number_sequence_str);

  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	8b ce		 mov	 ecx, esi
  0003a	53		 push	 ebx
  0003b	ff 10		 call	 DWORD PTR [eax]
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx

; 638  :             }

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?FormatNumberSequence@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatNumberSequence
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WritePrefix, COMDAT
; _this$ = ecx

; 629  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 630  :                 if (x_sign < 0)

  00003	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  00007	8b c1		 mov	 eax, ecx
  00009	7d 10		 jge	 SHORT $LN2@WritePrefi

; 631  :                     writer->Write(_number_format_info->NegativeSign);

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0000e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00011	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  00016	50		 push	 eax
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	ff 12		 call	 DWORD PTR [edx]
$LN2@WritePrefi:

; 632  :             }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?WritePrefix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WritePrefix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteZeroValue, COMDAT
; _this$ = ecx

; 624  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 625  :                 writer->Write(L'0', _precision < 1 ? 1 : _precision);

  00004	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  00007	83 fe 01	 cmp	 esi, 1
  0000a	7d 07		 jge	 SHORT $LN3@WriteZeroV
  0000c	be 01 00 00 00	 mov	 esi, 1
  00011	eb 04		 jmp	 SHORT $LN18@WriteZeroV
$LN3@WriteZeroV:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  00013	85 f6		 test	 esi, esi
  00015	74 18		 je	 SHORT $LN7@WriteZeroV
$LN18@WriteZeroV:
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _writer$[ebp]
  0001b	0f 1f 44 00 00	 npad	 5
$LL6@WriteZeroV:

; 228  :             {
; 229  :                 Write(c);

  00020	8b 07		 mov	 eax, DWORD PTR [edi]
  00022	8b cf		 mov	 ecx, edi
  00024	6a 30		 push	 48			; 00000030H
  00026	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00029	83 ee 01	 sub	 esi, 1
  0002c	75 f2		 jne	 SHORT $LL6@WriteZeroV
  0002e	5f		 pop	 edi
$LN7@WriteZeroV:
  0002f	5e		 pop	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 626  :             }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
?GetDefaultPrecisionValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 620  :                 return (0);

  00000	33 c0		 xor	 eax, eax

; 621  :             }

  00002	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_precision$ = 8						; size = 4
_number_format_info$ = 12				; size = 4
??0FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatterTypeD, COMDAT
; _this$ = ecx

; 614  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  :                 _format_type = format_type;

  00003	b8 44 00 00 00	 mov	 eax, 68			; 00000044H
  00008	c7 41 04 00 ca
	9a 3b		 mov	 DWORD PTR [ecx+4], 1000000000 ; 3b9aca00H
  0000f	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 205  :                 _precision = precision;

  00013	8b 45 08	 mov	 eax, DWORD PTR _precision$[ebp]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 206  :                 _number_format_info = number_format_info;

  00019	8b 45 0c	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001c	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 615  :             }

  0001f	8b c1		 mov	 eax, ecx

; 188  :             const int digit_count_on_word = 9;

  00021	c7 41 08 09 00
	00 00		 mov	 DWORD PTR [ecx+8], 9

; 614  :             {

  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 615  :             }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
??0FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatterTypeD
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteSuffix, COMDAT
; _this$ = ecx

; 525  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 526  :                 if (x_sign >= 0)

  00003	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0000f	7c 33		 jl	 SHORT $LN6@WriteSuffi

; 527  :                 {
; 528  :                     switch (_number_format_info->Currency.PositivePattern)

  00011	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00014	83 e8 01	 sub	 eax, 1
  00017	74 74		 je	 SHORT $LN17@WriteSuffi
  00019	83 e8 02	 sub	 eax, 2
  0001c	0f 85 61 01 00
	00		 jne	 $LN4@WriteSuffi
$LN20@WriteSuffi:

; 602  :                         break;
; 603  :                     }
; 604  :                 }
; 605  :             }

  00022	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00025	8b ce		 mov	 ecx, esi
  00027	6a 20		 push	 32			; 00000020H
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	ff 50 04	 call	 DWORD PTR [eax+4]
  0002e	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00031	8b ce		 mov	 ecx, esi
  00033	8b 16		 mov	 edx, DWORD PTR [esi]
  00035	05 38 01 00 00	 add	 eax, 312		; 00000138H
  0003a	50		 push	 eax
  0003b	ff 12		 call	 DWORD PTR [edx]
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN6@WriteSuffi:

; 529  :                     {
; 530  :                     case 0:
; 531  :                     default:
; 532  :                         break;
; 533  :                     case 1:
; 534  :                         writer->Write(_number_format_info->CurrencySymbol);
; 535  :                         break;
; 536  :                     case 2:
; 537  :                         break;
; 538  :                     case 3:
; 539  :                         writer->Write(L' ');
; 540  :                         writer->Write(_number_format_info->CurrencySymbol);
; 541  :                         break;
; 542  :                     }
; 543  :                 }
; 544  :                 else
; 545  :                 {
; 546  :                     switch (_number_format_info->Currency.NegativePattern)

  00044	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  00047	48		 dec	 eax
  00048	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  0004b	0f 87 28 01 00
	00		 ja	 $LN12@WriteSuffi
  00051	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN32@WriteSuffi[eax*4]
$LN15@WriteSuffi:

; 602  :                         break;
; 603  :                     }
; 604  :                 }
; 605  :             }

  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0005b	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  00061	50		 push	 eax
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	ff 12		 call	 DWORD PTR [edx]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
$LN16@WriteSuffi:

; 547  :                     {
; 548  :                     case 0:
; 549  :                     default:
; 550  :                         writer->Write(L')');
; 551  :                         break;
; 552  :                     case 1:
; 553  :                         break;
; 554  :                     case 2:
; 555  :                         break;
; 556  :                     case 3:
; 557  :                         writer->Write(_number_format_info->NegativeSign);
; 558  :                         break;
; 559  :                     case 4:
; 560  :                         writer->Write(_number_format_info->CurrencySymbol);

  0006d	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00070	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00076	50		 push	 eax
  00077	8b ce		 mov	 ecx, esi
  00079	8b 16		 mov	 edx, DWORD PTR [esi]
  0007b	ff 12		 call	 DWORD PTR [edx]

; 561  :                         writer->Write(L')');

  0007d	8b 06		 mov	 eax, DWORD PTR [esi]
  0007f	8b ce		 mov	 ecx, esi

; 602  :                         break;
; 603  :                     }
; 604  :                 }
; 605  :             }

  00081	6a 29		 push	 41			; 00000029H
  00083	ff 50 04	 call	 DWORD PTR [eax+4]
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	5d		 pop	 ebp
  0008a	c2 08 00	 ret	 8
$LN17@WriteSuffi:
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00090	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00096	50		 push	 eax
  00097	8b 11		 mov	 edx, DWORD PTR [ecx]
  00099	ff 12		 call	 DWORD PTR [edx]
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
$LN18@WriteSuffi:

; 562  :                         break;
; 563  :                     case 5:
; 564  :                         writer->Write(_number_format_info->CurrencySymbol);
; 565  :                         break;
; 566  :                     case 6:
; 567  :                         writer->Write(_number_format_info->NegativeSign);

  000a2	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  000a5	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  000ab	50		 push	 eax
  000ac	8b ce		 mov	 ecx, esi
  000ae	8b 16		 mov	 edx, DWORD PTR [esi]
  000b0	ff 12		 call	 DWORD PTR [edx]

; 568  :                         writer->Write(_number_format_info->CurrencySymbol);

  000b2	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000b5	8b ce		 mov	 ecx, esi
  000b7	8b 16		 mov	 edx, DWORD PTR [esi]
  000b9	05 38 01 00 00	 add	 eax, 312		; 00000138H
  000be	50		 push	 eax
  000bf	ff 12		 call	 DWORD PTR [edx]
  000c1	5f		 pop	 edi

; 602  :                         break;
; 603  :                     }
; 604  :                 }
; 605  :             }

  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	5d		 pop	 ebp
  000c5	c2 08 00	 ret	 8
$LN19@WriteSuffi:

; 569  :                         break;
; 570  :                     case 7:
; 571  :                         writer->Write(_number_format_info->CurrencySymbol);

  000c8	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  000cb	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  000d1	50		 push	 eax
  000d2	8b ce		 mov	 ecx, esi
  000d4	8b 16		 mov	 edx, DWORD PTR [esi]
  000d6	ff 12		 call	 DWORD PTR [edx]

; 572  :                         writer->Write(_number_format_info->NegativeSign);

  000d8	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000db	8b ce		 mov	 ecx, esi
  000dd	8b 16		 mov	 edx, DWORD PTR [esi]
  000df	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  000e4	50		 push	 eax
  000e5	ff 12		 call	 DWORD PTR [edx]
  000e7	5f		 pop	 edi

; 602  :                         break;
; 603  :                     }
; 604  :                 }
; 605  :             }

  000e8	5e		 pop	 esi
  000e9	5b		 pop	 ebx
  000ea	5d		 pop	 ebp
  000eb	c2 08 00	 ret	 8
$LN22@WriteSuffi:

; 573  :                         break;
; 574  :                     case 8:
; 575  :                         writer->Write(L' ');
; 576  :                         writer->Write(_number_format_info->CurrencySymbol);
; 577  :                         break;
; 578  :                     case 9:
; 579  :                         break;
; 580  :                     case 10:
; 581  :                         writer->Write(L' ');

  000ee	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  000f1	8b ce		 mov	 ecx, esi
  000f3	6a 20		 push	 32			; 00000020H
  000f5	8b 06		 mov	 eax, DWORD PTR [esi]
  000f7	ff 50 04	 call	 DWORD PTR [eax+4]

; 582  :                         writer->Write(_number_format_info->CurrencySymbol);

  000fa	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000fd	8b ce		 mov	 ecx, esi
  000ff	8b 16		 mov	 edx, DWORD PTR [esi]
  00101	05 38 01 00 00	 add	 eax, 312		; 00000138H
  00106	50		 push	 eax
  00107	ff 12		 call	 DWORD PTR [edx]

; 583  :                         writer->Write(_number_format_info->NegativeSign);

  00109	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0010c	8b ce		 mov	 ecx, esi
  0010e	8b 16		 mov	 edx, DWORD PTR [esi]
  00110	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  00115	50		 push	 eax
  00116	ff 12		 call	 DWORD PTR [edx]
  00118	5f		 pop	 edi

; 602  :                         break;
; 603  :                     }
; 604  :                 }
; 605  :             }

  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	5d		 pop	 ebp
  0011c	c2 08 00	 ret	 8
$LN25@WriteSuffi:

; 584  :                         break;
; 585  :                     case 11:
; 586  :                         writer->Write(_number_format_info->NegativeSign);
; 587  :                         break;
; 588  :                     case 12:
; 589  :                         break;
; 590  :                     case 13:
; 591  :                         writer->Write(_number_format_info->NegativeSign);

  0011f	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00122	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  00128	50		 push	 eax
  00129	8b ce		 mov	 ecx, esi
  0012b	8b 16		 mov	 edx, DWORD PTR [esi]
  0012d	ff 12		 call	 DWORD PTR [edx]

; 592  :                         writer->Write(L' ');

  0012f	8b 06		 mov	 eax, DWORD PTR [esi]
  00131	8b ce		 mov	 ecx, esi
  00133	6a 20		 push	 32			; 00000020H
  00135	ff 50 04	 call	 DWORD PTR [eax+4]

; 593  :                         writer->Write(_number_format_info->CurrencySymbol);

  00138	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0013b	8b ce		 mov	 ecx, esi
  0013d	8b 16		 mov	 edx, DWORD PTR [esi]
  0013f	05 38 01 00 00	 add	 eax, 312		; 00000138H
  00144	50		 push	 eax
  00145	ff 12		 call	 DWORD PTR [edx]
  00147	5f		 pop	 edi

; 602  :                         break;
; 603  :                     }
; 604  :                 }
; 605  :             }

  00148	5e		 pop	 esi
  00149	5b		 pop	 ebx
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
$LN27@WriteSuffi:

; 594  :                         break;
; 595  :                     case 14:
; 596  :                         writer->Write(L')');
; 597  :                         break;
; 598  :                     case 15:
; 599  :                         writer->Write(L' ');

  0014e	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00151	8b ce		 mov	 ecx, esi
  00153	6a 20		 push	 32			; 00000020H
  00155	8b 06		 mov	 eax, DWORD PTR [esi]
  00157	ff 50 04	 call	 DWORD PTR [eax+4]

; 600  :                         writer->Write(_number_format_info->CurrencySymbol);

  0015a	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0015d	8b ce		 mov	 ecx, esi
  0015f	8b 16		 mov	 edx, DWORD PTR [esi]
  00161	05 38 01 00 00	 add	 eax, 312		; 00000138H
  00166	50		 push	 eax
  00167	ff 12		 call	 DWORD PTR [edx]

; 601  :                         writer->Write(L')');

  00169	8b 06		 mov	 eax, DWORD PTR [esi]
  0016b	8b ce		 mov	 ecx, esi

; 602  :                         break;
; 603  :                     }
; 604  :                 }
; 605  :             }

  0016d	6a 29		 push	 41			; 00000029H
  0016f	ff 50 04	 call	 DWORD PTR [eax+4]
  00172	5f		 pop	 edi
  00173	5e		 pop	 esi
  00174	5b		 pop	 ebx
  00175	5d		 pop	 ebp
  00176	c2 08 00	 ret	 8
$LN12@WriteSuffi:
  00179	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0017c	6a 29		 push	 41			; 00000029H
  0017e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00180	ff 50 04	 call	 DWORD PTR [eax+4]
$LN4@WriteSuffi:
  00183	5f		 pop	 edi
  00184	5e		 pop	 esi
  00185	5b		 pop	 ebx
  00186	5d		 pop	 ebp
  00187	c2 08 00	 ret	 8
  0018a	66 90		 npad	 2
$LN32@WriteSuffi:
  0018c	00 00 00 00	 DD	 $LN4@WriteSuffi
  00190	00 00 00 00	 DD	 $LN4@WriteSuffi
  00194	00 00 00 00	 DD	 $LN15@WriteSuffi
  00198	00 00 00 00	 DD	 $LN16@WriteSuffi
  0019c	00 00 00 00	 DD	 $LN17@WriteSuffi
  001a0	00 00 00 00	 DD	 $LN18@WriteSuffi
  001a4	00 00 00 00	 DD	 $LN19@WriteSuffi
  001a8	00 00 00 00	 DD	 $LN20@WriteSuffi
  001ac	00 00 00 00	 DD	 $LN4@WriteSuffi
  001b0	00 00 00 00	 DD	 $LN22@WriteSuffi
  001b4	00 00 00 00	 DD	 $LN15@WriteSuffi
  001b8	00 00 00 00	 DD	 $LN4@WriteSuffi
  001bc	00 00 00 00	 DD	 $LN25@WriteSuffi
  001c0	00 00 00 00	 DD	 $LN12@WriteSuffi
  001c4	00 00 00 00	 DD	 $LN27@WriteSuffi
?WriteSuffix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_t_writer$ = -112					; size = 44
_r_writer$ = -68					; size = 20
_root$ = -48						; size = 16
_r_reader$ = -32					; size = 12
_this$1$ = -20						; size = 4
_t_writer$6$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_t_writer$3$ = 8					; size = 4
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatNumberSequence, COMDAT
; _this$ = ecx

; 507  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 64	 sub	 esp, 100		; 00000064H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 508  :                 ResourceHolderUINT root;

  0002d	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00030	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 143  :             _start = p;

  0003c	8b 7d 08	 mov	 edi, DWORD PTR _number_sequence_str$[ebp]

; 144  :             _p = p + lstrlenW(p) - 1;

  0003f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__lstrlenW@4
  00045	57		 push	 edi

; 52   :             _p = p;

  00046	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _r_reader$[ebp+4], 0

; 142  :         {

  0004d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _r_reader$[ebp], OFFSET ??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@

; 143  :             _start = p;

  00054	89 7d e8	 mov	 DWORD PTR _r_reader$[ebp+8], edi

; 144  :             _p = p + lstrlenW(p) - 1;

  00057	ff d6		 call	 esi
  00059	48		 dec	 eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 510  :                 size_t work_buf_len = lstrlenW(number_sequence_str) * 2 + 1 + _precision + 1;

  0005a	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 144  :             _p = p + lstrlenW(p) - 1;

  0005b	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  0005e	89 45 e4	 mov	 DWORD PTR _r_reader$[ebp+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 510  :                 size_t work_buf_len = lstrlenW(number_sequence_str) * 2 + 1 + _precision + 1;

  00061	ff d6		 call	 esi
  00063	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]

; 511  :                 wchar_t* work_buf = root.AllocateString(work_buf_len);

  00066	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00069	03 c0		 add	 eax, eax
  0006b	83 c6 02	 add	 esi, 2
  0006e	03 f0		 add	 esi, eax
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString

; 512  :                 ReverseStringWriter r_writer(work_buf, work_buf_len);

  00076	56		 push	 esi
  00077	50		 push	 eax
  00078	8d 4d bc	 lea	 ecx, DWORD PTR _r_writer$[ebp]
  0007b	e8 00 00 00 00	 call	 ??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter

; 513  :                 ThousandSeparatedStringWriter t_writer(&r_writer, _format_type, _number_format_info);

  00080	ff 73 14	 push	 DWORD PTR [ebx+20]
  00083	0f b7 43 0c	 movzx	 eax, WORD PTR [ebx+12]
  00087	8d 4d 90	 lea	 ecx, DWORD PTR _t_writer$[ebp]
  0008a	50		 push	 eax
  0008b	8d 45 bc	 lea	 eax, DWORD PTR _r_writer$[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter
  00094	8b 45 b8	 mov	 eax, DWORD PTR _t_writer$[ebp+40]
  00097	8b 7d a4	 mov	 edi, DWORD PTR _t_writer$[ebp+20]
  0009a	8b 5d b4	 mov	 ebx, DWORD PTR _t_writer$[ebp+36]
  0009d	89 45 08	 mov	 DWORD PTR _t_writer$3$[ebp], eax
  000a0	8b 45 b0	 mov	 eax, DWORD PTR _t_writer$[ebp+32]
  000a3	89 45 f0	 mov	 DWORD PTR _t_writer$6$[ebp], eax
$LL2@FormatNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 149  :             if (_p < _start)

  000a6	8b 45 e4	 mov	 eax, DWORD PTR _r_reader$[ebp+4]
  000a9	3b 45 e8	 cmp	 eax, DWORD PTR _r_reader$[ebp+8]
  000ac	72 7f		 jb	 SHORT $LN36@FormatNumb

; 150  :                 return (L'\0');
; 151  :             return (*_p);

  000ae	0f b7 00	 movzx	 eax, WORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 514  :                 while (r_reader.PeekChar() != L'\0')

  000b1	66 85 c0	 test	 ax, ax
  000b4	74 77		 je	 SHORT $LN36@FormatNumb
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 57   :             wchar_t c = PeekChar();

  000b6	8b 45 e0	 mov	 eax, DWORD PTR _r_reader$[ebp]
  000b9	8d 4d e0	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000bc	ff 10		 call	 DWORD PTR [eax]
  000be	0f b7 f0	 movzx	 esi, ax

; 58   :             Progress();

  000c1	8d 4d e0	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000c4	8b 45 e0	 mov	 eax, DWORD PTR _r_reader$[ebp]
  000c7	ff 50 04	 call	 DWORD PTR [eax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 137  :                 if (_is_supported_thousand && c >= L'0' && c <= L'9')

  000ca	f6 45 a8 01	 test	 BYTE PTR _t_writer$[ebp+24], 1
  000ce	74 50		 je	 SHORT $LN17@FormatNumb
  000d0	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  000d3	66 83 f8 09	 cmp	 ax, 9
  000d7	77 47		 ja	 SHORT $LN17@FormatNumb

; 138  :                 {
; 139  :                     // 桁区切りをサポートする場合
; 140  :                     if (_current_group_size > 0 && _current_group_index >= _current_group_size)

  000d9	85 db		 test	 ebx, ebx
  000db	7e 36		 jle	 SHORT $LN19@FormatNumb
  000dd	39 5d 08	 cmp	 DWORD PTR _t_writer$3$[ebp], ebx
  000e0	7c 31		 jl	 SHORT $LN19@FormatNumb

; 141  :                     {
; 142  :                         // 現在のグループ幅が 0 ではなく、かつ既に出力した文字数がグループ幅に達した場合
; 143  : 
; 144  :                         // グループ区切り文字を出力してから与えられた文字を出力する
; 145  :                         _native_writer->Write(_group_separator);

  000e2	8b 07		 mov	 eax, DWORD PTR [edi]
  000e4	8b cf		 mov	 ecx, edi
  000e6	ff 75 ac	 push	 DWORD PTR _t_writer$[ebp+28]
  000e9	ff 10		 call	 DWORD PTR [eax]

; 146  :                         _native_writer->Write(c);

  000eb	8b 07		 mov	 eax, DWORD PTR [edi]
  000ed	8b cf		 mov	 ecx, edi
  000ef	56		 push	 esi
  000f0	ff 50 04	 call	 DWORD PTR [eax+4]

; 147  :                         _current_group_index = 1;
; 148  : 
; 149  :                         // 次のグループが存在すればそのグループに移行する
; 150  :                         if (_current_group[1] != L'\0')

  000f3	8b 45 f0	 mov	 eax, DWORD PTR _t_writer$6$[ebp]
  000f6	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _t_writer$3$[ebp], 1
  000fd	66 83 78 02 00	 cmp	 WORD PTR [eax+2], 0
  00102	74 a2		 je	 SHORT $LL2@FormatNumb

; 151  :                         {
; 152  :                             _current_group += 1;
; 153  :                             _current_group_size = _current_group[0] - L'0';

  00104	0f b7 58 02	 movzx	 ebx, WORD PTR [eax+2]
  00108	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]
  0010b	89 4d f0	 mov	 DWORD PTR _t_writer$6$[ebp], ecx
  0010e	83 eb 30	 sub	 ebx, 48			; 00000030H

; 154  :                         }
; 155  :                     }
; 156  :                     else

  00111	eb 93		 jmp	 SHORT $LL2@FormatNumb
$LN19@FormatNumb:

; 157  :                     {
; 158  :                         // 現在のグループの幅が 0 であるかあるいは出力した文字数がグループ幅に達していない場合
; 159  :                         _native_writer->Write(c);

  00113	8b 07		 mov	 eax, DWORD PTR [edi]
  00115	8b cf		 mov	 ecx, edi
  00117	56		 push	 esi
  00118	ff 50 04	 call	 DWORD PTR [eax+4]

; 160  :                         _current_group_index += 1;

  0011b	ff 45 08	 inc	 DWORD PTR _t_writer$3$[ebp]

; 161  :                     }
; 162  :                 }
; 163  :                 else

  0011e	eb 86		 jmp	 SHORT $LL2@FormatNumb
$LN17@FormatNumb:

; 164  :                 {
; 165  :                     // 桁区切りをサポートしない場合
; 166  : 
; 167  :                     _native_writer->Write(c);

  00120	8b 07		 mov	 eax, DWORD PTR [edi]
  00122	8b cf		 mov	 ecx, edi
  00124	56		 push	 esi
  00125	ff 50 04	 call	 DWORD PTR [eax+4]

; 515  :                     t_writer.Write(r_reader.ReadChar());

  00128	e9 79 ff ff ff	 jmp	 $LL2@FormatNumb
$LN36@FormatNumb:

; 516  :                 writer->Write(t_writer.GetString());

  0012d	8b 5d 0c	 mov	 ebx, DWORD PTR _writer$[ebp]

; 179  :                 return (_native_writer->GetString());

  00130	8b cf		 mov	 ecx, edi

; 516  :                 writer->Write(t_writer.GetString());

  00132	8b 03		 mov	 eax, DWORD PTR [ebx]
  00134	8b 30		 mov	 esi, DWORD PTR [eax]

; 179  :                 return (_native_writer->GetString());

  00136	8b 07		 mov	 eax, DWORD PTR [edi]
  00138	ff 50 08	 call	 DWORD PTR [eax+8]

; 516  :                 writer->Write(t_writer.GetString());

  0013b	50		 push	 eax
  0013c	8b cb		 mov	 ecx, ebx
  0013e	ff d6		 call	 esi

; 517  :                 if (_precision > 0)

  00140	8b 75 ec	 mov	 esi, DWORD PTR _this$1$[ebp]
  00143	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00147	7e 25		 jle	 SHORT $LN27@FormatNumb

; 518  :                 {
; 519  :                     writer->Write(_number_format_info->Currency.DecimalSeparator);

  00149	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014b	8b cb		 mov	 ecx, ebx
  0014d	8b 10		 mov	 edx, DWORD PTR [eax]
  0014f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00152	83 c0 04	 add	 eax, 4
  00155	50		 push	 eax
  00156	ff d2		 call	 edx
  00158	8b 76 10	 mov	 esi, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  0015b	85 f6		 test	 esi, esi
  0015d	74 0f		 je	 SHORT $LN27@FormatNumb
  0015f	90		 npad	 1
$LL26@FormatNumb:

; 228  :             {
; 229  :                 Write(c);

  00160	8b 03		 mov	 eax, DWORD PTR [ebx]
  00162	8b cb		 mov	 ecx, ebx
  00164	6a 30		 push	 48			; 00000030H
  00166	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00169	83 ee 01	 sub	 esi, 1
  0016c	75 f2		 jne	 SHORT $LL26@FormatNumb
$LN27@FormatNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 522  :             }

  0016e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00175	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00178	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0017d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00180	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00187	59		 pop	 ecx
  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	5b		 pop	 ebx
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatNumberSequence
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WritePrefix, COMDAT
; _this$ = ecx

; 424  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 425  :                 if (x_sign >= 0)

  00003	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0000f	7c 3d		 jl	 SHORT $LN6@WritePrefi

; 426  :                 {
; 427  :                     switch (_number_format_info->Currency.PositivePattern)

  00011	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
  00014	83 e8 01	 sub	 eax, 1
  00017	0f 84 4d 01 00
	00		 je	 $LN4@WritePrefi
  0001d	83 e8 01	 sub	 eax, 1
  00020	74 1e		 je	 SHORT $LN10@WritePrefi
  00022	83 e8 01	 sub	 eax, 1
  00025	0f 84 3f 01 00
	00		 je	 $LN4@WritePrefi

; 428  :                     {
; 429  :                     case 0:
; 430  :                     default:
; 431  :                         writer->Write(_number_format_info->CurrencySymbol);

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0002e	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]

; 499  :                     case 15:
; 500  :                         writer->Write(L'(');
; 501  :                         break;
; 502  :                     }
; 503  :                 }
; 504  :             }

  00034	50		 push	 eax
  00035	8b 11		 mov	 edx, DWORD PTR [ecx]
  00037	ff 12		 call	 DWORD PTR [edx]
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
$LN10@WritePrefi:

; 432  :                         break;
; 433  :                     case 1:
; 434  :                         break;
; 435  :                     case 2:
; 436  :                         writer->Write(_number_format_info->CurrencySymbol);

  00040	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00043	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]

; 437  :                         writer->Write(L' ');
; 438  :                         break;
; 439  :                     case 3:
; 440  :                         break;
; 441  :                     }
; 442  :                 }
; 443  :                 else

  00049	e9 8d 00 00 00	 jmp	 $LN34@WritePrefi
$LN6@WritePrefi:

; 444  :                 {
; 445  :                     switch (_number_format_info->Currency.NegativePattern)

  0004e	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
  00051	48		 dec	 eax
  00052	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00055	0f 87 f4 00 00
	00		 ja	 $LN12@WritePrefi
  0005b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN36@WritePrefi[eax*4]
$LN13@WritePrefi:

; 450  :                         writer->Write(_number_format_info->CurrencySymbol);
; 451  :                         break;
; 452  :                     case 1:
; 453  :                         writer->Write(_number_format_info->NegativeSign);

  00062	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00065	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  0006b	50		 push	 eax
  0006c	8b ce		 mov	 ecx, esi
  0006e	8b 16		 mov	 edx, DWORD PTR [esi]
  00070	ff 12		 call	 DWORD PTR [edx]

; 454  :                         writer->Write(_number_format_info->CurrencySymbol);
; 455  :                         break;

  00072	e9 e4 00 00 00	 jmp	 $LN30@WritePrefi
$LN14@WritePrefi:

; 456  :                     case 2:
; 457  :                         writer->Write(_number_format_info->CurrencySymbol);

  00077	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  0007a	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  00080	50		 push	 eax
  00081	8b ce		 mov	 ecx, esi
  00083	8b 16		 mov	 edx, DWORD PTR [esi]
  00085	ff 12		 call	 DWORD PTR [edx]

; 458  :                         writer->Write(_number_format_info->NegativeSign);

  00087	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 499  :                     case 15:
; 500  :                         writer->Write(L'(');
; 501  :                         break;
; 502  :                     }
; 503  :                 }
; 504  :             }

  0008a	8b ce		 mov	 ecx, esi
  0008c	8b 16		 mov	 edx, DWORD PTR [esi]
  0008e	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  00093	50		 push	 eax
  00094	ff 12		 call	 DWORD PTR [edx]
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
$LN15@WritePrefi:
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000a0	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  000a6	50		 push	 eax
  000a7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a9	ff 12		 call	 DWORD PTR [edx]
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
$LN16@WritePrefi:
  000b2	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000b5	6a 28		 push	 40			; 00000028H
  000b7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b9	ff 50 04	 call	 DWORD PTR [eax+4]
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN21@WritePrefi:

; 459  :                         break;
; 460  :                     case 3:
; 461  :                         writer->Write(_number_format_info->NegativeSign);
; 462  :                         break;
; 463  :                     case 4:
; 464  :                         writer->Write(L'(');
; 465  :                         break;
; 466  :                     case 5:
; 467  :                         writer->Write(_number_format_info->NegativeSign);
; 468  :                         break;
; 469  :                     case 6:
; 470  :                         break;
; 471  :                     case 7:
; 472  :                         break;
; 473  :                     case 8:
; 474  :                         writer->Write(_number_format_info->NegativeSign);
; 475  :                         break;
; 476  :                     case 9:
; 477  :                         writer->Write(_number_format_info->NegativeSign);

  000c3	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  000c6	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  000cc	50		 push	 eax
  000cd	8b ce		 mov	 ecx, esi
  000cf	8b 16		 mov	 edx, DWORD PTR [esi]
  000d1	ff 12		 call	 DWORD PTR [edx]
$LN32@WritePrefi:

; 499  :                     case 15:
; 500  :                         writer->Write(L'(');
; 501  :                         break;
; 502  :                     }
; 503  :                 }
; 504  :             }

  000d3	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000d6	05 38 01 00 00	 add	 eax, 312		; 00000138H
$LN34@WritePrefi:
  000db	8b 16		 mov	 edx, DWORD PTR [esi]
  000dd	8b ce		 mov	 ecx, esi
  000df	50		 push	 eax
  000e0	ff 12		 call	 DWORD PTR [edx]
  000e2	8b 06		 mov	 eax, DWORD PTR [esi]
  000e4	8b ce		 mov	 ecx, esi
  000e6	6a 20		 push	 32			; 00000020H
  000e8	ff 50 04	 call	 DWORD PTR [eax+4]
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	5d		 pop	 ebp
  000ef	c2 08 00	 ret	 8
$LN23@WritePrefi:

; 478  :                         writer->Write(_number_format_info->CurrencySymbol);
; 479  :                         writer->Write(L' ');
; 480  :                         break;
; 481  :                     case 10:
; 482  :                         break;
; 483  :                     case 11:
; 484  :                         writer->Write(_number_format_info->CurrencySymbol);

  000f2	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  000f5	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  000fb	50		 push	 eax
  000fc	8b ce		 mov	 ecx, esi
  000fe	8b 16		 mov	 edx, DWORD PTR [esi]
  00100	ff 12		 call	 DWORD PTR [edx]

; 485  :                         writer->Write(L' ');

  00102	8b 06		 mov	 eax, DWORD PTR [esi]
  00104	8b ce		 mov	 ecx, esi
  00106	6a 20		 push	 32			; 00000020H
  00108	ff 50 04	 call	 DWORD PTR [eax+4]
  0010b	5f		 pop	 edi

; 499  :                     case 15:
; 500  :                         writer->Write(L'(');
; 501  :                         break;
; 502  :                     }
; 503  :                 }
; 504  :             }

  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx
  0010e	5d		 pop	 ebp
  0010f	c2 08 00	 ret	 8
$LN24@WritePrefi:

; 486  :                         break;
; 487  :                     case 12:
; 488  :                         writer->Write(_number_format_info->CurrencySymbol);

  00112	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00115	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  0011b	50		 push	 eax
  0011c	8b ce		 mov	 ecx, esi
  0011e	8b 16		 mov	 edx, DWORD PTR [esi]
  00120	ff 12		 call	 DWORD PTR [edx]

; 489  :                         writer->Write(L' ');

  00122	8b 06		 mov	 eax, DWORD PTR [esi]
  00124	8b ce		 mov	 ecx, esi
  00126	6a 20		 push	 32			; 00000020H
  00128	ff 50 04	 call	 DWORD PTR [eax+4]

; 490  :                         writer->Write(_number_format_info->NegativeSign);

  0012b	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 499  :                     case 15:
; 500  :                         writer->Write(L'(');
; 501  :                         break;
; 502  :                     }
; 503  :                 }
; 504  :             }

  0012e	8b ce		 mov	 ecx, esi
  00130	8b 16		 mov	 edx, DWORD PTR [esi]
  00132	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  00137	50		 push	 eax
  00138	ff 12		 call	 DWORD PTR [edx]
  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx
  0013d	5d		 pop	 ebp
  0013e	c2 08 00	 ret	 8
$LN26@WritePrefi:

; 491  :                         break;
; 492  :                     case 13:
; 493  :                         break;
; 494  :                     case 14:
; 495  :                         writer->Write(L'(');

  00141	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00144	8b ce		 mov	 ecx, esi
  00146	6a 28		 push	 40			; 00000028H
  00148	8b 06		 mov	 eax, DWORD PTR [esi]
  0014a	ff 50 04	 call	 DWORD PTR [eax+4]

; 496  :                         writer->Write(_number_format_info->CurrencySymbol);
; 497  :                         writer->Write(L' ');
; 498  :                         break;

  0014d	eb 84		 jmp	 SHORT $LN32@WritePrefi
$LN12@WritePrefi:

; 446  :                     {
; 447  :                     case 0:
; 448  :                     default:
; 449  :                         writer->Write(L'(');

  0014f	8b 75 0c	 mov	 esi, DWORD PTR _writer$[ebp]
  00152	8b ce		 mov	 ecx, esi
  00154	6a 28		 push	 40			; 00000028H
  00156	8b 06		 mov	 eax, DWORD PTR [esi]
  00158	ff 50 04	 call	 DWORD PTR [eax+4]
$LN30@WritePrefi:

; 499  :                     case 15:
; 500  :                         writer->Write(L'(');
; 501  :                         break;
; 502  :                     }
; 503  :                 }
; 504  :             }

  0015b	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0015e	8b ce		 mov	 ecx, esi
  00160	8b 16		 mov	 edx, DWORD PTR [esi]
  00162	05 38 01 00 00	 add	 eax, 312		; 00000138H
  00167	50		 push	 eax
  00168	ff 12		 call	 DWORD PTR [edx]
$LN4@WritePrefi:
  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	5d		 pop	 ebp
  0016e	c2 08 00	 ret	 8
  00171	0f 1f 00	 npad	 3
$LN36@WritePrefi:
  00174	00 00 00 00	 DD	 $LN13@WritePrefi
  00178	00 00 00 00	 DD	 $LN14@WritePrefi
  0017c	00 00 00 00	 DD	 $LN15@WritePrefi
  00180	00 00 00 00	 DD	 $LN16@WritePrefi
  00184	00 00 00 00	 DD	 $LN15@WritePrefi
  00188	00 00 00 00	 DD	 $LN4@WritePrefi
  0018c	00 00 00 00	 DD	 $LN4@WritePrefi
  00190	00 00 00 00	 DD	 $LN15@WritePrefi
  00194	00 00 00 00	 DD	 $LN21@WritePrefi
  00198	00 00 00 00	 DD	 $LN4@WritePrefi
  0019c	00 00 00 00	 DD	 $LN23@WritePrefi
  001a0	00 00 00 00	 DD	 $LN24@WritePrefi
  001a4	00 00 00 00	 DD	 $LN4@WritePrefi
  001a8	00 00 00 00	 DD	 $LN26@WritePrefi
  001ac	00 00 00 00	 DD	 $LN16@WritePrefi
?WritePrefix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WritePrefix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteZeroValue, COMDAT
; _this$ = ecx

; 414  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 415  :                 writer->Write(L'0');

  00004	8b 75 08	 mov	 esi, DWORD PTR _writer$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	6a 30		 push	 48			; 00000030H
  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
  00010	ff 50 04	 call	 DWORD PTR [eax+4]

; 416  :                 if (_precision > 0)

  00013	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00017	7e 25		 jle	 SHORT $LN6@WriteZeroV

; 417  :                 {
; 418  :                     writer->Write(_number_format_info->Currency.DecimalSeparator);

  00019	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0001c	8b ce		 mov	 ecx, esi
  0001e	8b 16		 mov	 edx, DWORD PTR [esi]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	ff 12		 call	 DWORD PTR [edx]
  00026	8b 7f 10	 mov	 edi, DWORD PTR [edi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 227  :             while (count > 0)

  00029	85 ff		 test	 edi, edi
  0002b	74 11		 je	 SHORT $LN6@WriteZeroV
  0002d	0f 1f 00	 npad	 3
$LL5@WriteZeroV:

; 228  :             {
; 229  :                 Write(c);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b ce		 mov	 ecx, esi
  00034	6a 30		 push	 48			; 00000030H
  00036	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  00039	83 ef 01	 sub	 edi, 1
  0003c	75 f2		 jne	 SHORT $LL5@WriteZeroV
$LN6@WriteZeroV:
  0003e	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 421  :             }

  0003f	5e		 pop	 esi
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
?GetDefaultPrecisionValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 410  :                 return (_number_format_info->Currency.DecimalDigits);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8b 00		 mov	 eax, DWORD PTR [eax]

; 411  :             }

  00005	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_precision$ = 8						; size = 4
_number_format_info$ = 12				; size = 4
??0FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatterTypeC, COMDAT
; _this$ = ecx

; 404  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  :                 _format_type = format_type;

  00003	b8 43 00 00 00	 mov	 eax, 67			; 00000043H
  00008	c7 41 04 00 ca
	9a 3b		 mov	 DWORD PTR [ecx+4], 1000000000 ; 3b9aca00H
  0000f	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 205  :                 _precision = precision;

  00013	8b 45 08	 mov	 eax, DWORD PTR _precision$[ebp]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 206  :                 _number_format_info = number_format_info;

  00019	8b 45 0c	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001c	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 405  :             }

  0001f	8b c1		 mov	 eax, ecx

; 188  :             const int digit_count_on_word = 9;

  00021	c7 41 08 09 00
	00 00		 mov	 DWORD PTR [ecx+8], 9

; 404  :             {

  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 405  :             }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
??0FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatterTypeC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_d$ = 12						; size = 4
?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit, COMDAT
; _this$ = ecx

; 392  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 393  :                 writer->Write(L'0' + d);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _d$[ebp]
  00009	83 c0 30	 add	 eax, 48			; 00000030H
  0000c	50		 push	 eax
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	ff 52 04	 call	 DWORD PTR [edx+4]

; 394  :             }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteTrailingWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z
_TEXT	SEGMENT
tv753 = -8						; size = 8
tv736 = -8						; size = 8
tv719 = -8						; size = 8
tv702 = -8						; size = 8
tv685 = -8						; size = 8
tv668 = -8						; size = 8
tv651 = -8						; size = 8
_writer$ = 8						; size = 4
_x$ = 12						; size = 4
?WriteTrailingWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteTrailingWord, COMDAT
; _this$ = ecx

; 332  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 260  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);

  00008	8b 75 0c	 mov	 esi, DWORD PTR _x$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 332  :             {

  0000b	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  0000c	6a 00		 push	 0
  0000e	6a 0a		 push	 10			; 0000000aH
  00010	6a 00		 push	 0
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 __aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00018	8b 5d 08	 mov	 ebx, DWORD PTR _writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  0001b	8b f8		 mov	 edi, eax
  0001d	89 55 fc	 mov	 DWORD PTR tv651[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00020	8b 13		 mov	 edx, DWORD PTR [ebx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00022	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00025	03 c9		 add	 ecx, ecx
  00027	2b f1		 sub	 esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00029	8b cb		 mov	 ecx, ebx
  0002b	83 c6 30	 add	 esi, 48			; 00000030H
  0002e	56		 push	 esi
  0002f	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00032	6a 00		 push	 0
  00034	6a 0a		 push	 10			; 0000000aH
  00036	6a 00		 push	 0
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 __aulldiv
  0003e	8b f0		 mov	 esi, eax
  00040	89 55 fc	 mov	 DWORD PTR tv668[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00043	8b 13		 mov	 edx, DWORD PTR [ebx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00045	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  00048	03 c9		 add	 ecx, ecx
  0004a	2b f9		 sub	 edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0004c	8b cb		 mov	 ecx, ebx
  0004e	83 c7 30	 add	 edi, 48			; 00000030H
  00051	57		 push	 edi
  00052	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00055	6a 00		 push	 0
  00057	6a 0a		 push	 10			; 0000000aH
  00059	6a 00		 push	 0
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 __aulldiv
  00061	8b f8		 mov	 edi, eax
  00063	89 55 fc	 mov	 DWORD PTR tv685[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00066	8b 13		 mov	 edx, DWORD PTR [ebx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00068	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  0006b	03 c9		 add	 ecx, ecx
  0006d	2b f1		 sub	 esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0006f	8b cb		 mov	 ecx, ebx
  00071	83 c6 30	 add	 esi, 48			; 00000030H
  00074	56		 push	 esi
  00075	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00078	6a 00		 push	 0
  0007a	6a 0a		 push	 10			; 0000000aH
  0007c	6a 00		 push	 0
  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 __aulldiv
  00084	8b f0		 mov	 esi, eax
  00086	89 55 fc	 mov	 DWORD PTR tv702[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00089	8b 13		 mov	 edx, DWORD PTR [ebx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  0008b	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  0008e	03 c9		 add	 ecx, ecx
  00090	2b f9		 sub	 edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00092	8b cb		 mov	 ecx, ebx
  00094	83 c7 30	 add	 edi, 48			; 00000030H
  00097	57		 push	 edi
  00098	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  0009b	6a 00		 push	 0
  0009d	6a 0a		 push	 10			; 0000000aH
  0009f	6a 00		 push	 0
  000a1	56		 push	 esi
  000a2	e8 00 00 00 00	 call	 __aulldiv
  000a7	8b f8		 mov	 edi, eax
  000a9	89 55 fc	 mov	 DWORD PTR tv719[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  000ac	8b 13		 mov	 edx, DWORD PTR [ebx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  000ae	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  000b1	03 c9		 add	 ecx, ecx
  000b3	2b f1		 sub	 esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  000b5	8b cb		 mov	 ecx, ebx
  000b7	83 c6 30	 add	 esi, 48			; 00000030H
  000ba	56		 push	 esi
  000bb	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 327  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  000be	b8 05 00 00 00	 mov	 eax, 5
  000c3	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  000c8	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  000cc	6a 00		 push	 0
  000ce	6a 0a		 push	 10			; 0000000aH
  000d0	6a 00		 push	 0
  000d2	57		 push	 edi
  000d3	e8 00 00 00 00	 call	 __aulldiv
  000d8	8b f0		 mov	 esi, eax
  000da	89 55 fc	 mov	 DWORD PTR tv736[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  000dd	8b 13		 mov	 edx, DWORD PTR [ebx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  000df	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  000e2	03 c9		 add	 ecx, ecx
  000e4	2b f9		 sub	 edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  000e6	8b cb		 mov	 ecx, ebx
  000e8	83 c7 30	 add	 edi, 48			; 00000030H
  000eb	57		 push	 edi
  000ec	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  000ef	6a 00		 push	 0
  000f1	6a 0a		 push	 10			; 0000000aH
  000f3	6a 00		 push	 0
  000f5	56		 push	 esi
  000f6	e8 00 00 00 00	 call	 __aulldiv
  000fb	8b d8		 mov	 ebx, eax
  000fd	89 55 fc	 mov	 DWORD PTR tv753[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00100	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00103	8d 0c 9b	 lea	 ecx, DWORD PTR [ebx+ebx*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00106	8b 10		 mov	 edx, DWORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00108	03 c9		 add	 ecx, ecx
  0010a	2b f1		 sub	 esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0010c	8b c8		 mov	 ecx, eax
  0010e	83 c6 30	 add	 esi, 48			; 00000030H
  00111	56		 push	 esi
  00112	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 327  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  00115	b8 02 00 00 00	 mov	 eax, 2
  0011a	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  0011f	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00123	6a 00		 push	 0
  00125	6a 0a		 push	 10			; 0000000aH
  00127	6a 00		 push	 0
  00129	53		 push	 ebx
  0012a	e8 00 00 00 00	 call	 __aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0012f	8b 75 08	 mov	 esi, DWORD PTR _writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00132	66 8b f8	 mov	 di, ax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00135	8b 36		 mov	 esi, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00137	8d 14 bf	 lea	 edx, DWORD PTR [edi+edi*4]
  0013a	03 d2		 add	 edx, edx
  0013c	2b da		 sub	 ebx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0013e	83 c3 30	 add	 ebx, 48			; 00000030H
  00141	53		 push	 ebx
  00142	8b 5d 08	 mov	 ebx, DWORD PTR _writer$[ebp]
  00145	8b cb		 mov	 ecx, ebx
  00147	ff 56 04	 call	 DWORD PTR [esi+4]
  0014a	8b 13		 mov	 edx, DWORD PTR [ebx]
  0014c	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  0014f	50		 push	 eax
  00150	8b cb		 mov	 ecx, ebx
  00152	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 304  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  00155	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 389  :             }

  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 08 00	 ret	 8
?WriteTrailingWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteTrailingWord
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteLeadingOneWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z
_TEXT	SEGMENT
tv182 = -8						; size = 8
_writer$ = 8						; size = 4
_x$ = 12						; size = 4
?WriteLeadingOneWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteLeadingOneWord, COMDAT
; _this$ = ecx

; 315  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _writer$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 0c	 mov	 esi, DWORD PTR _x$[ebp]
  0000e	57		 push	 edi
  0000f	90		 npad	 1
$LL4@WriteLeadi:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 262  :             return ((_UINT32_T)(t / v));

  00010	6a 00		 push	 0
  00012	6a 0a		 push	 10			; 0000000aH
  00014	6a 00		 push	 0
  00016	8b fe		 mov	 edi, esi
  00018	57		 push	 edi
  00019	e8 00 00 00 00	 call	 __aulldiv
  0001e	8b f0		 mov	 esi, eax
  00020	89 55 fc	 mov	 DWORD PTR tv182[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00023	8b 13		 mov	 edx, DWORD PTR [ebx]
  00025	8b cb		 mov	 ecx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00027	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  0002a	03 c0		 add	 eax, eax
  0002c	2b f8		 sub	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0002e	83 c7 30	 add	 edi, 48			; 00000030H
  00031	57		 push	 edi
  00032	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 304  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  00035	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 327  :                 } while (x != 0);

  0003c	85 f6		 test	 esi, esi
  0003e	75 d0		 jne	 SHORT $LL4@WriteLeadi

; 328  :             }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?WriteLeadingOneWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteLeadingOneWord
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ConstructSimpleNumberSequence@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEPA_WPAIIPA_WI@Z
_TEXT	SEGMENT
_simple_number_sequence_writer$ = -28			; size = 20
tv903 = -8						; size = 8
tv872 = -8						; size = 8
tv855 = -8						; size = 8
tv838 = -8						; size = 8
tv821 = -8						; size = 8
tv804 = -8						; size = 8
tv787 = -8						; size = 8
tv770 = -8						; size = 8
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_in_count$1$ = 20					; size = 4
_out_buf_count$ = 20					; size = 4
?ConstructSimpleNumberSequence@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEPA_WPAIIPA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConstructSimpleNumberSequence, COMDAT
; _this$ = ecx

; 298  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 299  :                 ReverseStringWriter simple_number_sequence_writer(out_buf, out_buf_count);

  00009	ff 75 14	 push	 DWORD PTR _out_buf_count$[ebp]
  0000c	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  0000f	ff 75 10	 push	 DWORD PTR _out_buf$[ebp]
  00012	e8 00 00 00 00	 call	 ??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter

; 300  : 
; 301  :                 __UNIT_TYPE* in_ptr = in_buf;
; 302  :                 __UNIT_TYPE in_count = in_buf_count - 1;

  00017	8b 45 0c	 mov	 eax, DWORD PTR _in_buf_count$[ebp]
  0001a	8b 5d 08	 mov	 ebx, DWORD PTR _in_buf$[ebp]
  0001d	83 c0 ff	 add	 eax, -1
  00020	89 45 14	 mov	 DWORD PTR _in_count$1$[ebp], eax

; 303  :                 while (in_count != 0)

  00023	0f 84 6c 01 00
	00		 je	 $LN3@ConstructS
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@ConstructS:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00030	8b 33		 mov	 esi, DWORD PTR [ebx]

; 261  :             *r = (_UINT32_T)(t % v);

  00032	6a 00		 push	 0
  00034	6a 0a		 push	 10			; 0000000aH
  00036	6a 00		 push	 0
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 __aulldiv
  0003e	8b f8		 mov	 edi, eax
  00040	89 55 fc	 mov	 DWORD PTR tv770[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00043	8b 55 e4	 mov	 edx, DWORD PTR _simple_number_sequence_writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00046	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00049	03 c9		 add	 ecx, ecx
  0004b	2b f1		 sub	 esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0004d	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  00050	83 c6 30	 add	 esi, 48			; 00000030H
  00053	56		 push	 esi
  00054	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00057	6a 00		 push	 0
  00059	6a 0a		 push	 10			; 0000000aH
  0005b	6a 00		 push	 0
  0005d	57		 push	 edi
  0005e	e8 00 00 00 00	 call	 __aulldiv
  00063	8b f0		 mov	 esi, eax
  00065	89 55 fc	 mov	 DWORD PTR tv787[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00068	8b 55 e4	 mov	 edx, DWORD PTR _simple_number_sequence_writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  0006b	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  0006e	03 c9		 add	 ecx, ecx
  00070	2b f9		 sub	 edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00072	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  00075	83 c7 30	 add	 edi, 48			; 00000030H
  00078	57		 push	 edi
  00079	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  0007c	6a 00		 push	 0
  0007e	6a 0a		 push	 10			; 0000000aH
  00080	6a 00		 push	 0
  00082	56		 push	 esi
  00083	e8 00 00 00 00	 call	 __aulldiv
  00088	8b f8		 mov	 edi, eax
  0008a	89 55 fc	 mov	 DWORD PTR tv804[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0008d	8b 55 e4	 mov	 edx, DWORD PTR _simple_number_sequence_writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00090	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00093	03 c9		 add	 ecx, ecx
  00095	2b f1		 sub	 esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00097	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  0009a	83 c6 30	 add	 esi, 48			; 00000030H
  0009d	56		 push	 esi
  0009e	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  000a1	6a 00		 push	 0
  000a3	6a 0a		 push	 10			; 0000000aH
  000a5	6a 00		 push	 0
  000a7	57		 push	 edi
  000a8	e8 00 00 00 00	 call	 __aulldiv
  000ad	8b f0		 mov	 esi, eax
  000af	89 55 fc	 mov	 DWORD PTR tv821[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  000b2	8b 55 e4	 mov	 edx, DWORD PTR _simple_number_sequence_writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  000b5	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  000b8	03 c9		 add	 ecx, ecx
  000ba	2b f9		 sub	 edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  000bc	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  000bf	83 c7 30	 add	 edi, 48			; 00000030H
  000c2	57		 push	 edi
  000c3	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  000c6	6a 00		 push	 0
  000c8	6a 0a		 push	 10			; 0000000aH
  000ca	6a 00		 push	 0
  000cc	56		 push	 esi
  000cd	e8 00 00 00 00	 call	 __aulldiv
  000d2	8b f8		 mov	 edi, eax
  000d4	89 55 fc	 mov	 DWORD PTR tv838[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  000d7	8b 55 e4	 mov	 edx, DWORD PTR _simple_number_sequence_writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  000da	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  000dd	03 c9		 add	 ecx, ecx
  000df	2b f1		 sub	 esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  000e1	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  000e4	83 c6 30	 add	 esi, 48			; 00000030H
  000e7	56		 push	 esi
  000e8	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 327  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  000eb	b8 05 00 00 00	 mov	 eax, 5
  000f0	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  000f5	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  000f9	6a 00		 push	 0
  000fb	6a 0a		 push	 10			; 0000000aH
  000fd	6a 00		 push	 0
  000ff	57		 push	 edi
  00100	e8 00 00 00 00	 call	 __aulldiv
  00105	8b f0		 mov	 esi, eax
  00107	89 55 fc	 mov	 DWORD PTR tv855[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0010a	8b 55 e4	 mov	 edx, DWORD PTR _simple_number_sequence_writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  0010d	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  00110	03 c9		 add	 ecx, ecx
  00112	2b f9		 sub	 edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00114	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  00117	83 c7 30	 add	 edi, 48			; 00000030H
  0011a	57		 push	 edi
  0011b	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  0011e	6a 00		 push	 0
  00120	6a 0a		 push	 10			; 0000000aH
  00122	6a 00		 push	 0
  00124	56		 push	 esi
  00125	e8 00 00 00 00	 call	 __aulldiv
  0012a	8b f8		 mov	 edi, eax
  0012c	89 55 fc	 mov	 DWORD PTR tv872[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0012f	8b 55 e4	 mov	 edx, DWORD PTR _simple_number_sequence_writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00132	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00135	03 c9		 add	 ecx, ecx
  00137	2b f1		 sub	 esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  00139	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  0013c	83 c6 30	 add	 esi, 48			; 00000030H
  0013f	56		 push	 esi
  00140	ff 52 04	 call	 DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 327  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  00143	b8 02 00 00 00	 mov	 eax, 2
  00148	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  0014d	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00151	6a 00		 push	 0
  00153	6a 0a		 push	 10			; 0000000aH
  00155	6a 00		 push	 0
  00157	57		 push	 edi
  00158	e8 00 00 00 00	 call	 __aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0015d	8b 55 e4	 mov	 edx, DWORD PTR _simple_number_sequence_writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00160	66 8b f0	 mov	 si, ax
  00163	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  00166	03 c9		 add	 ecx, ecx
  00168	2b f9		 sub	 edi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  0016a	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  0016d	83 c7 30	 add	 edi, 48			; 00000030H
  00170	57		 push	 edi
  00171	ff 52 04	 call	 DWORD PTR [edx+4]
  00174	8d 46 30	 lea	 eax, DWORD PTR [esi+48]
  00177	50		 push	 eax
  00178	8b 45 e4	 mov	 eax, DWORD PTR _simple_number_sequence_writer$[ebp]
  0017b	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  0017e	ff 50 04	 call	 DWORD PTR [eax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 304  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  00181	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 306  :                     ++in_ptr;

  00188	83 c3 04	 add	 ebx, 4

; 307  :                     --in_count;

  0018b	83 6d 14 01	 sub	 DWORD PTR _in_count$1$[ebp], 1
  0018f	0f 85 9b fe ff
	ff		 jne	 $LL2@ConstructS
$LN3@ConstructS:

; 308  :                 }
; 309  :                 WriteLeadingOneWord(&simple_number_sequence_writer, *in_ptr);

  00195	8b 33		 mov	 esi, DWORD PTR [ebx]
$LL148@ConstructS:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 262  :             return ((_UINT32_T)(t / v));

  00197	6a 00		 push	 0
  00199	6a 0a		 push	 10			; 0000000aH
  0019b	6a 00		 push	 0
  0019d	8b fe		 mov	 edi, esi
  0019f	57		 push	 edi
  001a0	e8 00 00 00 00	 call	 __aulldiv
  001a5	8b f0		 mov	 esi, eax
  001a7	89 55 fc	 mov	 DWORD PTR tv903[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  001aa	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  001ad	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  001b0	03 c0		 add	 eax, eax
  001b2	2b f8		 sub	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 393  :                 writer->Write(L'0' + d);

  001b4	8b 45 e4	 mov	 eax, DWORD PTR _simple_number_sequence_writer$[ebp]
  001b7	83 c7 30	 add	 edi, 48			; 00000030H
  001ba	57		 push	 edi
  001bb	ff 50 04	 call	 DWORD PTR [eax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 304  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  001be	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 327  :                 } while (x != 0);

  001c5	85 f6		 test	 esi, esi
  001c7	75 ce		 jne	 SHORT $LL148@ConstructS

; 310  :                 return (simple_number_sequence_writer.GetString());

  001c9	8b 45 e8	 mov	 eax, DWORD PTR _simple_number_sequence_writer$[ebp+4]
  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx

; 311  :             }

  001cf	8b e5		 mov	 esp, ebp
  001d1	5d		 pop	 ebp
  001d2	c2 10 00	 ret	 16			; 00000010H
?ConstructSimpleNumberSequence@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEPA_WPAIIPA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConstructSimpleNumberSequence
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z
_TEXT	SEGMENT
_root$ = -40						; size = 16
_this$1$ = -24						; size = 4
_q_ptr$1$ = -20						; size = 4
_r_value$2 = -20					; size = 4
_work_bit_count$1$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
_u_ptr$1$ = 8						; size = 4
_x$ = 8							; size = 4
_r_buf$ = 12						; size = 4
?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConvertAs10nBasedNumber, COMDAT
; _this$ = ecx

; 273  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d e8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 274  :                 ResourceHolderUINT root;

  0002b	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 275  :                 __UNIT_TYPE work_bit_count = x->UNIT_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;
; 276  :                 __UNIT_TYPE* u_ptr = root.AllocateBlock(work_bit_count);

  0003a	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  0003d	8b 5d 08	 mov	 ebx, DWORD PTR _x$[ebp]
  00040	8b 73 14	 mov	 esi, DWORD PTR [ebx+20]
  00043	83 c6 20	 add	 esi, 32			; 00000020H
  00046	56		 push	 esi
  00047	89 75 f0	 mov	 DWORD PTR _work_bit_count$1$[ebp], esi
  0004a	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0004f	8b f8		 mov	 edi, eax

; 277  :                 __UNIT_TYPE* q_ptr = root.AllocateBlock(work_bit_count);

  00051	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00054	56		 push	 esi
  00055	89 7d 08	 mov	 DWORD PTR _u_ptr$1$[ebp], edi
  00058	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0005d	8b 73 24	 mov	 esi, DWORD PTR [ebx+36]
  00060	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  00063	f3 a5		 rep movsd

; 157  :             return ((u + v - 1) / v);

  00065	8b 75 f0	 mov	 esi, DWORD PTR _work_bit_count$1$[ebp]
  00068	83 c6 1f	 add	 esi, 31			; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 277  :                 __UNIT_TYPE* q_ptr = root.AllocateBlock(work_bit_count);

  0006b	89 45 ec	 mov	 DWORD PTR _q_ptr$1$[ebp], eax

; 278  :                 _COPY_MEMORY_UNIT(u_ptr, x->BLOCK, x->BLOCK_COUNT);
; 279  :                 __UNIT_TYPE* r_ptr = r_buf;

  0006e	8b 45 0c	 mov	 eax, DWORD PTR _r_buf$[ebp]
  00071	8b f8		 mov	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 157  :             return ((u + v - 1) / v);

  00073	c1 ee 05	 shr	 esi, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 281  :                 while (work_u_count > 0)

  00076	85 f6		 test	 esi, esi
  00078	74 57		 je	 SHORT $LN23@ConvertAs1
  0007a	8b 5d ec	 mov	 ebx, DWORD PTR _q_ptr$1$[ebp]
  0007d	0f 1f 00	 npad	 3
$LL2@ConvertAs1:

; 282  :                 {
; 283  :                     root.ClearBlock(q_ptr);

  00080	53		 push	 ebx
  00081	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00084	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 284  :                     __UNIT_TYPE r_value;
; 285  :                     DivRem_X_1W(u_ptr, work_u_count, _10n_base_number, q_ptr, &r_value);

  00089	8d 45 ec	 lea	 eax, DWORD PTR _r_value$2[ebp]
  0008c	50		 push	 eax
  0008d	8b 45 e8	 mov	 eax, DWORD PTR _this$1$[ebp]
  00090	53		 push	 ebx
  00091	ff 70 04	 push	 DWORD PTR [eax+4]
  00094	56		 push	 esi
  00095	ff 75 08	 push	 DWORD PTR _u_ptr$1$[ebp]
  00098	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  0009d	83 c4 14	 add	 esp, 20			; 00000014H

; 286  :                     root.CheckBlock(q_ptr);

  000a0	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000a3	53		 push	 ebx
  000a4	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 287  :                     *r_ptr++ = r_value;

  000a9	8b 45 ec	 mov	 eax, DWORD PTR _r_value$2[ebp]

; 288  :                     __UNIT_TYPE* temp = u_ptr;
; 289  :                     u_ptr = q_ptr;

  000ac	8b cb		 mov	 ecx, ebx
  000ae	89 07		 mov	 DWORD PTR [edi], eax
  000b0	83 c7 04	 add	 edi, 4
  000b3	8b 45 08	 mov	 eax, DWORD PTR _u_ptr$1$[ebp]

; 290  :                     q_ptr = temp;

  000b6	8b d8		 mov	 ebx, eax
  000b8	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  000bb	89 4d 08	 mov	 DWORD PTR _u_ptr$1$[ebp], ecx
  000be	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
$LL4@ConvertAs1:

; 291  :                     while (work_u_count > 0 && u_ptr[work_u_count - 1] == 0)

  000c1	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c4	75 ba		 jne	 SHORT $LL2@ConvertAs1

; 292  :                         --work_u_count;

  000c6	83 e8 04	 sub	 eax, 4
  000c9	83 ee 01	 sub	 esi, 1
  000cc	75 f3		 jne	 SHORT $LL4@ConvertAs1
  000ce	8b 45 0c	 mov	 eax, DWORD PTR _r_buf$[ebp]
$LN23@ConvertAs1:

; 293  :                 }
; 294  :                 return (r_ptr - r_buf);

  000d1	2b f8		 sub	 edi, eax
  000d3	c1 ff 02	 sar	 edi, 2
  000d6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000dd	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000e0	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000e5	8b c7		 mov	 eax, edi

; 295  :             }

  000e7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ea	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f1	59		 pop	 ecx
  000f2	5f		 pop	 edi
  000f3	5e		 pop	 esi
  000f4	5b		 pop	 ebx
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConvertAs10nBasedNumber
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
_TEXT	SEGMENT
_root$ = -60						; size = 16
_root$2 = -44						; size = 16
_q_ptr$1$ = -28						; size = 4
__10n_based_number_buf_count$1$ = -28			; size = 4
_this$1$ = -24						; size = 4
_u_ptr$1$ = -20						; size = 4
__10n_based_number_buf$1$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
_r_value$3 = 8						; size = 4
_x_abs$ = 8						; size = 4
_writer$ = 12						; size = 4
?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally, COMDAT
; _this$ = ecx

; 246  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d e8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 247  :                 ResourceHolderUINT root;

  0002b	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 249  :                 __UNIT_TYPE* _10n_based_number_buf = root.AllocateBlock(_10n_based_number_bit_count);

  0003a	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 157  :             return ((u + v - 1) / v);

  0003d	8b 75 08	 mov	 esi, DWORD PTR _x_abs$[ebp]
  00040	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00043	8d 50 07	 lea	 edx, DWORD PTR [eax+7]
  00046	c1 ea 03	 shr	 edx, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 248  :                 __UNIT_TYPE _10n_based_number_bit_count = x_abs->UNIT_BIT_COUNT + _DIVIDE_CEILING_UNIT(x_abs->UNIT_BIT_COUNT, 8);

  00049	03 d0		 add	 edx, eax

; 249  :                 __UNIT_TYPE* _10n_based_number_buf = root.AllocateBlock(_10n_based_number_bit_count);

  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock

; 274  :                 ResourceHolderUINT root;

  00051	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]

; 249  :                 __UNIT_TYPE* _10n_based_number_buf = root.AllocateBlock(_10n_based_number_bit_count);

  00054	89 45 f0	 mov	 DWORD PTR __10n_based_number_buf$1$[ebp], eax

; 274  :                 ResourceHolderUINT root;

  00057	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0005c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 275  :                 __UNIT_TYPE work_bit_count = x->UNIT_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;
; 276  :                 __UNIT_TYPE* u_ptr = root.AllocateBlock(work_bit_count);

  00060	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00063	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00066	83 c3 20	 add	 ebx, 32			; 00000020H
  00069	53		 push	 ebx
  0006a	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0006f	8b f8		 mov	 edi, eax

; 277  :                 __UNIT_TYPE* q_ptr = root.AllocateBlock(work_bit_count);

  00071	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00074	53		 push	 ebx
  00075	89 7d ec	 mov	 DWORD PTR _u_ptr$1$[ebp], edi
  00078	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _x_abs$[ebp]
  00080	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 277  :                 __UNIT_TYPE* q_ptr = root.AllocateBlock(work_bit_count);

  00083	89 45 e4	 mov	 DWORD PTR _q_ptr$1$[ebp], eax

; 279  :                 __UNIT_TYPE* r_ptr = r_buf;

  00086	8b 45 f0	 mov	 eax, DWORD PTR __10n_based_number_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00089	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0008c	f3 a5		 rep movsd

; 157  :             return ((u + v - 1) / v);

  0008e	8d 73 1f	 lea	 esi, DWORD PTR [ebx+31]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 279  :                 __UNIT_TYPE* r_ptr = r_buf;

  00091	8b f8		 mov	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 157  :             return ((u + v - 1) / v);

  00093	c1 ee 05	 shr	 esi, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 281  :                 while (work_u_count > 0)

  00096	85 f6		 test	 esi, esi
  00098	74 57		 je	 SHORT $LN28@FormatInte
  0009a	8b 5d e4	 mov	 ebx, DWORD PTR _q_ptr$1$[ebp]
  0009d	0f 1f 00	 npad	 3
$LL7@FormatInte:

; 282  :                 {
; 283  :                     root.ClearBlock(q_ptr);

  000a0	53		 push	 ebx
  000a1	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000a4	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 284  :                     __UNIT_TYPE r_value;
; 285  :                     DivRem_X_1W(u_ptr, work_u_count, _10n_base_number, q_ptr, &r_value);

  000a9	8d 45 08	 lea	 eax, DWORD PTR _r_value$3[ebp]
  000ac	50		 push	 eax
  000ad	8b 45 e8	 mov	 eax, DWORD PTR _this$1$[ebp]
  000b0	53		 push	 ebx
  000b1	ff 70 04	 push	 DWORD PTR [eax+4]
  000b4	56		 push	 esi
  000b5	ff 75 ec	 push	 DWORD PTR _u_ptr$1$[ebp]
  000b8	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  000bd	83 c4 14	 add	 esp, 20			; 00000014H

; 286  :                     root.CheckBlock(q_ptr);

  000c0	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000c3	53		 push	 ebx
  000c4	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 287  :                     *r_ptr++ = r_value;

  000c9	8b 45 08	 mov	 eax, DWORD PTR _r_value$3[ebp]

; 288  :                     __UNIT_TYPE* temp = u_ptr;
; 289  :                     u_ptr = q_ptr;

  000cc	8b cb		 mov	 ecx, ebx
  000ce	89 07		 mov	 DWORD PTR [edi], eax
  000d0	83 c7 04	 add	 edi, 4
  000d3	8b 45 ec	 mov	 eax, DWORD PTR _u_ptr$1$[ebp]

; 290  :                     q_ptr = temp;

  000d6	8b d8		 mov	 ebx, eax
  000d8	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  000db	89 4d ec	 mov	 DWORD PTR _u_ptr$1$[ebp], ecx
  000de	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
$LL9@FormatInte:

; 291  :                     while (work_u_count > 0 && u_ptr[work_u_count - 1] == 0)

  000e1	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e4	75 ba		 jne	 SHORT $LL7@FormatInte

; 292  :                         --work_u_count;

  000e6	83 e8 04	 sub	 eax, 4
  000e9	83 ee 01	 sub	 esi, 1
  000ec	75 f3		 jne	 SHORT $LL9@FormatInte
  000ee	8b 45 f0	 mov	 eax, DWORD PTR __10n_based_number_buf$1$[ebp]
$LN28@FormatInte:

; 293  :                 }
; 294  :                 return (r_ptr - r_buf);

  000f1	2b f8		 sub	 edi, eax
  000f3	c1 ff 02	 sar	 edi, 2
  000f6	89 7d e4	 mov	 DWORD PTR __10n_based_number_buf_count$1$[ebp], edi
  000f9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000fd	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00100	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT

; 250  :                 __UNIT_TYPE _10n_based_number_buf_count = ConvertAs10nBasedNumber(x_abs, _10n_based_number_buf);
; 251  :                 __UNIT_TYPE simple_number_sequence_buf_size = digit_count_on_word * _10n_based_number_buf_count + 1;

  00105	8b 5d e8	 mov	 ebx, DWORD PTR _this$1$[ebp]

; 252  :                 wchar_t* simple_number_sequence = root.AllocateString(simple_number_sequence_buf_size);

  00108	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  0010b	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  0010e	0f af f7	 imul	 esi, edi
  00111	46		 inc	 esi
  00112	56		 push	 esi
  00113	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString

; 253  :                 wchar_t* top_of_simple_number_sequence = ConstructSimpleNumberSequence(_10n_based_number_buf, _10n_based_number_buf_count, simple_number_sequence, simple_number_sequence_buf_size);

  00118	56		 push	 esi
  00119	8b f8		 mov	 edi, eax
  0011b	8b cb		 mov	 ecx, ebx
  0011d	57		 push	 edi
  0011e	ff 75 e4	 push	 DWORD PTR __10n_based_number_buf_count$1$[ebp]
  00121	ff 75 f0	 push	 DWORD PTR __10n_based_number_buf$1$[ebp]
  00124	e8 00 00 00 00	 call	 ?ConstructSimpleNumberSequence@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEPA_WPAIIPA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConstructSimpleNumberSequence

; 254  :                 root.DeallocateBlock(_10n_based_number_buf);

  00129	ff 75 f0	 push	 DWORD PTR __10n_based_number_buf$1$[ebp]
  0012c	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  0012f	8b f0		 mov	 esi, eax
  00131	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 255  :                 FormatNumberSequence(top_of_simple_number_sequence, writer);

  00136	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00138	ff 75 0c	 push	 DWORD PTR _writer$[ebp]
  0013b	56		 push	 esi
  0013c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0013f	8b cb		 mov	 ecx, ebx
  00141	ff d2		 call	 edx

; 256  :                 root.DeallocateString(simple_number_sequence);

  00143	57		 push	 edi
  00144	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  00147	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 257  :             }

  0014c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00153	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  00156	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0015b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00165	59		 pop	 ecx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR _root$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_writer$ = 16						; size = 4
?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format, COMDAT
; _this$ = ecx

; 211  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 212  :                 if (_precision < 0)

  0000a	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0000e	7d 07		 jge	 SHORT $LN2@Format

; 213  :                     _precision = GetDefaultPrecisionValue();

  00010	8b 07		 mov	 eax, DWORD PTR [edi]
  00012	ff 10		 call	 DWORD PTR [eax]
  00014	89 47 10	 mov	 DWORD PTR [edi+16], eax
$LN2@Format:

; 214  :                 if (x_abs->IS_ZERO)

  00017	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  0001a	f6 40 04 01	 test	 BYTE PTR [eax+4], 1
  0001e	74 2d		 je	 SHORT $LN3@Format

; 215  :                 {
; 216  :                     // x == 0 の場合
; 217  :                     if (x_sign != 0)

  00020	80 7d 08 00	 cmp	 BYTE PTR _x_sign$[ebp], 0
  00024	75 58		 jne	 SHORT $LN9@Format

; 218  :                         throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_tostring.cpp;Formatter::Format;1");
; 219  :                     WritePrefix(x_sign, writer);

  00026	8b 07		 mov	 eax, DWORD PTR [edi]
  00028	8b cf		 mov	 ecx, edi
  0002a	8b 75 10	 mov	 esi, DWORD PTR _writer$[ebp]
  0002d	56		 push	 esi
  0002e	6a 00		 push	 0
  00030	ff 50 0c	 call	 DWORD PTR [eax+12]

; 220  :                     WriteZeroValue(writer);

  00033	8b 07		 mov	 eax, DWORD PTR [edi]
  00035	8b cf		 mov	 ecx, edi
  00037	56		 push	 esi
  00038	ff 50 08	 call	 DWORD PTR [eax+8]

; 221  :                     WriteSuffix(x_sign, writer);

  0003b	8b 07		 mov	 eax, DWORD PTR [edi]
  0003d	8b cf		 mov	 ecx, edi
  0003f	56		 push	 esi
  00040	6a 00		 push	 0
  00042	ff 50 14	 call	 DWORD PTR [eax+20]
  00045	5f		 pop	 edi

; 232  :                 }
; 233  :             }

  00046	5e		 pop	 esi
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN3@Format:
  0004d	53		 push	 ebx

; 222  :                 }
; 223  :                 else
; 224  :                 {
; 225  :                     // x != 0 の場合
; 226  :                     if (x_sign == 0)

  0004e	8b 5d 08	 mov	 ebx, DWORD PTR _x_sign$[ebp]
  00051	84 db		 test	 bl, bl
  00053	74 29		 je	 SHORT $LN9@Format

; 227  :                         throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_tostring.cpp;Formatter::Format;1");
; 228  : 
; 229  :                     WritePrefix(x_sign, writer);

  00055	8b 07		 mov	 eax, DWORD PTR [edi]
  00057	8b cf		 mov	 ecx, edi
  00059	8b 75 10	 mov	 esi, DWORD PTR _writer$[ebp]
  0005c	56		 push	 esi
  0005d	53		 push	 ebx
  0005e	ff 50 0c	 call	 DWORD PTR [eax+12]

; 230  :                     FormatInternally(x_abs, writer);

  00061	8b 07		 mov	 eax, DWORD PTR [edi]
  00063	8b cf		 mov	 ecx, edi
  00065	56		 push	 esi
  00066	ff 75 0c	 push	 DWORD PTR _x_abs$[ebp]
  00069	ff 50 04	 call	 DWORD PTR [eax+4]

; 231  :                     WriteSuffix(x_sign, writer);

  0006c	8b 07		 mov	 eax, DWORD PTR [edi]
  0006e	8b cf		 mov	 ecx, edi
  00070	56		 push	 esi
  00071	53		 push	 ebx
  00072	ff 50 14	 call	 DWORD PTR [eax+20]
  00075	5b		 pop	 ebx
  00076	5f		 pop	 edi

; 232  :                 }
; 233  :             }

  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 0c 00	 ret	 12			; 0000000cH
$LN9@Format:
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@CCPHDNPL@?$AAp?$AAm?$AAc?$AA_?$AAt?$AAo?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?4?$AAc?$AAp@
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00088	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  0008b	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00090	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00095	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@Format:
  0009e	cc		 int	 3
?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_format_type$ = 8					; size = 2
_precision$ = 12					; size = 4
_number_format_info$ = 16				; size = 4
??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter, COMDAT
; _this$ = ecx

; 202  :             Formatter(wchar_t format_type, int precision, const PMC_NUMBER_FORMAT_INFO* number_format_info)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 203  :             {
; 204  :                 _format_type = format_type;

  00003	66 8b 45 08	 mov	 ax, WORD PTR _format_type$[ebp]
  00007	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 205  :                 _precision = precision;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _precision$[ebp]
  0000e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 206  :                 _number_format_info = number_format_info;

  00011	8b 45 10	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  00014	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 207  :             }

  00017	8b c1		 mov	 eax, ecx
  00019	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
  0001f	c7 41 04 00 ca
	9a 3b		 mov	 DWORD PTR [ecx+4], 1000000000 ; 3b9aca00H
  00026	c7 41 08 09 00
	00 00		 mov	 DWORD PTR [ecx+8], 9
  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
_TEXT	SEGMENT
?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::GetString, COMDAT
; _this$ = ecx

; 179  :                 return (_native_writer->GetString());

  00000	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	ff 60 08	 jmp	 DWORD PTR [eax+8]
?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write, COMDAT
; _this$ = ecx

; 172  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 173  :                 while (*str != L'\0')

  00004	8b 75 08	 mov	 esi, DWORD PTR _str$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0000d	66 85 c0	 test	 ax, ax
  00010	74 17		 je	 SHORT $LN3@Write
  00012	8b c8		 mov	 ecx, eax
$LL2@Write:

; 174  :                     Write(*str++);

  00014	8b 07		 mov	 eax, DWORD PTR [edi]
  00016	8d 76 02	 lea	 esi, DWORD PTR [esi+2]
  00019	51		 push	 ecx
  0001a	8b cf		 mov	 ecx, edi
  0001c	ff 50 04	 call	 DWORD PTR [eax+4]
  0001f	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00022	8b c8		 mov	 ecx, eax
  00024	66 85 c0	 test	 ax, ax
  00027	75 eb		 jne	 SHORT $LL2@Write
$LN3@Write:
  00029	5f		 pop	 edi

; 175  :             }

  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write, COMDAT
; _this$ = ecx

; 136  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 137  :                 if (_is_supported_thousand && c >= L'0' && c <= L'9')

  00007	8b 7d 08	 mov	 edi, DWORD PTR _c$[ebp]
  0000a	f6 46 18 01	 test	 BYTE PTR [esi+24], 1
  0000e	74 5f		 je	 SHORT $LN2@Write
  00010	8d 47 d0	 lea	 eax, DWORD PTR [edi-48]
  00013	66 83 f8 09	 cmp	 ax, 9
  00017	77 56		 ja	 SHORT $LN2@Write

; 138  :                 {
; 139  :                     // 桁区切りをサポートする場合
; 140  :                     if (_current_group_size > 0 && _current_group_index >= _current_group_size)

  00019	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0001c	85 c0		 test	 eax, eax
  0001e	7e 3d		 jle	 SHORT $LN9@Write
  00020	39 46 28	 cmp	 DWORD PTR [esi+40], eax
  00023	7c 38		 jl	 SHORT $LN9@Write

; 141  :                     {
; 142  :                         // 現在のグループ幅が 0 ではなく、かつ既に出力した文字数がグループ幅に達した場合
; 143  : 
; 144  :                         // グループ区切り文字を出力してから与えられた文字を出力する
; 145  :                         _native_writer->Write(_group_separator);

  00025	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00028	ff 76 1c	 push	 DWORD PTR [esi+28]
  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	ff 10		 call	 DWORD PTR [eax]

; 146  :                         _native_writer->Write(c);

  0002f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00032	57		 push	 edi
  00033	8b 01		 mov	 eax, DWORD PTR [ecx]
  00035	ff 50 04	 call	 DWORD PTR [eax+4]

; 147  :                         _current_group_index = 1;
; 148  : 
; 149  :                         // 次のグループが存在すればそのグループに移行する
; 150  :                         if (_current_group[1] != L'\0')

  00038	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0003b	83 c0 02	 add	 eax, 2
  0003e	c7 46 28 01 00
	00 00		 mov	 DWORD PTR [esi+40], 1
  00045	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00049	74 2d		 je	 SHORT $LN3@Write

; 151  :                         {
; 152  :                             _current_group += 1;

  0004b	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 153  :                             _current_group_size = _current_group[0] - L'0';

  0004e	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00051	83 e8 30	 sub	 eax, 48			; 00000030H
  00054	5f		 pop	 edi
  00055	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 168  :                 }
; 169  :             }

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
$LN9@Write:

; 154  :                         }
; 155  :                     }
; 156  :                     else
; 157  :                     {
; 158  :                         // 現在のグループの幅が 0 であるかあるいは出力した文字数がグループ幅に達していない場合
; 159  :                         _native_writer->Write(c);

  0005d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00060	57		 push	 edi
  00061	8b 01		 mov	 eax, DWORD PTR [ecx]
  00063	ff 50 04	 call	 DWORD PTR [eax+4]

; 160  :                         _current_group_index += 1;

  00066	ff 46 28	 inc	 DWORD PTR [esi+40]
  00069	5f		 pop	 edi

; 168  :                 }
; 169  :             }

  0006a	5e		 pop	 esi
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
$LN2@Write:

; 161  :                     }
; 162  :                 }
; 163  :                 else
; 164  :                 {
; 165  :                     // 桁区切りをサポートしない場合
; 166  : 
; 167  :                     _native_writer->Write(c);

  0006f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00072	57		 push	 edi
  00073	8b 01		 mov	 eax, DWORD PTR [ecx]
  00075	ff 50 04	 call	 DWORD PTR [eax+4]
$LN3@Write:

; 168  :                 }
; 169  :             }

  00078	5f		 pop	 edi
  00079	5e		 pop	 esi
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_native_writer$ = 8					; size = 4
_format_type$ = 12					; size = 2
_format_option$ = 16					; size = 4
??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter, COMDAT
; _this$ = ecx

; 103  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 104  :                 _native_writer = native_writer;

  00003	8b 45 08	 mov	 eax, DWORD PTR _native_writer$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	56		 push	 esi

; 105  :                 const PMC_DECIMAL_NUMBER_FORMAT_INFO* decimal_info;
; 106  :                 if (format_type == L'C')

  00009	66 8b 75 0c	 mov	 si, WORD PTR _format_type$[ebp]
  0000d	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00010	89 42 14	 mov	 DWORD PTR [edx+20], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 201  :             _p = p;

  00016	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 202  :             _sob = sob;

  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 203  :             _eob = eob;

  00024	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 204  :             _written = 0;

  0002b	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 103  :             {

  00032	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 105  :                 const PMC_DECIMAL_NUMBER_FORMAT_INFO* decimal_info;
; 106  :                 if (format_type == L'C')

  00038	66 83 fe 43	 cmp	 si, 67			; 00000043H
  0003c	74 0b		 je	 SHORT $LN11@ThousandSe

; 107  :                 {
; 108  :                     decimal_info = &format_option->Currency;
; 109  :                     _is_supported_thousand = TRUE;
; 110  :                 }
; 111  :                 else if (format_type == L'P')

  0003e	66 83 fe 50	 cmp	 si, 80			; 00000050H
  00042	75 0a		 jne	 SHORT $LN4@ThousandSe

; 112  :                 {
; 113  :                     decimal_info = &format_option->Percent;

  00044	05 d0 00 00 00	 add	 eax, 208		; 000000d0H
$LN11@ThousandSe:

; 125  :                 }
; 126  : 
; 127  :                 const wchar_t* in_ptr = decimal_info->GroupSeparator;
; 128  : 
; 129  :                 _current_group = &decimal_info->GroupSizes[0];

  00049	83 c9 01	 or	 ecx, 1
  0004c	eb 0c		 jmp	 SHORT $LN7@ThousandSe
$LN4@ThousandSe:

; 114  :                     _is_supported_thousand = TRUE;
; 115  :                 }
; 116  :                 else if (format_type == L'N')

  0004e	83 c0 68	 add	 eax, 104		; 00000068H
  00051	66 83 fe 4e	 cmp	 si, 78			; 0000004eH
  00055	74 f2		 je	 SHORT $LN11@ThousandSe

; 117  :                 {
; 118  :                     decimal_info = &format_option->Number;
; 119  :                     _is_supported_thousand = TRUE;
; 120  :                 }
; 121  :                 else
; 122  :                 {
; 123  :                     decimal_info = &format_option->Number;
; 124  :                     _is_supported_thousand = FALSE;

  00057	83 e1 fe	 and	 ecx, -2			; fffffffeH
$LN7@ThousandSe:

; 125  :                 }
; 126  : 
; 127  :                 const wchar_t* in_ptr = decimal_info->GroupSeparator;
; 128  : 
; 129  :                 _current_group = &decimal_info->GroupSizes[0];

  0005a	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
  0005d	8d 48 48	 lea	 ecx, DWORD PTR [eax+72]

; 130  :                 _group_separator = decimal_info->GroupSeparator;

  00060	83 c0 26	 add	 eax, 38			; 00000026H
  00063	89 4a 20	 mov	 DWORD PTR [edx+32], ecx
  00066	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 131  :                 _current_group_size = *_current_group - L'0';

  00069	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  0006c	83 e8 30	 sub	 eax, 48			; 00000030H

; 132  :                 _current_group_index = 0;

  0006f	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0
  00076	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 133  :             }

  00079	8b c2		 mov	 eax, edx
  0007b	5e		 pop	 esi
  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z
_TEXT	SEGMENT
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
_e$ = 12						; size = 4
?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::get_x_times_of_exponent_of_10, COMDAT

; 73   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 74   :             ResourceHolderUINT root;

  00026	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00029	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 75   :             NUMBER_HEADER* _10 = From_I_Imp(10);

  00035	6a 0a		 push	 10			; 0000000aH
  00037	e8 00 00 00 00	 call	 ?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z ; Palmtree::Math::Core::Internal::From_I_Imp
  0003c	83 c4 04	 add	 esp, 4

; 76   :             root.HookNumber(_10);

  0003f	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00042	8b f0		 mov	 esi, eax
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 77   : #if _M_IX86
; 78   :             NUMBER_HEADER* exponent_of_10 = PMC_Pow_X_I_Imp(_10, e);

  0004a	ff 75 0c	 push	 DWORD PTR _e$[ebp]
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ?PMC_Pow_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Pow_X_I_Imp
  00053	83 c4 08	 add	 esp, 8

; 79   : #elif defined(_M_X64)
; 80   :             NUMBER_HEADER* exponent_of_10 = PMC_Pow_X_L_Imp(_10, e);
; 81   : #else
; 82   : #error unknown platform
; 83   : #endif
; 84   :             root.HookNumber(exponent_of_10);

  00056	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00059	8b f0		 mov	 esi, eax
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 85   :             NUMBER_HEADER* x_times_of_exponent_of_10 = PMC_Multiply_X_I_Imp(exponent_of_10, x);

  00061	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00064	56		 push	 esi
  00065	e8 00 00 00 00	 call	 ?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
  0006a	83 c4 08	 add	 esp, 8

; 86   :             return (x_times_of_exponent_of_10);

  0006d	8b f0		 mov	 esi, eax
  0006f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00079	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0007e	8b c6		 mov	 eax, esi

; 87   :         }

  00080	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00083	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008a	59		 pop	 ecx
  0008b	5e		 pop	 esi
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?get_x_times_of_exponent_of_10@DecimalFromatter@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@2345@II@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::get_x_times_of_exponent_of_10
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z
_TEXT	SEGMENT
_root$ = -36						; size = 16
_q_buf$1$ = -20						; size = 4
_temp_r$2 = -20						; size = 4
_u_buf$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_src_buf$ = 8						; size = 4
_digit_count$1$ = 12					; size = 4
_src_buf_count$ = 12					; size = 4
?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::get_digit_count_as_decimal, COMDAT

; 45   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 46   :             ResourceHolderUINT root;

  00028	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 47   :             __UNIT_TYPE* work1_buf = root.AllocateBlock(src_buf_count * __UNIT_TYPE_BIT_COUNT);

  00037	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0003a	8b 5d 0c	 mov	 ebx, DWORD PTR _src_buf_count$[ebp]
  0003d	8b f3		 mov	 esi, ebx
  0003f	c1 e6 05	 shl	 esi, 5
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00048	8b f8		 mov	 edi, eax

; 48   :             __UNIT_TYPE* work2_buf = root.AllocateBlock(src_buf_count * __UNIT_TYPE_BIT_COUNT);

  0004a	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0004d	56		 push	 esi
  0004e	89 7d f0	 mov	 DWORD PTR _u_buf$1$[ebp], edi
  00051	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00056	8b 75 08	 mov	 esi, DWORD PTR _src_buf$[ebp]
  00059	8b cb		 mov	 ecx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 48   :             __UNIT_TYPE* work2_buf = root.AllocateBlock(src_buf_count * __UNIT_TYPE_BIT_COUNT);

  0005b	89 45 ec	 mov	 DWORD PTR _q_buf$1$[ebp], eax

; 53   :             _UINT32_T digit_count = 0;

  0005e	33 c0		 xor	 eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00060	f3 a5		 rep movsd
  00062	8b 75 f0	 mov	 esi, DWORD PTR _u_buf$1$[ebp]
  00065	8b 7d ec	 mov	 edi, DWORD PTR _q_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp

; 53   :             _UINT32_T digit_count = 0;

  00068	89 45 0c	 mov	 DWORD PTR _digit_count$1$[ebp], eax
  0006b	0f 1f 44 00 00	 npad	 5
$LL2@get_digit_:

; 54   :             while (1)
; 55   :             {
; 56   :                 while (u_count > 0 && u_buf[u_count - 1] == 0)

  00070	85 db		 test	 ebx, ebx
  00072	74 19		 je	 SHORT $LN20@get_digit_
  00074	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00077	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL4@get_digit_:
  00080	83 38 00	 cmp	 DWORD PTR [eax], 0
  00083	75 2c		 jne	 SHORT $LN5@get_digit_

; 57   :                     --u_count;

  00085	83 e8 04	 sub	 eax, 4
  00088	83 eb 01	 sub	 ebx, 1
  0008b	75 f3		 jne	 SHORT $LL4@get_digit_
$LN20@get_digit_:

; 68   :             return (digit_count);

  0008d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00094	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00097	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0009c	8b 45 0c	 mov	 eax, DWORD PTR _digit_count$1$[ebp]

; 69   :         }

  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
$LN5@get_digit_:

; 58   :                 if (u_count <= 0)
; 59   :                     break;
; 60   :                 __UNIT_TYPE temp_r;
; 61   :                 root.ClearBlock(q_buf);

  000b1	57		 push	 edi
  000b2	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000b5	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 62   :                 DivRem_X_1W(u_buf, u_count, 10, q_buf, &temp_r);

  000ba	8d 45 ec	 lea	 eax, DWORD PTR _temp_r$2[ebp]
  000bd	50		 push	 eax
  000be	57		 push	 edi
  000bf	6a 0a		 push	 10			; 0000000aH
  000c1	53		 push	 ebx
  000c2	56		 push	 esi
  000c3	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W

; 63   :                 __UNIT_TYPE* t = u_buf;

  000c8	8b c6		 mov	 eax, esi
  000ca	83 c4 14	 add	 esp, 20			; 00000014H

; 64   :                 u_buf = q_buf;
; 65   :                 q_buf = t;
; 66   :                 ++digit_count;

  000cd	ff 45 0c	 inc	 DWORD PTR _digit_count$1$[ebp]
  000d0	8b f7		 mov	 esi, edi
  000d2	8b f8		 mov	 edi, eax

; 67   :             }

  000d4	eb 9a		 jmp	 SHORT $LL2@get_digit_
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?get_digit_count_as_decimal@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIPAII@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::get_digit_count_as_decimal
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ROTATE_L_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_count$ = 12						; size = 4
__ROTATE_L_UNIT PROC					; COMDAT

; 329  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : #ifdef _M_IX86
; 331  :             return (_rotl(x, count));

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _count$[ebp]
  00009	d3 c0		 rol	 eax, cl

; 332  : #elif defined(_M_X64)
; 333  :             return (_rotl64(x, count));
; 334  : #else
; 335  : #error unknown platform
; 336  : #endif
; 337  :         }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
__ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVREM_UNIT
_TEXT	SEGMENT
tv69 = -8						; size = 8
tv68 = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC					; COMDAT

; 258  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00006	8b 45 08	 mov	 eax, DWORD PTR _u_high$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	0b 4d 0c	 or	 ecx, DWORD PTR _u_low$[ebp]

; 258  :         {

  0000e	53		 push	 ebx

; 259  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 260  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 261  :             *r = (_UINT32_T)(t % v);

  0000f	53		 push	 ebx
  00010	6a 00		 push	 0
  00012	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 __aulldvrm
  0001c	89 5d fc	 mov	 DWORD PTR tv68[ebp+4], ebx
  0001f	5b		 pop	 ebx
  00020	89 55 fc	 mov	 DWORD PTR tv69[ebp+4], edx
  00023	8b 55 14	 mov	 edx, DWORD PTR _r$[ebp]

; 262  :             return ((_UINT32_T)(t / v));

  00026	5b		 pop	 ebx
  00027	89 0a		 mov	 DWORD PTR [edx], ecx

; 263  :         }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADD_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC						; COMDAT

; 176  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));

  00003	8a 45 08	 mov	 al, BYTE PTR _carry$[ebp]
  00006	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp]
  0000e	13 4d 10	 adc	 ecx, DWORD PTR _v$[ebp]
  00011	0f 92 c0	 setb	 al
  00014	89 0a		 mov	 DWORD PTR [edx], ecx

; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));
; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC				; COMDAT

; 156  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 157  :             return ((u + v - 1) / v);

  00003	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	48		 dec	 eax
  00009	03 45 0c	 add	 eax, DWORD PTR _v$[ebp]
  0000c	f7 75 0c	 div	 DWORD PTR _v$[ebp]

; 158  :         }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMWORDTODWORD
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC					; COMDAT

; 140  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00003	8b 55 08	 mov	 edx, DWORD PTR _value_high$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	0b 45 0c	 or	 eax, DWORD PTR _value_low$[ebp]

; 142  :         }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _count$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  0000e	f3 a5		 rep movsd
  00010	5f		 pop	 edi
  00011	5e		 pop	 esi

; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);
; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToDIV64Counter, COMDAT

; 332  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 333  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

  00003	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00006	b9 08 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+8
  0000b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 334  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToDIV64Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToDIV32Counter, COMDAT

; 326  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 327  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  00003	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00006	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  0000b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 328  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToDIV32Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementDIV64Counter, COMDAT

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

  00000	f0 ff 05 08 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+8

; 311  :     }

  00007	c3		 ret	 0
?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementDIV64Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementDIV32Counter, COMDAT

; 304  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  00000	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12

; 305  :     }

  00007	c3		 ret	 0
?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?PMC_ToString@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_x$ = 8							; size = 4
_format$ = 12						; size = 4
_format_option$ = 16					; size = 4
_buffer$ = 20						; size = 4
_buffer_size$ = 24					; size = 4
?PMC_ToString@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::PMC_ToString, COMDAT

; 1435 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi

; 1436 :         if (x == nullptr)

  00007	8b 75 08	 mov	 esi, DWORD PTR _x$[ebp]
  0000a	85 f6		 test	 esi, esi
  0000c	74 38		 je	 SHORT $LN7@PMC_ToStri

; 1438 :         if (format_option == nullptr)
; 1439 :             format_option = &default_number_format_option;
; 1440 :         NUMBER_HEADER* nx = (NUMBER_HEADER*)x;
; 1441 :         CheckNumber(nx);

  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 1442 :         return (ToString_Imp(nx->IS_ZERO ? 0 : 1, nx, format, format_option, buffer, buffer_size));

  00014	ff 75 18	 push	 DWORD PTR _buffer_size$[ebp]
  00017	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  0001f	ff 75 14	 push	 DWORD PTR _buffer$[ebp]
  00022	85 c0		 test	 eax, eax
  00024	0f 45 c8	 cmovne	 ecx, eax
  00027	8a 46 04	 mov	 al, BYTE PTR [esi+4]
  0002a	51		 push	 ecx
  0002b	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  0002e	f6 d0		 not	 al
  00030	24 01		 and	 al, 1
  00032	0f b6 c0	 movzx	 eax, al
  00035	56		 push	 esi
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?ToString_Imp@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ; Palmtree::Math::Core::Internal::ToString_Imp
  0003c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003f	5e		 pop	 esi

; 1443 :     }

  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 14 00	 ret	 20			; 00000014H
$LN7@PMC_ToStri:

; 1437 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"x");

  00046	68 00 00 00 00	 push	 OFFSET ??_C@_13HADAKIJA@?$AAx@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00050	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00053	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00058	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0005d	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@PMC_ToStri:
  00066	cc		 int	 3
?PMC_ToString@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?PMC_InitializeNumberFormatInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z
_TEXT	SEGMENT
_info$ = 8						; size = 4
?PMC_InitializeNumberFormatInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_InitializeNumberFormatInfo, COMDAT

; 1476 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1477 :         InitializeNumberFormatoInfo(info);

  00003	ff 75 08	 push	 DWORD PTR _info$[ebp]
  00006	e8 00 00 00 00	 call	 ?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
  0000b	83 c4 04	 add	 esp, 4

; 1478 :     }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?PMC_InitializeNumberFormatInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_InitializeNumberFormatInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?Initialize_ToString@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_ToString@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_ToString, COMDAT

; 1482 :         InitializeNumberFormatoInfo(&default_number_format_option);

  00000	68 00 00 00 00	 push	 OFFSET ?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  00005	e8 00 00 00 00	 call	 ?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
  0000a	83 c4 04	 add	 esp, 4

; 1483 : 
; 1484 :         return (PMC_STATUS_OK);

  0000d	33 c0		 xor	 eax, eax

; 1485 :     }

  0000f	c3		 ret	 0
?Initialize_ToString@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_ToString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z
_TEXT	SEGMENT
_info$ = 8						; size = 4
?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z PROC ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo, COMDAT

; 1446 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1447 :         info->Currency.DecimalDigits = 2;
; 1448 :         lstrcpyW(info->Currency.DecimalSeparator, L".");

  00004	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__lstrcpyW@8
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _info$[ebp]
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_13JOFGPIOO@?$AA?4@
  00013	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00016	c7 07 02 00 00
	00		 mov	 DWORD PTR [edi], 2
  0001c	50		 push	 eax
  0001d	ff d6		 call	 esi

; 1449 :         lstrcpyW(info->Currency.GroupSeparator, L",");

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_13DEFPDAGF@?$AA?0@
  00024	8d 47 26	 lea	 eax, DWORD PTR [edi+38]
  00027	50		 push	 eax
  00028	ff d6		 call	 esi

; 1450 :         lstrcpyW(info->Currency.GroupSizes, L"3");

  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_13DMCFHHKM@?$AA3@
  0002f	8d 47 48	 lea	 eax, DWORD PTR [edi+72]
  00032	50		 push	 eax
  00033	ff d6		 call	 esi

; 1451 :         info->Currency.NegativePattern = 0;
; 1452 :         info->Currency.PositivePattern = 0;
; 1453 : 
; 1454 :         info->Number.DecimalDigits = 2;
; 1455 :         lstrcpyW(info->Number.DecimalSeparator, L".");

  00035	68 00 00 00 00	 push	 OFFSET ??_C@_13JOFGPIOO@?$AA?4@
  0003a	8d 47 6c	 lea	 eax, DWORD PTR [edi+108]
  0003d	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
  00044	50		 push	 eax
  00045	c7 47 64 00 00
	00 00		 mov	 DWORD PTR [edi+100], 0
  0004c	c7 47 68 02 00
	00 00		 mov	 DWORD PTR [edi+104], 2
  00053	ff d6		 call	 esi

; 1456 :         lstrcpyW(info->Number.GroupSeparator, L",");

  00055	68 00 00 00 00	 push	 OFFSET ??_C@_13DEFPDAGF@?$AA?0@
  0005a	8d 87 8e 00 00
	00		 lea	 eax, DWORD PTR [edi+142]
  00060	50		 push	 eax
  00061	ff d6		 call	 esi

; 1457 :         lstrcpyW(info->Number.GroupSizes, L"3");

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_13DMCFHHKM@?$AA3@
  00068	8d 87 b0 00 00
	00		 lea	 eax, DWORD PTR [edi+176]
  0006e	50		 push	 eax
  0006f	ff d6		 call	 esi

; 1458 :         info->Number.NegativePattern = 1;
; 1459 :         info->Number.PositivePattern = -1; // 未使用
; 1460 : 
; 1461 :         info->Percent.DecimalDigits = 2;
; 1462 :         lstrcpyW(info->Percent.DecimalSeparator, L".");

  00071	68 00 00 00 00	 push	 OFFSET ??_C@_13JOFGPIOO@?$AA?4@
  00076	8d 87 d4 00 00
	00		 lea	 eax, DWORD PTR [edi+212]
  0007c	c7 87 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [edi+200], 1
  00086	50		 push	 eax
  00087	c7 87 cc 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+204], -1
  00091	c7 87 d0 00 00
	00 02 00 00 00	 mov	 DWORD PTR [edi+208], 2
  0009b	ff d6		 call	 esi

; 1463 :         lstrcpyW(info->Percent.GroupSeparator, L",");

  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_13DEFPDAGF@?$AA?0@
  000a2	8d 87 f6 00 00
	00		 lea	 eax, DWORD PTR [edi+246]
  000a8	50		 push	 eax
  000a9	ff d6		 call	 esi

; 1464 :         lstrcpyW(info->Percent.GroupSizes, L"3");

  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_13DMCFHHKM@?$AA3@
  000b0	8d 87 18 01 00
	00		 lea	 eax, DWORD PTR [edi+280]
  000b6	50		 push	 eax
  000b7	ff d6		 call	 esi

; 1465 :         info->Percent.NegativePattern = 0;
; 1466 :         info->Percent.PositivePattern = 0;
; 1467 : 
; 1468 :         lstrcpyW(info->CurrencySymbol, L"\u00a4");

  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_13BMLCKOLB@?$PP?$KE@
  000be	8d 87 38 01 00
	00		 lea	 eax, DWORD PTR [edi+312]
  000c4	c7 87 30 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+304], 0
  000ce	50		 push	 eax
  000cf	c7 87 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+308], 0
  000d9	ff d6		 call	 esi

; 1469 :         lstrcpyW(info->NegativeSign, L"-");

  000db	68 00 00 00 00	 push	 OFFSET ??_C@_13IMODFHAA@?$AA?9@
  000e0	8d 87 5a 01 00
	00		 lea	 eax, DWORD PTR [edi+346]
  000e6	50		 push	 eax
  000e7	ff d6		 call	 esi

; 1470 :         lstrcpyW(info->PercentSymbol, L"%");

  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_13EJFHHPOP@?$AA?$CF@
  000ee	8d 87 9e 01 00
	00		 lea	 eax, DWORD PTR [edi+414]
  000f4	50		 push	 eax
  000f5	ff d6		 call	 esi

; 1471 :         lstrcpyW(info->PerMilleSymbol, L"\u2030");

  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_13BGNNJOKC@?$AA0@
  000fc	8d 87 c0 01 00
	00		 lea	 eax, DWORD PTR [edi+448]
  00102	50		 push	 eax
  00103	ff d6		 call	 esi

; 1472 :         lstrcpyW(info->PositiveSign, L"+");

  00105	68 00 00 00 00	 push	 OFFSET ??_C@_13KJIIAINM@?$AA?$CL@
  0010a	8d 87 7c 01 00
	00		 lea	 eax, DWORD PTR [edi+380]
  00110	50		 push	 eax
  00111	ff d6		 call	 esi
  00113	5f		 pop	 edi
  00114	5e		 pop	 esi

; 1473 :     }

  00115	5d		 pop	 ebp
  00116	c3		 ret	 0
?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ENDP ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
_TEXT	SEGMENT
?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ PROC ; Palmtree::Math::Core::Internal::ReverseStringWriter::GetString, COMDAT
; _this$ = ecx

; 290  :             return (_p);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 291  :         }

  00003	c3		 ret	 0
?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ENDP ; Palmtree::Math::Core::Internal::ReverseStringWriter::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write, COMDAT
; _this$ = ecx

; 279  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 280  :             const wchar_t* p = str + lstrlenW(str);

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _str$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	53		 push	 ebx
  0000a	8b f9		 mov	 edi, ecx
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00012	8d 34 43	 lea	 esi, DWORD PTR [ebx+eax*2]

; 281  :             while (p > str)

  00015	3b f3		 cmp	 esi, ebx
  00017	76 19		 jbe	 SHORT $LN3@Write
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@Write:

; 282  :             {
; 283  :                 --p;
; 284  :                 Write(*p);

  00020	8b 17		 mov	 edx, DWORD PTR [edi]
  00022	83 ee 02	 sub	 esi, 2
  00025	8b cf		 mov	 ecx, edi
  00027	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0002a	50		 push	 eax
  0002b	ff 52 04	 call	 DWORD PTR [edx+4]
  0002e	3b f3		 cmp	 esi, ebx
  00030	77 ee		 ja	 SHORT $LL7@Write
$LN3@Write:
  00032	5f		 pop	 edi

; 285  :             }
; 286  :         }

  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_c$ = 8							; size = 2
?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write, COMDAT
; _this$ = ecx

; 270  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx
  00005	83 ec 18	 sub	 esp, 24			; 00000018H

; 271  :             if (_p <= _sob)

  00008	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0000b	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0000e	76 16		 jbe	 SHORT $LN6@Write

; 273  :             --_p;
; 274  :             *_p = c;

  00010	66 8b 45 08	 mov	 ax, WORD PTR _c$[ebp]
  00014	83 c1 fe	 add	 ecx, -2			; fffffffeH
  00017	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0001a	66 89 01	 mov	 WORD PTR [ecx], ax

; 275  :             ++_written;

  0001d	ff 42 10	 inc	 DWORD PTR [edx+16]

; 276  :         }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN6@Write:

; 272  :                 throw InsufficientBufferException(L"書き込み先バッファのサイズが不足しています。");

  00026	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
  0002b	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  0002e	e8 00 00 00 00	 call	 ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
  00033	68 00 00 00 00	 push	 OFFSET __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
  00038	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Write:
  00041	cc		 int	 3
?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter, COMDAT
; _this$ = ecx

; 265  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 199  :         StringWriter(wchar_t* p, wchar_t* sob, wchar_t* eob)

  00003	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]

; 265  :         {

  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0000c	56		 push	 esi
  0000d	8b f1		 mov	 esi, ecx

; 199  :         StringWriter(wchar_t* p, wchar_t* sob, wchar_t* eob)

  0000f	33 c9		 xor	 ecx, ecx
  00011	85 d2		 test	 edx, edx

; 265  :         {

  00013	57		 push	 edi

; 199  :         StringWriter(wchar_t* p, wchar_t* sob, wchar_t* eob)

  00014	8d 3c 42	 lea	 edi, DWORD PTR [edx+eax*2]
  00017	0f 44 f9	 cmove	 edi, ecx

; 200  :         {
; 201  :             _p = p;
; 202  :             _sob = sob;

  0001a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0001d	8b ca		 mov	 ecx, edx
  0001f	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00022	f7 d9		 neg	 ecx

; 204  :             _written = 0;

  00024	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0002b	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]

; 265  :         {

  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@

; 199  :         StringWriter(wchar_t* p, wchar_t* sob, wchar_t* eob)

  00034	1b c9		 sbb	 ecx, ecx
  00036	23 c8		 and	 ecx, eax

; 203  :             _eob = eob;

  00038	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 271  :             if (_p <= _sob)

  0003b	3b fa		 cmp	 edi, edx
  0003d	76 18		 jbe	 SHORT $LN15@ReverseStr

; 273  :             --_p;

  0003f	8d 47 fe	 lea	 eax, DWORD PTR [edi-2]

; 274  :             *_p = c;

  00042	33 c9		 xor	 ecx, ecx
  00044	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00047	66 89 08	 mov	 WORD PTR [eax], cx

; 266  :             Write(L'\0');
; 267  :         }

  0004a	8b c6		 mov	 eax, esi

; 275  :             ++_written;

  0004c	ff 46 10	 inc	 DWORD PTR [esi+16]

; 266  :             Write(L'\0');
; 267  :         }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN15@ReverseStr:

; 272  :                 throw InsufficientBufferException(L"書き込み先バッファのサイズが不足しています。");

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
  0005c	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  0005f	e8 00 00 00 00	 call	 ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
  00064	68 00 00 00 00	 push	 OFFSET __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
  00069	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN13@ReverseStr:
  00072	cc		 int	 3
??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ
_TEXT	SEGMENT
?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ PROC ; Palmtree::Math::Core::Internal::StringWriter::GetLength, COMDAT
; _this$ = ecx

; 250  :             return (_written);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 251  :         }

  00003	c3		 ret	 0
?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ENDP ; Palmtree::Math::Core::Internal::StringWriter::GetLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
_TEXT	SEGMENT
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ PROC ; Palmtree::Math::Core::Internal::StringWriter::GetString, COMDAT
; _this$ = ecx

; 245  :             return (_sob);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 246  :         }

  00003	c3		 ret	 0
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ENDP ; Palmtree::Math::Core::Internal::StringWriter::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT
; _this$ = ecx

; 235  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 236  :             while (*str != L'\0')

  00004	8b 75 08	 mov	 esi, DWORD PTR _str$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0000d	66 85 c0	 test	 ax, ax
  00010	74 18		 je	 SHORT $LN3@Write
  00012	8b c8		 mov	 ecx, eax
$LL2@Write:

; 237  :             {
; 238  :                 Write(*str);

  00014	8b 07		 mov	 eax, DWORD PTR [edi]
  00016	51		 push	 ecx
  00017	8b cf		 mov	 ecx, edi
  00019	ff 50 04	 call	 DWORD PTR [eax+4]
  0001c	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]

; 239  :                 ++str;

  00020	8d 76 02	 lea	 esi, DWORD PTR [esi+2]
  00023	8b c8		 mov	 ecx, eax
  00025	66 85 c0	 test	 ax, ax
  00028	75 ea		 jne	 SHORT $LL2@Write
$LN3@Write:
  0002a	5f		 pop	 edi

; 240  :             }
; 241  :         }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
_count$ = 12						; size = 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT
; _this$ = ecx

; 226  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 227  :             while (count > 0)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _count$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 12		 je	 SHORT $LN3@Write
  0000e	53		 push	 ebx
  0000f	8b 5d 08	 mov	 ebx, DWORD PTR _c$[ebp]
$LL2@Write:

; 228  :             {
; 229  :                 Write(c);

  00012	8b 07		 mov	 eax, DWORD PTR [edi]
  00014	8b cf		 mov	 ecx, edi
  00016	53		 push	 ebx
  00017	ff 50 04	 call	 DWORD PTR [eax+4]

; 230  :                 --count;

  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f3		 jne	 SHORT $LL2@Write
  0001f	5b		 pop	 ebx
$LN3@Write:
  00020	5f		 pop	 edi

; 231  :             }
; 232  :         }

  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_c$ = 8							; size = 2
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT
; _this$ = ecx

; 214  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 215  :             if (_p != nullptr)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	85 d2		 test	 edx, edx
  0000b	74 1b		 je	 SHORT $LN2@Write

; 216  :             {
; 217  :                 if (_p + 1 >= _eob)

  0000d	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00010	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  00013	73 1c		 jae	 SHORT $LN7@Write

; 219  :                 *_p++ = c;

  00015	66 8b 45 08	 mov	 ax, WORD PTR _c$[ebp]
  00019	66 89 02	 mov	 WORD PTR [edx], ax
  0001c	83 41 04 02	 add	 DWORD PTR [ecx+4], 2

; 220  :                 *_p = L'\0';

  00020	33 d2		 xor	 edx, edx
  00022	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00025	66 89 10	 mov	 WORD PTR [eax], dx
$LN2@Write:

; 221  :             }
; 222  :             ++_written;

  00028	ff 41 10	 inc	 DWORD PTR [ecx+16]

; 223  :         }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN7@Write:

; 218  :                     throw InsufficientBufferException(L"書き込み先バッファのサイズが不足しています。");

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
  00036	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00039	e8 00 00 00 00	 call	 ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
  00043	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@Write:
  0004c	cc		 int	 3
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT
; _this$ = ecx

; 210  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  :         }
; 206  : 
; 207  :     public:
; 208  :         StringWriter(wchar_t* buffer, size_t size)
; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00003	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 08		 je	 SHORT $LN3@StringWrit
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0000d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00010	eb 02		 jmp	 SHORT $LN4@StringWrit
$LN3@StringWrit:
  00012	33 c0		 xor	 eax, eax
$LN4@StringWrit:

; 203  :             _eob = eob;

  00014	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 211  :         }

  00017	8b c1		 mov	 eax, ecx

; 201  :             _p = p;

  00019	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 202  :             _sob = sob;

  0001c	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 204  :             _written = 0;

  0001f	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 210  :         {

  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@

; 211  :         }

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sob$ = 12						; size = 4
_eob$ = 16						; size = 4
??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT
; _this$ = ecx

; 199  :         StringWriter(wchar_t* p, wchar_t* sob, wchar_t* eob)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  :         {
; 201  :             _p = p;

  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 202  :             _sob = sob;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _sob$[ebp]
  0000c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 203  :             _eob = eob;

  0000f	8b 45 10	 mov	 eax, DWORD PTR _eob$[ebp]
  00012	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 204  :             _written = 0;
; 205  :         }

  00015	8b c1		 mov	 eax, ecx
  00017	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@CAHPB_W00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_eoa$ = 12						; size = 4
_b$ = 16						; size = 4
?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@CAHPB_W00@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith, COMDAT

; 178  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 179  :             while (*b != L'\0')

  00003	8b 55 10	 mov	 edx, DWORD PTR _b$[ebp]
  00006	56		 push	 esi
  00007	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  0000a	66 85 c9	 test	 cx, cx
  0000d	74 1e		 je	 SHORT $LN3@StartsWith
  0000f	8b 75 0c	 mov	 esi, DWORD PTR _eoa$[ebp]
  00012	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
$LL2@StartsWith:

; 180  :             {
; 181  :                 if (a < eoa || *a != *b)

  00015	3b c6		 cmp	 eax, esi
  00017	72 1c		 jb	 SHORT $LN8@StartsWith
  00019	66 39 08	 cmp	 WORD PTR [eax], cx
  0001c	75 17		 jne	 SHORT $LN8@StartsWith

; 183  :                 --a;
; 184  :                 ++b;

  0001e	0f b7 4a 02	 movzx	 ecx, WORD PTR [edx+2]
  00022	83 c2 02	 add	 edx, 2
  00025	83 e8 02	 sub	 eax, 2
  00028	66 85 c9	 test	 cx, cx
  0002b	75 e8		 jne	 SHORT $LL2@StartsWith
$LN3@StartsWith:

; 185  :             }
; 186  :             return (1);

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	5e		 pop	 esi

; 187  :         }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN8@StartsWith:

; 182  :                     return (0);

  00035	33 c0		 xor	 eax, eax
  00037	5e		 pop	 esi

; 187  :         }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@CAHPB_W00@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipString@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_str$ = 8						; size = 4
?SkipString@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::SkipString, COMDAT
; _this$ = ecx

; 167  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 168  :             if (!StartsWith(_p, _start, str))

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0000c	56		 push	 esi
  0000d	8b f1		 mov	 esi, ecx

; 179  :             while (*b != L'\0')

  0000f	66 83 39 00	 cmp	 WORD PTR [ecx], 0

; 168  :             if (!StartsWith(_p, _start, str))

  00013	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]

; 179  :             while (*b != L'\0')

  00016	74 21		 je	 SHORT $LN2@SkipString

; 180  :             {
; 181  :                 if (a < eoa || *a != *b)

  00018	57		 push	 edi
  00019	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  0001c	0f 1f 40 00	 npad	 4
$LL5@SkipString:
  00020	3b d7		 cmp	 edx, edi
  00022	72 29		 jb	 SHORT $LN15@SkipString
  00024	66 8b 02	 mov	 ax, WORD PTR [edx]
  00027	66 3b 06	 cmp	 ax, WORD PTR [esi]
  0002a	75 21		 jne	 SHORT $LN15@SkipString

; 182  :                     return (0);
; 183  :                 --a;
; 184  :                 ++b;

  0002c	83 c6 02	 add	 esi, 2
  0002f	83 ea 02	 sub	 edx, 2
  00032	66 83 3e 00	 cmp	 WORD PTR [esi], 0
  00036	75 e8		 jne	 SHORT $LL5@SkipString

; 180  :             {
; 181  :                 if (a < eoa || *a != *b)

  00038	5f		 pop	 edi
$LN2@SkipString:

; 172  :             }
; 173  :             _p -= lstrlenW(str);

  00039	51		 push	 ecx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00040	03 c0		 add	 eax, eax
  00042	29 43 04	 sub	 DWORD PTR [ebx+4], eax
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx

; 174  :         }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN15@SkipString:

; 169  :             {
; 170  :                 // str で始まっていないにもかかわらず、strをスキップしようとした。
; 171  :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;ReverseStringReader::SkipString;1");

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_1GC@GGAPGHKN@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00057	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  0005a	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0005f	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00064	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN16@SkipString:
  0006d	cc		 int	 3
?SkipString@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::SkipString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith, COMDAT
; _this$ = ecx

; 162  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 163  :             return (StartsWith(_p, _start, str));

  00003	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00009	56		 push	 esi

; 179  :             while (*b != L'\0')

  0000a	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0000e	74 1b		 je	 SHORT $LN5@StartsWith

; 180  :             {
; 181  :                 if (a < eoa || *a != *b)

  00010	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
$LL4@StartsWith:
  00013	3b d6		 cmp	 edx, esi
  00015	72 1e		 jb	 SHORT $LN10@StartsWith
  00017	66 8b 0a	 mov	 cx, WORD PTR [edx]
  0001a	66 3b 08	 cmp	 cx, WORD PTR [eax]
  0001d	75 16		 jne	 SHORT $LN10@StartsWith

; 182  :                     return (0);
; 183  :                 --a;
; 184  :                 ++b;

  0001f	83 c0 02	 add	 eax, 2
  00022	83 ea 02	 sub	 edx, 2
  00025	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00029	75 e8		 jne	 SHORT $LL4@StartsWith
$LN5@StartsWith:

; 163  :             return (StartsWith(_p, _start, str));

  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	5e		 pop	 esi

; 164  :         }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN10@StartsWith:

; 163  :             return (StartsWith(_p, _start, str));

  00035	33 c0		 xor	 eax, eax
  00037	5e		 pop	 esi

; 164  :         }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Progress@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
?Progress@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXXZ PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::Progress, COMDAT
; _this$ = ecx

; 155  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :             if (_p < _start)

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0000c	72 0a		 jb	 SHORT $LN6@Progress

; 158  :             --_p;

  0000e	83 c0 fe	 add	 eax, -2			; fffffffeH
  00011	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 159  :         }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN6@Progress:

; 157  :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;ReverseStringReader::Progress;1");

  00018	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@BNHGDLLE@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00022	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00025	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0002a	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0002f	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Progress:
  00038	cc		 int	 3
?Progress@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXXZ ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::Progress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
_TEXT	SEGMENT
?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::PeekChar, COMDAT
; _this$ = ecx

; 149  :             if (_p < _start)

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00006	73 03		 jae	 SHORT $LN2@PeekChar

; 150  :                 return (L'\0');

  00008	33 c0		 xor	 eax, eax

; 152  :         }

  0000a	c3		 ret	 0
$LN2@PeekChar:

; 151  :             return (*_p);

  0000b	66 8b 00	 mov	 ax, WORD PTR [eax]

; 152  :         }

  0000e	c3		 ret	 0
?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::PeekChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0ReverseStringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0ReverseStringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::ReverseStringReader, COMDAT
; _this$ = ecx

; 142  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 143  :             _start = p;

  00004	8b 75 08	 mov	 esi, DWORD PTR _p$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 144  :             _p = p + lstrlenW(p) - 1;

  0000a	56		 push	 esi

; 52   :             _p = p;

  0000b	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 142  :         {

  00012	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@

; 143  :             _start = p;

  00018	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 144  :             _p = p + lstrlenW(p) - 1;

  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00021	83 ee 02	 sub	 esi, 2
  00024	8d 04 46	 lea	 eax, DWORD PTR [esi+eax*2]
  00027	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 145  :         }

  0002a	8b c7		 mov	 eax, edi
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0ReverseStringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::ReverseStringReader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  :             while (*b != L'\0')

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	56		 push	 esi
  00007	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0000a	66 85 c9	 test	 cx, cx
  0000d	74 1b		 je	 SHORT $LN3@StartsWith
  0000f	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00012	8b d1		 mov	 edx, ecx
  00014	2b f0		 sub	 esi, eax
$LL2@StartsWith:

; 122  :             {
; 123  :                 if (*a != *b)

  00016	66 39 14 06	 cmp	 WORD PTR [esi+eax], dx
  0001a	75 16		 jne	 SHORT $LN7@StartsWith

; 125  :                 ++a;
; 126  :                 ++b;

  0001c	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00020	83 c0 02	 add	 eax, 2
  00023	8b d1		 mov	 edx, ecx
  00025	66 85 c9	 test	 cx, cx
  00028	75 ec		 jne	 SHORT $LL2@StartsWith
$LN3@StartsWith:

; 127  :             }
; 128  :             return (1);

  0002a	b8 01 00 00 00	 mov	 eax, 1
  0002f	5e		 pop	 esi

; 129  :         }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN7@StartsWith:

; 124  :                     return (0);

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi

; 129  :         }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_str$ = 8						; size = 4
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::SkipString, COMDAT
; _this$ = ecx

; 109  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 110  :             if (!StartsWith(_p, str))

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0000c	8b d1		 mov	 edx, ecx

; 121  :             while (*b != L'\0')

  0000e	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  00011	66 85 c0	 test	 ax, ax
  00014	74 20		 je	 SHORT $LN2@SkipString
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0001b	8b f0		 mov	 esi, eax
  0001d	2b f9		 sub	 edi, ecx
  0001f	90		 npad	 1
$LL5@SkipString:

; 122  :             {
; 123  :                 if (*a != *b)

  00020	66 39 34 17	 cmp	 WORD PTR [edi+edx], si
  00024	75 23		 jne	 SHORT $LN14@SkipString

; 124  :                     return (0);
; 125  :                 ++a;
; 126  :                 ++b;

  00026	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0002a	83 c2 02	 add	 edx, 2
  0002d	8b f0		 mov	 esi, eax
  0002f	66 85 c0	 test	 ax, ax
  00032	75 ec		 jne	 SHORT $LL5@SkipString

; 122  :             {
; 123  :                 if (*a != *b)

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
$LN2@SkipString:

; 114  :             }
; 115  :             _p += lstrlenW(str);

  00036	51		 push	 ecx
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0003d	03 c0		 add	 eax, eax
  0003f	01 43 04	 add	 DWORD PTR [ebx+4], eax
  00042	5b		 pop	 ebx

; 116  :         }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN14@SkipString:

; 111  :             {
; 112  :                 // str で始まっていないにもかかわらず、strをスキップしようとした。
; 113  :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::SkipString;1");

  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00053	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00056	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0005b	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00060	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN15@SkipString:
  00069	cc		 int	 3
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::SkipString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT
; _this$ = ecx

; 84   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 85   :             return (StartsWith(_p, str));

  00003	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00006	56		 push	 esi

; 121  :             while (*b != L'\0')

  00007	0f b7 10	 movzx	 edx, WORD PTR [eax]
  0000a	66 85 d2	 test	 dx, dx
  0000d	74 19		 je	 SHORT $LN5@StartsWith
  0000f	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00012	2b f0		 sub	 esi, eax
$LL4@StartsWith:

; 122  :             {
; 123  :                 if (*a != *b)

  00014	66 39 14 06	 cmp	 WORD PTR [esi+eax], dx
  00018	75 18		 jne	 SHORT $LN9@StartsWith

; 124  :                     return (0);
; 125  :                 ++a;
; 126  :                 ++b;

  0001a	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0001e	83 c0 02	 add	 eax, 2
  00021	8b d1		 mov	 edx, ecx
  00023	66 85 c9	 test	 cx, cx
  00026	75 ec		 jne	 SHORT $LL4@StartsWith
$LN5@StartsWith:

; 85   :             return (StartsWith(_p, str));

  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	5e		 pop	 esi

; 86   :         }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN9@StartsWith:

; 85   :             return (StartsWith(_p, str));

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi

; 86   :         }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ PROC ; Palmtree::Math::Core::Internal::StringReader::Progress, COMDAT
; _this$ = ecx

; 77   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   :             if (*_p == L'\0')

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0000d	74 0a		 je	 SHORT $LN6@Progress

; 80   :             ++_p;

  0000f	83 c0 02	 add	 eax, 2
  00012	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 81   :         }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN6@Progress:

; 79   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::Progress;1");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00023	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00026	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0002b	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00030	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Progress:
  00039	cc		 int	 3
?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::Progress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
_TEXT	SEGMENT
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ PROC ; Palmtree::Math::Core::Internal::StringReader::PeekChar, COMDAT
; _this$ = ecx

; 73   :             return (*_p);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	66 8b 00	 mov	 ax, WORD PTR [eax]

; 74   :         }

  00006	c3		 ret	 0
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::PeekChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_W_W@Z
_TEXT	SEGMENT
_default_char$ = 8					; size = 2
?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_W_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::ReadChar, COMDAT
; _this$ = ecx

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 64   :             wchar_t c = PeekChar();

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	ff 10		 call	 DWORD PTR [eax]
  0000b	0f b7 f8	 movzx	 edi, ax

; 65   :             if (c == L'\0')

  0000e	66 85 ff	 test	 di, di
  00011	75 0a		 jne	 SHORT $LN2@ReadChar

; 66   :                 return (default_char);

  00013	66 8b 45 08	 mov	 ax, WORD PTR _default_char$[ebp]
  00017	5f		 pop	 edi

; 69   :         }

  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN2@ReadChar:

; 67   :             Progress();

  0001d	8b 16		 mov	 edx, DWORD PTR [esi]
  0001f	8b ce		 mov	 ecx, esi
  00021	ff 52 04	 call	 DWORD PTR [edx+4]

; 68   :             return (c);

  00024	66 8b c7	 mov	 ax, di
  00027	5f		 pop	 edi

; 69   :         }

  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_W_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::ReadChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_WXZ
_TEXT	SEGMENT
?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_WXZ PROC ; Palmtree::Math::Core::Internal::StringReader::ReadChar, COMDAT
; _this$ = ecx

; 56   :         {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 57   :             wchar_t c = PeekChar();

  00004	8b 07		 mov	 eax, DWORD PTR [edi]
  00006	ff 10		 call	 DWORD PTR [eax]

; 58   :             Progress();

  00008	8b 17		 mov	 edx, DWORD PTR [edi]
  0000a	8b cf		 mov	 ecx, edi
  0000c	0f b7 f0	 movzx	 esi, ax
  0000f	ff 52 04	 call	 DWORD PTR [edx+4]

; 59   :             return (c);

  00012	5f		 pop	 edi
  00013	66 8b c6	 mov	 ax, si
  00016	5e		 pop	 esi

; 60   :         }

  00017	c3		 ret	 0
?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_WXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::ReadChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StringReader, COMDAT
; _this$ = ecx

; 50   :         StringReader(const wchar_t* p)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   :         {
; 52   :             _p = p;

  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 53   :         }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7StringReader@Internal@Core@Math@Palmtree@@6B@
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StringReader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 295  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 296  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 296  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 296  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)
; 234  :         {
; 235  :         }
; 236  : 
; 237  :         virtual ~InsufficientBufferException() noexcept(true)
; 238  :         {
; 239  :         }
; 240  :     };
; 241  : 
; 242  :     class NotEnoughMemoryException
; 243  :         : public Exception
; 244  :     {
; 245  :     public:
; 246  :         NotEnoughMemoryException(const wchar_t* message) noexcept(true)
; 247  :             : Exception(PMC_STATUS_NOT_ENOUGH_MEMORY, message)
; 248  :         {
; 249  :         }
; 250  : 
; 251  :         NotEnoughMemoryException(const NotEnoughMemoryException& p) noexcept(true)
; 252  :             : Exception(p)
; 253  :         {
; 254  :         }
; 255  : 
; 256  :         virtual ~NotEnoughMemoryException() noexcept(true)
; 257  :         {
; 258  :         }
; 259  :     };
; 260  : 
; 261  :     class NotSupportedException
; 262  :         : public Exception
; 263  :     {
; 264  :     public:
; 265  :         NotSupportedException(const wchar_t* message) noexcept(true)
; 266  :             : Exception(PMC_STATUS_NOT_SUPPORTED, message)
; 267  :         {
; 268  :         }
; 269  : 
; 270  :         NotSupportedException(const NotSupportedException& p) noexcept(true)
; 271  :             : Exception(p)
; 272  :         {
; 273  :         }
; 274  : 
; 275  :         virtual ~NotSupportedException() noexcept(true)
; 276  :         {
; 277  :         }
; 278  :     };
; 279  : 
; 280  :     class InternalErrorException
; 281  :         : public Exception
; 282  :     {
; 283  :     public:
; 284  :         InternalErrorException(const wchar_t* message, const wchar_t* data) noexcept(true)
; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)
; 286  :         {
; 287  :         }
; 288  : 
; 289  :         InternalErrorException(const InternalErrorException& p) noexcept(true)
; 290  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 291  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	c7 41 0c 00 ff
	ff ff		 mov	 DWORD PTR [ecx+12], -256 ; ffffff00H
  00051	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)
; 234  :         {
; 235  :         }
; 236  : 
; 237  :         virtual ~InsufficientBufferException() noexcept(true)
; 238  :         {
; 239  :         }
; 240  :     };
; 241  : 
; 242  :     class NotEnoughMemoryException
; 243  :         : public Exception
; 244  :     {
; 245  :     public:
; 246  :         NotEnoughMemoryException(const wchar_t* message) noexcept(true)
; 247  :             : Exception(PMC_STATUS_NOT_ENOUGH_MEMORY, message)
; 248  :         {
; 249  :         }
; 250  : 
; 251  :         NotEnoughMemoryException(const NotEnoughMemoryException& p) noexcept(true)
; 252  :             : Exception(p)
; 253  :         {
; 254  :         }
; 255  : 
; 256  :         virtual ~NotEnoughMemoryException() noexcept(true)
; 257  :         {
; 258  :         }
; 259  :     };
; 260  : 
; 261  :     class NotSupportedException
; 262  :         : public Exception
; 263  :     {
; 264  :     public:
; 265  :         NotSupportedException(const wchar_t* message) noexcept(true)
; 266  :             : Exception(PMC_STATUS_NOT_SUPPORTED, message)
; 267  :         {
; 268  :         }
; 269  : 
; 270  :         NotSupportedException(const NotSupportedException& p) noexcept(true)
; 271  :             : Exception(p)
; 272  :         {
; 273  :         }
; 274  : 
; 275  :         virtual ~NotSupportedException() noexcept(true)
; 276  :         {
; 277  :         }
; 278  :     };
; 279  : 
; 280  :     class InternalErrorException
; 281  :         : public Exception
; 282  :     {
; 283  :     public:
; 284  :         InternalErrorException(const wchar_t* message, const wchar_t* data) noexcept(true)
; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 286  :         {

  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b c1		 mov	 eax, ecx
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::NotSupportedException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 276  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@

; 277  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::NotSupportedException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::NotSupportedException::~NotSupportedException, COMDAT
; _this$ = ecx

; 276  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@

; 277  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 277  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::NotSupportedException::~NotSupportedException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException, COMDAT
; _this$ = ecx

; 272  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)
; 234  :         {
; 235  :         }
; 236  : 
; 237  :         virtual ~InsufficientBufferException() noexcept(true)
; 238  :         {
; 239  :         }
; 240  :     };
; 241  : 
; 242  :     class NotEnoughMemoryException
; 243  :         : public Exception
; 244  :     {
; 245  :     public:
; 246  :         NotEnoughMemoryException(const wchar_t* message) noexcept(true)
; 247  :             : Exception(PMC_STATUS_NOT_ENOUGH_MEMORY, message)
; 248  :         {
; 249  :         }
; 250  : 
; 251  :         NotEnoughMemoryException(const NotEnoughMemoryException& p) noexcept(true)
; 252  :             : Exception(p)
; 253  :         {
; 254  :         }
; 255  : 
; 256  :         virtual ~NotEnoughMemoryException() noexcept(true)
; 257  :         {
; 258  :         }
; 259  :     };
; 260  : 
; 261  :     class NotSupportedException
; 262  :         : public Exception
; 263  :     {
; 264  :     public:
; 265  :         NotSupportedException(const wchar_t* message) noexcept(true)
; 266  :             : Exception(PMC_STATUS_NOT_SUPPORTED, message)
; 267  :         {
; 268  :         }
; 269  : 
; 270  :         NotSupportedException(const NotSupportedException& p) noexcept(true)
; 271  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 272  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@

; 273  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException, COMDAT
; _this$ = ecx

; 267  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 48   :         {
; 49   :             _code = code;
; 50   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00044	c7 41 0c f6 ff
	ff ff		 mov	 DWORD PTR [ecx+12], -10	; fffffff6H
  0004b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 51   :             _data = nullptr;

  0004e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 52   :         }
; 53   : 
; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)
; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;
; 58   :             _data = data;
; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)
; 234  :         {
; 235  :         }
; 236  : 
; 237  :         virtual ~InsufficientBufferException() noexcept(true)
; 238  :         {
; 239  :         }
; 240  :     };
; 241  : 
; 242  :     class NotEnoughMemoryException
; 243  :         : public Exception
; 244  :     {
; 245  :     public:
; 246  :         NotEnoughMemoryException(const wchar_t* message) noexcept(true)
; 247  :             : Exception(PMC_STATUS_NOT_ENOUGH_MEMORY, message)
; 248  :         {
; 249  :         }
; 250  : 
; 251  :         NotEnoughMemoryException(const NotEnoughMemoryException& p) noexcept(true)
; 252  :             : Exception(p)
; 253  :         {
; 254  :         }
; 255  : 
; 256  :         virtual ~NotEnoughMemoryException() noexcept(true)
; 257  :         {
; 258  :         }
; 259  :     };
; 260  : 
; 261  :     class NotSupportedException
; 262  :         : public Exception
; 263  :     {
; 264  :     public:
; 265  :         NotSupportedException(const wchar_t* message) noexcept(true)
; 266  :             : Exception(PMC_STATUS_NOT_SUPPORTED, message)

  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 267  :         {

  0005c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@

; 268  :         }

  00062	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00069	8b c1		 mov	 eax, ecx
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 238  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 239  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException, COMDAT
; _this$ = ecx

; 238  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 239  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 239  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT
; _this$ = ecx

; 234  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 234  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 235  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT
; _this$ = ecx

; 229  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 48   :         {
; 49   :             _code = code;
; 50   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00044	c7 41 0c f8 ff
	ff ff		 mov	 DWORD PTR [ecx+12], -8	; fffffff8H
  0004b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 51   :             _data = nullptr;

  0004e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 52   :         }
; 53   : 
; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)
; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;
; 58   :             _data = data;
; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)

  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 229  :         {

  0005c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 230  :         }

  00062	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00069	8b c1		 mov	 eax, ecx
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::FormatException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 219  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7FormatException@Internal@Core@Math@Palmtree@@6B@

; 220  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::FormatException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::FormatException::~FormatException, COMDAT
; _this$ = ecx

; 219  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7FormatException@Internal@Core@Math@Palmtree@@6B@

; 220  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 220  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::FormatException::~FormatException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::FormatException::FormatException, COMDAT
; _this$ = ecx

; 215  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 215  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7FormatException@Internal@Core@Math@Palmtree@@6B@

; 216  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::FormatException::FormatException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::FormatException::FormatException, COMDAT
; _this$ = ecx

; 210  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 48   :         {
; 49   :             _code = code;
; 50   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00044	c7 41 0c f9 ff
	ff ff		 mov	 DWORD PTR [ecx+12], -7	; fffffff9H
  0004b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 51   :             _data = nullptr;

  0004e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 52   :         }
; 53   : 
; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)
; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;
; 58   :             _data = data;
; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)

  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 210  :         {

  0005c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7FormatException@Internal@Core@Math@Palmtree@@6B@

; 211  :         }

  00062	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00069	8b c1		 mov	 eax, ecx
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::FormatException::FormatException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 124  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 125  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 125  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 125  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 120  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	c7 41 0c fe ff
	ff ff		 mov	 DWORD PTR [ecx+12], -2	; fffffffeH
  00051	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 115  :         {

  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b c1		 mov	 eax, ecx
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 70   :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00036	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00039	50		 push	 eax
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00040	e8 00 00 00 00	 call	 ___std_exception_destroy
  00045	83 c4 04	 add	 esp, 4
  00048	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0004c	74 0b		 je	 SHORT $LN9@scalar
  0004e	6a 18		 push	 24			; 00000018H
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00059	8b c6		 mov	 eax, esi
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5e		 pop	 esi
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00033	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00036	50		 push	 eax
  00037	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 71   :         }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }

  00058	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005f	8b c2		 mov	 eax, edx
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0003e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 57   :             _message = message;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  00044	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00047	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  0004a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00050	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b c1		 mov	 eax, ecx
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 48   :         {
; 49   :             _code = code;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0003e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 50   :             _message = message;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 51   :             _data = nullptr;

  0004d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 52   :         }

  00054	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005b	8b c1		 mov	 eax, ecx
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gexception@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00025	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ___std_exception_destroy
  00034	83 c4 04	 add	 esp, 4
  00037	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003b	74 0b		 je	 SHORT $LN6@scalar
  0003d	6a 0c		 push	 12			; 0000000cH
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00048	8b c6		 mov	 eax, esi
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gexception@std@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gexception@std@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 92   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 86   :         __std_exception_destroy(&_Data);

  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ___std_exception_destroy
  00031	83 c4 04	 add	 esp, 4

; 87   :     }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 51   :     }

  0000e	8b c1		 mov	 eax, ecx
  00010	c3		 ret	 0
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
_TEXT	ENDS
END
