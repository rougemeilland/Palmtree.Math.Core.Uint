; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_memory.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_number_zero:BYTE:028H
COMM	_number_one:BYTE:028H
COMM	_hLocalHeap:DWORD
_DATA	ENDS
PUBLIC	_AllocateHeapArea
PUBLIC	_DeallocateHeapArea
PUBLIC	_AllocateBlock
PUBLIC	_DeallocateBlock
PUBLIC	_CheckBlockLight
PUBLIC	_AttatchNumber
PUBLIC	_AllocateNumber
PUBLIC	_DetatchNumber
PUBLIC	_DeallocateNumber
PUBLIC	_CommitNumber
PUBLIC	_CheckNumber
PUBLIC	_DuplicateNumber
PUBLIC	_Initialize_Memory
PUBLIC	_PMC_Dispose@4
PUBLIC	_PMC_GetConstantValue_I@8
EXTRN	__imp__HeapCreate@12:PROC
EXTRN	__imp__HeapDestroy@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _GetTrailingZeroBitCount
_TEXT	SEGMENT
_p$ = 8							; size = 4
_word_count$ = 12					; size = 4
_GetTrailingZeroBitCount PROC				; COMDAT

; 464  : {

	push	ebp
	mov	ebp, esp

; 465  :     __UNIT_TYPE bit_count = 0;
; 466  :     while (word_count > 0)

	mov	eax, DWORD PTR _word_count$[ebp]
	xor	edx, edx
	push	esi
	test	eax, eax
	je	SHORT $LN3@GetTrailin
	mov	ecx, DWORD PTR _p$[ebp]
$LL2@GetTrailin:

; 467  :     {
; 468  :         --word_count;
; 469  :         if (*p != 0)

	mov	esi, DWORD PTR [ecx]
	dec	eax
	test	esi, esi
	jne	SHORT $LN10@GetTrailin

; 471  :         bit_count += __UNIT_TYPE_BIT_COUNT;

	add	edx, 32					; 00000020H

; 472  :         ++p;

	add	ecx, 4
	test	eax, eax
	jne	SHORT $LL2@GetTrailin
$LN3@GetTrailin:

; 473  :     }
; 474  :     // このルートには到達しないはず
; 475  :     return (0);

	xor	eax, eax
	pop	esi

; 476  : }

	pop	ebp
	ret	0
$LN10@GetTrailin:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 709  :         _BitScanForward(&pos, x);

	bsf	eax, esi
	pop	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 470  :             return (bit_count + _TZCNT_ALT_UNIT(*p));

	add	eax, edx

; 476  : }

	pop	ebp
	ret	0
_GetTrailingZeroBitCount ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _GetEffectiveBitLength
_TEXT	SEGMENT
_p$ = 8							; size = 4
_word_count$ = 12					; size = 4
_effective_word_count$ = 16				; size = 4
_GetEffectiveBitLength PROC				; COMDAT

; 442  : {

	push	ebp
	mov	ebp, esp

; 443  :     if (p == NULL)

	mov	eax, DWORD PTR _p$[ebp]
	test	eax, eax
	je	SHORT $LN3@GetEffecti

; 444  :     {
; 445  :         *effective_word_count = 0;
; 446  :         return (0);
; 447  :     }
; 448  :     p += word_count;

	mov	edx, DWORD PTR _word_count$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]

; 449  :     while (word_count != 0)

	test	edx, edx
	je	SHORT $LN3@GetEffecti
$LL2@GetEffecti:

; 450  :     {
; 451  :         --p;
; 452  :         if (*p != 0)

	cmp	DWORD PTR [ecx-4], 0
	lea	ecx, DWORD PTR [ecx-4]
	jne	SHORT $LN11@GetEffecti

; 456  :         }
; 457  :         --word_count;

	sub	edx, 1
	jne	SHORT $LL2@GetEffecti
$LN3@GetEffecti:

; 458  :     }
; 459  :     *effective_word_count = 0;

	mov	eax, DWORD PTR _effective_word_count$[ebp]
	mov	DWORD PTR [eax], 0

; 460  :     return (0);

	xor	eax, eax

; 461  : }

	pop	ebp
	ret	0
$LN11@GetEffecti:

; 453  :         {
; 454  :             *effective_word_count = word_count;

	mov	eax, DWORD PTR _effective_word_count$[ebp]
	mov	DWORD PTR [eax], edx

; 455  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 624  :         if (x == 0)

	test	eax, eax
	jne	SHORT $LN8@GetEffecti

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 455  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	edx, 5
	sub	edx, eax
	mov	eax, edx

; 461  : }

	pop	ebp
	ret	0
$LN8@GetEffecti:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 629  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 455  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	edx, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 648  :         return (sizeof(x) * 8 - 1 - pos);

	sub	eax, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 455  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	sub	edx, eax
	mov	eax, edx

; 461  : }

	pop	ebp
	ret	0
_GetEffectiveBitLength ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _CleanUpNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CleanUpNumber PROC					; COMDAT

; 395  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 396  :     if (p->BLOCK != NULL)

	mov	esi, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN2@CleanUpNum

; 397  :     {
; 398  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR [esi+32]

; 201  :         __UNIT_TYPE* p = buffer - 1;

	lea	edx, DWORD PTR [eax-4]

; 202  :         if (*p != buffer_words)

	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN7@CleanUpNum

; 203  :         {
; 204  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 205  :         }
; 206  :         else
; 207  :         {
; 208  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 209  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	push	edi

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	add	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, edx
	mov	eax, -858993460				; ccccccccH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
$LN7@CleanUpNum:

; 399  :         p->BLOCK = NULL;

	mov	DWORD PTR [esi+36], 0
$LN2@CleanUpNum:
	pop	esi

; 400  :     }
; 401  : }

	pop	ebp
	ret	0
_CleanUpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _InitializeNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_bit_count$ = 12					; size = 4
_light_check_code$ = 16					; size = 4
_InitializeNumber PROC					; COMDAT

; 367  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 368  :     if (bit_count > 0)

	mov	edi, DWORD PTR _bit_count$[ebp]
	test	edi, edi
	je	SHORT $LN2@Initialize
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	esi, DWORD PTR [edi+31]
	shr	esi, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 163  : 	__UNIT_TYPE bytes = words2 * __UNIT_TYPE_BYTE_COUNT;

	lea	eax, DWORD PTR [esi*4+8]

; 164  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	push	eax
	push	8
	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapAlloc@12

; 165  : 	if (buffer == NULL)

	test	eax, eax
	je	SHORT $LN26@Initialize

; 166  : 		return (NULL);
; 167  : 	buffer[0] = words1;
; 168  :     *allocated_block_words = words1;
; 169  : #ifdef _DEBUG
; 170  :     // 乱数もどきを生成する。
; 171  : #ifdef _M_IX86
; 172  :     __UNIT_TYPE r = GetTickCount();
; 173  : #elif defined(_M_IX64)
; 174  : #ifdef _MSC_VER
; 175  :     __UNIT_TYPE r = GetTickCount64();
; 176  : #elif defined(__GNUC__)
; 177  :     _UINT32_T temp = GetTickCount();
; 178  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 179  : #else
; 180  : #error unknown compiler
; 181  : #endif
; 182  : #else
; 183  : #error unknown platform
; 184  : #endif
; 185  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;
; 186  : #else
; 187  :     __UNIT_TYPE check_code = 0;
; 188  : #endif
; 189  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	lea	ecx, DWORD PTR [esi+1]
	mov	DWORD PTR [eax], esi
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [ecx], ecx

; 190  :     if (code != NULL)

	mov	ecx, DWORD PTR _light_check_code$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@Initialize

; 191  :         *code = check_code;

	mov	DWORD PTR [ecx], 0
$LN8@Initialize:

; 192  :     return (&buffer[1]);

	lea	edx, DWORD PTR [eax+4]

; 369  :     {
; 370  :         __UNIT_TYPE word_count;
; 371  :         __UNIT_TYPE* block = AllocateBlock(bit_count, &word_count, light_check_code);
; 372  :         if (block == NULL)

	test	edx, edx
	je	SHORT $LN26@Initialize

; 374  :         ClearNumberHeader(p);

	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_ClearNumberHeader
	add	esp, 4

; 375  :         p->SIGNATURE1 = PMC_SIGNATURE;
; 376  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;
; 377  :         p->UNIT_BIT_COUNT = bit_count;
; 378  :         p->BLOCK_COUNT = word_count;
; 379  :         p->BLOCK = block;
; 380  :     }

	jmp	SHORT $LN3@Initialize
$LN26@Initialize:
	pop	edi

; 373  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH

; 392  : }

	pop	esi
	pop	ebp
	ret	0
$LN2@Initialize:

; 292  :             __p[0] = 0;

	mov	ecx, DWORD PTR _p$[ebp]

; 381  :     else
; 382  :     {
; 383  :         // bit_count に 0 が与えられるのは、数値が 0 の場合。
; 384  :         ClearNumberHeader(p);
; 385  :         p->SIGNATURE1 = PMC_SIGNATURE;
; 386  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;
; 387  :         p->UNIT_BIT_COUNT = 0;
; 388  :         p->BLOCK_COUNT = 0;
; 389  :         p->BLOCK = NULL;

	xor	edx, edx
	xor	esi, esi
	xor	edi, edi

; 292  :             __p[0] = 0;

	mov	DWORD PTR [ecx], 0

; 293  :             __p[1] = 0;
; 294  :             __p[2] = 0;
; 295  :             __p[3] = 0;

	mov	DWORD PTR [ecx+12], 0

; 296  :             __p[4] = 0;
; 297  :             __p[5] = 0;

	mov	DWORD PTR [ecx+20], 0

; 298  :             __p[6] = 0;

	mov	DWORD PTR [ecx+24], 0

; 299  :             __p[7] = 0;

	mov	DWORD PTR [ecx+28], 0
$LN3@Initialize:

; 390  :     }
; 391  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [ecx+4], 1231244656		; 49634d70H
	xor	eax, eax
	mov	DWORD PTR [ecx+8], 1416522069		; 546e6955H
	mov	DWORD PTR [ecx+16], edi
	mov	DWORD PTR [ecx+32], esi
	pop	edi
	mov	DWORD PTR [ecx+36], edx

; 392  : }

	pop	esi
	pop	ebp
	ret	0
_InitializeNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _FillNumberHeader
_TEXT	SEGMENT
_p$ = 8							; size = 4
_FillNumberHeader PROC					; COMDAT

; 319  : {

	push	ebp
	mov	ebp, esp

; 320  : #ifdef _M_IX64
; 321  :     if (sizeof(*p) == sizeof(_UINT64_T) * 9)
; 322  :     {
; 323  :         _UINT64_T* __p = (_UINT64_T*)p;
; 324  :         __p[0] = DEFAULT_MEMORY_DATA;
; 325  :         __p[1] = DEFAULT_MEMORY_DATA;
; 326  :         __p[2] = DEFAULT_MEMORY_DATA;
; 327  :         __p[3] = DEFAULT_MEMORY_DATA;
; 328  :         __p[4] = DEFAULT_MEMORY_DATA;
; 329  :         __p[5] = DEFAULT_MEMORY_DATA;
; 330  :         __p[6] = DEFAULT_MEMORY_DATA;
; 331  :         __p[7] = DEFAULT_MEMORY_DATA;
; 332  :         __p[8] = DEFAULT_MEMORY_DATA;
; 333  :     }
; 334  :     else
; 335  :     {
; 336  : #endif
; 337  :         if (sizeof(*p) == sizeof(_UINT32_T) * 10)
; 338  :         {
; 339  :             _UINT32_T* __p = (_UINT32_T*)p;
; 340  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], -858993460		; ccccccccH

; 341  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+4], -858993460		; ccccccccH

; 342  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+8], -858993460		; ccccccccH

; 343  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+12], -858993460		; ccccccccH

; 344  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+16], -858993460		; ccccccccH

; 345  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+20], -858993460		; ccccccccH

; 346  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+24], -858993460		; ccccccccH

; 347  :             __p[7] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+28], -858993460		; ccccccccH

; 348  :             __p[8] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+32], -858993460		; ccccccccH

; 349  :             __p[9] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [eax+36], -858993460		; ccccccccH

; 350  :         }
; 351  : #ifdef _M_IX64
; 352  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 353  :             _FILL_MEMORY_64((_UINT64_T*)p, DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT64_T));
; 354  : #endif
; 355  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)
; 356  :             _FILL_MEMORY_32((_UINT32_T*)p, (_UINT32_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT32_T));
; 357  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)
; 358  :             _FILL_MEMORY_16((_UINT16_T*)p, (_UINT16_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT16_T));
; 359  :         else
; 360  :             _FILL_MEMORY_BYTE(p, (unsigned char)DEFAULT_MEMORY_DATA, sizeof(*p));
; 361  : #ifdef _M_IX64
; 362  :     }
; 363  : #endif
; 364  : }

	pop	ebp
	ret	0
_FillNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _ClearNumberHeader
_TEXT	SEGMENT
_p$ = 8							; size = 4
_ClearNumberHeader PROC					; COMDAT

; 271  : {

	push	ebp
	mov	ebp, esp

; 272  : #ifdef _M_IX64
; 273  :     if (sizeof(*p) == sizeof(_UINT64_T) * 9)
; 274  :     {
; 275  :         _UINT64_T* __p = (_UINT64_T*)p;
; 276  :         __p[0] = 0;
; 277  :         __p[1] = 0;
; 278  :         __p[2] = 0;
; 279  :         __p[3] = 0;
; 280  :         __p[4] = 0;
; 281  :         __p[5] = 0;
; 282  :         __p[6] = 0;
; 283  :         __p[7] = 0;
; 284  :         __p[8] = 0;
; 285  :     }
; 286  :     else
; 287  :     {
; 288  : #endif
; 289  :         if (sizeof(*p) == sizeof(_UINT32_T) * 10)
; 290  :         {
; 291  :             _UINT32_T* __p = (_UINT32_T*)p;
; 292  :             __p[0] = 0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0

; 293  :             __p[1] = 0;

	mov	DWORD PTR [eax+4], 0

; 294  :             __p[2] = 0;

	mov	DWORD PTR [eax+8], 0

; 295  :             __p[3] = 0;

	mov	DWORD PTR [eax+12], 0

; 296  :             __p[4] = 0;

	mov	DWORD PTR [eax+16], 0

; 297  :             __p[5] = 0;

	mov	DWORD PTR [eax+20], 0

; 298  :             __p[6] = 0;

	mov	DWORD PTR [eax+24], 0

; 299  :             __p[7] = 0;

	mov	DWORD PTR [eax+28], 0

; 300  :             __p[8] = 0;

	mov	DWORD PTR [eax+32], 0

; 301  :             __p[9] = 0;

	mov	DWORD PTR [eax+36], 0

; 302  :         }
; 303  : #ifdef _M_IX64
; 304  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 305  :             _ZERO_MEMORY_64((_UINT64_T*)p, sizeof(*p) / sizeof(_UINT64_T));
; 306  : #endif
; 307  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)
; 308  :             _ZERO_MEMORY_32((_UINT32_T*)p, sizeof(*p) / sizeof(_UINT32_T));
; 309  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)
; 310  :             _ZERO_MEMORY_16((_UINT16_T*)p, sizeof(*p) / sizeof(_UINT16_T));
; 311  :         else
; 312  :             _ZERO_MEMORY_BYTE(p, sizeof(*p));
; 313  : #ifdef _M_IX64
; 314  :     }
; 315  : #endif
; 316  : }

	pop	ebp
	ret	0
_ClearNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _CheckBlock
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_CheckBlock PROC					; COMDAT

; 235  : #ifdef _DEBUG
; 236  :     if (buffer == NULL)
; 237  :         return (PMC_STATUS_OK);
; 238  :     --buffer;
; 239  :     __UNIT_TYPE words = buffer[0];
; 240  :     __UNIT_TYPE code_desired = buffer[words + 1];
; 241  :     __UNIT_TYPE code_actual = CalculateCheckCode(&buffer[1], words);
; 242  :     if (code_actual == code_desired)
; 243  :         return (PMC_STATUS_OK);
; 244  :     else
; 245  :         return (PMC_STATUS_BAD_BUFFER);
; 246  : #else
; 247  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 248  : #endif
; 249  : }

	ret	0
_CheckBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _CommitBlock
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_CommitBlock PROC					; COMDAT

; 218  : {

	push	ebp
	mov	ebp, esp

; 219  :     if (buffer != NULL)

	mov	ecx, DWORD PTR _buffer$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@CommitBloc

; 220  :     {
; 221  :         --buffer;
; 222  :         __UNIT_TYPE words = buffer[0];
; 223  : #ifdef _DEBUG
; 224  :         __UNIT_TYPE code = CalculateCheckCode(&buffer[1], words);
; 225  : #else
; 226  :         __UNIT_TYPE code = 0;
; 227  : #endif
; 228  :         buffer[words + 1] = code;

	mov	eax, DWORD PTR [ecx-4]
	mov	DWORD PTR [ecx+eax*4], 0
$LN2@CommitBloc:

; 229  :     }
; 230  : }

	pop	ebp
	ret	0
_CommitBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _CalculateCheckCode
_TEXT	SEGMENT
_p$ = 8							; size = 4
_words$ = 12						; size = 4
_CalculateCheckCode PROC				; COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp

; 54   : 	__UNIT_TYPE code = CHECK_CODE_INIT;
; 55   : 	
; 56   :     __UNIT_TYPE count = words >> 5;
; 57   : 	while (count != 0)

	mov	ecx, DWORD PTR _p$[ebp]
	mov	eax, -2071690108			; 84848484H
	push	ebx
	mov	ebx, DWORD PTR _words$[ebp]
	mov	edx, ebx
	shr	edx, 5
	test	edx, edx
	je	$LN3@CalculateC
	npad	4
$LL2@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 59   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 60   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 61   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 62   :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 63   :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	xor	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 64   :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	xor	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 65   :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	xor	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 66   :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	xor	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 67   :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	xor	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 68   :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	xor	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 69   :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	xor	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 70   :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	xor	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 71   :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	xor	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 72   :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	xor	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 73   :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	xor	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 74   :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	xor	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 75   :         code = _ROTATE_L_UNIT(code, 3) ^ p[16];

	xor	eax, DWORD PTR [ecx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 76   :         code = _ROTATE_L_UNIT(code, 3) ^ p[17];

	xor	eax, DWORD PTR [ecx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 77   :         code = _ROTATE_L_UNIT(code, 3) ^ p[18];

	xor	eax, DWORD PTR [ecx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 78   :         code = _ROTATE_L_UNIT(code, 3) ^ p[19];

	xor	eax, DWORD PTR [ecx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 79   :         code = _ROTATE_L_UNIT(code, 3) ^ p[20];

	xor	eax, DWORD PTR [ecx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 80   :         code = _ROTATE_L_UNIT(code, 3) ^ p[21];

	xor	eax, DWORD PTR [ecx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 81   :         code = _ROTATE_L_UNIT(code, 3) ^ p[22];

	xor	eax, DWORD PTR [ecx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 82   :         code = _ROTATE_L_UNIT(code, 3) ^ p[23];

	xor	eax, DWORD PTR [ecx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 83   :         code = _ROTATE_L_UNIT(code, 3) ^ p[24];

	xor	eax, DWORD PTR [ecx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 84   :         code = _ROTATE_L_UNIT(code, 3) ^ p[25];

	xor	eax, DWORD PTR [ecx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 85   :         code = _ROTATE_L_UNIT(code, 3) ^ p[26];

	xor	eax, DWORD PTR [ecx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 86   :         code = _ROTATE_L_UNIT(code, 3) ^ p[27];

	xor	eax, DWORD PTR [ecx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 87   :         code = _ROTATE_L_UNIT(code, 3) ^ p[28];

	xor	eax, DWORD PTR [ecx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 88   :         code = _ROTATE_L_UNIT(code, 3) ^ p[29];

	xor	eax, DWORD PTR [ecx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 89   :         code = _ROTATE_L_UNIT(code, 3) ^ p[30];

	xor	eax, DWORD PTR [ecx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 90   :         code = _ROTATE_L_UNIT(code, 3) ^ p[31];

	xor	eax, DWORD PTR [ecx+124]

; 91   :         p += 32;

	sub	ecx, -128				; ffffff80H

; 92   :         --count;

	sub	edx, 1
	jne	$LL2@CalculateC
$LN3@CalculateC:

; 93   :     }
; 94   : 
; 95   : 	if (words & 0x10)

	test	bl, 16					; 00000010H
	je	SHORT $LN4@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 97   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 98   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 99   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 100  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 101  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	xor	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 102  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	xor	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 103  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	xor	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 104  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	xor	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 105  :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	xor	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 106  :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	xor	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 107  :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	xor	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 108  :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	xor	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 109  :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	xor	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 110  :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	xor	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 111  :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	xor	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 112  :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	xor	eax, DWORD PTR [ecx+60]

; 113  :         p += 16;

	add	ecx, 64					; 00000040H
$LN4@CalculateC:

; 114  :     }
; 115  : 
; 116  :     if (words & 0x8)

	test	bl, 8
	je	SHORT $LN5@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 118  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 119  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 120  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 121  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 122  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	xor	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 123  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	xor	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 124  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	xor	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 125  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	xor	eax, DWORD PTR [ecx+28]

; 126  :         p += 8;

	add	ecx, 32					; 00000020H
$LN5@CalculateC:

; 127  :     }
; 128  : 
; 129  :     if (words & 0x4)

	test	bl, 4
	je	SHORT $LN6@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 131  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 132  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 133  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 134  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	eax, DWORD PTR [ecx+12]

; 135  :         p += 4;

	add	ecx, 16					; 00000010H
$LN6@CalculateC:

; 136  :     }
; 137  : 
; 138  :     if (words & 0x2)

	test	bl, 2
	je	SHORT $LN7@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 140  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 141  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	eax, DWORD PTR [ecx+4]

; 142  :         p += 2;

	add	ecx, 8
$LN7@CalculateC:

; 143  :     }
; 144  : 
; 145  :     if (words & 0x1)

	test	bl, 1
	pop	ebx
	je	SHORT $LN8@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 477  :         return (_rotl(x, count));

	rol	eax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 146  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	eax, DWORD PTR [ecx]
$LN8@CalculateC:

; 147  :     
; 148  :     return (code);
; 149  : }

	pop	ebp
	ret	0
_CalculateCheckCode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __TZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__TZCNT_ALT_UNIT PROC					; COMDAT

; 703  :     {

	push	ebp
	mov	ebp, esp

; 704  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@TZCNT_ALT_

; 705  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 710  : #elif defined(__GNUC__)
; 711  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 712  : #else
; 713  : #error unknown compiler
; 714  : #endif
; 715  : #elif defined(_M_X64)
; 716  : #ifdef _MSC_VER
; 717  :         _UINT32_T pos;
; 718  :         _BitScanForward64(&pos, x);
; 719  : #elif defined(__GNUC__)
; 720  :         _UINT64_T pos;
; 721  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 722  : #else
; 723  : #error unknown compiler
; 724  : #endif
; 725  : #else
; 726  : #error unknown platform
; 727  : #endif
; 728  :         return (pos);
; 729  :     }

	pop	ebp
	ret	0
$LN2@TZCNT_ALT_:

; 706  : #ifdef _M_IX86
; 707  :         _UINT32_T pos;
; 708  : #ifdef _MSC_VER
; 709  :         _BitScanForward(&pos, x);

	bsf	eax, eax

; 710  : #elif defined(__GNUC__)
; 711  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 712  : #else
; 713  : #error unknown compiler
; 714  : #endif
; 715  : #elif defined(_M_X64)
; 716  : #ifdef _MSC_VER
; 717  :         _UINT32_T pos;
; 718  :         _BitScanForward64(&pos, x);
; 719  : #elif defined(__GNUC__)
; 720  :         _UINT64_T pos;
; 721  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 722  : #else
; 723  : #error unknown compiler
; 724  : #endif
; 725  : #else
; 726  : #error unknown platform
; 727  : #endif
; 728  :         return (pos);
; 729  :     }

	pop	ebp
	ret	0
__TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :     {

	push	ebp
	mov	ebp, esp

; 624  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 649  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 649  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ROTATE_L_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_count$ = 12						; size = 4
__ROTATE_L_UNIT PROC					; COMDAT

; 475  :     {

	push	ebp
	mov	ebp, esp

; 476  : #ifdef _M_IX86
; 477  :         return (_rotl(x, count));

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rol	eax, cl

; 478  : #elif defined(_M_X64)
; 479  :         return (_rotl64(x, count));
; 480  : #else
; 481  : #error unknown platform
; 482  : #endif
; 483  :     }

	pop	ebp
	ret	0
__ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC				; COMDAT

; 187  :     {

	push	ebp
	mov	ebp, esp

; 188  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _u$[ebp]
	xor	edx, edx
	dec	eax
	add	eax, DWORD PTR _v$[ebp]
	div	DWORD PTR _v$[ebp]

; 189  :     }

	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FILL_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_UNIT PROC					; COMDAT

; 160  :     {

	push	ebp
	mov	ebp, esp

; 161  : #ifdef _M_IX86
; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 163  : #elif defined(_M_X64)
; 164  :         __stosq(d, x, count);
; 165  : #else
; 166  : #error unknown platform
; 167  : #endif
; 168  :     }

	pop	ebp
	ret	0
__FILL_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FILL_MEMORY_32
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_32 PROC					; COMDAT

; 148  :     {

	push	ebp
	mov	ebp, esp

; 149  :         __stosd((unsigned long*)d, x, count);

	mov	ecx, DWORD PTR _count$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 150  :     }

	pop	ebp
	ret	0
__FILL_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FILL_MEMORY_16
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 2
_count$ = 16						; size = 4
__FILL_MEMORY_16 PROC					; COMDAT

; 143  :     {

	push	ebp
	mov	ebp, esp

; 144  :         __stosw(d, x, count);

	mov	ax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosw
	pop	edi

; 145  :     }

	pop	ebp
	ret	0
__FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FILL_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 1
_count$ = 16						; size = 4
__FILL_MEMORY_BYTE PROC					; COMDAT

; 138  :     {

	push	ebp
	mov	ebp, esp

; 139  :         __stosb(d, x, count);

	mov	al, BYTE PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosb
	pop	edi

; 140  :     }

	pop	ebp
	ret	0
__FILL_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_32
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_32 PROC					; COMDAT

; 98   :     {

	push	ebp
	mov	ebp, esp

; 99   :         __stosd((unsigned long*)d, 0, count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 100  :     }

	pop	ebp
	ret	0
__ZERO_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_16
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_16 PROC					; COMDAT

; 93   :     {

	push	ebp
	mov	ebp, esp

; 94   :         __stosw(d, 0, count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosw
	pop	edi

; 95   :     }

	pop	ebp
	ret	0
__ZERO_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC					; COMDAT

; 88   :     {

	push	ebp
	mov	ebp, esp

; 89   :         __stosb(d, 0, count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	al, al
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosb
	pop	edi

; 90   :     }

	pop	ebp
	ret	0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	push	ebp
	mov	ebp, esp

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);
; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _PMC_GetConstantValue_I@8
_TEXT	SEGMENT
_type$ = 8						; size = 4
_o$ = 12						; size = 4
_PMC_GetConstantValue_I@8 PROC				; COMDAT

; 553  : {

	push	ebp
	mov	ebp, esp

; 554  :     switch (type)

	mov	eax, DWORD PTR _type$[ebp]
	sub	eax, 1
	je	SHORT $LN4@PMC_GetCon
	sub	eax, 1
	je	SHORT $LN5@PMC_GetCon

; 561  :         return (PMC_STATUS_OK);
; 562  :     default:
; 563  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 564  :     }
; 565  : }

	pop	ebp
	ret	8
$LN5@PMC_GetCon:

; 558  :         return (PMC_STATUS_OK);
; 559  :     case PMC_CONSTANT_ONE:
; 560  :         *o = (PMC_HANDLE_UINT)&number_one;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_one

; 564  :     }
; 565  : }

	xor	eax, eax
	pop	ebp
	ret	8
$LN4@PMC_GetCon:

; 555  :     {
; 556  :     case PMC_CONSTANT_ZERO:
; 557  :         *o = (PMC_HANDLE_UINT)&number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 564  :     }
; 565  : }

	xor	eax, eax
	pop	ebp
	ret	8
_PMC_GetConstantValue_I@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _PMC_Dispose@4
_TEXT	SEGMENT
_p$ = 8							; size = 4
_PMC_Dispose@4 PROC					; COMDAT

; 568  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 513  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_UINT_SIGNATURE)

	mov	esi, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [esi+4], 1231244656		; 49634d70H
	jne	$LN14@PMC_Dispos
	cmp	DWORD PTR [esi+8], 1416522069		; 546e6955H
	jne	$LN14@PMC_Dispos

; 434  :     if (p == NULL || p->IS_STATIC)

	test	BYTE PTR [esi+28], 1
	jne	$LN14@PMC_Dispos

; 396  :     if (p->BLOCK != NULL)

	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN22@PMC_Dispos

; 397  :     {
; 398  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR [esi+32]

; 201  :         __UNIT_TYPE* p = buffer - 1;

	lea	edx, DWORD PTR [eax-4]

; 202  :         if (*p != buffer_words)

	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN22@PMC_Dispos

; 203  :         {
; 204  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 205  :         }
; 206  :         else
; 207  :         {
; 208  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 209  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	push	edi

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	add	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, edx
	mov	eax, -858993460				; ccccccccH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
$LN22@PMC_Dispos:

; 438  :     HeapFree(hLocalHeap, 0, p);

	push	esi
	push	0

; 340  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi], -858993460		; ccccccccH

; 341  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+4], -858993460		; ccccccccH

; 342  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+8], -858993460		; ccccccccH

; 343  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+12], -858993460		; ccccccccH

; 344  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+16], -858993460		; ccccccccH

; 345  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+20], -858993460		; ccccccccH

; 346  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+24], -858993460		; ccccccccH

; 347  :             __p[7] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+28], -858993460		; ccccccccH

; 348  :             __p[8] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+32], -858993460		; ccccccccH

; 349  :             __p[9] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+36], -858993460		; ccccccccH

; 438  :     HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
$LN14@PMC_Dispos:
	pop	esi

; 569  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 570  :     PMC_STATUS_CODE result = CheckNumber(np);
; 571  :     if (result != PMC_STATUS_OK)
; 572  :         return;
; 573  :     DeallocateNumber(np);
; 574  :     return;
; 575  : }

	pop	ebp
	ret	4
_PMC_Dispose@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _Initialize_Memory
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Memory PROC					; COMDAT

; 578  : {

	push	esi

; 579  :     PMC_STATUS_CODE result = PMC_STATUS_OK;
; 580  : 
; 581  :     BOOL number_zero_ok = TRUE;
; 582  :     BOOL number_one_ok = TRUE;
; 583  :     if (result == PMC_STATUS_OK)
; 584  :     {
; 585  :         result = AttatchNumber(&number_zero, 0);
; 586  :         if (result == PMC_STATUS_OK)
; 587  :         {
; 588  :             CommitNumber(&number_zero);

	push	OFFSET _number_zero

; 292  :             __p[0] = 0;

	mov	DWORD PTR _number_zero, 0

; 293  :             __p[1] = 0;
; 294  :             __p[2] = 0;
; 295  :             __p[3] = 0;

	mov	DWORD PTR _number_zero+12, 0

; 296  :             __p[4] = 0;
; 297  :             __p[5] = 0;

	mov	DWORD PTR _number_zero+20, 0

; 298  :             __p[6] = 0;

	mov	DWORD PTR _number_zero+24, 0

; 385  :         p->SIGNATURE1 = PMC_SIGNATURE;

	mov	DWORD PTR _number_zero+4, 1231244656	; 49634d70H

; 386  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;

	mov	DWORD PTR _number_zero+8, 1416522069	; 546e6955H

; 387  :         p->UNIT_BIT_COUNT = 0;

	mov	DWORD PTR _number_zero+16, 0

; 388  :         p->BLOCK_COUNT = 0;

	mov	DWORD PTR _number_zero+32, 0

; 389  :         p->BLOCK = NULL;

	mov	DWORD PTR _number_zero+36, 0

; 408  :     p->IS_STATIC = TRUE;

	mov	DWORD PTR _number_zero+28, 1

; 579  :     PMC_STATUS_CODE result = PMC_STATUS_OK;
; 580  : 
; 581  :     BOOL number_zero_ok = TRUE;
; 582  :     BOOL number_one_ok = TRUE;
; 583  :     if (result == PMC_STATUS_OK)
; 584  :     {
; 585  :         result = AttatchNumber(&number_zero, 0);
; 586  :         if (result == PMC_STATUS_OK)
; 587  :         {
; 588  :             CommitNumber(&number_zero);

	call	_CommitNumber
	add	esp, 4

; 164  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	push	12					; 0000000cH
	push	8
	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapAlloc@12

; 165  : 	if (buffer == NULL)

	test	eax, eax
	je	SHORT $LN94@Initialize

; 166  : 		return (NULL);
; 167  : 	buffer[0] = words1;
; 168  :     *allocated_block_words = words1;
; 169  : #ifdef _DEBUG
; 170  :     // 乱数もどきを生成する。
; 171  : #ifdef _M_IX86
; 172  :     __UNIT_TYPE r = GetTickCount();
; 173  : #elif defined(_M_IX64)
; 174  : #ifdef _MSC_VER
; 175  :     __UNIT_TYPE r = GetTickCount64();
; 176  : #elif defined(__GNUC__)
; 177  :     _UINT32_T temp = GetTickCount();
; 178  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 179  : #else
; 180  : #error unknown compiler
; 181  : #endif
; 182  : #else
; 183  : #error unknown platform
; 184  : #endif
; 185  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;
; 186  : #else
; 187  :     __UNIT_TYPE check_code = 0;
; 188  : #endif
; 189  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	lea	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], 1
	add	eax, 8
	mov	DWORD PTR [ecx+4], eax

; 372  :         if (block == NULL)

	test	ecx, ecx
	je	SHORT $LN94@Initialize

; 374  :         ClearNumberHeader(p);

	push	OFFSET _number_one
	call	_ClearNumberHeader
	add	esp, 4

; 375  :         p->SIGNATURE1 = PMC_SIGNATURE;

	mov	DWORD PTR _number_one+4, 1231244656	; 49634d70H

; 406  :     if (result != PMC_STATUS_OK)

	xor	esi, esi

; 376  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;

	mov	DWORD PTR _number_one+8, 1416522069	; 546e6955H

; 408  :     p->IS_STATIC = TRUE;

	or	DWORD PTR _number_one+28, 1

; 377  :         p->UNIT_BIT_COUNT = bit_count;

	mov	DWORD PTR _number_one+16, 1

; 378  :         p->BLOCK_COUNT = word_count;

	mov	DWORD PTR _number_one+32, 1

; 379  :         p->BLOCK = block;

	mov	DWORD PTR _number_one+36, ecx

; 408  :     p->IS_STATIC = TRUE;

	jmp	SHORT $LN38@Initialize
$LN94@Initialize:

; 373  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	ecx, DWORD PTR _number_one+36
	mov	esi, -5					; fffffffbH
$LN38@Initialize:

; 589  :             number_zero_ok = TRUE;
; 590  :         }
; 591  :     }
; 592  : 
; 593  :     if (result == PMC_STATUS_OK)
; 594  :     {
; 595  :         result = AttatchNumber(&number_one, 1);
; 596  :         if (result == PMC_STATUS_OK)

	test	esi, esi
	jne	SHORT $LN5@Initialize

; 597  :         {
; 598  :             number_one.BLOCK[0] = 1;
; 599  :             CommitNumber(&number_one);

	push	OFFSET _number_one
	mov	DWORD PTR [ecx], 1
	call	_CommitNumber
	add	esp, 4

; 600  :             number_one_ok = TRUE;
; 601  :         }
; 602  :     }
; 603  : 
; 604  :     if (result != PMC_STATUS_OK)
; 605  :     {
; 606  :         if (number_zero_ok)
; 607  :             DetatchNumber(&number_zero);
; 608  :         if (number_one_ok)
; 609  :             DetatchNumber(&number_one);
; 610  :     }
; 611  : 
; 612  :     return (result);

	xor	eax, eax
	pop	esi

; 613  : }

	ret	0
$LN5@Initialize:

; 427  :     if (p == NULL || !p->IS_STATIC)

	test	BYTE PTR _number_zero+28, 1
	push	edi
	je	SHORT $LN68@Initialize

; 396  :     if (p->BLOCK != NULL)

	mov	eax, DWORD PTR _number_zero+36
	test	eax, eax
	je	SHORT $LN68@Initialize

; 397  :     {
; 398  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	edi, DWORD PTR _number_zero+32

; 201  :         __UNIT_TYPE* p = buffer - 1;

	lea	edx, DWORD PTR [eax-4]

; 202  :         if (*p != buffer_words)

	cmp	DWORD PTR [edx], edi
	jne	SHORT $LN76@Initialize

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	lea	ecx, DWORD PTR [edi+2]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	eax, -858993460				; ccccccccH
	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	mov	ecx, DWORD PTR _number_one+36
$LN76@Initialize:

; 399  :         p->BLOCK = NULL;

	mov	DWORD PTR _number_zero+36, 0
$LN68@Initialize:

; 427  :     if (p == NULL || !p->IS_STATIC)

	test	BYTE PTR _number_one+28, 1
	je	SHORT $LN95@Initialize

; 396  :     if (p->BLOCK != NULL)

	test	ecx, ecx
	je	SHORT $LN95@Initialize

; 397  :     {
; 398  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	edi, DWORD PTR _number_one+32

; 201  :         __UNIT_TYPE* p = buffer - 1;

	lea	edx, DWORD PTR [ecx-4]

; 202  :         if (*p != buffer_words)

	cmp	DWORD PTR [edx], edi
	jne	SHORT $LN90@Initialize

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	lea	ecx, DWORD PTR [edi+2]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	eax, -858993460				; ccccccccH
	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
$LN90@Initialize:

; 399  :         p->BLOCK = NULL;

	mov	DWORD PTR _number_one+36, 0
$LN95@Initialize:
	pop	edi

; 600  :             number_one_ok = TRUE;
; 601  :         }
; 602  :     }
; 603  : 
; 604  :     if (result != PMC_STATUS_OK)
; 605  :     {
; 606  :         if (number_zero_ok)
; 607  :             DetatchNumber(&number_zero);
; 608  :         if (number_one_ok)
; 609  :             DetatchNumber(&number_one);
; 610  :     }
; 611  : 
; 612  :     return (result);

	mov	eax, esi
	pop	esi

; 613  : }

	ret	0
_Initialize_Memory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _DuplicateNumber
_TEXT	SEGMENT
_x$ = 8							; size = 4
_op$ = 12						; size = 4
_DuplicateNumber PROC					; COMDAT

; 530  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 531  :     if (x->IS_STATIC)

	mov	esi, DWORD PTR _x$[ebp]
	test	BYTE PTR [esi+28], 1
	je	SHORT $LN2@DuplicateN

; 532  :     {
; 533  :         *op = x;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], esi

; 534  :         return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi

; 550  : }

	pop	ebp
	ret	0
$LN2@DuplicateN:

; 535  :     }
; 536  :     if (x->IS_ZERO)

	test	BYTE PTR [esi], 1
	je	SHORT $LN3@DuplicateN

; 537  :     {
; 538  :         *op = &number_zero;

	mov	eax, DWORD PTR _op$[ebp]
	pop	esi
	mov	DWORD PTR [eax], OFFSET _number_zero

; 539  :         return (PMC_STATUS_OK);

	xor	eax, eax

; 550  : }

	pop	ebp
	ret	0
$LN3@DuplicateN:
	push	ebx
	push	edi

; 540  :     }
; 541  :     __UNIT_TYPE x_bit_count = x->UNIT_BIT_COUNT;

	mov	edi, DWORD PTR [esi+16]

; 414  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	push	40					; 00000028H
	push	8
	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapAlloc@12
	mov	ebx, eax

; 415  :     if (p == NULL)

	test	ebx, ebx
	jne	SHORT $LN7@DuplicateN
	pop	edi

; 416  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, DWORD PTR [ebx-5]
	pop	ebx
	pop	esi

; 550  : }

	pop	ebp
	ret	0
$LN7@DuplicateN:

; 417  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, light_check_code);

	push	0
	push	edi
	push	ebx
	call	_InitializeNumber
	add	esp, 12					; 0000000cH

; 418  :     if (result != PMC_STATUS_OK)

	test	eax, eax
	jne	SHORT $LN15@DuplicateN

; 419  :         return (result);
; 420  :     p->IS_STATIC = FALSE;

	and	DWORD PTR [ebx+28], -2			; fffffffeH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	ecx, DWORD PTR [edi+31]

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR [ebx+36]
	mov	esi, DWORD PTR [esi+36]

; 188  :         return ((u + v - 1) / v);

	shr	ecx, 5

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 547  :     CommitNumber(o);

	push	ebx
	call	_CommitNumber

; 548  :     *op = o;

	mov	eax, DWORD PTR _op$[ebp]
	add	esp, 4
	mov	DWORD PTR [eax], ebx

; 549  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN15@DuplicateN:
	pop	edi
	pop	ebx
	pop	esi

; 550  : }

	pop	ebp
	ret	0
_DuplicateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _CheckNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CheckNumber PROC					; COMDAT

; 512  : {

	push	ebp
	mov	ebp, esp

; 513  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_UINT_SIGNATURE)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], 1231244656		; 49634d70H
	jne	SHORT $LN3@CheckNumbe
	cmp	DWORD PTR [eax+8], 1416522069		; 546e6955H
	jne	SHORT $LN3@CheckNumbe

; 515  :     if (!p->IS_ZERO)
; 516  :     {
; 517  :         PMC_STATUS_CODE result;
; 518  :         if ((result = CheckBlock(p->BLOCK)) != PMC_STATUS_OK)
; 519  :             return (result);
; 520  : #ifdef _DEBUG
; 521  :         __UNIT_TYPE desired_hash_code = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);
; 522  :         if (desired_hash_code != p->HASH_CODE)
; 523  :             return (PMC_STATUS_BAD_BUFFER);
; 524  : #endif
; 525  :     }
; 526  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 527  : }

	pop	ebp
	ret	0
$LN3@CheckNumbe:

; 514  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH

; 527  : }

	pop	ebp
	ret	0
_CheckNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _CommitNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CommitNumber PROC					; COMDAT

; 479  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _p$[ebp]
	push	edi

; 480  :     CommitBlock(p->BLOCK);

	mov	ecx, DWORD PTR [esi+36]

; 219  :     if (buffer != NULL)

	test	ecx, ecx
	je	SHORT $LN8@CommitNumb

; 220  :     {
; 221  :         --buffer;
; 222  :         __UNIT_TYPE words = buffer[0];
; 223  : #ifdef _DEBUG
; 224  :         __UNIT_TYPE code = CalculateCheckCode(&buffer[1], words);
; 225  : #else
; 226  :         __UNIT_TYPE code = 0;
; 227  : #endif
; 228  :         buffer[words + 1] = code;

	mov	eax, DWORD PTR [ecx-4]
	mov	DWORD PTR [ecx+eax*4], 0
	mov	ecx, DWORD PTR [esi+36]
$LN8@CommitNumb:

; 481  :     p->UNIT_BIT_COUNT = GetEffectiveBitLength(p->BLOCK, p->BLOCK_COUNT, &p->UNIT_WORD_COUNT);

	mov	edi, DWORD PTR [esi+32]

; 443  :     if (p == NULL)

	test	ecx, ecx
	je	SHORT $LN12@CommitNumb

; 444  :     {
; 445  :         *effective_word_count = 0;
; 446  :         return (0);
; 447  :     }
; 448  :     p += word_count;

	lea	eax, DWORD PTR [ecx+edi*4]

; 449  :     while (word_count != 0)

	test	edi, edi
	je	SHORT $LN12@CommitNumb
	npad	6
$LL11@CommitNumb:

; 450  :     {
; 451  :         --p;
; 452  :         if (*p != 0)

	cmp	DWORD PTR [eax-4], 0
	lea	eax, DWORD PTR [eax-4]
	jne	SHORT $LN29@CommitNumb

; 456  :         }
; 457  :         --word_count;

	sub	edi, 1
	jne	SHORT $LL11@CommitNumb
$LN12@CommitNumb:

; 481  :     p->UNIT_BIT_COUNT = GetEffectiveBitLength(p->BLOCK, p->BLOCK_COUNT, &p->UNIT_WORD_COUNT);

	xor	edi, edi
	mov	DWORD PTR [esi+12], edi
$LN10@CommitNumb:
	mov	DWORD PTR [esi+16], edi

; 482  :     if (p->UNIT_BIT_COUNT <= 0)

	test	edi, edi
	jne	SHORT $LN2@CommitNumb

; 483  :     {
; 484  :         p->HASH_CODE = 0;
; 485  :         p->IS_ZERO = TRUE;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [esi+20], edi
	and	eax, -11				; fffffff5H

; 486  :         p->IS_ONE = FALSE;
; 487  :         p->IS_EVEN = TRUE;
; 488  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	DWORD PTR [esi+24], edi

; 489  :         p->IS_POWER_OF_TWO = FALSE;

	or	eax, 5
	pop	edi

; 508  :     }
; 509  : }

	mov	DWORD PTR [esi], eax
	pop	esi
	pop	ebp
	ret	0
$LN29@CommitNumb:

; 454  :             *effective_word_count = word_count;

	mov	DWORD PTR [esi+12], edi

; 455  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	mov	eax, DWORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 624  :         if (x == 0)

	test	eax, eax
	jne	SHORT $LN17@CommitNumb

; 625  :             return (sizeof(x) * 8);

	mov	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 455  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	edi, 5
	sub	edi, ecx
	jmp	SHORT $LN10@CommitNumb
$LN17@CommitNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 629  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 455  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	edi, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 648  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 455  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	sub	edi, ecx
	jmp	SHORT $LN10@CommitNumb
$LN2@CommitNumb:

; 490  :     }
; 491  :     else if (p->UNIT_BIT_COUNT == 1)

	push	DWORD PTR [esi+12]
	push	DWORD PTR [esi+36]
	call	_CalculateCheckCode
	mov	DWORD PTR [esi+20], eax
	add	esp, 8
	mov	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+36]
	and	edx, -2					; fffffffeH
	cmp	edi, 1
	jne	SHORT $LN4@CommitNumb

; 492  :     {
; 493  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);
; 494  :         p->IS_ZERO = FALSE;

	mov	DWORD PTR [esi], edx

; 495  :         p->IS_ONE = p->BLOCK[0] == 1; // 無条件でTRUEでも大丈夫だが念のため。

	mov	edi, 2
	mov	eax, DWORD PTR [ecx]
	xor	ecx, ecx
	cmp	eax, 1

; 496  :         p->IS_EVEN = FALSE;
; 497  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	DWORD PTR [esi+24], 0
	cmove	ecx, edi
	and	edx, -3					; fffffffdH

; 498  :         p->IS_POWER_OF_TWO = TRUE;

	or	ecx, edx
	and	ecx, -5					; fffffffbH
	or	ecx, 8
	pop	edi

; 508  :     }
; 509  : }

	mov	DWORD PTR [esi], ecx
	pop	esi
	pop	ebp
	ret	0
$LN4@CommitNumb:

; 499  :     }
; 500  :     else
; 501  :     {
; 502  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);
; 503  :         p->IS_ZERO = FALSE;
; 504  :         p->IS_ONE = FALSE;

	and	edx, -3					; fffffffdH
	mov	DWORD PTR [esi], edx

; 505  :         p->IS_EVEN = !(p->BLOCK[0] & 1);

	mov	eax, DWORD PTR [ecx]
	shl	eax, 2
	not	eax
	xor	eax, edx
	and	eax, 4
	xor	eax, edx

; 465  :     __UNIT_TYPE bit_count = 0;

	xor	edx, edx

; 505  :         p->IS_EVEN = !(p->BLOCK[0] & 1);

	mov	DWORD PTR [esi], eax

; 506  :         p->TRAILING_ZERO_BITS_COUNT = GetTrailingZeroBitCount(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR [esi+12]

; 466  :     while (word_count > 0)

	test	eax, eax
	je	SHORT $LN21@CommitNumb
	npad	7
$LL20@CommitNumb:

; 467  :     {
; 468  :         --word_count;
; 469  :         if (*p != 0)

	mov	edi, DWORD PTR [ecx]
	dec	eax
	test	edi, edi
	jne	SHORT $LN30@CommitNumb

; 471  :         bit_count += __UNIT_TYPE_BIT_COUNT;

	add	edx, 32					; 00000020H

; 472  :         ++p;

	add	ecx, 4
	test	eax, eax
	jne	SHORT $LL20@CommitNumb
$LN21@CommitNumb:

; 473  :     }
; 474  :     // このルートには到達しないはず
; 475  :     return (0);

	xor	eax, eax
$LN19@CommitNumb:

; 506  :         p->TRAILING_ZERO_BITS_COUNT = GetTrailingZeroBitCount(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	DWORD PTR [esi+24], eax

; 507  :         p->IS_POWER_OF_TWO = p->TRAILING_ZERO_BITS_COUNT + 1 == p->UNIT_BIT_COUNT;

	xor	ecx, ecx
	inc	eax
	mov	edx, 8
	cmp	eax, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [esi]
	cmove	ecx, edx
	and	eax, -9					; fffffff7H
	or	ecx, eax
	pop	edi

; 508  :     }
; 509  : }

	mov	DWORD PTR [esi], ecx
	pop	esi
	pop	ebp
	ret	0
$LN30@CommitNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 709  :         _BitScanForward(&pos, x);

	bsf	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 470  :             return (bit_count + _TZCNT_ALT_UNIT(*p));

	add	eax, edx
	jmp	SHORT $LN19@CommitNumb
_CommitNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _DeallocateNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DeallocateNumber PROC					; COMDAT

; 433  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 434  :     if (p == NULL || p->IS_STATIC)

	mov	esi, DWORD PTR _p$[ebp]
	test	esi, esi
	je	$LN3@Deallocate
	test	BYTE PTR [esi+28], 1
	jne	$LN3@Deallocate

; 396  :     if (p->BLOCK != NULL)

	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN11@Deallocate

; 397  :     {
; 398  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR [esi+32]

; 201  :         __UNIT_TYPE* p = buffer - 1;

	lea	edx, DWORD PTR [eax-4]

; 202  :         if (*p != buffer_words)

	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN11@Deallocate

; 203  :         {
; 204  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 205  :         }
; 206  :         else
; 207  :         {
; 208  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 209  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	push	edi

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	add	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, edx
	mov	eax, -858993460				; ccccccccH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
$LN11@Deallocate:

; 435  :         return;
; 436  :     CleanUpNumber(p);
; 437  :     FillNumberHeader(p);
; 438  :     HeapFree(hLocalHeap, 0, p);

	push	esi
	push	0

; 340  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi], -858993460		; ccccccccH

; 341  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+4], -858993460		; ccccccccH

; 342  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+8], -858993460		; ccccccccH

; 343  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+12], -858993460		; ccccccccH

; 344  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+16], -858993460		; ccccccccH

; 345  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+20], -858993460		; ccccccccH

; 346  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+24], -858993460		; ccccccccH

; 347  :             __p[7] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+28], -858993460		; ccccccccH

; 348  :             __p[8] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+32], -858993460		; ccccccccH

; 349  :             __p[9] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	DWORD PTR [esi+36], -858993460		; ccccccccH

; 435  :         return;
; 436  :     CleanUpNumber(p);
; 437  :     FillNumberHeader(p);
; 438  :     HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
$LN3@Deallocate:
	pop	esi

; 439  : }

	pop	ebp
	ret	0
_DeallocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _DetatchNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DetatchNumber PROC					; COMDAT

; 426  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 427  :     if (p == NULL || !p->IS_STATIC)

	mov	esi, DWORD PTR _p$[ebp]
	test	esi, esi
	je	SHORT $LN3@DetatchNum
	test	BYTE PTR [esi+28], 1
	je	SHORT $LN3@DetatchNum

; 396  :     if (p->BLOCK != NULL)

	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN3@DetatchNum

; 397  :     {
; 398  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR [esi+32]

; 201  :         __UNIT_TYPE* p = buffer - 1;

	lea	edx, DWORD PTR [eax-4]

; 202  :         if (*p != buffer_words)

	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN11@DetatchNum

; 203  :         {
; 204  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 205  :         }
; 206  :         else
; 207  :         {
; 208  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 209  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	push	edi

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	add	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, edx
	mov	eax, -858993460				; ccccccccH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
$LN11@DetatchNum:

; 399  :         p->BLOCK = NULL;

	mov	DWORD PTR [esi+36], 0
$LN3@DetatchNum:
	pop	esi

; 428  :         return;
; 429  :     CleanUpNumber(p);
; 430  : }

	pop	ebp
	ret	0
_DetatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _AllocateNumber
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_bit_count$ = 12					; size = 4
_light_check_code$ = 16					; size = 4
_AllocateNumber PROC					; COMDAT

; 413  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 414  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	push	40					; 00000028H
	push	8
	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapAlloc@12
	mov	esi, eax

; 415  :     if (p == NULL)

	test	esi, esi
	jne	SHORT $LN2@AllocateNu

; 416  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, DWORD PTR [esi-5]
	pop	esi

; 423  : }

	pop	ebp
	ret	0
$LN2@AllocateNu:

; 417  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, light_check_code);

	push	DWORD PTR _light_check_code$[ebp]
	push	DWORD PTR _bit_count$[ebp]
	push	esi
	call	_InitializeNumber
	add	esp, 12					; 0000000cH

; 418  :     if (result != PMC_STATUS_OK)

	test	eax, eax
	jne	SHORT $LN1@AllocateNu

; 419  :         return (result);
; 420  :     p->IS_STATIC = FALSE;
; 421  :     *pp = p;

	mov	eax, DWORD PTR _pp$[ebp]
	and	DWORD PTR [esi+28], -2			; fffffffeH
	mov	DWORD PTR [eax], esi

; 422  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AllocateNu:
	pop	esi

; 423  : }

	pop	ebp
	ret	0
_AllocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _AttatchNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_bit_count$ = 12					; size = 4
_AttatchNumber PROC					; COMDAT

; 404  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 405  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, NULL);

	mov	esi, DWORD PTR _p$[ebp]
	push	0
	push	DWORD PTR _bit_count$[ebp]
	push	esi
	call	_InitializeNumber
	add	esp, 12					; 0000000cH

; 406  :     if (result != PMC_STATUS_OK)

	test	eax, eax
	jne	SHORT $LN1@AttatchNum

; 407  :         return (result);
; 408  :     p->IS_STATIC = TRUE;

	or	DWORD PTR [esi+28], 1
$LN1@AttatchNum:
	pop	esi

; 409  :     return (PMC_STATUS_OK);
; 410  : }

	pop	ebp
	ret	0
_AttatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _CheckBlockLight
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_code$ = 12						; size = 4
_CheckBlockLight PROC					; COMDAT

; 254  : #ifdef _DEBUG
; 255  :     if (buffer == NULL)
; 256  :         return (PMC_STATUS_OK);
; 257  :     --buffer;
; 258  :     __UNIT_TYPE words = buffer[0];
; 259  :     __UNIT_TYPE code_desired = buffer[words + 1] ^ (__UNIT_TYPE)&buffer[words + 1];
; 260  :     __UNIT_TYPE code_actual = code;
; 261  :     if (code_actual == code_desired)
; 262  :         return (PMC_STATUS_OK);
; 263  :     else
; 264  :         return (PMC_STATUS_BAD_BUFFER);
; 265  : #else
; 266  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 267  : #endif
; 268  : }

	ret	0
_CheckBlockLight ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _DeallocateBlock
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_buffer_words$ = 12					; size = 4
_DeallocateBlock PROC					; COMDAT

; 198  : {

	push	ebp
	mov	ebp, esp

; 199  : 	if (buffer != NULL)

	mov	eax, DWORD PTR _buffer$[ebp]
	test	eax, eax
	je	SHORT $LN4@Deallocate

; 200  : 	{
; 201  :         __UNIT_TYPE* p = buffer - 1;
; 202  :         if (*p != buffer_words)

	mov	ecx, DWORD PTR _buffer_words$[ebp]
	lea	edx, DWORD PTR [eax-4]
	cmp	DWORD PTR [edx], ecx
	jne	SHORT $LN4@Deallocate

; 203  :         {
; 204  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 205  :         }
; 206  :         else
; 207  :         {
; 208  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 209  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	push	edi

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	edx
	add	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, edx
	mov	eax, -858993460				; ccccccccH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 211  :             HeapFree(hLocalHeap, 0, p);

	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
$LN4@Deallocate:

; 212  :         }
; 213  : 	}
; 214  : }

	pop	ebp
	ret	0
_DeallocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _AllocateBlock
_TEXT	SEGMENT
_bits$ = 8						; size = 4
_allocated_block_words$ = 12				; size = 4
_code$ = 16						; size = 4
_AllocateBlock PROC					; COMDAT

; 156  : {

	push	ebp
	mov	ebp, esp
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	mov	esi, DWORD PTR _bits$[ebp]
	lea	esi, DWORD PTR [esi+31]
	shr	esi, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 163  : 	__UNIT_TYPE bytes = words2 * __UNIT_TYPE_BYTE_COUNT;

	lea	eax, DWORD PTR [esi*4+8]

; 164  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	push	eax
	push	8
	push	DWORD PTR _hLocalHeap
	call	DWORD PTR __imp__HeapAlloc@12
	mov	ecx, eax

; 165  : 	if (buffer == NULL)

	test	ecx, ecx
	jne	SHORT $LN2@AllocateBl
	pop	esi

; 193  : }

	pop	ebp
	ret	0
$LN2@AllocateBl:

; 166  : 		return (NULL);
; 167  : 	buffer[0] = words1;
; 168  :     *allocated_block_words = words1;

	mov	eax, DWORD PTR _allocated_block_words$[ebp]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], esi

; 169  : #ifdef _DEBUG
; 170  :     // 乱数もどきを生成する。
; 171  : #ifdef _M_IX86
; 172  :     __UNIT_TYPE r = GetTickCount();
; 173  : #elif defined(_M_IX64)
; 174  : #ifdef _MSC_VER
; 175  :     __UNIT_TYPE r = GetTickCount64();
; 176  : #elif defined(__GNUC__)
; 177  :     _UINT32_T temp = GetTickCount();
; 178  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 179  : #else
; 180  : #error unknown compiler
; 181  : #endif
; 182  : #else
; 183  : #error unknown platform
; 184  : #endif
; 185  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;
; 186  : #else
; 187  :     __UNIT_TYPE check_code = 0;
; 188  : #endif
; 189  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	lea	eax, DWORD PTR [esi+1]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax], eax

; 190  :     if (code != NULL)

	mov	eax, DWORD PTR _code$[ebp]
	test	eax, eax
	je	SHORT $LN3@AllocateBl

; 191  :         *code = check_code;

	mov	DWORD PTR [eax], 0
$LN3@AllocateBl:

; 192  :     return (&buffer[1]);

	lea	eax, DWORD PTR [ecx+4]
	pop	esi

; 193  : }

	pop	ebp
	ret	0
_AllocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _DeallocateHeapArea
_TEXT	SEGMENT
_DeallocateHeapArea PROC				; COMDAT

; 625  :     if (hLocalHeap != NULL)

	mov	eax, DWORD PTR _hLocalHeap
	test	eax, eax
	je	SHORT $LN2@Deallocate

; 626  :     {
; 627  :         HeapDestroy(hLocalHeap);

	push	eax
	call	DWORD PTR __imp__HeapDestroy@4

; 628  :         hLocalHeap = NULL;

	mov	DWORD PTR _hLocalHeap, 0
$LN2@Deallocate:

; 629  :     }
; 630  : }

	ret	0
_DeallocateHeapArea ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT _AllocateHeapArea
_TEXT	SEGMENT
_AllocateHeapArea PROC					; COMDAT

; 617  :     hLocalHeap = HeapCreate(0, 0x1000, 0);

	push	0
	push	4096					; 00001000H
	push	0
	call	DWORD PTR __imp__HeapCreate@12

; 618  :     if (hLocalHeap == NULL)

	xor	ecx, ecx
	mov	DWORD PTR _hLocalHeap, eax
	test	eax, eax
	setne	cl
	mov	eax, ecx

; 619  :         return (FALSE);
; 620  :     return (TRUE);
; 621  : }

	ret	0
_AllocateHeapArea ENDP
_TEXT	ENDS
END
