; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_equals.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_Equals
PUBLIC	_PMC_Equals_I_X@12
PUBLIC	_PMC_Equals_L_X@16
PUBLIC	_PMC_Equals_X_I@12
PUBLIC	_PMC_Equals_X_L@16
PUBLIC	_PMC_Equals_X_X@12
EXTRN	_CheckNumber:PROC
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT _Equals_X_X_Imp
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_count$ = 16						; size = 4
_Equals_X_X_Imp PROC					; COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp

; 140  :     while (count > 0)

	mov	edx, DWORD PTR _count$[ebp]
	push	esi
	test	edx, edx
	je	SHORT $LN3@Equals_X_X
	mov	esi, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	sub	esi, eax
$LL2@Equals_X_X:

; 141  :     {
; 142  :         if (*u != *v)

	mov	ecx, DWORD PTR [esi+eax]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN7@Equals_X_X

; 144  :         ++u;
; 145  :         ++v;

	add	eax, 4

; 146  :         --count;

	sub	edx, 1
	jne	SHORT $LL2@Equals_X_X
$LN3@Equals_X_X:

; 147  :     }
; 148  :     return (1);

	mov	eax, 1
	pop	esi

; 149  : }

	pop	ebp
	ret	0
$LN7@Equals_X_X:

; 143  :             return (0);

	xor	eax, eax
	pop	esi

; 149  : }

	pop	ebp
	ret	0
_Equals_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT _Equals_X_L_Imp
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_Equals_X_L_Imp PROC					; COMDAT

; 63   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 64   :     if (u->IS_ZERO)

	mov	esi, DWORD PTR _u$[ebp]
	test	BYTE PTR [esi], 1
	je	SHORT $LN2@Equals_X_L

; 65   :     {
; 66   :         // u が 0 である場合
; 67   :         return (v == 0);

	mov	eax, DWORD PTR _v$[ebp]
	or	eax, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN17@Equals_X_L
	mov	eax, 1
	pop	esi

; 113  :                 }
; 114  :             }
; 115  :         }
; 116  :         else
; 117  :         {
; 118  :             // _UINT64_T が 1 ワードで表現できる場合
; 119  : 
; 120  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 121  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 122  :             if (u_bit_count != v_bit_count)
; 123  :             {
; 124  :                 // 明らかに u > v である場合
; 125  :                 return (0);
; 126  :             }
; 127  :             else
; 128  :             {
; 129  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 130  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 131  :                 return (u->BLOCK[0] == v);
; 132  :             }
; 133  :         }
; 134  :     }
; 135  :     return (PMC_STATUS_OK);
; 136  : }

	pop	ebp
	ret	0
$LN17@Equals_X_L:

; 65   :     {
; 66   :         // u が 0 である場合
; 67   :         return (v == 0);

	xor	eax, eax
	pop	esi

; 113  :                 }
; 114  :             }
; 115  :         }
; 116  :         else
; 117  :         {
; 118  :             // _UINT64_T が 1 ワードで表現できる場合
; 119  : 
; 120  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 121  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 122  :             if (u_bit_count != v_bit_count)
; 123  :             {
; 124  :                 // 明らかに u > v である場合
; 125  :                 return (0);
; 126  :             }
; 127  :             else
; 128  :             {
; 129  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 130  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 131  :                 return (u->BLOCK[0] == v);
; 132  :             }
; 133  :         }
; 134  :     }
; 135  :     return (PMC_STATUS_OK);
; 136  : }

	pop	ebp
	ret	0
$LN2@Equals_X_L:

; 68   :     }
; 69   :     else if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, edx
	push	edi
	mov	edi, DWORD PTR _v$[ebp+4]
	or	eax, edi
	je	SHORT $LN34@Equals_X_L

; 70   :     {
; 71   :         // v が 0 である場合
; 72   :         return (0);
; 73   :     }
; 74   :     else
; 75   :     {
; 76   :         // u と v がともに 0 ではない場合
; 77   :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 78   :         {
; 79   :             // _UINT64_T が 1 ワードで表現しきれない場合
; 80   :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 81   :             _UINT32_T v_hi;
; 82   :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 83   :             if (v_hi == 0)

	test	edi, edi
	jne	SHORT $LN8@Equals_X_L
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 591  :         if (x == 0)

	test	edx, edx
	jne	SHORT $LN26@Equals_X_L

; 592  :             return (sizeof(x) * 8);

	lea	ecx, DWORD PTR [edx+32]
	jmp	SHORT $LN25@Equals_X_L
$LN26@Equals_X_L:

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, edx

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
$LN25@Equals_X_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c

; 86   :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	eax, 32					; 00000020H
	sub	eax, ecx

; 87   :                 if (u_bit_count != v_bit_count)

	cmp	DWORD PTR [esi+16], eax
	jne	SHORT $LN34@Equals_X_L

; 88   :                 {
; 89   :                     // 明らかに u > v である場合
; 90   :                     return (0);
; 91   :                 }
; 92   :                 else
; 93   :                 {
; 94   :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 95   :                     // ⇒ u と v はともに 1 ワードで表現できる
; 96   :                     return (u->BLOCK[0] == v_lo);

	mov	ecx, DWORD PTR [esi+36]
	xor	eax, eax
	pop	edi
	pop	esi
	cmp	DWORD PTR [ecx], edx
	sete	al

; 113  :                 }
; 114  :             }
; 115  :         }
; 116  :         else
; 117  :         {
; 118  :             // _UINT64_T が 1 ワードで表現できる場合
; 119  : 
; 120  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 121  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 122  :             if (u_bit_count != v_bit_count)
; 123  :             {
; 124  :                 // 明らかに u > v である場合
; 125  :                 return (0);
; 126  :             }
; 127  :             else
; 128  :             {
; 129  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 130  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 131  :                 return (u->BLOCK[0] == v);
; 132  :             }
; 133  :         }
; 134  :     }
; 135  :     return (PMC_STATUS_OK);
; 136  : }

	pop	ebp
	ret	0
$LN8@Equals_X_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, edi

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c

; 102  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	eax, 64					; 00000040H
	sub	eax, ecx

; 103  :                 if (u_bit_count != v_bit_count)

	cmp	DWORD PTR [esi+16], eax
	jne	SHORT $LN34@Equals_X_L

; 107  :                 }
; 108  :                 else
; 109  :                 {
; 110  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 2 ワードで表現できる場合
; 111  :                     // ⇒ u と v はともに 2 ワードで表現できる
; 112  :                     return (u->BLOCK[1] == v_hi && u->BLOCK[0] == v_lo);

	mov	eax, DWORD PTR [esi+36]
	cmp	DWORD PTR [eax+4], edi
	jne	SHORT $LN34@Equals_X_L
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN34@Equals_X_L
	pop	edi
	mov	eax, 1
	pop	esi

; 113  :                 }
; 114  :             }
; 115  :         }
; 116  :         else
; 117  :         {
; 118  :             // _UINT64_T が 1 ワードで表現できる場合
; 119  : 
; 120  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 121  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 122  :             if (u_bit_count != v_bit_count)
; 123  :             {
; 124  :                 // 明らかに u > v である場合
; 125  :                 return (0);
; 126  :             }
; 127  :             else
; 128  :             {
; 129  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 130  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 131  :                 return (u->BLOCK[0] == v);
; 132  :             }
; 133  :         }
; 134  :     }
; 135  :     return (PMC_STATUS_OK);
; 136  : }

	pop	ebp
	ret	0
$LN34@Equals_X_L:
	pop	edi

; 104  :                 {
; 105  :                     // 明らかに u > v である場合
; 106  :                     return (0);

	xor	eax, eax
	pop	esi

; 113  :                 }
; 114  :             }
; 115  :         }
; 116  :         else
; 117  :         {
; 118  :             // _UINT64_T が 1 ワードで表現できる場合
; 119  : 
; 120  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 121  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 122  :             if (u_bit_count != v_bit_count)
; 123  :             {
; 124  :                 // 明らかに u > v である場合
; 125  :                 return (0);
; 126  :             }
; 127  :             else
; 128  :             {
; 129  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 130  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 131  :                 return (u->BLOCK[0] == v);
; 132  :             }
; 133  :         }
; 134  :     }
; 135  :     return (PMC_STATUS_OK);
; 136  : }

	pop	ebp
	ret	0
_Equals_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT _Equals_X_I_Imp
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_Equals_X_I_Imp PROC					; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp

; 33   :     if (u->IS_ZERO)

	mov	edx, DWORD PTR _u$[ebp]
	test	BYTE PTR [edx], 1
	je	SHORT $LN2@Equals_X_I

; 34   :     {
; 35   :         // u が 0 である場合
; 36   :         return (v == 0);

	xor	eax, eax
	cmp	DWORD PTR _v$[ebp], eax
	sete	al

; 58   :         }
; 59   :     }
; 60   : }

	pop	ebp
	ret	0
$LN2@Equals_X_I:
	push	esi

; 37   :     }
; 38   :     else if (v == 0)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN12@Equals_X_I
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, esi

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c

; 47   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	eax, 32					; 00000020H
	sub	eax, ecx

; 48   :         if (u_bit_count != v_bit_count)

	cmp	DWORD PTR [edx+16], eax
	jne	SHORT $LN12@Equals_X_I

; 52   :         }
; 53   :         else
; 54   :         {
; 55   :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 56   :             // ⇒ u と v はともに 1 ワードで表現できる
; 57   :             return ( u->BLOCK[0] == v);

	mov	ecx, DWORD PTR [edx+36]
	xor	eax, eax
	cmp	DWORD PTR [ecx], esi
	pop	esi
	sete	al

; 58   :         }
; 59   :     }
; 60   : }

	pop	ebp
	ret	0
$LN12@Equals_X_I:

; 49   :         {
; 50   :             // 明らかに u != v である場合
; 51   :             return (0);

	xor	eax, eax
	pop	esi

; 58   :         }
; 59   :     }
; 60   : }

	pop	ebp
	ret	0
_Equals_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :     {

	push	ebp
	mov	ebp, esp

; 624  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 649  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 649  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 590  :     {

	push	ebp
	mov	ebp, esp

; 591  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 602  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 602  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 176  :     {

	push	ebp
	mov	ebp, esp

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 179  :     }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT _PMC_Equals_X_X@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_X_X@12 PROC					; COMDAT

; 240  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi

; 241  :     if (u == NULL)

	mov	edi, DWORD PTR _u$[ebp]
	test	edi, edi
	je	$LN24@PMC_Equals

; 242  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 243  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	$LN24@PMC_Equals

; 244  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 245  :     if (w == NULL)

	mov	ebx, DWORD PTR _w$[ebp]
	test	ebx, ebx
	je	SHORT $LN24@PMC_Equals

; 247  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 248  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 249  :     PMC_STATUS_CODE result;
; 250  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 251  :         return (result);
; 252  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 253  :         return (result);
; 254  :     if (nu->IS_ZERO)

	test	BYTE PTR [edi], 1
	je	SHORT $LN7@PMC_Equals

; 255  :     {
; 256  :         *w = nv->IS_ZERO ? 1 : 0;

	mov	eax, DWORD PTR [esi]
	pop	edi
	and	eax, 1

; 275  :         }
; 276  :     }
; 277  : #ifdef _DEBUG
; 278  :     if (*w != 0 && *w != 1)
; 279  :         return (PMC_STATUS_INTERNAL_ERROR);
; 280  : #endif
; 281  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [ebx], eax
	xor	eax, eax

; 282  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Equals:

; 257  :     }
; 258  :     else if (nv->IS_ZERO)

	test	BYTE PTR [esi], 1
	jne	SHORT $LN20@PMC_Equals

; 259  :     {
; 260  :         *w = 0;
; 261  :     }
; 262  :     else
; 263  :     {
; 264  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 265  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 266  :         if (u_bit_count != v_bit_count)

	mov	eax, DWORD PTR [edi+16]
	cmp	eax, DWORD PTR [esi+16]
	jne	SHORT $LN20@PMC_Equals

; 267  :         {
; 268  :             // 明らかに u > v である場合
; 269  :             *w = 0;
; 270  :         }
; 271  :         else
; 272  :         {
; 273  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 274  :             *w = Equals_X_X_Imp(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [esi+36]

; 140  :     while (count > 0)

	test	edx, edx
	je	SHORT $LN16@PMC_Equals
	mov	esi, DWORD PTR [edi+36]
	sub	esi, ecx
	npad	2
$LL15@PMC_Equals:

; 141  :     {
; 142  :         if (*u != *v)

	mov	eax, DWORD PTR [esi+ecx]
	cmp	eax, DWORD PTR [ecx]
	jne	SHORT $LN20@PMC_Equals

; 143  :             return (0);
; 144  :         ++u;
; 145  :         ++v;

	add	ecx, 4

; 146  :         --count;

	sub	edx, 1
	jne	SHORT $LL15@PMC_Equals
$LN16@PMC_Equals:
	pop	edi

; 147  :     }
; 148  :     return (1);

	mov	eax, 1

; 275  :         }
; 276  :     }
; 277  : #ifdef _DEBUG
; 278  :     if (*w != 0 && *w != 1)
; 279  :         return (PMC_STATUS_INTERNAL_ERROR);
; 280  : #endif
; 281  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [ebx], eax
	xor	eax, eax

; 282  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN20@PMC_Equals:
	pop	edi

; 275  :         }
; 276  :     }
; 277  : #ifdef _DEBUG
; 278  :     if (*w != 0 && *w != 1)
; 279  :         return (PMC_STATUS_INTERNAL_ERROR);
; 280  : #endif
; 281  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 282  : }

	pop	esi
	mov	DWORD PTR [ebx], eax
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN24@PMC_Equals:

; 246  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Equals:
	pop	edi

; 282  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
_PMC_Equals_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT _PMC_Equals_X_L@16
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Equals_X_L@16 PROC					; COMDAT

; 218  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 219  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 220  :     {
; 221  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 222  :         return (PMC_STATUS_INTERNAL_ERROR);
; 223  :     }
; 224  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	SHORT $LN7@PMC_Equals

; 225  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 226  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	SHORT $LN7@PMC_Equals

; 228  :     PMC_STATUS_CODE result;
; 229  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 230  :         return (result);
; 231  :     *w = Equals_X_L_Imp((NUMBER_HEADER*)u, v);

	push	DWORD PTR _v$[ebp+4]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_Equals_X_L_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi], eax

; 232  : #ifdef _DEBUG
; 233  :     if (*w != 0 && *w != 1)
; 234  :         return (PMC_STATUS_INTERNAL_ERROR);
; 235  : #endif
; 236  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 237  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN7@PMC_Equals:

; 227  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Equals:
	pop	edi

; 237  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
_PMC_Equals_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT _PMC_Equals_X_I@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_X_I@12 PROC					; COMDAT

; 174  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 175  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 176  :     {
; 177  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 178  :         return (PMC_STATUS_INTERNAL_ERROR);
; 179  :     }
; 180  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	SHORT $LN7@PMC_Equals

; 181  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 182  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	SHORT $LN7@PMC_Equals

; 184  :     PMC_STATUS_CODE result;
; 185  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 186  :         return (result);
; 187  :     *w = Equals_X_I_Imp((NUMBER_HEADER*)u, v);

	push	DWORD PTR _v$[ebp]
	push	esi
	call	_Equals_X_I_Imp
	add	esp, 8
	mov	DWORD PTR [edi], eax

; 188  : #ifdef _DEBUG
; 189  :     if (*w != 0 && *w != 1)
; 190  :         return (PMC_STATUS_INTERNAL_ERROR);
; 191  : #endif
; 192  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 193  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Equals:

; 183  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Equals:
	pop	edi

; 193  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
_PMC_Equals_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT _PMC_Equals_L_X@16
_TEXT	SEGMENT
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Equals_L_X@16 PROC					; COMDAT

; 196  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 197  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 198  :     {
; 199  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 200  :         return (PMC_STATUS_INTERNAL_ERROR);
; 201  :     }
; 202  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	test	esi, esi
	je	SHORT $LN7@PMC_Equals

; 203  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 204  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	SHORT $LN7@PMC_Equals

; 206  :     PMC_STATUS_CODE result;
; 207  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 208  :         return (result);
; 209  :     *w = Equals_X_L_Imp((NUMBER_HEADER*)v, u);

	push	DWORD PTR _u$[ebp+4]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_Equals_X_L_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi], eax

; 210  : #ifdef _DEBUG
; 211  :     if (*w != 0 && *w != 1)
; 212  :         return (PMC_STATUS_INTERNAL_ERROR);
; 213  : #endif
; 214  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 215  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN7@PMC_Equals:

; 205  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Equals:
	pop	edi

; 215  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
_PMC_Equals_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT _PMC_Equals_I_X@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_I_X@12 PROC					; COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 153  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 154  :     {
; 155  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 156  :         return (PMC_STATUS_INTERNAL_ERROR);
; 157  :     }
; 158  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	test	esi, esi
	je	SHORT $LN7@PMC_Equals

; 159  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 160  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	SHORT $LN7@PMC_Equals

; 162  :     PMC_STATUS_CODE result;
; 163  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 164  :         return (result);
; 165  :     *w = Equals_X_I_Imp((NUMBER_HEADER*)v, u);

	push	DWORD PTR _u$[ebp]
	push	esi
	call	_Equals_X_I_Imp
	add	esp, 8
	mov	DWORD PTR [edi], eax

; 166  : #ifdef _DEBUG
; 167  :     if (*w != 0 && *w != 1)
; 168  :         return (PMC_STATUS_INTERNAL_ERROR);
; 169  : #endif
; 170  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 171  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Equals:

; 161  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Equals:
	pop	edi

; 171  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
_PMC_Equals_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT _Initialize_Equals
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Equals PROC					; COMDAT

; 286  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 287  : }

	ret	0
_Initialize_Equals ENDP
_TEXT	ENDS
END
