; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_modpow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_ModPow
PUBLIC	_PMC_ModPow_X_X_X@16
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_Multiply_X_X_Imp:PROC
EXTRN	_DivRem_X_X:PROC
EXTRN	_Compare_Imp:PROC
EXTRN	_number_zero:BYTE
EXTRN	_number_one:BYTE
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT _PMC_ModPow_X_X_X_Imp
_TEXT	SEGMENT
_r_check_code$1 = -12					; size = 4
_work_v_buf_code$2 = -8					; size = 4
_work_v_buf_words$3 = -4				; size = 4
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_work_v_buf$1$ = 16					; size = 4
_m$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_ModPow_X_X_X_Imp PROC				; COMDAT

; 456  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	edi

; 457  :     PMC_STATUS_CODE result;
; 458  : 
; 459  :     if (m->IS_ZERO)

	mov	edi, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [edi]
	test	cl, 1
	je	SHORT $LN2@PMC_ModPow

; 460  :     {
; 461  :         // m が 0 の場合
; 462  : 
; 463  :         // 0 による除算は許されないのでエラーを通知する
; 464  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	pop	edi

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@PMC_ModPow:
	push	ebx
	push	esi

; 465  :     }
; 466  :     else if (m->IS_ONE)

	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [esi]
	mov	eax, edx
	and	eax, 1
	test	cl, 2
	je	SHORT $LN4@PMC_ModPow

; 467  :     {
; 468  :         // m が 1 の場合
; 469  :         if (v->IS_ZERO)

	test	eax, eax
	je	SHORT $LN12@PMC_ModPow

; 470  :         {
; 471  :             // v が 0 の場合
; 472  :             if (e->IS_ZERO)

	mov	eax, DWORD PTR _e$[ebp]
	test	BYTE PTR [eax], 1
	jne	SHORT $LN38@PMC_ModPow
$LN12@PMC_ModPow:

; 543  :                     return (result);
; 544  :             }
; 545  :         }
; 546  :     }
; 547  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _r$[ebp]
	pop	esi
	pop	ebx
	pop	edi
	mov	DWORD PTR [eax], OFFSET _number_zero
	xor	eax, eax

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@PMC_ModPow:

; 473  :             {
; 474  :                 // e が 0 の場合
; 475  : 
; 476  :                 // 0 の 0 乗となるので、エラーを返す
; 477  :                 return (PMC_STATUS_ARGUMENT_ERROR);
; 478  :             }
; 479  :             else
; 480  :             {
; 481  :                 // e が 0 ではない場合
; 482  : 
; 483  :                 // v の e 乗がどんな値であっても 1 では必ず割り切れるので剰余は 0 となる。
; 484  :                 *r = &number_zero;
; 485  :             }
; 486  :         }
; 487  :         else
; 488  :         {
; 489  :             // v が 0 ではない場合
; 490  : 
; 491  :             // v の e 乗がどんな値であっても 1 では必ず割り切れるので剰余は 0 となる。
; 492  :             *r = &number_zero;
; 493  :         }
; 494  :     }
; 495  :     else
; 496  :     {
; 497  :         // m が 2 以上の場合
; 498  :         if (v->IS_ZERO)

	test	eax, eax
	je	SHORT $LN10@PMC_ModPow

; 499  :         {
; 500  :             // v が 0 の場合
; 501  :             if (e->IS_ZERO)

	mov	eax, DWORD PTR _e$[ebp]
	test	BYTE PTR [eax], 1
	je	SHORT $LN12@PMC_ModPow
$LN38@PMC_ModPow:
	pop	esi
	pop	ebx

; 502  :             {
; 503  :                 // e が 0 の場合
; 504  : 
; 505  :                 // 0 の 0 乗となるので、エラーを返す
; 506  :                 return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	pop	edi

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@PMC_ModPow:

; 507  :             }
; 508  :             else
; 509  :             {
; 510  :                 // e が 0 ではない場合
; 511  : 
; 512  :                 *r = &number_zero;
; 513  :             }
; 514  :         }
; 515  :         else if (v->IS_ONE)

	test	dl, 2
	jne	$LN37@PMC_ModPow

; 516  :         {
; 517  :             // v が 1 の場合
; 518  : 
; 519  :             // 1 を何乗しても 1 であり、1 を 2 以上の数で割ればその剰余は必ず 1 となる
; 520  :             *r = &number_one;
; 521  :         }
; 522  :         else
; 523  :         {
; 524  :             // v が 2 以上の場合
; 525  :             if (e->IS_ZERO)

	mov	ecx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [ecx]
	test	al, 1
	jne	$LN37@PMC_ModPow

; 529  :             }
; 530  :             else if (e->IS_ONE)

	test	al, 2
	je	$LN18@PMC_ModPow

; 101  :     if (u->UNIT_BIT_COUNT < v->UNIT_BIT_COUNT)

	mov	eax, DWORD PTR [edi+16]
	cmp	DWORD PTR [esi+16], eax
	jae	SHORT $LN24@PMC_ModPow

; 102  :     {
; 103  :         if ((result = DuplicateNumber(u, r)) != PMC_STATUS_OK)

	push	DWORD PTR _r$[ebp]
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN21@PMC_ModPow
	pop	esi
	pop	ebx
	pop	edi

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@PMC_ModPow:

; 110  :         __UNIT_TYPE* work_v_buf = AllocateBlock(v->UNIT_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	lea	ecx, DWORD PTR _work_v_buf_code$2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _work_v_buf_words$3[ebp]
	push	ecx
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], eax

; 111  :         if (work_v_buf == NULL)

	test	eax, eax
	je	SHORT $LN41@PMC_ModPow

; 112  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 113  :         __UNIT_TYPE r_check_code;
; 114  :         if ((result = AllocateNumber(r, u->UNIT_BIT_COUNT + __UNIT_TYPE_BIT_COUNT, &r_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _r$[ebp]
	lea	eax, DWORD PTR _r_check_code$1[ebp]
	push	eax
	mov	eax, DWORD PTR [esi+16]
	add	eax, 32					; 00000020H
	push	eax
	push	ebx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN28@PMC_ModPow

; 115  :         {
; 116  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$3[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 8
$LN41@PMC_ModPow:
	pop	esi
	pop	ebx

; 117  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -6					; fffffffaH
	pop	edi

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN28@PMC_ModPow:

; 120  :         if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [edi+12]
	cmp	ecx, edx
	jae	SHORT $LN29@PMC_ModPow
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [esi+36]
	mov	edi, DWORD PTR [edi+36]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 121  :             _COPY_MEMORY_UNIT((*r)->BLOCK, u->BLOCK, u->UNIT_WORD_COUNT);

	jmp	SHORT $LN32@PMC_ModPow
$LN29@PMC_ModPow:

; 122  :         else
; 123  :         {
; 124  :             DivRem_X_X(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, NULL, (*r)->BLOCK);

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR [eax+36]
	push	0
	push	DWORD PTR _work_v_buf$1$[ebp]
	push	edx
	push	DWORD PTR [edi+36]
	push	ecx
	push	DWORD PTR [esi+36]
	call	_DivRem_X_X

; 125  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$2[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	SHORT $LN39@PMC_ModPow

; 126  :                 return (result);
; 127  :             if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _r_check_code$1[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN39@PMC_ModPow
$LN32@PMC_ModPow:

; 128  :                 return (result);
; 129  :         }
; 130  : 
; 131  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$3[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 132  :         CommitNumber(*r);

	push	DWORD PTR [ebx]
	call	_CommitNumber
	add	esp, 12					; 0000000cH

; 543  :                     return (result);
; 544  :             }
; 545  :         }
; 546  :     }
; 547  :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi
	pop	ebx
	pop	edi

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@PMC_ModPow:

; 531  :             {
; 532  :                 // e が 1 の場合
; 533  : 
; 534  :                 // v % m を計算して返す
; 535  :                 if ((result = Remainder(v, m, r)) != PMC_STATUS_OK)
; 536  :                     return (result);
; 537  :             }
; 538  :             else
; 539  :             {
; 540  :                 // v、e、m がすべて 2 以上である場合
; 541  :                 // v の e 乗 の m による剰余を計算して返す
; 542  :                 if ((result = ModulePower(v, e, m, r)) != PMC_STATUS_OK)

	push	DWORD PTR _r$[ebp]
	push	edi
	push	ecx
	push	esi
	call	_ModulePower
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN21@PMC_ModPow
	pop	esi
	pop	ebx
	pop	edi

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@PMC_ModPow:

; 526  :             {
; 527  :                 // e が 0 の場合
; 528  :                 *r = &number_one;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_one
$LN21@PMC_ModPow:

; 543  :                     return (result);
; 544  :             }
; 545  :         }
; 546  :     }
; 547  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN39@PMC_ModPow:
	pop	esi
	pop	ebx
	pop	edi

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_PMC_ModPow_X_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT _ModulePower
_TEXT	SEGMENT
_r_check_code$ = -80					; size = 4
_t$1$ = -76						; size = 4
_t$1$ = -76						; size = 4
tv834 = -72						; size = 4
_v_2_buf_code$ = -68					; size = 4
_m_count$1$ = -64					; size = 4
_work_v_buf_code$ = -60					; size = 4
_e_mask$1$ = -56					; size = 4
tv883 = -56						; size = 4
_work_2_buf_code$ = -52					; size = 4
_work_1_buf_code$ = -48					; size = 4
_m_buf$1$ = -44						; size = 4
_v_count$1$ = -40					; size = 4
_e_count$1$ = -36					; size = 4
_work_2_buf_words$ = -32				; size = 4
_work_v_buf_words$ = -28				; size = 4
_v_2_buf_words$ = -24					; size = 4
_w_ptr$1$ = -20						; size = 4
_work_1_buf_words$ = -16				; size = 4
_work_2_buf$1$ = -12					; size = 4
_work_v_buf$1$ = -8					; size = 4
_v_2_buf$1$ = -4					; size = 4
_u_ptr$1$ = 8						; size = 4
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_work_1_buf$1$ = 16					; size = 4
_m$ = 16						; size = 4
_r$ = 20						; size = 4
_ModulePower PROC					; COMDAT

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi

; 139  : #ifdef DO_TRACE
; 140  :     ReportIN(v, e, m);
; 141  : #endif
; 142  :     PMC_STATUS_CODE result;
; 143  :     __UNIT_TYPE* m_buf = m->BLOCK;
; 144  :     __UNIT_TYPE m_count = m->UNIT_WORD_COUNT;
; 145  : 
; 146  :     // 作業域を獲得する
; 147  : 
; 148  :     __UNIT_TYPE v_2_bit_count = v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

	mov	esi, DWORD PTR _v$[ebp]

; 149  :     __UNIT_TYPE v_2_buf_code;
; 150  :     __UNIT_TYPE v_2_buf_words;
; 151  :     __UNIT_TYPE* v_2_buf = AllocateBlock(v_2_bit_count, &v_2_buf_words, &v_2_buf_code);

	lea	ecx, DWORD PTR _v_2_buf_code$[ebp]
	push	edi
	mov	edi, DWORD PTR _m$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _v_2_buf_words$[ebp]
	push	ecx
	mov	eax, DWORD PTR [edi+36]
	mov	ebx, DWORD PTR [edi+12]
	mov	DWORD PTR _m_buf$1$[ebp], eax
	mov	eax, DWORD PTR [esi+12]
	inc	eax
	mov	DWORD PTR _m_count$1$[ebp], ebx
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_2_buf$1$[ebp], eax

; 152  :     if (v_2_buf == NULL)

	test	eax, eax
	je	SHORT $LN114@ModulePowe

; 153  :     {
; 154  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 155  :     }
; 156  : 
; 157  :     __UNIT_TYPE work_1_bit_count = m_count * 2 * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;
; 158  :     __UNIT_TYPE work_1_buf_code;
; 159  :     __UNIT_TYPE work_1_buf_words;
; 160  :     __UNIT_TYPE* work_1_buf = AllocateBlock(work_1_bit_count, &work_1_buf_words, &work_1_buf_code);

	lea	ecx, DWORD PTR _work_1_buf_code$[ebp]
	mov	eax, ebx
	push	ecx
	shl	eax, 6
	lea	ecx, DWORD PTR _work_1_buf_words$[ebp]
	add	eax, 32					; 00000020H
	push	ecx
	push	eax
	mov	DWORD PTR tv883[ebp], eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_1_buf$1$[ebp], eax

; 161  :     if (work_1_buf == NULL)

	test	eax, eax
	jne	SHORT $LN11@ModulePowe

; 162  :     {
; 163  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 8
$LN114@ModulePowe:

; 449  : #ifdef DO_TRACE
; 450  :     ReportOUT(*r);
; 451  : #endif
; 452  :     return (PMC_STATUS_OK);
; 453  : }

	pop	edi
	pop	esi
	mov	eax, -6					; fffffffaH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@ModulePowe:

; 164  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 165  :     }
; 166  : 
; 167  :     __UNIT_TYPE work_2_bit_count = m_count * 2 * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;
; 168  :     __UNIT_TYPE work_2_buf_code;
; 169  :     __UNIT_TYPE work_2_buf_words;
; 170  :     __UNIT_TYPE* work_2_buf = AllocateBlock(work_2_bit_count, &work_2_buf_words, &work_2_buf_code);

	lea	eax, DWORD PTR _work_2_buf_code$[ebp]
	push	eax
	lea	eax, DWORD PTR _work_2_buf_words$[ebp]
	push	eax
	push	DWORD PTR tv883[ebp]
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_2_buf$1$[ebp], eax

; 171  :     if (work_2_buf == NULL)

	test	eax, eax
	jne	SHORT $LN12@ModulePowe

; 172  :     {
; 173  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 174  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 16					; 00000010H

; 175  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -6					; fffffffaH
	pop	edi

; 449  : #ifdef DO_TRACE
; 450  :     ReportOUT(*r);
; 451  : #endif
; 452  :     return (PMC_STATUS_OK);
; 453  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@ModulePowe:

; 176  :     }
; 177  : 
; 178  :     __UNIT_TYPE work_v_bit_count = m_count * __UNIT_TYPE_BIT_COUNT;
; 179  :     __UNIT_TYPE work_v_buf_code;
; 180  :     __UNIT_TYPE work_v_buf_words;
; 181  :     __UNIT_TYPE* work_v_buf = AllocateBlock(work_v_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$[ebp]
	push	eax
	mov	eax, ebx
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], eax

; 182  :     if (work_v_buf == NULL)

	test	eax, eax
	jne	SHORT $LN13@ModulePowe

; 183  :     {
; 184  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 185  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 186  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 24					; 00000018H

; 187  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -6					; fffffffaH
	pop	edi

; 449  : #ifdef DO_TRACE
; 450  :     ReportOUT(*r);
; 451  : #endif
; 452  :     return (PMC_STATUS_OK);
; 453  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@ModulePowe:

; 188  :     }
; 189  : 
; 190  :     __UNIT_TYPE r_bit_count = m->UNIT_BIT_COUNT;
; 191  :     __UNIT_TYPE r_check_code;
; 192  :     if ((result = AllocateNumber(r, r_bit_count, &r_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _r_check_code$[ebp]
	push	eax
	push	DWORD PTR [edi+16]
	mov	edi, DWORD PTR _r$[ebp]
	push	edi
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN14@ModulePowe

; 193  :     {
; 194  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 195  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 196  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 197  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 32					; 00000020H

; 198  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -6					; fffffffaH
	pop	edi

; 449  : #ifdef DO_TRACE
; 450  :     ReportOUT(*r);
; 451  : #endif
; 452  :     return (PMC_STATUS_OK);
; 453  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@ModulePowe:

; 199  :     }
; 200  : 
; 201  :     __UNIT_TYPE v_count;
; 202  :     int cmp = Compare_Easy(v->BLOCK, v->UNIT_WORD_COUNT, m_buf, m_count);

	mov	eax, DWORD PTR [esi+12]

; 82   :     if (u_count > v_count)

	cmp	eax, ebx
	jbe	SHORT $LN44@ModulePowe

; 83   :         return (1);

	mov	eax, 1
$LN15@ModulePowe:

; 214  :         *r = &number_zero;
; 215  : #ifdef DO_TRACE
; 216  :         ReportOUT(*r);
; 217  : #endif
; 218  :         return (PMC_STATUS_OK);
; 219  :     }
; 220  :     else if (cmp > 0)

	mov	ecx, DWORD PTR [esi+12]
	mov	esi, DWORD PTR [esi+36]
	test	eax, eax
	jle	$LN17@ModulePowe

; 221  :     {
; 222  :         // v > m である場合
; 223  : 
; 224  :         // v2 を v % m に設定する。
; 225  : 
; 226  :         DivRem_X_X(v->BLOCK, v->UNIT_WORD_COUNT, m_buf, m_count, work_v_buf, NULL, v_2_buf);

	push	DWORD PTR _v_2_buf$1$[ebp]
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
	push	0
	push	edi
	push	ebx
	push	DWORD PTR _m_buf$1$[ebp]
	push	ecx
	push	esi
	call	_DivRem_X_X

; 227  :         if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN1@ModulePowe

; 228  :             return (result);
; 229  :         if ((result = CheckBlockLight(v_2_buf, v_2_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _v_2_buf_code$[ebp]
	mov	esi, DWORD PTR _v_2_buf$1$[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 230  :             return (result);
; 231  :         v_count = m_count;

	mov	ecx, ebx
	mov	DWORD PTR _v_count$1$[ebp], ecx

; 232  :         while (v_count > 0 && v_2_buf[v_count - 1] == 0)

	test	ebx, ebx
	je	$LN106@ModulePowe

; 230  :             return (result);
; 231  :         v_count = m_count;

	lea	eax, DWORD PTR [esi-4]
	lea	eax, DWORD PTR [eax+ebx*4]
$LL2@ModulePowe:

; 232  :         while (v_count > 0 && v_2_buf[v_count - 1] == 0)

	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@ModulePowe

; 233  :             --v_count;

	dec	ecx
	sub	eax, 4
	mov	DWORD PTR _v_count$1$[ebp], ecx
	test	ecx, ecx
	jne	SHORT $LL2@ModulePowe

; 234  : 
; 235  :         if (v_count <= 0)

	jmp	SHORT $LN106@ModulePowe
$LN44@ModulePowe:

; 84   :     else if (u_count < v_count)

	jae	SHORT $LN46@ModulePowe

; 85   :         return (-1);

	or	eax, -1
	jmp	SHORT $LN15@ModulePowe
$LN46@ModulePowe:

; 86   :     else
; 87   :         return (Compare_Imp(u, v, u_count));

	push	eax
	push	DWORD PTR _m_buf$1$[ebp]
	push	DWORD PTR [esi+36]
	call	_Compare_Imp
	add	esp, 12					; 0000000cH

; 203  :     if (cmp == 0)

	test	eax, eax
	jne	$LN15@ModulePowe

; 204  :     {
; 205  :         // v == m である場合
; 206  : 
; 207  :         // v を何乗してもその剰余は 0 であるため、0 を返す。
; 208  : 
; 209  :         DeallocateNumber(*r);

	push	DWORD PTR [edi]
	call	_DeallocateNumber

; 210  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 211  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 212  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 213  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock

; 449  : #ifdef DO_TRACE
; 450  :     ReportOUT(*r);
; 451  : #endif
; 452  :     return (PMC_STATUS_OK);
; 453  : }

	add	esp, 36					; 00000024H
	mov	DWORD PTR [edi], OFFSET _number_zero
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@ModulePowe:

; 234  : 
; 235  :         if (v_count <= 0)

	test	ecx, ecx
	jne	SHORT $LN18@ModulePowe
$LN106@ModulePowe:

; 236  :         {
; 237  :             // v2 が 0 になってしまった場合はべき乗を繰り返しても 0 になることが確定なので 0 を返す
; 238  :             DeallocateNumber(*r);

	mov	ebx, DWORD PTR _r$[ebp]
	push	DWORD PTR [ebx]
	call	_DeallocateNumber

; 239  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$[ebp]
	push	edi
	call	_DeallocateBlock

; 240  :             DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 241  :             DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 242  :             DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	esi
	call	_DeallocateBlock

; 449  : #ifdef DO_TRACE
; 450  :     ReportOUT(*r);
; 451  : #endif
; 452  :     return (PMC_STATUS_OK);
; 453  : }

	add	esp, 36					; 00000024H
	mov	DWORD PTR [ebx], OFFSET _number_zero
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@ModulePowe:

; 255  :         v_count = v->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR _v$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _v_2_buf$1$[ebp]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 255  :         v_count = v->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR [eax+12]
	mov	esi, DWORD PTR _v_2_buf$1$[ebp]
	mov	DWORD PTR _v_count$1$[ebp], eax
$LN18@ModulePowe:

; 256  :     }
; 257  : 
; 258  : #ifdef DO_TRACE
; 259  :     ReportLabel("vの初期化");
; 260  :     ReportDump("v", v_2_buf, v_count);
; 261  : #endif
; 262  :     __UNIT_TYPE e_count = e->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+12]

; 263  :     __UNIT_TYPE e_mask = ~((__UNIT_TYPE)-1 >> 1);
; 264  :     e_mask = e_mask >> _LZCNT_ALT_UNIT(e->BLOCK[e_count - 1]);

	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR _e_count$1$[ebp], ecx
	mov	eax, DWORD PTR [eax+ecx*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 624  :         if (x == 0)

	test	eax, eax
	jne	SHORT $LN52@ModulePowe

; 625  :             return (sizeof(x) * 8);

	lea	ecx, DWORD PTR [eax+32]
	jmp	SHORT $LN51@ModulePowe
$LN52@ModulePowe:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
$LN51@ModulePowe:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 274  :     __UNIT_TYPE* u_ptr = work_1_buf;

	mov	edx, DWORD PTR _work_1_buf$1$[ebp]
	mov	eax, -2147483648			; 80000000H
	mov	edi, eax
	mov	DWORD PTR tv834[ebp], eax
	shr	edi, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 279  :     while (e_count > 0)

	cmp	DWORD PTR _e_count$1$[ebp], 0
	mov	ebx, DWORD PTR _v_count$1$[ebp]
	mov	DWORD PTR _e_mask$1$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _work_1_buf$1$[ebp]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 276  :     __UNIT_TYPE* w_ptr = work_2_buf;

	mov	edi, DWORD PTR _work_2_buf$1$[ebp]
	mov	DWORD PTR _u_ptr$1$[ebp], edx
	mov	DWORD PTR _w_ptr$1$[ebp], edi

; 279  :     while (e_count > 0)

	jbe	$LN5@ModulePowe
	mov	esi, DWORD PTR _m_count$1$[ebp]
$LL4@ModulePowe:

; 280  :     {
; 281  : #ifdef DO_TRACE
; 282  :         ReportLabel("ループ開始");
; 283  :         ReportVar("e_count", e_count);
; 284  :         ReportVar("e_mask", e_mask);
; 285  : #endif
; 286  : 
; 287  :         // 次の桁の準備をする
; 288  :         e_mask >>= 1;

	mov	eax, DWORD PTR _e_mask$1$[ebp]
	shr	eax, 1
	mov	ecx, eax

; 289  :         if (e_mask == 0)

	cmove	eax, DWORD PTR tv834[ebp]
	mov	DWORD PTR _e_mask$1$[ebp], eax

; 290  :         {
; 291  :             e_mask = ~((__UNIT_TYPE)-1 >> 1);
; 292  :             --e_count;
; 293  :         }
; 294  : 
; 295  :         if (e_count <= 0)

	mov	eax, DWORD PTR _e_count$1$[ebp]
	dec	eax
	test	ecx, ecx
	cmovne	eax, DWORD PTR _e_count$1$[ebp]
	mov	DWORD PTR _e_count$1$[ebp], eax
	test	eax, eax
	je	$LN5@ModulePowe

; 310  :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	push	DWORD PTR _w_ptr$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 310  :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	push	ebx
	push	edx
	push	ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 310  :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	push	edx
	call	_Multiply_X_X_Imp

; 311  :         if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_1_buf_code$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@ModulePowe

; 312  :             return (result);
; 313  :         if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_2_buf_code$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 93   :     *u = *v;

	mov	edi, DWORD PTR _w_ptr$1$[ebp]

; 94   :     *v = t;

	lea	ecx, DWORD PTR [ebx+ebx]
	mov	edx, DWORD PTR _u_ptr$1$[ebp]

; 314  :             return (result);
; 315  :         SwapPointer(&u_ptr, &w_ptr);
; 316  :         u_count *= 2;
; 317  :         if (u_ptr[u_count - 1] == 0)
; 318  :             --u_count;
; 319  : #ifdef DO_TRACE
; 320  :         ReportDump("w", u_ptr, u_count);
; 321  : #endif
; 322  : 
; 323  :         // w := u % m を計算する
; 324  : #ifdef DO_TRACE
; 325  :         ReportLabel("w := u % m");
; 326  :         ReportDump("u", u_ptr, u_count);
; 327  :         ReportDump("m", m_buf, m_count);
; 328  : #endif
; 329  :         if (u_count >= m_count)

	lea	eax, DWORD PTR [ecx-1]

; 92   :     __UNIT_TYPE* t = *u;

	mov	DWORD PTR _t$1$[ebp], edx

; 93   :     *u = *v;

	mov	DWORD PTR _u_ptr$1$[ebp], edi

; 314  :             return (result);
; 315  :         SwapPointer(&u_ptr, &w_ptr);
; 316  :         u_count *= 2;
; 317  :         if (u_ptr[u_count - 1] == 0)
; 318  :             --u_count;
; 319  : #ifdef DO_TRACE
; 320  :         ReportDump("w", u_ptr, u_count);
; 321  : #endif
; 322  : 
; 323  :         // w := u % m を計算する
; 324  : #ifdef DO_TRACE
; 325  :         ReportLabel("w := u % m");
; 326  :         ReportDump("u", u_ptr, u_count);
; 327  :         ReportDump("m", m_buf, m_count);
; 328  : #endif
; 329  :         if (u_count >= m_count)

	cmp	DWORD PTR [edi+ebx*8-4], 0

; 94   :     *v = t;

	mov	DWORD PTR _w_ptr$1$[ebp], edx

; 314  :             return (result);
; 315  :         SwapPointer(&u_ptr, &w_ptr);
; 316  :         u_count *= 2;
; 317  :         if (u_ptr[u_count - 1] == 0)
; 318  :             --u_count;
; 319  : #ifdef DO_TRACE
; 320  :         ReportDump("w", u_ptr, u_count);
; 321  : #endif
; 322  : 
; 323  :         // w := u % m を計算する
; 324  : #ifdef DO_TRACE
; 325  :         ReportLabel("w := u % m");
; 326  :         ReportDump("u", u_ptr, u_count);
; 327  :         ReportDump("m", m_buf, m_count);
; 328  : #endif
; 329  :         if (u_count >= m_count)

	cmovne	eax, ecx
	mov	ebx, eax
	cmp	ebx, esi
	jb	$LN110@ModulePowe
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _work_v_buf_words$[ebp]
	xor	eax, eax
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 333  :             DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, NULL, w_ptr);

	push	edx
	push	eax
	push	DWORD PTR _work_v_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	rep stosd
	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 333  :             DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, NULL, w_ptr);

	push	esi
	push	DWORD PTR _m_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 333  :             DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, NULL, w_ptr);

	mov	edi, DWORD PTR _u_ptr$1$[ebp]
	push	ebx
	push	edi
	call	_DivRem_X_X

; 334  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN1@ModulePowe

; 335  :                 return (result);
; 336  :             if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_1_buf_code$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 337  :                 return (result);
; 338  :             if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_2_buf_code$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 93   :     *u = *v;

	mov	eax, DWORD PTR _t$1$[ebp]
	mov	ecx, edi
	mov	DWORD PTR _w_ptr$1$[ebp], ecx
	mov	edx, eax
	mov	DWORD PTR _u_ptr$1$[ebp], edx

; 339  :                 return (result);
; 340  :             SwapPointer(&u_ptr, &w_ptr);
; 341  :             u_count = m_count;

	mov	ebx, esi

; 342  :             while (u_count > 0 && u_ptr[u_count - 1] == 0)

	test	esi, esi
	je	SHORT $LN88@ModulePowe

; 92   :     __UNIT_TYPE* t = *u;

	lea	eax, DWORD PTR [eax+esi*4]
	add	eax, -4					; fffffffcH
	npad	4
$LL6@ModulePowe:

; 342  :             while (u_count > 0 && u_ptr[u_count - 1] == 0)

	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@ModulePowe

; 343  :                 --u_count;

	sub	eax, 4
	sub	ebx, 1
	jne	SHORT $LL6@ModulePowe
$LN88@ModulePowe:

; 449  : #ifdef DO_TRACE
; 450  :     ReportOUT(*r);
; 451  : #endif
; 452  :     return (PMC_STATUS_OK);
; 453  : }

	mov	ebx, DWORD PTR _r$[ebp]
	push	DWORD PTR [ebx]
	call	_DeallocateNumber
	push	DWORD PTR _work_v_buf_words$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock
	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock
	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock
	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 36					; 00000024H
	mov	DWORD PTR [ebx], OFFSET _number_zero
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN110@ModulePowe:

; 314  :             return (result);
; 315  :         SwapPointer(&u_ptr, &w_ptr);
; 316  :         u_count *= 2;
; 317  :         if (u_ptr[u_count - 1] == 0)
; 318  :             --u_count;
; 319  : #ifdef DO_TRACE
; 320  :         ReportDump("w", u_ptr, u_count);
; 321  : #endif
; 322  : 
; 323  :         // w := u % m を計算する
; 324  : #ifdef DO_TRACE
; 325  :         ReportLabel("w := u % m");
; 326  :         ReportDump("u", u_ptr, u_count);
; 327  :         ReportDump("m", m_buf, m_count);
; 328  : #endif
; 329  :         if (u_count >= m_count)

	mov	edx, DWORD PTR _u_ptr$1$[ebp]
	mov	ecx, DWORD PTR _w_ptr$1$[ebp]
$LN7@ModulePowe:

; 344  : 
; 345  :             if (u_count <= 0)
; 346  :             {
; 347  :                 // 剰余が 0 になった場合はこれ以上続行しても解が 0 以外にはならないので、処理を中断して 0 を返す
; 348  :                 DeallocateNumber(*r);
; 349  :                 DeallocateBlock(work_v_buf, work_v_buf_words);
; 350  :                 DeallocateBlock(work_2_buf, work_2_buf_words);
; 351  :                 DeallocateBlock(work_1_buf, work_1_buf_words);
; 352  :                 DeallocateBlock(v_2_buf, v_2_buf_words);
; 353  :                 *r = &number_zero;
; 354  : #ifdef DO_TRACE
; 355  :                 ReportOUT(*r);
; 356  : #endif
; 357  :                 return (PMC_STATUS_OK);
; 358  :             }
; 359  :         }
; 360  : #ifdef DO_TRACE
; 361  :         ReportDump("w", u_ptr, u_count);
; 362  : #endif
; 363  : 
; 364  : #ifdef DO_TRACE
; 365  :         ReportLabel("e のビット検査");
; 366  :         ReportDump("e", e->BLOCK, e->UNIT_WORD_COUNT);
; 367  :         ReportVar("e_count", e_count);
; 368  :         ReportVar("e_mask", e_mask);
; 369  :         ReportVar("e_mask & e->BLOCK[e_count - 1]", e_mask & e->BLOCK[e_count - 1]);
; 370  : #endif
; 371  :         if (e_mask & e->BLOCK[e_count - 1])

	mov	eax, DWORD PTR _e$[ebp]
	mov	esi, DWORD PTR _e_count$1$[ebp]
	mov	edi, DWORD PTR _e_mask$1$[ebp]
	mov	eax, DWORD PTR [eax+36]
	test	DWORD PTR [eax+esi*4-4], edi
	mov	esi, DWORD PTR _m_count$1$[ebp]
	je	$LN111@ModulePowe

; 383  :             Multiply_X_X_Imp(u_ptr, u_count, v_ptr, v_count, w_ptr);

	push	DWORD PTR _w_ptr$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, ecx
	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 383  :             Multiply_X_X_Imp(u_ptr, u_count, v_ptr, v_count, w_ptr);

	push	DWORD PTR _v_count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 383  :             Multiply_X_X_Imp(u_ptr, u_count, v_ptr, v_count, w_ptr);

	push	DWORD PTR _v_2_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 383  :             Multiply_X_X_Imp(u_ptr, u_count, v_ptr, v_count, w_ptr);

	push	ebx
	push	edx
	call	_Multiply_X_X_Imp

; 384  :             if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_1_buf_code$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN1@ModulePowe

; 385  :                 return (result);
; 386  :             if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_2_buf_code$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 387  :                 return (result);
; 388  :             SwapPointer(&u_ptr, &w_ptr);
; 389  :             u_count += v_count;

	add	ebx, DWORD PTR _v_count$1$[ebp]

; 93   :     *u = *v;

	mov	ecx, DWORD PTR _w_ptr$1$[ebp]
	mov	edx, DWORD PTR _u_ptr$1$[ebp]

; 94   :     *v = t;

	mov	edi, edx
	mov	DWORD PTR _t$1$[ebp], edx

; 390  :             if (u_ptr[u_count - 1] == 0)
; 391  :                 --u_count;
; 392  : #ifdef DO_TRACE
; 393  :             ReportDump("w", u_ptr, u_count);
; 394  : #endif
; 395  : 
; 396  :             // w := u % m を計算する
; 397  : 
; 398  : #ifdef DO_TRACE
; 399  :             ReportLabel("w := u % m");
; 400  :             ReportDump("u", u_ptr, u_count);
; 401  :             ReportDump("m", m_buf, m_count);
; 402  : #endif
; 403  :             if (u_count >= m_count)

	lea	eax, DWORD PTR [ebx-1]

; 93   :     *u = *v;

	mov	DWORD PTR _u_ptr$1$[ebp], ecx

; 390  :             if (u_ptr[u_count - 1] == 0)
; 391  :                 --u_count;
; 392  : #ifdef DO_TRACE
; 393  :             ReportDump("w", u_ptr, u_count);
; 394  : #endif
; 395  : 
; 396  :             // w := u % m を計算する
; 397  : 
; 398  : #ifdef DO_TRACE
; 399  :             ReportLabel("w := u % m");
; 400  :             ReportDump("u", u_ptr, u_count);
; 401  :             ReportDump("m", m_buf, m_count);
; 402  : #endif
; 403  :             if (u_count >= m_count)

	cmp	DWORD PTR [ecx+ebx*4-4], 0

; 94   :     *v = t;

	mov	DWORD PTR _w_ptr$1$[ebp], edi

; 390  :             if (u_ptr[u_count - 1] == 0)
; 391  :                 --u_count;
; 392  : #ifdef DO_TRACE
; 393  :             ReportDump("w", u_ptr, u_count);
; 394  : #endif
; 395  : 
; 396  :             // w := u % m を計算する
; 397  : 
; 398  : #ifdef DO_TRACE
; 399  :             ReportLabel("w := u % m");
; 400  :             ReportDump("u", u_ptr, u_count);
; 401  :             ReportDump("m", m_buf, m_count);
; 402  : #endif
; 403  :             if (u_count >= m_count)

	cmovne	eax, ebx
	mov	ebx, eax
	cmp	ebx, esi
	jb	$LN112@ModulePowe
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _work_v_buf_words$[ebp]
	xor	eax, eax
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 407  :                 DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, NULL, w_ptr);

	push	edx
	push	eax
	push	DWORD PTR _work_v_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	rep stosd
	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 407  :                 DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, NULL, w_ptr);

	push	esi
	push	DWORD PTR _m_buf$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	rep stosd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 407  :                 DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, NULL, w_ptr);

	mov	edi, DWORD PTR _u_ptr$1$[ebp]
	push	ebx
	push	edi
	call	_DivRem_X_X

; 408  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN1@ModulePowe

; 409  :                     return (result);
; 410  :                 if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_1_buf_code$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 411  :                     return (result);
; 412  :                 if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_2_buf_code$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@ModulePowe

; 93   :     *u = *v;

	mov	eax, DWORD PTR _t$1$[ebp]
	mov	edx, eax
	mov	DWORD PTR _w_ptr$1$[ebp], edi

; 413  :                     return (result);
; 414  :                 SwapPointer(&u_ptr, &w_ptr);
; 415  :                 u_count = m_count;

	mov	ebx, esi

; 93   :     *u = *v;

	mov	DWORD PTR _u_ptr$1$[ebp], edx

; 416  :                 while (u_count > 0 && u_ptr[u_count - 1] == 0)

	test	esi, esi
	je	$LN88@ModulePowe

; 92   :     __UNIT_TYPE* t = *u;

	lea	eax, DWORD PTR [eax+esi*4]
	add	eax, -4					; fffffffcH
$LL8@ModulePowe:

; 416  :                 while (u_count > 0 && u_ptr[u_count - 1] == 0)

	cmp	DWORD PTR [eax], 0
	jne	$LL4@ModulePowe

; 417  :                     --u_count;

	sub	eax, 4
	sub	ebx, 1
	jne	SHORT $LL8@ModulePowe

; 416  :                 while (u_count > 0 && u_ptr[u_count - 1] == 0)

	jmp	$LN88@ModulePowe
$LN111@ModulePowe:

; 344  : 
; 345  :             if (u_count <= 0)
; 346  :             {
; 347  :                 // 剰余が 0 になった場合はこれ以上続行しても解が 0 以外にはならないので、処理を中断して 0 を返す
; 348  :                 DeallocateNumber(*r);
; 349  :                 DeallocateBlock(work_v_buf, work_v_buf_words);
; 350  :                 DeallocateBlock(work_2_buf, work_2_buf_words);
; 351  :                 DeallocateBlock(work_1_buf, work_1_buf_words);
; 352  :                 DeallocateBlock(v_2_buf, v_2_buf_words);
; 353  :                 *r = &number_zero;
; 354  : #ifdef DO_TRACE
; 355  :                 ReportOUT(*r);
; 356  : #endif
; 357  :                 return (PMC_STATUS_OK);
; 358  :             }
; 359  :         }
; 360  : #ifdef DO_TRACE
; 361  :         ReportDump("w", u_ptr, u_count);
; 362  : #endif
; 363  : 
; 364  : #ifdef DO_TRACE
; 365  :         ReportLabel("e のビット検査");
; 366  :         ReportDump("e", e->BLOCK, e->UNIT_WORD_COUNT);
; 367  :         ReportVar("e_count", e_count);
; 368  :         ReportVar("e_mask", e_mask);
; 369  :         ReportVar("e_mask & e->BLOCK[e_count - 1]", e_mask & e->BLOCK[e_count - 1]);
; 370  : #endif
; 371  :         if (e_mask & e->BLOCK[e_count - 1])

	mov	edx, DWORD PTR _u_ptr$1$[ebp]
	mov	edi, DWORD PTR _w_ptr$1$[ebp]
	jmp	$LL4@ModulePowe
$LN112@ModulePowe:

; 390  :             if (u_ptr[u_count - 1] == 0)
; 391  :                 --u_count;
; 392  : #ifdef DO_TRACE
; 393  :             ReportDump("w", u_ptr, u_count);
; 394  : #endif
; 395  : 
; 396  :             // w := u % m を計算する
; 397  : 
; 398  : #ifdef DO_TRACE
; 399  :             ReportLabel("w := u % m");
; 400  :             ReportDump("u", u_ptr, u_count);
; 401  :             ReportDump("m", m_buf, m_count);
; 402  : #endif
; 403  :             if (u_count >= m_count)

	mov	edx, DWORD PTR _u_ptr$1$[ebp]
	jmp	$LL4@ModulePowe
$LN5@ModulePowe:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR _r$[ebp]
	mov	esi, edx
	mov	ecx, ebx
	mov	edi, DWORD PTR [eax]
	mov	edi, DWORD PTR [edi+36]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 442  :     if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [eax]
	push	DWORD PTR _r_check_code$[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@ModulePowe

; 443  :         return (result);
; 444  :     CommitNumber(*r);

	mov	ebx, DWORD PTR _r$[ebp]
	push	DWORD PTR [ebx]
	call	_CommitNumber

; 445  :     DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$[ebp]
	push	DWORD PTR _work_v_buf$1$[ebp]
	call	_DeallocateBlock

; 446  :     DeallocateBlock(work_2_buf, work_2_buf_words);

	push	DWORD PTR _work_2_buf_words$[ebp]
	push	DWORD PTR _work_2_buf$1$[ebp]
	call	_DeallocateBlock

; 447  :     DeallocateBlock(work_1_buf, work_1_buf_words);

	push	DWORD PTR _work_1_buf_words$[ebp]
	push	DWORD PTR _work_1_buf$1$[ebp]
	call	_DeallocateBlock

; 448  :     DeallocateBlock(v_2_buf, v_2_buf_words);

	push	DWORD PTR _v_2_buf_words$[ebp]
	push	DWORD PTR _v_2_buf$1$[ebp]
	call	_DeallocateBlock

; 449  : #ifdef DO_TRACE
; 450  :     ReportOUT(*r);
; 451  : #endif
; 452  :     return (PMC_STATUS_OK);
; 453  : }

	add	esp, 36					; 00000024H
	xor	eax, eax
$LN1@ModulePowe:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_ModulePower ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT _Remainder
_TEXT	SEGMENT
_r_check_code$1 = -12					; size = 4
_work_v_buf_code$2 = -8					; size = 4
_work_v_buf$1$ = -4					; size = 4
_work_v_buf_words$3 = 8					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_r$ = 16						; size = 4
_Remainder PROC						; COMDAT

; 98   : {

	push	ebp
	mov	ebp, esp

; 99   :     PMC_STATUS_CODE result;
; 100  : 
; 101  :     if (u->UNIT_BIT_COUNT < v->UNIT_BIT_COUNT)

	mov	eax, DWORD PTR _v$[ebp]
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR [eax+16]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	cmp	DWORD PTR [esi+16], eax
	jae	SHORT $LN2@Remainder

; 102  :     {
; 103  :         if ((result = DuplicateNumber(u, r)) != PMC_STATUS_OK)

	push	DWORD PTR _r$[ebp]
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN3@Remainder

; 135  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@Remainder:

; 104  :             return (result);
; 105  :     }
; 106  :     else
; 107  :     {
; 108  :         __UNIT_TYPE work_v_buf_code;
; 109  :         __UNIT_TYPE work_v_buf_words;
; 110  :         __UNIT_TYPE* work_v_buf = AllocateBlock(v->UNIT_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	lea	ecx, DWORD PTR _work_v_buf_code$2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _work_v_buf_words$3[ebp]
	push	ecx
	push	eax
	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], edi

; 111  :         if (work_v_buf == NULL)

	test	edi, edi
	je	SHORT $LN14@Remainder

; 112  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 113  :         __UNIT_TYPE r_check_code;
; 114  :         if ((result = AllocateNumber(r, u->UNIT_BIT_COUNT + __UNIT_TYPE_BIT_COUNT, &r_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _r$[ebp]
	lea	eax, DWORD PTR _r_check_code$1[ebp]
	push	eax
	mov	eax, DWORD PTR [esi+16]
	add	eax, 32					; 00000020H
	push	eax
	push	ebx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@Remainder

; 115  :         {
; 116  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$3[ebp]
	push	edi
	call	_DeallocateBlock
	add	esp, 8
$LN14@Remainder:

; 135  : }

	pop	edi
	pop	esi
	mov	eax, -6					; fffffffaH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@Remainder:

; 117  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 118  :         }
; 119  : 
; 120  :         if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, DWORD PTR [ecx+12]
	jae	SHORT $LN7@Remainder
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR [ebx]
	mov	ecx, edx
	mov	esi, DWORD PTR [esi+36]
	mov	edi, DWORD PTR [edi+36]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c

; 121  :             _COPY_MEMORY_UNIT((*r)->BLOCK, u->BLOCK, u->UNIT_WORD_COUNT);

	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
	jmp	SHORT $LN10@Remainder
$LN7@Remainder:

; 122  :         else
; 123  :         {
; 124  :             DivRem_X_X(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, NULL, (*r)->BLOCK);

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR [eax+36]
	push	0
	push	edi
	push	DWORD PTR [ecx+12]
	push	DWORD PTR [ecx+36]
	push	edx
	push	DWORD PTR [esi+36]
	call	_DivRem_X_X

; 125  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$2[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	SHORT $LN1@Remainder

; 126  :                 return (result);
; 127  :             if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _r_check_code$1[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@Remainder
$LN10@Remainder:

; 128  :                 return (result);
; 129  :         }
; 130  : 
; 131  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$3[ebp]
	push	edi
	call	_DeallocateBlock

; 132  :         CommitNumber(*r);

	push	DWORD PTR [ebx]
	call	_CommitNumber
	add	esp, 12					; 0000000cH
$LN3@Remainder:

; 133  :     }
; 134  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Remainder:
	pop	edi

; 135  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Remainder ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT _SwapPointer
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_SwapPointer PROC					; COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp

; 92   :     __UNIT_TYPE* t = *u;

	mov	edx, DWORD PTR _u$[ebp]

; 93   :     *u = *v;

	mov	ecx, DWORD PTR _v$[ebp]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 94   :     *v = t;

	mov	DWORD PTR [ecx], esi
	pop	esi

; 95   : }

	pop	ebp
	ret	0
_SwapPointer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT _Compare_Easy
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_Compare_Easy PROC					; COMDAT

; 81   : {

	push	ebp
	mov	ebp, esp

; 82   :     if (u_count > v_count)

	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, DWORD PTR _v_count$[ebp]
	jbe	SHORT $LN2@Compare_Ea

; 83   :         return (1);

	mov	eax, 1

; 88   : }

	pop	ebp
	ret	0
$LN2@Compare_Ea:

; 84   :     else if (u_count < v_count)

	jae	SHORT $LN4@Compare_Ea

; 85   :         return (-1);

	or	eax, -1

; 88   : }

	pop	ebp
	ret	0
$LN4@Compare_Ea:

; 86   :     else
; 87   :         return (Compare_Imp(u, v, u_count));

	push	eax
	push	DWORD PTR _v$[ebp]
	push	DWORD PTR _u$[ebp]
	call	_Compare_Imp
	add	esp, 12					; 0000000cH

; 88   : }

	pop	ebp
	ret	0
_Compare_Easy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :     {

	push	ebp
	mov	ebp, esp

; 624  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 649  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 649  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT PROC					; COMDAT

; 110  :     {

	push	ebp
	mov	ebp, esp

; 111  : #ifdef _M_IX86
; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	eax, eax
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosd
	pop	edi

; 113  : #elif defined(_M_X64)
; 114  :         __stosq(d, 0, count);
; 115  : #else
; 116  : #error unknown platform
; 117  : #endif
; 118  :     }

	pop	ebp
	ret	0
__ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	push	ebp
	mov	ebp, esp

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);
; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT _PMC_ModPow_X_X_X@16
_TEXT	SEGMENT
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_m$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_ModPow_X_X_X@16 PROC				; COMDAT

; 551  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 552  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	test	esi, esi
	je	SHORT $LN11@PMC_ModPow

; 553  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 554  :     if (e == NULL)

	mov	edi, DWORD PTR _e$[ebp]
	test	edi, edi
	je	SHORT $LN11@PMC_ModPow

; 555  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 556  :     if (m == NULL)

	mov	ebx, DWORD PTR _m$[ebp]
	test	ebx, ebx
	je	SHORT $LN11@PMC_ModPow

; 557  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 558  :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	je	SHORT $LN11@PMC_ModPow

; 560  :     PMC_STATUS_CODE result;
; 561  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN9@PMC_ModPow

; 562  :         return (result);
; 563  :     if ((result = CheckNumber((NUMBER_HEADER*)e)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN9@PMC_ModPow

; 564  :         return (result);
; 565  :     if ((result = CheckNumber((NUMBER_HEADER*)m)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN9@PMC_ModPow

; 566  :         return (result);
; 567  :     if ((result = PMC_ModPow_X_X_X_Imp((NUMBER_HEADER*)v, (NUMBER_HEADER*)e, (NUMBER_HEADER*)m, (NUMBER_HEADER**)r)) != PMC_STATUS_OK)

	push	DWORD PTR _r$[ebp]
	push	ebx
	push	edi
	push	esi
	call	_PMC_ModPow_X_X_X_Imp
	add	esp, 16					; 00000010H
	pop	edi

; 568  :         return (result);
; 569  : #ifdef _DEBUG
; 570  :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 571  :         return (result);
; 572  : #endif
; 573  :     return (PMC_STATUS_OK);
; 574  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN11@PMC_ModPow:

; 559  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN9@PMC_ModPow:
	pop	edi

; 568  :         return (result);
; 569  : #ifdef _DEBUG
; 570  :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 571  :         return (result);
; 572  : #endif
; 573  :     return (PMC_STATUS_OK);
; 574  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
_PMC_ModPow_X_X_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT _Initialize_ModPow
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_ModPow PROC					; COMDAT

; 578  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 579  : }

	ret	0
_Initialize_ModPow ENDP
_TEXT	ENDS
END
