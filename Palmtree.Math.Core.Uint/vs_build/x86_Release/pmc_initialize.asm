; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_initialize.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_configuration_info:DWORD
_DATA	ENDS
PUBLIC	_PMC_UINT_Initialize@4
EXTRN	_GetCPUInfo:PROC
EXTRN	_Initialize_Memory:PROC
EXTRN	_Initialize_From:PROC
EXTRN	_Initialize_Clone:PROC
EXTRN	_Initialize_To:PROC
EXTRN	_Initialize_Add:PROC
EXTRN	_Initialize_Subtruct:PROC
EXTRN	_Initialize_Multiply:PROC
EXTRN	_Initialize_DivRem:PROC
EXTRN	_Initialize_Shift:PROC
EXTRN	_Initialize_BitwiseAnd:PROC
EXTRN	_Initialize_BitwiseOr:PROC
EXTRN	_Initialize_ExclusiveOr:PROC
EXTRN	_Initialize_Compare:PROC
EXTRN	_Initialize_Equals:PROC
EXTRN	_Initialize_ToString:PROC
EXTRN	_Initialize_Parse:PROC
EXTRN	_Initialize_GreatestCommonDivisor:PROC
EXTRN	_Initialize_Pow:PROC
EXTRN	_Initialize_ModPow:PROC
EXTRN	_PMC_GetStatisticsInfo@4:PROC
EXTRN	_PMC_From_I@8:PROC
EXTRN	_PMC_From_L@12:PROC
EXTRN	_PMC_Dispose@4:PROC
EXTRN	_PMC_GetConstantValue_I@8:PROC
EXTRN	_PMC_FromByteArray@12:PROC
EXTRN	_PMC_ToByteArray@16:PROC
EXTRN	_PMC_Clone_X@8:PROC
EXTRN	_PMC_To_X_I@8:PROC
EXTRN	_PMC_To_X_L@8:PROC
EXTRN	_PMC_InitializeNumberFormatInfo@4:PROC
EXTRN	_PMC_ToString@20:PROC
EXTRN	_PMC_TryParse@16:PROC
EXTRN	_PMC_Add_I_X@12:PROC
EXTRN	_PMC_Add_L_X@16:PROC
EXTRN	_PMC_Add_X_I@12:PROC
EXTRN	_PMC_Add_X_L@16:PROC
EXTRN	_PMC_Add_X_X@12:PROC
EXTRN	_PMC_Subtruct_I_X@12:PROC
EXTRN	_PMC_Subtruct_L_X@16:PROC
EXTRN	_PMC_Subtruct_X_I@12:PROC
EXTRN	_PMC_Subtruct_X_L@16:PROC
EXTRN	_PMC_Subtruct_X_X@12:PROC
EXTRN	_PMC_Multiply_I_X@12:PROC
EXTRN	_PMC_Multiply_L_X@16:PROC
EXTRN	_PMC_Multiply_X_I@12:PROC
EXTRN	_PMC_Multiply_X_L@16:PROC
EXTRN	_PMC_Multiply_X_X@12:PROC
EXTRN	_PMC_DivRem_I_X@16:PROC
EXTRN	_PMC_DivRem_L_X@20:PROC
EXTRN	_PMC_DivRem_X_I@16:PROC
EXTRN	_PMC_DivRem_X_L@20:PROC
EXTRN	_PMC_DivRem_X_X@16:PROC
EXTRN	_PMC_RightShift_X_I@12:PROC
EXTRN	_PMC_LeftShift_X_I@12:PROC
EXTRN	_PMC_BitwiseAnd_I_X@12:PROC
EXTRN	_PMC_BitwiseAnd_L_X@16:PROC
EXTRN	_PMC_BitwiseAnd_X_I@12:PROC
EXTRN	_PMC_BitwiseAnd_X_L@16:PROC
EXTRN	_PMC_BitwiseAnd_X_X@12:PROC
EXTRN	_PMC_BitwiseOr_I_X@12:PROC
EXTRN	_PMC_BitwiseOr_L_X@16:PROC
EXTRN	_PMC_BitwiseOr_X_I@12:PROC
EXTRN	_PMC_BitwiseOr_X_L@16:PROC
EXTRN	_PMC_BitwiseOr_X_X@12:PROC
EXTRN	_PMC_ExclusiveOr_I_X@12:PROC
EXTRN	_PMC_ExclusiveOr_L_X@16:PROC
EXTRN	_PMC_ExclusiveOr_X_I@12:PROC
EXTRN	_PMC_ExclusiveOr_X_L@16:PROC
EXTRN	_PMC_ExclusiveOr_X_X@12:PROC
EXTRN	_PMC_Compare_I_X@12:PROC
EXTRN	_PMC_Compare_L_X@16:PROC
EXTRN	_PMC_Compare_X_I@12:PROC
EXTRN	_PMC_Compare_X_L@16:PROC
EXTRN	_PMC_Compare_X_X@12:PROC
EXTRN	_PMC_Equals_I_X@12:PROC
EXTRN	_PMC_Equals_L_X@16:PROC
EXTRN	_PMC_Equals_X_I@12:PROC
EXTRN	_PMC_Equals_X_L@16:PROC
EXTRN	_PMC_Equals_X_X@12:PROC
EXTRN	_PMC_GreatestCommonDivisor_I_X@12:PROC
EXTRN	_PMC_GreatestCommonDivisor_L_X@16:PROC
EXTRN	_PMC_GreatestCommonDivisor_X_I@12:PROC
EXTRN	_PMC_GreatestCommonDivisor_X_L@16:PROC
EXTRN	_PMC_GreatestCommonDivisor_X_X@12:PROC
EXTRN	_PMC_Pow_X_I@12:PROC
EXTRN	_PMC_ModPow_X_X_X@16:PROC
EXTRN	_PMC_FromByteArrayForSINT@16:PROC
EXTRN	_PMC_ToByteArrayForSINT@20:PROC
EXTRN	_PMC_TryParseForSINT@20:PROC
_BSS	SEGMENT
_entry_points DB 011cH DUP (?)
_initialized DB	01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.c
;	COMDAT _SelfCheck
_TEXT	SEGMENT
_nh$ = -40						; size = 40
_SelfCheck PROC						; COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 89   :         __stosb(d, 0, count);

	mov	ecx, 40					; 00000028H
	xor	al, al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.c

; 41   : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 89   :         __stosb(d, 0, count);

	lea	edi, DWORD PTR _nh$[ebp]
	rep stosb
	lea	edi, DWORD PTR _nh$[ebp]
	mov	ecx, 40					; 00000028H
	rep stosb
	lea	edi, DWORD PTR _nh$[ebp]
	mov	ecx, 40					; 00000028H
	rep stosb
	lea	edi, DWORD PTR _nh$[ebp]
	mov	ecx, 40					; 00000028H
	rep stosb
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.c

; 60   :     return(TRUE);

	mov	eax, 1
	pop	edi

; 61   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_SelfCheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC					; COMDAT

; 88   :     {

	push	ebp
	mov	ebp, esp

; 89   :         __stosb(d, 0, count);

	mov	ecx, DWORD PTR _count$[ebp]
	xor	al, al
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep stosb
	pop	edi

; 90   :     }

	pop	ebp
	ret	0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.c
;	COMDAT _PMC_UINT_Initialize@4
_TEXT	SEGMENT
_nh$1 = -44						; size = 40
_feature$2 = -4						; size = 4
_config$ = 8						; size = 4
_PMC_UINT_Initialize@4 PROC				; COMDAT

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 65   :     if (!initialized)

	cmp	BYTE PTR _initialized, 0
	jne	$LN2@PMC_UINT_I
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 89   :         __stosb(d, 0, count);

	push	edi
	xor	al, al
	lea	edi, DWORD PTR _nh$1[ebp]
	mov	ecx, 40					; 00000028H
	rep stosb
	lea	edi, DWORD PTR _nh$1[ebp]
	mov	ecx, 40					; 00000028H
	rep stosb
	lea	edi, DWORD PTR _nh$1[ebp]
	mov	ecx, 40					; 00000028H
	rep stosb
	lea	edi, DWORD PTR _nh$1[ebp]
	mov	ecx, 40					; 00000028H
	rep stosb
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.c

; 71   :         GetCPUInfo(&feature);

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_GetCPUInfo

; 72   :         configuration_info = *config;

	mov	eax, DWORD PTR _config$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _configuration_info, eax

; 73   :         if (Initialize_Memory(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_Memory
	add	esp, 8
	pop	edi
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 74   :             return (NULL);
; 75   :         if (Initialize_From(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_From
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 76   :             return (NULL);
; 77   :         if (Initialize_To(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_To
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 78   :             return (NULL);
; 79   :         if (Initialize_Add(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_Add
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 80   :             return (NULL);
; 81   :         if (Initialize_Subtruct(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_Subtruct
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 82   :             return (NULL);
; 83   :         if (Initialize_Multiply(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_Multiply
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 84   :             return (NULL);
; 85   :         if (Initialize_DivRem(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_DivRem
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 86   :             return (NULL);
; 87   :         if (Initialize_Shift(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_Shift
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 88   :             return (NULL);
; 89   :         if (Initialize_BitwiseAnd(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_BitwiseAnd
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 90   :             return (NULL);
; 91   :         if (Initialize_BitwiseOr(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_BitwiseOr
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 92   :             return (NULL);
; 93   :         if (Initialize_ExclusiveOr(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_ExclusiveOr
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 94   :             return (NULL);
; 95   :         if (Initialize_Compare(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_Compare
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 96   :             return (NULL);
; 97   :         if (Initialize_Equals(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_Equals
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 98   :             return (NULL);
; 99   :         if (Initialize_ToString(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_ToString
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 100  :             return (NULL);
; 101  :         if (Initialize_Parse(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_Parse
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 102  :             return (NULL);
; 103  :         if (Initialize_GreatestCommonDivisor(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_GreatestCommonDivisor
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 104  :             return (NULL);
; 105  :         if (Initialize_Pow(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_Pow
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 106  :             return (NULL);
; 107  :         if (Initialize_ModPow(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_ModPow
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 108  :             return (NULL);
; 109  :         if (Initialize_Clone(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$2[ebp]
	push	eax
	call	_Initialize_Clone
	add	esp, 4
	test	eax, eax
	jne	$LN38@PMC_UINT_I

; 111  : 
; 112  :         entry_points.PROCESSOR_FEATURE_POPCNT = feature.PROCESSOR_FEATURE_POPCNT;
; 113  :         entry_points.PROCESSOR_FEATURE_ADX = feature.PROCESSOR_FEATURE_ADX;
; 114  :         entry_points.PROCESSOR_FEATURE_BMI1 = feature.PROCESSOR_FEATURE_BMI1;
; 115  :         entry_points.PROCESSOR_FEATURE_BMI2 = feature.PROCESSOR_FEATURE_BMI2;
; 116  :         entry_points.PROCESSOR_FEATURE_ABM = feature.PROCESSOR_FEATURE_ABM;

	mov	ecx, DWORD PTR _entry_points
	mov	eax, ecx
	xor	eax, DWORD PTR _feature$2[ebp]
	and	eax, 31					; 0000001fH

; 117  :         entry_points.GetStatisticsInfo = PMC_GetStatisticsInfo;

	mov	DWORD PTR _entry_points+4, OFFSET _PMC_GetStatisticsInfo@4
	xor	ecx, eax

; 118  :         entry_points.From_I = PMC_From_I;

	mov	DWORD PTR _entry_points+8, OFFSET _PMC_From_I@8
	mov	DWORD PTR _entry_points, ecx

; 119  :         entry_points.From_L = PMC_From_L;

	mov	DWORD PTR _entry_points+12, OFFSET _PMC_From_L@12

; 120  :         entry_points.Dispose = PMC_Dispose;

	mov	DWORD PTR _entry_points+16, OFFSET _PMC_Dispose@4

; 121  :         entry_points.To_X_I = PMC_To_X_I;

	mov	DWORD PTR _entry_points+36, OFFSET _PMC_To_X_I@8

; 122  :         entry_points.To_X_L = PMC_To_X_L;

	mov	DWORD PTR _entry_points+40, OFFSET _PMC_To_X_L@8

; 123  :         entry_points.FromByteArray = PMC_FromByteArray;

	mov	DWORD PTR _entry_points+24, OFFSET _PMC_FromByteArray@12

; 124  :         entry_points.ToByteArray = PMC_ToByteArray;

	mov	DWORD PTR _entry_points+28, OFFSET _PMC_ToByteArray@16

; 125  :         entry_points.InitializeNumberFormatInfo = PMC_InitializeNumberFormatInfo;

	mov	DWORD PTR _entry_points+44, OFFSET _PMC_InitializeNumberFormatInfo@4

; 126  :         entry_points.ToString = PMC_ToString;

	mov	DWORD PTR _entry_points+48, OFFSET _PMC_ToString@20

; 127  :         entry_points.TryParse = PMC_TryParse;

	mov	DWORD PTR _entry_points+52, OFFSET _PMC_TryParse@16

; 128  :         entry_points.Add_I_X = PMC_Add_I_X;

	mov	DWORD PTR _entry_points+56, OFFSET _PMC_Add_I_X@12

; 129  :         entry_points.Add_L_X = PMC_Add_L_X;

	mov	DWORD PTR _entry_points+60, OFFSET _PMC_Add_L_X@16

; 130  :         entry_points.Add_X_I = PMC_Add_X_I;

	mov	DWORD PTR _entry_points+64, OFFSET _PMC_Add_X_I@12

; 131  :         entry_points.Add_X_L = PMC_Add_X_L;

	mov	DWORD PTR _entry_points+68, OFFSET _PMC_Add_X_L@16

; 132  :         entry_points.Add_X_X = PMC_Add_X_X;

	mov	DWORD PTR _entry_points+72, OFFSET _PMC_Add_X_X@12

; 133  :         entry_points.Subtruct_I_X = PMC_Subtruct_I_X;

	mov	DWORD PTR _entry_points+76, OFFSET _PMC_Subtruct_I_X@12

; 134  :         entry_points.Subtruct_L_X = PMC_Subtruct_L_X;

	mov	DWORD PTR _entry_points+80, OFFSET _PMC_Subtruct_L_X@16

; 135  :         entry_points.Subtruct_X_I = PMC_Subtruct_X_I;

	mov	DWORD PTR _entry_points+84, OFFSET _PMC_Subtruct_X_I@12

; 136  :         entry_points.Subtruct_X_L = PMC_Subtruct_X_L;

	mov	DWORD PTR _entry_points+88, OFFSET _PMC_Subtruct_X_L@16

; 137  :         entry_points.Subtruct_X_X = PMC_Subtruct_X_X;

	mov	DWORD PTR _entry_points+92, OFFSET _PMC_Subtruct_X_X@12

; 138  :         entry_points.Multiply_I_X = PMC_Multiply_I_X;

	mov	DWORD PTR _entry_points+96, OFFSET _PMC_Multiply_I_X@12

; 139  :         entry_points.Multiply_L_X = PMC_Multiply_L_X;

	mov	DWORD PTR _entry_points+100, OFFSET _PMC_Multiply_L_X@16

; 140  :         entry_points.Multiply_X_I = PMC_Multiply_X_I;

	mov	DWORD PTR _entry_points+104, OFFSET _PMC_Multiply_X_I@12

; 141  :         entry_points.Multiply_X_L = PMC_Multiply_X_L;

	mov	DWORD PTR _entry_points+108, OFFSET _PMC_Multiply_X_L@16

; 142  :         entry_points.Multiply_X_X = PMC_Multiply_X_X;

	mov	DWORD PTR _entry_points+112, OFFSET _PMC_Multiply_X_X@12

; 143  :         entry_points.DivRem_I_X = PMC_DivRem_I_X;

	mov	DWORD PTR _entry_points+116, OFFSET _PMC_DivRem_I_X@16

; 144  :         entry_points.DivRem_L_X = PMC_DivRem_L_X;

	mov	DWORD PTR _entry_points+120, OFFSET _PMC_DivRem_L_X@20

; 145  :         entry_points.DivRem_X_I = PMC_DivRem_X_I;

	mov	DWORD PTR _entry_points+124, OFFSET _PMC_DivRem_X_I@16

; 146  :         entry_points.DivRem_X_L = PMC_DivRem_X_L;

	mov	DWORD PTR _entry_points+128, OFFSET _PMC_DivRem_X_L@20

; 147  :         entry_points.DivRem_X_X = PMC_DivRem_X_X;

	mov	DWORD PTR _entry_points+132, OFFSET _PMC_DivRem_X_X@16

; 148  :         entry_points.RightShift_X_I = PMC_RightShift_X_I;

	mov	DWORD PTR _entry_points+140, OFFSET _PMC_RightShift_X_I@12

; 149  :         entry_points.LeftShift_X_I = PMC_LeftShift_X_I;

	mov	DWORD PTR _entry_points+136, OFFSET _PMC_LeftShift_X_I@12

; 150  :         entry_points.BitwiseAnd_I_X = PMC_BitwiseAnd_I_X;

	mov	DWORD PTR _entry_points+144, OFFSET _PMC_BitwiseAnd_I_X@12

; 151  :         entry_points.BitwiseAnd_L_X = PMC_BitwiseAnd_L_X;

	mov	DWORD PTR _entry_points+148, OFFSET _PMC_BitwiseAnd_L_X@16

; 152  :         entry_points.BitwiseAnd_X_I = PMC_BitwiseAnd_X_I;

	mov	DWORD PTR _entry_points+152, OFFSET _PMC_BitwiseAnd_X_I@12

; 153  :         entry_points.BitwiseAnd_X_L = PMC_BitwiseAnd_X_L;

	mov	DWORD PTR _entry_points+156, OFFSET _PMC_BitwiseAnd_X_L@16

; 154  :         entry_points.BitwiseAnd_X_X = PMC_BitwiseAnd_X_X;

	mov	DWORD PTR _entry_points+160, OFFSET _PMC_BitwiseAnd_X_X@12

; 155  :         entry_points.BitwiseOr_I_X = PMC_BitwiseOr_I_X;

	mov	DWORD PTR _entry_points+164, OFFSET _PMC_BitwiseOr_I_X@12

; 156  :         entry_points.BitwiseOr_L_X = PMC_BitwiseOr_L_X;

	mov	DWORD PTR _entry_points+168, OFFSET _PMC_BitwiseOr_L_X@16

; 157  :         entry_points.BitwiseOr_X_I = PMC_BitwiseOr_X_I;

	mov	DWORD PTR _entry_points+172, OFFSET _PMC_BitwiseOr_X_I@12

; 158  :         entry_points.BitwiseOr_X_L = PMC_BitwiseOr_X_L;

	mov	DWORD PTR _entry_points+176, OFFSET _PMC_BitwiseOr_X_L@16

; 159  :         entry_points.BitwiseOr_X_X = PMC_BitwiseOr_X_X;

	mov	DWORD PTR _entry_points+180, OFFSET _PMC_BitwiseOr_X_X@12

; 160  :         entry_points.ExclusiveOr_I_X = PMC_ExclusiveOr_I_X;

	mov	DWORD PTR _entry_points+184, OFFSET _PMC_ExclusiveOr_I_X@12

; 161  :         entry_points.ExclusiveOr_L_X = PMC_ExclusiveOr_L_X;

	mov	DWORD PTR _entry_points+188, OFFSET _PMC_ExclusiveOr_L_X@16

; 162  :         entry_points.ExclusiveOr_X_I = PMC_ExclusiveOr_X_I;

	mov	DWORD PTR _entry_points+192, OFFSET _PMC_ExclusiveOr_X_I@12

; 163  :         entry_points.ExclusiveOr_X_L = PMC_ExclusiveOr_X_L;

	mov	DWORD PTR _entry_points+196, OFFSET _PMC_ExclusiveOr_X_L@16

; 164  :         entry_points.ExclusiveOr_X_X = PMC_ExclusiveOr_X_X;

	mov	DWORD PTR _entry_points+200, OFFSET _PMC_ExclusiveOr_X_X@12

; 165  :         entry_points.Compare_I_X = PMC_Compare_I_X;

	mov	DWORD PTR _entry_points+204, OFFSET _PMC_Compare_I_X@12

; 166  :         entry_points.Compare_L_X = PMC_Compare_L_X;

	mov	DWORD PTR _entry_points+208, OFFSET _PMC_Compare_L_X@16

; 167  :         entry_points.Compare_X_I = PMC_Compare_X_I;

	mov	DWORD PTR _entry_points+212, OFFSET _PMC_Compare_X_I@12

; 168  :         entry_points.Compare_X_L = PMC_Compare_X_L;

	mov	DWORD PTR _entry_points+216, OFFSET _PMC_Compare_X_L@16

; 169  :         entry_points.Compare_X_X = PMC_Compare_X_X;

	mov	DWORD PTR _entry_points+220, OFFSET _PMC_Compare_X_X@12

; 170  :         entry_points.Equals_I_X = PMC_Equals_I_X;

	mov	DWORD PTR _entry_points+224, OFFSET _PMC_Equals_I_X@12

; 171  :         entry_points.Equals_L_X = PMC_Equals_L_X;

	mov	DWORD PTR _entry_points+228, OFFSET _PMC_Equals_L_X@16

; 172  :         entry_points.Equals_X_I = PMC_Equals_X_I;

	mov	DWORD PTR _entry_points+232, OFFSET _PMC_Equals_X_I@12

; 173  :         entry_points.Equals_X_L = PMC_Equals_X_L;

	mov	DWORD PTR _entry_points+236, OFFSET _PMC_Equals_X_L@16

; 174  :         entry_points.Equals_X_X = PMC_Equals_X_X;

	mov	DWORD PTR _entry_points+240, OFFSET _PMC_Equals_X_X@12

; 175  :         entry_points.GreatestCommonDivisor_I_X = PMC_GreatestCommonDivisor_I_X;

	mov	DWORD PTR _entry_points+244, OFFSET _PMC_GreatestCommonDivisor_I_X@12

; 176  :         entry_points.GreatestCommonDivisor_L_X = PMC_GreatestCommonDivisor_L_X;

	mov	DWORD PTR _entry_points+248, OFFSET _PMC_GreatestCommonDivisor_L_X@16

; 177  :         entry_points.GreatestCommonDivisor_X_I = PMC_GreatestCommonDivisor_X_I;

	mov	DWORD PTR _entry_points+252, OFFSET _PMC_GreatestCommonDivisor_X_I@12

; 178  :         entry_points.GreatestCommonDivisor_X_L = PMC_GreatestCommonDivisor_X_L;

	mov	DWORD PTR _entry_points+256, OFFSET _PMC_GreatestCommonDivisor_X_L@16

; 179  :         entry_points.GreatestCommonDivisor_X_X = PMC_GreatestCommonDivisor_X_X;

	mov	DWORD PTR _entry_points+260, OFFSET _PMC_GreatestCommonDivisor_X_X@12

; 180  :         entry_points.Pow_X_I = PMC_Pow_X_I;

	mov	DWORD PTR _entry_points+264, OFFSET _PMC_Pow_X_I@12

; 181  :         entry_points.ModPow_X_X_X = PMC_ModPow_X_X_X;

	mov	DWORD PTR _entry_points+268, OFFSET _PMC_ModPow_X_X_X@16

; 182  :         entry_points.GetConstantValue_I = PMC_GetConstantValue_I;

	mov	DWORD PTR _entry_points+20, OFFSET _PMC_GetConstantValue_I@8

; 183  :         entry_points.Clone_X = PMC_Clone_X;

	mov	DWORD PTR _entry_points+32, OFFSET _PMC_Clone_X@8

; 184  : 
; 185  :         entry_points.FromByteArrayForSINT = PMC_FromByteArrayForSINT;

	mov	DWORD PTR _entry_points+272, OFFSET _PMC_FromByteArrayForSINT@16

; 186  :         entry_points.ToByteArrayForSINT = PMC_ToByteArrayForSINT;

	mov	DWORD PTR _entry_points+276, OFFSET _PMC_ToByteArrayForSINT@20

; 187  :         entry_points.TryParseForSINT = PMC_TryParseForSINT;

	mov	DWORD PTR _entry_points+280, OFFSET _PMC_TryParseForSINT@20

; 188  : 
; 189  :         initialized = 1;

	mov	BYTE PTR _initialized, 1
$LN2@PMC_UINT_I:

; 190  :     }
; 191  : 
; 192  :     return (&entry_points);

	mov	eax, OFFSET _entry_points

; 193  : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN38@PMC_UINT_I:

; 110  :             return (NULL);

	xor	eax, eax

; 193  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_PMC_UINT_Initialize@4 ENDP
_TEXT	ENDS
END
