; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_divrem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_DivRem_X_1W
PUBLIC	_DivRem_X_X
PUBLIC	_Initialize_DivRem
PUBLIC	_PMC_DivRem_I_X@16
PUBLIC	_PMC_DivRem_L_X@20
PUBLIC	_PMC_DivRem_X_I@16
PUBLIC	_PMC_DivRem_X_L@20
PUBLIC	_PMC_DivRem_X_X@16
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_RightShift_Imp_DIV:PROC
EXTRN	_LeftShift_Imp_DIV:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aulldvrm:PROC
EXTRN	__aullrem:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_fp_DivRem_X_X DD 01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DivRem_X_X_using_ADX_MULX
_TEXT	SEGMENT
tv647 = -40						; size = 4
_lh_mi$1$ = -36						; size = 4
_value$1$ = -36						; size = 4
_lh_mi$1$ = -32						; size = 4
_value$1$ = -32						; size = 4
_rh_mi$1$ = -28						; size = 4
tv646 = -24						; size = 4
$T1 = -20						; size = 4
tv643 = -16						; size = 4
_rh_mi$1$ = -12						; size = 4
_v1$1$ = -8						; size = 4
_v2$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_rh_hi$1$ = 16						; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X_using_ADX_MULX PROC				; COMDAT

; 965  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	ebx

; 966  :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 967  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 968  :     {
; 969  :         while (u_buf[u_buf_len - 1] == 0)
; 970  :             --u_buf_len;
; 971  :         while (v_buf[v_buf_len - 1] == 0)
; 972  :             --v_buf_len;
; 973  :     }
; 974  : 
; 975  : #ifdef _DEBUG
; 976  :     if (v_buf[v_buf_len - 1] == 0)
; 977  :     {
; 978  :         ; // このルートには到達しないはず。デバッグ用。
; 979  :     }
; 980  : #endif
; 981  : 
; 982  : #ifdef DO_TRACE
; 983  :     ReportLabel("uとvのシフト");
; 984  :     ReportDump("u", (__UNIT_TYPE*)u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 985  :     ReportDump("v", (__UNIT_TYPE*)v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 986  : #endif
; 987  : 
; 988  :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	ebx, DWORD PTR _v_buf_len$[ebp]
	push	esi
	mov	esi, DWORD PTR _v_buf$[ebp]
	push	edi
	mov	eax, DWORD PTR [esi+ebx*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 653  :         if (x == 0)

	test	eax, eax
	jne	SHORT $LN18@DivRem_X_X

; 654  :             return (sizeof(x) * 8);

	mov	edi, 32					; 00000020H
	mov	DWORD PTR $T1[ebp], edi
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 997  :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	push	0
	push	DWORD PTR _r_buf$[ebp]
	push	edi
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _u_buf$[ebp]
	call	_LeftShift_Imp_DIV

; 998  :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	push	0
	push	DWORD PTR _work_v_buf$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_LeftShift_Imp_DIV
	mov	eax, DWORD PTR _r_buf$[ebp]
	add	esp, 40					; 00000028H
	mov	edx, DWORD PTR _u_buf_len$[ebp]
$LN11@DivRem_X_X:

; 999  :     }
; 1000 : #ifdef DO_TRACE
; 1001 :     ReportDump("⇒u", (__UNIT_TYPE*)r_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1002 :     ReportDump("⇒v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1003 : #endif
; 1004 : 
; 1005 :     __UNIT_TYPE_DIV* work_u_buf = r_buf;
; 1006 :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	lea	esi, DWORD PTR [ebx-1]
	mov	edi, edx
	sub	edi, ebx
	lea	esi, DWORD PTR [ecx+esi*4]
	lea	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR tv647[ebp], esi
	add	ecx, -8					; fffffff8H
	lea	ebx, DWORD PTR [edx-2]
	mov	DWORD PTR tv646[ebp], ecx
	lea	ebx, DWORD PTR [eax+ebx*4]
$LL6@DivRem_X_X:

; 363  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+8]

; 364  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	esi, DWORD PTR [esi]
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv643[ebp], ecx

; 365  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	ecx, DWORD PTR tv646[ebp]
	mov	DWORD PTR _rh_hi$1$[ebp], eax
	mov	DWORD PTR _rh_mi$1$[ebp], edx
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _v2$1$[ebp], ecx

; 243  :     if (uj == v1)

	cmp	eax, esi
	jne	SHORT $LN29@DivRem_X_X

; 244  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN28@DivRem_X_X
$LN18@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 658  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 659  : #elif defined(__GNUC__)
; 660  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 661  : #else
; 662  : #error unknown compiler
; 663  : #endif
; 664  : #elif defined(_M_X64)
; 665  : #ifdef _MSC_VER
; 666  :         _UINT32_T pos;
; 667  :         _BitScanReverse(&pos, x);
; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	edi, 31					; 0000001fH
	sub	edi, eax
	mov	DWORD PTR $T1[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 989  :     if (d_factor == 0)

	jne	SHORT $LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR _r_buf$[ebp]
	mov	edi, eax
	mov	edx, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, edx
	mov	esi, DWORD PTR _u_buf$[ebp]
	rep movsd
	mov	edi, DWORD PTR _work_v_buf$[ebp]
	mov	ecx, ebx
	mov	esi, DWORD PTR _v_buf$[ebp]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 993  :         r_buf[u_buf_len] = 0;

	mov	DWORD PTR [eax+edx*4], 0

; 994  :     }

	jmp	SHORT $LN11@DivRem_X_X
$LN29@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, edx

; 385  :             return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
	mov	ecx, DWORD PTR _v2$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 253  :     return (q);

	mov	esi, eax
$LN28@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	ecx

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _rh_mi$1$[ebp]

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, DWORD PTR _rh_hi$1$[ebp]
	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 310  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN102@DivRem_X_X

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);
; 316  :     }
; 317  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN25@DivRem_X_X

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);
; 323  :     }
; 324  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN102@DivRem_X_X

; 374  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv643[ebp]
	jbe	SHORT $LN102@DivRem_X_X
$LN25@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _rh_mi$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 376  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	DWORD PTR _rh_hi$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 310  :     if (rh_hi > 0)

	cmp	DWORD PTR _rh_hi$1$[ebp], 0
	ja	SHORT $LN102@DivRem_X_X

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);
; 316  :     }
; 317  :     else if (lh_mi > rh_mi)

	cmp	DWORD PTR _lh_mi$1$[ebp], ecx
	ja	SHORT $LN26@DivRem_X_X

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);
; 323  :     }
; 324  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN102@DivRem_X_X

; 377  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv643[ebp]
	jbe	SHORT $LN102@DivRem_X_X
$LN26@DivRem_X_X:

; 378  :         return (q_);
; 379  :     --q_;

	dec	esi
$LN102@DivRem_X_X:

; 1007 : 
; 1008 :     for (;;)
; 1009 :     {
; 1010 :         __UNIT_TYPE_DIV q_ = CalculateQ_X(work_u_buf, work_v_buf, v_buf_len, q_index);
; 1011 : 
; 1012 : #ifdef DO_TRACE
; 1013 :         ReportLabel("uの減算");
; 1014 :         ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1015 :         ReportDump("v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1016 :         ReportVar("q_", q_);
; 1017 : #endif
; 1018 :         if (SubtructOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	push	esi
	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _r_buf$[ebp]
	call	_SubtructOneLineX
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN12@DivRem_X_X

; 1019 :         {
; 1020 : #ifdef DO_TRACE
; 1021 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1022 : #endif
; 1023 :             // 桁借りが発生した場合
; 1024 : 
; 1025 : #ifdef DO_TRACE
; 1026 :             ReportLabel("uの加え戻しとq_の更新");
; 1027 :             ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1028 : #endif
; 1029 :             --q_;
; 1030 :             AddOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	dec	esi
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _r_buf$[ebp]
	call	_AddOneLineX
	add	esp, 20					; 00000014H
$LN12@DivRem_X_X:

; 1031 : #ifdef DO_TRACE
; 1032 :             ReportVar("q_", q_);
; 1033 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1034 : #endif
; 1035 :         }
; 1036 :         else
; 1037 :         {
; 1038 : #ifdef DO_TRACE
; 1039 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1040 : #endif
; 1041 :         }
; 1042 : 
; 1043 :         q_buf[q_index] = q_;

	mov	eax, DWORD PTR _q_buf$[ebp]
	mov	DWORD PTR [eax+edi*4], esi

; 1044 : 
; 1045 : #ifdef DO_TRACE
; 1046 :         ReportLabel("qの現在値");
; 1047 :         ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1048 : #endif
; 1049 : 
; 1050 :         if (q_index == 0)

	test	edi, edi
	je	SHORT $LN99@DivRem_X_X

; 1051 :             break;
; 1052 :         --q_index;
; 1053 :     }

	mov	esi, DWORD PTR tv647[ebp]
	dec	edi
	sub	ebx, 4
	jmp	$LL6@DivRem_X_X
$LN99@DivRem_X_X:

; 1054 : 
; 1055 :     if (d_factor > 0)

	mov	eax, DWORD PTR $T1[ebp]
	pop	edi
	pop	esi
	pop	ebx
	test	eax, eax
	je	SHORT $LN15@DivRem_X_X

; 1056 :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	mov	ecx, DWORD PTR _r_buf$[ebp]
	push	0
	push	ecx
	push	eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
	inc	eax
	push	eax
	push	ecx
	call	_RightShift_Imp_DIV
	add	esp, 20					; 00000014H
$LN15@DivRem_X_X:

; 1057 : 
; 1058 : #ifdef DO_TRACE
; 1059 :     ReportLabel("計算終了");
; 1060 :     ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1061 :     ReportDump("r", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1062 : #endif
; 1063 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_X_using_ADX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DivRem_X_X_using_ADC_MUL
_TEXT	SEGMENT
tv647 = -40						; size = 4
_lh_mi$1$ = -36						; size = 4
_value$1$ = -36						; size = 4
_lh_mi$1$ = -32						; size = 4
_value$1$ = -32						; size = 4
_rh_mi$1$ = -28						; size = 4
tv646 = -24						; size = 4
$T1 = -20						; size = 4
tv643 = -16						; size = 4
_rh_mi$1$ = -12						; size = 4
_v1$1$ = -8						; size = 4
_v2$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_rh_hi$1$ = 16						; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X_using_ADC_MUL PROC				; COMDAT

; 909  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	ebx

; 910  :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 911  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 912  :     {
; 913  :         while (u_buf[u_buf_len - 1] == 0)
; 914  :             --u_buf_len;
; 915  :         while (v_buf[v_buf_len - 1] == 0)
; 916  :             --v_buf_len;
; 917  :     }
; 918  : 
; 919  : #ifdef _DEBUG
; 920  :     if (v_buf[v_buf_len - 1] == 0)
; 921  :     {
; 922  :         ; // このルートには到達しないはず。デバッグ用。
; 923  :     }
; 924  : #endif
; 925  : 
; 926  :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	ebx, DWORD PTR _v_buf_len$[ebp]
	push	esi
	mov	esi, DWORD PTR _v_buf$[ebp]
	push	edi
	mov	eax, DWORD PTR [esi+ebx*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 653  :         if (x == 0)

	test	eax, eax
	jne	SHORT $LN17@DivRem_X_X

; 654  :             return (sizeof(x) * 8);

	mov	edi, 32					; 00000020H
	mov	DWORD PTR $T1[ebp], edi
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 935  :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	push	0
	push	DWORD PTR _r_buf$[ebp]
	push	edi
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _u_buf$[ebp]
	call	_LeftShift_Imp_DIV

; 936  :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	push	0
	push	DWORD PTR _work_v_buf$[ebp]
	push	edi
	push	ebx
	push	esi
	call	_LeftShift_Imp_DIV
	mov	eax, DWORD PTR _r_buf$[ebp]
	add	esp, 40					; 00000028H
	mov	edx, DWORD PTR _u_buf_len$[ebp]
$LN11@DivRem_X_X:

; 937  :     }
; 938  : 
; 939  :     __UNIT_TYPE_DIV* work_u_buf = r_buf;
; 940  :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	lea	esi, DWORD PTR [ebx-1]
	mov	edi, edx
	sub	edi, ebx
	lea	esi, DWORD PTR [ecx+esi*4]
	lea	ecx, DWORD PTR [ecx+ebx*4]
	mov	DWORD PTR tv647[ebp], esi
	add	ecx, -8					; fffffff8H
	lea	ebx, DWORD PTR [edx-2]
	mov	DWORD PTR tv646[ebp], ecx
	lea	ebx, DWORD PTR [eax+ebx*4]
$LL6@DivRem_X_X:

; 345  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx+8]

; 346  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	esi, DWORD PTR [esi]
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv643[ebp], ecx

; 347  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	ecx, DWORD PTR tv646[ebp]
	mov	DWORD PTR _rh_hi$1$[ebp], eax
	mov	DWORD PTR _rh_mi$1$[ebp], edx
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _v2$1$[ebp], ecx

; 243  :     if (uj == v1)

	cmp	eax, esi
	jne	SHORT $LN28@DivRem_X_X

; 244  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN27@DivRem_X_X
$LN17@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 658  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 659  : #elif defined(__GNUC__)
; 660  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 661  : #else
; 662  : #error unknown compiler
; 663  : #endif
; 664  : #elif defined(_M_X64)
; 665  : #ifdef _MSC_VER
; 666  :         _UINT32_T pos;
; 667  :         _BitScanReverse(&pos, x);
; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	edi, 31					; 0000001fH
	sub	edi, eax
	mov	DWORD PTR $T1[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 927  :     if (d_factor == 0)

	jne	SHORT $LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR _r_buf$[ebp]
	mov	edi, eax
	mov	edx, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, edx
	mov	esi, DWORD PTR _u_buf$[ebp]
	rep movsd
	mov	edi, DWORD PTR _work_v_buf$[ebp]
	mov	ecx, ebx
	mov	esi, DWORD PTR _v_buf$[ebp]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 931  :         r_buf[u_buf_len] = 0;

	mov	DWORD PTR [eax+edx*4], 0

; 932  :     }

	jmp	SHORT $LN11@DivRem_X_X
$LN28@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, edx

; 385  :             return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
	mov	ecx, DWORD PTR _v2$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 253  :     return (q);

	mov	esi, eax
$LN27@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	ecx

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _rh_mi$1$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, DWORD PTR _rh_hi$1$[ebp]
	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 273  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN101@DivRem_X_X

; 274  :         return (FALSE);
; 275  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN24@DivRem_X_X

; 276  :         return (TRUE);
; 277  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN101@DivRem_X_X

; 349  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv643[ebp]
	jbe	SHORT $LN101@DivRem_X_X
$LN24@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _rh_mi$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 351  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	DWORD PTR _rh_hi$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 273  :     if (rh_hi > 0)

	cmp	DWORD PTR _rh_hi$1$[ebp], 0
	ja	SHORT $LN101@DivRem_X_X

; 274  :         return (FALSE);
; 275  :     else if (lh_mi > rh_mi)

	cmp	DWORD PTR _lh_mi$1$[ebp], ecx
	ja	SHORT $LN25@DivRem_X_X

; 276  :         return (TRUE);
; 277  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN101@DivRem_X_X

; 352  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv643[ebp]
	jbe	SHORT $LN101@DivRem_X_X
$LN25@DivRem_X_X:

; 353  :         return (q_);
; 354  :     --q_;

	dec	esi
$LN101@DivRem_X_X:

; 941  : 
; 942  :     for (;;)
; 943  :     {
; 944  :         __UNIT_TYPE_DIV q_ = CalculateQ_(work_u_buf, work_v_buf, v_buf_len, q_index);
; 945  : 
; 946  : 
; 947  :         if (SubtructOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	push	esi
	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _r_buf$[ebp]
	call	_SubtructOneLine
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN12@DivRem_X_X

; 948  :         {
; 949  :             // 桁借りが発生した場合
; 950  :             --q_;
; 951  :             AddOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	dec	esi
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _r_buf$[ebp]
	call	_AddOneLine
	add	esp, 20					; 00000014H
$LN12@DivRem_X_X:

; 952  :         }
; 953  : 
; 954  :         q_buf[q_index] = q_;

	mov	eax, DWORD PTR _q_buf$[ebp]
	mov	DWORD PTR [eax+edi*4], esi

; 955  :         if (q_index == 0)

	test	edi, edi
	je	SHORT $LN98@DivRem_X_X

; 956  :             break;
; 957  :         --q_index;
; 958  :     }

	mov	esi, DWORD PTR tv647[ebp]
	dec	edi
	sub	ebx, 4
	jmp	$LL6@DivRem_X_X
$LN98@DivRem_X_X:

; 959  : 
; 960  :     if (d_factor > 0)

	mov	eax, DWORD PTR $T1[ebp]
	pop	edi
	pop	esi
	pop	ebx
	test	eax, eax
	je	SHORT $LN14@DivRem_X_X

; 961  :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	mov	ecx, DWORD PTR _r_buf$[ebp]
	push	0
	push	ecx
	push	eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
	inc	eax
	push	eax
	push	ecx
	call	_RightShift_Imp_DIV
	add	esp, 20					; 00000014H
$LN14@DivRem_X_X:

; 962  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_X_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _AddOneLineX
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_c$ = 24						; size = 1
_q_index$ = 24						; size = 4
_AddOneLineX PROC					; COMDAT

; 843  : {

	push	ebp
	mov	ebp, esp

; 844  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]

; 845  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 846  :     __UNIT_TYPE v_count = v_buf_len;
; 847  :     char c = 0;

	xor	dl, dl
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx

; 848  : 
; 849  :     // まず 32 ワードずつ加算をする。
; 850  :     __UNIT_TYPE count = v_count >> 5;

	mov	ebx, DWORD PTR _v_buf_len$[ebp]
	push	esi
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR _c$[ebp], dl
	mov	ecx, ebx
	shr	ecx, 5
	push	edi
	mov	edi, DWORD PTR _v_buf$[ebp]

; 851  :     while (count != 0)

	test	ecx, ecx
	je	$LN3@AddOneLine
	npad	9
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1308 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1309 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1310 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1311 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+32]
	mov	DWORD PTR [esi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [esi+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+36]
	mov	DWORD PTR [esi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [esi+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+40]
	mov	DWORD PTR [esi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [esi+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+44]
	mov	DWORD PTR [esi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [esi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+48]
	mov	DWORD PTR [esi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [esi+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+52]
	mov	DWORD PTR [esi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [esi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+56]
	mov	DWORD PTR [esi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [esi+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+60]
	mov	DWORD PTR [esi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [esi+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+64]
	mov	DWORD PTR [esi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [esi+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+68]
	mov	DWORD PTR [esi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [esi+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+72]
	mov	DWORD PTR [esi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [esi+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+76]
	mov	DWORD PTR [esi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [esi+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+80]
	mov	DWORD PTR [esi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [esi+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+84]
	mov	DWORD PTR [esi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [esi+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [esi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [esi+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+92]
	mov	DWORD PTR [esi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [esi+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+96]
	mov	DWORD PTR [esi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [esi+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+100]
	mov	DWORD PTR [esi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [esi+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+104]
	mov	DWORD PTR [esi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [esi+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+108]
	mov	DWORD PTR [esi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [esi+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+112]
	mov	DWORD PTR [esi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [esi+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+116]
	mov	DWORD PTR [esi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [esi+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+120]
	mov	DWORD PTR [esi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	eax, DWORD PTR [esi+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+124]
	mov	DWORD PTR [esi+124], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 854  :         u_ptr += 32;

	sub	esi, -128				; ffffff80H

; 855  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H
	mov	BYTE PTR _c$[ebp], dl

; 856  :         --count;

	sub	ecx, 1
	jne	$LL2@AddOneLine
$LN3@AddOneLine:

; 857  :     }
; 858  :     // この時点で未処理の桁は 32 ワード未満のはず
; 859  : 
; 860  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 861  :     if (v_count & 0x10)

	test	bl, 16					; 00000010H
	je	SHORT $LN4@AddOneLine

; 862  :     {
; 863  :         c = _ADD_16WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	push	esi
	push	edi
	push	esi
	push	DWORD PTR _c$[ebp]
	call	__ADD_16WORDS_ADCX_DIV
	add	esp, 16					; 00000010H

; 864  :         u_ptr += 16;

	add	esi, 64					; 00000040H
	mov	dl, al

; 865  :         v_ptr += 16;

	add	edi, 64					; 00000040H
$LN4@AddOneLine:

; 866  :     }
; 867  :     // この時点で未処理の桁は 16 ワード未満のはず
; 868  : 
; 869  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 870  :     if (v_count & 0x8)

	test	bl, 8
	je	SHORT $LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	ecx, DWORD PTR [edi]
	mov	DWORD PTR [esi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3620 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3621 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3622 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3623 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 873  :         u_ptr += 8;

	add	esi, 32					; 00000020H

; 874  :         v_ptr += 8;

	add	edi, 32					; 00000020H
$LN5@AddOneLine:

; 875  :     }
; 876  :     // この時点で未処理の桁は 8 ワード未満のはず
; 877  : 
; 878  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 879  :     if (v_count & 0x4)

	test	bl, 4
	je	SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4160 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4161 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4162 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 882  :         u_ptr += 4;

	add	esi, 16					; 00000010H

; 883  :         v_ptr += 4;

	add	edi, 16					; 00000010H
$LN6@AddOneLine:

; 884  :     }
; 885  :     // この時点で未処理の桁は 4 ワード未満のはず
; 886  : 
; 887  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 888  :     if (v_count & 0x2)

	test	bl, 2
	je	SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4546 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 891  :         u_ptr += 2;

	add	esi, 8

; 892  :         v_ptr += 2;

	add	edi, 8
$LN7@AddOneLine:

; 893  :     }
; 894  :     // この時点で未処理の桁は 2 ワード未満のはず
; 895  : 
; 896  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 897  :     if (v_count & 0x1)

	test	bl, 1
	je	SHORT $LN8@AddOneLine

; 898  :     {
; 899  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 900  :         ++u_ptr;

	add	esi, 4
$LN8@AddOneLine:

; 901  :         ++v_ptr;
; 902  :     }
; 903  : 
; 904  :     // 残りの桁の繰り上がりを計算する。
; 905  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	sub	ecx, esi
	add	ecx, DWORD PTR _u_buf$[ebp]
	sar	ecx, 2

; 752  :         if (u_count <= 0)

	test	ecx, ecx
	je	SHORT $LN131@AddOneLine
	npad	4
$LL113@AddOneLine:

; 753  :         {
; 754  :             // u の最上位まで達してしまった場合
; 755  :             return;
; 756  :         }
; 757  :         else if (c)

	test	dl, dl
	je	SHORT $LN131@AddOneLine

; 758  :         {
; 759  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 760  : 
; 761  :             // 繰り上がりを継続する
; 762  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, 0
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 763  :             ++u_ptr;

	add	esi, 4

; 764  :             --u_count;

	sub	ecx, 1
	jne	SHORT $LL113@AddOneLine
$LN131@AddOneLine:
	pop	edi

; 906  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_AddOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _AddOneLine
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_c$ = 24						; size = 1
_q_index$ = 24						; size = 4
_AddOneLine PROC					; COMDAT

; 777  : {

	push	ebp
	mov	ebp, esp

; 778  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]

; 779  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 780  :     __UNIT_TYPE v_count = v_buf_len;
; 781  :     char c = 0;

	xor	dl, dl
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx

; 782  : 
; 783  :     // まず 32 ワードずつ加算をする。
; 784  :     __UNIT_TYPE count = v_count >> 5;

	mov	ebx, DWORD PTR _v_buf_len$[ebp]
	push	esi
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR _c$[ebp], dl
	mov	ecx, ebx
	shr	ecx, 5
	push	edi
	mov	edi, DWORD PTR _v_buf$[ebp]

; 785  :     while (count != 0)

	test	ecx, ecx
	je	$LN3@AddOneLine
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1055 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1056 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1057 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1058 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1059 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+32]
	mov	DWORD PTR [esi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [esi+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+36]
	mov	DWORD PTR [esi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [esi+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+40]
	mov	DWORD PTR [esi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [esi+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+44]
	mov	DWORD PTR [esi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [esi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+48]
	mov	DWORD PTR [esi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [esi+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+52]
	mov	DWORD PTR [esi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [esi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+56]
	mov	DWORD PTR [esi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [esi+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+60]
	mov	DWORD PTR [esi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [esi+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+64]
	mov	DWORD PTR [esi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1071 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [esi+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+68]
	mov	DWORD PTR [esi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1072 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [esi+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+72]
	mov	DWORD PTR [esi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1073 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [esi+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+76]
	mov	DWORD PTR [esi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1074 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [esi+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+80]
	mov	DWORD PTR [esi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1075 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [esi+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+84]
	mov	DWORD PTR [esi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1076 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [esi+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [esi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1077 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [esi+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+92]
	mov	DWORD PTR [esi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1078 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [esi+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+96]
	mov	DWORD PTR [esi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1079 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [esi+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+100]
	mov	DWORD PTR [esi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1080 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [esi+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+104]
	mov	DWORD PTR [esi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1081 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [esi+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+108]
	mov	DWORD PTR [esi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1082 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [esi+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+112]
	mov	DWORD PTR [esi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1083 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [esi+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+116]
	mov	DWORD PTR [esi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1084 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [esi+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+120]
	mov	DWORD PTR [esi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1085 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	eax, DWORD PTR [esi+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+124]
	mov	DWORD PTR [esi+124], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 788  :         u_ptr += 32;

	sub	esi, -128				; ffffff80H

; 789  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H
	mov	BYTE PTR _c$[ebp], dl

; 790  :         --count;

	sub	ecx, 1
	jne	$LL2@AddOneLine
$LN3@AddOneLine:

; 791  :     }
; 792  :     // この時点で未処理の桁は 32 ワード未満のはず
; 793  : 
; 794  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 795  :     if (v_count & 0x10)

	test	bl, 16					; 00000010H
	je	SHORT $LN4@AddOneLine

; 796  :     {
; 797  :         c = _ADD_16WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	push	esi
	push	edi
	push	esi
	push	DWORD PTR _c$[ebp]
	call	__ADD_16WORDS_ADC_DIV
	add	esp, 16					; 00000010H

; 798  :         u_ptr += 16;

	add	esi, 64					; 00000040H
	mov	dl, al

; 799  :         v_ptr += 16;

	add	edi, 64					; 00000040H
$LN4@AddOneLine:

; 800  :     }
; 801  :     // この時点で未処理の桁は 16 ワード未満のはず
; 802  : 
; 803  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 804  :     if (v_count & 0x8)

	test	bl, 8
	je	SHORT $LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	ecx, DWORD PTR [edi]
	mov	DWORD PTR [esi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3535 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3536 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3537 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3538 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3539 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3540 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3541 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 807  :         u_ptr += 8;

	add	esi, 32					; 00000020H

; 808  :         v_ptr += 8;

	add	edi, 32					; 00000020H
$LN5@AddOneLine:

; 809  :     }
; 810  :     // この時点で未処理の桁は 8 ワード未満のはず
; 811  : 
; 812  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 813  :     if (v_count & 0x4)

	test	bl, 4
	je	SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4103 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4104 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4105 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 816  :         u_ptr += 4;

	add	esi, 16					; 00000010H

; 817  :         v_ptr += 4;

	add	edi, 16					; 00000010H
$LN6@AddOneLine:

; 818  :     }
; 819  :     // この時点で未処理の桁は 4 ワード未満のはず
; 820  : 
; 821  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 822  :     if (v_count & 0x2)

	test	bl, 2
	je	SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4503 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 825  :         u_ptr += 2;

	add	esi, 8

; 826  :         v_ptr += 2;

	add	edi, 8
$LN7@AddOneLine:

; 827  :     }
; 828  :     // この時点で未処理の桁は 2 ワード未満のはず
; 829  : 
; 830  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 831  :     if (v_count & 0x1)

	test	bl, 1
	je	SHORT $LN8@AddOneLine

; 832  :     {
; 833  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 834  :         ++u_ptr;

	add	esi, 4
$LN8@AddOneLine:

; 835  :         ++v_ptr;
; 836  :     }
; 837  : 
; 838  :     // 残りの桁の繰り上がりを計算する。
; 839  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	sub	ecx, esi
	add	ecx, DWORD PTR _u_buf$[ebp]
	sar	ecx, 2

; 752  :         if (u_count <= 0)

	test	ecx, ecx
	je	SHORT $LN131@AddOneLine
	npad	7
$LL113@AddOneLine:

; 753  :         {
; 754  :             // u の最上位まで達してしまった場合
; 755  :             return;
; 756  :         }
; 757  :         else if (c)

	test	dl, dl
	je	SHORT $LN131@AddOneLine

; 758  :         {
; 759  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 760  : 
; 761  :             // 繰り上がりを継続する
; 762  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, 0
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 763  :             ++u_ptr;

	add	esi, 4

; 764  :             --u_count;

	sub	ecx, 1
	jne	SHORT $LL113@AddOneLine
$LN131@AddOneLine:
	pop	edi

; 840  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_AddOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DoCarry
_TEXT	SEGMENT
_c$ = 8							; size = 1
_u_ptr$ = 12						; size = 4
_u_count$ = 16						; size = 4
_DoCarry PROC						; COMDAT

; 748  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 749  :     // 繰り上がりを続く限り行う
; 750  :     for (;;)
; 751  :     {
; 752  :         if (u_count <= 0)

	mov	esi, DWORD PTR _u_count$[ebp]
	test	esi, esi
	je	SHORT $LN16@DoCarry
	mov	edx, DWORD PTR _u_ptr$[ebp]
	mov	al, BYTE PTR _c$[ebp]
$LL2@DoCarry:

; 753  :         {
; 754  :             // u の最上位まで達してしまった場合
; 755  :             return;
; 756  :         }
; 757  :         else if (c)

	test	al, al
	je	SHORT $LN16@DoCarry

; 758  :         {
; 759  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 760  : 
; 761  :             // 繰り上がりを継続する
; 762  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
	adc	ecx, 0
	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 763  :             ++u_ptr;

	add	edx, 4

; 764  :             --u_count;

	sub	esi, 1
	jne	SHORT $LL2@DoCarry
$LN16@DoCarry:
	pop	esi

; 765  :         }
; 766  :         else
; 767  :         {
; 768  :             // u の最上位に達しておらず、かつキャリーが立っていない場合
; 769  : 
; 770  :             // 繰り上がりを中断し、復帰する。
; 771  :             return;
; 772  :         }
; 773  :     }
; 774  : }

	pop	ebp
	ret	0
_DoCarry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _SubtructOneLineX
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_k$1$ = 24						; size = 4
_t_lo$1 = 24						; size = 4
_t_lo$2 = 24						; size = 4
_t_lo$3 = 24						; size = 4
_t_lo$4 = 24						; size = 4
_t_lo$5 = 24						; size = 4
_t_lo$6 = 24						; size = 4
_t_lo$7 = 24						; size = 4
_t_lo$8 = 24						; size = 4
_t_lo$9 = 24						; size = 4
_t_lo$10 = 24						; size = 4
_t_lo$11 = 24						; size = 4
_t_lo$12 = 24						; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
_SubtructOneLineX PROC					; COMDAT

; 597  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 598  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx
	push	esi

; 599  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 600  :     __UNIT_TYPE v_count = v_buf_len;
; 601  :     __UNIT_TYPE_DIV k = 0;
; 602  :     char c = 0;

	xor	bl, bl
	mov	DWORD PTR _k$1$[ebp], 0
	lea	ecx, DWORD PTR [ecx+eax*4]

; 603  : 
; 604  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	mov	edx, eax
	shr	edx, 5
	push	edi

; 605  :     while (count != 0)

	mov	edi, DWORD PTR _v_buf$[ebp]
	test	edx, edx
	mov	DWORD PTR _count$1$[ebp], edx
	mov	edx, DWORD PTR _q_$[ebp]
	je	$LN3@SubtructOn
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$12[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$11[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$10[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax
	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [edi+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+44], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+60]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+64]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+64], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+68]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+68], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+72], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+76]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+76], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+80]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+80], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+84]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+84], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+88]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+88], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+92]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+92], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+96]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+96], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+100]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+100], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+104]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+104], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+108]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+108], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+112]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+112], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+116]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+116], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+120]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+120], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+124]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	edx, 0
	adcx	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 641  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 640  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H

; 641  :         --count;

	dec	edx
	mov	DWORD PTR _v_buf$[ebp], edi
	sub	ecx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 605  :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _q_$[ebp]
	jne	$LL2@SubtructOn
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN3@SubtructOn:

; 642  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 643  :         if (sizeof(k) == sizeof(_UINT64_T))
; 644  :             AddToMULTI64Counter(32);
; 645  :         else
; 646  :             AddToMULTI32Counter(32);
; 647  : #endif
; 648  :     }
; 649  : 
; 650  :     if (v_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN604@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$9[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$8[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$7[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax
	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [edi+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+44], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+60]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	add	esi, DWORD PTR _t_hi$2$[ebp]
	adcx	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 669  :         v_ptr += 16;

	add	edi, 64					; 00000040H
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN604@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 678  :     if (v_count & 0x8)

	test	al, 8
	je	$LN824@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$6[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$5[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$4[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax
	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+28]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 689  :         v_ptr += 8;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 689  :         v_ptr += 8;

	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 678  :     if (v_count & 0x8)

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	jmp	SHORT $LN704@SubtructOn
$LN824@SubtructOn:
	mov	edx, DWORD PTR _k$1$[ebp]
$LN704@SubtructOn:

; 690  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 691  :         if (sizeof(k) == sizeof(_UINT64_T))
; 692  :             AddToMULTI64Counter(8);
; 693  :         else
; 694  :             AddToMULTI32Counter(8);
; 695  : #endif
; 696  :     }
; 697  : 
; 698  :     if (v_count & 0x4)

	test	al, 4
	je	$LN756@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$3[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$2[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 705  :         v_ptr += 4;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 705  :         v_ptr += 4;

	add	edi, 16					; 00000010H
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN756@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 714  :     if (v_count & 0x2)

	test	al, 2
	je	SHORT $LN784@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$1[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 719  :         v_ptr += 2;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, edx
	mov	DWORD PTR _k$1$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 718  :         u_ptr += 2;

	add	ecx, 8

; 719  :         v_ptr += 2;

	add	edi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [eax], edx
	mov	edx, DWORD PTR _k$1$[ebp]
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN784@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 728  :     if (v_count & 0x1)

	test	al, 1
	je	SHORT $LN800@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	add	esi, DWORD PTR _k$1$[ebp]
	adcx	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax
	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 731  :         u_ptr += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN800@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 741  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, edx
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 744  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	eax, DWORD PTR _u_buf_len$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 742  :     u_ptr += 1;

	add	ecx, 4

; 744  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	lea	esi, DWORD PTR [eax*4+4]
	sub	esi, ecx
	add	esi, DWORD PTR _u_buf$[ebp]
	sar	esi, 2

; 388  :         if (u_count <= 0)

	test	esi, esi
	je	SHORT $LN818@SubtructOn
$LL805@SubtructOn:

; 393  :             {
; 394  :                 // かつそれでも桁借りを行う必要がある場合
; 395  : 
; 396  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 397  :                 return (TRUE);
; 398  :             }
; 399  : 
; 400  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 401  : 
; 402  :             return (FALSE);
; 403  :         }
; 404  :         else if (c)

	test	dl, dl
	je	SHORT $LN811@SubtructOn

; 405  :         {
; 406  :             // u の最上位に達しておらず、かつボローが立っている場合
; 407  : 
; 408  :             // 桁借りを継続する
; 409  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	dl, 255					; 000000ffH
	sbb	eax, 0
	mov	DWORD PTR [ecx], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 410  :             ++up;

	add	ecx, 4

; 411  :             --u_count;

	sub	esi, 1
	jne	SHORT $LL805@SubtructOn
$LN818@SubtructOn:

; 389  :         {
; 390  :             // u の最上位まで達してしまった場合
; 391  : 
; 392  :             if (c)

	xor	eax, eax
	test	dl, dl
	pop	edi

; 745  : }

	pop	esi

; 392  :             if (c)

	setne	al

; 745  : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN811@SubtructOn:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SubtructOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _SubtructOneLine
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_k$1$ = 24						; size = 4
_t_lo$1 = 24						; size = 4
_t_lo$2 = 24						; size = 4
_t_lo$3 = 24						; size = 4
_t_lo$4 = 24						; size = 4
_t_lo$5 = 24						; size = 4
_t_lo$6 = 24						; size = 4
_t_lo$7 = 24						; size = 4
_t_lo$8 = 24						; size = 4
_t_lo$9 = 24						; size = 4
_t_lo$10 = 24						; size = 4
_t_lo$11 = 24						; size = 4
_t_lo$12 = 24						; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
_SubtructOneLine PROC					; COMDAT

; 446  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 447  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx
	push	esi

; 448  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 449  :     __UNIT_TYPE v_count = v_buf_len;
; 450  :     __UNIT_TYPE_DIV k = 0;
; 451  :     char c = 0;

	xor	bl, bl
	mov	DWORD PTR _k$1$[ebp], 0
	lea	ecx, DWORD PTR [ecx+eax*4]

; 452  : 
; 453  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	mov	edx, eax
	shr	edx, 5
	push	edi

; 454  :     while (count != 0)

	mov	edi, DWORD PTR _v_buf$[ebp]
	test	edx, edx
	mov	DWORD PTR _count$1$[ebp], edx
	mov	edx, DWORD PTR _q_$[ebp]
	je	$LN3@SubtructOn
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$12[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$11[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$10[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+24]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+44], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax
	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+60]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+64]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+64], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+68]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+68], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+72]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+72], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+76]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+76], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+80]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+80], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+84]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+84], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+88]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+88], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+92]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+92], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+96]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+96], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+100]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+100], eax
	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+104], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+108]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+108], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+112]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+112], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+116]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+116], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+120]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+120], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+124]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+124], eax
	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 488  :         u_ptr += 32;

	sub	ecx, -128				; ffffff80H

; 489  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H
	mov	DWORD PTR _v_buf$[ebp], edi

; 490  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 490  :         --count;

	dec	edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 490  :         --count;

	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 454  :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _q_$[ebp]
	jne	$LL2@SubtructOn
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN3@SubtructOn:

; 491  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 492  :         if (sizeof(k) == sizeof(_UINT64_T))
; 493  :             AddToMULTI64Counter(32);
; 494  :         else
; 495  :             AddToMULTI32Counter(32);
; 496  : #endif
; 497  :     }
; 498  : 
; 499  :     if (v_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN604@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$9[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$8[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$7[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+24]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+44], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax
	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+60]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	adc	edx, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 518  :         v_ptr += 16;

	add	edi, 64					; 00000040H
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN604@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 527  :     if (v_count & 0x8)

	test	al, 8
	je	$LN824@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$6[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$5[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$4[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+28]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 538  :         v_ptr += 8;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edx, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 538  :         v_ptr += 8;

	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 527  :     if (v_count & 0x8)

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	jmp	SHORT $LN704@SubtructOn
$LN824@SubtructOn:
	mov	edx, DWORD PTR _k$1$[ebp]
$LN704@SubtructOn:

; 539  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 540  :         if (sizeof(k) == sizeof(_UINT64_T))
; 541  :             AddToMULTI64Counter(8);
; 542  :         else
; 543  :             AddToMULTI32Counter(8);
; 544  : #endif
; 545  :     }
; 546  : 
; 547  :     if (v_count & 0x4)

	test	al, 4
	je	$LN756@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$3[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _t_lo$2[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 554  :         v_ptr += 4;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edx, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 554  :         v_ptr += 4;

	add	edi, 16					; 00000010H
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN756@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 563  :     if (v_count & 0x2)

	test	al, 2
	je	SHORT $LN784@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$1[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 568  :         v_ptr += 2;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 567  :         u_ptr += 2;

	add	ecx, 8

; 568  :         v_ptr += 2;

	add	edi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [eax], edx
	mov	edx, DWORD PTR _k$1$[ebp]
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN784@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 577  :     if (v_count & 0x1)

	test	al, 1
	je	SHORT $LN800@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	adc	edx, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax
	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 580  :         u_ptr += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN800@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 590  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, edx
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 593  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	eax, DWORD PTR _u_buf_len$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 591  :     u_ptr += 1;

	add	ecx, 4

; 593  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	lea	esi, DWORD PTR [eax*4+4]
	sub	esi, ecx
	add	esi, DWORD PTR _u_buf$[ebp]
	sar	esi, 2

; 388  :         if (u_count <= 0)

	test	esi, esi
	je	SHORT $LN818@SubtructOn
	npad	6
$LL805@SubtructOn:

; 393  :             {
; 394  :                 // かつそれでも桁借りを行う必要がある場合
; 395  : 
; 396  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 397  :                 return (TRUE);
; 398  :             }
; 399  : 
; 400  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 401  : 
; 402  :             return (FALSE);
; 403  :         }
; 404  :         else if (c)

	test	dl, dl
	je	SHORT $LN811@SubtructOn

; 405  :         {
; 406  :             // u の最上位に達しておらず、かつボローが立っている場合
; 407  : 
; 408  :             // 桁借りを継続する
; 409  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	dl, 255					; 000000ffH
	sbb	eax, 0
	mov	DWORD PTR [ecx], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 410  :             ++up;

	add	ecx, 4

; 411  :             --u_count;

	sub	esi, 1
	jne	SHORT $LL805@SubtructOn
$LN818@SubtructOn:

; 389  :         {
; 390  :             // u の最上位まで達してしまった場合
; 391  : 
; 392  :             if (c)

	xor	eax, eax
	test	dl, dl
	pop	edi

; 594  : }

	pop	esi

; 392  :             if (c)

	setne	al

; 594  : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN811@SubtructOn:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SubtructOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT __MULTIPLYX_DIGIT_UNIT_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
__MULTIPLYX_DIGIT_UNIT_DIV PROC				; COMDAT

; 435  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _vp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 435  : {

	push	ebx
	push	esi

; 436  :     __UNIT_TYPE_DIV t_hi;
; 437  :     __UNIT_TYPE_DIV t_lo;
; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);
; 439  :     _ADDX_UNIT_DIV(_ADDX_UNIT_DIV(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

	mov	esi, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 435  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, eax
	mov	ebx, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edi, DWORD PTR [esi]
	mov	eax, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	edx, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ebx, eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 442  :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 441  :     *k = t_hi;

	mov	DWORD PTR [esi], ebx

; 442  :     return (c);

	pop	esi
	pop	ebx

; 443  : }

	pop	ebp
	ret	0
__MULTIPLYX_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT __MULTIPLY_DIGIT_UNIT_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
__MULTIPLY_DIGIT_UNIT_DIV PROC				; COMDAT

; 424  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _vp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 424  : {

	push	ebx
	push	esi

; 425  :     __UNIT_TYPE_DIV t_hi;
; 426  :     __UNIT_TYPE_DIV t_lo;
; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);
; 428  :     _ADD_UNIT_DIV(_ADD_UNIT_DIV(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

	mov	esi, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 424  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, eax
	mov	ebx, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edi, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	edx, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	al, BYTE PTR _c$[ebp]

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ebx, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 431  :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 430  :     *k = t_hi;

	mov	DWORD PTR [esi], ebx

; 431  :     return (c);

	pop	esi
	pop	ebx

; 432  : }

	pop	ebp
	ret	0
__MULTIPLY_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DoBorrow
_TEXT	SEGMENT
_c$ = 8							; size = 1
_up$ = 12						; size = 4
_u_count$ = 16						; size = 4
_DoBorrow PROC						; COMDAT

; 384  : {

	push	ebp
	mov	ebp, esp

; 385  :     // 桁借りを続く限り行う
; 386  :     for (;;)
; 387  :     {
; 388  :         if (u_count <= 0)

	mov	al, BYTE PTR _c$[ebp]
	push	esi
	mov	esi, DWORD PTR _u_count$[ebp]
	test	esi, esi
	je	SHORT $LN14@DoBorrow
	mov	edx, DWORD PTR _up$[ebp]
$LL2@DoBorrow:

; 398  :             }
; 399  : 
; 400  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 401  : 
; 402  :             return (FALSE);
; 403  :         }
; 404  :         else if (c)

	test	al, al
	je	SHORT $LN8@DoBorrow

; 405  :         {
; 406  :             // u の最上位に達しておらず、かつボローが立っている場合
; 407  : 
; 408  :             // 桁借りを継続する
; 409  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, 255					; 000000ffH
	sbb	ecx, 0
	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 410  :             ++up;

	add	edx, 4

; 411  :             --u_count;

	sub	esi, 1
	jne	SHORT $LL2@DoBorrow
$LN14@DoBorrow:

; 389  :         {
; 390  :             // u の最上位まで達してしまった場合
; 391  : 
; 392  :             if (c)

	test	al, al
	je	SHORT $LN8@DoBorrow

; 393  :             {
; 394  :                 // かつそれでも桁借りを行う必要がある場合
; 395  : 
; 396  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 397  :                 return (TRUE);

	mov	eax, 1
	pop	esi

; 419  :         }
; 420  :     }
; 421  : }

	pop	ebp
	ret	0
$LN8@DoBorrow:

; 412  :         }
; 413  :         else
; 414  :         {
; 415  :             // u の最上位に達しておらず、かつボローが立っていない場合
; 416  : 
; 417  :             // 桁借りを中断し復帰する。
; 418  :             return (FALSE);

	xor	eax, eax
	pop	esi

; 419  :         }
; 420  :     }
; 421  : }

	pop	ebp
	ret	0
_DoBorrow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _CalculateQ_X
_TEXT	SEGMENT
_value$1$ = -8						; size = 4
_lh_mi$1$ = -4						; size = 4
tv328 = 8						; size = 4
_u_buf$ = 8						; size = 4
_rh_mi$1$ = 12						; size = 4
_v_buf$ = 12						; size = 4
_value$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf_len$ = 16					; size = 4
_v1$1$ = 20						; size = 4
_q_index$ = 20						; size = 4
_CalculateQ_X PROC					; COMDAT

; 359  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 360  :     __UNIT_TYPE u_index = q_index + v_buf_len;

	mov	edx, DWORD PTR _v_buf_len$[ebp]

; 361  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR _q_index$[ebp]
	add	ecx, edx
	push	ebx
	push	esi
	push	edi
	mov	ebx, DWORD PTR [eax+ecx*4]

; 362  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	edi, DWORD PTR [eax+ecx*4-4]

; 363  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR [eax+ecx*4-8]

; 364  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR tv328[ebp], ecx
	mov	esi, DWORD PTR [eax+edx*4-4]

; 365  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	eax, DWORD PTR [eax+edx*4-8]
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	DWORD PTR _v2$1$[ebp], eax

; 243  :     if (uj == v1)

	cmp	ebx, esi
	jne	SHORT $LN6@CalculateQ

; 244  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	mov	eax, ebx
	or	ecx, edi

; 385  :             return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 253  :     return (q);

	mov	esi, eax
$LN5@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, edi

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, ebx
	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 310  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN74@CalculateQ

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);
; 316  :     }
; 317  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN2@CalculateQ

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);
; 323  :     }
; 324  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 366  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);
; 367  : #ifdef DO_TRACE
; 368  :     ReportLabel("q_ の計算");
; 369  :     ReportVar("uj", uj);
; 370  :     ReportVar("uj1", uj_1);
; 371  :     ReportVar("v1", v1);
; 372  :     ReportVar("q_", q_);
; 373  : #endif
; 374  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN2@CalculateQ:

; 375  :         return (q_);
; 376  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	ecx, edx
	mov	eax, esi
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ebx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 310  :     if (rh_hi > 0)

	test	ebx, ebx
	jne	SHORT $LN74@CalculateQ

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);
; 316  :     }
; 317  :     else if (lh_mi > rh_mi)

	cmp	ecx, edi
	ja	SHORT $LN3@CalculateQ

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);
; 323  :     }
; 324  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 377  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN3@CalculateQ:
	pop	edi

; 378  :         return (q_);
; 379  :     --q_;

	lea	eax, DWORD PTR [esi-1]

; 380  :     return (q_);
; 381  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN74@CalculateQ:
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _CalculateQ_
_TEXT	SEGMENT
_value$1$ = -8						; size = 4
_lh_mi$1$ = -4						; size = 4
tv328 = 8						; size = 4
_u_buf$ = 8						; size = 4
_rh_mi$1$ = 12						; size = 4
_v_buf$ = 12						; size = 4
_value$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf_len$ = 16					; size = 4
_v1$1$ = 20						; size = 4
_q_index$ = 20						; size = 4
_CalculateQ_ PROC					; COMDAT

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 342  :     __UNIT_TYPE u_index = q_index + v_buf_len;

	mov	edx, DWORD PTR _v_buf_len$[ebp]

; 343  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR _q_index$[ebp]
	add	ecx, edx
	push	ebx
	push	esi
	push	edi
	mov	ebx, DWORD PTR [eax+ecx*4]

; 344  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	edi, DWORD PTR [eax+ecx*4-4]

; 345  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR [eax+ecx*4-8]

; 346  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR tv328[ebp], ecx
	mov	esi, DWORD PTR [eax+edx*4-4]

; 347  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	eax, DWORD PTR [eax+edx*4-8]
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	DWORD PTR _v2$1$[ebp], eax

; 243  :     if (uj == v1)

	cmp	ebx, esi
	jne	SHORT $LN6@CalculateQ

; 244  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	mov	eax, ebx
	or	ecx, edi

; 385  :             return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 253  :     return (q);

	mov	esi, eax
$LN5@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, edi

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, ebx
	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 273  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN74@CalculateQ

; 274  :         return (FALSE);
; 275  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN2@CalculateQ

; 276  :         return (TRUE);
; 277  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 348  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);
; 349  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN2@CalculateQ:

; 350  :         return (q_);
; 351  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	ecx, edx
	mov	eax, esi
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ebx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 273  :     if (rh_hi > 0)

	test	ebx, ebx
	jne	SHORT $LN74@CalculateQ

; 274  :         return (FALSE);
; 275  :     else if (lh_mi > rh_mi)

	cmp	ecx, edi
	ja	SHORT $LN3@CalculateQ

; 276  :         return (TRUE);
; 277  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 352  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN3@CalculateQ:
	pop	edi

; 353  :         return (q_);
; 354  :     --q_;

	lea	eax, DWORD PTR [esi-1]

; 355  :     return (q_);
; 356  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN74@CalculateQ:
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _CheckQ_X
_TEXT	SEGMENT
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
_CheckQ_X PROC						; COMDAT

; 284  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _q_$[ebp]
	mul	DWORD PTR _v2$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _uj$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 284  : {

	push	ebx
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	esi, DWORD PTR _uj_1$[ebp]

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ebx, eax
	mov	eax, DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 284  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
	mul	DWORD PTR _v1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 310  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN27@CheckQ_X

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);
; 316  :     }
; 317  :     else if (lh_mi > rh_mi)

	cmp	edi, esi
	jbe	SHORT $LN6@CheckQ_X

; 337  :     }
; 338  : }

	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ecx+1]
	pop	ebx
	pop	ebp
	ret	0
$LN6@CheckQ_X:

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);
; 323  :     }
; 324  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN27@CheckQ_X

; 325  :     {
; 326  : #ifdef DO_TRACE
; 327  :         ReportVar("result", 0);
; 328  : #endif
; 329  :         return (FALSE);
; 330  :     }
; 331  :     else
; 332  :     {
; 333  : #ifdef DO_TRACE
; 334  :         ReportVar("result", lh_lo > rh_lo);
; 335  : #endif
; 336  :         return (lh_lo > rh_lo);

	cmp	DWORD PTR _uj_2$[ebp], ebx
	pop	edi
	sbb	eax, eax

; 337  :     }
; 338  : }

	pop	esi
	neg	eax
	pop	ebx
	pop	ebp
	ret	0
$LN27@CheckQ_X:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
_CheckQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _CheckQ_
_TEXT	SEGMENT
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
_CheckQ_ PROC						; COMDAT

; 257  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _q_$[ebp]
	mul	DWORD PTR _v2$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _uj$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 257  : {

	push	ebx
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	esi, DWORD PTR _uj_1$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ebx, eax
	mov	eax, DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 257  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
	mul	DWORD PTR _v1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 273  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN27@CheckQ_

; 274  :         return (FALSE);
; 275  :     else if (lh_mi > rh_mi)

	cmp	edi, esi
	jbe	SHORT $LN6@CheckQ_

; 281  : }

	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ecx+1]
	pop	ebx
	pop	ebp
	ret	0
$LN6@CheckQ_:

; 276  :         return (TRUE);
; 277  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN27@CheckQ_

; 278  :         return (FALSE);
; 279  :     else
; 280  :         return (lh_lo > rh_lo);

	cmp	DWORD PTR _uj_2$[ebp], ebx
	pop	edi
	sbb	eax, eax

; 281  : }

	pop	esi
	neg	eax
	pop	ebx
	pop	ebp
	ret	0
$LN27@CheckQ_:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
_CheckQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _AsumeQ_
_TEXT	SEGMENT
_uj$ = 8						; size = 4
_uj_1$ = 12						; size = 4
_v1$ = 16						; size = 4
_AsumeQ_ PROC						; COMDAT

; 242  : {

	push	ebp
	mov	ebp, esp

; 243  :     if (uj == v1)

	mov	ecx, DWORD PTR _uj$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN2@AsumeQ_

; 244  :         return (-1);

	or	eax, -1

; 254  : }

	pop	ebp
	ret	0
$LN2@AsumeQ_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR _uj_1$[ebp]

; 385  :             return ((_UINT32_T)(t / v));

	push	ecx
	push	eax
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 254  : }

	pop	ebp
	ret	0
_AsumeQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_2WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADCX_DIV PROC				; COMDAT

; 4543 : {

	push	ebp
	mov	ebp, esp

; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4543 : {

	push	esi

; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4546 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4582 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4582 :     return (c);

	pop	esi

; 4583 : }

	pop	ebp
	ret	0
__ADD_2WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_2WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADC_DIV PROC				; COMDAT

; 4500 : {

	push	ebp
	mov	ebp, esp

; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4500 : {

	push	esi

; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4503 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4539 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4539 :     return (c);

	pop	esi

; 4540 : }

	pop	ebp
	ret	0
__ADD_2WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_4WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADCX_DIV PROC				; COMDAT

; 4157 : {

	push	ebp
	mov	ebp, esp

; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4157 : {

	push	esi

; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4160 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4161 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4162 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4210 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4210 :     return (c);

	pop	esi

; 4211 : }

	pop	ebp
	ret	0
__ADD_4WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_4WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADC_DIV PROC				; COMDAT

; 4100 : {

	push	ebp
	mov	ebp, esp

; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4100 : {

	push	esi

; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4103 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4104 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4105 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4153 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4153 :     return (c);

	pop	esi

; 4154 : }

	pop	ebp
	ret	0
__ADD_4WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_8WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADCX_DIV PROC				; COMDAT

; 3617 : {

	push	ebp
	mov	ebp, esp

; 3618 : #ifdef _MSC_VER
; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3617 : {

	push	esi

; 3618 : #ifdef _MSC_VER
; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3620 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3621 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3622 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3623 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3698 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3698 :     return (c);

	pop	esi

; 3699 : }

	pop	ebp
	ret	0
__ADD_8WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_8WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADC_DIV PROC				; COMDAT

; 3532 : {

	push	ebp
	mov	ebp, esp

; 3533 : #ifdef _MSC_VER
; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3532 : {

	push	esi

; 3533 : #ifdef _MSC_VER
; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3535 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3536 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3537 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3538 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3539 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3540 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3541 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3613 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3613 :     return (c);

	pop	esi

; 3614 : }

	pop	ebp
	ret	0
__ADD_8WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_16WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADCX_DIV PROC				; COMDAT

; 2769 : {

	push	ebp
	mov	ebp, esp

; 2770 : #ifdef _MSC_VER
; 2771 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2769 : {

	push	esi

; 2770 : #ifdef _MSC_VER
; 2771 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2772 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2773 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2774 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2775 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2776 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2777 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2778 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2779 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2780 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2781 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2782 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2783 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2784 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2785 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2786 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2906 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2906 :     return (c);

	pop	esi

; 2907 : }

	pop	ebp
	ret	0
__ADD_16WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_16WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADC_DIV PROC				; COMDAT

; 2628 : {

	push	ebp
	mov	ebp, esp

; 2629 : #ifdef _MSC_VER
; 2630 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2628 : {

	push	esi

; 2629 : #ifdef _MSC_VER
; 2630 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2631 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2632 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2633 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2634 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2635 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2636 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2637 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2638 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2639 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2640 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2641 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2642 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2643 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2644 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2645 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2765 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2765 :     return (c);

	pop	esi

; 2766 : }

	pop	ebp
	ret	0
__ADD_16WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_32WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADCX_DIV PROC				; COMDAT

; 1305 : {

	push	ebp
	mov	ebp, esp

; 1306 : #ifdef _MSC_VER
; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1305 : {

	push	esi

; 1306 : #ifdef _MSC_VER
; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1308 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1309 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1310 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1311 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [edx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+64]
	mov	DWORD PTR [edi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [edx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+68]
	mov	DWORD PTR [edi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [edx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+72]
	mov	DWORD PTR [edi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [edx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+76]
	mov	DWORD PTR [edi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [edx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+80]
	mov	DWORD PTR [edi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [edx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+84]
	mov	DWORD PTR [edi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [edx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [edi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [edx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+92]
	mov	DWORD PTR [edi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [edx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+96]
	mov	DWORD PTR [edi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [edx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+100]
	mov	DWORD PTR [edi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [edx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+104]
	mov	DWORD PTR [edi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [edx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [edi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [edx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+112]
	mov	DWORD PTR [edi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [edx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+116]
	mov	DWORD PTR [edi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [edx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+120]
	mov	DWORD PTR [edi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [edx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+124]
	mov	DWORD PTR [edi+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1554 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1554 :     return (c);

	pop	esi

; 1555 : }

	pop	ebp
	ret	0
__ADD_32WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_32WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADC_DIV PROC				; COMDAT

; 1052 : {

	push	ebp
	mov	ebp, esp

; 1053 : #ifdef _MSC_VER
; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1052 : {

	push	esi

; 1053 : #ifdef _MSC_VER
; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1055 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1056 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1057 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1058 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1059 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [edx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+64]
	mov	DWORD PTR [edi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1071 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [edx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+68]
	mov	DWORD PTR [edi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1072 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [edx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+72]
	mov	DWORD PTR [edi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1073 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [edx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+76]
	mov	DWORD PTR [edi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1074 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [edx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+80]
	mov	DWORD PTR [edi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1075 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [edx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+84]
	mov	DWORD PTR [edi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1076 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [edx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [edi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1077 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [edx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+92]
	mov	DWORD PTR [edi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1078 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [edx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+96]
	mov	DWORD PTR [edi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1079 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [edx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+100]
	mov	DWORD PTR [edi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1080 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [edx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+104]
	mov	DWORD PTR [edi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1081 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [edx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [edi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1082 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [edx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+112]
	mov	DWORD PTR [edi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1083 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [edx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+116]
	mov	DWORD PTR [edi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1084 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [edx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+120]
	mov	DWORD PTR [edi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1085 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [edx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+124]
	mov	DWORD PTR [edi+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1301 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1301 :     return (c);

	pop	esi

; 1302 : }

	pop	ebp
	ret	0
__ADD_32WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT_DIV
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT_DIV PROC				; COMDAT

; 652  :     {

	push	ebp
	mov	ebp, esp

; 653  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 654  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 678  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 655  : #ifdef _M_IX86
; 656  :         _UINT32_T pos;
; 657  : #ifdef _MSC_VER
; 658  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 659  : #elif defined(__GNUC__)
; 660  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 661  : #else
; 662  : #error unknown compiler
; 663  : #endif
; 664  : #elif defined(_M_X64)
; 665  : #ifdef _MSC_VER
; 666  :         _UINT32_T pos;
; 667  :         _BitScanReverse(&pos, x);
; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 678  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :     {

	push	ebp
	mov	ebp, esp

; 624  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 649  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 649  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 590  :     {

	push	ebp
	mov	ebp, esp

; 591  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 602  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 602  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVREM_SINGLE_UNIT
_TEXT	SEGMENT
tv70 = -8						; size = 8
tv69 = -8						; size = 8
_r$ = 8							; size = 4
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_q$ = 20						; size = 4
__DIVREM_SINGLE_UNIT PROC				; COMDAT

; 422  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR _r$[ebp]
	xor	ecx, ecx
	or	ecx, DWORD PTR _u$[ebp]

; 422  :     {

	push	ebx

; 423  : #ifdef _MSC_VER
; 424  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 425  :         {
; 426  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 427  :             _UINT64_T t = _FROMWORDTODWORD(r, u);
; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	eax
	push	ecx
	call	__aulldvrm
	mov	DWORD PTR tv70[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv69[ebp+4], edx
	mov	edx, DWORD PTR _q$[ebp]

; 429  :             return ((_UINT32_T)(t % v));

	pop	ebx
	mov	DWORD PTR [edx], eax
	mov	eax, ecx

; 430  :         }
; 431  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 432  :         {
; 433  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 434  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 435  :             // ・128bit 整数のデータ型が用意されていない。
; 436  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 437  :             *q = 0;
; 438  :             return (0);
; 439  :         }
; 440  :         else
; 441  :         {
; 442  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 443  :             *q = 0;
; 444  :             return (0);
; 445  :         }
; 446  : #elif defined(__GNUC__)
; 447  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 448  :             __asm__("divl %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 449  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 450  :             __asm__("divq %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 451  :         else
; 452  :         {
; 453  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 454  :             *q = 0;
; 455  :             r = 0;
; 456  :         }
; 457  :         return (r);
; 458  : #else
; 459  : #error unknown compiler
; 460  : #endif
; 461  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_SINGLE_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVREM_UNIT
_TEXT	SEGMENT
tv70 = -8						; size = 8
tv69 = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC					; COMDAT

; 378  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR _u_high$[ebp]
	xor	ecx, ecx
	or	ecx, DWORD PTR _u_low$[ebp]

; 378  :     {

	push	ebx

; 379  : #ifdef _MSC_VER
; 380  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 381  :         {
; 382  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 383  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 384  :             *r = (_UINT32_T)(t % v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	eax
	push	ecx
	call	__aulldvrm
	mov	DWORD PTR tv69[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv70[ebp+4], edx
	mov	edx, DWORD PTR _r$[ebp]

; 385  :             return ((_UINT32_T)(t / v));

	pop	ebx
	mov	DWORD PTR [edx], ecx

; 386  :         }
; 387  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 388  :         {
; 389  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 390  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 391  :             // ・128bit 整数のデータ型が用意されていない。
; 392  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 393  :             *r = 0;
; 394  :             return (0);
; 395  :         }
; 396  :         else
; 397  :         {
; 398  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 399  :             *r = 0;
; 400  :             return (0);
; 401  :         }
; 402  : #elif defined(__GNUC__)
; 403  :         __UNIT_TYPE q;
; 404  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 405  :             __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 406  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 407  :             __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 408  :         else
; 409  :         {
; 410  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 411  :             *r = 0;
; 412  :             q = 0;
; 413  :         }
; 414  :         return (q);
; 415  : #else
; 416  : #error unknown compiler
; 417  : #endif
; 418  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLYX_UNIT_DIV
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT_DIV PROC				; COMDAT

; 356  :     {

	push	ebp
	mov	ebp, esp

; 357  : #ifdef _MSC_VER
; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 359  : #elif defined(__GNUC__)
; 360  : #ifdef _M_IX86
; 361  :         _UINT32_T w_lo;
; 362  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 363  :         return (w_lo);
; 364  : #elif defined(_M_X64)
; 365  :         _UINT64_T w_lo;
; 366  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 367  :         return (w_lo);
; 368  : #else
; 369  : #error unknown platform
; 370  : #endif
; 371  : #else
; 372  : #error unknown compiler
; 373  : #endif
; 374  :     }

	pop	ebp
	ret	0
__MULTIPLYX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLY_UNIT_DIV
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT_DIV PROC				; COMDAT

; 310  :     {

	push	ebp
	mov	ebp, esp

; 311  : #ifdef _MSC_VER
; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 313  : #elif defined(__GNUC__)
; 314  : #ifdef _M_IX86
; 315  :         _UINT32_T w_lo;
; 316  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 317  :         return (w_lo);
; 318  : #elif defined(_M_X64)
; 319  :         return (_umul128(u, v, w_hi));
; 320  : #else
; 321  : #error unknown platform
; 322  : #endif
; 323  : #else
; 324  : #error unknown compiler
; 325  : #endif
; 326  :     }

	pop	ebp
	ret	0
__MULTIPLY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __SUBTRUCT_UNIT_DIV
_TEXT	SEGMENT
_borrow$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__SUBTRUCT_UNIT_DIV PROC				; COMDAT

; 274  :     {

	push	ebp
	mov	ebp, esp

; 275  : #ifdef _MSC_VER
; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	al, BYTE PTR _borrow$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	sbb	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 277  : #elif defined(__GNUC__)
; 278  : #ifdef _M_IX86
; 279  :         return (_subborrow_u32(borrow, u, v, w));
; 280  : #elif defined(_M_X64)
; 281  :         return (_subborrow_u64(borrow, u, v, w));
; 282  : #else
; 283  : #error unknown platform
; 284  : #endif
; 285  : #else
; 286  : #error unknown compiler
; 287  : #endif
; 288  :     }

	pop	ebp
	ret	0
__SUBTRUCT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADDX_UNIT_DIV
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT_DIV PROC					; COMDAT

; 246  :     {

	push	ebp
	mov	ebp, esp

; 247  : #ifdef _MSC_VER
; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adcx	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 249  : #elif defined(__GNUC__)
; 250  : #ifdef _M_IX86
; 251  :         return (_addcarryx_u32(carry, u, v, w));
; 252  : #elif defined(_M_X64)
; 253  :         return (_addcarryx_u64(carry, u, v, w));
; 254  : #else
; 255  : #error unknown platform
; 256  : #endif
; 257  : #else
; 258  : #error unknown compiler
; 259  : #endif
; 260  :     }

	pop	ebp
	ret	0
__ADDX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADD_UNIT_DIV
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT_DIV PROC					; COMDAT

; 218  :     {

	push	ebp
	mov	ebp, esp

; 219  : #ifdef _MSC_VER
; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adc	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 221  : #elif defined(__GNUC__)
; 222  : #ifdef _M_IX86
; 223  :         return (_addcarry_u32(carry, u, v, w));
; 224  : #elif defined(_M_X64)
; 225  :         return (_addcarry_u64(carry, u, v, w));
; 226  : #else
; 227  : #error unknown platform
; 228  : #endif
; 229  : #else
; 230  : #error unknown compiler
; 231  : #endif
; 232  :     }

	pop	ebp
	ret	0
__ADD_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 176  :     {

	push	ebp
	mov	ebp, esp

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 179  :     }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMWORDTODWORD
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC					; COMDAT

; 171  :     {

	push	ebp
	mov	ebp, esp

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR _value_high$[ebp]
	xor	eax, eax
	or	eax, DWORD PTR _value_low$[ebp]

; 173  :     }

	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT_DIV
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT_DIV PROC				; COMDAT

; 71   :     {

	push	ebp
	mov	ebp, esp

; 72   : #ifdef _M_IX86
; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 74   : #elif defined(_M_X64)
; 75   : #ifdef _MSC_VER
; 76   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 77   : #elif defined(__GNUC__)
; 78   :         __movsq(d, s, count);
; 79   : #else
; 80   : #error unknown compiler
; 81   : #endif
; 82   : #else
; 83   : #error unknown platform
; 84   : #endif
; 85   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	push	ebp
	mov	ebp, esp

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);
; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToMULTI64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC				; COMDAT

; 353  :     {

	push	ebp
	mov	ebp, esp

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 355  :     }

	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToMULTI32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC				; COMDAT

; 347  :     {

	push	ebp
	mov	ebp, esp

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 349  :     }

	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToDIV64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV64Counter PROC					; COMDAT

; 341  :     {

	push	ebp
	mov	ebp, esp

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+8
	lock	 xadd	 DWORD PTR [ecx], eax

; 343  :     }

	pop	ebp
	ret	0
_AddToDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToDIV32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV32Counter PROC					; COMDAT

; 335  :     {

	push	ebp
	mov	ebp, esp

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax

; 337  :     }

	pop	ebp
	ret	0
_AddToDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementMULTI64Counter
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC				; COMDAT

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 332  :     }

	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementMULTI32Counter
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC				; COMDAT

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 326  :     }

	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementDIV64Counter
_TEXT	SEGMENT
_IncrementDIV64Counter PROC				; COMDAT

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock	 inc	 (null) PTR _statistics_info+8

; 320  :     }

	ret	0
_IncrementDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementDIV32Counter
_TEXT	SEGMENT
_IncrementDIV32Counter PROC				; COMDAT

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 314  :     }

	ret	0
_IncrementDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_X@16
_TEXT	SEGMENT
_nr_light_check_code$1 = -16				; size = 4
_work_v_buf_words$2 = -12				; size = 4
_work_v_buf_code$3 = -8					; size = 4
_nr_light_check_code$4 = -8				; size = 4
_nq_light_check_code$5 = -4				; size = 4
_nq_light_check_code$6 = -4				; size = 4
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_nr$ = 12						; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_X@16 PROC					; COMDAT

; 1585 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi

; 1586 :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN34@PMC_DivRem

; 1587 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1588 :     if (v == NULL)

	mov	edi, DWORD PTR _v$[ebp]
	test	edi, edi
	je	$LN34@PMC_DivRem

; 1589 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1590 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN34@PMC_DivRem

; 1591 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1592 :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	je	$LN34@PMC_DivRem

; 1594 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1595 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1596 :     PMC_STATUS_CODE result;
; 1597 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1598 :         return (result);
; 1599 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1600 :         return (result);
; 1601 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR [edi+24]
	test	al, 2
	je	SHORT $LN8@PMC_DivRem

; 1602 :     {
; 1603 :         // v が 0 である場合
; 1604 : 
; 1605 :         // 0 による除算はエラーで返す
; 1606 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	pop	edi
	mov	eax, -3					; fffffffdH

; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);
; 1735 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_DivRem:

; 1607 :     }
; 1608 :     NUMBER_HEADER* nq;
; 1609 :     NUMBER_HEADER* nr;
; 1610 :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	push	ebx
	je	SHORT $LN9@PMC_DivRem

; 1611 :     {
; 1612 :         // u が 0 である場合
; 1613 : 
; 1614 :         // q = 0, r = 0 を返す
; 1615 :         nq = &number_zero;

	mov	eax, OFFSET _number_zero

; 1616 :         nr = &number_zero;
; 1617 :     }

	jmp	$LN37@PMC_DivRem
$LN9@PMC_DivRem:

; 1618 :     else
; 1619 :     {
; 1620 :         // u が 0 ではない場合
; 1621 : 
; 1622 :         if (nv->IS_ONE)

	test	al, 4
	je	SHORT $LN11@PMC_DivRem

; 1623 :         {
; 1624 :             // v が 1 である場合
; 1625 : 
; 1626 :             // q = u, r = 0 を返す
; 1627 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN38@PMC_DivRem
$LN36@PMC_DivRem:
	pop	ebx
$LN1@PMC_DivRem:
	pop	edi

; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);
; 1735 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN11@PMC_DivRem:

; 1628 :                 return (result);
; 1629 :             nr = &number_zero;
; 1630 :         }
; 1631 :         else
; 1632 :         {
; 1633 :             // u > 0 かつ v > 1 である場合
; 1634 : 
; 1635 :             // x と y の商・剰余を計算する
; 1636 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ebx, DWORD PTR [esi+12]

; 1637 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR [edi+12]

; 1638 :             if (u_bit_count < v_bit_count)

	cmp	ebx, ecx
	jae	SHORT $LN14@PMC_DivRem

; 1639 :             {
; 1640 :                 // 明らかに u < v である場合
; 1641 : 
; 1642 :                 // q = 0, r = u を返す。
; 1643 :                 nq = &number_zero;
; 1644 :                 if ((result = DuplicateNumber(nu, &nr)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nr$[ebp]
	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN36@PMC_DivRem

; 1713 :                 if (nq->IS_ZERO)
; 1714 :                 {
; 1715 :                     DeallocateNumber(nq);
; 1716 :                     nq = &number_zero;
; 1717 :                 }
; 1718 :                 if (nr->IS_ZERO)
; 1719 :                 {
; 1720 :                     DeallocateNumber(nr);
; 1721 :                     nr = &number_zero;
; 1722 :                 }
; 1723 :             }
; 1724 :         }
; 1725 :     }
; 1726 :     *q = (PMC_HANDLE_UINT)nq;

	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _nq$[ebp]
	mov	ecx, DWORD PTR _nr$[ebp]
	pop	ebx
	mov	DWORD PTR [edx], eax

; 1727 :     *r = (PMC_HANDLE_UINT)nr;

	mov	eax, DWORD PTR _r$[ebp]
	pop	edi

; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);
; 1735 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN14@PMC_DivRem:

; 1645 :                     return (result);
; 1646 :             }
; 1647 :             else if (v_bit_count <= sizeof(__UNIT_TYPE_DIV) * 8)

	mov	eax, ebx
	sub	eax, ecx
	add	eax, 33					; 00000021H
	cmp	ecx, 32					; 00000020H
	lea	ecx, DWORD PTR _nq_light_check_code$6[ebp]
	push	ecx
	push	eax
	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	ja	$LN17@PMC_DivRem

; 1648 :             {
; 1649 :                 // 除数が 1 ワードで表現できる場合
; 1650 : 
; 1651 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1652 :                 __UNIT_TYPE nq_light_check_code;
; 1653 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN36@PMC_DivRem

; 1654 :                     return (result);
; 1655 :                 __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE_DIV) * 8;
; 1656 :                 __UNIT_TYPE nr_light_check_code;
; 1657 :                 if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nr_light_check_code$4[ebp]
	push	eax
	lea	eax, DWORD PTR _nr$[ebp]
	push	32					; 00000020H
	push	eax
	call	_AllocateNumber
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	test	ebx, ebx
	jne	$LN43@PMC_DivRem

; 1658 :                 {
; 1659 :                     DeallocateNumber(nq);
; 1660 :                     return (result);
; 1661 :                 }
; 1662 :                 DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)nv->BLOCK[0], (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR [eax+32]
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edi+32]
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [esi+32]
	call	_DivRem_X_1W

; 1663 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$6[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1664 :                     return (result);
; 1665 :                 if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR _nr_light_check_code$4[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1666 :                     return (result);
; 1667 :                 CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1668 :                 CommitNumber(nr);

	push	DWORD PTR _nr$[ebp]
	call	_CommitNumber
	add	esp, 8

; 1669 :                 if (nq->IS_ZERO)
; 1670 :                 {
; 1671 :                     DeallocateNumber(nq);
; 1672 :                     nq = &number_zero;
; 1673 :                 }
; 1674 :                 if (nr->IS_ZERO)
; 1675 :                 {
; 1676 :                     DeallocateNumber(nr);
; 1677 :                     nr = &number_zero;
; 1678 :                 }
; 1679 :             }

	jmp	$LN42@PMC_DivRem
$LN17@PMC_DivRem:

; 1680 :             else
; 1681 :             {
; 1682 :                 // 除数を表現するのに 2 ワード以上必要な場合
; 1683 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1684 :                 __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1685 :                 __UNIT_TYPE nq_light_check_code;
; 1686 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1687 :                     return (result);
; 1688 :                 __UNIT_TYPE nr_light_check_code;
; 1689 :                 if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nr_light_check_code$1[ebp]
	push	eax
	lea	eax, DWORD PTR [ebx+32]
	push	eax
	lea	eax, DWORD PTR _nr$[ebp]
	push	eax
	call	_AllocateNumber
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	test	ebx, ebx
	je	SHORT $LN26@PMC_DivRem
$LN43@PMC_DivRem:

; 1690 :                 {
; 1691 :                     DeallocateNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 1692 :                     return (result);

	mov	eax, ebx
	pop	ebx
	pop	edi

; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);
; 1735 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN26@PMC_DivRem:

; 1693 :                 }
; 1694 :                 __UNIT_TYPE work_v_buf_code;
; 1695 :                 __UNIT_TYPE work_v_buf_words;
; 1696 :                 __UNIT_TYPE_DIV* work_v_buf = (__UNIT_TYPE_DIV*)AllocateBlock(nv->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$3[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$2[ebp]
	push	eax
	mov	eax, DWORD PTR [edi+8]
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 1697 :                 if (work_v_buf == NULL)

	test	ebx, ebx
	jne	SHORT $LN27@PMC_DivRem

; 1698 :                 {
; 1699 :                     DeallocateNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 1700 :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, DWORD PTR [ebx-5]
	pop	ebx
	pop	edi

; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);
; 1735 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN27@PMC_DivRem:

; 1701 :                 }
; 1702 : 
; 1703 :                 (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR [eax+32]
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edi+8]
	push	ebx
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+32]
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [esi+32]
	call	DWORD PTR _fp_DivRem_X_X

; 1704 :                 if ((result = CheckBlockLight((__UNIT_TYPE*)work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$3[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1705 :                     return (result);
; 1706 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$5[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1707 :                     return (result);
; 1708 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$5[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1709 :                     return (result);
; 1710 :                 DeallocateBlock((__UNIT_TYPE*)work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$2[ebp]
	push	ebx
	call	_DeallocateBlock

; 1711 :                 CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1712 :                 CommitNumber(nr);

	push	DWORD PTR _nr$[ebp]
	call	_CommitNumber
	add	esp, 16					; 00000010H
$LN42@PMC_DivRem:

; 1713 :                 if (nq->IS_ZERO)
; 1714 :                 {
; 1715 :                     DeallocateNumber(nq);
; 1716 :                     nq = &number_zero;
; 1717 :                 }
; 1718 :                 if (nr->IS_ZERO)
; 1719 :                 {
; 1720 :                     DeallocateNumber(nr);
; 1721 :                     nr = &number_zero;
; 1722 :                 }
; 1723 :             }
; 1724 :         }
; 1725 :     }
; 1726 :     *q = (PMC_HANDLE_UINT)nq;

	mov	eax, DWORD PTR _nq$[ebp]
	test	BYTE PTR [eax+24], 2
	je	SHORT $LN31@PMC_DivRem
	push	eax
	call	_DeallocateNumber
	mov	eax, OFFSET _number_zero
	add	esp, 4
	mov	DWORD PTR _nq$[ebp], eax
$LN31@PMC_DivRem:
	mov	ecx, DWORD PTR _nr$[ebp]
	test	BYTE PTR [ecx+24], 2
	je	SHORT $LN32@PMC_DivRem
	push	ecx
	call	_DeallocateNumber
	add	esp, 4
$LN38@PMC_DivRem:
	mov	eax, DWORD PTR _nq$[ebp]
$LN37@PMC_DivRem:
	mov	ecx, OFFSET _number_zero
$LN32@PMC_DivRem:
	mov	edx, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);
; 1735 : }

	pop	esi
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN34@PMC_DivRem:
	pop	edi

; 1593 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);
; 1735 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_DivRem_X_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_L@20
_TEXT	SEGMENT
_v_buf$1 = -24						; size = 8
_work_v_buf$2 = -16					; size = 8
_r_buf_words$3 = -8					; size = 4
_r_buf_code$4 = -4					; size = 4
_nq_light_check_code$5 = -4				; size = 4
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_q$ = 20						; size = 4
_nq_light_check_code$6 = 24				; size = 4
_r_buf$7 = 24						; size = 4
_r$ = 24						; size = 4
_PMC_DivRem_X_L@20 PROC					; COMDAT

; 1400 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	push	edi

; 1401 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(v))
; 1402 :     {
; 1403 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1404 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1405 :     }
; 1406 :     if (u == NULL)

	mov	edi, DWORD PTR _u$[ebp]
	test	edi, edi
	je	$LN45@PMC_DivRem

; 1407 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1408 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN45@PMC_DivRem

; 1409 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1410 :     if (r == NULL)

	mov	esi, DWORD PTR _r$[ebp]
	test	esi, esi
	je	$LN45@PMC_DivRem

; 1412 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1413 :     PMC_STATUS_CODE result;
; 1414 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1415 :         return (result);
; 1416 :     if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, edx
	mov	ecx, DWORD PTR _v$[ebp+4]
	or	eax, ecx
	jne	SHORT $LN7@PMC_DivRem

; 1417 :     {
; 1418 :         // v が 0 である場合
; 1419 : 
; 1420 :         // 0 による除算はエラーで返す
; 1421 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	pop	edi
	mov	eax, -3					; fffffffdH

; 1582 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN7@PMC_DivRem:

; 1422 :     }
; 1423 :     NUMBER_HEADER* nq;
; 1424 :     if (nu->IS_ZERO)

	test	BYTE PTR [edi+24], 2
	push	ebx
	je	SHORT $LN8@PMC_DivRem

; 1531 :                         if (nq->IS_ZERO)
; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);
; 1534 :                             nq = &number_zero;
; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }
; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1546 :                 if (u_bit_count < v_bit_count)
; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;
; 1552 :                     *r = nu->BLOCK[0];
; 1553 :                 }
; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1559 :                         return (result);
; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1563 :                         return (result);
; 1564 :                     CommitNumber(nq);
; 1565 :                     *r = r_buf;
; 1566 :                     if (nq->IS_ZERO)
; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);
; 1569 :                         nq = &number_zero;
; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = (PMC_HANDLE_UINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, OFFSET _number_zero
	pop	ebx
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	pop	edi
	mov	DWORD PTR [eax], ecx

; 1577 : #ifdef _DEBUG
; 1578 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1579 :         return (result);
; 1580 : #endif
; 1581 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1582 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN8@PMC_DivRem:

; 1425 :     {
; 1426 :         // x が 0 である場合
; 1427 : 
; 1428 :         // q = 0, r = 0 を返す
; 1429 :         nq = &number_zero;
; 1430 :         *r = 0;
; 1431 :     }
; 1432 :     else
; 1433 :     {
; 1434 :         // u が 0 ではない場合
; 1435 : 
; 1436 :         if (v == 1)

	cmp	edx, 1
	jne	SHORT $LN10@PMC_DivRem
	test	ecx, ecx
	jne	SHORT $LN10@PMC_DivRem

; 1437 :         {
; 1438 :             // v が 1 である場合
; 1439 : 
; 1440 :             // q = u, r = 0 を返す
; 1441 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	push	edi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN46@PMC_DivRem

; 1442 :                 return (result);
; 1443 :             *r = 0;
; 1444 :         }

	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax

; 1531 :                         if (nq->IS_ZERO)
; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);
; 1534 :                             nq = &number_zero;
; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }
; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1546 :                 if (u_bit_count < v_bit_count)
; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;
; 1552 :                     *r = nu->BLOCK[0];
; 1553 :                 }
; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1559 :                         return (result);
; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1563 :                         return (result);
; 1564 :                     CommitNumber(nq);
; 1565 :                     *r = r_buf;
; 1566 :                     if (nq->IS_ZERO)
; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);
; 1569 :                         nq = &number_zero;
; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = (PMC_HANDLE_UINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1582 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN10@PMC_DivRem:

; 1445 :         else
; 1446 :         {
; 1447 :             // u > 0 かつ v > 1 である場合
; 1448 : 
; 1449 :             // u と v の商・剰余を計算する
; 1450 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ebx, DWORD PTR [edi+12]

; 1451 :             if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))
; 1452 :             {
; 1453 :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 1454 :                 _UINT32_T v_hi;
; 1455 :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 1456 :                 if (v_hi == 0)

	test	ecx, ecx
	jne	$LN15@PMC_DivRem

; 1457 :                 {
; 1458 :                     // v の値が 32bit で表現可能な場合
; 1459 :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	push	edx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 1460 :                     if (u_bit_count < v_bit_count)

	cmp	ebx, ecx
	jae	SHORT $LN17@PMC_DivRem

; 1461 :                     {
; 1462 :                         // 明らかに u < v である場合
; 1463 : 
; 1464 :                         // q = 0, r = u を返す。
; 1465 :                         nq = &number_zero;
; 1466 :                         *r = nu->BLOCK[0];

	mov	eax, DWORD PTR [edi+32]
	mov	ecx, OFFSET _number_zero
	mov	DWORD PTR _nq$[ebp], ecx
	pop	ebx
	pop	edi
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [esi], eax

; 1531 :                         if (nq->IS_ZERO)
; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);
; 1534 :                             nq = &number_zero;
; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }
; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1546 :                 if (u_bit_count < v_bit_count)
; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;
; 1552 :                     *r = nu->BLOCK[0];
; 1553 :                 }
; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1559 :                         return (result);
; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1563 :                         return (result);
; 1564 :                     CommitNumber(nq);
; 1565 :                     *r = r_buf;
; 1566 :                     if (nq->IS_ZERO)
; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);
; 1569 :                         nq = &number_zero;
; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = (PMC_HANDLE_UINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [esi+4], 0

; 1582 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN17@PMC_DivRem:

; 1467 :                     }
; 1468 :                     else
; 1469 :                     {
; 1470 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1471 :                         __UNIT_TYPE nq_light_check_code;
; 1472 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq_light_check_code$5[ebp]
	sub	ebx, ecx
	push	eax
	add	ebx, 33					; 00000021H
	lea	eax, DWORD PTR _nq$[ebp]
	push	ebx
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN46@PMC_DivRem

; 1473 :                             return (result);
; 1474 :                         __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR _r_buf$7[ebp], eax

; 1475 :                         DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_lo, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	lea	eax, DWORD PTR _r_buf$7[ebp]
	push	eax
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+32]
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+32]
	call	_DivRem_X_1W

; 1476 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$5[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN46@PMC_DivRem

; 1477 :                             return (result);
; 1478 :                         CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1479 :                         *r = r_buf;

	mov	eax, DWORD PTR _r_buf$7[ebp]
	add	esp, 4
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], 0

; 1480 :                         if (nq->IS_ZERO)
; 1481 :                         {
; 1482 :                             DeallocateNumber(nq);
; 1483 :                             nq = &number_zero;
; 1484 :                         }
; 1485 :                     }
; 1486 :                 }

	jmp	$LN49@PMC_DivRem
$LN15@PMC_DivRem:

; 1487 :                 else
; 1488 :                 {
; 1489 :                     // v の値が 32bit では表現できない場合
; 1490 :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	push	ecx
	call	__LZCNT_ALT_32
	mov	ecx, 64					; 00000040H
	add	esp, 4
	sub	ecx, eax

; 1491 :                     if (u_bit_count < v_bit_count)

	cmp	ebx, ecx
	jae	SHORT $LN22@PMC_DivRem

; 1502 :                             __UNIT_TYPE r_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] : 0;

	cmp	DWORD PTR [edi+8], 1
	mov	ecx, OFFSET _number_zero
	mov	edx, DWORD PTR [edi+32]
	mov	DWORD PTR _nq$[ebp], ecx
	mov	ebx, DWORD PTR [edx]
	jbe	SHORT $LN37@PMC_DivRem
	mov	edx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1503 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo);

	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi], eax

; 1531 :                         if (nq->IS_ZERO)
; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);
; 1534 :                             nq = &number_zero;
; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }
; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1546 :                 if (u_bit_count < v_bit_count)
; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;
; 1552 :                     *r = nu->BLOCK[0];
; 1553 :                 }
; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1559 :                         return (result);
; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1563 :                         return (result);
; 1564 :                     CommitNumber(nq);
; 1565 :                     *r = r_buf;
; 1566 :                     if (nq->IS_ZERO)
; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);
; 1569 :                         nq = &number_zero;
; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = (PMC_HANDLE_UINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1582 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN37@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1502 :                             __UNIT_TYPE r_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] : 0;

	xor	edx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1503 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo);

	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi], eax

; 1531 :                         if (nq->IS_ZERO)
; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);
; 1534 :                             nq = &number_zero;
; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }
; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1546 :                 if (u_bit_count < v_bit_count)
; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;
; 1552 :                     *r = nu->BLOCK[0];
; 1553 :                 }
; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1559 :                         return (result);
; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1563 :                         return (result);
; 1564 :                     CommitNumber(nq);
; 1565 :                     *r = r_buf;
; 1566 :                     if (nq->IS_ZERO)
; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);
; 1569 :                         nq = &number_zero;
; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = (PMC_HANDLE_UINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1582 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN22@PMC_DivRem:

; 1504 :                         }
; 1505 :                     }
; 1506 :                     else
; 1507 :                     {
; 1508 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1509 :                         __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1510 :                         __UNIT_TYPE nq_light_check_code;
; 1511 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq_light_check_code$6[ebp]
	push	eax
	mov	eax, ebx
	sub	eax, ecx
	add	eax, 33					; 00000021H
	push	eax
	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN46@PMC_DivRem

; 1512 :                             return (result);
; 1513 :                         __UNIT_TYPE_DIV v_buf[] = { v_lo, v_hi };

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v_buf$1[ebp], eax
	mov	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR _v_buf$1[ebp+4], eax

; 1514 :                         __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };
; 1515 :                         __UNIT_TYPE r_buf_code;
; 1516 :                         __UNIT_TYPE r_buf_words;
; 1517 :                         __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(r_bit_count, &r_buf_words, &r_buf_code);

	lea	eax, DWORD PTR _r_buf_code$4[ebp]
	push	eax
	lea	eax, DWORD PTR _r_buf_words$3[ebp]
	mov	DWORD PTR _work_v_buf$2[ebp], 0
	push	eax
	lea	eax, DWORD PTR [ebx+32]
	mov	DWORD PTR _work_v_buf$2[ebp+4], 0
	push	eax
	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 1518 :                         if (r_buf == NULL)

	test	ebx, ebx
	jne	SHORT $LN27@PMC_DivRem

; 1519 :                         {
; 1520 :                             DeallocateNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 1521 :                             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, DWORD PTR [ebx-5]
$LN46@PMC_DivRem:
	pop	ebx
$LN1@PMC_DivRem:
	pop	edi

; 1582 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN27@PMC_DivRem:

; 1522 :                         }
; 1523 :                         (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, r_buf);

	mov	eax, DWORD PTR _nq$[ebp]
	push	ebx
	push	DWORD PTR [eax+32]
	lea	eax, DWORD PTR _work_v_buf$2[ebp]
	push	eax
	push	2
	lea	eax, DWORD PTR _v_buf$1[ebp]
	push	eax
	mov	eax, DWORD PTR [edi+8]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+32]
	call	DWORD PTR _fp_DivRem_X_X

; 1524 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$6[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	SHORT $LN46@PMC_DivRem

; 1525 :                             return (result);
; 1526 :                         if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _r_buf_code$4[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN46@PMC_DivRem

; 1527 :                             return (result);
; 1528 :                         CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1530 :                         DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	push	DWORD PTR _r_buf_words$3[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR [ebx+4]
	xor	eax, eax
	or	eax, DWORD PTR [ebx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1530 :                         DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	push	ebx
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	call	_DeallocateBlock
	add	esp, 12					; 0000000cH
$LN49@PMC_DivRem:

; 1531 :                         if (nq->IS_ZERO)
; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);
; 1534 :                             nq = &number_zero;
; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }
; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1546 :                 if (u_bit_count < v_bit_count)
; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;
; 1552 :                     *r = nu->BLOCK[0];
; 1553 :                 }
; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1559 :                         return (result);
; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1563 :                         return (result);
; 1564 :                     CommitNumber(nq);
; 1565 :                     *r = r_buf;
; 1566 :                     if (nq->IS_ZERO)
; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);
; 1569 :                         nq = &number_zero;
; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = (PMC_HANDLE_UINT)nq;

	mov	ecx, DWORD PTR _nq$[ebp]
	test	BYTE PTR [ecx+24], 2
	je	SHORT $LN30@PMC_DivRem
	push	ecx
	call	_DeallocateNumber
	add	esp, 4
	mov	ecx, OFFSET _number_zero
$LN30@PMC_DivRem:
	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1582 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN45@PMC_DivRem:
	pop	edi

; 1411 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 1582 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_PMC_DivRem_X_L@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_I@16
_TEXT	SEGMENT
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_nq_light_check_code$1 = 12				; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r_buf$2 = 20						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_I@16 PROC					; COMDAT

; 1145 : {

	push	ebp
	mov	ebp, esp
	push	esi

; 1146 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))
; 1147 :     {
; 1148 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1149 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1150 :     }
; 1151 :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN19@PMC_DivRem

; 1152 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1153 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN19@PMC_DivRem

; 1154 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1155 :     if (r == NULL)

	mov	edi, DWORD PTR _r$[ebp]
	test	edi, edi
	je	$LN19@PMC_DivRem

; 1157 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1158 :     PMC_STATUS_CODE result;
; 1159 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1160 :         return (result);
; 1161 :     if (v == 0)

	push	ebx
	mov	ebx, DWORD PTR _v$[ebp]
	test	ebx, ebx
	jne	SHORT $LN7@PMC_DivRem

; 1162 :     {
; 1163 :         // v が 0 である場合
; 1164 : 
; 1165 :         // 0 による除算はエラーで返す
; 1166 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	lea	eax, DWORD PTR [ebx-3]
$LN20@PMC_DivRem:
	pop	ebx
$LN1@PMC_DivRem:
	pop	edi

; 1231 : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN7@PMC_DivRem:

; 1167 :     }
; 1168 :     NUMBER_HEADER* nq;
; 1169 :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	je	SHORT $LN8@PMC_DivRem

; 1220 :                     nq = &number_zero;
; 1221 :                 }
; 1222 :             }
; 1223 :         }
; 1224 :     }
; 1225 :     *q = (PMC_HANDLE_UINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, OFFSET _number_zero
	pop	ebx
	mov	DWORD PTR [edi], 0
	pop	edi
	mov	DWORD PTR [eax], ecx

; 1226 : #ifdef _DEBUG
; 1227 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1228 :         return (result);
; 1229 : #endif
; 1230 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1231 : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_DivRem:

; 1170 :     {
; 1171 :         // u が 0 である場合
; 1172 : 
; 1173 :         // q = 0, r = 0 を返す
; 1174 :         nq = &number_zero;
; 1175 :         *r = 0;
; 1176 :     }
; 1177 :     else
; 1178 :     {
; 1179 :         // u が 0 ではない場合
; 1180 : 
; 1181 :         if (v == 1)

	cmp	ebx, 1
	jne	SHORT $LN10@PMC_DivRem

; 1182 :         {
; 1183 :             // v が 1 である場合
; 1184 : 
; 1185 :             // q = u, r = 0 を返す
; 1186 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@PMC_DivRem

; 1187 :                 return (result);
; 1188 :             *r = 0;
; 1189 :         }

	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [edi], eax

; 1220 :                     nq = &number_zero;
; 1221 :                 }
; 1222 :             }
; 1223 :         }
; 1224 :     }
; 1225 :     *q = (PMC_HANDLE_UINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1231 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	pop	ebp
	ret	16					; 00000010H
$LN10@PMC_DivRem:

; 1190 :         else
; 1191 :         {
; 1192 :             // u と v がともに 0 ではない場合
; 1193 : 
; 1194 :             // x と y の商・剰余を計算する
; 1195 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+12]

; 1196 :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	push	ebx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 1197 :             if (u_bit_count < v_bit_count)

	cmp	edx, ecx
	jae	SHORT $LN13@PMC_DivRem

; 1198 :             {
; 1199 :                 // 明らかに u < v である場合
; 1200 : 
; 1201 :                 // q = 0, r = u を返す。
; 1202 :                 nq = &number_zero;
; 1203 :                 *r = (_UINT32_T)nu->BLOCK[0];

	mov	eax, DWORD PTR [esi+32]
	mov	ecx, OFFSET _number_zero
	mov	DWORD PTR _nq$[ebp], ecx
	pop	ebx
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edi], eax

; 1220 :                     nq = &number_zero;
; 1221 :                 }
; 1222 :             }
; 1223 :         }
; 1224 :     }
; 1225 :     *q = (PMC_HANDLE_UINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	pop	edi

; 1231 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	pop	ebp
	ret	16					; 00000010H
$LN13@PMC_DivRem:

; 1204 :             }
; 1205 :             else
; 1206 :             {
; 1207 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1208 :                 __UNIT_TYPE nq_light_check_code;
; 1209 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq_light_check_code$1[ebp]
	sub	edx, ecx
	push	eax
	add	edx, 33					; 00000021H
	lea	eax, DWORD PTR _nq$[ebp]
	push	edx
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN20@PMC_DivRem

; 1210 :                     return (result);
; 1211 :                 __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR _r_buf$2[ebp], eax

; 1212 :                 DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	lea	eax, DWORD PTR _r_buf$2[ebp]
	push	eax
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+32]
	mov	eax, DWORD PTR [esi+8]
	push	ebx
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [esi+32]
	call	_DivRem_X_1W

; 1213 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$1[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN20@PMC_DivRem

; 1214 :                     return (result);
; 1215 :                 CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1216 :                 *r = (_UINT32_T)r_buf;
; 1217 :                 if (nq->IS_ZERO)

	mov	ecx, DWORD PTR _nq$[ebp]
	add	esp, 4
	mov	eax, DWORD PTR _r_buf$2[ebp]
	mov	DWORD PTR [edi], eax
	test	BYTE PTR [ecx+24], 2
	je	SHORT $LN17@PMC_DivRem

; 1218 :                 {
; 1219 :                     DeallocateNumber(nq);

	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 1220 :                     nq = &number_zero;
; 1221 :                 }
; 1222 :             }
; 1223 :         }
; 1224 :     }
; 1225 :     *q = (PMC_HANDLE_UINT)nq;

	mov	ecx, OFFSET _number_zero
$LN17@PMC_DivRem:
	mov	eax, DWORD PTR _q$[ebp]
	pop	ebx
	pop	edi

; 1231 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	xor	eax, eax
	pop	ebp
	ret	16					; 00000010H
$LN19@PMC_DivRem:
	pop	edi

; 1156 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 1231 : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
_PMC_DivRem_X_I@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _PMC_DivRem_L_X@20
_TEXT	SEGMENT
_u_buf$1 = -44						; size = 8
_r_buf$2 = -40						; size = 4
_work_v_buf$3 = -36					; size = 8
_u_buf$4 = -36						; size = 8
_r_buf$5 = -28						; size = 12
_q_buf$6 = -16						; size = 12
_q_buf$7 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_q$ = 20						; size = 4
_r$ = 24						; size = 4
_PMC_DivRem_L_X@20 PROC					; COMDAT

; 1234 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _r$[ebp]
	push	esi
	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	mov	edi, DWORD PTR _q$[ebp]

; 1235 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(u))
; 1236 :     {
; 1237 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1238 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1239 :     }
; 1240 :     if (v == NULL)

	test	esi, esi
	je	$LN61@PMC_DivRem

; 1241 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1242 :     if (q == NULL)

	test	edi, edi
	je	$LN61@PMC_DivRem

; 1243 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1244 :     if (r == NULL)

	test	ebx, ebx
	je	$LN61@PMC_DivRem

; 1246 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1247 :     PMC_STATUS_CODE result;
; 1248 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1249 :         return (result);
; 1250 :     if (nv->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	je	SHORT $LN7@PMC_DivRem

; 1397 : }

	pop	edi
	pop	esi
	mov	eax, -3					; fffffffdH
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN7@PMC_DivRem:

; 1251 :     {
; 1252 :         // v が 0 である場合
; 1253 : 
; 1254 :         // 0 による除算はエラーで返す
; 1255 :         return (PMC_STATUS_DIVISION_BY_ZERO);
; 1256 :     }
; 1257 :     if (u == 0)

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, edx
	mov	ecx, DWORD PTR _u$[ebp+4]
	or	eax, ecx
	jne	SHORT $LN8@PMC_DivRem

; 1258 :     {
; 1259 :         // x が 0 である場合
; 1260 : 
; 1261 :         // q = 0, r = 0 を返す
; 1262 :         *q = 0;

	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], eax
	pop	edi

; 1397 : }

	pop	esi
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], eax
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN8@PMC_DivRem:

; 1263 :         *r = 0;
; 1264 :     }
; 1265 :     else
; 1266 :     {
; 1267 :         // u が 0 ではない場合
; 1268 : 
; 1269 :         if (nv->IS_ONE)

	test	BYTE PTR [esi+24], 4
	je	SHORT $LN10@PMC_DivRem

; 1270 :         {
; 1271 :             // v が 1 である場合
; 1272 : 
; 1273 :             // q = u, r = 0 を返す
; 1274 :             *q = u;

	mov	DWORD PTR [edi], edx

; 1396 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [edi+4], ecx
	pop	edi

; 1397 : }

	pop	esi
	mov	DWORD PTR [ebx], 0
	mov	DWORD PTR [ebx+4], 0
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN10@PMC_DivRem:

; 1275 :             *r = 0;
; 1276 :         }
; 1277 :         else
; 1278 :         {
; 1279 :             // u > 0 かつ v > 1 である場合
; 1280 : 
; 1281 :             // u と v の商・剰余を計算する
; 1282 :             if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))
; 1283 :             {
; 1284 :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 1285 :                 _UINT32_T u_hi;
; 1286 :                 _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);
; 1287 :                 if (u_hi == 0)

	test	ecx, ecx
	jne	$LN14@PMC_DivRem

; 1288 :                 {
; 1289 :                     // u の値が 32bit で表現可能な場合
; 1290 :                     __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

	push	edx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 1291 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1292 :                     if (u_bit_count < v_bit_count)

	cmp	ecx, DWORD PTR [esi+12]
	jae	SHORT $LN16@PMC_DivRem

; 1293 :                     {
; 1294 :                         // 明らかに u < v である場合
; 1295 : 
; 1296 :                         // q = 0, r = u を返す。
; 1297 :                         *q = 0;

	mov	DWORD PTR [edi], 0

; 1396 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [edi+4], 0
	pop	edi

; 1397 : }

	pop	esi
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], 0
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN16@PMC_DivRem:

; 1306 :                         *q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	eax, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	mov	esi, DWORD PTR [eax]
	push	esi
	push	0
	push	edx
	call	__aulldiv
	push	0
	push	esi
	push	0
	push	DWORD PTR _u$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1306 :                         *q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             *r = (_UINT32_T)(t % v);

	call	__aullrem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1307 :                         *r = temp_r;

	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1397 : }

	pop	esi
	xor	eax, eax
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN14@PMC_DivRem:

; 1308 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1309 :                         if (sizeof(r) == sizeof(_UINT64_T))
; 1310 :                             IncrementDIV64Counter();
; 1311 :                         else
; 1312 :                             IncrementDIV32Counter();
; 1313 : #endif
; 1314 :                     }
; 1315 :                 }
; 1316 :                 else
; 1317 :                 {
; 1318 :                     // v の値が 32bit では表現できない場合
; 1319 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

	push	ecx
	call	__LZCNT_ALT_32
	mov	ecx, 64					; 00000040H
	add	esp, 4
	sub	ecx, eax

; 1320 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1321 :                     if (u_bit_count < v_bit_count)

	mov	eax, DWORD PTR [esi+12]
	cmp	ecx, eax
	jae	SHORT $LN20@PMC_DivRem

; 1322 :                     {
; 1323 :                         // 明らかに u < v である場合
; 1324 : 
; 1325 :                         // q = 0, r = u を返す。
; 1326 :                         *q = 0;
; 1327 :                         *r = u;

	mov	eax, DWORD PTR _u$[ebp+4]
	mov	DWORD PTR [edi], 0
	mov	DWORD PTR [edi+4], 0
	pop	edi
	mov	DWORD PTR [ebx+4], eax

; 1396 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1397 : }

	pop	esi
	mov	DWORD PTR [ebx], edx
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN20@PMC_DivRem:

; 1328 :                     }
; 1329 :                     else
; 1330 :                     {
; 1331 :                         // u のビット長が 33 以上 64 以下であり、かつ、u のビット長が v のビット長以上(v のビット長は多くとも64以下)である場合
; 1332 : 
; 1333 :                         if (nv->UNIT_BIT_COUNT <= sizeof(__UNIT_TYPE_DIV) * 8)

	cmp	eax, 32					; 00000020H
	mov	DWORD PTR _q_buf$7[ebp], 0
	mov	eax, DWORD PTR _u$[ebp+4]
	mov	DWORD PTR _q_buf$7[ebp+4], 0
	mov	DWORD PTR _q_buf$7[ebp+8], 0
	ja	SHORT $LN22@PMC_DivRem

; 1334 :                         {
; 1335 :                             // v が 32bit で表現できる場合
; 1336 : 
; 1337 :                             __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };

	mov	DWORD PTR _u_buf$4[ebp+4], eax

; 1341 :                             DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0], q_buf, &r_buf);

	lea	eax, DWORD PTR _r_buf$2[ebp]
	push	eax
	lea	eax, DWORD PTR _q_buf$7[ebp]
	mov	DWORD PTR _u_buf$4[ebp], edx
	push	eax
	mov	eax, DWORD PTR [esi+32]
	push	DWORD PTR [eax]
	lea	eax, DWORD PTR _u_buf$4[ebp]
	push	2
	push	eax
	call	_DivRem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR _q_buf$7[ebp+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1341 :                             DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0], q_buf, &r_buf);

	add	esp, 20					; 00000014H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1343 :                             *q = _FROMWORDTODWORD(q_buf[1], q_buf[0]);

	mov	DWORD PTR [edi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, DWORD PTR _q_buf$7[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1343 :                             *q = _FROMWORDTODWORD(q_buf[1], q_buf[0]);

	mov	DWORD PTR [edi], eax

; 1344 :                             *r = r_buf;

	mov	eax, DWORD PTR _r_buf$2[ebp]
	pop	edi

; 1396 :     return (PMC_STATUS_OK);

	mov	DWORD PTR [ebx], eax
	xor	eax, eax

; 1397 : }

	pop	esi
	mov	DWORD PTR [ebx+4], 0
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN22@PMC_DivRem:

; 1345 :                         }
; 1346 :                         else
; 1347 :                         {
; 1348 :                             // v が 32bit では表現できない場合
; 1349 : 
; 1350 :                             // この場合、2 ワード / 2 ワード の除算となるため、_DIVREM_UNIT 単発では計算できない。
; 1351 :                             __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };

	mov	DWORD PTR _u_buf$1[ebp+4], eax

; 1355 :                             (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, q_buf, r_buf);

	lea	eax, DWORD PTR _r_buf$5[ebp]
	push	eax
	lea	eax, DWORD PTR _q_buf$6[ebp]
	mov	DWORD PTR _u_buf$1[ebp], edx
	push	eax
	lea	eax, DWORD PTR _work_v_buf$3[ebp]
	mov	DWORD PTR _r_buf$5[ebp], 0
	push	eax
	mov	eax, DWORD PTR [esi+8]
	and	eax, 1073741823				; 3fffffffH
	mov	DWORD PTR _r_buf$5[ebp+4], 0
	push	eax
	push	DWORD PTR [esi+32]
	lea	eax, DWORD PTR _u_buf$1[ebp]
	mov	DWORD PTR _r_buf$5[ebp+8], 0
	push	2
	push	eax
	mov	DWORD PTR _work_v_buf$3[ebp], 0
	mov	DWORD PTR _work_v_buf$3[ebp+4], 0
	call	DWORD PTR _fp_DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR _q_buf$6[ebp+4]
	xor	eax, eax
	or	eax, DWORD PTR _q_buf$6[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1355 :                             (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, q_buf, r_buf);

	add	esp, 28					; 0000001cH

; 1356 :                             *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

	mov	DWORD PTR [edi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR _r_buf$5[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1356 :                             *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

	mov	DWORD PTR [edi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR _r_buf$5[ebp+4]
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1396 :     return (PMC_STATUS_OK);

	mov	DWORD PTR [ebx], eax
	xor	eax, eax

; 1397 : }

	pop	esi
	mov	DWORD PTR [ebx+4], ecx
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN61@PMC_DivRem:

; 1245 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_DivRem:

; 1397 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_PMC_DivRem_L_X@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _PMC_DivRem_I_X@16
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_I_X@16 PROC					; COMDAT

; 1066 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 1067 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))
; 1068 :     {
; 1069 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1070 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1071 :     }
; 1072 :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	test	esi, esi
	je	$LN29@PMC_DivRem

; 1073 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1074 :     if (q == NULL)

	mov	edi, DWORD PTR _q$[ebp]
	test	edi, edi
	je	$LN29@PMC_DivRem

; 1075 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1076 :     if (r == NULL)

	mov	ebx, DWORD PTR _r$[ebp]
	test	ebx, ebx
	je	$LN29@PMC_DivRem

; 1078 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1079 :     PMC_STATUS_CODE result;
; 1080 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1081 :         return (result);
; 1082 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR [esi+24]
	test	al, 2
	je	SHORT $LN7@PMC_DivRem

; 1142 : }

	pop	edi
	pop	esi
	mov	eax, -3					; fffffffdH
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN7@PMC_DivRem:

; 1083 :     {
; 1084 :         // v が 0 である場合
; 1085 : 
; 1086 :         // 0 による除算はエラーで返す
; 1087 :         return (PMC_STATUS_DIVISION_BY_ZERO);
; 1088 :     }
; 1089 :     if (u == 0)

	mov	edx, DWORD PTR _u$[ebp]
	test	edx, edx
	jne	SHORT $LN8@PMC_DivRem

; 1090 :     {
; 1091 :         // u が 0 である場合
; 1092 : 
; 1093 :         // q = 0, r = 0 を返す
; 1094 :         *q = 0;

	mov	DWORD PTR [edi], edx

; 1132 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1133 :                 if (sizeof(r) == sizeof(_UINT64_T))
; 1134 :                     IncrementDIV64Counter();
; 1135 :                 else
; 1136 :                     IncrementDIV32Counter();
; 1137 : #endif
; 1138 :             }
; 1139 :         }
; 1140 :     }
; 1141 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 1142 : }

	pop	esi
	mov	DWORD PTR [ebx], edx
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_DivRem:

; 1095 :         *r = 0;
; 1096 :     }
; 1097 :     else
; 1098 :     {
; 1099 :         // u が 0 ではない場合
; 1100 : 
; 1101 :         if (nv->IS_ONE)

	test	al, 4
	je	SHORT $LN10@PMC_DivRem

; 1102 :         {
; 1103 :             // v が 1 である場合
; 1104 : 
; 1105 :             // q = u, r = 0 を返す
; 1106 :             *q = u;

	mov	DWORD PTR [edi], edx

; 1132 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1133 :                 if (sizeof(r) == sizeof(_UINT64_T))
; 1134 :                     IncrementDIV64Counter();
; 1135 :                 else
; 1136 :                     IncrementDIV32Counter();
; 1137 : #endif
; 1138 :             }
; 1139 :         }
; 1140 :     }
; 1141 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 1142 : }

	pop	esi
	mov	DWORD PTR [ebx], 0
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN10@PMC_DivRem:

; 1107 :             *r = 0;
; 1108 :         }
; 1109 :         else
; 1110 :         {
; 1111 :             // u と v がともに 0 ではない場合
; 1112 : 
; 1113 :             // x と y の商・剰余を計算する
; 1114 :             __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

	push	edx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 1115 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1116 :             if (u_bit_count < v_bit_count)

	cmp	ecx, DWORD PTR [esi+12]
	jae	SHORT $LN12@PMC_DivRem

; 1117 :             {
; 1118 :                 // 明らかに u < v である場合
; 1119 : 
; 1120 :                 // q = 0, r = u を返す。
; 1121 :                 *q = 0;

	mov	DWORD PTR [edi], 0

; 1132 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1133 :                 if (sizeof(r) == sizeof(_UINT64_T))
; 1134 :                     IncrementDIV64Counter();
; 1135 :                 else
; 1136 :                     IncrementDIV32Counter();
; 1137 : #endif
; 1138 :             }
; 1139 :         }
; 1140 :     }
; 1141 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 1142 : }

	pop	esi
	mov	DWORD PTR [ebx], edx
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN12@PMC_DivRem:

; 1130 :                 *q = _DIVREM_UNIT(0, u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	eax, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	mov	esi, DWORD PTR [eax]
	push	esi
	push	0
	push	edx
	call	__aulldiv
	push	0
	push	esi
	push	0
	push	DWORD PTR _u$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1130 :                 *q = _DIVREM_UNIT(0, u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	DWORD PTR [edi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             *r = (_UINT32_T)(t % v);

	call	__aullrem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1131 :                 *r = temp_r;

	mov	DWORD PTR [ebx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1142 : }

	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN29@PMC_DivRem:

; 1077 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_DivRem:
	pop	edi

; 1142 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	16					; 00000010H
_PMC_DivRem_I_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _Initialize_DivRem
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_DivRem PROC					; COMDAT

; 1738 : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _feature$[ebp]

; 1739 :     fp_DivRem_X_X = feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2 ? DivRem_X_X_using_ADX_MULX : DivRem_X_X_using_ADC_MUL;
; 1740 :     return (PMC_STATUS_OK);

	mov	ecx, OFFSET _DivRem_X_X_using_ADX_MULX
	mov	edx, OFFSET _DivRem_X_X_using_ADC_MUL
	mov	eax, DWORD PTR [eax]
	and	eax, 10					; 0000000aH
	cmp	al, 10					; 0000000aH
	cmovne	ecx, edx
	xor	eax, eax
	mov	DWORD PTR _fp_DivRem_X_X, ecx

; 1741 : }

	pop	ebp
	ret	0
_Initialize_DivRem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DivRem_X_X
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_r$1 = 12						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X PROC					; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp

; 40   :     __UNIT_TYPE_DIV* u_buf_2 = (__UNIT_TYPE_DIV*)u_buf;
; 41   :     __UNIT_TYPE u_count_2 = u_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));
; 42   :     __UNIT_TYPE_DIV* v_buf_2 = (__UNIT_TYPE_DIV*)v_buf;
; 43   :     __UNIT_TYPE v_count_2 = v_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));
; 44   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 45   :     {
; 46   :         if (u_buf_2[u_count_2 - 1] == 0)
; 47   :             --u_count_2;
; 48   :         if (v_buf_2[v_count_2 - 1] == 0)
; 49   :             --v_count_2;
; 50   :     }
; 51   :     if (v_count_2 == 1)

	mov	eax, DWORD PTR _v_count$[ebp]
	push	esi
	push	edi
	cmp	eax, 1
	jne	SHORT $LN5@DivRem_X_X

; 52   :     {
; 53   :         if (u_count_2 == 1)

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	edi, DWORD PTR [eax]
	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, 1
	jne	SHORT $LN7@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR _u_buf$[ebp]

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	edi
	push	0

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	esi, DWORD PTR [eax]

; 385  :             return ((_UINT32_T)(t / v));

	push	esi
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 57   :             q_buf[0] = q;

	mov	ecx, DWORD PTR _q_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             *r = (_UINT32_T)(t % v);

	push	0
	push	edi
	push	0
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 57   :             q_buf[0] = q;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             *r = (_UINT32_T)(t % v);

	call	__aullrem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 58   :             r_buf[0] = r;

	mov	ecx, DWORD PTR _r_buf$[ebp]
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 83   : }

	pop	esi
	pop	ebp
	ret	0
$LN7@DivRem_X_X:

; 59   : #ifdef ENABLED_PERFORMANCE_COUNTER
; 60   :             if (sizeof(r) == sizeof(_UINT64_T))
; 61   :                 IncrementDIV64Counter();
; 62   :             else
; 63   :                 IncrementDIV32Counter();
; 64   : #endif
; 65   :         }
; 66   :         else
; 67   :         {
; 68   :             __UNIT_TYPE_DIV r;
; 69   :             DivRem_X_1W(u_buf_2, u_count_2, v_buf_2[0], (__UNIT_TYPE_DIV*)q_buf, &r);

	lea	ecx, DWORD PTR _r$1[ebp]
	push	ecx
	push	DWORD PTR _q_buf$[ebp]
	push	edi
	push	eax
	push	DWORD PTR _u_buf$[ebp]
	call	_DivRem_X_1W

; 70   :             r_buf[0] = r;

	mov	ecx, DWORD PTR _r_buf$[ebp]
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _r$1[ebp]
	pop	edi
	mov	DWORD PTR [ecx], eax

; 83   : }

	pop	esi
	pop	ebp
	ret	0
$LN5@DivRem_X_X:

; 71   :         }
; 72   :     }
; 73   :     else
; 74   :     {
; 75   :         if (u_count_2 < v_count_2)

	mov	ecx, DWORD PTR _u_count$[ebp]
	cmp	ecx, eax
	jae	SHORT $LN11@DivRem_X_X

; 77   :             q_buf[0] = 0;

	mov	eax, DWORD PTR _q_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _r_buf$[ebp]
	mov	esi, DWORD PTR _u_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 77   :             q_buf[0] = 0;

	mov	DWORD PTR [eax], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	rep movsd
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 83   : }

	pop	esi
	pop	ebp
	ret	0
$LN11@DivRem_X_X:
	pop	edi
	pop	esi
	mov	DWORD PTR _v_count$[ebp], eax
	mov	DWORD PTR _u_count$[ebp], ecx
	pop	ebp

; 78   :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);
; 79   :         }
; 80   :         else
; 81   :             (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, (__UNIT_TYPE_DIV*)work_v_buf, (__UNIT_TYPE_DIV*)q_buf, (__UNIT_TYPE_DIV*)r_buf);

	jmp	DWORD PTR _fp_DivRem_X_X
_DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DivRem_X_1W
_TEXT	SEGMENT
tv6404 = -8						; size = 8
tv6403 = -8						; size = 8
tv6394 = -8						; size = 8
tv6393 = -8						; size = 8
tv6383 = -8						; size = 8
tv6382 = -8						; size = 8
tv6372 = -8						; size = 8
tv6371 = -8						; size = 8
tv6361 = -8						; size = 8
tv6360 = -8						; size = 8
tv6350 = -8						; size = 8
tv6349 = -8						; size = 8
tv6339 = -8						; size = 8
tv6338 = -8						; size = 8
tv6328 = -8						; size = 8
tv6327 = -8						; size = 8
tv6317 = -8						; size = 8
tv6316 = -8						; size = 8
tv6306 = -8						; size = 8
tv6305 = -8						; size = 8
tv6295 = -8						; size = 8
tv6294 = -8						; size = 8
tv6284 = -8						; size = 8
tv6283 = -8						; size = 8
tv6273 = -8						; size = 8
tv6272 = -8						; size = 8
tv6262 = -8						; size = 8
tv6261 = -8						; size = 8
tv6251 = -8						; size = 8
tv6250 = -8						; size = 8
tv6240 = -8						; size = 8
tv6239 = -8						; size = 8
tv6229 = -8						; size = 8
tv6228 = -8						; size = 8
tv6218 = -8						; size = 8
tv6217 = -8						; size = 8
tv6207 = -8						; size = 8
tv6206 = -8						; size = 8
tv6196 = -8						; size = 8
tv6195 = -8						; size = 8
tv6185 = -8						; size = 8
tv6184 = -8						; size = 8
tv6174 = -8						; size = 8
tv6173 = -8						; size = 8
tv6163 = -8						; size = 8
tv6162 = -8						; size = 8
tv6152 = -8						; size = 8
tv6151 = -8						; size = 8
tv6141 = -8						; size = 8
tv6140 = -8						; size = 8
tv6130 = -8						; size = 8
tv6129 = -8						; size = 8
tv6119 = -8						; size = 8
tv6118 = -8						; size = 8
tv6108 = -8						; size = 8
tv6107 = -8						; size = 8
tv6097 = -8						; size = 8
tv6096 = -8						; size = 8
tv6086 = -8						; size = 8
tv6085 = -8						; size = 8
tv6075 = -8						; size = 8
tv6074 = -8						; size = 8
tv6064 = -8						; size = 8
tv6063 = -8						; size = 8
tv6050 = -8						; size = 8
tv6049 = -8						; size = 8
tv6040 = -8						; size = 8
tv6039 = -8						; size = 8
tv6029 = -8						; size = 8
tv6028 = -8						; size = 8
tv6018 = -8						; size = 8
tv6017 = -8						; size = 8
tv6007 = -8						; size = 8
tv6006 = -8						; size = 8
tv5996 = -8						; size = 8
tv5995 = -8						; size = 8
tv5985 = -8						; size = 8
tv5984 = -8						; size = 8
tv5974 = -8						; size = 8
tv5973 = -8						; size = 8
tv5963 = -8						; size = 8
tv5962 = -8						; size = 8
tv5952 = -8						; size = 8
tv5951 = -8						; size = 8
tv5941 = -8						; size = 8
tv5940 = -8						; size = 8
tv5930 = -8						; size = 8
tv5929 = -8						; size = 8
tv5919 = -8						; size = 8
tv5918 = -8						; size = 8
tv5908 = -8						; size = 8
tv5907 = -8						; size = 8
tv5897 = -8						; size = 8
tv5896 = -8						; size = 8
tv5886 = -8						; size = 8
tv5885 = -8						; size = 8
tv5873 = -8						; size = 8
tv5872 = -8						; size = 8
tv5863 = -8						; size = 8
tv5862 = -8						; size = 8
tv5852 = -8						; size = 8
tv5851 = -8						; size = 8
tv5841 = -8						; size = 8
tv5840 = -8						; size = 8
tv5830 = -8						; size = 8
tv5829 = -8						; size = 8
tv5819 = -8						; size = 8
tv5818 = -8						; size = 8
tv5808 = -8						; size = 8
tv5807 = -8						; size = 8
tv5797 = -8						; size = 8
tv5796 = -8						; size = 8
tv5784 = -8						; size = 8
tv5783 = -8						; size = 8
tv5774 = -8						; size = 8
tv5773 = -8						; size = 8
tv5763 = -8						; size = 8
tv5762 = -8						; size = 8
tv5752 = -8						; size = 8
tv5751 = -8						; size = 8
tv5739 = -8						; size = 8
tv5738 = -8						; size = 8
tv5729 = -8						; size = 8
tv5728 = -8						; size = 8
tv5524 = -8						; size = 8
tv5523 = -8						; size = 8
_count$1$ = 8						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v$ = 16						; size = 4
_q_buf$ = 20						; size = 4
_r_buf$ = 24						; size = 4
_DivRem_X_1W PROC					; COMDAT

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 87   :     // u の最上位ワードは 0 でありうることに注意すること。
; 88   :     __UNIT_TYPE_DIV* up = u_buf + u_buf_len - 1;

	mov	ecx, DWORD PTR _u_buf_len$[ebp]

; 89   :     __UNIT_TYPE_DIV* qp = q_buf + u_buf_len - 1;
; 90   :     __UNIT_TYPE u_count = u_buf_len;
; 91   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 92   :     {
; 93   :         while (*up == 0)
; 94   :         {
; 95   :             --up;
; 96   :             --qp;
; 97   :             --u_count;
; 98   :         }
; 99   :     }
; 100  :     __UNIT_TYPE_DIV r = 0;
; 101  :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, ecx
	push	ebx
	push	esi
	mov	esi, DWORD PTR _q_buf$[ebp]
	xor	ebx, ebx
	push	edi
	mov	edi, DWORD PTR _u_buf$[ebp]
	add	esi, -4					; fffffffcH
	add	edi, -4					; fffffffcH
	shr	eax, 5
	mov	DWORD PTR _count$1$[ebp], eax
	lea	esi, DWORD PTR [esi+ecx*4]
	lea	edi, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR _v$[ebp]

; 102  :     while (count != 0)

	test	eax, eax
	je	$LN555@DivRem_X_1
$LL4@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	ecx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6403[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6404[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6393[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6394[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6382[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6383[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6371[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-12], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-16]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6372[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6360[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-16], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-20]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6361[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6349[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-20], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-24]

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6350[ebp+4], edx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6338[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-24], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-28]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6339[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6327[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-28], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-32]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6328[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6316[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-32], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-36]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6317[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6305[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-36], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-40]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6306[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6294[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-40], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-44]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6295[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6283[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-44], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-48]

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6284[ebp+4], edx
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6272[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-48], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-52]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6273[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6261[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-52], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-56]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6262[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6250[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-56], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-60]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6251[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6239[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-60], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-64]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6240[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6228[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-64], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-68]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6229[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6217[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-68], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-72]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6218[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6206[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-72], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-76]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6207[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6195[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-76], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-80]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6196[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6184[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-80], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-84]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6185[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6173[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-84], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-88]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6174[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6162[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-88], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-92]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6163[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6151[ebp+4], ebx
	pop	ebx
	push	ebx
	mov	DWORD PTR [esi-92], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax

; 428  :             *q = (_UINT32_T)(t / v);

	push	0
	push	DWORD PTR _v$[ebp]

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, ecx

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6152[ebp+4], edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR [edi-96]

; 428  :             *q = (_UINT32_T)(t / v);

	push	eax
	push	edx
	call	__aulldvrm
	mov	DWORD PTR tv6140[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-96], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-100]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6141[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6129[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-100], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-104]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6130[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6118[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-104], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-108]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6119[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6107[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-108], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-112]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6108[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6096[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-112], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-116]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6097[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6085[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-116], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-120]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6086[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6074[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-120], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6075[ebp+4], edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, DWORD PTR [edi-124]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6063[ebp+4], ebx
	pop	ebx
	mov	ebx, ecx
	mov	DWORD PTR [esi-124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 138  :         --count;

	mov	ecx, DWORD PTR _count$1$[ebp]
	add	edi, -128				; ffffff80H
	dec	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6064[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 137  :         qp -= 32;

	add	esi, -128				; ffffff80H

; 138  :         --count;

	mov	DWORD PTR _count$1$[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 32					; 00000020H
	mov	edx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 102  :     while (count != 0)

	test	ecx, ecx
	mov	ecx, DWORD PTR _v$[ebp]
	jne	$LL4@DivRem_X_1
$LN555@DivRem_X_1:

; 139  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 140  :         if (sizeof(r) == sizeof(_UINT64_T))
; 141  :             AddToDIV64Counter(32);
; 142  :         else
; 143  :             AddToDIV32Counter(32);
; 144  : #endif
; 145  :     }
; 146  : 
; 147  :     if (u_count & 0x10)

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	test	al, 16					; 00000010H
	je	$LN415@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	ecx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6049[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6050[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6039[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6040[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6028[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6029[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6017[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-12], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-16]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6018[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6006[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-16], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-20]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6007[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5995[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-20], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-24]

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv5996[ebp+4], edx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5984[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-24], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-28]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5985[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5973[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-28], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-32]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5974[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5962[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-32], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-36]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5963[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5951[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-36], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-40]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5952[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5940[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-40], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-44]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5941[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5929[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-44], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-48]

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv5930[ebp+4], edx
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5918[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-48], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-52]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5919[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5907[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-52], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-56]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5908[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5896[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-56], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-60]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5897[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5885[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-60], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5886[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 165  :         up -= 16;

	sub	edi, 64					; 00000040H

; 166  :         qp -= 16;

	sub	esi, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 16					; 00000010H
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN415@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 175  :     if (u_count & 0x8)

	test	al, 8
	je	$LN483@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5872[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5873[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5862[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5863[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5851[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5852[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5840[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-12], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-16]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5841[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5829[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-16], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-20]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5830[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5818[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-20], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-24]

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv5819[ebp+4], edx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5807[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-24], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-28]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5808[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5796[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-28], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5797[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 185  :         up -= 8;

	sub	edi, 32					; 00000020H

; 186  :         qp -= 8;

	sub	esi, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 8
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN483@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 195  :     if (u_count & 0x4)

	test	al, 4
	je	$LN519@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5783[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5784[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5773[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5774[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5762[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5763[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5751[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-12], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5752[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 201  :         up -= 4;

	sub	edi, 16					; 00000010H

; 202  :         qp -= 4;

	sub	esi, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 4
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN519@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 211  :     if (u_count & 0x2)

	test	al, 2
	je	SHORT $LN539@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5738[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5739[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5728[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-4], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5729[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 215  :         up -= 2;

	sub	edi, 8

; 216  :         qp -= 2;

	sub	esi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 2
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN539@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 225  :     if (u_count & 0x1)

	test	al, 1
	je	SHORT $LN557@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5523[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv5524[ebp+4], edx
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 238  :     *r_buf = r;

	mov	eax, DWORD PTR _r_buf$[ebp]
	pop	edi

; 239  : }

	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN557@DivRem_X_1:

; 238  :     *r_buf = r;

	mov	eax, DWORD PTR _r_buf$[ebp]
	pop	edi

; 239  : }

	pop	esi
	mov	DWORD PTR [eax], ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_1W ENDP
_TEXT	ENDS
END
