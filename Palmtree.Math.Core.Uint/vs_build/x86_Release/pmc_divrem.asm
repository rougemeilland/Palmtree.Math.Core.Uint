; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_divrem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_DivRem_X_1W
PUBLIC	_Rem_X_1W
PUBLIC	_DivRem_X_X
PUBLIC	_Initialize_DivRem
PUBLIC	_PMC_DivRem_I_X@16
PUBLIC	_PMC_DivRem_L_X@20
PUBLIC	_PMC_DivRem_X_I@16
PUBLIC	_PMC_DivRem_X_L@20
PUBLIC	_PMC_DivRem_X_X@16
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_RightShift_Imp_DIV:PROC
EXTRN	_LeftShift_Imp_DIV:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aulldvrm:PROC
EXTRN	__aullrem:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_fp_DivRem_X_X DD 01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DivRem_X_X_using_ADX_MULX
_TEXT	SEGMENT
tv658 = -40						; size = 4
tv659 = -36						; size = 4
_value$1$ = -32						; size = 4
_value$1$ = -32						; size = 4
_lh_mi$1$ = -28						; size = 4
_rh_mi$1$ = -24						; size = 4
$T1 = -20						; size = 4
tv657 = -16						; size = 4
tv655 = -12						; size = 4
_rh_hi$1$ = -8						; size = 4
_v1$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_lh_mi$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X_using_ADX_MULX PROC				; COMDAT

; 1122 : {

	push	ebp
	mov	ebp, esp

; 1123 :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 1124 :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 1125 :     {
; 1126 :         while (u_buf[u_buf_len - 1] == 0)
; 1127 :             --u_buf_len;
; 1128 :         while (v_buf[v_buf_len - 1] == 0)
; 1129 :             --v_buf_len;
; 1130 :     }
; 1131 : 
; 1132 : #ifdef _DEBUG
; 1133 :     if (v_buf[v_buf_len - 1] == 0)
; 1134 :     {
; 1135 :         ; // このルートには到達しないはず。デバッグ用。
; 1136 :     }
; 1137 : #endif
; 1138 : 
; 1139 : #ifdef DO_TRACE
; 1140 :     ReportLabel("uとvのシフト");
; 1141 :     ReportDump("u", (__UNIT_TYPE*)u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1142 :     ReportDump("v", (__UNIT_TYPE*)v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1143 : #endif
; 1144 : 
; 1145 :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	edx, DWORD PTR _v_buf_len$[ebp]
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_buf$[ebp]
	push	edi
	mov	eax, DWORD PTR [esi+edx*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 653  :         if (x == 0)

	test	eax, eax
	jne	SHORT $LN19@DivRem_X_X

; 654  :             return (sizeof(x) * 8);

	mov	edi, 32					; 00000020H
	mov	DWORD PTR $T1[ebp], edi
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1154 :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	mov	ebx, DWORD PTR _r_buf$[ebp]
	push	0
	push	ebx
	push	edi
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _u_buf$[ebp]
	call	_LeftShift_Imp_DIV

; 1155 :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	push	0
	push	DWORD PTR _work_v_buf$[ebp]
	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	push	esi
	call	_LeftShift_Imp_DIV
	mov	eax, DWORD PTR _u_buf_len$[ebp]
	add	esp, 40					; 00000028H
	mov	edx, DWORD PTR _v_buf_len$[ebp]
$LN11@DivRem_X_X:

; 1156 :     }
; 1157 : #ifdef DO_TRACE
; 1158 :     ReportDump("⇒u", (__UNIT_TYPE*)r_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1159 :     ReportDump("⇒v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1160 : #endif
; 1161 : 
; 1162 :     __UNIT_TYPE_DIV* work_u_buf = r_buf;
; 1163 :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	mov	edi, eax
	sub	edi, edx
	lea	esi, DWORD PTR [ecx-4]
	lea	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, -8					; fffffff8H
	lea	esi, DWORD PTR [esi+edx*4]
	add	eax, -2					; fffffffeH
	mov	DWORD PTR tv659[ebp], esi
	mov	DWORD PTR tv658[ebp], ecx
	lea	eax, DWORD PTR [ebx+eax*4]
$LN105@DivRem_X_X:

; 517  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	edx, DWORD PTR [eax+8]

; 518  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	ebx, DWORD PTR [eax+4]

; 519  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];
; 520  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR tv657[ebp], eax
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv655[ebp], eax

; 521  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _rh_hi$1$[ebp], edx
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	DWORD PTR _v2$1$[ebp], eax

; 399  :     if (uj == v1)

	cmp	edx, esi
	jne	SHORT $LN30@DivRem_X_X

; 400  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN29@DivRem_X_X
$LN19@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 658  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 659  : #elif defined(__GNUC__)
; 660  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 661  : #else
; 662  : #error unknown compiler
; 663  : #endif
; 664  : #elif defined(_M_X64)
; 665  : #ifdef _MSC_VER
; 666  :         _UINT32_T pos;
; 667  :         _BitScanReverse(&pos, x);
; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	edi, 31					; 0000001fH
	sub	edi, eax
	mov	DWORD PTR $T1[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1146 :     if (d_factor == 0)

	jne	SHORT $LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ebx, DWORD PTR _r_buf$[ebp]
	mov	edi, ebx
	mov	eax, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, eax
	mov	esi, DWORD PTR _u_buf$[ebp]
	rep movsd
	mov	edi, DWORD PTR _work_v_buf$[ebp]
	mov	ecx, edx
	mov	esi, DWORD PTR _v_buf$[ebp]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1150 :         r_buf[u_buf_len] = 0;

	mov	DWORD PTR [ebx+eax*4], 0

; 1151 :     }

	jmp	SHORT $LN11@DivRem_X_X
$LN30@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	mov	eax, edx
	or	ecx, ebx

; 385  :             return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 409  :     return (q);

	mov	esi, eax
$LN29@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, ebx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, DWORD PTR _rh_hi$1$[ebp]
	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 466  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN103@DivRem_X_X

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);
; 472  :     }
; 473  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN26@DivRem_X_X

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);
; 479  :     }
; 480  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN103@DivRem_X_X

; 530  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv655[ebp]
	jbe	SHORT $LN103@DivRem_X_X
$LN26@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _rh_hi$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 532  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ebx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 466  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN103@DivRem_X_X

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);
; 472  :     }
; 473  :     else if (lh_mi > rh_mi)

	cmp	DWORD PTR _lh_mi$1$[ebp], ebx
	ja	SHORT $LN27@DivRem_X_X

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);
; 479  :     }
; 480  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN103@DivRem_X_X

; 533  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv655[ebp]
	jbe	SHORT $LN103@DivRem_X_X
$LN27@DivRem_X_X:

; 534  :         return (q_);
; 535  :     --q_;

	dec	esi
$LN103@DivRem_X_X:

; 1164 : 
; 1165 :     for (;;)
; 1166 :     {
; 1167 :         __UNIT_TYPE_DIV q_ = CalculateQ_X(work_u_buf, work_v_buf, v_buf_len, q_index);
; 1168 : 
; 1169 : #ifdef DO_TRACE
; 1170 :         ReportLabel("uの減算");
; 1171 :         ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1172 :         ReportDump("v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1173 :         ReportVar("q_", q_);
; 1174 : #endif
; 1175 :         if (SubtructOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	mov	ebx, DWORD PTR _r_buf$[ebp]
	push	esi
	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	ebx
	call	_SubtructOneLineX
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN12@DivRem_X_X

; 1176 :         {
; 1177 : #ifdef DO_TRACE
; 1178 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1179 : #endif
; 1180 :             // 桁借りが発生した場合
; 1181 : 
; 1182 : #ifdef DO_TRACE
; 1183 :             ReportLabel("uの加え戻しとq_の更新");
; 1184 :             ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1185 : #endif
; 1186 :             --q_;
; 1187 :             AddOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	dec	esi
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	ebx
	call	_AddOneLineX
	add	esp, 20					; 00000014H
$LN12@DivRem_X_X:

; 1188 : #ifdef DO_TRACE
; 1189 :             ReportVar("q_", q_);
; 1190 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1191 : #endif
; 1192 :         }
; 1193 :         else
; 1194 :         {
; 1195 : #ifdef DO_TRACE
; 1196 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1197 : #endif
; 1198 :         }
; 1199 : 
; 1200 :         if (q_buf != NULL)

	mov	eax, DWORD PTR _q_buf$[ebp]
	test	eax, eax
	je	SHORT $LN14@DivRem_X_X

; 1201 :             q_buf[q_index] = q_;

	mov	DWORD PTR [eax+edi*4], esi
$LN14@DivRem_X_X:

; 1202 : 
; 1203 : #ifdef DO_TRACE
; 1204 :         ReportLabel("qの現在値");
; 1205 :         ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1206 : #endif
; 1207 : 
; 1208 :         if (q_index == 0)

	test	edi, edi
	je	SHORT $LN100@DivRem_X_X

; 1209 :             break;
; 1210 :         --q_index;

	mov	eax, DWORD PTR tv657[ebp]
	dec	edi

; 1211 :     }

	mov	esi, DWORD PTR tv659[ebp]
	sub	eax, 4
	mov	ecx, DWORD PTR tv658[ebp]
	jmp	$LN105@DivRem_X_X
$LN100@DivRem_X_X:

; 1212 : 
; 1213 :     if (d_factor > 0)

	mov	eax, DWORD PTR $T1[ebp]
	test	eax, eax
	je	SHORT $LN16@DivRem_X_X

; 1214 :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	push	0
	push	ebx
	push	eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
	inc	eax
	push	eax
	push	ebx
	call	_RightShift_Imp_DIV
	add	esp, 20					; 00000014H
$LN16@DivRem_X_X:

; 1215 : 
; 1216 : #ifdef DO_TRACE
; 1217 :     ReportLabel("計算終了");
; 1218 :     ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1219 :     ReportDump("r", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1220 : #endif
; 1221 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_X_using_ADX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DivRem_X_X_using_ADC_MUL
_TEXT	SEGMENT
tv658 = -40						; size = 4
tv659 = -36						; size = 4
_value$1$ = -32						; size = 4
_value$1$ = -32						; size = 4
_lh_mi$1$ = -28						; size = 4
_rh_mi$1$ = -24						; size = 4
$T1 = -20						; size = 4
tv657 = -16						; size = 4
tv655 = -12						; size = 4
_rh_hi$1$ = -8						; size = 4
_v1$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_lh_mi$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X_using_ADC_MUL PROC				; COMDAT

; 1065 : {

	push	ebp
	mov	ebp, esp

; 1066 :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 1067 :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 1068 :     {
; 1069 :         while (u_buf[u_buf_len - 1] == 0)
; 1070 :             --u_buf_len;
; 1071 :         while (v_buf[v_buf_len - 1] == 0)
; 1072 :             --v_buf_len;
; 1073 :     }
; 1074 : 
; 1075 : #ifdef _DEBUG
; 1076 :     if (v_buf[v_buf_len - 1] == 0)
; 1077 :     {
; 1078 :         ; // このルートには到達しないはず。デバッグ用。
; 1079 :     }
; 1080 : #endif
; 1081 : 
; 1082 :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	edx, DWORD PTR _v_buf_len$[ebp]
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _v_buf$[ebp]
	push	edi
	mov	eax, DWORD PTR [esi+edx*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 653  :         if (x == 0)

	test	eax, eax
	jne	SHORT $LN18@DivRem_X_X

; 654  :             return (sizeof(x) * 8);

	mov	edi, 32					; 00000020H
	mov	DWORD PTR $T1[ebp], edi
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1091 :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	mov	ebx, DWORD PTR _r_buf$[ebp]
	push	0
	push	ebx
	push	edi
	push	DWORD PTR _u_buf_len$[ebp]
	push	DWORD PTR _u_buf$[ebp]
	call	_LeftShift_Imp_DIV

; 1092 :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	push	0
	push	DWORD PTR _work_v_buf$[ebp]
	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	push	esi
	call	_LeftShift_Imp_DIV
	mov	eax, DWORD PTR _u_buf_len$[ebp]
	add	esp, 40					; 00000028H
	mov	edx, DWORD PTR _v_buf_len$[ebp]
$LN11@DivRem_X_X:

; 1093 :     }
; 1094 : 
; 1095 :     __UNIT_TYPE_DIV* work_u_buf = r_buf;
; 1096 :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	mov	edi, eax
	sub	edi, edx
	lea	esi, DWORD PTR [ecx-4]
	lea	ecx, DWORD PTR [ecx+edx*4]
	add	ecx, -8					; fffffff8H
	lea	esi, DWORD PTR [esi+edx*4]
	add	eax, -2					; fffffffeH
	mov	DWORD PTR tv659[ebp], esi
	mov	DWORD PTR tv658[ebp], ecx
	lea	eax, DWORD PTR [ebx+eax*4]
$LN104@DivRem_X_X:

; 499  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	edx, DWORD PTR [eax+8]

; 500  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	ebx, DWORD PTR [eax+4]

; 501  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];
; 502  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR tv657[ebp], eax
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv655[ebp], eax

; 503  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _rh_hi$1$[ebp], edx
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	DWORD PTR _v2$1$[ebp], eax

; 399  :     if (uj == v1)

	cmp	edx, esi
	jne	SHORT $LN29@DivRem_X_X

; 400  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN28@DivRem_X_X
$LN18@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 658  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 659  : #elif defined(__GNUC__)
; 660  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 661  : #else
; 662  : #error unknown compiler
; 663  : #endif
; 664  : #elif defined(_M_X64)
; 665  : #ifdef _MSC_VER
; 666  :         _UINT32_T pos;
; 667  :         _BitScanReverse(&pos, x);
; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	edi, 31					; 0000001fH
	sub	edi, eax
	mov	DWORD PTR $T1[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1083 :     if (d_factor == 0)

	jne	SHORT $LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ebx, DWORD PTR _r_buf$[ebp]
	mov	edi, ebx
	mov	eax, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, eax
	mov	esi, DWORD PTR _u_buf$[ebp]
	rep movsd
	mov	edi, DWORD PTR _work_v_buf$[ebp]
	mov	ecx, edx
	mov	esi, DWORD PTR _v_buf$[ebp]
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1087 :         r_buf[u_buf_len] = 0;

	mov	DWORD PTR [ebx+eax*4], 0

; 1088 :     }

	jmp	SHORT $LN11@DivRem_X_X
$LN29@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	mov	eax, edx
	or	ecx, ebx

; 385  :             return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 409  :     return (q);

	mov	esi, eax
$LN28@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, ebx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, DWORD PTR _rh_hi$1$[ebp]
	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN102@DivRem_X_X

; 430  :         return (FALSE);
; 431  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN25@DivRem_X_X

; 432  :         return (TRUE);
; 433  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN102@DivRem_X_X

; 505  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv655[ebp]
	jbe	SHORT $LN102@DivRem_X_X
$LN25@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _rh_hi$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 507  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ebx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN102@DivRem_X_X

; 430  :         return (FALSE);
; 431  :     else if (lh_mi > rh_mi)

	cmp	DWORD PTR _lh_mi$1$[ebp], ebx
	ja	SHORT $LN26@DivRem_X_X

; 432  :         return (TRUE);
; 433  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN102@DivRem_X_X

; 508  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv655[ebp]
	jbe	SHORT $LN102@DivRem_X_X
$LN26@DivRem_X_X:

; 509  :         return (q_);
; 510  :     --q_;

	dec	esi
$LN102@DivRem_X_X:

; 1097 : 
; 1098 :     for (;;)
; 1099 :     {
; 1100 :         __UNIT_TYPE_DIV q_ = CalculateQ_(work_u_buf, work_v_buf, v_buf_len, q_index);
; 1101 : 
; 1102 : 
; 1103 :         if (SubtructOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	mov	ebx, DWORD PTR _r_buf$[ebp]
	push	esi
	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	ebx
	call	_SubtructOneLine
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN12@DivRem_X_X

; 1104 :         {
; 1105 :             // 桁借りが発生した場合
; 1106 :             --q_;
; 1107 :             AddOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	push	edi
	push	DWORD PTR _v_buf_len$[ebp]
	dec	esi
	push	DWORD PTR _work_v_buf$[ebp]
	push	DWORD PTR _u_buf_len$[ebp]
	push	ebx
	call	_AddOneLine
	add	esp, 20					; 00000014H
$LN12@DivRem_X_X:

; 1108 :         }
; 1109 : 
; 1110 :         if (q_buf != NULL)

	mov	eax, DWORD PTR _q_buf$[ebp]
	test	eax, eax
	je	SHORT $LN13@DivRem_X_X

; 1111 :             q_buf[q_index] = q_;

	mov	DWORD PTR [eax+edi*4], esi
$LN13@DivRem_X_X:

; 1112 :         if (q_index == 0)

	test	edi, edi
	je	SHORT $LN99@DivRem_X_X

; 1113 :             break;
; 1114 :         --q_index;

	mov	eax, DWORD PTR tv657[ebp]
	dec	edi

; 1115 :     }

	mov	esi, DWORD PTR tv659[ebp]
	sub	eax, 4
	mov	ecx, DWORD PTR tv658[ebp]
	jmp	$LN104@DivRem_X_X
$LN99@DivRem_X_X:

; 1116 : 
; 1117 :     if (d_factor > 0)

	mov	eax, DWORD PTR $T1[ebp]
	test	eax, eax
	je	SHORT $LN15@DivRem_X_X

; 1118 :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	push	0
	push	ebx
	push	eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
	inc	eax
	push	eax
	push	ebx
	call	_RightShift_Imp_DIV
	add	esp, 20					; 00000014H
$LN15@DivRem_X_X:

; 1119 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_X_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _AddOneLineX
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_c$ = 24						; size = 1
_q_index$ = 24						; size = 4
_AddOneLineX PROC					; COMDAT

; 999  : {

	push	ebp
	mov	ebp, esp

; 1000 :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]

; 1001 :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 1002 :     __UNIT_TYPE v_count = v_buf_len;
; 1003 :     char c = 0;

	xor	dl, dl
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx

; 1004 : 
; 1005 :     // まず 32 ワードずつ加算をする。
; 1006 :     __UNIT_TYPE count = v_count >> 5;

	mov	ebx, DWORD PTR _v_buf_len$[ebp]
	push	esi
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR _c$[ebp], dl
	mov	ecx, ebx
	shr	ecx, 5
	push	edi
	mov	edi, DWORD PTR _v_buf$[ebp]

; 1007 :     while (count != 0)

	test	ecx, ecx
	je	$LN3@AddOneLine
	npad	9
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1308 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1309 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1310 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1311 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+32]
	mov	DWORD PTR [esi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [esi+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+36]
	mov	DWORD PTR [esi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [esi+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+40]
	mov	DWORD PTR [esi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [esi+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+44]
	mov	DWORD PTR [esi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [esi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+48]
	mov	DWORD PTR [esi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [esi+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+52]
	mov	DWORD PTR [esi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [esi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+56]
	mov	DWORD PTR [esi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [esi+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+60]
	mov	DWORD PTR [esi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [esi+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+64]
	mov	DWORD PTR [esi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [esi+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+68]
	mov	DWORD PTR [esi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [esi+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+72]
	mov	DWORD PTR [esi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [esi+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+76]
	mov	DWORD PTR [esi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [esi+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+80]
	mov	DWORD PTR [esi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [esi+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+84]
	mov	DWORD PTR [esi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [esi+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [esi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [esi+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+92]
	mov	DWORD PTR [esi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [esi+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+96]
	mov	DWORD PTR [esi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [esi+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+100]
	mov	DWORD PTR [esi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [esi+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+104]
	mov	DWORD PTR [esi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [esi+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+108]
	mov	DWORD PTR [esi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [esi+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+112]
	mov	DWORD PTR [esi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [esi+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+116]
	mov	DWORD PTR [esi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [esi+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+120]
	mov	DWORD PTR [esi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	eax, DWORD PTR [esi+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+124]
	mov	DWORD PTR [esi+124], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1010 :         u_ptr += 32;

	sub	esi, -128				; ffffff80H

; 1011 :         v_ptr += 32;

	sub	edi, -128				; ffffff80H
	mov	BYTE PTR _c$[ebp], dl

; 1012 :         --count;

	sub	ecx, 1
	jne	$LL2@AddOneLine
$LN3@AddOneLine:

; 1013 :     }
; 1014 :     // この時点で未処理の桁は 32 ワード未満のはず
; 1015 : 
; 1016 :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 1017 :     if (v_count & 0x10)

	test	bl, 16					; 00000010H
	je	SHORT $LN4@AddOneLine

; 1018 :     {
; 1019 :         c = _ADD_16WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	push	esi
	push	edi
	push	esi
	push	DWORD PTR _c$[ebp]
	call	__ADD_16WORDS_ADCX_DIV
	add	esp, 16					; 00000010H

; 1020 :         u_ptr += 16;

	add	esi, 64					; 00000040H
	mov	dl, al

; 1021 :         v_ptr += 16;

	add	edi, 64					; 00000040H
$LN4@AddOneLine:

; 1022 :     }
; 1023 :     // この時点で未処理の桁は 16 ワード未満のはず
; 1024 : 
; 1025 :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 1026 :     if (v_count & 0x8)

	test	bl, 8
	je	SHORT $LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	ecx, DWORD PTR [edi]
	mov	DWORD PTR [esi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3620 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3621 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3622 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3623 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1029 :         u_ptr += 8;

	add	esi, 32					; 00000020H

; 1030 :         v_ptr += 8;

	add	edi, 32					; 00000020H
$LN5@AddOneLine:

; 1031 :     }
; 1032 :     // この時点で未処理の桁は 8 ワード未満のはず
; 1033 : 
; 1034 :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 1035 :     if (v_count & 0x4)

	test	bl, 4
	je	SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4160 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4161 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4162 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1038 :         u_ptr += 4;

	add	esi, 16					; 00000010H

; 1039 :         v_ptr += 4;

	add	edi, 16					; 00000010H
$LN6@AddOneLine:

; 1040 :     }
; 1041 :     // この時点で未処理の桁は 4 ワード未満のはず
; 1042 : 
; 1043 :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 1044 :     if (v_count & 0x2)

	test	bl, 2
	je	SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adcx	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4546 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1047 :         u_ptr += 2;

	add	esi, 8

; 1048 :         v_ptr += 2;

	add	edi, 8
$LN7@AddOneLine:

; 1049 :     }
; 1050 :     // この時点で未処理の桁は 2 ワード未満のはず
; 1051 : 
; 1052 :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 1053 :     if (v_count & 0x1)

	test	bl, 1
	je	SHORT $LN8@AddOneLine

; 1054 :     {
; 1055 :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1056 :         ++u_ptr;

	add	esi, 4
$LN8@AddOneLine:

; 1057 :         ++v_ptr;
; 1058 :     }
; 1059 : 
; 1060 :     // 残りの桁の繰り上がりを計算する。
; 1061 :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	sub	ecx, esi
	add	ecx, DWORD PTR _u_buf$[ebp]
	sar	ecx, 2

; 908  :         if (u_count <= 0)

	test	ecx, ecx
	je	SHORT $LN131@AddOneLine
	npad	4
$LL113@AddOneLine:

; 909  :         {
; 910  :             // u の最上位まで達してしまった場合
; 911  :             return;
; 912  :         }
; 913  :         else if (c)

	test	dl, dl
	je	SHORT $LN131@AddOneLine

; 914  :         {
; 915  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 916  : 
; 917  :             // 繰り上がりを継続する
; 918  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, 0
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 919  :             ++u_ptr;

	add	esi, 4

; 920  :             --u_count;

	sub	ecx, 1
	jne	SHORT $LL113@AddOneLine
$LN131@AddOneLine:
	pop	edi

; 1062 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_AddOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _AddOneLine
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_c$ = 24						; size = 1
_q_index$ = 24						; size = 4
_AddOneLine PROC					; COMDAT

; 933  : {

	push	ebp
	mov	ebp, esp

; 934  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]

; 935  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 936  :     __UNIT_TYPE v_count = v_buf_len;
; 937  :     char c = 0;

	xor	dl, dl
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx

; 938  : 
; 939  :     // まず 32 ワードずつ加算をする。
; 940  :     __UNIT_TYPE count = v_count >> 5;

	mov	ebx, DWORD PTR _v_buf_len$[ebp]
	push	esi
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR _c$[ebp], dl
	mov	ecx, ebx
	shr	ecx, 5
	push	edi
	mov	edi, DWORD PTR _v_buf$[ebp]

; 941  :     while (count != 0)

	test	ecx, ecx
	je	$LN3@AddOneLine
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1055 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1056 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1057 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1058 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1059 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+32]
	mov	DWORD PTR [esi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [esi+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+36]
	mov	DWORD PTR [esi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [esi+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+40]
	mov	DWORD PTR [esi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [esi+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+44]
	mov	DWORD PTR [esi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [esi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+48]
	mov	DWORD PTR [esi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [esi+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+52]
	mov	DWORD PTR [esi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [esi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+56]
	mov	DWORD PTR [esi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [esi+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+60]
	mov	DWORD PTR [esi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [esi+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+64]
	mov	DWORD PTR [esi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1071 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [esi+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+68]
	mov	DWORD PTR [esi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1072 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [esi+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+72]
	mov	DWORD PTR [esi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1073 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [esi+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+76]
	mov	DWORD PTR [esi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1074 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [esi+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+80]
	mov	DWORD PTR [esi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1075 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [esi+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+84]
	mov	DWORD PTR [esi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1076 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [esi+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+88]
	mov	DWORD PTR [esi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1077 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [esi+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+92]
	mov	DWORD PTR [esi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1078 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [esi+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+96]
	mov	DWORD PTR [esi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1079 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [esi+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+100]
	mov	DWORD PTR [esi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1080 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [esi+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+104]
	mov	DWORD PTR [esi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1081 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [esi+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+108]
	mov	DWORD PTR [esi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1082 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [esi+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+112]
	mov	DWORD PTR [esi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1083 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [esi+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+116]
	mov	DWORD PTR [esi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1084 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [esi+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+120]
	mov	DWORD PTR [esi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1085 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	eax, DWORD PTR [esi+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+124]
	mov	DWORD PTR [esi+124], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 944  :         u_ptr += 32;

	sub	esi, -128				; ffffff80H

; 945  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H
	mov	BYTE PTR _c$[ebp], dl

; 946  :         --count;

	sub	ecx, 1
	jne	$LL2@AddOneLine
$LN3@AddOneLine:

; 947  :     }
; 948  :     // この時点で未処理の桁は 32 ワード未満のはず
; 949  : 
; 950  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 951  :     if (v_count & 0x10)

	test	bl, 16					; 00000010H
	je	SHORT $LN4@AddOneLine

; 952  :     {
; 953  :         c = _ADD_16WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	push	esi
	push	edi
	push	esi
	push	DWORD PTR _c$[ebp]
	call	__ADD_16WORDS_ADC_DIV
	add	esp, 16					; 00000010H

; 954  :         u_ptr += 16;

	add	esi, 64					; 00000040H
	mov	dl, al

; 955  :         v_ptr += 16;

	add	edi, 64					; 00000040H
$LN4@AddOneLine:

; 956  :     }
; 957  :     // この時点で未処理の桁は 16 ワード未満のはず
; 958  : 
; 959  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 960  :     if (v_count & 0x8)

	test	bl, 8
	je	SHORT $LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	ecx, DWORD PTR [edi]
	mov	DWORD PTR [esi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3535 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3536 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3537 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3538 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3539 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3540 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3541 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 963  :         u_ptr += 8;

	add	esi, 32					; 00000020H

; 964  :         v_ptr += 8;

	add	edi, 32					; 00000020H
$LN5@AddOneLine:

; 965  :     }
; 966  :     // この時点で未処理の桁は 8 ワード未満のはず
; 967  : 
; 968  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 969  :     if (v_count & 0x4)

	test	bl, 4
	je	SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4103 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4104 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4105 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 972  :         u_ptr += 4;

	add	esi, 16					; 00000010H

; 973  :         v_ptr += 4;

	add	edi, 16					; 00000010H
$LN6@AddOneLine:

; 974  :     }
; 975  :     // この時点で未処理の桁は 4 ワード未満のはず
; 976  : 
; 977  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 978  :     if (v_count & 0x2)

	test	bl, 2
	je	SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4503 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 981  :         u_ptr += 2;

	add	esi, 8

; 982  :         v_ptr += 2;

	add	edi, 8
$LN7@AddOneLine:

; 983  :     }
; 984  :     // この時点で未処理の桁は 2 ワード未満のはず
; 985  : 
; 986  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 987  :     if (v_count & 0x1)

	test	bl, 1
	je	SHORT $LN8@AddOneLine

; 988  :     {
; 989  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 990  :         ++u_ptr;

	add	esi, 4
$LN8@AddOneLine:

; 991  :         ++v_ptr;
; 992  :     }
; 993  : 
; 994  :     // 残りの桁の繰り上がりを計算する。
; 995  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	lea	ecx, DWORD PTR [eax*4+4]
	sub	ecx, esi
	add	ecx, DWORD PTR _u_buf$[ebp]
	sar	ecx, 2

; 908  :         if (u_count <= 0)

	test	ecx, ecx
	je	SHORT $LN131@AddOneLine
	npad	7
$LL113@AddOneLine:

; 909  :         {
; 910  :             // u の最上位まで達してしまった場合
; 911  :             return;
; 912  :         }
; 913  :         else if (c)

	test	dl, dl
	je	SHORT $LN131@AddOneLine

; 914  :         {
; 915  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 916  : 
; 917  :             // 繰り上がりを継続する
; 918  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
	adc	eax, 0
	mov	DWORD PTR [esi], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 919  :             ++u_ptr;

	add	esi, 4

; 920  :             --u_count;

	sub	ecx, 1
	jne	SHORT $LL113@AddOneLine
$LN131@AddOneLine:
	pop	edi

; 996  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_AddOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DoCarry
_TEXT	SEGMENT
_c$ = 8							; size = 1
_u_ptr$ = 12						; size = 4
_u_count$ = 16						; size = 4
_DoCarry PROC						; COMDAT

; 904  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 905  :     // 繰り上がりを続く限り行う
; 906  :     for (;;)
; 907  :     {
; 908  :         if (u_count <= 0)

	mov	esi, DWORD PTR _u_count$[ebp]
	test	esi, esi
	je	SHORT $LN16@DoCarry
	mov	edx, DWORD PTR _u_ptr$[ebp]
	mov	al, BYTE PTR _c$[ebp]
$LL2@DoCarry:

; 909  :         {
; 910  :             // u の最上位まで達してしまった場合
; 911  :             return;
; 912  :         }
; 913  :         else if (c)

	test	al, al
	je	SHORT $LN16@DoCarry

; 914  :         {
; 915  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 916  : 
; 917  :             // 繰り上がりを継続する
; 918  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
	adc	ecx, 0
	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 919  :             ++u_ptr;

	add	edx, 4

; 920  :             --u_count;

	sub	esi, 1
	jne	SHORT $LL2@DoCarry
$LN16@DoCarry:
	pop	esi

; 921  :         }
; 922  :         else
; 923  :         {
; 924  :             // u の最上位に達しておらず、かつキャリーが立っていない場合
; 925  : 
; 926  :             // 繰り上がりを中断し、復帰する。
; 927  :             return;
; 928  :         }
; 929  :     }
; 930  : }

	pop	ebp
	ret	0
_DoCarry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _SubtructOneLineX
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_k$1$ = 24						; size = 4
_t_lo$1 = 24						; size = 4
_t_lo$2 = 24						; size = 4
_t_lo$3 = 24						; size = 4
_t_lo$4 = 24						; size = 4
_t_lo$5 = 24						; size = 4
_t_lo$6 = 24						; size = 4
_t_lo$7 = 24						; size = 4
_t_lo$8 = 24						; size = 4
_t_lo$9 = 24						; size = 4
_t_lo$10 = 24						; size = 4
_t_lo$11 = 24						; size = 4
_t_lo$12 = 24						; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
_SubtructOneLineX PROC					; COMDAT

; 753  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 754  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx
	push	esi

; 755  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 756  :     __UNIT_TYPE v_count = v_buf_len;
; 757  :     __UNIT_TYPE_DIV k = 0;
; 758  :     char c = 0;

	xor	bl, bl
	mov	DWORD PTR _k$1$[ebp], 0
	lea	ecx, DWORD PTR [ecx+eax*4]

; 759  : 
; 760  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	mov	edx, eax
	shr	edx, 5
	push	edi

; 761  :     while (count != 0)

	mov	edi, DWORD PTR _v_buf$[ebp]
	test	edx, edx
	mov	DWORD PTR _count$1$[ebp], edx
	mov	edx, DWORD PTR _q_$[ebp]
	je	$LN3@SubtructOn
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$12[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$11[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$10[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax
	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [edi+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+44], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+60]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+64]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+64], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+68]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+68], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+72]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+72], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+76]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+76], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+80]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+80], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+84]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+84], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+88]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+88], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+92]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+92], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+96]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+96], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+100]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+100], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+104]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+104], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+108]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+108], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+112]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+112], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+116]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+116], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+120]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+120], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+124]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	edx, 0
	adcx	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 797  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 796  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H

; 797  :         --count;

	dec	edx
	mov	DWORD PTR _v_buf$[ebp], edi
	sub	ecx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 761  :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _q_$[ebp]
	jne	$LL2@SubtructOn
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN3@SubtructOn:

; 798  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 799  :         if (sizeof(k) == sizeof(_UINT64_T))
; 800  :             AddToMULTI64Counter(32);
; 801  :         else
; 802  :             AddToMULTI32Counter(32);
; 803  : #endif
; 804  :     }
; 805  : 
; 806  :     if (v_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN604@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$9[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$8[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$7[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax
	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [edi+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	setb	bl
	mov	DWORD PTR [ecx+44], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
	mov	edx, 0

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+60]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	add	esi, DWORD PTR _t_hi$2$[ebp]
	adcx	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 825  :         v_ptr += 16;

	add	edi, 64					; 00000040H
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN604@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 834  :     if (v_count & 0x8)

	test	al, 8
	je	$LN824@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$6[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$5[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$4[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax
	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+28]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 845  :         v_ptr += 8;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 845  :         v_ptr += 8;

	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 834  :     if (v_count & 0x8)

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	jmp	SHORT $LN704@SubtructOn
$LN824@SubtructOn:
	mov	edx, DWORD PTR _k$1$[ebp]
$LN704@SubtructOn:

; 846  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 847  :         if (sizeof(k) == sizeof(_UINT64_T))
; 848  :             AddToMULTI64Counter(8);
; 849  :         else
; 850  :             AddToMULTI32Counter(8);
; 851  : #endif
; 852  :     }
; 853  : 
; 854  :     if (v_count & 0x4)

	test	al, 4
	je	$LN756@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$3[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
	adcx	eax, edx
	mov	DWORD PTR _t_hi$2$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$2[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 861  :         v_ptr += 4;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 861  :         v_ptr += 4;

	add	edi, 16					; 00000010H
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN756@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 870  :     if (v_count & 0x2)

	test	al, 2
	je	SHORT $LN784@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$1[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 875  :         v_ptr += 2;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, edx
	mov	DWORD PTR _k$1$[ebp], eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 874  :         u_ptr += 2;

	add	ecx, 8

; 875  :         v_ptr += 2;

	add	edi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [eax], edx
	mov	edx, DWORD PTR _k$1$[ebp]
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN784@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 884  :     if (v_count & 0x1)

	test	al, 1
	je	SHORT $LN800@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	add	esi, DWORD PTR _k$1$[ebp]
	adcx	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax
	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 887  :         u_ptr += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 361  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN800@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 897  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, edx
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 900  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	eax, DWORD PTR _u_buf_len$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 898  :     u_ptr += 1;

	add	ecx, 4

; 900  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	lea	esi, DWORD PTR [eax*4+4]
	sub	esi, ecx
	add	esi, DWORD PTR _u_buf$[ebp]
	sar	esi, 2

; 544  :         if (u_count <= 0)

	test	esi, esi
	je	SHORT $LN818@SubtructOn
$LL805@SubtructOn:

; 549  :             {
; 550  :                 // かつそれでも桁借りを行う必要がある場合
; 551  : 
; 552  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 553  :                 return (TRUE);
; 554  :             }
; 555  : 
; 556  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 557  : 
; 558  :             return (FALSE);
; 559  :         }
; 560  :         else if (c)

	test	dl, dl
	je	SHORT $LN811@SubtructOn

; 561  :         {
; 562  :             // u の最上位に達しておらず、かつボローが立っている場合
; 563  : 
; 564  :             // 桁借りを継続する
; 565  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	dl, 255					; 000000ffH
	sbb	eax, 0
	mov	DWORD PTR [ecx], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 566  :             ++up;

	add	ecx, 4

; 567  :             --u_count;

	sub	esi, 1
	jne	SHORT $LL805@SubtructOn
$LN818@SubtructOn:

; 545  :         {
; 546  :             // u の最上位まで達してしまった場合
; 547  : 
; 548  :             if (c)

	xor	eax, eax
	test	dl, dl
	pop	edi

; 901  : }

	pop	esi

; 548  :             if (c)

	setne	al

; 901  : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN811@SubtructOn:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SubtructOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _SubtructOneLine
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_k$1$ = 24						; size = 4
_t_lo$1 = 24						; size = 4
_t_lo$2 = 24						; size = 4
_t_lo$3 = 24						; size = 4
_t_lo$4 = 24						; size = 4
_t_lo$5 = 24						; size = 4
_t_lo$6 = 24						; size = 4
_t_lo$7 = 24						; size = 4
_t_lo$8 = 24						; size = 4
_t_lo$9 = 24						; size = 4
_t_lo$10 = 24						; size = 4
_t_lo$11 = 24						; size = 4
_t_lo$12 = 24						; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
_SubtructOneLine PROC					; COMDAT

; 602  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 603  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx
	push	esi

; 604  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 605  :     __UNIT_TYPE v_count = v_buf_len;
; 606  :     __UNIT_TYPE_DIV k = 0;
; 607  :     char c = 0;

	xor	bl, bl
	mov	DWORD PTR _k$1$[ebp], 0
	lea	ecx, DWORD PTR [ecx+eax*4]

; 608  : 
; 609  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	mov	edx, eax
	shr	edx, 5
	push	edi

; 610  :     while (count != 0)

	mov	edi, DWORD PTR _v_buf$[ebp]
	test	edx, edx
	mov	DWORD PTR _count$1$[ebp], edx
	mov	edx, DWORD PTR _q_$[ebp]
	je	$LN3@SubtructOn
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$12[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$11[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$10[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+24]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+44], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax
	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+60]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+64]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+64], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+68]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+68], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+72]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+72], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+76]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+76], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+80]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+80], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+84]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+84], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+88]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+88], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+92]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+92], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+96]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+96], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+100]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+100], eax
	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+104]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+104], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+108]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+108], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+112]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+112], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+116]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+116], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+120]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+120], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+124]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+124], eax
	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 644  :         u_ptr += 32;

	sub	ecx, -128				; ffffff80H

; 645  :         v_ptr += 32;

	sub	edi, -128				; ffffff80H
	mov	DWORD PTR _v_buf$[ebp], edi

; 646  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 646  :         --count;

	dec	edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 646  :         --count;

	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 610  :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _q_$[ebp]
	jne	$LL2@SubtructOn
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN3@SubtructOn:

; 647  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 648  :         if (sizeof(k) == sizeof(_UINT64_T))
; 649  :             AddToMULTI64Counter(32);
; 650  :         else
; 651  :             AddToMULTI32Counter(32);
; 652  : #endif
; 653  :     }
; 654  : 
; 655  :     if (v_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN604@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	edx
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$9[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$8[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$7[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+24]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+28], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+32]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+32], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+36]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+36], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+40]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+40], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+44]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+44], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+48]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+48], eax
	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [eax+52]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+56]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, DWORD PTR _v_buf$[ebp]

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+56], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi+60]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
	adc	edx, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 674  :         v_ptr += 16;

	add	edi, 64					; 00000040H
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN604@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 683  :     if (v_count & 0x8)

	test	al, 8
	je	$LN824@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$6[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$5[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+12], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+16]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+16], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+20]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$4[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+20], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+24]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+24], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+28]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 694  :         v_ptr += 8;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edx, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 694  :         v_ptr += 8;

	add	edi, 32					; 00000020H
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 683  :     if (v_count & 0x8)

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	jmp	SHORT $LN704@SubtructOn
$LN824@SubtructOn:
	mov	edx, DWORD PTR _k$1$[ebp]
$LN704@SubtructOn:

; 695  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 696  :         if (sizeof(k) == sizeof(_UINT64_T))
; 697  :             AddToMULTI64Counter(8);
; 698  :         else
; 699  :             AddToMULTI32Counter(8);
; 700  : #endif
; 701  :     }
; 702  : 
; 703  :     if (v_count & 0x4)

	test	al, 4
	je	$LN756@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$3[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+8]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx+8], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+12]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _t_lo$2[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 710  :         v_ptr += 4;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edx, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], edx

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 710  :         v_ptr += 4;

	add	edi, 16					; 00000010H
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN756@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 719  :     if (v_count & 0x2)

	test	al, 2
	je	SHORT $LN784@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	edi, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _v_buf$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax+4]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
	mov	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	mov	DWORD PTR _t_lo$1[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 724  :         v_ptr += 2;

	mov	edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	eax, esi
	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 723  :         u_ptr += 2;

	add	ecx, 8

; 724  :         v_ptr += 2;

	add	edi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [eax], edx
	mov	edx, DWORD PTR _k$1$[ebp]
	mov	eax, DWORD PTR _v_buf_len$[ebp]
$LN784@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 733  :     if (v_count & 0x1)

	test	al, 1
	je	SHORT $LN800@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [edi]
	mul	DWORD PTR _q_$[ebp]
	mov	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	esi, DWORD PTR _k$1$[ebp]
	adc	edx, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, esi
	mov	DWORD PTR [ecx], eax
	setb	bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 736  :         u_ptr += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 361  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN800@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 746  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	bl, 255					; 000000ffH
	sbb	eax, edx
	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 749  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	eax, DWORD PTR _u_buf_len$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 747  :     u_ptr += 1;

	add	ecx, 4

; 749  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	lea	esi, DWORD PTR [eax*4+4]
	sub	esi, ecx
	add	esi, DWORD PTR _u_buf$[ebp]
	sar	esi, 2

; 544  :         if (u_count <= 0)

	test	esi, esi
	je	SHORT $LN818@SubtructOn
	npad	6
$LL805@SubtructOn:

; 549  :             {
; 550  :                 // かつそれでも桁借りを行う必要がある場合
; 551  : 
; 552  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 553  :                 return (TRUE);
; 554  :             }
; 555  : 
; 556  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 557  : 
; 558  :             return (FALSE);
; 559  :         }
; 560  :         else if (c)

	test	dl, dl
	je	SHORT $LN811@SubtructOn

; 561  :         {
; 562  :             // u の最上位に達しておらず、かつボローが立っている場合
; 563  : 
; 564  :             // 桁借りを継続する
; 565  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	dl, 255					; 000000ffH
	sbb	eax, 0
	mov	DWORD PTR [ecx], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 566  :             ++up;

	add	ecx, 4

; 567  :             --u_count;

	sub	esi, 1
	jne	SHORT $LL805@SubtructOn
$LN818@SubtructOn:

; 545  :         {
; 546  :             // u の最上位まで達してしまった場合
; 547  : 
; 548  :             if (c)

	xor	eax, eax
	test	dl, dl
	pop	edi

; 750  : }

	pop	esi

; 548  :             if (c)

	setne	al

; 750  : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN811@SubtructOn:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_SubtructOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT __MULTIPLYX_DIGIT_UNIT_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
__MULTIPLYX_DIGIT_UNIT_DIV PROC				; COMDAT

; 591  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _vp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 591  : {

	push	ebx
	push	esi

; 592  :     __UNIT_TYPE_DIV t_hi;
; 593  :     __UNIT_TYPE_DIV t_lo;
; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);
; 595  :     _ADDX_UNIT_DIV(_ADDX_UNIT_DIV(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

	mov	esi, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 591  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, eax
	mov	ebx, edx

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edi, DWORD PTR [esi]
	mov	eax, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	edx, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ebx, eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 598  :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 597  :     *k = t_hi;

	mov	DWORD PTR [esi], ebx

; 598  :     return (c);

	pop	esi
	pop	ebx

; 599  : }

	pop	ebp
	ret	0
__MULTIPLYX_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT __MULTIPLY_DIGIT_UNIT_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
__MULTIPLY_DIGIT_UNIT_DIV PROC				; COMDAT

; 580  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _vp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 580  : {

	push	ebx
	push	esi

; 581  :     __UNIT_TYPE_DIV t_hi;
; 582  :     __UNIT_TYPE_DIV t_lo;
; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);
; 584  :     _ADD_UNIT_DIV(_ADD_UNIT_DIV(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

	mov	esi, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 580  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, eax
	mov	ebx, edx

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edi, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	edx, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	al, BYTE PTR _c$[ebp]

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ebx, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 587  :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 586  :     *k = t_hi;

	mov	DWORD PTR [esi], ebx

; 587  :     return (c);

	pop	esi
	pop	ebx

; 588  : }

	pop	ebp
	ret	0
__MULTIPLY_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DoBorrow
_TEXT	SEGMENT
_c$ = 8							; size = 1
_up$ = 12						; size = 4
_u_count$ = 16						; size = 4
_DoBorrow PROC						; COMDAT

; 540  : {

	push	ebp
	mov	ebp, esp

; 541  :     // 桁借りを続く限り行う
; 542  :     for (;;)
; 543  :     {
; 544  :         if (u_count <= 0)

	mov	al, BYTE PTR _c$[ebp]
	push	esi
	mov	esi, DWORD PTR _u_count$[ebp]
	test	esi, esi
	je	SHORT $LN14@DoBorrow
	mov	edx, DWORD PTR _up$[ebp]
$LL2@DoBorrow:

; 554  :             }
; 555  : 
; 556  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 557  : 
; 558  :             return (FALSE);
; 559  :         }
; 560  :         else if (c)

	test	al, al
	je	SHORT $LN8@DoBorrow

; 561  :         {
; 562  :             // u の最上位に達しておらず、かつボローが立っている場合
; 563  : 
; 564  :             // 桁借りを継続する
; 565  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, 255					; 000000ffH
	sbb	ecx, 0
	mov	DWORD PTR [edx], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 566  :             ++up;

	add	edx, 4

; 567  :             --u_count;

	sub	esi, 1
	jne	SHORT $LL2@DoBorrow
$LN14@DoBorrow:

; 545  :         {
; 546  :             // u の最上位まで達してしまった場合
; 547  : 
; 548  :             if (c)

	test	al, al
	je	SHORT $LN8@DoBorrow

; 549  :             {
; 550  :                 // かつそれでも桁借りを行う必要がある場合
; 551  : 
; 552  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 553  :                 return (TRUE);

	mov	eax, 1
	pop	esi

; 575  :         }
; 576  :     }
; 577  : }

	pop	ebp
	ret	0
$LN8@DoBorrow:

; 568  :         }
; 569  :         else
; 570  :         {
; 571  :             // u の最上位に達しておらず、かつボローが立っていない場合
; 572  : 
; 573  :             // 桁借りを中断し復帰する。
; 574  :             return (FALSE);

	xor	eax, eax
	pop	esi

; 575  :         }
; 576  :     }
; 577  : }

	pop	ebp
	ret	0
_DoBorrow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _CalculateQ_X
_TEXT	SEGMENT
_value$1$ = -8						; size = 4
_lh_mi$1$ = -4						; size = 4
tv328 = 8						; size = 4
_u_buf$ = 8						; size = 4
_rh_mi$1$ = 12						; size = 4
_v_buf$ = 12						; size = 4
_value$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf_len$ = 16					; size = 4
_v1$1$ = 20						; size = 4
_q_index$ = 20						; size = 4
_CalculateQ_X PROC					; COMDAT

; 515  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 516  :     __UNIT_TYPE u_index = q_index + v_buf_len;

	mov	edx, DWORD PTR _v_buf_len$[ebp]

; 517  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR _q_index$[ebp]
	add	ecx, edx
	push	ebx
	push	esi
	push	edi
	mov	ebx, DWORD PTR [eax+ecx*4]

; 518  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	edi, DWORD PTR [eax+ecx*4-4]

; 519  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR [eax+ecx*4-8]

; 520  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR tv328[ebp], ecx
	mov	esi, DWORD PTR [eax+edx*4-4]

; 521  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	eax, DWORD PTR [eax+edx*4-8]
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	DWORD PTR _v2$1$[ebp], eax

; 399  :     if (uj == v1)

	cmp	ebx, esi
	jne	SHORT $LN6@CalculateQ

; 400  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	mov	eax, ebx
	or	ecx, edi

; 385  :             return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 409  :     return (q);

	mov	esi, eax
$LN5@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, edi

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, ebx
	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 466  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN74@CalculateQ

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);
; 472  :     }
; 473  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN2@CalculateQ

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);
; 479  :     }
; 480  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 522  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);
; 523  : #ifdef DO_TRACE
; 524  :     ReportLabel("q_ の計算");
; 525  :     ReportVar("uj", uj);
; 526  :     ReportVar("uj1", uj_1);
; 527  :     ReportVar("v1", v1);
; 528  :     ReportVar("q_", q_);
; 529  : #endif
; 530  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN2@CalculateQ:

; 531  :         return (q_);
; 532  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	ecx, edx
	mov	eax, esi
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ebx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 466  :     if (rh_hi > 0)

	test	ebx, ebx
	jne	SHORT $LN74@CalculateQ

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);
; 472  :     }
; 473  :     else if (lh_mi > rh_mi)

	cmp	ecx, edi
	ja	SHORT $LN3@CalculateQ

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);
; 479  :     }
; 480  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 533  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN3@CalculateQ:
	pop	edi

; 534  :         return (q_);
; 535  :     --q_;

	lea	eax, DWORD PTR [esi-1]

; 536  :     return (q_);
; 537  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN74@CalculateQ:
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _CalculateQ_
_TEXT	SEGMENT
_value$1$ = -8						; size = 4
_lh_mi$1$ = -4						; size = 4
tv328 = 8						; size = 4
_u_buf$ = 8						; size = 4
_rh_mi$1$ = 12						; size = 4
_v_buf$ = 12						; size = 4
_value$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf_len$ = 16					; size = 4
_v1$1$ = 20						; size = 4
_q_index$ = 20						; size = 4
_CalculateQ_ PROC					; COMDAT

; 497  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 498  :     __UNIT_TYPE u_index = q_index + v_buf_len;

	mov	edx, DWORD PTR _v_buf_len$[ebp]

; 499  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR _q_index$[ebp]
	add	ecx, edx
	push	ebx
	push	esi
	push	edi
	mov	ebx, DWORD PTR [eax+ecx*4]

; 500  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	edi, DWORD PTR [eax+ecx*4-4]

; 501  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR [eax+ecx*4-8]

; 502  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR tv328[ebp], ecx
	mov	esi, DWORD PTR [eax+edx*4-4]

; 503  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	eax, DWORD PTR [eax+edx*4-8]
	mov	DWORD PTR _v1$1$[ebp], esi
	mov	DWORD PTR _v2$1$[ebp], eax

; 399  :     if (uj == v1)

	cmp	ebx, esi
	jne	SHORT $LN6@CalculateQ

; 400  :         return (-1);

	or	esi, -1
	jmp	SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	esi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	mov	eax, ebx
	or	ecx, edi

; 385  :             return ((_UINT32_T)(t / v));

	push	eax
	push	ecx
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 409  :     return (q);

	mov	esi, eax
$LN5@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, edi

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	eax, esi
	mov	DWORD PTR _lh_mi$1$[ebp], edx
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	DWORD PTR _rh_mi$1$[ebp], ecx
	mov	ecx, ebx
	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN74@CalculateQ

; 430  :         return (FALSE);
; 431  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _rh_mi$1$[ebp]
	cmp	DWORD PTR _lh_mi$1$[ebp], eax
	ja	SHORT $LN2@CalculateQ

; 432  :         return (TRUE);
; 433  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 504  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);
; 505  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN2@CalculateQ:

; 506  :         return (q_);
; 507  :     --q_;

	dec	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, esi
	mul	DWORD PTR _v2$1$[ebp]
	mov	DWORD PTR _value$1$[ebp], eax
	mov	ecx, edx
	mov	eax, esi
	mul	DWORD PTR _v1$1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ebx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     if (rh_hi > 0)

	test	ebx, ebx
	jne	SHORT $LN74@CalculateQ

; 430  :         return (FALSE);
; 431  :     else if (lh_mi > rh_mi)

	cmp	ecx, edi
	ja	SHORT $LN3@CalculateQ

; 432  :         return (TRUE);
; 433  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 508  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR _value$1$[ebp]
	cmp	eax, DWORD PTR tv328[ebp]
	jbe	SHORT $LN74@CalculateQ
$LN3@CalculateQ:
	pop	edi

; 509  :         return (q_);
; 510  :     --q_;

	lea	eax, DWORD PTR [esi-1]

; 511  :     return (q_);
; 512  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN74@CalculateQ:
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _CheckQ_X
_TEXT	SEGMENT
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
_CheckQ_X PROC						; COMDAT

; 440  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _q_$[ebp]
	mul	DWORD PTR _v2$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _uj$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  : {

	push	ebx
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	esi, DWORD PTR _uj_1$[ebp]

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ebx, eax
	mov	eax, DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
	mul	DWORD PTR _v1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 466  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN27@CheckQ_X

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);
; 472  :     }
; 473  :     else if (lh_mi > rh_mi)

	cmp	edi, esi
	jbe	SHORT $LN6@CheckQ_X

; 493  :     }
; 494  : }

	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ecx+1]
	pop	ebx
	pop	ebp
	ret	0
$LN6@CheckQ_X:

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);
; 479  :     }
; 480  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN27@CheckQ_X

; 481  :     {
; 482  : #ifdef DO_TRACE
; 483  :         ReportVar("result", 0);
; 484  : #endif
; 485  :         return (FALSE);
; 486  :     }
; 487  :     else
; 488  :     {
; 489  : #ifdef DO_TRACE
; 490  :         ReportVar("result", lh_lo > rh_lo);
; 491  : #endif
; 492  :         return (lh_lo > rh_lo);

	cmp	DWORD PTR _uj_2$[ebp], ebx
	pop	edi
	sbb	eax, eax

; 493  :     }
; 494  : }

	pop	esi
	neg	eax
	pop	ebx
	pop	ebp
	ret	0
$LN27@CheckQ_X:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
_CheckQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _CheckQ_
_TEXT	SEGMENT
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
_CheckQ_ PROC						; COMDAT

; 413  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _q_$[ebp]
	mul	DWORD PTR _v2$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	ecx, DWORD PTR _uj$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 413  : {

	push	ebx
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	esi, DWORD PTR _uj_1$[ebp]

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ebx, eax
	mov	eax, DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 413  : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
	mul	DWORD PTR _v1$[ebp]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     if (rh_hi > 0)

	test	ecx, ecx
	jne	SHORT $LN27@CheckQ_

; 430  :         return (FALSE);
; 431  :     else if (lh_mi > rh_mi)

	cmp	edi, esi
	jbe	SHORT $LN6@CheckQ_

; 437  : }

	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ecx+1]
	pop	ebx
	pop	ebp
	ret	0
$LN6@CheckQ_:

; 432  :         return (TRUE);
; 433  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN27@CheckQ_

; 434  :         return (FALSE);
; 435  :     else
; 436  :         return (lh_lo > rh_lo);

	cmp	DWORD PTR _uj_2$[ebp], ebx
	pop	edi
	sbb	eax, eax

; 437  : }

	pop	esi
	neg	eax
	pop	ebx
	pop	ebp
	ret	0
$LN27@CheckQ_:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
_CheckQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _AsumeQ_
_TEXT	SEGMENT
_uj$ = 8						; size = 4
_uj_1$ = 12						; size = 4
_v1$ = 16						; size = 4
_AsumeQ_ PROC						; COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp

; 399  :     if (uj == v1)

	mov	ecx, DWORD PTR _uj$[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN2@AsumeQ_

; 400  :         return (-1);

	or	eax, -1

; 410  : }

	pop	ebp
	ret	0
$LN2@AsumeQ_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 385  :             return ((_UINT32_T)(t / v));

	push	0
	push	edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR _uj_1$[ebp]

; 385  :             return ((_UINT32_T)(t / v));

	push	ecx
	push	eax
	call	__aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 410  : }

	pop	ebp
	ret	0
_AsumeQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_2WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADCX_DIV PROC				; COMDAT

; 4543 : {

	push	ebp
	mov	ebp, esp

; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4543 : {

	push	esi

; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4546 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4582 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4582 :     return (c);

	pop	esi

; 4583 : }

	pop	ebp
	ret	0
__ADD_2WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_2WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADC_DIV PROC				; COMDAT

; 4500 : {

	push	ebp
	mov	ebp, esp

; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4500 : {

	push	esi

; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4503 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4539 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4539 :     return (c);

	pop	esi

; 4540 : }

	pop	ebp
	ret	0
__ADD_2WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_4WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADCX_DIV PROC				; COMDAT

; 4157 : {

	push	ebp
	mov	ebp, esp

; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4157 : {

	push	esi

; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4160 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4161 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4162 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4210 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4210 :     return (c);

	pop	esi

; 4211 : }

	pop	ebp
	ret	0
__ADD_4WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_4WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADC_DIV PROC				; COMDAT

; 4100 : {

	push	ebp
	mov	ebp, esp

; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4100 : {

	push	esi

; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4103 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4104 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4105 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4153 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4153 :     return (c);

	pop	esi

; 4154 : }

	pop	ebp
	ret	0
__ADD_4WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_8WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADCX_DIV PROC				; COMDAT

; 3617 : {

	push	ebp
	mov	ebp, esp

; 3618 : #ifdef _MSC_VER
; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3617 : {

	push	esi

; 3618 : #ifdef _MSC_VER
; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3620 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3621 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3622 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3623 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3698 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3698 :     return (c);

	pop	esi

; 3699 : }

	pop	ebp
	ret	0
__ADD_8WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_8WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADC_DIV PROC				; COMDAT

; 3532 : {

	push	ebp
	mov	ebp, esp

; 3533 : #ifdef _MSC_VER
; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3532 : {

	push	esi

; 3533 : #ifdef _MSC_VER
; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3535 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3536 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3537 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3538 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3539 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3540 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3541 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3613 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3613 :     return (c);

	pop	esi

; 3614 : }

	pop	ebp
	ret	0
__ADD_8WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_16WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADCX_DIV PROC				; COMDAT

; 2769 : {

	push	ebp
	mov	ebp, esp

; 2770 : #ifdef _MSC_VER
; 2771 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2769 : {

	push	esi

; 2770 : #ifdef _MSC_VER
; 2771 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2772 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2773 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2774 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2775 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2776 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2777 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2778 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2779 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2780 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2781 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2782 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2783 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2784 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2785 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2786 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2906 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2906 :     return (c);

	pop	esi

; 2907 : }

	pop	ebp
	ret	0
__ADD_16WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_16WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADC_DIV PROC				; COMDAT

; 2628 : {

	push	ebp
	mov	ebp, esp

; 2629 : #ifdef _MSC_VER
; 2630 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2628 : {

	push	esi

; 2629 : #ifdef _MSC_VER
; 2630 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2631 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2632 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2633 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2634 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2635 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2636 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2637 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2638 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2639 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2640 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2641 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2642 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2643 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2644 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2645 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2765 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2765 :     return (c);

	pop	esi

; 2766 : }

	pop	ebp
	ret	0
__ADD_16WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_32WORDS_ADCX_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADCX_DIV PROC				; COMDAT

; 1305 : {

	push	ebp
	mov	ebp, esp

; 1306 : #ifdef _MSC_VER
; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1305 : {

	push	esi

; 1306 : #ifdef _MSC_VER
; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adcx	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1308 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1309 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1310 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1311 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [edx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+64]
	mov	DWORD PTR [edi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [edx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+68]
	mov	DWORD PTR [edi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [edx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+72]
	mov	DWORD PTR [edi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [edx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+76]
	mov	DWORD PTR [edi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [edx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+80]
	mov	DWORD PTR [edi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [edx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+84]
	mov	DWORD PTR [edi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [edx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [edi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [edx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+92]
	mov	DWORD PTR [edi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [edx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+96]
	mov	DWORD PTR [edi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [edx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+100]
	mov	DWORD PTR [edi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [edx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+104]
	mov	DWORD PTR [edi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [edx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [edi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [edx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+112]
	mov	DWORD PTR [edi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [edx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+116]
	mov	DWORD PTR [edi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [edx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [esi+120]
	mov	DWORD PTR [edi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [edx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [esi+124]
	mov	DWORD PTR [edi+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1554 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1554 :     return (c);

	pop	esi

; 1555 : }

	pop	ebp
	ret	0
__ADD_32WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_32WORDS_ADC_DIV
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADC_DIV PROC				; COMDAT

; 1052 : {

	push	ebp
	mov	ebp, esp

; 1053 : #ifdef _MSC_VER
; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _c$[ebp]
	add	al, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1052 : {

	push	esi

; 1053 : #ifdef _MSC_VER
; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	esi, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [edx]
	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	edi, DWORD PTR _zp$[ebp]
	adc	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1055 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1056 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1057 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1058 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1059 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+60]
	mov	DWORD PTR [edi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [edx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+64]
	mov	DWORD PTR [edi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1071 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [edx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+68]
	mov	DWORD PTR [edi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1072 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [edx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+72]
	mov	DWORD PTR [edi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1073 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [edx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+76]
	mov	DWORD PTR [edi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1074 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [edx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+80]
	mov	DWORD PTR [edi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1075 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [edx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+84]
	mov	DWORD PTR [edi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1076 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [edx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+88]
	mov	DWORD PTR [edi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1077 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [edx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+92]
	mov	DWORD PTR [edi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1078 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [edx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+96]
	mov	DWORD PTR [edi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1079 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [edx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+100]
	mov	DWORD PTR [edi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1080 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [edx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+104]
	mov	DWORD PTR [edi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1081 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [edx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [edi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1082 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [edx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+112]
	mov	DWORD PTR [edi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1083 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [edx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+116]
	mov	DWORD PTR [edi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1084 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [edx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [esi+120]
	mov	DWORD PTR [edi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1085 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [edx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [esi+124]
	mov	DWORD PTR [edi+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1301 :     return (c);

	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1301 :     return (c);

	pop	esi

; 1302 : }

	pop	ebp
	ret	0
__ADD_32WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT_DIV
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT_DIV PROC				; COMDAT

; 652  :     {

	push	ebp
	mov	ebp, esp

; 653  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 654  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 678  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 655  : #ifdef _M_IX86
; 656  :         _UINT32_T pos;
; 657  : #ifdef _MSC_VER
; 658  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 659  : #elif defined(__GNUC__)
; 660  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 661  : #else
; 662  : #error unknown compiler
; 663  : #endif
; 664  : #elif defined(_M_X64)
; 665  : #ifdef _MSC_VER
; 666  :         _UINT32_T pos;
; 667  :         _BitScanReverse(&pos, x);
; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 678  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :     {

	push	ebp
	mov	ebp, esp

; 624  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 649  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 649  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 590  :     {

	push	ebp
	mov	ebp, esp

; 591  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 602  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 602  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVREM_SINGLE_UNIT
_TEXT	SEGMENT
tv70 = -8						; size = 8
tv69 = -8						; size = 8
_r$ = 8							; size = 4
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_q$ = 20						; size = 4
__DIVREM_SINGLE_UNIT PROC				; COMDAT

; 422  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR _r$[ebp]
	xor	ecx, ecx
	or	ecx, DWORD PTR _u$[ebp]

; 422  :     {

	push	ebx

; 423  : #ifdef _MSC_VER
; 424  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 425  :         {
; 426  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 427  :             _UINT64_T t = _FROMWORDTODWORD(r, u);
; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	eax
	push	ecx
	call	__aulldvrm
	mov	DWORD PTR tv70[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv69[ebp+4], edx
	mov	edx, DWORD PTR _q$[ebp]

; 429  :             return ((_UINT32_T)(t % v));

	pop	ebx
	mov	DWORD PTR [edx], eax
	mov	eax, ecx

; 430  :         }
; 431  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 432  :         {
; 433  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 434  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 435  :             // ・128bit 整数のデータ型が用意されていない。
; 436  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 437  :             *q = 0;
; 438  :             return (0);
; 439  :         }
; 440  :         else
; 441  :         {
; 442  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 443  :             *q = 0;
; 444  :             return (0);
; 445  :         }
; 446  : #elif defined(__GNUC__)
; 447  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 448  :             __asm__("divl %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 449  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 450  :             __asm__("divq %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 451  :         else
; 452  :         {
; 453  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 454  :             *q = 0;
; 455  :             r = 0;
; 456  :         }
; 457  :         return (r);
; 458  : #else
; 459  : #error unknown compiler
; 460  : #endif
; 461  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_SINGLE_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVREM_UNIT
_TEXT	SEGMENT
tv70 = -8						; size = 8
tv69 = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC					; COMDAT

; 378  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR _u_high$[ebp]
	xor	ecx, ecx
	or	ecx, DWORD PTR _u_low$[ebp]

; 378  :     {

	push	ebx

; 379  : #ifdef _MSC_VER
; 380  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 381  :         {
; 382  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 383  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 384  :             *r = (_UINT32_T)(t % v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	eax
	push	ecx
	call	__aulldvrm
	mov	DWORD PTR tv69[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv70[ebp+4], edx
	mov	edx, DWORD PTR _r$[ebp]

; 385  :             return ((_UINT32_T)(t / v));

	pop	ebx
	mov	DWORD PTR [edx], ecx

; 386  :         }
; 387  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 388  :         {
; 389  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 390  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 391  :             // ・128bit 整数のデータ型が用意されていない。
; 392  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 393  :             *r = 0;
; 394  :             return (0);
; 395  :         }
; 396  :         else
; 397  :         {
; 398  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 399  :             *r = 0;
; 400  :             return (0);
; 401  :         }
; 402  : #elif defined(__GNUC__)
; 403  :         __UNIT_TYPE q;
; 404  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 405  :             __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 406  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 407  :             __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 408  :         else
; 409  :         {
; 410  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 411  :             *r = 0;
; 412  :             q = 0;
; 413  :         }
; 414  :         return (q);
; 415  : #else
; 416  : #error unknown compiler
; 417  : #endif
; 418  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLYX_UNIT_DIV
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT_DIV PROC				; COMDAT

; 356  :     {

	push	ebp
	mov	ebp, esp

; 357  : #ifdef _MSC_VER
; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 359  : #elif defined(__GNUC__)
; 360  : #ifdef _M_IX86
; 361  :         _UINT32_T w_lo;
; 362  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 363  :         return (w_lo);
; 364  : #elif defined(_M_X64)
; 365  :         _UINT64_T w_lo;
; 366  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 367  :         return (w_lo);
; 368  : #else
; 369  : #error unknown platform
; 370  : #endif
; 371  : #else
; 372  : #error unknown compiler
; 373  : #endif
; 374  :     }

	pop	ebp
	ret	0
__MULTIPLYX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLY_UNIT_DIV
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT_DIV PROC				; COMDAT

; 310  :     {

	push	ebp
	mov	ebp, esp

; 311  : #ifdef _MSC_VER
; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 313  : #elif defined(__GNUC__)
; 314  : #ifdef _M_IX86
; 315  :         _UINT32_T w_lo;
; 316  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 317  :         return (w_lo);
; 318  : #elif defined(_M_X64)
; 319  :         return (_umul128(u, v, w_hi));
; 320  : #else
; 321  : #error unknown platform
; 322  : #endif
; 323  : #else
; 324  : #error unknown compiler
; 325  : #endif
; 326  :     }

	pop	ebp
	ret	0
__MULTIPLY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __SUBTRUCT_UNIT_DIV
_TEXT	SEGMENT
_borrow$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__SUBTRUCT_UNIT_DIV PROC				; COMDAT

; 274  :     {

	push	ebp
	mov	ebp, esp

; 275  : #ifdef _MSC_VER
; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	al, BYTE PTR _borrow$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	sbb	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 277  : #elif defined(__GNUC__)
; 278  : #ifdef _M_IX86
; 279  :         return (_subborrow_u32(borrow, u, v, w));
; 280  : #elif defined(_M_X64)
; 281  :         return (_subborrow_u64(borrow, u, v, w));
; 282  : #else
; 283  : #error unknown platform
; 284  : #endif
; 285  : #else
; 286  : #error unknown compiler
; 287  : #endif
; 288  :     }

	pop	ebp
	ret	0
__SUBTRUCT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADDX_UNIT_DIV
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT_DIV PROC					; COMDAT

; 246  :     {

	push	ebp
	mov	ebp, esp

; 247  : #ifdef _MSC_VER
; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adcx	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 249  : #elif defined(__GNUC__)
; 250  : #ifdef _M_IX86
; 251  :         return (_addcarryx_u32(carry, u, v, w));
; 252  : #elif defined(_M_X64)
; 253  :         return (_addcarryx_u64(carry, u, v, w));
; 254  : #else
; 255  : #error unknown platform
; 256  : #endif
; 257  : #else
; 258  : #error unknown compiler
; 259  : #endif
; 260  :     }

	pop	ebp
	ret	0
__ADDX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADD_UNIT_DIV
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT_DIV PROC					; COMDAT

; 218  :     {

	push	ebp
	mov	ebp, esp

; 219  : #ifdef _MSC_VER
; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adc	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 221  : #elif defined(__GNUC__)
; 222  : #ifdef _M_IX86
; 223  :         return (_addcarry_u32(carry, u, v, w));
; 224  : #elif defined(_M_X64)
; 225  :         return (_addcarry_u64(carry, u, v, w));
; 226  : #else
; 227  : #error unknown platform
; 228  : #endif
; 229  : #else
; 230  : #error unknown compiler
; 231  : #endif
; 232  :     }

	pop	ebp
	ret	0
__ADD_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 176  :     {

	push	ebp
	mov	ebp, esp

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 179  :     }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMWORDTODWORD
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC					; COMDAT

; 171  :     {

	push	ebp
	mov	ebp, esp

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR _value_high$[ebp]
	xor	eax, eax
	or	eax, DWORD PTR _value_low$[ebp]

; 173  :     }

	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT_DIV
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT_DIV PROC				; COMDAT

; 71   :     {

	push	ebp
	mov	ebp, esp

; 72   : #ifdef _M_IX86
; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 74   : #elif defined(_M_X64)
; 75   : #ifdef _MSC_VER
; 76   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 77   : #elif defined(__GNUC__)
; 78   :         __movsq(d, s, count);
; 79   : #else
; 80   : #error unknown compiler
; 81   : #endif
; 82   : #else
; 83   : #error unknown platform
; 84   : #endif
; 85   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	push	ebp
	mov	ebp, esp

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);
; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToMULTI64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC				; COMDAT

; 389  :     {

	push	ebp
	mov	ebp, esp

; 390  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 391  :     }

	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToMULTI32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC				; COMDAT

; 383  :     {

	push	ebp
	mov	ebp, esp

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 385  :     }

	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToDIV64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV64Counter PROC					; COMDAT

; 377  :     {

	push	ebp
	mov	ebp, esp

; 378  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+8
	lock	 xadd	 DWORD PTR [ecx], eax

; 379  :     }

	pop	ebp
	ret	0
_AddToDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToDIV32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV32Counter PROC					; COMDAT

; 371  :     {

	push	ebp
	mov	ebp, esp

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax

; 373  :     }

	pop	ebp
	ret	0
_AddToDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementMULTI64Counter
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC				; COMDAT

; 367  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 368  :     }

	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementMULTI32Counter
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC				; COMDAT

; 361  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 362  :     }

	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementDIV64Counter
_TEXT	SEGMENT
_IncrementDIV64Counter PROC				; COMDAT

; 355  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock	 inc	 (null) PTR _statistics_info+8

; 356  :     }

	ret	0
_IncrementDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementDIV32Counter
_TEXT	SEGMENT
_IncrementDIV32Counter PROC				; COMDAT

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 350  :     }

	ret	0
_IncrementDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_X@16
_TEXT	SEGMENT
_nr_light_check_code$1 = -16				; size = 4
_nr_light_check_code$2 = -12				; size = 4
_work_v_buf_words$3 = -12				; size = 4
_work_v_buf$1$ = -8					; size = 4
_u_bit_count$1$ = -8					; size = 4
_result$12$ = -8					; size = 4
_work_v_buf_words$4 = -8				; size = 4
_nr_light_check_code$5 = -8				; size = 4
_work_v_buf_code$6 = -4					; size = 4
_nq_light_check_code$7 = -4				; size = 4
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_nr$ = 12						; size = 4
_v$ = 12						; size = 4
_result$6$ = 16						; size = 4
_work_v_buf_code$8 = 16					; size = 4
_nq_light_check_code$9 = 16				; size = 4
_nr_light_check_code$10 = 16				; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_X@16 PROC					; COMDAT

; 1838 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	edi

; 1839 :     if (u == NULL)

	mov	edi, DWORD PTR _u$[ebp]
	test	edi, edi
	je	$LN48@PMC_DivRem

; 1840 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1841 :     if (v == NULL)

	mov	ebx, DWORD PTR _v$[ebp]
	test	ebx, ebx
	je	$LN48@PMC_DivRem

; 1842 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1843 :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	je	$LN48@PMC_DivRem

; 1845 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1846 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1847 :     PMC_STATUS_CODE result;
; 1848 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1849 :         return (result);
; 1850 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1851 :         return (result);
; 1852 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR [ebx]
	test	al, 1
	je	SHORT $LN7@PMC_DivRem

; 1853 :     {
; 1854 :         // v が 0 である場合
; 1855 : 
; 1856 :         // 0 による除算はエラーで返す
; 1857 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	pop	edi
	mov	eax, -3					; fffffffdH

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)
; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 2038 :             return (result);
; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 2041 :         return (result);
; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);
; 2044 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN7@PMC_DivRem:

; 1858 :     }
; 1859 :     NUMBER_HEADER* nq;
; 1860 :     NUMBER_HEADER* nr;
; 1861 :     if (nu->IS_ZERO)

	test	BYTE PTR [edi], 1
	push	esi
	mov	esi, DWORD PTR _q$[ebp]
	je	SHORT $LN8@PMC_DivRem

; 1862 :     {
; 1863 :         // u が 0 である場合
; 1864 : 
; 1865 :         // q = 0, r = 0 を返す
; 1866 :         nq = q != NULL ? &number_zero : NULL;

	xor	eax, eax
	mov	ecx, OFFSET _number_zero
	test	esi, esi
	cmove	ecx, eax

; 1867 :         nr = &number_zero;
; 1868 :     }

	jmp	$LN52@PMC_DivRem
$LN8@PMC_DivRem:

; 1869 :     else
; 1870 :     {
; 1871 :         // u が 0 ではない場合
; 1872 : 
; 1873 :         if (nv->IS_ONE)

	test	al, 2
	je	SHORT $LN10@PMC_DivRem

; 1874 :         {
; 1875 :             // v が 1 である場合
; 1876 : 
; 1877 :             // q = u, r = 0 を返す
; 1878 :             if (q != NULL)

	test	esi, esi
	je	SHORT $LN12@PMC_DivRem

; 1879 :             {
; 1880 :                 if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	push	edi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN60@PMC_DivRem
$LN51@PMC_DivRem:
	pop	esi
$LN1@PMC_DivRem:
	pop	edi

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)
; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 2038 :             return (result);
; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 2041 :         return (result);
; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);
; 2044 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN12@PMC_DivRem:

; 1881 :                     return (result);
; 1882 :             }
; 1883 :             else
; 1884 :                 nq = NULL;

	xor	ecx, ecx

; 1885 :             nr = &number_zero;
; 1886 :         }

	jmp	$LN52@PMC_DivRem
$LN10@PMC_DivRem:

; 1887 :         else
; 1888 :         {
; 1889 :             // u > 0 かつ v > 1 である場合
; 1890 : 
; 1891 :             // x と y の商・剰余を計算する
; 1892 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR [edi+16]

; 1893 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR [ebx+16]
	mov	DWORD PTR _u_bit_count$1$[ebp], eax

; 1894 :             if (u_bit_count < v_bit_count)

	cmp	eax, ecx
	jae	SHORT $LN15@PMC_DivRem

; 1895 :             {
; 1896 :                 // 明らかに u < v である場合
; 1897 : 
; 1898 :                 // q = 0, r = u を返す。
; 1899 :                 nq = q != NULL ? &number_zero : NULL;

	xor	ecx, ecx
	mov	eax, OFFSET _number_zero
	test	esi, esi
	cmove	eax, ecx
	mov	DWORD PTR _nq$[ebp], eax

; 1900 :                 if ((result = DuplicateNumber(nu, &nr)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nr$[ebp]
	push	eax
	push	edi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN51@PMC_DivRem
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	eax, DWORD PTR _nr$[ebp]
	jmp	$LN45@PMC_DivRem
$LN15@PMC_DivRem:

; 1901 :                     return (result);
; 1902 :             }
; 1903 :             else if (v_bit_count <= sizeof(__UNIT_TYPE_DIV) * 8)

	cmp	ecx, 32					; 00000020H
	ja	$LN18@PMC_DivRem

; 1904 :             {
; 1905 :                 // 除数が 1 ワードで表現できる場合
; 1906 : 
; 1907 :                 if (q != NULL)

	test	esi, esi
	je	$LN20@PMC_DivRem

; 1908 :                 {
; 1909 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1910 :                     __UNIT_TYPE nq_light_check_code;
; 1911 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	sub	eax, ecx
	lea	edx, DWORD PTR _nq_light_check_code$7[ebp]
	push	edx
	add	eax, 33					; 00000021H
	push	eax
	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN51@PMC_DivRem

; 1912 :                         return (result);
; 1913 :                     __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE_DIV) * 8;
; 1914 :                     __UNIT_TYPE nr_light_check_code;
; 1915 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nr_light_check_code$5[ebp]
	push	eax
	lea	eax, DWORD PTR _nr$[ebp]
	push	32					; 00000020H
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$6$[ebp], eax
	test	eax, eax
	je	SHORT $LN23@PMC_DivRem

; 1916 :                     {
; 1917 :                         DeallocateNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_DeallocateNumber

; 1918 :                         return (result);

	mov	eax, DWORD PTR _result$6$[ebp]
	add	esp, 4
	pop	esi
	pop	edi

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)
; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 2038 :             return (result);
; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 2041 :         return (result);
; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);
; 2044 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN23@PMC_DivRem:

; 1919 :                     }
; 1920 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)nv->BLOCK[0], (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR [eax+36]
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+36]
	mov	eax, DWORD PTR [ebx+36]
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [edi+12]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+36]
	call	_DivRem_X_1W

; 1921 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$7[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1922 :                         return (result);
; 1923 :                     if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR _nr_light_check_code$5[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1924 :                         return (result);
; 1925 :                     CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1926 :                     CommitNumber(nr);

	push	DWORD PTR _nr$[ebp]
	call	_CommitNumber
	add	esp, 8

; 1927 :                     if (nq->IS_ZERO)
; 1928 :                     {
; 1929 :                         DeallocateNumber(nq);
; 1930 :                         nq = &number_zero;
; 1931 :                     }
; 1932 :                     if (nr->IS_ZERO)
; 1933 :                     {
; 1934 :                         DeallocateNumber(nr);
; 1935 :                         nr = &number_zero;
; 1936 :                     }
; 1937 :                 }

	jmp	$LN56@PMC_DivRem
$LN20@PMC_DivRem:

; 1938 :                 else
; 1939 :                 {
; 1940 :                     __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE_DIV) * 8;
; 1941 :                     __UNIT_TYPE nr_light_check_code;
; 1942 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nr_light_check_code$10[ebp]
	push	eax
	lea	eax, DWORD PTR _nr$[ebp]
	push	32					; 00000020H
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1943 :                         return (result);
; 1944 :                     ((__UNIT_TYPE_DIV*)nr->BLOCK)[0] = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)nv->BLOCK[0]);

	mov	eax, DWORD PTR [ebx+36]
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [edi+12]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+36]
	call	_Rem_X_1W
	mov	ecx, DWORD PTR _nr$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	mov	DWORD PTR [ecx], eax

; 1945 :                     nq = NULL;
; 1946 :                     if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR _nr_light_check_code$10[ebp]
	mov	DWORD PTR _nq$[ebp], 0
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1947 :                         return (result);
; 1948 :                     CommitNumber(nr);

	push	DWORD PTR _nr$[ebp]
	call	_CommitNumber
	add	esp, 4

; 1949 :                     if (nr->IS_ZERO)
; 1950 :                     {
; 1951 :                         DeallocateNumber(nr);
; 1952 :                         nr = &number_zero;
; 1953 :                     }
; 1954 :                 }
; 1955 :             }

	jmp	$LN58@PMC_DivRem
$LN18@PMC_DivRem:

; 1956 :             else
; 1957 :             {
; 1958 :                 // 除数を表現するのに 2 ワード以上必要な場合
; 1959 :                 if (q != NULL)

	test	esi, esi
	je	$LN31@PMC_DivRem

; 1960 :                 {
; 1961 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1962 :                     __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1963 :                     __UNIT_TYPE nq_light_check_code;
; 1964 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	sub	eax, ecx
	lea	edx, DWORD PTR _nq_light_check_code$9[ebp]
	push	edx
	add	eax, 33					; 00000021H
	push	eax
	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1965 :                         return (result);
; 1966 :                     __UNIT_TYPE nr_light_check_code;
; 1967 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nr_light_check_code$1[ebp]
	push	eax
	mov	eax, DWORD PTR _u_bit_count$1$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	lea	eax, DWORD PTR _nr$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$12$[ebp], eax
	test	eax, eax
	je	SHORT $LN34@PMC_DivRem

; 1968 :                     {
; 1969 :                         DeallocateNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_DeallocateNumber

; 1970 :                         return (result);

	mov	eax, DWORD PTR _result$12$[ebp]
	add	esp, 4
	pop	esi
	pop	edi

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)
; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 2038 :             return (result);
; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 2041 :         return (result);
; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);
; 2044 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN34@PMC_DivRem:

; 1971 :                     }
; 1972 :                     __UNIT_TYPE work_v_buf_code;
; 1973 :                     __UNIT_TYPE work_v_buf_words;
; 1974 :                     __UNIT_TYPE_DIV* work_v_buf = (__UNIT_TYPE_DIV*)AllocateBlock(nv->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$6[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$3[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx+12]
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	mov	ecx, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1$[ebp], ecx

; 1975 :                     if (work_v_buf == NULL)

	test	ecx, ecx
	jne	SHORT $LN35@PMC_DivRem

; 1976 :                     {
; 1977 :                         DeallocateNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_DeallocateNumber
	add	esp, 4
$LN59@PMC_DivRem:

; 1978 :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	pop	esi
	pop	edi
	mov	eax, -6					; fffffffaH

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)
; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 2038 :             return (result);
; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 2041 :         return (result);
; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);
; 2044 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN35@PMC_DivRem:

; 1979 :                     }
; 1980 : 
; 1981 :                     (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR [eax+36]
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+36]
	mov	eax, DWORD PTR [ebx+12]
	push	ecx
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [ebx+36]
	mov	eax, DWORD PTR [edi+12]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+36]
	call	DWORD PTR _fp_DivRem_X_X

; 1982 :                     if ((result = CheckBlockLight((__UNIT_TYPE*)work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$6[ebp]
	mov	edi, DWORD PTR _work_v_buf$1$[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1983 :                         return (result);
; 1984 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$9[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1985 :                         return (result);
; 1986 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$9[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1987 :                         return (result);
; 1988 :                     DeallocateBlock((__UNIT_TYPE*)work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$3[ebp]
	push	edi
	call	_DeallocateBlock

; 1989 :                     CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1990 :                     CommitNumber(nr);

	push	DWORD PTR _nr$[ebp]
	call	_CommitNumber
	add	esp, 16					; 00000010H
$LN56@PMC_DivRem:

; 2022 :                     if (nr->IS_ZERO)
; 2023 :                     {
; 2024 :                         DeallocateNumber(nr);
; 2025 :                         nr = &number_zero;
; 2026 :                     }
; 2027 :                 }
; 2028 :             }
; 2029 :         }
; 2030 :     }
; 2031 :     if (q != NULL)

	mov	ecx, DWORD PTR _nq$[ebp]
	test	BYTE PTR [ecx], 1
	je	SHORT $LN39@PMC_DivRem
	push	ecx
	call	_DeallocateNumber
	mov	ecx, OFFSET _number_zero
	add	esp, 4
	mov	DWORD PTR _nq$[ebp], ecx
$LN39@PMC_DivRem:
	mov	eax, DWORD PTR _nr$[ebp]
	test	BYTE PTR [eax], 1
	je	SHORT $LN45@PMC_DivRem
	push	eax
	call	_DeallocateNumber
	add	esp, 4
$LN60@PMC_DivRem:
	mov	ecx, DWORD PTR _nq$[ebp]
$LN52@PMC_DivRem:
	mov	eax, OFFSET _number_zero
$LN45@PMC_DivRem:
	test	esi, esi
	je	$LN46@PMC_DivRem

; 2032 :         *q = (PMC_HANDLE_UINT)nq;

	mov	DWORD PTR [esi], ecx

; 2033 :     *r = (PMC_HANDLE_UINT)nr;

	mov	ecx, DWORD PTR _r$[ebp]
	pop	esi
	pop	edi

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)
; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 2038 :             return (result);
; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 2041 :         return (result);
; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);
; 2044 : }

	pop	ebx
	mov	DWORD PTR [ecx], eax
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN31@PMC_DivRem:

; 1991 :                     if (nq->IS_ZERO)
; 1992 :                     {
; 1993 :                         DeallocateNumber(nq);
; 1994 :                         nq = &number_zero;
; 1995 :                     }
; 1996 :                     if (nr->IS_ZERO)
; 1997 :                     {
; 1998 :                         DeallocateNumber(nr);
; 1999 :                         nr = &number_zero;
; 2000 :                     }
; 2001 :                 }
; 2002 :                 else
; 2003 :                 {
; 2004 :                     __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 2005 :                     __UNIT_TYPE nr_light_check_code;
; 2006 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nr_light_check_code$2[ebp]
	add	eax, 32					; 00000020H
	push	ecx
	push	eax
	lea	eax, DWORD PTR _nr$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 2007 :                         return (result);
; 2008 :                     __UNIT_TYPE work_v_buf_code;
; 2009 :                     __UNIT_TYPE work_v_buf_words;
; 2010 :                     __UNIT_TYPE_DIV* work_v_buf = (__UNIT_TYPE_DIV*)AllocateBlock(nv->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$8[ebp]
	push	eax
	lea	eax, DWORD PTR _work_v_buf_words$4[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx+12]
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	mov	esi, eax
	add	esp, 12					; 0000000cH

; 2011 :                     if (work_v_buf == NULL)

	test	esi, esi
	je	$LN59@PMC_DivRem

; 2012 :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 2013 : 
; 2014 :                     (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, NULL, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR [eax+36]
	mov	eax, DWORD PTR [ebx+12]
	push	0
	push	esi
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [ebx+36]
	mov	eax, DWORD PTR [edi+12]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+36]
	call	DWORD PTR _fp_DivRem_X_X

; 2015 :                     nq = NULL;
; 2016 :                     if ((result = CheckBlockLight((__UNIT_TYPE*)work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_v_buf_code$8[ebp]
	mov	DWORD PTR _nq$[ebp], 0
	push	esi
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 2017 :                         return (result);
; 2018 :                     if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nr$[ebp]
	push	DWORD PTR _nr_light_check_code$2[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 2019 :                         return (result);
; 2020 :                     DeallocateBlock((__UNIT_TYPE*)work_v_buf, work_v_buf_words);

	push	DWORD PTR _work_v_buf_words$4[ebp]
	push	esi
	call	_DeallocateBlock

; 2021 :                     CommitNumber(nr);

	push	DWORD PTR _nr$[ebp]
	call	_CommitNumber
	add	esp, 12					; 0000000cH
$LN58@PMC_DivRem:

; 2033 :     *r = (PMC_HANDLE_UINT)nr;

	mov	eax, DWORD PTR _nr$[ebp]
	test	BYTE PTR [eax], 1
	je	SHORT $LN46@PMC_DivRem
	push	eax
	call	_DeallocateNumber
	mov	eax, OFFSET _number_zero
	add	esp, 4
$LN46@PMC_DivRem:
	mov	ecx, DWORD PTR _r$[ebp]
	pop	esi
	pop	edi

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)
; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 2038 :             return (result);
; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 2041 :         return (result);
; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);
; 2044 : }

	pop	ebx
	mov	DWORD PTR [ecx], eax
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN48@PMC_DivRem:
	pop	edi

; 1844 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)
; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 2038 :             return (result);
; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 2041 :         return (result);
; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);
; 2044 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_DivRem_X_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_L@20
_TEXT	SEGMENT
_v_buf$1 = -24						; size = 8
_v_buf$2 = -24						; size = 8
_work_v_buf$3 = -16					; size = 8
_r_buf_words$4 = -8					; size = 4
_r_buf_code$5 = -4					; size = 4
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_work_v_buf$6 = 12					; size = 8
_v$ = 12						; size = 8
_r_lo$1$ = 20						; size = 4
_r_buf_code$7 = 20					; size = 4
_nq_light_check_code$8 = 20				; size = 4
_r_buf$9 = 20						; size = 4
_q$ = 20						; size = 4
_r_buf$1$ = 24						; size = 4
_u_bit_count$1$ = 24					; size = 4
_r_buf_words$10 = 24					; size = 4
_nq_light_check_code$11 = 24				; size = 4
_r$ = 24						; size = 4
_PMC_DivRem_X_L@20 PROC					; COMDAT

; 1605 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx

; 1606 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(v))
; 1607 :     {
; 1608 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1609 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1610 :     }
; 1611 :     if (u == NULL)

	mov	ebx, DWORD PTR _u$[ebp]
	push	esi
	test	ebx, ebx
	je	$LN57@PMC_DivRem

; 1612 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1613 :     if (r == NULL)

	mov	esi, DWORD PTR _r$[ebp]
	test	esi, esi
	je	$LN57@PMC_DivRem

; 1615 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1616 :     PMC_STATUS_CODE result;
; 1617 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1618 :         return (result);
; 1619 :     if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, ecx
	push	edi
	mov	edi, DWORD PTR _v$[ebp+4]
	or	eax, edi
	jne	SHORT $LN6@PMC_DivRem

; 1620 :     {
; 1621 :         // v が 0 である場合
; 1622 : 
; 1623 :         // 0 による除算はエラーで返す
; 1624 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
$LN59@PMC_DivRem:
	pop	edi
$LN1@PMC_DivRem:
	pop	esi

; 1835 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN6@PMC_DivRem:

; 1625 :     }
; 1626 :     NUMBER_HEADER* nq;
; 1627 :     if (nu->IS_ZERO)

	test	BYTE PTR [ebx], 1
	je	SHORT $LN7@PMC_DivRem

; 1628 :     {
; 1629 :         // x が 0 である場合
; 1630 : 
; 1631 :         // q = 0, r = 0 を返す
; 1632 :         nq = q != NULL ? &number_zero : NULL;

	mov	edi, DWORD PTR _q$[ebp]
	xor	eax, eax
	test	edi, edi

; 1633 :         *r = 0;

	mov	DWORD PTR [esi], eax
	mov	ecx, OFFSET _number_zero
	mov	DWORD PTR [esi+4], eax
	cmove	ecx, eax

; 1634 :     }

	jmp	$LN30@PMC_DivRem
$LN7@PMC_DivRem:

; 1635 :     else
; 1636 :     {
; 1637 :         // u が 0 ではない場合
; 1638 : 
; 1639 :         if (v == 1)

	cmp	ecx, 1
	jne	SHORT $LN9@PMC_DivRem
	test	edi, edi
	jne	SHORT $LN9@PMC_DivRem

; 1640 :         {
; 1641 :             // v が 1 である場合
; 1642 : 
; 1643 :             // q = u, r = 0 を返す
; 1644 :             if (q != NULL)

	mov	edi, DWORD PTR _q$[ebp]
	test	edi, edi
	je	SHORT $LN11@PMC_DivRem

; 1645 :             {
; 1646 :                 if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	push	ebx
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN59@PMC_DivRem
	mov	ecx, DWORD PTR _nq$[ebp]

; 1651 :             *r = 0;

	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax

; 1652 :         }

	jmp	$LN30@PMC_DivRem
$LN11@PMC_DivRem:

; 1647 :                     return (result);
; 1648 :             }
; 1649 :             else
; 1650 :                 nq = NULL;

	xor	ecx, ecx

; 1651 :             *r = 0;

	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx

; 1652 :         }

	jmp	$LN30@PMC_DivRem
$LN9@PMC_DivRem:

; 1653 :         else
; 1654 :         {
; 1655 :             // u > 0 かつ v > 1 である場合
; 1656 : 
; 1657 :             // u と v の商・剰余を計算する
; 1658 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [ebx+16]
	mov	DWORD PTR _u_bit_count$1$[ebp], edx

; 1659 :             if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))
; 1660 :             {
; 1661 :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 1662 :                 _UINT32_T v_hi;
; 1663 :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 1664 :                 if (v_hi == 0)

	test	edi, edi
	jne	$LN16@PMC_DivRem

; 1665 :                 {
; 1666 :                     // v の値が 32bit で表現可能な場合
; 1667 :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	push	ecx
	call	__LZCNT_ALT_32

; 1668 :                     if (u_bit_count < v_bit_count)

	mov	edi, DWORD PTR _q$[ebp]
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	add	esp, 4
	cmp	edx, ecx
	jae	SHORT $LN18@PMC_DivRem

; 1669 :                     {
; 1670 :                         // 明らかに u < v である場合
; 1671 : 
; 1672 :                         // q = 0, r = u を返す。
; 1673 :                         nq = q != NULL ? &number_zero : NULL;

	xor	eax, eax
	mov	ecx, OFFSET _number_zero
	test	edi, edi
	cmove	ecx, eax

; 1674 :                         *r = nu->BLOCK[0];

	mov	eax, DWORD PTR [ebx+36]
	mov	DWORD PTR _nq$[ebp], ecx
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], 0

; 1675 :                     }

	jmp	$LN30@PMC_DivRem
$LN18@PMC_DivRem:

; 1676 :                     else
; 1677 :                     {
; 1678 :                         if (q != NULL)

	test	edi, edi
	je	SHORT $LN20@PMC_DivRem

; 1679 :                         {
; 1680 :                             __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1681 :                             __UNIT_TYPE nq_light_check_code;
; 1682 :                             if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq_light_check_code$11[ebp]
	sub	edx, ecx
	push	eax
	add	edx, 33					; 00000021H
	lea	eax, DWORD PTR _nq$[ebp]
	push	edx
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN59@PMC_DivRem

; 1683 :                                 return (result);
; 1684 :                             __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR _r_buf$9[ebp], eax

; 1685 :                             DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_lo, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	lea	eax, DWORD PTR _r_buf$9[ebp]
	push	eax
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+36]
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx+12]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [ebx+36]
	call	_DivRem_X_1W

; 1686 :                             if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$11[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	$LN59@PMC_DivRem

; 1687 :                                 return (result);
; 1688 :                             CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1689 :                             *r = r_buf;

	mov	eax, DWORD PTR _r_buf$9[ebp]
	add	esp, 4
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], 0

; 1690 :                             if (nq->IS_ZERO)
; 1691 :                             {
; 1692 :                                 DeallocateNumber(nq);
; 1693 :                                 nq = &number_zero;
; 1694 :                             }
; 1695 :                         }

	jmp	$LN61@PMC_DivRem
$LN20@PMC_DivRem:

; 1696 :                         else
; 1697 :                         {
; 1698 :                             __UNIT_TYPE_DIV r_buf = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_lo);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx+12]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [ebx+36]
	call	_Rem_X_1W
	add	esp, 12					; 0000000cH

; 1699 :                             nq = NULL;
; 1700 :                             *r = r_buf;

	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], 0

; 1827 : #ifdef _DEBUG
; 1828 :     if (q != NULL)
; 1829 :     {
; 1830 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1831 :             return (result);
; 1832 :     }
; 1833 : #endif
; 1834 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi
	pop	esi

; 1835 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN16@PMC_DivRem:

; 1701 :                         }
; 1702 :                     }
; 1703 :                 }
; 1704 :                 else
; 1705 :                 {
; 1706 :                     // v の値が 32bit では表現できない場合
; 1707 :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	push	edi
	call	__LZCNT_ALT_32

; 1708 :                     if (u_bit_count < v_bit_count)

	mov	edi, DWORD PTR _q$[ebp]
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	add	esp, 4
	cmp	edx, ecx
	jae	SHORT $LN25@PMC_DivRem

; 1709 :                     {
; 1710 :                         // 明らかに u < v である場合
; 1711 : 
; 1712 :                         // q = 0, r = u を返す。
; 1713 :                         nq = q != NULL ? &number_zero : NULL;
; 1714 :                         if (sizeof(v) == sizeof(__UNIT_TYPE))
; 1715 :                             *r = nu->BLOCK[0];
; 1716 :                         else
; 1717 :                         {
; 1718 :                             __UNIT_TYPE r_lo = nu->BLOCK[0];

	mov	edx, DWORD PTR [ebx+36]
	xor	eax, eax
	test	edi, edi
	mov	ecx, OFFSET _number_zero
	cmove	ecx, eax

; 1719 :                             __UNIT_TYPE r_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] : 0;

	cmp	DWORD PTR [ebx+12], 1
	mov	DWORD PTR _nq$[ebp], ecx
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _r_lo$1$[ebp], eax
	jbe	SHORT $LN47@PMC_DivRem
	mov	edx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR _r_lo$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1720 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo);

	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx

; 1721 :                         }
; 1722 :                     }

	jmp	$LN30@PMC_DivRem
$LN47@PMC_DivRem:

; 1719 :                             __UNIT_TYPE r_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] : 0;

	xor	edx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR _r_lo$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1720 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo);

	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx

; 1721 :                         }
; 1722 :                     }

	jmp	$LN30@PMC_DivRem
$LN25@PMC_DivRem:

; 1723 :                     else
; 1724 :                     {
; 1725 :                         if (q != NULL)

	test	edi, edi
	je	$LN29@PMC_DivRem

; 1726 :                         {
; 1727 :                             __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1728 :                             __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1729 :                             __UNIT_TYPE nq_light_check_code;
; 1730 :                             if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq_light_check_code$8[ebp]
	push	eax
	mov	eax, edx
	sub	eax, ecx
	add	eax, 33					; 00000021H
	push	eax
	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN59@PMC_DivRem

; 1731 :                                 return (result);
; 1732 :                             __UNIT_TYPE_DIV v_buf[] = { v_lo, v_hi };

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v_buf$2[ebp], eax
	mov	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR _v_buf$2[ebp+4], eax

; 1733 :                             __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };
; 1734 :                             __UNIT_TYPE r_buf_code;
; 1735 :                             __UNIT_TYPE r_buf_words;
; 1736 :                             __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(r_bit_count, &r_buf_words, &r_buf_code);

	lea	eax, DWORD PTR _r_buf_code$5[ebp]
	push	eax
	lea	eax, DWORD PTR _r_buf_words$4[ebp]
	mov	DWORD PTR _work_v_buf$3[ebp], 0
	push	eax
	mov	eax, DWORD PTR _u_bit_count$1$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _work_v_buf$3[ebp+4], 0
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r_buf$1$[ebp], eax

; 1737 :                             if (r_buf == NULL)

	test	eax, eax
	je	$LN62@PMC_DivRem

; 1738 :                             {
; 1739 :                                 DeallocateNumber(nq);
; 1740 :                                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 1741 :                             }
; 1742 :                             (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, r_buf);

	push	eax
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+36]
	lea	eax, DWORD PTR _work_v_buf$3[ebp]
	push	eax
	push	2
	lea	eax, DWORD PTR _v_buf$2[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx+12]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [ebx+36]
	call	DWORD PTR _fp_DivRem_X_X

; 1743 :                             if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$8[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN59@PMC_DivRem

; 1744 :                                 return (result);
; 1745 :                             if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _r_buf_code$5[ebp]
	mov	ebx, DWORD PTR _r_buf$1$[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN59@PMC_DivRem

; 1746 :                                 return (result);
; 1747 :                             CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1749 :                             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	push	DWORD PTR _r_buf_words$4[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR [ebx+4]
	xor	eax, eax
	or	eax, DWORD PTR [ebx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1749 :                             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	push	ebx
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	call	_DeallocateBlock
	add	esp, 12					; 0000000cH
$LN61@PMC_DivRem:

; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :             }
; 1779 :             else
; 1780 :             {
; 1781 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1782 : 
; 1783 :                 // x と y の商・剰余を計算する
; 1784 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1785 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1786 :                 if (u_bit_count < v_bit_count)
; 1787 :                 {
; 1788 :                     // 明らかに u < v である場合
; 1789 : 
; 1790 :                     // q = 0, r = u を返す。
; 1791 :                     nq = q != NULL ? &number_zero : NULL;
; 1792 :                     *r = nu->BLOCK[0];
; 1793 :                 }
; 1794 :                 else
; 1795 :                 {
; 1796 :                     if (q != NULL)
; 1797 :                     {
; 1798 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1799 :                         __UNIT_TYPE nq_light_check_code;
; 1800 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1801 :                             return (result);
; 1802 :                         __UNIT_TYPE_DIV r_buf = 0;
; 1803 :                         DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1804 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1805 :                             return (result);
; 1806 :                         CommitNumber(nq);
; 1807 :                         *r = r_buf;
; 1808 :                         if (nq->IS_ZERO)
; 1809 :                         {
; 1810 :                             DeallocateNumber(nq);
; 1811 :                             nq = &number_zero;
; 1812 :                         }
; 1813 :                     }
; 1814 :                     else
; 1815 :                     {
; 1816 :                         __UNIT_TYPE_DIV r_buf = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v);
; 1817 :                         nq = NULL;
; 1818 :                         *r = r_buf;
; 1819 :                     }
; 1820 :                 }
; 1821 :             }
; 1822 : 
; 1823 :         }
; 1824 :     }
; 1825 :     if (q != NULL)

	mov	ecx, DWORD PTR _nq$[ebp]
	test	BYTE PTR [ecx], 1
	je	SHORT $LN30@PMC_DivRem
	push	ecx
	call	_DeallocateNumber
	mov	ecx, OFFSET _number_zero
	add	esp, 4
$LN30@PMC_DivRem:
	test	edi, edi
	je	$LN45@PMC_DivRem

; 1826 :         *q = (PMC_HANDLE_UINT)nq;

	mov	DWORD PTR [edi], ecx

; 1827 : #ifdef _DEBUG
; 1828 :     if (q != NULL)
; 1829 :     {
; 1830 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1831 :             return (result);
; 1832 :     }
; 1833 : #endif
; 1834 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi
	pop	esi

; 1835 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN29@PMC_DivRem:

; 1750 :                             if (nq->IS_ZERO)
; 1751 :                             {
; 1752 :                                 DeallocateNumber(nq);
; 1753 :                                 nq = &number_zero;
; 1754 :                             }
; 1755 :                         }
; 1756 :                         else
; 1757 :                         {
; 1758 :                             __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1759 :                             __UNIT_TYPE_DIV v_buf[] = { v_lo, v_hi };

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v_buf$1[ebp], eax
	mov	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR _v_buf$1[ebp+4], eax

; 1760 :                             __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };
; 1761 :                             __UNIT_TYPE r_buf_code;
; 1762 :                             __UNIT_TYPE r_buf_words;
; 1763 :                             __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(r_bit_count, &r_buf_words, &r_buf_code);

	lea	eax, DWORD PTR _r_buf_code$7[ebp]
	push	eax
	lea	eax, DWORD PTR _r_buf_words$10[ebp]
	mov	DWORD PTR _work_v_buf$6[ebp], 0
	push	eax
	lea	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _work_v_buf$6[ebp+4], 0
	push	eax
	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH

; 1764 :                             if (r_buf == NULL)

	test	edi, edi
	jne	SHORT $LN36@PMC_DivRem
$LN62@PMC_DivRem:

; 1765 :                             {
; 1766 :                                 DeallocateNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 1767 :                                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -6					; fffffffaH
	pop	edi
	pop	esi

; 1835 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN36@PMC_DivRem:

; 1768 :                             }
; 1769 :                             (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, NULL, r_buf);

	push	edi
	push	0
	lea	eax, DWORD PTR _work_v_buf$6[ebp]
	push	eax
	push	2
	lea	eax, DWORD PTR _v_buf$1[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx+12]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [ebx+36]
	call	DWORD PTR _fp_DivRem_X_X

; 1770 :                             if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _r_buf_code$7[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN59@PMC_DivRem

; 1774 :                             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	push	DWORD PTR _r_buf_words$10[ebp]
	mov	DWORD PTR _nq$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1774 :                             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	push	edi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	call	_DeallocateBlock
	add	esp, 8
$LN45@PMC_DivRem:

; 1827 : #ifdef _DEBUG
; 1828 :     if (q != NULL)
; 1829 :     {
; 1830 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1831 :             return (result);
; 1832 :     }
; 1833 : #endif
; 1834 :     return (PMC_STATUS_OK);

	pop	edi
	pop	esi
	xor	eax, eax

; 1835 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN57@PMC_DivRem:
	pop	esi

; 1614 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 1835 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_PMC_DivRem_X_L@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_I@16
_TEXT	SEGMENT
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_r_buf$1 = 16						; size = 4
_q$ = 16						; size = 4
_u_bit_count$1$ = 20					; size = 4
_nq_light_check_code$2 = 20				; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_I@16 PROC					; COMDAT

; 1306 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi

; 1307 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))
; 1308 :     {
; 1309 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1310 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1311 :     }
; 1312 :     if (u == NULL)

	mov	edi, DWORD PTR _u$[ebp]
	test	edi, edi
	je	$LN23@PMC_DivRem

; 1313 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1314 :     if (r == NULL)

	mov	ebx, DWORD PTR _r$[ebp]
	test	ebx, ebx
	je	$LN23@PMC_DivRem

; 1316 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1317 :     PMC_STATUS_CODE result;
; 1318 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1319 :         return (result);
; 1320 :     if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	test	edx, edx
	jne	SHORT $LN6@PMC_DivRem

; 1321 :     {
; 1322 :         // v が 0 である場合
; 1323 : 
; 1324 :         // 0 による除算はエラーで返す
; 1325 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	pop	edi
	lea	eax, DWORD PTR [edx-3]

; 1409 : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN6@PMC_DivRem:

; 1326 :     }
; 1327 :     NUMBER_HEADER* nq;
; 1328 :     if (nu->IS_ZERO)

	test	BYTE PTR [edi], 1
	push	esi
	je	SHORT $LN7@PMC_DivRem

; 1329 :     {
; 1330 :         // u が 0 である場合
; 1331 : 
; 1332 :         // q = 0, r = 0 を返す
; 1333 :         
; 1334 :         nq = q != NULL ? &number_zero : NULL;

	mov	esi, DWORD PTR _q$[ebp]
	xor	eax, eax
	test	esi, esi

; 1335 :         *r = 0;

	mov	DWORD PTR [ebx], eax
	mov	ecx, OFFSET _number_zero
	cmove	ecx, eax

; 1336 :     }

	jmp	$LN17@PMC_DivRem
$LN7@PMC_DivRem:

; 1337 :     else
; 1338 :     {
; 1339 :         // u が 0 ではない場合
; 1340 : 
; 1341 :         if (v == 1)

	cmp	edx, 1
	jne	SHORT $LN9@PMC_DivRem

; 1342 :         {
; 1343 :             // v が 1 である場合
; 1344 : 
; 1345 :             // q = u, r = 0 を返す
; 1346 :             if (q != NULL)

	mov	esi, DWORD PTR _q$[ebp]
	test	esi, esi
	je	SHORT $LN11@PMC_DivRem

; 1347 :             {
; 1348 :                 if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	push	edi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN25@PMC_DivRem
	mov	ecx, DWORD PTR _nq$[ebp]

; 1353 :             *r = 0;

	mov	DWORD PTR [ebx], eax

; 1354 :         }

	jmp	$LN17@PMC_DivRem
$LN11@PMC_DivRem:

; 1349 :                     return (result);
; 1350 :             }
; 1351 :             else
; 1352 :                 nq = NULL;

	xor	ecx, ecx

; 1353 :             *r = 0;

	mov	DWORD PTR [ebx], ecx

; 1354 :         }

	jmp	$LN17@PMC_DivRem
$LN9@PMC_DivRem:

; 1355 :         else
; 1356 :         {
; 1357 :             // u と v がともに 0 ではない場合
; 1358 : 
; 1359 :             // x と y の商・剰余を計算する
; 1360 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR [edi+16]

; 1361 :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	push	edx
	mov	DWORD PTR _u_bit_count$1$[ebp], eax
	call	__LZCNT_ALT_32

; 1362 :             if (u_bit_count < v_bit_count)

	mov	esi, DWORD PTR _q$[ebp]
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	add	esp, 4
	mov	eax, DWORD PTR _u_bit_count$1$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN14@PMC_DivRem

; 1363 :             {
; 1364 :                 // 明らかに u < v である場合
; 1365 : 
; 1366 :                 // q = 0, r = u を返す。
; 1367 :                 nq = q != NULL ? &number_zero : NULL;

	xor	eax, eax
	mov	ecx, OFFSET _number_zero
	test	esi, esi
	cmove	ecx, eax

; 1368 :                 *r = (_UINT32_T)nu->BLOCK[0];

	mov	eax, DWORD PTR [edi+36]
	mov	DWORD PTR _nq$[ebp], ecx
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx], eax

; 1369 :             }

	jmp	$LN17@PMC_DivRem
$LN14@PMC_DivRem:

; 1370 :             else
; 1371 :             {
; 1372 :                 if (q != NULL)

	test	esi, esi
	je	$LN16@PMC_DivRem

; 1373 :                 {
; 1374 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1375 :                     __UNIT_TYPE nq_light_check_code;
; 1376 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	sub	eax, ecx
	lea	edx, DWORD PTR _nq_light_check_code$2[ebp]
	push	edx
	add	eax, 33					; 00000021H
	push	eax
	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN25@PMC_DivRem

; 1377 :                         return (result);
; 1378 :                     __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR _r_buf$1[ebp], eax

; 1379 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	lea	eax, DWORD PTR _r_buf$1[ebp]
	push	eax
	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR [eax+36]
	mov	eax, DWORD PTR [edi+12]
	push	DWORD PTR _v$[ebp]
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+36]
	call	_DivRem_X_1W

; 1380 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	DWORD PTR _nq_light_check_code$2[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN25@PMC_DivRem

; 1381 :                         return (result);
; 1382 :                     CommitNumber(nq);

	push	DWORD PTR _nq$[ebp]
	call	_CommitNumber

; 1383 :                     *r = (_UINT32_T)r_buf;
; 1384 :                     if (nq->IS_ZERO)

	mov	ecx, DWORD PTR _nq$[ebp]
	add	esp, 4
	mov	eax, DWORD PTR _r_buf$1[ebp]
	mov	DWORD PTR [ebx], eax
	test	BYTE PTR [ecx], 1
	je	SHORT $LN17@PMC_DivRem

; 1385 :                     {
; 1386 :                         DeallocateNumber(nq);

	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 1387 :                         nq = &number_zero;

	mov	ecx, OFFSET _number_zero
$LN17@PMC_DivRem:

; 1395 :                 }
; 1396 :             }
; 1397 :         }
; 1398 :     }
; 1399 :     if (q != NULL)

	test	esi, esi
	je	SHORT $LN21@PMC_DivRem

; 1400 :         *q = (PMC_HANDLE_UINT)nq;

	mov	DWORD PTR [esi], ecx

; 1401 : #ifdef _DEBUG
; 1402 :     if (q != NULL)
; 1403 :     {
; 1404 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1405 :             return (result);
; 1406 :     }
; 1407 : #endif
; 1408 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi
	pop	edi

; 1409 : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN16@PMC_DivRem:

; 1388 :                     }
; 1389 :                 }
; 1390 :                 else
; 1391 :                 {
; 1392 :                     __UNIT_TYPE_DIV r_buf = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v);

	mov	eax, DWORD PTR [edi+12]
	push	edx
	and	eax, 1073741823				; 3fffffffH
	push	eax
	push	DWORD PTR [edi+36]
	call	_Rem_X_1W
	add	esp, 12					; 0000000cH

; 1393 :                     nq = NULL;
; 1394 :                     *r = (_UINT32_T)r_buf;

	mov	DWORD PTR [ebx], eax
$LN21@PMC_DivRem:

; 1401 : #ifdef _DEBUG
; 1402 :     if (q != NULL)
; 1403 :     {
; 1404 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1405 :             return (result);
; 1406 :     }
; 1407 : #endif
; 1408 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN25@PMC_DivRem:
	pop	esi
$LN1@PMC_DivRem:
	pop	edi

; 1409 : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
$LN23@PMC_DivRem:
	pop	edi

; 1315 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 1409 : }

	pop	ebx
	pop	ebp
	ret	16					; 00000010H
_PMC_DivRem_X_I@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _PMC_DivRem_L_X@20
_TEXT	SEGMENT
_u_buf$1 = -44						; size = 8
_u_buf$2 = -44						; size = 8
_r_buf$3 = -40						; size = 4
tv605 = -36						; size = 8
_work_v_buf$4 = -36					; size = 8
_work_v_buf$5 = -36					; size = 8
tv91 = -36						; size = 8
_u_buf$6 = -36						; size = 8
_u_buf$7 = -36						; size = 8
_r_buf$8 = -28						; size = 12
_r_buf$9 = -28						; size = 12
_q_buf$10 = -16						; size = 12
_q_buf$11 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_q$ = 20						; size = 4
_r$ = 24						; size = 4
_PMC_DivRem_L_X@20 PROC					; COMDAT

; 1412 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _v$[ebp]
	push	esi
	mov	esi, DWORD PTR _q$[ebp]
	push	edi
	mov	edi, DWORD PTR _r$[ebp]

; 1413 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(u))
; 1414 :     {
; 1415 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1416 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1417 :     }
; 1418 :     if (v == NULL)

	test	ebx, ebx
	je	$LN73@PMC_DivRem

; 1419 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1420 :     if (r == NULL)

	test	edi, edi
	je	$LN73@PMC_DivRem

; 1422 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1423 :     PMC_STATUS_CODE result;
; 1424 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1425 :         return (result);
; 1426 :     if (nv->IS_ZERO)

	test	BYTE PTR [ebx], 1
	je	SHORT $LN6@PMC_DivRem

; 1602 : }

	pop	edi
	pop	esi
	mov	eax, -3					; fffffffdH
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN6@PMC_DivRem:

; 1427 :     {
; 1428 :         // v が 0 である場合
; 1429 : 
; 1430 :         // 0 による除算はエラーで返す
; 1431 :         return (PMC_STATUS_DIVISION_BY_ZERO);
; 1432 :     }
; 1433 :     if (u == 0)

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, edx
	mov	ecx, DWORD PTR _u$[ebp+4]
	or	eax, ecx
	jne	SHORT $LN7@PMC_DivRem

; 1434 :     {
; 1435 :         // x が 0 である場合
; 1436 : 
; 1437 :         // q = 0, r = 0 を返す
; 1438 :         if (q != NULL)

	test	esi, esi
	je	SHORT $LN12@PMC_DivRem

; 1439 :             *q = 0;

	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax

; 1453 :             *r = 0;

	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], eax
	pop	edi

; 1602 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN7@PMC_DivRem:

; 1440 :         *r = 0;
; 1441 :     }
; 1442 :     else
; 1443 :     {
; 1444 :         // u が 0 ではない場合
; 1445 : 
; 1446 :         if (nv->IS_ONE)

	test	BYTE PTR [ebx], 2
	je	SHORT $LN10@PMC_DivRem

; 1447 :         {
; 1448 :             // v が 1 である場合
; 1449 : 
; 1450 :             // q = u, r = 0 を返す
; 1451 :             if (q != NULL)

	test	esi, esi
	je	SHORT $LN12@PMC_DivRem

; 1452 :                 *q = u;

	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], ecx
$LN12@PMC_DivRem:

; 1453 :             *r = 0;

	mov	DWORD PTR [edi], 0

; 1558 :                                 *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);
; 1559 :                             }
; 1560 :                         }
; 1561 :                     }
; 1562 :                 }
; 1563 :             }
; 1564 :             else
; 1565 :             {
; 1566 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1567 : 
; 1568 :                 // x と y の商・剰余を計算する
; 1569 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1570 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1571 :                 if (u_bit_count < v_bit_count)
; 1572 :                 {
; 1573 :                     // 明らかに u < v である場合
; 1574 : 
; 1575 :                     // q = 0, r = u を返す。
; 1576 :                     if (q != NULL)
; 1577 :                         *q = 0;
; 1578 :                     *r = u;
; 1579 :                 }
; 1580 :                 else
; 1581 :                 {
; 1582 :                     // u のビット数が v のビット数以上である場合
; 1583 : 
; 1584 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1585 :                     __UNIT_TYPE_DIV temp_r;
; 1586 :                     __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE_DIV)u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);
; 1587 :                     if (q != NULL)
; 1588 :                         *q = temp_q;
; 1589 :                     *r = temp_r;
; 1590 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1591 :                     if (sizeof(r) == sizeof(_UINT64_T))
; 1592 :                         IncrementDIV64Counter();
; 1593 :                     else
; 1594 :                         IncrementDIV32Counter();
; 1595 : #endif
; 1596 :                 }
; 1597 :             }
; 1598 : 
; 1599 :         }
; 1600 :     }
; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [edi+4], 0
	pop	edi

; 1602 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN10@PMC_DivRem:

; 1454 :         }
; 1455 :         else
; 1456 :         {
; 1457 :             // u > 0 かつ v > 1 である場合
; 1458 : 
; 1459 :             // u と v の商・剰余を計算する
; 1460 :             if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))
; 1461 :             {
; 1462 :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 1463 :                 _UINT32_T u_hi;
; 1464 :                 _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);
; 1465 :                 if (u_hi == 0)

	test	ecx, ecx
	jne	$LN15@PMC_DivRem

; 1466 :                 {
; 1467 :                     // u の値が 32bit で表現可能な場合
; 1468 :                     __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

	push	edx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 1469 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1470 :                     if (u_bit_count < v_bit_count)

	cmp	ecx, DWORD PTR [ebx+16]
	jae	SHORT $LN17@PMC_DivRem

; 1471 :                     {
; 1472 :                         // 明らかに u < v である場合
; 1473 : 
; 1474 :                         // q = 0, r = u を返す。
; 1475 :                         if (q != NULL)

	test	esi, esi
	je	SHORT $LN19@PMC_DivRem

; 1476 :                             *q = 0;

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
$LN19@PMC_DivRem:

; 1477 :                         *r = u_lo;

	mov	DWORD PTR [edi], edx

; 1558 :                                 *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);
; 1559 :                             }
; 1560 :                         }
; 1561 :                     }
; 1562 :                 }
; 1563 :             }
; 1564 :             else
; 1565 :             {
; 1566 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1567 : 
; 1568 :                 // x と y の商・剰余を計算する
; 1569 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1570 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1571 :                 if (u_bit_count < v_bit_count)
; 1572 :                 {
; 1573 :                     // 明らかに u < v である場合
; 1574 : 
; 1575 :                     // q = 0, r = u を返す。
; 1576 :                     if (q != NULL)
; 1577 :                         *q = 0;
; 1578 :                     *r = u;
; 1579 :                 }
; 1580 :                 else
; 1581 :                 {
; 1582 :                     // u のビット数が v のビット数以上である場合
; 1583 : 
; 1584 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1585 :                     __UNIT_TYPE_DIV temp_r;
; 1586 :                     __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE_DIV)u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);
; 1587 :                     if (q != NULL)
; 1588 :                         *q = temp_q;
; 1589 :                     *r = temp_r;
; 1590 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1591 :                     if (sizeof(r) == sizeof(_UINT64_T))
; 1592 :                         IncrementDIV64Counter();
; 1593 :                     else
; 1594 :                         IncrementDIV32Counter();
; 1595 : #endif
; 1596 :                 }
; 1597 :             }
; 1598 : 
; 1599 :         }
; 1600 :     }
; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [edi+4], 0
	pop	edi

; 1602 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN17@PMC_DivRem:

; 1478 :                     }
; 1479 :                     else
; 1480 :                     {
; 1481 :                         // u のビット数が v のビット数以上である場合
; 1482 : 
; 1483 :                         // u は 32bit で表現できるので、v も 32bit で表現できる。
; 1484 :                         __UNIT_TYPE_DIV temp_r;
; 1485 :                         __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	eax, DWORD PTR [ebx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             *r = (_UINT32_T)(t % v);

	push	ebx
	push	0
	push	DWORD PTR [eax]
	push	0
	push	edx
	call	__aulldvrm
	mov	DWORD PTR tv91[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv605[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1486 :                         if (q != NULL)

	test	esi, esi
	je	SHORT $LN20@PMC_DivRem

; 1487 :                             *q = temp_q;

	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], 0
$LN20@PMC_DivRem:

; 1488 :                         *r = temp_r;

	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [edi+4], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1602 : }

	pop	esi
	xor	eax, eax
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN15@PMC_DivRem:

; 1489 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1490 :                         if (sizeof(r) == sizeof(_UINT64_T))
; 1491 :                             IncrementDIV64Counter();
; 1492 :                         else
; 1493 :                             IncrementDIV32Counter();
; 1494 : #endif
; 1495 :                     }
; 1496 :                 }
; 1497 :                 else
; 1498 :                 {
; 1499 :                     // v の値が 32bit では表現できない場合
; 1500 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

	push	ecx
	call	__LZCNT_ALT_32
	mov	ecx, 64					; 00000040H
	add	esp, 4
	sub	ecx, eax

; 1501 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1502 :                     if (u_bit_count < v_bit_count)

	mov	eax, DWORD PTR [ebx+16]
	cmp	ecx, eax
	jae	SHORT $LN23@PMC_DivRem

; 1503 :                     {
; 1504 :                         // 明らかに u < v である場合
; 1505 : 
; 1506 :                         // q = 0, r = u を返す。
; 1507 :                         if (q != NULL)

	test	esi, esi
	je	SHORT $LN25@PMC_DivRem

; 1508 :                             *q = 0;

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
$LN25@PMC_DivRem:

; 1509 :                         *r = u;

	mov	eax, DWORD PTR _u$[ebp+4]
	mov	DWORD PTR [edi+4], eax

; 1558 :                                 *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);
; 1559 :                             }
; 1560 :                         }
; 1561 :                     }
; 1562 :                 }
; 1563 :             }
; 1564 :             else
; 1565 :             {
; 1566 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1567 : 
; 1568 :                 // x と y の商・剰余を計算する
; 1569 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1570 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1571 :                 if (u_bit_count < v_bit_count)
; 1572 :                 {
; 1573 :                     // 明らかに u < v である場合
; 1574 : 
; 1575 :                     // q = 0, r = u を返す。
; 1576 :                     if (q != NULL)
; 1577 :                         *q = 0;
; 1578 :                     *r = u;
; 1579 :                 }
; 1580 :                 else
; 1581 :                 {
; 1582 :                     // u のビット数が v のビット数以上である場合
; 1583 : 
; 1584 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1585 :                     __UNIT_TYPE_DIV temp_r;
; 1586 :                     __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE_DIV)u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);
; 1587 :                     if (q != NULL)
; 1588 :                         *q = temp_q;
; 1589 :                     *r = temp_r;
; 1590 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1591 :                     if (sizeof(r) == sizeof(_UINT64_T))
; 1592 :                         IncrementDIV64Counter();
; 1593 :                     else
; 1594 :                         IncrementDIV32Counter();
; 1595 : #endif
; 1596 :                 }
; 1597 :             }
; 1598 : 
; 1599 :         }
; 1600 :     }
; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [edi], edx
	pop	edi

; 1602 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN23@PMC_DivRem:

; 1510 :                     }
; 1511 :                     else
; 1512 :                     {
; 1513 :                         // u のビット長が 33 以上 64 以下であり、かつ、u のビット長が v のビット長以上(v のビット長は多くとも64以下)である場合
; 1514 : 
; 1515 :                         if (nv->UNIT_BIT_COUNT <= sizeof(__UNIT_TYPE_DIV) * 8)

	cmp	eax, 32					; 00000020H
	ja	$LN26@PMC_DivRem

; 1516 :                         {
; 1517 :                             // v が 32bit で表現できる場合
; 1518 : 
; 1519 :                             if (q != NULL)

	mov	eax, DWORD PTR [ebx+36]
	mov	DWORD PTR _u_buf$7[ebp], edx
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _u$[ebp+4]
	mov	DWORD PTR _u_buf$7[ebp+4], eax
	test	esi, esi
	je	SHORT $LN28@PMC_DivRem

; 1525 :                                 DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0], q_buf, &r_buf);

	lea	eax, DWORD PTR _r_buf$3[ebp]
	mov	DWORD PTR _q_buf$11[ebp], 0
	push	eax
	lea	eax, DWORD PTR _q_buf$11[ebp]
	mov	DWORD PTR _q_buf$11[ebp+4], 0
	push	eax
	push	ecx
	lea	eax, DWORD PTR _u_buf$7[ebp]
	mov	DWORD PTR _q_buf$11[ebp+8], 0
	push	2
	push	eax
	call	_DivRem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR _q_buf$11[ebp+4]
	xor	eax, eax
	or	eax, DWORD PTR _q_buf$11[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1525 :                                 DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0], q_buf, &r_buf);

	add	esp, 20					; 00000014H

; 1526 : 
; 1527 :                                 *q = _FROMWORDTODWORD(q_buf[1], q_buf[0]);

	mov	DWORD PTR [esi], eax

; 1528 :                                 *r = r_buf;

	mov	eax, DWORD PTR _r_buf$3[ebp]
	mov	DWORD PTR [esi+4], ecx

; 1534 :                                 *r = r_buf;
; 1535 :                             }
; 1536 :                         }

	mov	DWORD PTR [edi], eax

; 1558 :                                 *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);
; 1559 :                             }
; 1560 :                         }
; 1561 :                     }
; 1562 :                 }
; 1563 :             }
; 1564 :             else
; 1565 :             {
; 1566 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1567 : 
; 1568 :                 // x と y の商・剰余を計算する
; 1569 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1570 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1571 :                 if (u_bit_count < v_bit_count)
; 1572 :                 {
; 1573 :                     // 明らかに u < v である場合
; 1574 : 
; 1575 :                     // q = 0, r = u を返す。
; 1576 :                     if (q != NULL)
; 1577 :                         *q = 0;
; 1578 :                     *r = u;
; 1579 :                 }
; 1580 :                 else
; 1581 :                 {
; 1582 :                     // u のビット数が v のビット数以上である場合
; 1583 : 
; 1584 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1585 :                     __UNIT_TYPE_DIV temp_r;
; 1586 :                     __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE_DIV)u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);
; 1587 :                     if (q != NULL)
; 1588 :                         *q = temp_q;
; 1589 :                     *r = temp_r;
; 1590 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1591 :                     if (sizeof(r) == sizeof(_UINT64_T))
; 1592 :                         IncrementDIV64Counter();
; 1593 :                     else
; 1594 :                         IncrementDIV32Counter();
; 1595 : #endif
; 1596 :                 }
; 1597 :             }
; 1598 : 
; 1599 :         }
; 1600 :     }
; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [edi+4], 0
	pop	edi

; 1602 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN28@PMC_DivRem:

; 1529 :                             }
; 1530 :                             else
; 1531 :                             {
; 1532 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };
; 1533 :                                 __UNIT_TYPE_DIV r_buf = Rem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0]);

	push	ecx
	lea	eax, DWORD PTR _u_buf$6[ebp]
	push	2
	push	eax
	call	_Rem_X_1W
	add	esp, 12					; 0000000cH

; 1534 :                                 *r = r_buf;
; 1535 :                             }
; 1536 :                         }

	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], 0

; 1558 :                                 *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);
; 1559 :                             }
; 1560 :                         }
; 1561 :                     }
; 1562 :                 }
; 1563 :             }
; 1564 :             else
; 1565 :             {
; 1566 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1567 : 
; 1568 :                 // x と y の商・剰余を計算する
; 1569 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1570 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1571 :                 if (u_bit_count < v_bit_count)
; 1572 :                 {
; 1573 :                     // 明らかに u < v である場合
; 1574 : 
; 1575 :                     // q = 0, r = u を返す。
; 1576 :                     if (q != NULL)
; 1577 :                         *q = 0;
; 1578 :                     *r = u;
; 1579 :                 }
; 1580 :                 else
; 1581 :                 {
; 1582 :                     // u のビット数が v のビット数以上である場合
; 1583 : 
; 1584 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1585 :                     __UNIT_TYPE_DIV temp_r;
; 1586 :                     __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE_DIV)u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);
; 1587 :                     if (q != NULL)
; 1588 :                         *q = temp_q;
; 1589 :                     *r = temp_r;
; 1590 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1591 :                     if (sizeof(r) == sizeof(_UINT64_T))
; 1592 :                         IncrementDIV64Counter();
; 1593 :                     else
; 1594 :                         IncrementDIV32Counter();
; 1595 : #endif
; 1596 :                 }
; 1597 :             }
; 1598 : 
; 1599 :         }
; 1600 :     }
; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 1602 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN26@PMC_DivRem:

; 1537 :                         else
; 1538 :                         {
; 1539 :                             // v が 32bit では表現できない場合
; 1540 : 
; 1541 :                             // この場合、2 ワード / 2 ワード の除算となるため、_DIVREM_UNIT 単発では計算できない。
; 1542 :                             if (q != NULL)

	mov	eax, DWORD PTR _u$[ebp+4]
	mov	ecx, DWORD PTR [ebx+12]
	mov	DWORD PTR _u_buf$2[ebp+4], eax
	and	ecx, 1073741823				; 3fffffffH
	mov	DWORD PTR _u_buf$2[ebp], edx
	lea	eax, DWORD PTR _r_buf$9[ebp]
	mov	DWORD PTR _r_buf$9[ebp], 0
	mov	DWORD PTR _r_buf$9[ebp+4], 0
	mov	DWORD PTR _r_buf$9[ebp+8], 0
	mov	DWORD PTR _work_v_buf$5[ebp], 0
	mov	DWORD PTR _work_v_buf$5[ebp+4], 0
	push	eax
	test	esi, esi
	je	SHORT $LN30@PMC_DivRem

; 1543 :                             {
; 1544 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };
; 1545 :                                 __UNIT_TYPE_DIV q_buf[] = { 0, 0, 0 };// 演算結果を格納するためには u のビット数 - v のビット数 + 1 ビットだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1546 :                                 __UNIT_TYPE_DIV r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1547 :                                 __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };
; 1548 :                                 (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, q_buf, r_buf);

	lea	eax, DWORD PTR _q_buf$10[ebp]
	mov	DWORD PTR _q_buf$10[ebp], 0
	push	eax
	lea	eax, DWORD PTR _work_v_buf$5[ebp]
	mov	DWORD PTR _q_buf$10[ebp+4], 0
	push	eax
	mov	eax, DWORD PTR [ebx+36]
	push	ecx
	push	eax
	lea	eax, DWORD PTR _u_buf$2[ebp]
	mov	DWORD PTR _q_buf$10[ebp+8], 0
	push	2
	push	eax
	call	DWORD PTR _fp_DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR _q_buf$10[ebp+4]
	xor	eax, eax
	or	eax, DWORD PTR _q_buf$10[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1549 :                                 *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx

; 1550 :                                 *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);
; 1551 :                             }

	jmp	SHORT $LN74@PMC_DivRem
$LN30@PMC_DivRem:

; 1552 :                             else
; 1553 :                             {
; 1554 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };
; 1555 :                                 __UNIT_TYPE_DIV r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1556 :                                 __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };
; 1557 :                                 (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, NULL, r_buf);

	push	0
	lea	eax, DWORD PTR _work_v_buf$4[ebp]
	push	eax
	mov	eax, DWORD PTR [ebx+36]
	push	ecx
	push	eax
	lea	eax, DWORD PTR _u_buf$1[ebp]
	push	2
	push	eax
	call	DWORD PTR _fp_DivRem_X_X
$LN74@PMC_DivRem:

; 1558 :                                 *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);
; 1559 :                             }
; 1560 :                         }
; 1561 :                     }
; 1562 :                 }
; 1563 :             }
; 1564 :             else
; 1565 :             {
; 1566 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1567 : 
; 1568 :                 // x と y の商・剰余を計算する
; 1569 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1570 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1571 :                 if (u_bit_count < v_bit_count)
; 1572 :                 {
; 1573 :                     // 明らかに u < v である場合
; 1574 : 
; 1575 :                     // q = 0, r = u を返す。
; 1576 :                     if (q != NULL)
; 1577 :                         *q = 0;
; 1578 :                     *r = u;
; 1579 :                 }
; 1580 :                 else
; 1581 :                 {
; 1582 :                     // u のビット数が v のビット数以上である場合
; 1583 : 
; 1584 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1585 :                     __UNIT_TYPE_DIV temp_r;
; 1586 :                     __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE_DIV)u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);
; 1587 :                     if (q != NULL)
; 1588 :                         *q = temp_q;
; 1589 :                     *r = temp_r;
; 1590 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1591 :                     if (sizeof(r) == sizeof(_UINT64_T))
; 1592 :                         IncrementDIV64Counter();
; 1593 :                     else
; 1594 :                         IncrementDIV32Counter();
; 1595 : #endif
; 1596 :                 }
; 1597 :             }
; 1598 : 
; 1599 :         }
; 1600 :     }
; 1601 :     return (PMC_STATUS_OK);

	mov	ecx, DWORD PTR _r_buf$8[ebp+4]
	add	esp, 28					; 0000001cH
	xor	eax, eax
	mov	DWORD PTR [edi+4], ecx
	or	eax, DWORD PTR _r_buf$8[ebp]
	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 1602 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN73@PMC_DivRem:

; 1421 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_DivRem:

; 1602 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_PMC_DivRem_L_X@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _PMC_DivRem_I_X@16
_TEXT	SEGMENT
tv266 = -8						; size = 8
tv152 = -8						; size = 8
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_I_X@16 PROC					; COMDAT

; 1224 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 1225 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))
; 1226 :     {
; 1227 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1228 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1229 :     }
; 1230 :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	test	esi, esi
	je	$LN32@PMC_DivRem

; 1231 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1232 :     if (r == NULL)

	mov	edi, DWORD PTR _r$[ebp]
	test	edi, edi
	je	$LN32@PMC_DivRem

; 1234 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1235 :     PMC_STATUS_CODE result;
; 1236 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1237 :         return (result);
; 1238 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR [esi]
	test	al, 1
	je	SHORT $LN6@PMC_DivRem

; 1239 :     {
; 1240 :         // v が 0 である場合
; 1241 : 
; 1242 :         // 0 による除算はエラーで返す
; 1243 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	pop	edi
	mov	eax, -3					; fffffffdH

; 1303 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN6@PMC_DivRem:

; 1244 :     }
; 1245 :     if (u == 0)

	mov	edx, DWORD PTR _u$[ebp]
	test	edx, edx
	jne	SHORT $LN7@PMC_DivRem

; 1246 :     {
; 1247 :         // u が 0 である場合
; 1248 : 
; 1249 :         // q = 0, r = 0 を返す
; 1250 :         if (q != NULL)

	mov	eax, DWORD PTR _q$[ebp]
	test	eax, eax
	je	SHORT $LN12@PMC_DivRem

; 1251 :             *q = 0;

	mov	DWORD PTR [eax], edx

; 1302 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [edi], edx
	pop	edi

; 1303 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN7@PMC_DivRem:

; 1252 :         *r = 0;
; 1253 :     }
; 1254 :     else
; 1255 :     {
; 1256 :         // u が 0 ではない場合
; 1257 : 
; 1258 :         if (nv->IS_ONE)

	test	al, 2
	je	SHORT $LN10@PMC_DivRem

; 1259 :         {
; 1260 :             // v が 1 である場合
; 1261 : 
; 1262 :             // q = u, r = 0 を返す
; 1263 :             if (q != NULL)

	mov	eax, DWORD PTR _q$[ebp]
	test	eax, eax
	je	SHORT $LN12@PMC_DivRem

; 1264 :                 *q = u;

	mov	DWORD PTR [eax], edx
$LN12@PMC_DivRem:

; 1265 :             *r = 0;

	mov	DWORD PTR [edi], 0

; 1302 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 1303 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN10@PMC_DivRem:

; 1266 :         }
; 1267 :         else
; 1268 :         {
; 1269 :             // u と v がともに 0 ではない場合
; 1270 : 
; 1271 :             // x と y の商・剰余を計算する
; 1272 :             __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

	push	edx
	call	__LZCNT_ALT_32
	mov	ecx, 32					; 00000020H
	add	esp, 4
	sub	ecx, eax

; 1273 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1274 :             if (u_bit_count < v_bit_count)

	cmp	ecx, DWORD PTR [esi+16]
	jae	SHORT $LN13@PMC_DivRem

; 1275 :             {
; 1276 :                 // 明らかに u < v である場合
; 1277 : 
; 1278 :                 // q = 0, r = u を返す。
; 1279 :                 if (q != NULL)

	mov	eax, DWORD PTR _q$[ebp]
	test	eax, eax
	je	SHORT $LN15@PMC_DivRem

; 1280 :                     *q = 0;

	mov	DWORD PTR [eax], 0
$LN15@PMC_DivRem:

; 1281 :                 *r = u;

	mov	DWORD PTR [edi], edx

; 1302 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	edi

; 1303 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN13@PMC_DivRem:

; 1282 :             }
; 1283 :             else
; 1284 :             {
; 1285 :                 // u のビット数が v のビット数以上である場合
; 1286 :                 
; 1287 :                 // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1288 :                 __UNIT_TYPE_DIV temp_r;
; 1289 :                 __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	eax, DWORD PTR [esi+36]
	push	ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             *r = (_UINT32_T)(t % v);

	push	ebx
	push	0
	push	DWORD PTR [eax]
	push	0
	push	edx
	call	__aulldvrm
	mov	DWORD PTR tv152[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv266[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1290 :                 if (q != NULL)

	mov	edx, DWORD PTR _q$[ebp]
	pop	ebx
	test	edx, edx
	je	SHORT $LN16@PMC_DivRem

; 1291 :                     *q = temp_q;

	mov	DWORD PTR [edx], eax
$LN16@PMC_DivRem:

; 1292 :                 *r = temp_r;

	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1302 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1303 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN32@PMC_DivRem:

; 1233 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_DivRem:
	pop	edi

; 1303 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_DivRem_I_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _Initialize_DivRem
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_DivRem PROC					; COMDAT

; 2047 : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _feature$[ebp]

; 2048 :     fp_DivRem_X_X = feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2 ? DivRem_X_X_using_ADX_MULX : DivRem_X_X_using_ADC_MUL;
; 2049 :     return (PMC_STATUS_OK);

	mov	ecx, OFFSET _DivRem_X_X_using_ADX_MULX
	mov	edx, OFFSET _DivRem_X_X_using_ADC_MUL
	mov	eax, DWORD PTR [eax]
	and	eax, 10					; 0000000aH
	cmp	al, 10					; 0000000aH
	cmovne	ecx, edx
	xor	eax, eax
	mov	DWORD PTR _fp_DivRem_X_X, ecx

; 2050 : }

	pop	ebp
	ret	0
_Initialize_DivRem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DivRem_X_X
_TEXT	SEGMENT
tv261 = -8						; size = 8
tv167 = -8						; size = 8
_u_buf$ = 8						; size = 4
_r$1 = 12						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X PROC					; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp

; 40   :     __UNIT_TYPE_DIV* u_buf_2 = (__UNIT_TYPE_DIV*)u_buf;
; 41   :     __UNIT_TYPE u_count_2 = u_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));
; 42   :     __UNIT_TYPE_DIV* v_buf_2 = (__UNIT_TYPE_DIV*)v_buf;
; 43   :     __UNIT_TYPE v_count_2 = v_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));
; 44   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 45   :     {
; 46   :         if (u_buf_2[u_count_2 - 1] == 0)
; 47   :             --u_count_2;
; 48   :         if (v_buf_2[v_count_2 - 1] == 0)
; 49   :             --v_count_2;
; 50   :     }
; 51   :     if (v_count_2 == 1)

	mov	eax, DWORD PTR _v_count$[ebp]
	sub	esp, 8
	push	esi
	cmp	eax, 1
	jne	SHORT $LN5@DivRem_X_X

; 52   :     {
; 53   :         if (u_count_2 == 1)

	mov	eax, DWORD PTR _v_buf$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, 1
	jne	SHORT $LN7@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR _u_buf$[ebp]
	push	ebx

; 384  :             *r = (_UINT32_T)(t % v);

	push	ebx
	push	0
	push	ecx
	push	0
	push	DWORD PTR [eax]
	call	__aulldvrm
	mov	DWORD PTR tv167[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv261[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 57   :             if (q_buf != NULL)

	mov	edx, DWORD PTR _q_buf$[ebp]
	pop	ebx
	test	edx, edx
	je	SHORT $LN9@DivRem_X_X

; 58   :                 q_buf[0] = q;

	mov	DWORD PTR [edx], eax
$LN9@DivRem_X_X:

; 59   :             r_buf[0] = r;

	mov	eax, DWORD PTR _r_buf$[ebp]
	mov	DWORD PTR [eax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
	pop	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 90   : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@DivRem_X_X:

; 60   : #ifdef ENABLED_PERFORMANCE_COUNTER
; 61   :             if (sizeof(r) == sizeof(_UINT64_T))
; 62   :                 IncrementDIV64Counter();
; 63   :             else
; 64   :                 IncrementDIV32Counter();
; 65   : #endif
; 66   :         }
; 67   :         else
; 68   :         {
; 69   :             if (q_buf != NULL)

	mov	edx, DWORD PTR _q_buf$[ebp]
	test	edx, edx
	je	SHORT $LN12@DivRem_X_X

; 70   :             {
; 71   :                 __UNIT_TYPE_DIV r;
; 72   :                 DivRem_X_1W(u_buf_2, u_count_2, v_buf_2[0], (__UNIT_TYPE_DIV*)q_buf, &r);

	lea	esi, DWORD PTR _r$1[ebp]
	push	esi
	push	edx
	push	ecx
	push	eax
	push	DWORD PTR _u_buf$[ebp]
	call	_DivRem_X_1W

; 73   :                 r_buf[0] = r;

	mov	ecx, DWORD PTR _r_buf$[ebp]
	add	esp, 20					; 00000014H
	mov	eax, DWORD PTR _r$1[ebp]
	mov	DWORD PTR [ecx], eax
	pop	esi

; 90   : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@DivRem_X_X:

; 74   :             }
; 75   :             else
; 76   :                 r_buf[0] = Rem_X_1W(u_buf_2, u_count_2, v_buf_2[0]);

	push	ecx
	push	eax
	push	DWORD PTR _u_buf$[ebp]
	call	_Rem_X_1W
	mov	ecx, DWORD PTR _r_buf$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx], eax
	pop	esi

; 90   : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@DivRem_X_X:

; 77   :         }
; 78   :     }
; 79   :     else
; 80   :     {
; 81   :         if (u_count_2 < v_count_2)

	mov	ecx, DWORD PTR _u_count$[ebp]
	cmp	ecx, eax
	jae	SHORT $LN14@DivRem_X_X

; 82   :         {
; 83   :             if (q_buf != NULL)

	mov	eax, DWORD PTR _q_buf$[ebp]
	test	eax, eax
	je	SHORT $LN16@DivRem_X_X

; 84   :                 q_buf[0] = 0;

	mov	DWORD PTR [eax], 0
$LN16@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	esi, DWORD PTR _u_buf$[ebp]
	push	edi
	mov	edi, DWORD PTR _r_buf$[ebp]
	rep movsd
	pop	edi
	pop	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 90   : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@DivRem_X_X:

; 85   :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);
; 86   :         }
; 87   :         else
; 88   :             (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, (__UNIT_TYPE_DIV*)work_v_buf, (__UNIT_TYPE_DIV*)q_buf, (__UNIT_TYPE_DIV*)r_buf);

	push	DWORD PTR _r_buf$[ebp]
	push	DWORD PTR _q_buf$[ebp]
	push	DWORD PTR _work_v_buf$[ebp]
	push	eax
	push	DWORD PTR _v_buf$[ebp]
	push	ecx
	push	DWORD PTR _u_buf$[ebp]
	call	DWORD PTR _fp_DivRem_X_X
	add	esp, 28					; 0000001cH
	pop	esi

; 90   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _Rem_X_1W
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v$ = 16						; size = 4
_Rem_X_1W PROC						; COMDAT

; 93   : {

	push	ebp
	mov	ebp, esp
	push	ebx

; 94   :     // u の最上位ワードは 0 でありうることに注意すること。
; 95   :     __UNIT_TYPE_DIV* up = u_buf + u_buf_len - 1;

	mov	ebx, DWORD PTR _u_buf_len$[ebp]

; 96   :     __UNIT_TYPE u_count = u_buf_len;
; 97   :     __UNIT_TYPE_DIV dummy_q;
; 98   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 99   :     {
; 100  :         while (*up == 0)
; 101  :         {
; 102  :             --up;
; 103  :             --u_count;
; 104  :         }
; 105  :     }
; 106  :     __UNIT_TYPE_DIV r = 0;

	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR _u_buf$[ebp]

; 107  :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, ebx
	add	esi, -4					; fffffffcH
	shr	eax, 5
	push	edi
	mov	edi, DWORD PTR _v$[ebp]
	lea	esi, DWORD PTR [esi+ebx*4]

; 108  :     while (count != 0)

	test	eax, eax
	je	$LN555@Rem_X_1W
	mov	ebx, eax
$LL4@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 429  :             return ((_UINT32_T)(t % v));

	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [esi]

; 429  :             return ((_UINT32_T)(t % v));

	push	edx
	push	eax
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-4]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-8]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-12]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-16]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-20]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-24]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-28]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-32]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-36]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-40]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-44]

; 429  :             return ((_UINT32_T)(t % v));

	push	0
	push	edi
	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-48]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-52]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-56]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-60]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-64]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-68]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-72]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-76]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-80]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-84]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-88]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-92]

; 429  :             return ((_UINT32_T)(t % v));

	push	0
	push	edi
	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-96]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-100]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-104]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-108]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-112]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-116]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-120]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-124]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	mov	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 142  :         up -= 32;

	add	esi, -128				; ffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	ecx, 32					; 00000020H
	mov	eax, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [eax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 143  :         --count;

	sub	ebx, 1
	jne	$LL4@Rem_X_1W
	mov	ebx, DWORD PTR _u_buf_len$[ebp]
$LN555@Rem_X_1W:

; 144  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 145  :         if (sizeof(r) == sizeof(_UINT64_T))
; 146  :             AddToDIV64Counter(32);
; 147  :         else
; 148  :             AddToDIV32Counter(32);
; 149  : #endif
; 150  :     }
; 151  : 
; 152  :     if (u_count & 0x10)

	test	bl, 16					; 00000010H
	je	$LN415@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 429  :             return ((_UINT32_T)(t % v));

	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [esi]

; 429  :             return ((_UINT32_T)(t % v));

	push	edx
	push	eax
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-4]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-8]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-12]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-16]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-20]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-24]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-28]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-32]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-36]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-40]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-44]

; 429  :             return ((_UINT32_T)(t % v));

	push	0
	push	edi
	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-48]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-52]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-56]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-60]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	mov	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 170  :         up -= 16;

	sub	esi, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 16					; 00000010H
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
$LN415@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 179  :     if (u_count & 0x8)

	test	bl, 8
	je	$LN483@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 429  :             return ((_UINT32_T)(t % v));

	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [esi]

; 429  :             return ((_UINT32_T)(t % v));

	push	edx
	push	eax
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-4]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-8]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-12]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-16]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-20]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-24]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-28]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	mov	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 189  :         up -= 8;

	sub	esi, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 8
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
$LN483@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 198  :     if (u_count & 0x4)

	test	bl, 4
	je	SHORT $LN519@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 429  :             return ((_UINT32_T)(t % v));

	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [esi]

; 429  :             return ((_UINT32_T)(t % v));

	push	edx
	push	eax
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-4]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-8]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-12]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	mov	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 204  :         up -= 4;

	sub	esi, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 4
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
$LN519@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 213  :     if (u_count & 0x2)

	test	bl, 2
	je	SHORT $LN539@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 429  :             return ((_UINT32_T)(t % v));

	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [esi]

; 429  :             return ((_UINT32_T)(t % v));

	push	edx
	push	eax
	call	__aullrem
	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	ecx, ecx
	or	ecx, DWORD PTR [esi-4]

; 429  :             return ((_UINT32_T)(t % v));

	push	eax
	push	ecx
	call	__aullrem
	mov	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 217  :         up -= 2;

	sub	esi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 2
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
$LN539@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 226  :     if (u_count & 0x1)

	test	bl, 1
	je	SHORT $LN557@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 429  :             return ((_UINT32_T)(t % v));

	push	0
	push	edi

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [esi]

; 429  :             return ((_UINT32_T)(t % v));

	push	edx
	push	eax
	call	__aullrem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
	pop	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 239  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN557@Rem_X_1W:
	pop	edi
	pop	esi
	mov	eax, edx
	pop	ebx
	pop	ebp
	ret	0
_Rem_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _DivRem_X_1W
_TEXT	SEGMENT
tv6404 = -8						; size = 8
tv6403 = -8						; size = 8
tv6394 = -8						; size = 8
tv6393 = -8						; size = 8
tv6383 = -8						; size = 8
tv6382 = -8						; size = 8
tv6372 = -8						; size = 8
tv6371 = -8						; size = 8
tv6361 = -8						; size = 8
tv6360 = -8						; size = 8
tv6350 = -8						; size = 8
tv6349 = -8						; size = 8
tv6339 = -8						; size = 8
tv6338 = -8						; size = 8
tv6328 = -8						; size = 8
tv6327 = -8						; size = 8
tv6317 = -8						; size = 8
tv6316 = -8						; size = 8
tv6306 = -8						; size = 8
tv6305 = -8						; size = 8
tv6295 = -8						; size = 8
tv6294 = -8						; size = 8
tv6284 = -8						; size = 8
tv6283 = -8						; size = 8
tv6273 = -8						; size = 8
tv6272 = -8						; size = 8
tv6262 = -8						; size = 8
tv6261 = -8						; size = 8
tv6251 = -8						; size = 8
tv6250 = -8						; size = 8
tv6240 = -8						; size = 8
tv6239 = -8						; size = 8
tv6229 = -8						; size = 8
tv6228 = -8						; size = 8
tv6218 = -8						; size = 8
tv6217 = -8						; size = 8
tv6207 = -8						; size = 8
tv6206 = -8						; size = 8
tv6196 = -8						; size = 8
tv6195 = -8						; size = 8
tv6185 = -8						; size = 8
tv6184 = -8						; size = 8
tv6174 = -8						; size = 8
tv6173 = -8						; size = 8
tv6163 = -8						; size = 8
tv6162 = -8						; size = 8
tv6152 = -8						; size = 8
tv6151 = -8						; size = 8
tv6141 = -8						; size = 8
tv6140 = -8						; size = 8
tv6130 = -8						; size = 8
tv6129 = -8						; size = 8
tv6119 = -8						; size = 8
tv6118 = -8						; size = 8
tv6108 = -8						; size = 8
tv6107 = -8						; size = 8
tv6097 = -8						; size = 8
tv6096 = -8						; size = 8
tv6086 = -8						; size = 8
tv6085 = -8						; size = 8
tv6075 = -8						; size = 8
tv6074 = -8						; size = 8
tv6064 = -8						; size = 8
tv6063 = -8						; size = 8
tv6050 = -8						; size = 8
tv6049 = -8						; size = 8
tv6040 = -8						; size = 8
tv6039 = -8						; size = 8
tv6029 = -8						; size = 8
tv6028 = -8						; size = 8
tv6018 = -8						; size = 8
tv6017 = -8						; size = 8
tv6007 = -8						; size = 8
tv6006 = -8						; size = 8
tv5996 = -8						; size = 8
tv5995 = -8						; size = 8
tv5985 = -8						; size = 8
tv5984 = -8						; size = 8
tv5974 = -8						; size = 8
tv5973 = -8						; size = 8
tv5963 = -8						; size = 8
tv5962 = -8						; size = 8
tv5952 = -8						; size = 8
tv5951 = -8						; size = 8
tv5941 = -8						; size = 8
tv5940 = -8						; size = 8
tv5930 = -8						; size = 8
tv5929 = -8						; size = 8
tv5919 = -8						; size = 8
tv5918 = -8						; size = 8
tv5908 = -8						; size = 8
tv5907 = -8						; size = 8
tv5897 = -8						; size = 8
tv5896 = -8						; size = 8
tv5886 = -8						; size = 8
tv5885 = -8						; size = 8
tv5873 = -8						; size = 8
tv5872 = -8						; size = 8
tv5863 = -8						; size = 8
tv5862 = -8						; size = 8
tv5852 = -8						; size = 8
tv5851 = -8						; size = 8
tv5841 = -8						; size = 8
tv5840 = -8						; size = 8
tv5830 = -8						; size = 8
tv5829 = -8						; size = 8
tv5819 = -8						; size = 8
tv5818 = -8						; size = 8
tv5808 = -8						; size = 8
tv5807 = -8						; size = 8
tv5797 = -8						; size = 8
tv5796 = -8						; size = 8
tv5784 = -8						; size = 8
tv5783 = -8						; size = 8
tv5774 = -8						; size = 8
tv5773 = -8						; size = 8
tv5763 = -8						; size = 8
tv5762 = -8						; size = 8
tv5752 = -8						; size = 8
tv5751 = -8						; size = 8
tv5739 = -8						; size = 8
tv5738 = -8						; size = 8
tv5729 = -8						; size = 8
tv5728 = -8						; size = 8
tv5524 = -8						; size = 8
tv5523 = -8						; size = 8
_count$1$ = 8						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v$ = 16						; size = 4
_q_buf$ = 20						; size = 4
_r_buf$ = 24						; size = 4
_DivRem_X_1W PROC					; COMDAT

; 242  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 243  :     // u の最上位ワードは 0 でありうることに注意すること。
; 244  :     __UNIT_TYPE_DIV* up = u_buf + u_buf_len - 1;

	mov	ecx, DWORD PTR _u_buf_len$[ebp]

; 245  :     __UNIT_TYPE_DIV* qp = q_buf + u_buf_len - 1;
; 246  :     __UNIT_TYPE u_count = u_buf_len;
; 247  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 248  :     {
; 249  :         while (*up == 0)
; 250  :         {
; 251  :             --up;
; 252  :             --qp;
; 253  :             --u_count;
; 254  :         }
; 255  :     }
; 256  :     __UNIT_TYPE_DIV r = 0;
; 257  :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, ecx
	push	ebx
	push	esi
	mov	esi, DWORD PTR _q_buf$[ebp]
	xor	ebx, ebx
	push	edi
	mov	edi, DWORD PTR _u_buf$[ebp]
	add	esi, -4					; fffffffcH
	add	edi, -4					; fffffffcH
	shr	eax, 5
	mov	DWORD PTR _count$1$[ebp], eax
	lea	esi, DWORD PTR [esi+ecx*4]
	lea	edi, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR _v$[ebp]

; 258  :     while (count != 0)

	test	eax, eax
	je	$LN555@DivRem_X_1
$LL4@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	ecx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6403[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6404[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6393[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6394[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6382[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6383[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6371[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-12], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-16]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6372[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6360[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-16], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-20]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6361[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6349[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-20], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-24]

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6350[ebp+4], edx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6338[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-24], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-28]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6339[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6327[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-28], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-32]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6328[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6316[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-32], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-36]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6317[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6305[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-36], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-40]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6306[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6294[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-40], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-44]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6295[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6283[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-44], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-48]

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6284[ebp+4], edx
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6272[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-48], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-52]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6273[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6261[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-52], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-56]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6262[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6250[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-56], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-60]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6251[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6239[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-60], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-64]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6240[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6228[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-64], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-68]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6229[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6217[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-68], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-72]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6218[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6206[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-72], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-76]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6207[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6195[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-76], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-80]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6196[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6184[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-80], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-84]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6185[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6173[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-84], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-88]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6174[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6162[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-88], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-92]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6163[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6151[ebp+4], ebx
	pop	ebx
	push	ebx
	mov	DWORD PTR [esi-92], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax

; 428  :             *q = (_UINT32_T)(t / v);

	push	0
	push	DWORD PTR _v$[ebp]

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, ecx

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6152[ebp+4], edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR [edi-96]

; 428  :             *q = (_UINT32_T)(t / v);

	push	eax
	push	edx
	call	__aulldvrm
	mov	DWORD PTR tv6140[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-96], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-100]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6141[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6129[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-100], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-104]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6130[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6118[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-104], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-108]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6119[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6107[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-108], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-112]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6108[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6096[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-112], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-116]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6097[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6085[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-116], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-120]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6086[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6074[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-120], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6075[ebp+4], edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, DWORD PTR [edi-124]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6063[ebp+4], ebx
	pop	ebx
	mov	ebx, ecx
	mov	DWORD PTR [esi-124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 294  :         --count;

	mov	ecx, DWORD PTR _count$1$[ebp]
	add	edi, -128				; ffffff80H
	dec	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv6064[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 293  :         qp -= 32;

	add	esi, -128				; ffffff80H

; 294  :         --count;

	mov	DWORD PTR _count$1$[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 32					; 00000020H
	mov	edx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 258  :     while (count != 0)

	test	ecx, ecx
	mov	ecx, DWORD PTR _v$[ebp]
	jne	$LL4@DivRem_X_1
$LN555@DivRem_X_1:

; 295  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 296  :         if (sizeof(r) == sizeof(_UINT64_T))
; 297  :             AddToDIV64Counter(32);
; 298  :         else
; 299  :             AddToDIV32Counter(32);
; 300  : #endif
; 301  :     }
; 302  : 
; 303  :     if (u_count & 0x10)

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	test	al, 16					; 00000010H
	je	$LN415@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	ecx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv6049[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6050[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6039[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6040[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6028[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6029[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6017[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-12], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-16]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6018[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv6006[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-16], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-20]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv6007[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5995[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-20], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-24]

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv5996[ebp+4], edx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5984[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-24], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-28]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5985[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5973[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-28], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-32]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5974[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5962[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-32], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-36]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5963[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5951[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-36], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-40]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5952[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5940[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-40], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-44]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5941[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5929[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-44], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-48]

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv5930[ebp+4], edx
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5918[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-48], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-52]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5919[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5907[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-52], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-56]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5908[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5896[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-56], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-60]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5897[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5885[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-60], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5886[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 321  :         up -= 16;

	sub	edi, 64					; 00000040H

; 322  :         qp -= 16;

	sub	esi, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 16					; 00000010H
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN415@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 331  :     if (u_count & 0x8)

	test	al, 8
	je	$LN483@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5872[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5873[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5862[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5863[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5851[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5852[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5840[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-12], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-16]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5841[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5829[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-16], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-20]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5830[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5818[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-20], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-24]

; 428  :             *q = (_UINT32_T)(t / v);

	mov	DWORD PTR tv5819[ebp+4], edx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	push	ecx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5807[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-24], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-28]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5808[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5796[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-28], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5797[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 341  :         up -= 8;

	sub	edi, 32					; 00000020H

; 342  :         qp -= 8;

	sub	esi, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 8
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN483@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 351  :     if (u_count & 0x4)

	test	al, 4
	je	$LN519@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5783[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5784[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5773[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-8]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5774[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5762[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-12]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5763[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5751[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-12], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5752[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 357  :         up -= 4;

	sub	edi, 16					; 00000010H

; 358  :         qp -= 4;

	sub	esi, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 4
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN519@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 367  :     if (u_count & 0x2)

	test	al, 2
	je	SHORT $LN539@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5738[ebp+4], ebx
	pop	ebx
	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]
	mov	DWORD PTR [esi], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi-4]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ecx
	push	eax
	mov	DWORD PTR tv5739[ebp+4], edx
	call	__aulldvrm
	mov	DWORD PTR tv5728[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR [esi-4], eax
	mov	ebx, ecx
	mov	DWORD PTR tv5729[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 371  :         up -= 2;

	sub	edi, 8

; 372  :         qp -= 2;

	sub	esi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 372  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 2
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _u_buf_len$[ebp]
$LN539@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 381  :     if (u_count & 0x1)

	test	al, 1
	je	SHORT $LN557@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	0
	push	DWORD PTR _v$[ebp]

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, DWORD PTR [edi]

; 428  :             *q = (_UINT32_T)(t / v);

	push	ebx
	push	eax
	call	__aulldvrm
	mov	DWORD PTR tv5523[ebp+4], ebx
	pop	ebx
	mov	DWORD PTR tv5524[ebp+4], edx
	mov	DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 349  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 394  :     *r_buf = r;

	mov	eax, DWORD PTR _r_buf$[ebp]
	pop	edi

; 395  : }

	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN557@DivRem_X_1:

; 394  :     *r_buf = r;

	mov	eax, DWORD PTR _r_buf$[ebp]
	pop	edi

; 395  : }

	pop	esi
	mov	DWORD PTR [eax], ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_1W ENDP
_TEXT	ENDS
END
