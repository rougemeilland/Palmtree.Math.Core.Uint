; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\cpuid.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?GetCPUInfo@Internal@Core@Math@Palmtree@@YAXPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::GetCPUInfo
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp
;	COMDAT ?cpuidex@Internal@Core@Math@Palmtree@@YAXIIPAI000@Z
_TEXT	SEGMENT
_regbuf$ = -16						; size = 16
_op$ = 8						; size = 4
_subop$ = 12						; size = 4
_reg_eax$ = 16						; size = 4
_reg_ebx$ = 20						; size = 4
_reg_ecx$ = 24						; size = 4
_reg_edx$ = 28						; size = 4
?cpuidex@Internal@Core@Math@Palmtree@@YAXIIPAI000@Z PROC ; Palmtree::Math::Core::Internal::cpuidex, COMDAT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 47   :         _INT32_T regbuf[4];
; 48   :         __cpuidex(regbuf, op, subop);

  00006	8b 45 08	 mov	 eax, DWORD PTR _op$[ebp]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _subop$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	53		 push	 ebx
  00010	0f a2		 cpuid
  00012	8b f3		 mov	 esi, ebx
  00014	8d 7d f0	 lea	 edi, DWORD PTR _regbuf$[ebp]
  00017	5b		 pop	 ebx
  00018	89 07		 mov	 DWORD PTR [edi], eax
  0001a	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0001d	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 49   :         *reg_eax = regbuf[0];

  00020	8b 4d 10	 mov	 ecx, DWORD PTR _reg_eax$[ebp]
  00023	89 57 0c	 mov	 DWORD PTR [edi+12], edx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _regbuf$[ebp]

; 50   :         *reg_ebx = regbuf[1];
; 51   :         *reg_ecx = regbuf[2];
; 52   :         *reg_edx = regbuf[3];

  00029	5f		 pop	 edi
  0002a	89 01		 mov	 DWORD PTR [ecx], eax
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR _reg_ebx$[ebp]
  0002f	8b 45 f4	 mov	 eax, DWORD PTR _regbuf$[ebp+4]
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	89 01		 mov	 DWORD PTR [ecx], eax
  00036	8b 4d 18	 mov	 ecx, DWORD PTR _reg_ecx$[ebp]
  00039	8b 45 f8	 mov	 eax, DWORD PTR _regbuf$[ebp+8]
  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	8b 4d 1c	 mov	 ecx, DWORD PTR _reg_edx$[ebp]
  00041	8b 45 fc	 mov	 eax, DWORD PTR _regbuf$[ebp+12]
  00044	89 01		 mov	 DWORD PTR [ecx], eax

; 53   :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?cpuidex@Internal@Core@Math@Palmtree@@YAXIIPAI000@Z ENDP ; Palmtree::Math::Core::Internal::cpuidex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp
;	COMDAT ?cpuid@Internal@Core@Math@Palmtree@@YAXIPAI000@Z
_TEXT	SEGMENT
_regbuf$ = -16						; size = 16
_op$ = 8						; size = 4
_reg_eax$ = 12						; size = 4
_reg_ebx$ = 16						; size = 4
_reg_ecx$ = 20						; size = 4
_reg_edx$ = 24						; size = 4
?cpuid@Internal@Core@Math@Palmtree@@YAXIPAI000@Z PROC	; Palmtree::Math::Core::Internal::cpuid, COMDAT

; 36   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 37   :         _INT32_T regbuf[4];
; 38   :         __cpuid(regbuf, op);

  00006	8b 45 08	 mov	 eax, DWORD PTR _op$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	53		 push	 ebx
  0000f	0f a2		 cpuid
  00011	8b f3		 mov	 esi, ebx
  00013	8d 7d f0	 lea	 edi, DWORD PTR _regbuf$[ebp]
  00016	5b		 pop	 ebx
  00017	89 07		 mov	 DWORD PTR [edi], eax
  00019	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0001c	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 39   :         *reg_eax = regbuf[0];

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _reg_eax$[ebp]
  00022	89 57 0c	 mov	 DWORD PTR [edi+12], edx
  00025	8b 45 f0	 mov	 eax, DWORD PTR _regbuf$[ebp]

; 40   :         *reg_ebx = regbuf[1];
; 41   :         *reg_ecx = regbuf[2];
; 42   :         *reg_edx = regbuf[3];

  00028	5f		 pop	 edi
  00029	89 01		 mov	 DWORD PTR [ecx], eax
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _reg_ebx$[ebp]
  0002e	8b 45 f4	 mov	 eax, DWORD PTR _regbuf$[ebp+4]
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	89 01		 mov	 DWORD PTR [ecx], eax
  00035	8b 4d 14	 mov	 ecx, DWORD PTR _reg_ecx$[ebp]
  00038	8b 45 f8	 mov	 eax, DWORD PTR _regbuf$[ebp+8]
  0003b	89 01		 mov	 DWORD PTR [ecx], eax
  0003d	8b 4d 18	 mov	 ecx, DWORD PTR _reg_edx$[ebp]
  00040	8b 45 fc	 mov	 eax, DWORD PTR _regbuf$[ebp+12]
  00043	89 01		 mov	 DWORD PTR [ecx], eax

; 43   :     }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?cpuid@Internal@Core@Math@Palmtree@@YAXIPAI000@Z ENDP	; Palmtree::Math::Core::Internal::cpuid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC					; COMDAT

; 74   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 75   :             __stosb((unsigned char*)d, 0, count);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _count$[ebp]
  00006	32 c0		 xor	 al, al
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  0000c	f3 aa		 rep stosb
  0000e	5f		 pop	 edi

; 76   :         }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp
;	COMDAT ?GetCPUInfo@Internal@Core@Math@Palmtree@@YAXPAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
_regbuf$1 = -32						; size = 16
_regbuf$2 = -32						; size = 16
_regbuf$3 = -32						; size = 16
_regbuf$4 = -32						; size = 16
_regbuf$5 = -16						; size = 16
_feature$ = 8						; size = 4
?GetCPUInfo@Internal@Core@Math@Palmtree@@YAXPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::GetCPUInfo, COMDAT

; 56   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 38   :         __cpuid(regbuf, op);

  00009	33 c0		 xor	 eax, eax
  0000b	8d 7d f0	 lea	 edi, DWORD PTR _regbuf$5[ebp]
  0000e	33 c9		 xor	 ecx, ecx
  00010	53		 push	 ebx
  00011	0f a2		 cpuid
  00013	8b f3		 mov	 esi, ebx
  00015	5b		 pop	 ebx
  00016	89 07		 mov	 DWORD PTR [edi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 75   :             __stosb((unsigned char*)d, 0, count);

  00018	32 c0		 xor	 al, al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp

; 38   :         __cpuid(regbuf, op);

  0001a	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0001d	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 75   :             __stosb((unsigned char*)d, 0, count);

  00020	b9 04 00 00 00	 mov	 ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp

; 38   :         __cpuid(regbuf, op);

  00025	89 57 0c	 mov	 DWORD PTR [edi+12], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 75   :             __stosb((unsigned char*)d, 0, count);

  00028	8b 7d 08	 mov	 edi, DWORD PTR _feature$[ebp]
  0002b	f3 aa		 rep stosb
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp

; 67   :         if (max_function_no >= 1)

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _regbuf$5[ebp]
  00030	83 f8 01	 cmp	 eax, 1
  00033	72 30		 jb	 SHORT $LN22@GetCPUInfo

; 38   :         __cpuid(regbuf, op);

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	8d 7d e0	 lea	 edi, DWORD PTR _regbuf$3[ebp]
  0003d	33 c9		 xor	 ecx, ecx
  0003f	53		 push	 ebx
  00040	0f a2		 cpuid
  00042	8b f3		 mov	 esi, ebx
  00044	5b		 pop	 ebx
  00045	89 07		 mov	 DWORD PTR [edi], eax
  00047	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0004a	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
  0004d	89 57 0c	 mov	 DWORD PTR [edi+12], edx

; 68   :         {
; 69   :             cpuid(1, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);
; 70   :             feature->PROCESSOR_FEATURE_POPCNT = (reg_ecx >> 23) & 1;

  00050	8b 7d 08	 mov	 edi, DWORD PTR _feature$[ebp]
  00053	8b 45 e8	 mov	 eax, DWORD PTR _regbuf$3[ebp+8]
  00056	c1 e8 17	 shr	 eax, 23			; 00000017H
  00059	33 07		 xor	 eax, DWORD PTR [edi]
  0005b	83 e0 01	 and	 eax, 1
  0005e	31 07		 xor	 DWORD PTR [edi], eax
  00060	8b 45 f0	 mov	 eax, DWORD PTR _regbuf$5[ebp]
  00063	eb 03		 jmp	 SHORT $LN20@GetCPUInfo
$LN22@GetCPUInfo:

; 67   :         if (max_function_no >= 1)

  00065	8b 7d 08	 mov	 edi, DWORD PTR _feature$[ebp]
$LN20@GetCPUInfo:

; 71   :         }
; 72   :         if (max_function_no >= 7)

  00068	83 f8 07	 cmp	 eax, 7
  0006b	72 45		 jb	 SHORT $LN21@GetCPUInfo

; 48   :         __cpuidex(regbuf, op, subop);

  0006d	b8 07 00 00 00	 mov	 eax, 7
  00072	33 c9		 xor	 ecx, ecx
  00074	53		 push	 ebx
  00075	0f a2		 cpuid
  00077	8b f3		 mov	 esi, ebx
  00079	5b		 pop	 ebx
  0007a	8d 5d e0	 lea	 ebx, DWORD PTR _regbuf$2[ebp]
  0007d	89 03		 mov	 DWORD PTR [ebx], eax
  0007f	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  00082	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx
  00085	89 53 0c	 mov	 DWORD PTR [ebx+12], edx

; 73   :         {
; 74   :             cpuidex(7, 0, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);
; 75   :             max_subleaf_no = reg_eax;
; 76   :             feature->PROCESSOR_FEATURE_BMI1 = (reg_ebx >> 3) & 1;
; 77   :             feature->PROCESSOR_FEATURE_ADX = (reg_ebx >> 8) & 1;
; 78   :             feature->PROCESSOR_FEATURE_BMI2 = (reg_ebx >> 19) & 1;

  00088	8b 4d e4	 mov	 ecx, DWORD PTR _regbuf$2[ebp+4]
  0008b	8b d1		 mov	 edx, ecx
  0008d	c1 ea 09	 shr	 edx, 9
  00090	8b c1		 mov	 eax, ecx
  00092	81 e2 00 04 00
	00		 and	 edx, 1024		; 00000400H
  00098	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0009d	0b d0		 or	 edx, eax
  0009f	83 e1 08	 and	 ecx, 8
  000a2	8b 07		 mov	 eax, DWORD PTR [edi]
  000a4	c1 ea 06	 shr	 edx, 6
  000a7	83 e0 f1	 and	 eax, -15		; fffffff1H
  000aa	0b d1		 or	 edx, ecx
  000ac	d1 ea		 shr	 edx, 1
  000ae	0b d0		 or	 edx, eax
  000b0	89 17		 mov	 DWORD PTR [edi], edx
$LN21@GetCPUInfo:

; 38   :         __cpuid(regbuf, op);

  000b2	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  000b7	33 c9		 xor	 ecx, ecx
  000b9	53		 push	 ebx
  000ba	0f a2		 cpuid
  000bc	8b f3		 mov	 esi, ebx
  000be	5b		 pop	 ebx
  000bf	8d 5d e0	 lea	 ebx, DWORD PTR _regbuf$4[ebp]
  000c2	89 03		 mov	 DWORD PTR [ebx], eax
  000c4	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  000c7	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx
  000ca	89 53 0c	 mov	 DWORD PTR [ebx+12], edx

; 79   :         }
; 80   :         cpuid(0x80000000, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);
; 81   :         max_ex_function_no = reg_eax;
; 82   :         if (max_ex_function_no >= 0x80000001)

  000cd	81 7d e0 01 00
	00 80		 cmp	 DWORD PTR _regbuf$4[ebp], -2147483647 ; 80000001H
  000d4	72 27		 jb	 SHORT $LN4@GetCPUInfo

; 38   :         __cpuid(regbuf, op);

  000d6	b8 01 00 00 80	 mov	 eax, -2147483647	; 80000001H
  000db	33 c9		 xor	 ecx, ecx
  000dd	53		 push	 ebx
  000de	0f a2		 cpuid
  000e0	8b f3		 mov	 esi, ebx
  000e2	5b		 pop	 ebx
  000e3	8d 5d e0	 lea	 ebx, DWORD PTR _regbuf$1[ebp]
  000e6	89 03		 mov	 DWORD PTR [ebx], eax
  000e8	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  000eb	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx
  000ee	89 53 0c	 mov	 DWORD PTR [ebx+12], edx

; 83   :         {
; 84   :             cpuid(0x80000001, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);
; 85   :             feature->PROCESSOR_FEATURE_ABM = (reg_ecx >> 5) & 1;

  000f1	8b 45 e8	 mov	 eax, DWORD PTR _regbuf$1[ebp+8]
  000f4	d1 e8		 shr	 eax, 1
  000f6	33 07		 xor	 eax, DWORD PTR [edi]
  000f8	83 e0 10	 and	 eax, 16			; 00000010H
  000fb	31 07		 xor	 DWORD PTR [edi], eax
$LN4@GetCPUInfo:

; 86   :         }
; 87   :     }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
?GetCPUInfo@Internal@Core@Math@Palmtree@@YAXPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::GetCPUInfo
_TEXT	ENDS
END
