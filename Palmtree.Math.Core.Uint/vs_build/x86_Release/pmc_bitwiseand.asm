; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_bitwiseand.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_BitwiseAnd
PUBLIC	_PMC_BitwiseAnd_I_X@12
PUBLIC	_PMC_BitwiseAnd_L_X@16
PUBLIC	_PMC_BitwiseAnd_X_I@12
PUBLIC	_PMC_BitwiseAnd_X_L@16
PUBLIC	_PMC_BitwiseAnd_X_X@12
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_number_zero:BYTE
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT _BitwiseAnd_X_X
_TEXT	SEGMENT
tv2428 = -32						; size = 4
tv2423 = -32						; size = 4
tv2425 = -28						; size = 4
tv2424 = -28						; size = 4
tv2426 = -24						; size = 4
tv2429 = -20						; size = 4
_count$1$ = -16						; size = 4
_v$1$ = -12						; size = 4
tv2430 = -8						; size = 4
tv2427 = -8						; size = 4
_w$1$ = -8						; size = 4
_u$1$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_w_count$ = 20						; size = 4
_BitwiseAnd_X_X PROC					; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 40   :     __UNIT_TYPE count = w_count >> 5;
; 41   :     while (count != 0)

	mov	edx, DWORD PTR _w$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _w_count$[ebp]
	mov	eax, ebx
	push	esi
	mov	esi, DWORD PTR _v$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$1$[ebp], eax
	mov	DWORD PTR _w$1$[ebp], edx
	push	edi
	mov	edi, DWORD PTR _u$[ebp]
	mov	DWORD PTR _u$1$[ebp], edi
	test	eax, eax
	je	$LN3@BitwiseAnd
	mov	DWORD PTR _v$1$[ebp], esi
	npad	2
$LL2@BitwiseAnd:

; 42   :     {
; 43   :         w[0] = u[0] & v[0];

	lea	ecx, DWORD PTR [esi+16]
	xor	ebx, ebx
	lea	eax, DWORD PTR [ecx+108]
	cmp	edx, eax
	ja	SHORT $LN27@BitwiseAnd
	lea	eax, DWORD PTR [edx+124]
	cmp	eax, esi
	jae	SHORT $LN67@BitwiseAnd
$LN27@BitwiseAnd:
	lea	eax, DWORD PTR [edi+48]
	mov	DWORD PTR tv2423[ebp], eax
	add	eax, 76					; 0000004cH
	cmp	edx, eax
	ja	SHORT $LN28@BitwiseAnd
	lea	eax, DWORD PTR [edx+124]
	cmp	eax, edi
	jb	SHORT $LN28@BitwiseAnd
$LN67@BitwiseAnd:
	mov	DWORD PTR tv2430[ebp], edi
	mov	ecx, edx
	sub	edi, esi
	mov	eax, esi
	sub	ecx, esi
	mov	ebx, 32					; 00000020H
	mov	DWORD PTR tv2427[ebp], ecx
	mov	esi, ecx
	npad	4
$LL65@BitwiseAnd:
	mov	ecx, DWORD PTR [eax+edi]
	lea	eax, DWORD PTR [eax+4]
	and	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR [eax+esi-4], ecx
	sub	ebx, 1
	jne	SHORT $LL65@BitwiseAnd
	mov	edi, DWORD PTR _u$1$[ebp]
	jmp	$LN71@BitwiseAnd
$LN28@BitwiseAnd:
	lea	eax, DWORD PTR [edx+32]
	mov	edx, edi
	mov	edi, DWORD PTR _w$1$[ebp]
	sub	edx, esi
	sub	edi, esi
	mov	DWORD PTR tv2429[ebp], edx
	mov	DWORD PTR tv2426[ebp], edi
	mov	edi, DWORD PTR _u$1$[ebp]
	mov	esi, edi
	sub	esi, DWORD PTR _w$1$[ebp]
	mov	DWORD PTR tv2424[ebp], esi
	mov	esi, edx
	mov	edx, DWORD PTR tv2426[ebp]
	npad	4
$LL12@BitwiseAnd:
	movups	xmm1, XMMWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR tv2424[ebp]
	lea	ecx, DWORD PTR [ecx+64]
	movups	xmm0, XMMWORD PTR [ecx-80]
	lea	eax, DWORD PTR [eax+64]
	pand	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [ecx-64]
	movups	XMMWORD PTR [eax-96], xmm1
	movups	xmm1, XMMWORD PTR [esi+ecx-64]
	pand	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [ecx-48]
	movups	XMMWORD PTR [edx+ecx-64], xmm1
	movups	xmm1, XMMWORD PTR [edi+eax-64]
	mov	edi, DWORD PTR tv2423[ebp]
	pand	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [ecx-32]
	movups	XMMWORD PTR [eax-64], xmm1
	movups	xmm1, XMMWORD PTR [edi+ebx*4]
	mov	edi, DWORD PTR _u$1$[ebp]
	add	ebx, 16					; 00000010H
	pand	xmm1, xmm0
	movups	XMMWORD PTR [eax-48], xmm1
	cmp	ebx, 32					; 00000020H
	jl	SHORT $LL12@BitwiseAnd
	mov	edx, DWORD PTR _w$1$[ebp]
$LN71@BitwiseAnd:

; 44   :         w[1] = u[1] & v[1];
; 45   :         w[2] = u[2] & v[2];
; 46   :         w[3] = u[3] & v[3];
; 47   :         w[4] = u[4] & v[4];
; 48   :         w[5] = u[5] & v[5];
; 49   :         w[6] = u[6] & v[6];
; 50   :         w[7] = u[7] & v[7];
; 51   :         w[8] = u[8] & v[8];
; 52   :         w[9] = u[9] & v[9];
; 53   :         w[10] = u[10] & v[10];
; 54   :         w[11] = u[11] & v[11];
; 55   :         w[12] = u[12] & v[12];
; 56   :         w[13] = u[13] & v[13];
; 57   :         w[14] = u[14] & v[14];
; 58   :         w[15] = u[15] & v[15];
; 59   :         w[16] = u[16] & v[16];
; 60   :         w[17] = u[17] & v[17];
; 61   :         w[18] = u[18] & v[18];
; 62   :         w[19] = u[19] & v[19];
; 63   :         w[20] = u[20] & v[20];
; 64   :         w[21] = u[21] & v[21];
; 65   :         w[22] = u[22] & v[22];
; 66   :         w[23] = u[23] & v[23];
; 67   :         w[24] = u[24] & v[24];
; 68   :         w[25] = u[25] & v[25];
; 69   :         w[26] = u[26] & v[26];
; 70   :         w[27] = u[27] & v[27];
; 71   :         w[28] = u[28] & v[28];
; 72   :         w[29] = u[29] & v[29];
; 73   :         w[30] = u[30] & v[30];
; 74   :         w[31] = u[31] & v[31];
; 75   :         u += 32;

	mov	esi, DWORD PTR _v$1$[ebp]
	sub	edi, -128				; ffffff80H

; 76   :         v += 32;

	sub	esi, -128				; ffffff80H
	mov	DWORD PTR _u$1$[ebp], edi

; 77   :         w += 32;

	sub	edx, -128				; ffffff80H
	mov	DWORD PTR _v$1$[ebp], esi

; 78   :         --count;

	sub	DWORD PTR _count$1$[ebp], 1
	mov	DWORD PTR _w$1$[ebp], edx
	jne	$LL2@BitwiseAnd

; 40   :     __UNIT_TYPE count = w_count >> 5;
; 41   :     while (count != 0)

	mov	ebx, DWORD PTR _w_count$[ebp]
$LN3@BitwiseAnd:

; 79   :     }
; 80   : 
; 81   :     if (w_count & 0x10)

	test	bl, 16					; 00000010H
	je	$LN4@BitwiseAnd

; 82   :     {
; 83   :         w[0] = u[0] & v[0];

	lea	eax, DWORD PTR [esi+60]
	lea	ecx, DWORD PTR [edx+60]
	cmp	edx, eax
	ja	SHORT $LN31@BitwiseAnd
	cmp	ecx, esi
	jae	SHORT $LN69@BitwiseAnd
$LN31@BitwiseAnd:
	lea	eax, DWORD PTR [edi+60]
	cmp	edx, eax
	ja	SHORT $LN32@BitwiseAnd
	cmp	ecx, edi
	jb	SHORT $LN32@BitwiseAnd
$LN69@BitwiseAnd:
	mov	eax, edi
	mov	ecx, esi
	sub	eax, esi
	mov	ebx, 16					; 00000010H
	mov	DWORD PTR tv2428[ebp], eax
	mov	eax, edx
	mov	edx, DWORD PTR tv2428[ebp]
	sub	eax, esi
	mov	DWORD PTR tv2425[ebp], eax
	mov	edi, eax
	npad	5
$LL66@BitwiseAnd:
	mov	eax, DWORD PTR [edx+ecx]
	lea	ecx, DWORD PTR [ecx+4]
	and	eax, DWORD PTR [ecx-4]
	mov	DWORD PTR [edi+ecx-4], eax
	sub	ebx, 1
	jne	SHORT $LL66@BitwiseAnd
	mov	edx, DWORD PTR _w$1$[ebp]
	mov	edi, DWORD PTR _u$1$[ebp]
	mov	ebx, DWORD PTR _w_count$[ebp]
	jmp	SHORT $LN15@BitwiseAnd
$LN32@BitwiseAnd:
	movups	xmm0, XMMWORD PTR [esi]
	movups	xmm1, XMMWORD PTR [edi]
	pand	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [esi+16]
	movups	XMMWORD PTR [edx], xmm1
	movups	xmm1, XMMWORD PTR [edi+16]
	pand	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [esi+32]
	movups	XMMWORD PTR [edx+16], xmm1
	movups	xmm1, XMMWORD PTR [edi+32]
	pand	xmm1, xmm0
	movups	xmm0, XMMWORD PTR [esi+48]
	movups	XMMWORD PTR [edx+32], xmm1
	movups	xmm1, XMMWORD PTR [edi+48]
	pand	xmm1, xmm0
	movups	XMMWORD PTR [edx+48], xmm1
$LN15@BitwiseAnd:

; 84   :         w[1] = u[1] & v[1];
; 85   :         w[2] = u[2] & v[2];
; 86   :         w[3] = u[3] & v[3];
; 87   :         w[4] = u[4] & v[4];
; 88   :         w[5] = u[5] & v[5];
; 89   :         w[6] = u[6] & v[6];
; 90   :         w[7] = u[7] & v[7];
; 91   :         w[8] = u[8] & v[8];
; 92   :         w[9] = u[9] & v[9];
; 93   :         w[10] = u[10] & v[10];
; 94   :         w[11] = u[11] & v[11];
; 95   :         w[12] = u[12] & v[12];
; 96   :         w[13] = u[13] & v[13];
; 97   :         w[14] = u[14] & v[14];
; 98   :         w[15] = u[15] & v[15];
; 99   :         u += 16;

	add	edi, 64					; 00000040H

; 100  :         v += 16;

	add	esi, 64					; 00000040H

; 101  :         w += 16;

	add	edx, 64					; 00000040H
$LN4@BitwiseAnd:

; 102  :     }
; 103  : 
; 104  :     if (w_count & 0x8)

	test	bl, 8
	je	SHORT $LN5@BitwiseAnd

; 105  :     {
; 106  :         w[0] = u[0] & v[0];

	mov	eax, DWORD PTR [edi]
	and	eax, DWORD PTR [esi]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [edi+4]
	and	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [edi+8]
	and	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [edi+12]
	and	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [edi+16]
	and	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [edi+20]
	and	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [edx+20], eax
	mov	eax, DWORD PTR [edi+24]
	and	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edx+24], eax
	mov	eax, DWORD PTR [edi+28]

; 107  :         w[1] = u[1] & v[1];
; 108  :         w[2] = u[2] & v[2];
; 109  :         w[3] = u[3] & v[3];
; 110  :         w[4] = u[4] & v[4];
; 111  :         w[5] = u[5] & v[5];
; 112  :         w[6] = u[6] & v[6];
; 113  :         w[7] = u[7] & v[7];
; 114  :         u += 8;

	add	edi, 32					; 00000020H
	and	eax, DWORD PTR [esi+28]

; 115  :         v += 8;

	add	esi, 32					; 00000020H
	mov	DWORD PTR [edx+28], eax

; 116  :         w += 8;

	add	edx, 32					; 00000020H
$LN5@BitwiseAnd:

; 117  :     }
; 118  : 
; 119  :     if (w_count & 0x4)

	test	bl, 4
	je	SHORT $LN6@BitwiseAnd

; 120  :     {
; 121  :         w[0] = u[0] & v[0];

	mov	eax, DWORD PTR [edi]
	and	eax, DWORD PTR [esi]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [edi+4]
	and	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [edi+8]
	and	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [edi+12]

; 122  :         w[1] = u[1] & v[1];
; 123  :         w[2] = u[2] & v[2];
; 124  :         w[3] = u[3] & v[3];
; 125  :         u += 4;

	add	edi, 16					; 00000010H
	and	eax, DWORD PTR [esi+12]

; 126  :         v += 4;

	add	esi, 16					; 00000010H
	mov	DWORD PTR [edx+12], eax

; 127  :         w += 4;

	add	edx, 16					; 00000010H
$LN6@BitwiseAnd:

; 128  :     }
; 129  : 
; 130  :     if (w_count & 0x2)

	test	bl, 2
	je	SHORT $LN7@BitwiseAnd

; 131  :     {
; 132  :         w[0] = u[0] & v[0];

	mov	eax, DWORD PTR [edi]
	and	eax, DWORD PTR [esi]
	mov	DWORD PTR [edx], eax

; 133  :         w[1] = u[1] & v[1];

	mov	eax, DWORD PTR [edi+4]

; 134  :         u += 2;

	add	edi, 8
	and	eax, DWORD PTR [esi+4]

; 135  :         v += 2;

	add	esi, 8
	mov	DWORD PTR [edx+4], eax

; 136  :         w += 2;

	add	edx, 8
$LN7@BitwiseAnd:

; 137  :     }
; 138  : 
; 139  :     if (w_count & 0x1)

	test	bl, 1
	je	SHORT $LN8@BitwiseAnd

; 140  :     {
; 141  :         w[0] = u[0] & v[0];

	mov	eax, DWORD PTR [edi]
	and	eax, DWORD PTR [esi]
	mov	DWORD PTR [edx], eax
$LN8@BitwiseAnd:

; 142  :         u += 1;
; 143  :         v += 1;
; 144  :         w += 1;
; 145  :     }
; 146  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_BitwiseAnd_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MINIMUM_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MINIMUM_UNIT PROC					; COMDAT

; 208  :     {

	push	ebp
	mov	ebp, esp

; 209  :         return (x <= y ? x : y);

	mov	eax, DWORD PTR _y$[ebp]
	cmp	DWORD PTR _x$[ebp], eax
	cmovbe	eax, DWORD PTR _x$[ebp]

; 210  :     }

	pop	ebp
	ret	0
__MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC				; COMDAT

; 193  :     {

	push	ebp
	mov	ebp, esp

; 194  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _u$[ebp]
	xor	edx, edx
	dec	eax
	add	eax, DWORD PTR _v$[ebp]
	div	DWORD PTR _v$[ebp]

; 195  :     }

	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 182  :     {

	push	ebp
	mov	ebp, esp

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 184  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 185  :     }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMWORDTODWORD
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC					; COMDAT

; 177  :     {

	push	ebp
	mov	ebp, esp

; 178  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	edx, DWORD PTR _value_high$[ebp]
	xor	eax, eax
	or	eax, DWORD PTR _value_low$[ebp]

; 179  :     }

	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT _PMC_BitwiseAnd_X_X@12
_TEXT	SEGMENT
_nw$ = 8						; size = 4
_u$ = 8							; size = 4
_w_bit_count$1$ = 12					; size = 4
_v$ = 12						; size = 4
_nw_light_check_code$1 = 16				; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseAnd_X_X@12 PROC				; COMDAT

; 317  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 318  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN20@PMC_Bitwis

; 319  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 320  :     if (v == NULL)

	mov	edi, DWORD PTR _v$[ebp]
	test	edi, edi
	je	$LN20@PMC_Bitwis

; 321  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 322  :     if (w == NULL)

	mov	ebx, DWORD PTR _w$[ebp]
	test	ebx, ebx
	je	$LN20@PMC_Bitwis

; 324  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 325  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 326  :     PMC_STATUS_CODE result;
; 327  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Bitwis

; 328  :         return (result);
; 329  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	edi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Bitwis

; 330  :         return (result);
; 331  :     NUMBER_HEADER* nw;
; 332  :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	jne	$LN19@PMC_Bitwis

; 333  :         *w = &number_zero;
; 334  :     else if (nv->IS_ZERO)

	test	BYTE PTR [edi+24], 2
	jne	SHORT $LN19@PMC_Bitwis

; 335  :         *w = &number_zero;
; 336  :     else
; 337  :     {
; 338  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 339  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR [edi+12]

; 342  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_light_check_code$1[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (x <= y ? x : y);

	cmp	DWORD PTR [esi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 342  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (x <= y ? x : y);

	cmovbe	ecx, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 342  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	ecx
	push	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (x <= y ? x : y);

	mov	DWORD PTR _w_bit_count$1$[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 342  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _w_bit_count$1$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 345  :         BitwiseAnd_X_X(nu->BLOCK, nv->BLOCK, nw->BLOCK, w_word_count);

	push	eax
	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+32]
	push	DWORD PTR [edi+32]
	push	DWORD PTR [esi+32]
	call	_BitwiseAnd_X_X

; 346  :         if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _nw_light_check_code$1[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 347  :             return (result);
; 348  :         CommitNumber(nw);

	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber

; 349  :         if (nw->IS_ZERO)

	mov	eax, DWORD PTR _nw$[ebp]
	add	esp, 4
	test	BYTE PTR [eax+24], 2
	je	SHORT $LN13@PMC_Bitwis

; 350  :         {
; 351  :             DeallocateNumber(nw);

	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 352  :             nw = &number_zero;

	mov	eax, OFFSET _number_zero
$LN13@PMC_Bitwis:

; 353  :         }
; 354  :         *w = nw;

	pop	edi
	mov	DWORD PTR [ebx], eax

; 355  :     }
; 356  : #ifdef _DEBUG
; 357  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 358  :         return (result);
; 359  : #endif
; 360  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 361  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN19@PMC_Bitwis:
	pop	edi
	pop	esi
	mov	DWORD PTR [ebx], OFFSET _number_zero
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN20@PMC_Bitwis:

; 323  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Bitwis:
	pop	edi

; 361  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
_PMC_BitwiseAnd_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT _PMC_BitwiseAnd_X_L@16
_TEXT	SEGMENT
_u$ = 8							; size = 4
$T1 = 12						; size = 8
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_BitwiseAnd_X_L@16 PROC				; COMDAT

; 268  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _u$[ebp]
	push	edi

; 269  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 270  :     {
; 271  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 272  :         return (PMC_STATUS_INTERNAL_ERROR);
; 273  :     }
; 274  :     if (u == NULL)

	test	esi, esi
	je	SHORT $LN19@PMC_Bitwis

; 275  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 276  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	SHORT $LN19@PMC_Bitwis

; 278  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 279  :     PMC_STATUS_CODE result;
; 280  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 281  :         return (result);
; 282  :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	jne	SHORT $LN20@PMC_Bitwis

; 283  :     {
; 284  :         // u が 0 である場合
; 285  :         *w = 0;
; 286  :     }
; 287  :     else if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	eax, ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	or	eax, edx
	jne	SHORT $LN8@PMC_Bitwis
$LN20@PMC_Bitwis:

; 313  :     return (PMC_STATUS_OK);

	xorps	xmm0, xmm0
	movlpd	QWORD PTR $T1[ebp], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [edi+4], eax
	xor	eax, eax
	pop	edi

; 314  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Bitwis:

; 288  :     {
; 289  :         // v が 0 である場合
; 290  :         *w = 0;
; 291  :     }
; 292  :     else
; 293  :     {
; 294  :         // u と v がともに 0 ではない場合
; 295  : 
; 296  :         // x と y の和を計算する
; 297  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 298  :         {
; 299  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 300  : 
; 301  :             _UINT32_T v_hi;
; 302  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 303  :             _UINT32_T w_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] & v_hi : 0;

	cmp	DWORD PTR [esi+8], 1
	mov	eax, DWORD PTR [esi+32]
	jbe	SHORT $LN13@PMC_Bitwis
	and	edx, DWORD PTR [eax+4]

; 304  :             _UINT32_T w_lo = nu->BLOCK[0] & v_lo;

	and	ecx, DWORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 313  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [edi+4], eax
	xor	eax, eax
	pop	edi

; 314  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN13@PMC_Bitwis:

; 304  :             _UINT32_T w_lo = nu->BLOCK[0] & v_lo;

	and	ecx, DWORD PTR [eax]
	xor	edx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 313  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :         return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 313  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi+4], eax
	xor	eax, eax
	pop	edi

; 314  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN19@PMC_Bitwis:

; 277  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Bitwis:
	pop	edi

; 314  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
_PMC_BitwiseAnd_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT _PMC_BitwiseAnd_X_I@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseAnd_X_I@12 PROC				; COMDAT

; 184  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 185  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 186  :     {
; 187  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 188  :         return (PMC_STATUS_INTERNAL_ERROR);
; 189  :     }
; 190  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	SHORT $LN11@PMC_Bitwis

; 191  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 192  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	SHORT $LN11@PMC_Bitwis

; 194  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 195  :     PMC_STATUS_CODE result;
; 196  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 197  :         return (result);
; 198  :     if (nu->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	jne	SHORT $LN12@PMC_Bitwis

; 199  :     {
; 200  :         // u が 0 である場合
; 201  :         *w = 0;
; 202  :     }
; 203  :     else  if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	test	ecx, ecx
	jne	SHORT $LN8@PMC_Bitwis
$LN12@PMC_Bitwis:

; 214  :     }
; 215  :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [edi], eax
	pop	edi

; 216  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Bitwis:

; 204  :     {
; 205  :         // v が 0 である場合
; 206  :         *w = 0;
; 207  :     }
; 208  :     else
; 209  :     {
; 210  :         // u と v がともに 0 ではない場合
; 211  : 
; 212  :         // u と v の bit AND を計算する
; 213  :         *w = nu->BLOCK[0] & v;

	mov	eax, DWORD PTR [esi+32]
	mov	eax, DWORD PTR [eax]
	and	eax, ecx

; 214  :     }
; 215  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 216  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN11@PMC_Bitwis:

; 193  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Bitwis:
	pop	edi

; 216  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
_PMC_BitwiseAnd_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT _PMC_BitwiseAnd_L_X@16
_TEXT	SEGMENT
$T1 = 8							; size = 8
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_BitwiseAnd_L_X@16 PROC				; COMDAT

; 219  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _v$[ebp]
	push	edi

; 220  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 221  :     {
; 222  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 223  :         return (PMC_STATUS_INTERNAL_ERROR);
; 224  :     }
; 225  :     if (v == NULL)

	test	esi, esi
	je	SHORT $LN19@PMC_Bitwis

; 226  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 227  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	SHORT $LN19@PMC_Bitwis

; 229  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 230  :     PMC_STATUS_CODE result;
; 231  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 232  :         return (result);
; 233  :     if (nv->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	jne	SHORT $LN20@PMC_Bitwis

; 234  :     {
; 235  :         // v が 0 である場合
; 236  :         *w = 0;
; 237  :     }
; 238  :     else if (u == 0)

	mov	ecx, DWORD PTR _u$[ebp]
	mov	eax, ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	or	eax, edx
	jne	SHORT $LN8@PMC_Bitwis
$LN20@PMC_Bitwis:

; 264  :     return (PMC_STATUS_OK);

	xorps	xmm0, xmm0
	movlpd	QWORD PTR $T1[ebp], xmm0
	mov	eax, DWORD PTR $T1[ebp+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [edi+4], eax
	xor	eax, eax
	pop	edi

; 265  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Bitwis:

; 239  :     {
; 240  :         // u が 0 である場合
; 241  :         *w = 0;
; 242  :     }
; 243  :     else
; 244  :     {
; 245  :         // u と v がともに 0 ではない場合
; 246  : 
; 247  :         // x と y の和を計算する
; 248  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 249  :         {
; 250  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 251  : 
; 252  :             _UINT32_T u_hi;
; 253  :             _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);
; 254  :             _UINT32_T w_hi = nv->UNIT_WORD_COUNT > 1 ? nv->BLOCK[1] & u_hi : 0;

	cmp	DWORD PTR [esi+8], 1
	mov	eax, DWORD PTR [esi+32]
	jbe	SHORT $LN13@PMC_Bitwis
	and	edx, DWORD PTR [eax+4]

; 255  :             _UINT32_T w_lo = nv->BLOCK[0] & u_lo;

	and	ecx, DWORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
	or	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 264  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [edi+4], eax
	xor	eax, eax
	pop	edi

; 265  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN13@PMC_Bitwis:

; 255  :             _UINT32_T w_lo = nv->BLOCK[0] & u_lo;

	and	ecx, DWORD PTR [eax]
	xor	edx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 264  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :         return (((_UINT64_T)value_high << 32) | value_low);

	or	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 264  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi+4], eax
	xor	eax, eax
	pop	edi

; 265  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN19@PMC_Bitwis:

; 228  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Bitwis:
	pop	edi

; 265  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
_PMC_BitwiseAnd_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT _PMC_BitwiseAnd_I_X@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseAnd_I_X@12 PROC				; COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 150  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 151  :     {
; 152  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 153  :         return (PMC_STATUS_INTERNAL_ERROR);
; 154  :     }
; 155  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	push	edi
	test	esi, esi
	je	SHORT $LN11@PMC_Bitwis

; 156  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 157  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	SHORT $LN11@PMC_Bitwis

; 159  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 160  :     PMC_STATUS_CODE result;
; 161  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 162  :         return (result);
; 163  :     if (nv->IS_ZERO)

	test	BYTE PTR [esi+24], 2
	jne	SHORT $LN12@PMC_Bitwis

; 164  :     {
; 165  :         // v が 0 である場合
; 166  :         *w = 0;
; 167  :     }
; 168  :     else  if (u == 0)

	mov	ecx, DWORD PTR _u$[ebp]
	test	ecx, ecx
	jne	SHORT $LN8@PMC_Bitwis
$LN12@PMC_Bitwis:

; 179  :     }
; 180  :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [edi], eax
	pop	edi

; 181  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Bitwis:

; 169  :     {
; 170  :         // u が 0 である場合
; 171  :         *w = 0;
; 172  :     }
; 173  :     else
; 174  :     {
; 175  :         // u と v がともに 0 ではない場合
; 176  : 
; 177  :         // u と v の bit AND を計算する
; 178  :         *w = nv->BLOCK[0] & u;

	mov	eax, DWORD PTR [esi+32]
	mov	eax, DWORD PTR [eax]
	and	eax, ecx

; 179  :     }
; 180  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 181  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN11@PMC_Bitwis:

; 158  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Bitwis:
	pop	edi

; 181  : }

	pop	esi
	pop	ebp
	ret	12					; 0000000cH
_PMC_BitwiseAnd_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT _Initialize_BitwiseAnd
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_BitwiseAnd PROC				; COMDAT

; 366  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 367  : }

	ret	0
_Initialize_BitwiseAnd ENDP
_TEXT	ENDS
END
