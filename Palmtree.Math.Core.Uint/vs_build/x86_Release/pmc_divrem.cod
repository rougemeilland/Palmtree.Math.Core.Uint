; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_divrem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
PUBLIC	??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
PUBLIC	??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
PUBLIC	??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor'
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
PUBLIC	?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
PUBLIC	?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X
PUBLIC	?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_DivRem
PUBLIC	?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X
PUBLIC	?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@PA_K@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
PUBLIC	?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
PUBLIC	?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
PUBLIC	?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_13JAOPNPKD@?$AAv@				; `string'
PUBLIC	??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ ; `string'
PUBLIC	__TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@ ; `string'
PUBLIC	??_C@_13ICFKHAEN@?$AAu@				; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Complete Object Locator'
PUBLIC	??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z:PROC ; Palmtree::Math::Core::Internal::RightShift_Imp
EXTRN	?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z:PROC ; Palmtree::Math::Core::Internal::LeftShift_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
EXTRN	?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
EXTRN	?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aulldvrm:PROC
EXTRN	__aullrem:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_DivRem_X_X
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_13ICFKHAEN@?$AAu@
CONST	SEGMENT
??_C@_13ICFKHAEN@?$AAu@ DB 'u', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
CONST	SEGMENT
??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@ DB '0'
	DB	00H, 'k0', 088H, '0', 08bH, '0d', 096H, 097H, '{L0L', 088H, 08fH
	DB	'0', 08cH, '0', 088H, '0F0h0W0~0W0_0', 02H, '0', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDivisionByZeroException@Internal@Core@Math@Palmtree@'
	DB	'@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
CONST	SEGMENT
??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ DB 015H
	DB	'_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13JAOPNPKD@?$AAv@
CONST	SEGMENT
??_C@_13JAOPNPKD@?$AAv@ DB 'v', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vftable'
	DD	FLAT:??_EDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$3
__ehfuncinfo$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z$0
__ehfuncinfo$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z$0
__ehfuncinfo$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z$0
__ehfuncinfo$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z$0
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
__ehfuncinfo$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gexception@std@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z
_TEXT	SEGMENT
_root$2 = -32						; size = 16
_root$3 = -32						; size = 16
_root$4 = -32						; size = 16
_root$5 = -32						; size = 16
_q_bit_count$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_r$1$ = 8						; size = 4
_v_bit_count$1$ = 8					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp, COMDAT

; 2039 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2040 :         if (u->IS_ZERO)

  00028	8b 7d 08	 mov	 edi, DWORD PTR _u$[ebp]
  0002b	f6 47 04 01	 test	 BYTE PTR [edi+4], 1
  0002f	74 24		 je	 SHORT $LN2@PMC_DivRem

; 2041 :         {
; 2042 :             // u が 0 である場合
; 2043 : 
; 2044 :             // q = 0, r = 0 を返す
; 2045 :             if (q != nullptr)

  00031	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  00034	85 c0		 test	 eax, eax
  00036	74 06		 je	 SHORT $LN4@PMC_DivRem

; 2046 :                 *q = &number_zero;

  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN4@PMC_DivRem:

; 2047 :             return (&number_zero);

  0003e	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 2173 :                         if (r->IS_ZERO)
; 2174 :                         {
; 2175 :                             root.DeallocateNumber(r);
; 2176 :                             r = &number_zero;
; 2177 :                         }
; 2178 :                         else
; 2179 :                             root.UnlinkNumber(r);
; 2180 :                         return (r);
; 2181 :                     }
; 2182 :                 }
; 2183 :             }
; 2184 :         }
; 2185 :     }

  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
$LN2@PMC_DivRem:

; 2048 :         }
; 2049 :         else
; 2050 :         {
; 2051 :             // u が 0 ではない場合
; 2052 : 
; 2053 :             if (v->IS_ONE)

  00055	8b 5d 0c	 mov	 ebx, DWORD PTR _v$[ebp]
  00058	f6 43 04 02	 test	 BYTE PTR [ebx+4], 2
  0005c	74 29		 je	 SHORT $LN5@PMC_DivRem

; 2054 :             {
; 2055 :                 // v が 1 である場合
; 2056 : 
; 2057 :                 // q = u, r = 0 を返す
; 2058 :                 if (q != nullptr)

  0005e	8b 75 10	 mov	 esi, DWORD PTR _q$[ebp]
  00061	85 f6		 test	 esi, esi
  00063	74 0b		 je	 SHORT $LN7@PMC_DivRem

; 2059 :                     *q = DuplicateNumber(u);

  00065	57		 push	 edi
  00066	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 06		 mov	 DWORD PTR [esi], eax
$LN7@PMC_DivRem:

; 2060 :                 return (&number_zero);

  00070	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 2173 :                         if (r->IS_ZERO)
; 2174 :                         {
; 2175 :                             root.DeallocateNumber(r);
; 2176 :                             r = &number_zero;
; 2177 :                         }
; 2178 :                         else
; 2179 :                             root.UnlinkNumber(r);
; 2180 :                         return (r);
; 2181 :                     }
; 2182 :                 }
; 2183 :             }
; 2184 :         }
; 2185 :     }

  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
$LN5@PMC_DivRem:

; 2061 :             }
; 2062 :             else
; 2063 :             {
; 2064 :                 // u > 0 かつ v > 1 である場合
; 2065 : 
; 2066 :                 // x と y の商・剰余を計算する
; 2067 :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00087	8b 77 14	 mov	 esi, DWORD PTR [edi+20]

; 2068 :                 __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

  0008a	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0008d	89 75 f0	 mov	 DWORD PTR _q_bit_count$1$[ebp], esi
  00090	89 45 08	 mov	 DWORD PTR _v_bit_count$1$[ebp], eax

; 2069 :                 if (u_bit_count < v_bit_count)

  00093	3b f0		 cmp	 esi, eax
  00095	73 28		 jae	 SHORT $LN8@PMC_DivRem

; 2070 :                 {
; 2071 :                     // 明らかに u < v である場合
; 2072 : 
; 2073 :                     // q = 0, r = u を返す。
; 2074 :                     if (q != nullptr)

  00097	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  0009a	85 c0		 test	 eax, eax
  0009c	74 06		 je	 SHORT $LN10@PMC_DivRem

; 2075 :                         *q = &number_zero;

  0009e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN10@PMC_DivRem:

; 2076 :                     return (DuplicateNumber(u));

  000a4	57		 push	 edi
  000a5	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  000aa	83 c4 04	 add	 esp, 4

; 2173 :                         if (r->IS_ZERO)
; 2174 :                         {
; 2175 :                             root.DeallocateNumber(r);
; 2176 :                             r = &number_zero;
; 2177 :                         }
; 2178 :                         else
; 2179 :                             root.UnlinkNumber(r);
; 2180 :                         return (r);
; 2181 :                     }
; 2182 :                 }
; 2183 :             }
; 2184 :         }
; 2185 :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
$LN8@PMC_DivRem:

; 2077 :                 }
; 2078 :                 else if (v_bit_count <= sizeof(__UNIT_TYPE) * 8)

  000bf	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  000c2	83 f8 20	 cmp	 eax, 32			; 00000020H
  000c5	0f 87 16 01 00
	00		 ja	 $LN11@PMC_DivRem

; 2079 :                 {
; 2080 :                     // 除数が 1 ワードで表現できる場合
; 2081 : 
; 2082 :                     if (q != nullptr)

  000cb	8b 75 10	 mov	 esi, DWORD PTR _q$[ebp]
  000ce	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000d3	85 f6		 test	 esi, esi
  000d5	0f 84 c7 00 00
	00		 je	 $LN13@PMC_DivRem

; 2083 :                     {
; 2084 :                         ResourceHolderUINT root;

  000db	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2085 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 2086 :                         *q = root.AllocateNumber(q_bit_count);

  000e2	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  000e5	8b 45 f0	 mov	 eax, DWORD PTR _q_bit_count$1$[ebp]
  000e8	2b 45 08	 sub	 eax, DWORD PTR _v_bit_count$1$[ebp]
  000eb	83 c0 21	 add	 eax, 33			; 00000021H
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber

; 2087 :                         __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE) * 8;
; 2088 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  000f4	6a 20		 push	 32			; 00000020H
  000f6	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  000f9	89 06		 mov	 DWORD PTR [esi], eax
  000fb	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber

; 2089 :                         DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v->BLOCK[0], (*q)->BLOCK, r->BLOCK);

  00100	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  00103	8b f0		 mov	 esi, eax
  00105	ff 76 24	 push	 DWORD PTR [esi+36]
  00108	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0010a	ff 71 24	 push	 DWORD PTR [ecx+36]
  0010d	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00110	ff 31		 push	 DWORD PTR [ecx]
  00112	ff 77 10	 push	 DWORD PTR [edi+16]
  00115	ff 77 24	 push	 DWORD PTR [edi+36]
  00118	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W

; 2090 :                         root.CheckNumber(*q);

  0011d	8b 5d 10	 mov	 ebx, DWORD PTR _q$[ebp]
  00120	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00123	83 c4 14	 add	 esp, 20			; 00000014H
  00126	ff 33		 push	 DWORD PTR [ebx]
  00128	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2091 :                         root.CheckNumber(r);

  0012d	56		 push	 esi
  0012e	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00131	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2092 :                         CommitNumber(*q);

  00136	ff 33		 push	 DWORD PTR [ebx]
  00138	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 2093 :                         CommitNumber(r);

  0013d	56		 push	 esi
  0013e	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 2094 :                         if ((*q)->IS_ZERO)

  00143	8b 03		 mov	 eax, DWORD PTR [ebx]
  00145	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00148	83 c4 08	 add	 esp, 8
  0014b	f6 40 04 01	 test	 BYTE PTR [eax+4], 1
  0014f	50		 push	 eax
  00150	74 0d		 je	 SHORT $LN15@PMC_DivRem

; 2095 :                         {
; 2096 :                             root.DeallocateNumber(*q);

  00152	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2097 :                             *q = &number_zero;

  00157	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 2098 :                         }
; 2099 :                         else

  0015d	eb 05		 jmp	 SHORT $LN16@PMC_DivRem
$LN15@PMC_DivRem:

; 2100 :                             root.UnlinkNumber(*q);

  0015f	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN16@PMC_DivRem:

; 2173 :                         if (r->IS_ZERO)
; 2174 :                         {
; 2175 :                             root.DeallocateNumber(r);
; 2176 :                             r = &number_zero;
; 2177 :                         }
; 2178 :                         else
; 2179 :                             root.UnlinkNumber(r);
; 2180 :                         return (r);
; 2181 :                     }
; 2182 :                 }
; 2183 :             }
; 2184 :         }
; 2185 :     }

  00164	f6 46 04 01	 test	 BYTE PTR [esi+4], 1
  00168	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  0016b	56		 push	 esi
  0016c	74 0c		 je	 SHORT $LN17@PMC_DivRem
  0016e	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
  00173	be 00 00 00 00	 mov	 esi, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00178	eb 05		 jmp	 SHORT $LN18@PMC_DivRem
$LN17@PMC_DivRem:
  0017a	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN18@PMC_DivRem:
  0017f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00186	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00189	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0018e	8b c6		 mov	 eax, esi
  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c3		 ret	 0
$LN13@PMC_DivRem:

; 2101 :                         if (r->IS_ZERO)
; 2102 :                         {
; 2103 :                             root.DeallocateNumber(r);
; 2104 :                             r = &number_zero;
; 2105 :                         }
; 2106 :                         else
; 2107 :                             root.UnlinkNumber(r);
; 2108 :                         return (r);
; 2109 :                     }
; 2110 :                     else
; 2111 :                     {
; 2112 :                         ResourceHolderUINT root;

  001a2	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 2113 :                         __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE) * 8;
; 2114 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  001a9	8d 4d e0	 lea	 ecx, DWORD PTR _root$4[ebp]
  001ac	6a 20		 push	 32			; 00000020H
  001ae	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber

; 2115 :                         r->BLOCK[0] = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v->BLOCK[0]);

  001b3	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  001b6	8b f0		 mov	 esi, eax
  001b8	ff 31		 push	 DWORD PTR [ecx]
  001ba	ff 77 10	 push	 DWORD PTR [edi+16]
  001bd	ff 77 24	 push	 DWORD PTR [edi+36]
  001c0	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  001c5	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  001c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cb	89 01		 mov	 DWORD PTR [ecx], eax

; 2116 :                         root.CheckNumber(r);

  001cd	8d 4d e0	 lea	 ecx, DWORD PTR _root$4[ebp]
  001d0	56		 push	 esi
  001d1	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2117 :                         CommitNumber(r);

  001d6	56		 push	 esi
  001d7	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  001dc	83 c4 04	 add	 esp, 4

; 2118 :                         if (r->IS_ZERO)
; 2119 :                         {
; 2120 :                             root.DeallocateNumber(r);
; 2121 :                             r = &number_zero;
; 2122 :                         }
; 2123 :                         else

  001df	eb 83		 jmp	 SHORT $LN16@PMC_DivRem
$LN11@PMC_DivRem:

; 2124 :                             root.UnlinkNumber(r);
; 2125 :                         return (r);
; 2126 :                     }
; 2127 :                 }
; 2128 :                 else
; 2129 :                 {
; 2130 :                     // 除数を表現するのに 2 ワード以上必要な場合
; 2131 :                     if (q != nullptr)

  001e1	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  001e6	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  001ea	0f 84 bc 00 00
	00		 je	 $LN21@PMC_DivRem

; 2132 :                     {
; 2133 :                         ResourceHolderUINT root;

  001f0	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 2134 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  001f7	8b c6		 mov	 eax, esi
  001f9	2b 45 08	 sub	 eax, DWORD PTR _v_bit_count$1$[ebp]

; 2135 :                         __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 2136 :                         *q = root.AllocateNumber(q_bit_count);

  001fc	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  001ff	83 c0 21	 add	 eax, 33			; 00000021H
  00202	83 c6 20	 add	 esi, 32			; 00000020H
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0020b	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]

; 2137 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  0020e	56		 push	 esi
  0020f	89 01		 mov	 DWORD PTR [ecx], eax
  00211	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00214	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber

; 2138 :                          __UNIT_TYPE* work_v_buf = root.AllocateBlock(v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT);

  00219	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  0021c	c1 e1 05	 shl	 ecx, 5
  0021f	51		 push	 ecx
  00220	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00223	89 45 08	 mov	 DWORD PTR _r$1$[ebp], eax
  00226	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0022b	8b f0		 mov	 esi, eax

; 2139 :                         (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, (*q)->BLOCK, r->BLOCK);

  0022d	8b 45 08	 mov	 eax, DWORD PTR _r$1$[ebp]
  00230	ff 70 24	 push	 DWORD PTR [eax+36]
  00233	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  00236	8b 08		 mov	 ecx, DWORD PTR [eax]
  00238	ff 71 24	 push	 DWORD PTR [ecx+36]
  0023b	56		 push	 esi
  0023c	ff 73 10	 push	 DWORD PTR [ebx+16]
  0023f	ff 73 24	 push	 DWORD PTR [ebx+36]
  00242	ff 77 10	 push	 DWORD PTR [edi+16]
  00245	ff 77 24	 push	 DWORD PTR [edi+36]
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  0024e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2140 :                         root.CheckBlock(work_v_buf);

  00251	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00254	56		 push	 esi
  00255	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 2141 :                         root.CheckNumber(*q);

  0025a	8b 7d 10	 mov	 edi, DWORD PTR _q$[ebp]
  0025d	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00260	ff 37		 push	 DWORD PTR [edi]
  00262	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2142 :                         root.CheckNumber(r);

  00267	8b 5d 08	 mov	 ebx, DWORD PTR _r$1$[ebp]
  0026a	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  0026d	53		 push	 ebx
  0026e	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2143 :                         root.DeallocateBlock(work_v_buf);

  00273	56		 push	 esi
  00274	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00277	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 2144 :                         CommitNumber(*q);

  0027c	ff 37		 push	 DWORD PTR [edi]
  0027e	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 2145 :                         CommitNumber(r);

  00283	53		 push	 ebx
  00284	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 2146 :                         if ((*q)->IS_ZERO)

  00289	8b 07		 mov	 eax, DWORD PTR [edi]
  0028b	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  0028e	83 c4 08	 add	 esp, 8
  00291	f6 40 04 01	 test	 BYTE PTR [eax+4], 1
  00295	50		 push	 eax
  00296	74 0d		 je	 SHORT $LN23@PMC_DivRem

; 2147 :                         {
; 2148 :                             root.DeallocateNumber(*q);

  00298	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2149 :                             *q = &number_zero;

  0029d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 2150 :                         }
; 2151 :                         else

  002a3	eb 72		 jmp	 SHORT $LN24@PMC_DivRem
$LN23@PMC_DivRem:

; 2152 :                             root.UnlinkNumber(*q);

  002a5	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 2153 :                         if (r->IS_ZERO)
; 2154 :                         {
; 2155 :                             root.DeallocateNumber(r);
; 2156 :                             r = &number_zero;
; 2157 :                         }
; 2158 :                         else

  002aa	eb 6b		 jmp	 SHORT $LN24@PMC_DivRem
$LN21@PMC_DivRem:

; 2159 :                             root.UnlinkNumber(r);
; 2160 :                         return (r);
; 2161 :                     }
; 2162 :                     else
; 2163 :                     {
; 2164 :                         ResourceHolderUINT root;

  002ac	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 2165 :                         __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  002b3	8d 46 20	 lea	 eax, DWORD PTR [esi+32]

; 2166 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  002b6	50		 push	 eax
  002b7	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  002ba	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber

; 2167 :                         __UNIT_TYPE* work_v_buf = root.AllocateBlock(v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT);

  002bf	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  002c2	8b d8		 mov	 ebx, eax
  002c4	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  002c7	c1 e1 05	 shl	 ecx, 5
  002ca	51		 push	 ecx
  002cb	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  002ce	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock

; 2168 :                         (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, nullptr, r->BLOCK);

  002d3	ff 73 24	 push	 DWORD PTR [ebx+36]
  002d6	8b f0		 mov	 esi, eax
  002d8	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  002db	6a 00		 push	 0
  002dd	56		 push	 esi
  002de	ff 70 10	 push	 DWORD PTR [eax+16]
  002e1	ff 70 24	 push	 DWORD PTR [eax+36]
  002e4	ff 77 10	 push	 DWORD PTR [edi+16]
  002e7	ff 77 24	 push	 DWORD PTR [edi+36]
  002ea	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  002f0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2169 :                         root.CheckBlock(work_v_buf);

  002f3	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  002f6	56		 push	 esi
  002f7	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 2170 :                         root.CheckNumber(r);

  002fc	53		 push	 ebx
  002fd	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  00300	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2171 :                         root.DeallocateBlock(work_v_buf);

  00305	56		 push	 esi
  00306	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  00309	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 2172 :                         CommitNumber(r);

  0030e	53		 push	 ebx
  0030f	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00314	83 c4 04	 add	 esp, 4
$LN24@PMC_DivRem:

; 2173 :                         if (r->IS_ZERO)
; 2174 :                         {
; 2175 :                             root.DeallocateNumber(r);
; 2176 :                             r = &number_zero;
; 2177 :                         }
; 2178 :                         else
; 2179 :                             root.UnlinkNumber(r);
; 2180 :                         return (r);
; 2181 :                     }
; 2182 :                 }
; 2183 :             }
; 2184 :         }
; 2185 :     }

  00317	f6 43 04 01	 test	 BYTE PTR [ebx+4], 1
  0031b	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  0031e	53		 push	 ebx
  0031f	74 0c		 je	 SHORT $LN25@PMC_DivRem
  00321	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
  00326	bb 00 00 00 00	 mov	 ebx, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0032b	eb 05		 jmp	 SHORT $LN28@PMC_DivRem
$LN25@PMC_DivRem:
  0032d	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN28@PMC_DivRem:
  00332	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00339	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  0033c	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00341	8b c3		 mov	 eax, ebx
  00343	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00346	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0034d	59		 pop	 ecx
  0034e	5f		 pop	 edi
  0034f	5e		 pop	 esi
  00350	5b		 pop	 ebx
  00351	8b e5		 mov	 esp, ebp
  00353	5d		 pop	 ebp
  00354	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$1:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR _root$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$2:
  00010	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$3:
  00018	8d 4d e0	 lea	 ecx, DWORD PTR _root$2[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z
_TEXT	SEGMENT
$T2 = -56						; size = 24
_root$3 = -48						; size = 16
_root$4 = -48						; size = 16
_root$5 = -48						; size = 16
_work_v_buf$6 = -32					; size = 8
_v_buf$7 = -32						; size = 8
_v_buf$8 = -24						; size = 8
_work_v_buf$9 = -24					; size = 8
_v_bit_count$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_r_buf$1$ = 16						; size = 4
_v_bit_count$1$ = 16					; size = 4
_r_buf$10 = 16						; size = 4
_q$ = 20						; size = 4
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp, COMDAT

; 1818 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1819 :         if (v == 0)

  00028	8b 5d 0c	 mov	 ebx, DWORD PTR _v$[ebp]
  0002b	8b c3		 mov	 eax, ebx
  0002d	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp+4]
  00030	0b c1		 or	 eax, ecx
  00032	0f 84 1a 03 00
	00		 je	 $LN58@PMC_DivRem

; 1825 :         }
; 1826 :         if (u->IS_ZERO)

  00038	8b 7d 08	 mov	 edi, DWORD PTR _u$[ebp]
  0003b	f6 47 04 01	 test	 BYTE PTR [edi+4], 1
  0003f	74 23		 je	 SHORT $LN3@PMC_DivRem

; 1827 :         {
; 1828 :             // x が 0 である場合
; 1829 : 
; 1830 :             // q = 0, r = 0 を返す
; 1831 :             if (q != nullptr)

  00041	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  00044	85 c0		 test	 eax, eax
  00046	74 06		 je	 SHORT $LN5@PMC_DivRem

; 1832 :                 *q = &number_zero;

  00048	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN5@PMC_DivRem:

; 1833 :             return (0);

  0004e	33 c0		 xor	 eax, eax
  00050	33 d2		 xor	 edx, edx

; 2005 :     }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
$LN3@PMC_DivRem:

; 1834 :         }
; 1835 :         else
; 1836 :         {
; 1837 :             // u が 0 ではない場合
; 1838 : 
; 1839 :             if (v == 1)

  00064	83 fb 01	 cmp	 ebx, 1
  00067	75 2c		 jne	 SHORT $LN6@PMC_DivRem
  00069	85 c9		 test	 ecx, ecx
  0006b	75 28		 jne	 SHORT $LN6@PMC_DivRem

; 1840 :             {
; 1841 :                 // v が 1 である場合
; 1842 : 
; 1843 :                 // q = u, r = 0 を返す
; 1844 :                 if (q != nullptr)

  0006d	8b 75 14	 mov	 esi, DWORD PTR _q$[ebp]
  00070	85 f6		 test	 esi, esi
  00072	74 0b		 je	 SHORT $LN8@PMC_DivRem

; 1845 :                     *q = DuplicateNumber(u);

  00074	57		 push	 edi
  00075	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0007a	83 c4 04	 add	 esp, 4
  0007d	89 06		 mov	 DWORD PTR [esi], eax
$LN8@PMC_DivRem:

; 1846 :                 return (0);

  0007f	33 c0		 xor	 eax, eax
  00081	33 d2		 xor	 edx, edx

; 2005 :     }

  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
$LN6@PMC_DivRem:

; 1847 :             }
; 1848 :             else
; 1849 :             {
; 1850 :                 // u > 0 かつ v > 1 である場合
; 1851 : 
; 1852 :                 // u と v の商・剰余を計算する
; 1853 :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00095	8b 77 14	 mov	 esi, DWORD PTR [edi+20]

; 1854 :                 if (sizeof(__UNIT_TYPE) < sizeof(v))
; 1855 :                 {
; 1856 :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 1857 :                     _UINT32_T v_hi;
; 1858 :                     _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 1859 :                     if (v_hi == 0)

  00098	85 c9		 test	 ecx, ecx
  0009a	0f 85 02 01 00
	00		 jne	 $LN11@PMC_DivRem

; 1860 :                     {
; 1861 :                         // v の値が 32bit で表現可能な場合
; 1862 :                         __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

  000a0	53		 push	 ebx
  000a1	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000a6	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000ab	83 c4 04	 add	 esp, 4
  000ae	2b c8		 sub	 ecx, eax
  000b0	89 4d 10	 mov	 DWORD PTR _v_bit_count$1$[ebp], ecx

; 1863 :                         if (u_bit_count < v_bit_count)

  000b3	3b f1		 cmp	 esi, ecx
  000b5	73 26		 jae	 SHORT $LN13@PMC_DivRem

; 1864 :                         {
; 1865 :                             // 明らかに u < v である場合
; 1866 : 
; 1867 :                             // q = 0, r = u を返す。
; 1868 :                             if (q != nullptr)

  000b7	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  000ba	85 c0		 test	 eax, eax
  000bc	74 06		 je	 SHORT $LN15@PMC_DivRem

; 1869 :                                 *q = &number_zero;

  000be	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN15@PMC_DivRem:

; 1870 :                             return (u->BLOCK[0]);

  000c4	8b 47 24	 mov	 eax, DWORD PTR [edi+36]
  000c7	33 d2		 xor	 edx, edx
  000c9	8b 00		 mov	 eax, DWORD PTR [eax]

; 2005 :     }

  000cb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ce	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d5	59		 pop	 ecx
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
$LN13@PMC_DivRem:

; 1871 :                         }
; 1872 :                         else
; 1873 :                         {
; 1874 :                             if (q != nullptr)

  000dd	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  000e1	0f 84 98 00 00
	00		 je	 $LN16@PMC_DivRem

; 1875 :                             {
; 1876 :                                 ResourceHolderUINT root;

  000e7	8d 4d d0	 lea	 ecx, DWORD PTR _root$5[ebp]
  000ea	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000ef	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1877 :                                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1878 :                                 *q = root.AllocateNumber(q_bit_count);

  000f6	8d 4d d0	 lea	 ecx, DWORD PTR _root$5[ebp]
  000f9	2b 75 10	 sub	 esi, DWORD PTR _v_bit_count$1$[ebp]
  000fc	83 c6 21	 add	 esi, 33			; 00000021H
  000ff	56		 push	 esi
  00100	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00105	8b 75 14	 mov	 esi, DWORD PTR _q$[ebp]

; 1879 :                                 __UNIT_TYPE r_buf = 0;
; 1880 :                                 DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, (*q)->BLOCK, &r_buf);

  00108	8d 4d 10	 lea	 ecx, DWORD PTR _r_buf$10[ebp]
  0010b	51		 push	 ecx
  0010c	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _r_buf$10[ebp], 0
  00113	89 06		 mov	 DWORD PTR [esi], eax
  00115	ff 70 24	 push	 DWORD PTR [eax+36]
  00118	53		 push	 ebx
  00119	ff 77 10	 push	 DWORD PTR [edi+16]
  0011c	ff 77 24	 push	 DWORD PTR [edi+36]
  0011f	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  00124	83 c4 14	 add	 esp, 20			; 00000014H

; 1881 :                                 root.CheckNumber(*q);

  00127	8d 4d d0	 lea	 ecx, DWORD PTR _root$5[ebp]
  0012a	ff 36		 push	 DWORD PTR [esi]
  0012c	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1882 :                                 CommitNumber(*q);

  00131	ff 36		 push	 DWORD PTR [esi]
  00133	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1883 :                                 if ((*q)->IS_ZERO)

  00138	8b 06		 mov	 eax, DWORD PTR [esi]
  0013a	8d 4d d0	 lea	 ecx, DWORD PTR _root$5[ebp]
  0013d	83 c4 04	 add	 esp, 4
  00140	f6 40 04 01	 test	 BYTE PTR [eax+4], 1
  00144	50		 push	 eax
  00145	74 0d		 je	 SHORT $LN18@PMC_DivRem

; 1884 :                                 {
; 1885 :                                     root.DeallocateNumber(*q);

  00147	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1886 :                                     *q = &number_zero;

  0014c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 1887 :                                 }
; 1888 :                                 else

  00152	eb 05		 jmp	 SHORT $LN19@PMC_DivRem
$LN18@PMC_DivRem:

; 1889 :                                     root.UnlinkNumber(*q);

  00154	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN19@PMC_DivRem:

; 1890 :                                 return (r_buf);

  00159	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00160	8d 4d d0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00163	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00168	8b 45 10	 mov	 eax, DWORD PTR _r_buf$10[ebp]
  0016b	33 d2		 xor	 edx, edx

; 2005 :     }

  0016d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00170	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00177	59		 pop	 ecx
  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
  0017a	5b		 pop	 ebx
  0017b	8b e5		 mov	 esp, ebp
  0017d	5d		 pop	 ebp
  0017e	c3		 ret	 0
$LN16@PMC_DivRem:

; 1891 :                             }
; 1892 :                             else
; 1893 :                             {
; 1894 :                                 __UNIT_TYPE r_buf = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo);

  0017f	53		 push	 ebx
  00180	ff 77 10	 push	 DWORD PTR [edi+16]
  00183	ff 77 24	 push	 DWORD PTR [edi+36]
  00186	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  0018b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1895 :                                 return (r_buf);

  0018e	33 d2		 xor	 edx, edx

; 2005 :     }

  00190	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00193	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019a	59		 pop	 ecx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx
  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c3		 ret	 0
$LN11@PMC_DivRem:

; 1896 :                             }
; 1897 :                         }
; 1898 :                     }
; 1899 :                     else
; 1900 :                     {
; 1901 :                         // v の値が 32bit では表現できない場合
; 1902 :                         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

  001a2	51		 push	 ecx
  001a3	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  001a8	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001ad	83 c4 04	 add	 esp, 4
  001b0	2b c8		 sub	 ecx, eax
  001b2	89 4d f0	 mov	 DWORD PTR _v_bit_count$1$[ebp], ecx

; 1903 :                         if (u_bit_count < v_bit_count)

  001b5	3b f1		 cmp	 esi, ecx
  001b7	73 49		 jae	 SHORT $LN20@PMC_DivRem

; 1904 :                         {
; 1905 :                             // 明らかに u < v である場合
; 1906 : 
; 1907 :                             // q = 0, r = u を返す。
; 1908 :                             if (q != nullptr)

  001b9	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  001bc	85 c0		 test	 eax, eax
  001be	74 06		 je	 SHORT $LN22@PMC_DivRem

; 1909 :                                 *q = &number_zero;

  001c0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN22@PMC_DivRem:

; 1915 :                                 __UNIT_TYPE r_hi = u->UNIT_WORD_COUNT > 1 ? u->BLOCK[1] : 0;

  001c6	83 7f 10 01	 cmp	 DWORD PTR [edi+16], 1
  001ca	8b 57 24	 mov	 edx, DWORD PTR [edi+36]
  001cd	8b 0a		 mov	 ecx, DWORD PTR [edx]
  001cf	76 19		 jbe	 SHORT $LN37@PMC_DivRem
  001d1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001d4	33 c0		 xor	 eax, eax
  001d6	0b c1		 or	 eax, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 2005 :     }

  001d8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001db	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e2	59		 pop	 ecx
  001e3	5f		 pop	 edi
  001e4	5e		 pop	 esi
  001e5	5b		 pop	 ebx
  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c3		 ret	 0
$LN37@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001ea	33 c0		 xor	 eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1915 :                                 __UNIT_TYPE r_hi = u->UNIT_WORD_COUNT > 1 ? u->BLOCK[1] : 0;

  001ec	33 d2		 xor	 edx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001ee	0b c1		 or	 eax, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 2005 :     }

  001f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001fa	59		 pop	 ecx
  001fb	5f		 pop	 edi
  001fc	5e		 pop	 esi
  001fd	5b		 pop	 ebx
  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c3		 ret	 0
$LN20@PMC_DivRem:

; 1916 :                                 return (_FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo));
; 1917 :                             }
; 1918 :                         }
; 1919 :                         else
; 1920 :                         {
; 1921 :                             if (q != nullptr)

  00202	8d 4d d0	 lea	 ecx, DWORD PTR _root$4[ebp]
  00205	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0020a	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  0020e	0f 84 b8 00 00
	00		 je	 $LN25@PMC_DivRem

; 1922 :                             {
; 1923 :                                 ResourceHolderUINT root;

  00214	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1924 :                                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  0021b	8b c6		 mov	 eax, esi
  0021d	2b 45 f0	 sub	 eax, DWORD PTR _v_bit_count$1$[ebp]

; 1925 :                                 __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1926 :                                 *q = root.AllocateNumber(q_bit_count);

  00220	8d 4d d0	 lea	 ecx, DWORD PTR _root$4[ebp]
  00223	83 c0 21	 add	 eax, 33			; 00000021H
  00226	83 c6 20	 add	 esi, 32			; 00000020H
  00229	50		 push	 eax
  0022a	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0022f	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]

; 1927 :                                 __UNIT_TYPE v_buf[] = { v_lo, v_hi };
; 1928 :                                 __UNIT_TYPE work_v_buf[] = { 0, 0 };
; 1929 :                                 __UNIT_TYPE* r_buf = root.AllocateBlock(r_bit_count);

  00232	56		 push	 esi
  00233	89 5d e0	 mov	 DWORD PTR _v_buf$7[ebp], ebx
  00236	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _work_v_buf$9[ebp], 0
  0023d	89 01		 mov	 DWORD PTR [ecx], eax
  0023f	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp+4]
  00242	89 4d e4	 mov	 DWORD PTR _v_buf$7[ebp+4], ecx
  00245	8d 4d d0	 lea	 ecx, DWORD PTR _root$4[ebp]
  00248	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _work_v_buf$9[ebp+4], 0
  0024f	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock

; 1930 :                                 (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, (*q)->BLOCK, r_buf);

  00254	8b 5d 14	 mov	 ebx, DWORD PTR _q$[ebp]
  00257	8b f0		 mov	 esi, eax
  00259	56		 push	 esi
  0025a	8d 45 e8	 lea	 eax, DWORD PTR _work_v_buf$9[ebp]
  0025d	89 75 10	 mov	 DWORD PTR _r_buf$1$[ebp], esi
  00260	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00262	ff 71 24	 push	 DWORD PTR [ecx+36]
  00265	50		 push	 eax
  00266	6a 02		 push	 2
  00268	8d 45 e0	 lea	 eax, DWORD PTR _v_buf$7[ebp]
  0026b	50		 push	 eax
  0026c	ff 77 10	 push	 DWORD PTR [edi+16]
  0026f	ff 77 24	 push	 DWORD PTR [edi+36]
  00272	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  00278	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1931 :                                 root.CheckNumber(*q);

  0027b	8d 4d d0	 lea	 ecx, DWORD PTR _root$4[ebp]
  0027e	ff 33		 push	 DWORD PTR [ebx]
  00280	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1932 :                                 root.CheckBlock(r_buf);

  00285	56		 push	 esi
  00286	8d 4d d0	 lea	 ecx, DWORD PTR _root$4[ebp]
  00289	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 1933 :                                 CommitNumber(*q);

  0028e	ff 33		 push	 DWORD PTR [ebx]
  00290	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1934 :                                 if ((*q)->IS_ZERO)

  00295	8b 03		 mov	 eax, DWORD PTR [ebx]
  00297	8d 4d d0	 lea	 ecx, DWORD PTR _root$4[ebp]
  0029a	83 c4 04	 add	 esp, 4
  0029d	f6 40 04 01	 test	 BYTE PTR [eax+4], 1
  002a1	50		 push	 eax
  002a2	74 17		 je	 SHORT $LN27@PMC_DivRem

; 1935 :                                 {
; 1936 :                                     root.DeallocateNumber(*q);

  002a4	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002a9	8b 45 10	 mov	 eax, DWORD PTR _r_buf$1$[ebp]
  002ac	33 f6		 xor	 esi, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1937 :                                     *q = &number_zero;

  002ae	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002b4	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  002b7	0b 30		 or	 esi, DWORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1941 :                                 return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));

  002b9	eb 72		 jmp	 SHORT $LN56@PMC_DivRem
$LN27@PMC_DivRem:

; 1938 :                                 }
; 1939 :                                 else
; 1940 :                                     root.UnlinkNumber(*q);

  002bb	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002c0	8b 45 10	 mov	 eax, DWORD PTR _r_buf$1$[ebp]
  002c3	33 f6		 xor	 esi, esi
  002c5	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  002c8	0b 30		 or	 esi, DWORD PTR [eax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1941 :                                 return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));

  002ca	eb 61		 jmp	 SHORT $LN56@PMC_DivRem
$LN25@PMC_DivRem:

; 1942 :                             }
; 1943 :                             else
; 1944 :                             {
; 1945 :                                 ResourceHolderUINT root;

  002cc	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 1946 :                                 __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  002d3	8d 46 20	 lea	 eax, DWORD PTR [esi+32]

; 1947 :                                 __UNIT_TYPE v_buf[] = { v_lo, v_hi };

  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp+4]
  002d9	89 4d ec	 mov	 DWORD PTR _v_buf$8[ebp+4], ecx

; 1948 :                                 __UNIT_TYPE work_v_buf[] = { 0, 0 };
; 1949 :                                 __UNIT_TYPE* r_buf = root.AllocateBlock(r_bit_count);

  002dc	8d 4d d0	 lea	 ecx, DWORD PTR _root$3[ebp]
  002df	50		 push	 eax
  002e0	89 5d e8	 mov	 DWORD PTR _v_buf$8[ebp], ebx
  002e3	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _work_v_buf$6[ebp], 0
  002ea	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _work_v_buf$6[ebp+4], 0
  002f1	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  002f6	8b d8		 mov	 ebx, eax

; 1950 :                                 (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, nullptr, r_buf);

  002f8	8d 45 e0	 lea	 eax, DWORD PTR _work_v_buf$6[ebp]
  002fb	53		 push	 ebx
  002fc	6a 00		 push	 0
  002fe	50		 push	 eax
  002ff	6a 02		 push	 2
  00301	8d 45 e8	 lea	 eax, DWORD PTR _v_buf$8[ebp]
  00304	50		 push	 eax
  00305	ff 77 10	 push	 DWORD PTR [edi+16]
  00308	ff 77 24	 push	 DWORD PTR [edi+36]
  0030b	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  00311	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1951 :                                 root.CheckBlock(r_buf);

  00314	8d 4d d0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00317	53		 push	 ebx
  00318	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0031d	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1953 :                                 root.DeallocateBlock(r_buf);

  00320	8d 4d d0	 lea	 ecx, DWORD PTR _root$3[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00323	33 f6		 xor	 esi, esi
  00325	0b 33		 or	 esi, DWORD PTR [ebx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1953 :                                 root.DeallocateBlock(r_buf);

  00327	53		 push	 ebx
  00328	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
$LN56@PMC_DivRem:

; 2005 :     }

  0032d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00334	8d 4d d0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00337	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0033c	8b d7		 mov	 edx, edi
  0033e	8b c6		 mov	 eax, esi
  00340	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00343	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0034a	59		 pop	 ecx
  0034b	5f		 pop	 edi
  0034c	5e		 pop	 esi
  0034d	5b		 pop	 ebx
  0034e	8b e5		 mov	 esp, ebp
  00350	5d		 pop	 ebp
  00351	c3		 ret	 0
$LN58@PMC_DivRem:

; 1820 :         {
; 1821 :             // v が 0 である場合
; 1822 : 
; 1823 :             // 0 による除算はエラーで返す
; 1824 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  00352	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  00357	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  0035a	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  0035f	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  00364	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  00367	50		 push	 eax
  00368	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN55@PMC_DivRem:
  0036d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$1:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR _root$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$2:
  00010	8d 4d d0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z
_TEXT	SEGMENT
$T2 = -40						; size = 24
_root$3 = -32						; size = 16
_v_bit_count$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_q_bit_count$1$ = 12					; size = 4
_r_buf$4 = 12						; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp, COMDAT

; 1521 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1522 :         if (v == 0)

  00028	8b 7d 0c	 mov	 edi, DWORD PTR _v$[ebp]
  0002b	85 ff		 test	 edi, edi
  0002d	0f 84 59 01 00
	00		 je	 $LN24@PMC_DivRem

; 1528 :         }
; 1529 :         if (u->IS_ZERO)

  00033	8b 75 08	 mov	 esi, DWORD PTR _u$[ebp]
  00036	f6 46 04 01	 test	 BYTE PTR [esi+4], 1
  0003a	74 21		 je	 SHORT $LN3@PMC_DivRem

; 1530 :         {
; 1531 :             // u が 0 である場合
; 1532 : 
; 1533 :             // q = 0, r = 0 を返す
; 1534 : 
; 1535 :             if (q != nullptr)

  0003c	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  0003f	85 c0		 test	 eax, eax
  00041	74 06		 je	 SHORT $LN5@PMC_DivRem

; 1536 :                 *q = &number_zero;

  00043	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN5@PMC_DivRem:

; 1537 :             return (0);

  00049	33 c0		 xor	 eax, eax

; 1591 :                         return ((_UINT32_T)r_buf);
; 1592 :                     }
; 1593 :                 }
; 1594 :             }
; 1595 :         }
; 1596 :     }

  0004b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00055	59		 pop	 ecx
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
$LN3@PMC_DivRem:

; 1538 :         }
; 1539 :         else
; 1540 :         {
; 1541 :             // u が 0 ではない場合
; 1542 : 
; 1543 :             if (v == 1)

  0005d	83 ff 01	 cmp	 edi, 1
  00060	75 26		 jne	 SHORT $LN6@PMC_DivRem

; 1544 :             {
; 1545 :                 // v が 1 である場合
; 1546 : 
; 1547 :                 // q = u, r = 0 を返す
; 1548 :                 if (q != nullptr)

  00062	8b 7d 10	 mov	 edi, DWORD PTR _q$[ebp]
  00065	85 ff		 test	 edi, edi
  00067	74 0b		 je	 SHORT $LN8@PMC_DivRem

; 1549 :                     *q = DuplicateNumber(u);

  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0006f	83 c4 04	 add	 esp, 4
  00072	89 07		 mov	 DWORD PTR [edi], eax
$LN8@PMC_DivRem:

; 1550 :                 return (0);

  00074	33 c0		 xor	 eax, eax

; 1591 :                         return ((_UINT32_T)r_buf);
; 1592 :                     }
; 1593 :                 }
; 1594 :             }
; 1595 :         }
; 1596 :     }

  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN6@PMC_DivRem:

; 1557 :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00088	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 432  :             return (sizeof(x) * 8 - 1 - pos);

  0008b	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00090	0f bd c7	 bsr	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1557 :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00093	89 55 0c	 mov	 DWORD PTR _q_bit_count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 432  :             return (sizeof(x) * 8 - 1 - pos);

  00096	2b c8		 sub	 ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1558 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

  00098	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009d	2b c1		 sub	 eax, ecx
  0009f	89 45 f0	 mov	 DWORD PTR _v_bit_count$1$[ebp], eax

; 1559 :                 if (u_bit_count < v_bit_count)

  000a2	3b d0		 cmp	 edx, eax
  000a4	73 24		 jae	 SHORT $LN9@PMC_DivRem

; 1560 :                 {
; 1561 :                     // 明らかに u < v である場合
; 1562 : 
; 1563 :                     // q = 0, r = u を返す。
; 1564 :                     if (q != nullptr)

  000a6	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  000a9	85 c0		 test	 eax, eax
  000ab	74 06		 je	 SHORT $LN11@PMC_DivRem

; 1565 :                         *q = &number_zero;

  000ad	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN11@PMC_DivRem:

; 1566 :                     return ((_UINT32_T)u->BLOCK[0]);

  000b3	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]

; 1591 :                         return ((_UINT32_T)r_buf);
; 1592 :                     }
; 1593 :                 }
; 1594 :             }
; 1595 :         }
; 1596 :     }

  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	5b		 pop	 ebx
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
$LN9@PMC_DivRem:

; 1567 :                 }
; 1568 :                 else
; 1569 :                 {
; 1570 :                     if (q != nullptr)

  000ca	8b 5d 10	 mov	 ebx, DWORD PTR _q$[ebp]
  000cd	85 db		 test	 ebx, ebx
  000cf	0f 84 96 00 00
	00		 je	 $LN12@PMC_DivRem

; 1571 :                     {
; 1572 :                         ResourceHolderUINT root;

  000d5	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  000d8	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1573 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1574 :                         *q = root.AllocateNumber(q_bit_count);

  000e4	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  000e7	8b 45 0c	 mov	 eax, DWORD PTR _q_bit_count$1$[ebp]
  000ea	2b 45 f0	 sub	 eax, DWORD PTR _v_bit_count$1$[ebp]
  000ed	83 c0 21	 add	 eax, 33			; 00000021H
  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber

; 1575 :                         __UNIT_TYPE r_buf = 0;
; 1576 :                         DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v, (*q)->BLOCK, &r_buf);

  000f6	8d 4d 0c	 lea	 ecx, DWORD PTR _r_buf$4[ebp]
  000f9	89 03		 mov	 DWORD PTR [ebx], eax
  000fb	51		 push	 ecx
  000fc	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _r_buf$4[ebp], 0
  00103	ff 70 24	 push	 DWORD PTR [eax+36]
  00106	57		 push	 edi
  00107	ff 76 10	 push	 DWORD PTR [esi+16]
  0010a	ff 76 24	 push	 DWORD PTR [esi+36]
  0010d	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  00112	83 c4 14	 add	 esp, 20			; 00000014H

; 1577 :                         root.CheckNumber(*q);

  00115	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00118	ff 33		 push	 DWORD PTR [ebx]
  0011a	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1578 :                         CommitNumber(*q);

  0011f	ff 33		 push	 DWORD PTR [ebx]
  00121	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1579 :                         if ((*q)->IS_ZERO)

  00126	8b 03		 mov	 eax, DWORD PTR [ebx]
  00128	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  0012b	83 c4 04	 add	 esp, 4
  0012e	f6 40 04 01	 test	 BYTE PTR [eax+4], 1
  00132	50		 push	 eax
  00133	74 0d		 je	 SHORT $LN14@PMC_DivRem

; 1580 :                         {
; 1581 :                             root.DeallocateNumber(*q);

  00135	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1582 :                             *q = &number_zero;

  0013a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 1583 :                         }
; 1584 :                         else

  00140	eb 05		 jmp	 SHORT $LN15@PMC_DivRem
$LN14@PMC_DivRem:

; 1585 :                             root.UnlinkNumber(*q);

  00142	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN15@PMC_DivRem:

; 1586 :                         return ((_UINT32_T)r_buf);

  00147	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014e	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00151	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00156	8b 45 0c	 mov	 eax, DWORD PTR _r_buf$4[ebp]

; 1591 :                         return ((_UINT32_T)r_buf);
; 1592 :                     }
; 1593 :                 }
; 1594 :             }
; 1595 :         }
; 1596 :     }

  00159	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00163	59		 pop	 ecx
  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c3		 ret	 0
$LN12@PMC_DivRem:

; 1587 :                     }
; 1588 :                     else
; 1589 :                     {
; 1590 :                         __UNIT_TYPE r_buf = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v);

  0016b	57		 push	 edi
  0016c	ff 76 10	 push	 DWORD PTR [esi+16]
  0016f	ff 76 24	 push	 DWORD PTR [esi+36]
  00172	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  00177	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1591 :                         return ((_UINT32_T)r_buf);
; 1592 :                     }
; 1593 :                 }
; 1594 :             }
; 1595 :         }
; 1596 :     }

  0017a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00184	59		 pop	 ecx
  00185	5f		 pop	 edi
  00186	5e		 pop	 esi
  00187	5b		 pop	 ebx
  00188	8b e5		 mov	 esp, ebp
  0018a	5d		 pop	 ebp
  0018b	c3		 ret	 0
$LN24@PMC_DivRem:

; 1523 :         {
; 1524 :             // v が 0 である場合
; 1525 : 
; 1526 :             // 0 による除算はエラーで返す
; 1527 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  0018c	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  00191	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00194	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  00199	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  0019e	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN22@PMC_DivRem:
  001a7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z
_TEXT	SEGMENT
tv662 = -40						; size = 4
tv663 = -36						; size = 4
_value$1$ = -32						; size = 4
_value$1$ = -32						; size = 4
_lh_mi$1$ = -28						; size = 4
_rh_mi$1$ = -24						; size = 4
$T1 = -20						; size = 4
tv661 = -16						; size = 4
tv659 = -12						; size = 4
_rh_hi$1$ = -8						; size = 4
_v1$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_lh_mi$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADX_MULX, COMDAT

; 1392 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1393 :         // u の最上位ワードは 0 でありうることに注意すること。
; 1394 : 
; 1395 : #ifdef _DEBUG
; 1396 :         if (v_buf[v_buf_len - 1] == 0)
; 1397 :         {
; 1398 :             ; // このルートには到達しないはず。デバッグ用。
; 1399 :         }
; 1400 : #endif
; 1401 : 
; 1402 :         __UNIT_TYPE d_factor = _LZCNT_ALT_UNIT(v_buf[v_buf_len - 1]);

  00003	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  00006	83 ec 28	 sub	 esp, 40			; 00000028H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _v_buf$[ebp]
  0000e	57		 push	 edi
  0000f	8b 44 96 fc	 mov	 eax, DWORD PTR [esi+edx*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 455  :             if (x == 0)

  00013	85 c0		 test	 eax, eax
  00015	75 75		 jne	 SHORT $LN13@DivRem_X_X

; 456  :                 return (sizeof(x) * 8);

  00017	bf 20 00 00 00	 mov	 edi, 32			; 00000020H
  0001c	89 7d ec	 mov	 DWORD PTR $T1[ebp], edi
$LN5@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1411 :             LeftShift_Imp(u_buf, u_buf_len, d_factor, r_buf, FALSE);

  0001f	8b 5d 20	 mov	 ebx, DWORD PTR _r_buf$[ebp]
  00022	6a 00		 push	 0
  00024	53		 push	 ebx
  00025	57		 push	 edi
  00026	ff 75 0c	 push	 DWORD PTR _u_buf_len$[ebp]
  00029	ff 75 08	 push	 DWORD PTR _u_buf$[ebp]
  0002c	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp

; 1412 :             LeftShift_Imp(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

  00031	6a 00		 push	 0
  00033	ff 75 18	 push	 DWORD PTR _work_v_buf$[ebp]
  00036	57		 push	 edi
  00037	ff 75 14	 push	 DWORD PTR _v_buf_len$[ebp]
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
  00040	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  00043	83 c4 28	 add	 esp, 40			; 00000028H
  00046	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
$LN6@DivRem_X_X:

; 1413 :         }
; 1414 : 
; 1415 :         __UNIT_TYPE* work_u_buf = r_buf;
; 1416 :         __UNIT_TYPE q_index = u_buf_len - v_buf_len;

  00049	8b 4d 18	 mov	 ecx, DWORD PTR _work_v_buf$[ebp]
  0004c	8b f8		 mov	 edi, eax
  0004e	2b fa		 sub	 edi, edx
  00050	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00053	8d 0c 91	 lea	 ecx, DWORD PTR [ecx+edx*4]
  00056	83 c1 f8	 add	 ecx, -8			; fffffff8H
  00059	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]
  0005c	83 c0 fe	 add	 eax, -2			; fffffffeH
  0005f	89 75 dc	 mov	 DWORD PTR tv663[ebp], esi
  00062	89 4d d8	 mov	 DWORD PTR tv662[ebp], ecx
  00065	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
$LN95@DivRem_X_X:

; 794  :         __UNIT_TYPE uj = u_buf[u_index];

  00068	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 795  :         __UNIT_TYPE uj_1 = u_buf[u_index - 1];

  0006b	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 796  :         __UNIT_TYPE uj_2 = u_buf[u_index - 2];
; 797  :         __UNIT_TYPE v1 = v_buf[v_buf_len - 1];

  0006e	8b 36		 mov	 esi, DWORD PTR [esi]
  00070	89 45 f0	 mov	 DWORD PTR tv661[ebp], eax
  00073	8b 00		 mov	 eax, DWORD PTR [eax]
  00075	89 45 f4	 mov	 DWORD PTR tv659[ebp], eax

; 798  :         __UNIT_TYPE v2 = v_buf[v_buf_len - 2];

  00078	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007a	89 55 f8	 mov	 DWORD PTR _rh_hi$1$[ebp], edx
  0007d	89 75 fc	 mov	 DWORD PTR _v1$1$[ebp], esi
  00080	89 45 10	 mov	 DWORD PTR _v2$1$[ebp], eax

; 697  :         if (uj == v1)

  00083	3b d6		 cmp	 edx, esi
  00085	75 36		 jne	 SHORT $LN24@DivRem_X_X

; 698  :             return (-1);

  00087	83 ce ff	 or	 esi, -1
  0008a	eb 4a		 jmp	 SHORT $LN23@DivRem_X_X
$LN13@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 460  :             _BitScanReverse(&pos, x);

  0008c	0f bd c0	 bsr	 eax, eax

; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);
; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  0008f	bf 1f 00 00 00	 mov	 edi, 31			; 0000001fH
  00094	2b f8		 sub	 edi, eax
  00096	89 7d ec	 mov	 DWORD PTR $T1[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1403 :         if (d_factor == 0)

  00099	75 84		 jne	 SHORT $LN5@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0009b	8b 5d 20	 mov	 ebx, DWORD PTR _r_buf$[ebp]
  0009e	8b fb		 mov	 edi, ebx
  000a0	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  000a3	8b c8		 mov	 ecx, eax
  000a5	8b 75 08	 mov	 esi, DWORD PTR _u_buf$[ebp]
  000a8	f3 a5		 rep movsd
  000aa	8b 7d 18	 mov	 edi, DWORD PTR _work_v_buf$[ebp]
  000ad	8b ca		 mov	 ecx, edx
  000af	8b 75 10	 mov	 esi, DWORD PTR _v_buf$[ebp]
  000b2	f3 a5		 rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1407 :             r_buf[u_buf_len] = 0;

  000b4	c7 04 83 00 00
	00 00		 mov	 DWORD PTR [ebx+eax*4], 0

; 1408 :         }
; 1409 :         else

  000bb	eb 8c		 jmp	 SHORT $LN6@DivRem_X_X
$LN24@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  000bd	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 262  :             return ((_UINT32_T)(t / v));

  000c4	6a 00		 push	 0
  000c6	56		 push	 esi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000c7	33 c9		 xor	 ecx, ecx
  000c9	8b c2		 mov	 eax, edx
  000cb	0b cb		 or	 ecx, ebx

; 262  :             return ((_UINT32_T)(t / v));

  000cd	50		 push	 eax
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 __aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 707  :         return (q);

  000d4	8b f0		 mov	 esi, eax
$LN23@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000d6	8b c6		 mov	 eax, esi

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000d8	8b cb		 mov	 ecx, ebx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000da	f7 65 10	 mul	 DWORD PTR _v2$1$[ebp]
  000dd	89 45 e0	 mov	 DWORD PTR _value$1$[ebp], eax
  000e0	8b c6		 mov	 eax, esi
  000e2	89 55 e4	 mov	 DWORD PTR _lh_mi$1$[ebp], edx
  000e5	f7 65 fc	 mul	 DWORD PTR _v1$1$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000e8	2b c8		 sub	 ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  000ea	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000ef	89 4d e8	 mov	 DWORD PTR _rh_mi$1$[ebp], ecx
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _rh_hi$1$[ebp]
  000f5	1b ca		 sbb	 ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  000f7	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  000fc	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 755  :         if (rh_hi > 0)

  00100	85 c9		 test	 ecx, ecx
  00102	75 4c		 jne	 SHORT $LN93@DivRem_X_X

; 756  :         {
; 757  :             return (FALSE);
; 758  :         }
; 759  :         else if (lh_mi > rh_mi)

  00104	8b 45 e8	 mov	 eax, DWORD PTR _rh_mi$1$[ebp]
  00107	39 45 e4	 cmp	 DWORD PTR _lh_mi$1$[ebp], eax
  0010a	77 0a		 ja	 SHORT $LN20@DivRem_X_X

; 760  :         {
; 761  :             return (TRUE);
; 762  :         }
; 763  :         else if (lh_mi < rh_mi)

  0010c	72 42		 jb	 SHORT $LN93@DivRem_X_X

; 800  :         if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

  0010e	8b 45 e0	 mov	 eax, DWORD PTR _value$1$[ebp]
  00111	3b 45 f4	 cmp	 eax, DWORD PTR tv659[ebp]
  00114	76 3a		 jbe	 SHORT $LN93@DivRem_X_X
$LN20@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00116	8b 4d f8	 mov	 ecx, DWORD PTR _rh_hi$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 802  :         --q_;

  00119	4e		 dec	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0011a	8b c6		 mov	 eax, esi
  0011c	f7 65 10	 mul	 DWORD PTR _v2$1$[ebp]
  0011f	89 45 e0	 mov	 DWORD PTR _value$1$[ebp], eax
  00122	8b c6		 mov	 eax, esi
  00124	89 55 10	 mov	 DWORD PTR _lh_mi$1$[ebp], edx
  00127	f7 65 fc	 mul	 DWORD PTR _v1$1$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0012a	2b d8		 sub	 ebx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0012c	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00131	1b ca		 sbb	 ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00133	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  00138	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 755  :         if (rh_hi > 0)

  0013c	85 c9		 test	 ecx, ecx
  0013e	75 10		 jne	 SHORT $LN93@DivRem_X_X

; 756  :         {
; 757  :             return (FALSE);
; 758  :         }
; 759  :         else if (lh_mi > rh_mi)

  00140	39 5d 10	 cmp	 DWORD PTR _lh_mi$1$[ebp], ebx
  00143	77 0a		 ja	 SHORT $LN21@DivRem_X_X

; 760  :         {
; 761  :             return (TRUE);
; 762  :         }
; 763  :         else if (lh_mi < rh_mi)

  00145	72 09		 jb	 SHORT $LN93@DivRem_X_X

; 803  :         if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

  00147	8b 45 e0	 mov	 eax, DWORD PTR _value$1$[ebp]
  0014a	3b 45 f4	 cmp	 eax, DWORD PTR tv659[ebp]
  0014d	76 01		 jbe	 SHORT $LN93@DivRem_X_X
$LN21@DivRem_X_X:

; 804  :             return (q_);
; 805  :         --q_;

  0014f	4e		 dec	 esi
$LN93@DivRem_X_X:

; 1417 : 
; 1418 :         for (;;)
; 1419 :         {
; 1420 :             __UNIT_TYPE q_ = CalculateQ_X(work_u_buf, work_v_buf, v_buf_len, q_index);
; 1421 : 
; 1422 :             if (SubtructOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

  00150	8b 5d 20	 mov	 ebx, DWORD PTR _r_buf$[ebp]
  00153	56		 push	 esi
  00154	57		 push	 edi
  00155	ff 75 14	 push	 DWORD PTR _v_buf_len$[ebp]
  00158	ff 75 18	 push	 DWORD PTR _work_v_buf$[ebp]
  0015b	ff 75 0c	 push	 DWORD PTR _u_buf_len$[ebp]
  0015e	53		 push	 ebx
  0015f	e8 00 00 00 00	 call	 ?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPAII0III@Z ; Palmtree::Math::Core::Internal::SubtructOneLineX
  00164	83 c4 18	 add	 esp, 24			; 00000018H
  00167	85 c0		 test	 eax, eax
  00169	74 14		 je	 SHORT $LN7@DivRem_X_X

; 1423 :             {
; 1424 :                 // 桁借りが発生した場合
; 1425 : 
; 1426 :                 --q_;
; 1427 :                 AddOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

  0016b	57		 push	 edi
  0016c	ff 75 14	 push	 DWORD PTR _v_buf_len$[ebp]
  0016f	4e		 dec	 esi
  00170	ff 75 18	 push	 DWORD PTR _work_v_buf$[ebp]
  00173	ff 75 0c	 push	 DWORD PTR _u_buf_len$[ebp]
  00176	53		 push	 ebx
  00177	e8 00 00 00 00	 call	 ?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPAII0II@Z ; Palmtree::Math::Core::Internal::AddOneLineX
  0017c	83 c4 14	 add	 esp, 20			; 00000014H
$LN7@DivRem_X_X:

; 1428 :             }
; 1429 : 
; 1430 :             if (q_buf != nullptr)

  0017f	8b 45 1c	 mov	 eax, DWORD PTR _q_buf$[ebp]
  00182	85 c0		 test	 eax, eax
  00184	74 03		 je	 SHORT $LN8@DivRem_X_X

; 1431 :                 q_buf[q_index] = q_;

  00186	89 34 b8	 mov	 DWORD PTR [eax+edi*4], esi
$LN8@DivRem_X_X:

; 1432 : 
; 1433 : 
; 1434 :             if (q_index == 0)

  00189	85 ff		 test	 edi, edi
  0018b	74 12		 je	 SHORT $LN90@DivRem_X_X

; 1435 :                 break;
; 1436 :             --q_index;

  0018d	8b 45 f0	 mov	 eax, DWORD PTR tv661[ebp]
  00190	4f		 dec	 edi

; 1437 :         }

  00191	8b 75 dc	 mov	 esi, DWORD PTR tv663[ebp]
  00194	83 e8 04	 sub	 eax, 4
  00197	8b 4d d8	 mov	 ecx, DWORD PTR tv662[ebp]
  0019a	e9 c9 fe ff ff	 jmp	 $LN95@DivRem_X_X
$LN90@DivRem_X_X:

; 1438 : 
; 1439 :         if (d_factor > 0)

  0019f	8b 45 ec	 mov	 eax, DWORD PTR $T1[ebp]
  001a2	85 c0		 test	 eax, eax
  001a4	74 12		 je	 SHORT $LN10@DivRem_X_X

; 1440 :             RightShift_Imp(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

  001a6	6a 00		 push	 0
  001a8	53		 push	 ebx
  001a9	50		 push	 eax
  001aa	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  001ad	40		 inc	 eax
  001ae	50		 push	 eax
  001af	53		 push	 ebx
  001b0	e8 00 00 00 00	 call	 ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
  001b5	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@DivRem_X_X:

; 1441 :     }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADX_MULX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z
_TEXT	SEGMENT
tv662 = -40						; size = 4
tv663 = -36						; size = 4
_value$1$ = -32						; size = 4
_value$1$ = -32						; size = 4
_lh_mi$1$ = -28						; size = 4
_rh_mi$1$ = -24						; size = 4
$T1 = -20						; size = 4
tv661 = -16						; size = 4
tv659 = -12						; size = 4
_rh_hi$1$ = -8						; size = 4
_v1$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_lh_mi$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADC_MUL, COMDAT

; 1335 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1336 :         // u および v の最上位ワードは 0 でありうることに注意すること。
; 1337 :         if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE))
; 1338 :         {
; 1339 :             while (u_buf[u_buf_len - 1] == 0)
; 1340 :                 --u_buf_len;
; 1341 :             while (v_buf[v_buf_len - 1] == 0)
; 1342 :                 --v_buf_len;
; 1343 :         }
; 1344 : 
; 1345 : #ifdef _DEBUG
; 1346 :         if (v_buf[v_buf_len - 1] == 0)
; 1347 :         {
; 1348 :             ; // このルートには到達しないはず。デバッグ用。
; 1349 :         }
; 1350 : #endif
; 1351 : 
; 1352 :         __UNIT_TYPE d_factor = _LZCNT_ALT_UNIT(v_buf[v_buf_len - 1]);

  00003	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  00006	83 ec 28	 sub	 esp, 40			; 00000028H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 10	 mov	 esi, DWORD PTR _v_buf$[ebp]
  0000e	57		 push	 edi
  0000f	8b 44 96 fc	 mov	 eax, DWORD PTR [esi+edx*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 455  :             if (x == 0)

  00013	85 c0		 test	 eax, eax
  00015	75 75		 jne	 SHORT $LN18@DivRem_X_X

; 456  :                 return (sizeof(x) * 8);

  00017	bf 20 00 00 00	 mov	 edi, 32			; 00000020H
  0001c	89 7d ec	 mov	 DWORD PTR $T1[ebp], edi
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1361 :             LeftShift_Imp(u_buf, u_buf_len, d_factor, r_buf, FALSE);

  0001f	8b 5d 20	 mov	 ebx, DWORD PTR _r_buf$[ebp]
  00022	6a 00		 push	 0
  00024	53		 push	 ebx
  00025	57		 push	 edi
  00026	ff 75 0c	 push	 DWORD PTR _u_buf_len$[ebp]
  00029	ff 75 08	 push	 DWORD PTR _u_buf$[ebp]
  0002c	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp

; 1362 :             LeftShift_Imp(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

  00031	6a 00		 push	 0
  00033	ff 75 18	 push	 DWORD PTR _work_v_buf$[ebp]
  00036	57		 push	 edi
  00037	ff 75 14	 push	 DWORD PTR _v_buf_len$[ebp]
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
  00040	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  00043	83 c4 28	 add	 esp, 40			; 00000028H
  00046	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
$LN11@DivRem_X_X:

; 1363 :         }
; 1364 : 
; 1365 :         __UNIT_TYPE* work_u_buf = r_buf;
; 1366 :         __UNIT_TYPE q_index = u_buf_len - v_buf_len;

  00049	8b 4d 18	 mov	 ecx, DWORD PTR _work_v_buf$[ebp]
  0004c	8b f8		 mov	 edi, eax
  0004e	2b fa		 sub	 edi, edx
  00050	8d 71 fc	 lea	 esi, DWORD PTR [ecx-4]
  00053	8d 0c 91	 lea	 ecx, DWORD PTR [ecx+edx*4]
  00056	83 c1 f8	 add	 ecx, -8			; fffffff8H
  00059	8d 34 96	 lea	 esi, DWORD PTR [esi+edx*4]
  0005c	83 c0 fe	 add	 eax, -2			; fffffffeH
  0005f	89 75 dc	 mov	 DWORD PTR tv663[ebp], esi
  00062	89 4d d8	 mov	 DWORD PTR tv662[ebp], ecx
  00065	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
$LN100@DivRem_X_X:

; 776  :         __UNIT_TYPE uj = u_buf[u_index];

  00068	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 777  :         __UNIT_TYPE uj_1 = u_buf[u_index - 1];

  0006b	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 778  :         __UNIT_TYPE uj_2 = u_buf[u_index - 2];
; 779  :         __UNIT_TYPE v1 = v_buf[v_buf_len - 1];

  0006e	8b 36		 mov	 esi, DWORD PTR [esi]
  00070	89 45 f0	 mov	 DWORD PTR tv661[ebp], eax
  00073	8b 00		 mov	 eax, DWORD PTR [eax]
  00075	89 45 f4	 mov	 DWORD PTR tv659[ebp], eax

; 780  :         __UNIT_TYPE v2 = v_buf[v_buf_len - 2];

  00078	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007a	89 55 f8	 mov	 DWORD PTR _rh_hi$1$[ebp], edx
  0007d	89 75 fc	 mov	 DWORD PTR _v1$1$[ebp], esi
  00080	89 45 10	 mov	 DWORD PTR _v2$1$[ebp], eax

; 697  :         if (uj == v1)

  00083	3b d6		 cmp	 edx, esi
  00085	75 36		 jne	 SHORT $LN29@DivRem_X_X

; 698  :             return (-1);

  00087	83 ce ff	 or	 esi, -1
  0008a	eb 4a		 jmp	 SHORT $LN28@DivRem_X_X
$LN18@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 460  :             _BitScanReverse(&pos, x);

  0008c	0f bd c0	 bsr	 eax, eax

; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);
; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  0008f	bf 1f 00 00 00	 mov	 edi, 31			; 0000001fH
  00094	2b f8		 sub	 edi, eax
  00096	89 7d ec	 mov	 DWORD PTR $T1[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1353 :         if (d_factor == 0)

  00099	75 84		 jne	 SHORT $LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0009b	8b 5d 20	 mov	 ebx, DWORD PTR _r_buf$[ebp]
  0009e	8b fb		 mov	 edi, ebx
  000a0	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  000a3	8b c8		 mov	 ecx, eax
  000a5	8b 75 08	 mov	 esi, DWORD PTR _u_buf$[ebp]
  000a8	f3 a5		 rep movsd
  000aa	8b 7d 18	 mov	 edi, DWORD PTR _work_v_buf$[ebp]
  000ad	8b ca		 mov	 ecx, edx
  000af	8b 75 10	 mov	 esi, DWORD PTR _v_buf$[ebp]
  000b2	f3 a5		 rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1357 :             r_buf[u_buf_len] = 0;

  000b4	c7 04 83 00 00
	00 00		 mov	 DWORD PTR [ebx+eax*4], 0

; 1358 :         }
; 1359 :         else

  000bb	eb 8c		 jmp	 SHORT $LN11@DivRem_X_X
$LN29@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  000bd	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 262  :             return ((_UINT32_T)(t / v));

  000c4	6a 00		 push	 0
  000c6	56		 push	 esi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000c7	33 c9		 xor	 ecx, ecx
  000c9	8b c2		 mov	 eax, edx
  000cb	0b cb		 or	 ecx, ebx

; 262  :             return ((_UINT32_T)(t / v));

  000cd	50		 push	 eax
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 __aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 707  :         return (q);

  000d4	8b f0		 mov	 esi, eax
$LN28@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000d6	8b c6		 mov	 eax, esi

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000d8	8b cb		 mov	 ecx, ebx

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000da	f7 65 10	 mul	 DWORD PTR _v2$1$[ebp]
  000dd	89 45 e0	 mov	 DWORD PTR _value$1$[ebp], eax
  000e0	8b c6		 mov	 eax, esi
  000e2	89 55 e4	 mov	 DWORD PTR _lh_mi$1$[ebp], edx
  000e5	f7 65 fc	 mul	 DWORD PTR _v1$1$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000e8	2b c8		 sub	 ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  000ea	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000ef	89 4d e8	 mov	 DWORD PTR _rh_mi$1$[ebp], ecx
  000f2	8b 4d f8	 mov	 ecx, DWORD PTR _rh_hi$1$[ebp]
  000f5	1b ca		 sbb	 ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  000f7	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  000fc	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 727  :         if (rh_hi > 0)

  00100	85 c9		 test	 ecx, ecx
  00102	75 4c		 jne	 SHORT $LN98@DivRem_X_X

; 728  :             return (FALSE);
; 729  :         else if (lh_mi > rh_mi)

  00104	8b 45 e8	 mov	 eax, DWORD PTR _rh_mi$1$[ebp]
  00107	39 45 e4	 cmp	 DWORD PTR _lh_mi$1$[ebp], eax
  0010a	77 0a		 ja	 SHORT $LN25@DivRem_X_X

; 730  :             return (TRUE);
; 731  :         else if (lh_mi < rh_mi)

  0010c	72 42		 jb	 SHORT $LN98@DivRem_X_X

; 782  :         if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

  0010e	8b 45 e0	 mov	 eax, DWORD PTR _value$1$[ebp]
  00111	3b 45 f4	 cmp	 eax, DWORD PTR tv659[ebp]
  00114	76 3a		 jbe	 SHORT $LN98@DivRem_X_X
$LN25@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00116	8b 4d f8	 mov	 ecx, DWORD PTR _rh_hi$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 784  :         --q_;

  00119	4e		 dec	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0011a	8b c6		 mov	 eax, esi
  0011c	f7 65 10	 mul	 DWORD PTR _v2$1$[ebp]
  0011f	89 45 e0	 mov	 DWORD PTR _value$1$[ebp], eax
  00122	8b c6		 mov	 eax, esi
  00124	89 55 10	 mov	 DWORD PTR _lh_mi$1$[ebp], edx
  00127	f7 65 fc	 mul	 DWORD PTR _v1$1$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0012a	2b d8		 sub	 ebx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0012c	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00131	1b ca		 sbb	 ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00133	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  00138	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 727  :         if (rh_hi > 0)

  0013c	85 c9		 test	 ecx, ecx
  0013e	75 10		 jne	 SHORT $LN98@DivRem_X_X

; 728  :             return (FALSE);
; 729  :         else if (lh_mi > rh_mi)

  00140	39 5d 10	 cmp	 DWORD PTR _lh_mi$1$[ebp], ebx
  00143	77 0a		 ja	 SHORT $LN26@DivRem_X_X

; 730  :             return (TRUE);
; 731  :         else if (lh_mi < rh_mi)

  00145	72 09		 jb	 SHORT $LN98@DivRem_X_X

; 785  :         if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

  00147	8b 45 e0	 mov	 eax, DWORD PTR _value$1$[ebp]
  0014a	3b 45 f4	 cmp	 eax, DWORD PTR tv659[ebp]
  0014d	76 01		 jbe	 SHORT $LN98@DivRem_X_X
$LN26@DivRem_X_X:

; 786  :             return (q_);
; 787  :         --q_;

  0014f	4e		 dec	 esi
$LN98@DivRem_X_X:

; 1367 : 
; 1368 :         for (;;)
; 1369 :         {
; 1370 :             __UNIT_TYPE q_ = CalculateQ_(work_u_buf, work_v_buf, v_buf_len, q_index);
; 1371 : 
; 1372 : 
; 1373 :             if (SubtructOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

  00150	8b 5d 20	 mov	 ebx, DWORD PTR _r_buf$[ebp]
  00153	56		 push	 esi
  00154	57		 push	 edi
  00155	ff 75 14	 push	 DWORD PTR _v_buf_len$[ebp]
  00158	ff 75 18	 push	 DWORD PTR _work_v_buf$[ebp]
  0015b	ff 75 0c	 push	 DWORD PTR _u_buf_len$[ebp]
  0015e	53		 push	 ebx
  0015f	e8 00 00 00 00	 call	 ?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPAII0III@Z ; Palmtree::Math::Core::Internal::SubtructOneLine
  00164	83 c4 18	 add	 esp, 24			; 00000018H
  00167	85 c0		 test	 eax, eax
  00169	74 14		 je	 SHORT $LN12@DivRem_X_X

; 1374 :             {
; 1375 :                 // 桁借りが発生した場合
; 1376 :                 --q_;
; 1377 :                 AddOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

  0016b	57		 push	 edi
  0016c	ff 75 14	 push	 DWORD PTR _v_buf_len$[ebp]
  0016f	4e		 dec	 esi
  00170	ff 75 18	 push	 DWORD PTR _work_v_buf$[ebp]
  00173	ff 75 0c	 push	 DWORD PTR _u_buf_len$[ebp]
  00176	53		 push	 ebx
  00177	e8 00 00 00 00	 call	 ?AddOneLine@Internal@Core@Math@Palmtree@@YAXPAII0II@Z ; Palmtree::Math::Core::Internal::AddOneLine
  0017c	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@DivRem_X_X:

; 1378 :             }
; 1379 : 
; 1380 :             if (q_buf != nullptr)

  0017f	8b 45 1c	 mov	 eax, DWORD PTR _q_buf$[ebp]
  00182	85 c0		 test	 eax, eax
  00184	74 03		 je	 SHORT $LN13@DivRem_X_X

; 1381 :                 q_buf[q_index] = q_;

  00186	89 34 b8	 mov	 DWORD PTR [eax+edi*4], esi
$LN13@DivRem_X_X:

; 1382 :             if (q_index == 0)

  00189	85 ff		 test	 edi, edi
  0018b	74 12		 je	 SHORT $LN95@DivRem_X_X

; 1383 :                 break;
; 1384 :             --q_index;

  0018d	8b 45 f0	 mov	 eax, DWORD PTR tv661[ebp]
  00190	4f		 dec	 edi

; 1385 :         }

  00191	8b 75 dc	 mov	 esi, DWORD PTR tv663[ebp]
  00194	83 e8 04	 sub	 eax, 4
  00197	8b 4d d8	 mov	 ecx, DWORD PTR tv662[ebp]
  0019a	e9 c9 fe ff ff	 jmp	 $LN100@DivRem_X_X
$LN95@DivRem_X_X:

; 1386 : 
; 1387 :         if (d_factor > 0)

  0019f	8b 45 ec	 mov	 eax, DWORD PTR $T1[ebp]
  001a2	85 c0		 test	 eax, eax
  001a4	74 12		 je	 SHORT $LN15@DivRem_X_X

; 1388 :             RightShift_Imp(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

  001a6	6a 00		 push	 0
  001a8	53		 push	 ebx
  001a9	50		 push	 eax
  001aa	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  001ad	40		 inc	 eax
  001ae	50		 push	 eax
  001af	53		 push	 ebx
  001b0	e8 00 00 00 00	 call	 ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
  001b5	83 c4 14	 add	 esp, 20			; 00000014H
$LN15@DivRem_X_X:

; 1389 :     }

  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi
  001ba	5b		 pop	 ebx
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPAII0II@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_c$ = 24						; size = 1
_q_index$ = 24						; size = 4
?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPAII0II@Z PROC ; Palmtree::Math::Core::Internal::AddOneLineX, COMDAT

; 1269 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  00003	8b 45 18	 mov	 eax, DWORD PTR _q_index$[ebp]

; 1271 :         __UNIT_TYPE* v_ptr = &v_buf[0];
; 1272 :         __UNIT_TYPE v_count = v_buf_len;
; 1273 :         char c = 0;

  00006	32 d2		 xor	 dl, dl
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0000b	53		 push	 ebx

; 1274 : 
; 1275 :         // まず 32 ワードずつ加算をする。
; 1276 :         __UNIT_TYPE count = v_count >> 5;

  0000c	8b 5d 14	 mov	 ebx, DWORD PTR _v_buf_len$[ebp]
  0000f	56		 push	 esi
  00010	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  00013	88 55 18	 mov	 BYTE PTR _c$[ebp], dl
  00016	8b cb		 mov	 ecx, ebx
  00018	c1 e9 05	 shr	 ecx, 5
  0001b	57		 push	 edi
  0001c	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]

; 1277 :         while (count != 0)

  0001f	85 c9		 test	 ecx, ecx
  00021	0f 84 9e 01 00
	00		 je	 $LN3@AddOneLine
  00027	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 296  :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00032	80 c2 ff	 add	 dl, 255			; 000000ffH
  00035	66 0f 38 f6 07	 adcx	 eax, DWORD PTR [edi]
  0003a	89 06		 mov	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 297  :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  0003c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0003f	66 0f 38 f6 47
	04		 adcx	 eax, DWORD PTR [edi+4]
  00045	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 298  :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00048	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0004b	66 0f 38 f6 47
	08		 adcx	 eax, DWORD PTR [edi+8]
  00051	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 299  :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  00054	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00057	66 0f 38 f6 47
	0c		 adcx	 eax, DWORD PTR [edi+12]
  0005d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 300  :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00060	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00063	66 0f 38 f6 47
	10		 adcx	 eax, DWORD PTR [edi+16]
  00069	89 46 10	 mov	 DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 301  :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  0006c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0006f	66 0f 38 f6 47
	14		 adcx	 eax, DWORD PTR [edi+20]
  00075	89 46 14	 mov	 DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 302  :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00078	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0007b	66 0f 38 f6 47
	18		 adcx	 eax, DWORD PTR [edi+24]
  00081	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 303  :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00084	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00087	66 0f 38 f6 47
	1c		 adcx	 eax, DWORD PTR [edi+28]
  0008d	89 46 1c	 mov	 DWORD PTR [esi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 304  :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  00090	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00093	66 0f 38 f6 47
	20		 adcx	 eax, DWORD PTR [edi+32]
  00099	89 46 20	 mov	 DWORD PTR [esi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 305  :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  0009c	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0009f	66 0f 38 f6 47
	24		 adcx	 eax, DWORD PTR [edi+36]
  000a5	89 46 24	 mov	 DWORD PTR [esi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 306  :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  000a8	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000ab	66 0f 38 f6 47
	28		 adcx	 eax, DWORD PTR [edi+40]
  000b1	89 46 28	 mov	 DWORD PTR [esi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 307  :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  000b4	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000b7	66 0f 38 f6 47
	2c		 adcx	 eax, DWORD PTR [edi+44]
  000bd	89 46 2c	 mov	 DWORD PTR [esi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 308  :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  000c0	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000c3	66 0f 38 f6 47
	30		 adcx	 eax, DWORD PTR [edi+48]
  000c9	89 46 30	 mov	 DWORD PTR [esi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 309  :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  000cc	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000cf	66 0f 38 f6 47
	34		 adcx	 eax, DWORD PTR [edi+52]
  000d5	89 46 34	 mov	 DWORD PTR [esi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 310  :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  000d8	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000db	66 0f 38 f6 47
	38		 adcx	 eax, DWORD PTR [edi+56]
  000e1	89 46 38	 mov	 DWORD PTR [esi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 311  :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  000e4	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000e7	66 0f 38 f6 47
	3c		 adcx	 eax, DWORD PTR [edi+60]
  000ed	89 46 3c	 mov	 DWORD PTR [esi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 312  :     c = _ADDX_UNIT(c, xp[16], yp[16], &zp[16]);

  000f0	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000f3	66 0f 38 f6 47
	40		 adcx	 eax, DWORD PTR [edi+64]
  000f9	89 46 40	 mov	 DWORD PTR [esi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 313  :     c = _ADDX_UNIT(c, xp[17], yp[17], &zp[17]);

  000fc	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000ff	66 0f 38 f6 47
	44		 adcx	 eax, DWORD PTR [edi+68]
  00105	89 46 44	 mov	 DWORD PTR [esi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 314  :     c = _ADDX_UNIT(c, xp[18], yp[18], &zp[18]);

  00108	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0010b	66 0f 38 f6 47
	48		 adcx	 eax, DWORD PTR [edi+72]
  00111	89 46 48	 mov	 DWORD PTR [esi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 315  :     c = _ADDX_UNIT(c, xp[19], yp[19], &zp[19]);

  00114	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00117	66 0f 38 f6 47
	4c		 adcx	 eax, DWORD PTR [edi+76]
  0011d	89 46 4c	 mov	 DWORD PTR [esi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 316  :     c = _ADDX_UNIT(c, xp[20], yp[20], &zp[20]);

  00120	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00123	66 0f 38 f6 47
	50		 adcx	 eax, DWORD PTR [edi+80]
  00129	89 46 50	 mov	 DWORD PTR [esi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 317  :     c = _ADDX_UNIT(c, xp[21], yp[21], &zp[21]);

  0012c	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0012f	66 0f 38 f6 47
	54		 adcx	 eax, DWORD PTR [edi+84]
  00135	89 46 54	 mov	 DWORD PTR [esi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 318  :     c = _ADDX_UNIT(c, xp[22], yp[22], &zp[22]);

  00138	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0013b	66 0f 38 f6 47
	58		 adcx	 eax, DWORD PTR [edi+88]
  00141	89 46 58	 mov	 DWORD PTR [esi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 319  :     c = _ADDX_UNIT(c, xp[23], yp[23], &zp[23]);

  00144	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00147	66 0f 38 f6 47
	5c		 adcx	 eax, DWORD PTR [edi+92]
  0014d	89 46 5c	 mov	 DWORD PTR [esi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 320  :     c = _ADDX_UNIT(c, xp[24], yp[24], &zp[24]);

  00150	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00153	66 0f 38 f6 47
	60		 adcx	 eax, DWORD PTR [edi+96]
  00159	89 46 60	 mov	 DWORD PTR [esi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 321  :     c = _ADDX_UNIT(c, xp[25], yp[25], &zp[25]);

  0015c	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0015f	66 0f 38 f6 47
	64		 adcx	 eax, DWORD PTR [edi+100]
  00165	89 46 64	 mov	 DWORD PTR [esi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 322  :     c = _ADDX_UNIT(c, xp[26], yp[26], &zp[26]);

  00168	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0016b	66 0f 38 f6 47
	68		 adcx	 eax, DWORD PTR [edi+104]
  00171	89 46 68	 mov	 DWORD PTR [esi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 323  :     c = _ADDX_UNIT(c, xp[27], yp[27], &zp[27]);

  00174	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00177	66 0f 38 f6 47
	6c		 adcx	 eax, DWORD PTR [edi+108]
  0017d	89 46 6c	 mov	 DWORD PTR [esi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 324  :     c = _ADDX_UNIT(c, xp[28], yp[28], &zp[28]);

  00180	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00183	66 0f 38 f6 47
	70		 adcx	 eax, DWORD PTR [edi+112]
  00189	89 46 70	 mov	 DWORD PTR [esi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 325  :     c = _ADDX_UNIT(c, xp[29], yp[29], &zp[29]);

  0018c	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0018f	66 0f 38 f6 47
	74		 adcx	 eax, DWORD PTR [edi+116]
  00195	89 46 74	 mov	 DWORD PTR [esi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 326  :     c = _ADDX_UNIT(c, xp[30], yp[30], &zp[30]);

  00198	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0019b	66 0f 38 f6 47
	78		 adcx	 eax, DWORD PTR [edi+120]
  001a1	89 46 78	 mov	 DWORD PTR [esi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 327  :     c = _ADDX_UNIT(c, xp[31], yp[31], &zp[31]);

  001a4	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001a7	66 0f 38 f6 47
	7c		 adcx	 eax, DWORD PTR [edi+124]
  001ad	89 46 7c	 mov	 DWORD PTR [esi+124], eax
  001b0	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1280 :             u_ptr += 32;

  001b3	83 ee 80	 sub	 esi, -128		; ffffff80H

; 1281 :             v_ptr += 32;

  001b6	83 ef 80	 sub	 edi, -128		; ffffff80H
  001b9	88 55 18	 mov	 BYTE PTR _c$[ebp], dl

; 1282 :             --count;

  001bc	83 e9 01	 sub	 ecx, 1
  001bf	0f 85 6b fe ff
	ff		 jne	 $LL2@AddOneLine
$LN3@AddOneLine:

; 1283 :         }
; 1284 :         // この時点で未処理の桁は 32 ワード未満のはず
; 1285 : 
; 1286 :         // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 1287 :         if (v_count & 0x10)

  001c5	f6 c3 10	 test	 bl, 16			; 00000010H
  001c8	74 16		 je	 SHORT $LN4@AddOneLine

; 1288 :         {
; 1289 :             c = _ADD_16WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  001ca	56		 push	 esi
  001cb	57		 push	 edi
  001cc	56		 push	 esi
  001cd	ff 75 18	 push	 DWORD PTR _c$[ebp]
  001d0	e8 00 00 00 00	 call	 __ADD_16WORDS_ADCX
  001d5	83 c4 10	 add	 esp, 16			; 00000010H

; 1290 :             u_ptr += 16;

  001d8	83 c6 40	 add	 esi, 64			; 00000040H
  001db	8a d0		 mov	 dl, al

; 1291 :             v_ptr += 16;

  001dd	83 c7 40	 add	 edi, 64			; 00000040H
$LN4@AddOneLine:

; 1292 :         }
; 1293 :         // この時点で未処理の桁は 16 ワード未満のはず
; 1294 : 
; 1295 :         // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 1296 :         if (v_count & 0x8)

  001e0	f6 c3 08	 test	 bl, 8
  001e3	74 69		 je	 SHORT $LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1704 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  001e5	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001e7	80 c2 ff	 add	 dl, 255			; 000000ffH
  001ea	66 0f 38 f6 0f	 adcx	 ecx, DWORD PTR [edi]
  001ef	89 0e		 mov	 DWORD PTR [esi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1705 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  001f1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001f4	66 0f 38 f6 47
	04		 adcx	 eax, DWORD PTR [edi+4]
  001fa	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1706 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  001fd	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00200	66 0f 38 f6 47
	08		 adcx	 eax, DWORD PTR [edi+8]
  00206	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1707 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  00209	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0020c	66 0f 38 f6 47
	0c		 adcx	 eax, DWORD PTR [edi+12]
  00212	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1708 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00215	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00218	66 0f 38 f6 47
	10		 adcx	 eax, DWORD PTR [edi+16]
  0021e	89 46 10	 mov	 DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1709 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  00221	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00224	66 0f 38 f6 47
	14		 adcx	 eax, DWORD PTR [edi+20]
  0022a	89 46 14	 mov	 DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1710 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  0022d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00230	66 0f 38 f6 47
	18		 adcx	 eax, DWORD PTR [edi+24]
  00236	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1711 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00239	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0023c	66 0f 38 f6 47
	1c		 adcx	 eax, DWORD PTR [edi+28]
  00242	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  00245	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1299 :             u_ptr += 8;

  00248	83 c6 20	 add	 esi, 32			; 00000020H

; 1300 :             v_ptr += 8;

  0024b	83 c7 20	 add	 edi, 32			; 00000020H
$LN5@AddOneLine:

; 1301 :         }
; 1302 :         // この時点で未処理の桁は 8 ワード未満のはず
; 1303 : 
; 1304 :         // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 1305 :         if (v_count & 0x4)

  0024e	f6 c3 04	 test	 bl, 4
  00251	74 39		 je	 SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2016 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00253	8b 06		 mov	 eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00255	80 c2 ff	 add	 dl, 255			; 000000ffH
  00258	66 0f 38 f6 07	 adcx	 eax, DWORD PTR [edi]
  0025d	89 06		 mov	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2017 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  0025f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00262	66 0f 38 f6 47
	04		 adcx	 eax, DWORD PTR [edi+4]
  00268	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2018 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  0026b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0026e	66 0f 38 f6 47
	08		 adcx	 eax, DWORD PTR [edi+8]
  00274	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2019 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  00277	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0027a	66 0f 38 f6 47
	0c		 adcx	 eax, DWORD PTR [edi+12]
  00280	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00283	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1308 :             u_ptr += 4;

  00286	83 c6 10	 add	 esi, 16			; 00000010H

; 1309 :             v_ptr += 4;

  00289	83 c7 10	 add	 edi, 16			; 00000010H
$LN6@AddOneLine:

; 1310 :         }
; 1311 :         // この時点で未処理の桁は 4 ワード未満のはず
; 1312 : 
; 1313 :         // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 1314 :         if (v_count & 0x2)

  0028c	f6 c3 02	 test	 bl, 2
  0028f	74 21		 je	 SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2230 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00291	8b 06		 mov	 eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00293	80 c2 ff	 add	 dl, 255			; 000000ffH
  00296	66 0f 38 f6 07	 adcx	 eax, DWORD PTR [edi]
  0029b	89 06		 mov	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2231 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  0029d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002a0	66 0f 38 f6 47
	04		 adcx	 eax, DWORD PTR [edi+4]
  002a6	89 46 04	 mov	 DWORD PTR [esi+4], eax
  002a9	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1317 :             u_ptr += 2;

  002ac	83 c6 08	 add	 esi, 8

; 1318 :             v_ptr += 2;

  002af	83 c7 08	 add	 edi, 8
$LN7@AddOneLine:

; 1319 :         }
; 1320 :         // この時点で未処理の桁は 2 ワード未満のはず
; 1321 : 
; 1322 :         // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 1323 :         if (v_count & 0x1)

  002b2	f6 c3 01	 test	 bl, 1
  002b5	74 0f		 je	 SHORT $LN8@AddOneLine

; 1324 :         {
; 1325 :             c = _ADD_UNIT(c, *u_ptr, *v_ptr, u_ptr);

  002b7	8b 06		 mov	 eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002b9	80 c2 ff	 add	 dl, 255			; 000000ffH
  002bc	13 07		 adc	 eax, DWORD PTR [edi]
  002be	89 06		 mov	 DWORD PTR [esi], eax
  002c0	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1326 :             ++u_ptr;

  002c3	83 c6 04	 add	 esi, 4
$LN8@AddOneLine:

; 1327 :             ++v_ptr;
; 1328 :         }
; 1329 : 
; 1330 :         // 残りの桁の繰り上がりを計算する。
; 1331 :         DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

  002c6	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  002c9	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  002d0	2b ce		 sub	 ecx, esi
  002d2	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  002d5	c1 f9 02	 sar	 ecx, 2

; 1178 :             if (u_count <= 0)

  002d8	85 c9		 test	 ecx, ecx
  002da	74 1d		 je	 SHORT $LN131@AddOneLine
  002dc	0f 1f 40 00	 npad	 4
$LL113@AddOneLine:

; 1179 :             {
; 1180 :                 // u の最上位まで達してしまった場合
; 1181 :                 return;
; 1182 :             }
; 1183 :             else if (c)

  002e0	84 d2		 test	 dl, dl
  002e2	74 15		 je	 SHORT $LN131@AddOneLine

; 1184 :             {
; 1185 :                 // u の最上位に達しておらず、かつキャリーが立っている場合
; 1186 : 
; 1187 :                 // 繰り上がりを継続する
; 1188 :                 c = _ADD_UNIT(c, *u_ptr, 0, u_ptr);

  002e4	8b 06		 mov	 eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002e6	80 c2 ff	 add	 dl, 255			; 000000ffH
  002e9	83 d0 00	 adc	 eax, 0
  002ec	89 06		 mov	 DWORD PTR [esi], eax
  002ee	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1189 :                 ++u_ptr;

  002f1	83 c6 04	 add	 esi, 4

; 1190 :                 --u_count;

  002f4	83 e9 01	 sub	 ecx, 1
  002f7	75 e7		 jne	 SHORT $LL113@AddOneLine
$LN131@AddOneLine:
  002f9	5f		 pop	 edi

; 1332 :     }

  002fa	5e		 pop	 esi
  002fb	5b		 pop	 ebx
  002fc	5d		 pop	 ebp
  002fd	c3		 ret	 0
?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPAII0II@Z ENDP ; Palmtree::Math::Core::Internal::AddOneLineX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?AddOneLine@Internal@Core@Math@Palmtree@@YAXPAII0II@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_c$ = 24						; size = 1
_q_index$ = 24						; size = 4
?AddOneLine@Internal@Core@Math@Palmtree@@YAXPAII0II@Z PROC ; Palmtree::Math::Core::Internal::AddOneLine, COMDAT

; 1203 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1204 :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  00003	8b 45 18	 mov	 eax, DWORD PTR _q_index$[ebp]

; 1205 :         __UNIT_TYPE* v_ptr = &v_buf[0];
; 1206 :         __UNIT_TYPE v_count = v_buf_len;
; 1207 :         char c = 0;

  00006	32 d2		 xor	 dl, dl
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0000b	53		 push	 ebx

; 1208 : 
; 1209 :         // まず 32 ワードずつ加算をする。
; 1210 :         __UNIT_TYPE count = v_count >> 5;

  0000c	8b 5d 14	 mov	 ebx, DWORD PTR _v_buf_len$[ebp]
  0000f	56		 push	 esi
  00010	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  00013	88 55 18	 mov	 BYTE PTR _c$[ebp], dl
  00016	8b cb		 mov	 ecx, ebx
  00018	c1 e9 05	 shr	 ecx, 5
  0001b	57		 push	 edi
  0001c	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]

; 1211 :         while (count != 0)

  0001f	85 c9		 test	 ecx, ecx
  00021	0f 84 35 01 00
	00		 je	 $LN3@AddOneLine
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 43   :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00029	80 c2 ff	 add	 dl, 255			; 000000ffH
  0002c	13 07		 adc	 eax, DWORD PTR [edi]
  0002e	89 06		 mov	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 44   :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00030	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00033	13 47 04	 adc	 eax, DWORD PTR [edi+4]
  00036	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 45   :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00039	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0003c	13 47 08	 adc	 eax, DWORD PTR [edi+8]
  0003f	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 46   :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  00042	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00045	13 47 0c	 adc	 eax, DWORD PTR [edi+12]
  00048	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 47   :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  0004b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0004e	13 47 10	 adc	 eax, DWORD PTR [edi+16]
  00051	89 46 10	 mov	 DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 48   :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  00054	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00057	13 47 14	 adc	 eax, DWORD PTR [edi+20]
  0005a	89 46 14	 mov	 DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 49   :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  0005d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00060	13 47 18	 adc	 eax, DWORD PTR [edi+24]
  00063	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 50   :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  00066	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00069	13 47 1c	 adc	 eax, DWORD PTR [edi+28]
  0006c	89 46 1c	 mov	 DWORD PTR [esi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 51   :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  0006f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00072	13 47 20	 adc	 eax, DWORD PTR [edi+32]
  00075	89 46 20	 mov	 DWORD PTR [esi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 52   :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  00078	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0007b	13 47 24	 adc	 eax, DWORD PTR [edi+36]
  0007e	89 46 24	 mov	 DWORD PTR [esi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 53   :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  00081	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00084	13 47 28	 adc	 eax, DWORD PTR [edi+40]
  00087	89 46 28	 mov	 DWORD PTR [esi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 54   :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  0008a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0008d	13 47 2c	 adc	 eax, DWORD PTR [edi+44]
  00090	89 46 2c	 mov	 DWORD PTR [esi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 55   :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  00093	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00096	13 47 30	 adc	 eax, DWORD PTR [edi+48]
  00099	89 46 30	 mov	 DWORD PTR [esi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 56   :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  0009c	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0009f	13 47 34	 adc	 eax, DWORD PTR [edi+52]
  000a2	89 46 34	 mov	 DWORD PTR [esi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 57   :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  000a5	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000a8	13 47 38	 adc	 eax, DWORD PTR [edi+56]
  000ab	89 46 38	 mov	 DWORD PTR [esi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 58   :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  000ae	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000b1	13 47 3c	 adc	 eax, DWORD PTR [edi+60]
  000b4	89 46 3c	 mov	 DWORD PTR [esi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 59   :     c = _ADD_UNIT(c, xp[16], yp[16], &zp[16]);

  000b7	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000ba	13 47 40	 adc	 eax, DWORD PTR [edi+64]
  000bd	89 46 40	 mov	 DWORD PTR [esi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 60   :     c = _ADD_UNIT(c, xp[17], yp[17], &zp[17]);

  000c0	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000c3	13 47 44	 adc	 eax, DWORD PTR [edi+68]
  000c6	89 46 44	 mov	 DWORD PTR [esi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 61   :     c = _ADD_UNIT(c, xp[18], yp[18], &zp[18]);

  000c9	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000cc	13 47 48	 adc	 eax, DWORD PTR [edi+72]
  000cf	89 46 48	 mov	 DWORD PTR [esi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 62   :     c = _ADD_UNIT(c, xp[19], yp[19], &zp[19]);

  000d2	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000d5	13 47 4c	 adc	 eax, DWORD PTR [edi+76]
  000d8	89 46 4c	 mov	 DWORD PTR [esi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 63   :     c = _ADD_UNIT(c, xp[20], yp[20], &zp[20]);

  000db	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000de	13 47 50	 adc	 eax, DWORD PTR [edi+80]
  000e1	89 46 50	 mov	 DWORD PTR [esi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 64   :     c = _ADD_UNIT(c, xp[21], yp[21], &zp[21]);

  000e4	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000e7	13 47 54	 adc	 eax, DWORD PTR [edi+84]
  000ea	89 46 54	 mov	 DWORD PTR [esi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 65   :     c = _ADD_UNIT(c, xp[22], yp[22], &zp[22]);

  000ed	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000f0	13 47 58	 adc	 eax, DWORD PTR [edi+88]
  000f3	89 46 58	 mov	 DWORD PTR [esi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 66   :     c = _ADD_UNIT(c, xp[23], yp[23], &zp[23]);

  000f6	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000f9	13 47 5c	 adc	 eax, DWORD PTR [edi+92]
  000fc	89 46 5c	 mov	 DWORD PTR [esi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 67   :     c = _ADD_UNIT(c, xp[24], yp[24], &zp[24]);

  000ff	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00102	13 47 60	 adc	 eax, DWORD PTR [edi+96]
  00105	89 46 60	 mov	 DWORD PTR [esi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 68   :     c = _ADD_UNIT(c, xp[25], yp[25], &zp[25]);

  00108	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0010b	13 47 64	 adc	 eax, DWORD PTR [edi+100]
  0010e	89 46 64	 mov	 DWORD PTR [esi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 69   :     c = _ADD_UNIT(c, xp[26], yp[26], &zp[26]);

  00111	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00114	13 47 68	 adc	 eax, DWORD PTR [edi+104]
  00117	89 46 68	 mov	 DWORD PTR [esi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 70   :     c = _ADD_UNIT(c, xp[27], yp[27], &zp[27]);

  0011a	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0011d	13 47 6c	 adc	 eax, DWORD PTR [edi+108]
  00120	89 46 6c	 mov	 DWORD PTR [esi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 71   :     c = _ADD_UNIT(c, xp[28], yp[28], &zp[28]);

  00123	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00126	13 47 70	 adc	 eax, DWORD PTR [edi+112]
  00129	89 46 70	 mov	 DWORD PTR [esi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 72   :     c = _ADD_UNIT(c, xp[29], yp[29], &zp[29]);

  0012c	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0012f	13 47 74	 adc	 eax, DWORD PTR [edi+116]
  00132	89 46 74	 mov	 DWORD PTR [esi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 73   :     c = _ADD_UNIT(c, xp[30], yp[30], &zp[30]);

  00135	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00138	13 47 78	 adc	 eax, DWORD PTR [edi+120]
  0013b	89 46 78	 mov	 DWORD PTR [esi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 74   :     c = _ADD_UNIT(c, xp[31], yp[31], &zp[31]);

  0013e	8b 46 7c	 mov	 eax, DWORD PTR [esi+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00141	13 47 7c	 adc	 eax, DWORD PTR [edi+124]
  00144	89 46 7c	 mov	 DWORD PTR [esi+124], eax
  00147	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1214 :             u_ptr += 32;

  0014a	83 ee 80	 sub	 esi, -128		; ffffff80H

; 1215 :             v_ptr += 32;

  0014d	83 ef 80	 sub	 edi, -128		; ffffff80H
  00150	88 55 18	 mov	 BYTE PTR _c$[ebp], dl

; 1216 :             --count;

  00153	83 e9 01	 sub	 ecx, 1
  00156	0f 85 cb fe ff
	ff		 jne	 $LL2@AddOneLine
$LN3@AddOneLine:

; 1217 :         }
; 1218 :         // この時点で未処理の桁は 32 ワード未満のはず
; 1219 : 
; 1220 :         // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 1221 :         if (v_count & 0x10)

  0015c	f6 c3 10	 test	 bl, 16			; 00000010H
  0015f	74 16		 je	 SHORT $LN4@AddOneLine

; 1222 :         {
; 1223 :             c = _ADD_16WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  00161	56		 push	 esi
  00162	57		 push	 edi
  00163	56		 push	 esi
  00164	ff 75 18	 push	 DWORD PTR _c$[ebp]
  00167	e8 00 00 00 00	 call	 __ADD_16WORDS_ADC
  0016c	83 c4 10	 add	 esp, 16			; 00000010H

; 1224 :             u_ptr += 16;

  0016f	83 c6 40	 add	 esi, 64			; 00000040H
  00172	8a d0		 mov	 dl, al

; 1225 :             v_ptr += 16;

  00174	83 c7 40	 add	 edi, 64			; 00000040H
$LN4@AddOneLine:

; 1226 :         }
; 1227 :         // この時点で未処理の桁は 16 ワード未満のはず
; 1228 : 
; 1229 :         // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 1230 :         if (v_count & 0x8)

  00177	f6 c3 08	 test	 bl, 8
  0017a	74 51		 je	 SHORT $LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1619 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0017c	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0017e	80 c2 ff	 add	 dl, 255			; 000000ffH
  00181	13 0f		 adc	 ecx, DWORD PTR [edi]
  00183	89 0e		 mov	 DWORD PTR [esi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1620 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00185	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00188	13 47 04	 adc	 eax, DWORD PTR [edi+4]
  0018b	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1621 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  0018e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00191	13 47 08	 adc	 eax, DWORD PTR [edi+8]
  00194	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1622 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  00197	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0019a	13 47 0c	 adc	 eax, DWORD PTR [edi+12]
  0019d	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1623 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  001a0	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001a3	13 47 10	 adc	 eax, DWORD PTR [edi+16]
  001a6	89 46 10	 mov	 DWORD PTR [esi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1624 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  001a9	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001ac	13 47 14	 adc	 eax, DWORD PTR [edi+20]
  001af	89 46 14	 mov	 DWORD PTR [esi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1625 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  001b2	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001b5	13 47 18	 adc	 eax, DWORD PTR [edi+24]
  001b8	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1626 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  001bb	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001be	13 47 1c	 adc	 eax, DWORD PTR [edi+28]
  001c1	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  001c4	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1233 :             u_ptr += 8;

  001c7	83 c6 20	 add	 esi, 32			; 00000020H

; 1234 :             v_ptr += 8;

  001ca	83 c7 20	 add	 edi, 32			; 00000020H
$LN5@AddOneLine:

; 1235 :         }
; 1236 :         // この時点で未処理の桁は 8 ワード未満のはず
; 1237 : 
; 1238 :         // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 1239 :         if (v_count & 0x4)

  001cd	f6 c3 04	 test	 bl, 4
  001d0	74 2d		 je	 SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1959 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  001d2	8b 06		 mov	 eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001d4	80 c2 ff	 add	 dl, 255			; 000000ffH
  001d7	13 07		 adc	 eax, DWORD PTR [edi]
  001d9	89 06		 mov	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1960 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  001db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001de	13 47 04	 adc	 eax, DWORD PTR [edi+4]
  001e1	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1961 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  001e4	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001e7	13 47 08	 adc	 eax, DWORD PTR [edi+8]
  001ea	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1962 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  001ed	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001f0	13 47 0c	 adc	 eax, DWORD PTR [edi+12]
  001f3	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  001f6	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1242 :             u_ptr += 4;

  001f9	83 c6 10	 add	 esi, 16			; 00000010H

; 1243 :             v_ptr += 4;

  001fc	83 c7 10	 add	 edi, 16			; 00000010H
$LN6@AddOneLine:

; 1244 :         }
; 1245 :         // この時点で未処理の桁は 4 ワード未満のはず
; 1246 : 
; 1247 :         // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 1248 :         if (v_count & 0x2)

  001ff	f6 c3 02	 test	 bl, 2
  00202	74 1b		 je	 SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2187 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00204	8b 06		 mov	 eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00206	80 c2 ff	 add	 dl, 255			; 000000ffH
  00209	13 07		 adc	 eax, DWORD PTR [edi]
  0020b	89 06		 mov	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2188 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  0020d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00210	13 47 04	 adc	 eax, DWORD PTR [edi+4]
  00213	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00216	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1251 :             u_ptr += 2;

  00219	83 c6 08	 add	 esi, 8

; 1252 :             v_ptr += 2;

  0021c	83 c7 08	 add	 edi, 8
$LN7@AddOneLine:

; 1253 :         }
; 1254 :         // この時点で未処理の桁は 2 ワード未満のはず
; 1255 : 
; 1256 :         // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 1257 :         if (v_count & 0x1)

  0021f	f6 c3 01	 test	 bl, 1
  00222	74 0f		 je	 SHORT $LN8@AddOneLine

; 1258 :         {
; 1259 :             c = _ADD_UNIT(c, *u_ptr, *v_ptr, u_ptr);

  00224	8b 06		 mov	 eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00226	80 c2 ff	 add	 dl, 255			; 000000ffH
  00229	13 07		 adc	 eax, DWORD PTR [edi]
  0022b	89 06		 mov	 DWORD PTR [esi], eax
  0022d	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1260 :             ++u_ptr;

  00230	83 c6 04	 add	 esi, 4
$LN8@AddOneLine:

; 1261 :             ++v_ptr;
; 1262 :         }
; 1263 : 
; 1264 :         // 残りの桁の繰り上がりを計算する。
; 1265 :         DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

  00233	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  00236	8d 0c 85 04 00
	00 00		 lea	 ecx, DWORD PTR [eax*4+4]
  0023d	2b ce		 sub	 ecx, esi
  0023f	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00242	c1 f9 02	 sar	 ecx, 2

; 1178 :             if (u_count <= 0)

  00245	85 c9		 test	 ecx, ecx
  00247	74 20		 je	 SHORT $LN131@AddOneLine
  00249	0f 1f 80 00 00
	00 00		 npad	 7
$LL113@AddOneLine:

; 1179 :             {
; 1180 :                 // u の最上位まで達してしまった場合
; 1181 :                 return;
; 1182 :             }
; 1183 :             else if (c)

  00250	84 d2		 test	 dl, dl
  00252	74 15		 je	 SHORT $LN131@AddOneLine

; 1184 :             {
; 1185 :                 // u の最上位に達しておらず、かつキャリーが立っている場合
; 1186 : 
; 1187 :                 // 繰り上がりを継続する
; 1188 :                 c = _ADD_UNIT(c, *u_ptr, 0, u_ptr);

  00254	8b 06		 mov	 eax, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00256	80 c2 ff	 add	 dl, 255			; 000000ffH
  00259	83 d0 00	 adc	 eax, 0
  0025c	89 06		 mov	 DWORD PTR [esi], eax
  0025e	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1189 :                 ++u_ptr;

  00261	83 c6 04	 add	 esi, 4

; 1190 :                 --u_count;

  00264	83 e9 01	 sub	 ecx, 1
  00267	75 e7		 jne	 SHORT $LL113@AddOneLine
$LN131@AddOneLine:
  00269	5f		 pop	 edi

; 1266 :     }

  0026a	5e		 pop	 esi
  0026b	5b		 pop	 ebx
  0026c	5d		 pop	 ebp
  0026d	c3		 ret	 0
?AddOneLine@Internal@Core@Math@Palmtree@@YAXPAII0II@Z ENDP ; Palmtree::Math::Core::Internal::AddOneLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
_u_ptr$ = 12						; size = 4
_u_count$ = 16						; size = 4
?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII@Z PROC	; Palmtree::Math::Core::Internal::DoCarry, COMDAT

; 1174 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1175 :         // 繰り上がりを続く限り行う
; 1176 :         for (;;)
; 1177 :         {
; 1178 :             if (u_count <= 0)

  00004	8b 75 10	 mov	 esi, DWORD PTR _u_count$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 1e		 je	 SHORT $LN16@DoCarry
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0000e	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
$LL2@DoCarry:

; 1179 :             {
; 1180 :                 // u の最上位まで達してしまった場合
; 1181 :                 return;
; 1182 :             }
; 1183 :             else if (c)

  00011	84 c0		 test	 al, al
  00013	74 14		 je	 SHORT $LN16@DoCarry

; 1184 :             {
; 1185 :                 // u の最上位に達しておらず、かつキャリーが立っている場合
; 1186 : 
; 1187 :                 // 繰り上がりを継続する
; 1188 :                 c = _ADD_UNIT(c, *u_ptr, 0, u_ptr);

  00015	8b 0a		 mov	 ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00017	04 ff		 add	 al, 255			; 000000ffH
  00019	83 d1 00	 adc	 ecx, 0
  0001c	89 0a		 mov	 DWORD PTR [edx], ecx
  0001e	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1189 :                 ++u_ptr;

  00021	83 c2 04	 add	 edx, 4

; 1190 :                 --u_count;

  00024	83 ee 01	 sub	 esi, 1
  00027	75 e8		 jne	 SHORT $LL2@DoCarry
$LN16@DoCarry:
  00029	5e		 pop	 esi

; 1191 :             }
; 1192 :             else
; 1193 :             {
; 1194 :                 // u の最上位に達しておらず、かつキャリーが立っていない場合
; 1195 : 
; 1196 :                 // 繰り上がりを中断し、復帰する。
; 1197 :                 return;
; 1198 :             }
; 1199 :         }
; 1200 :     }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII@Z ENDP	; Palmtree::Math::Core::Internal::DoCarry
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPAII0III@Z
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_k$1$ = 24						; size = 4
_t_lo$1 = 24						; size = 4
_t_lo$2 = 24						; size = 4
_t_lo$3 = 24						; size = 4
_t_lo$4 = 24						; size = 4
_t_lo$5 = 24						; size = 4
_t_lo$6 = 24						; size = 4
_t_lo$7 = 24						; size = 4
_t_lo$8 = 24						; size = 4
_t_lo$9 = 24						; size = 4
_t_lo$10 = 24						; size = 4
_t_lo$11 = 24						; size = 4
_t_lo$12 = 24						; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPAII0III@Z PROC ; Palmtree::Math::Core::Internal::SubtructOneLineX, COMDAT

; 1023 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1024 :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  00006	8b 45 18	 mov	 eax, DWORD PTR _q_index$[ebp]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi

; 1025 :         __UNIT_TYPE* v_ptr = &v_buf[0];
; 1026 :         __UNIT_TYPE v_count = v_buf_len;
; 1027 :         __UNIT_TYPE k = 0;
; 1028 :         char c = 0;

  0000e	32 db		 xor	 bl, bl
  00010	c7 45 18 00 00
	00 00		 mov	 DWORD PTR _k$1$[ebp], 0
  00017	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]

; 1029 : 
; 1030 :         __UNIT_TYPE count = v_count >> 5;

  0001a	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
  0001d	8b d0		 mov	 edx, eax
  0001f	c1 ea 05	 shr	 edx, 5
  00022	57		 push	 edi

; 1031 :         while (count != 0)

  00023	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]
  00026	85 d2		 test	 edx, edx
  00028	89 55 fc	 mov	 DWORD PTR _count$1$[ebp], edx
  0002b	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  0002e	0f 84 4f 05 00
	00		 je	 $LN3@SubtructOn
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00034	8b 07		 mov	 eax, DWORD PTR [edi]
  00036	f7 e2		 mul	 edx
  00038	8b f0		 mov	 esi, eax
  0003a	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0003c	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
  0003f	b8 00 00 00 00	 mov	 eax, 0
  00044	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0004b	80 c3 ff	 add	 bl, 255			; 000000ffH
  0004e	1b c6		 sbb	 eax, esi
  00050	89 01		 mov	 DWORD PTR [ecx], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00052	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00055	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00058	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005b	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0005e	8b f0		 mov	 esi, eax
  00060	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  00062	89 75 18	 mov	 DWORD PTR _t_lo$12[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00065	ba 00 00 00 00	 mov	 edx, 0
  0006a	03 f7		 add	 esi, edi
  0006c	66 0f 38 f6 c2	 adcx	 eax, edx
  00071	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00074	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00077	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0007a	1b c6		 sbb	 eax, esi
  0007c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0007f	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00082	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00085	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00088	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0008b	8b f0		 mov	 esi, eax
  0008d	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0008f	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00092	b8 00 00 00 00	 mov	 eax, 0
  00097	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0009c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0009f	80 c3 ff	 add	 bl, 255			; 000000ffH
  000a2	1b c6		 sbb	 eax, esi
  000a4	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000a7	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000aa	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000ad	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  000b0	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  000b3	8b f0		 mov	 esi, eax
  000b5	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  000b7	89 75 18	 mov	 DWORD PTR _t_lo$11[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000ba	ba 00 00 00 00	 mov	 edx, 0
  000bf	03 f7		 add	 esi, edi
  000c1	66 0f 38 f6 c2	 adcx	 eax, edx
  000c6	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000c9	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  000cc	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000cf	1b c6		 sbb	 eax, esi
  000d1	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000d4	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000d7	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000da	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000dd	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  000e0	8b f0		 mov	 esi, eax
  000e2	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000e4	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  000e7	b8 00 00 00 00	 mov	 eax, 0
  000ec	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  000f1	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000f4	80 c3 ff	 add	 bl, 255			; 000000ffH
  000f7	1b c6		 sbb	 eax, esi
  000f9	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000fc	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000ff	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00102	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00105	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00108	8b f0		 mov	 esi, eax
  0010a	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  0010c	89 75 18	 mov	 DWORD PTR _t_lo$10[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0010f	ba 00 00 00 00	 mov	 edx, 0
  00114	03 f7		 add	 esi, edi
  00116	66 0f 38 f6 c2	 adcx	 eax, edx
  0011b	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0011e	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00121	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00124	1b c6		 sbb	 eax, esi
  00126	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00129	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0012c	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]
  0012f	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00132	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00135	8b f0		 mov	 esi, eax
  00137	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00139	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  0013c	ba 00 00 00 00	 mov	 edx, 0
  00141	66 0f 38 f6 c2	 adcx	 eax, edx
  00146	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00149	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0014c	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0014f	1b c6		 sbb	 eax, esi
  00151	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00154	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00157	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0015a	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0015d	8b f0		 mov	 esi, eax
  0015f	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00161	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00164	b8 00 00 00 00	 mov	 eax, 0
  00169	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0016e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00171	80 c3 ff	 add	 bl, 255			; 000000ffH
  00174	1b c6		 sbb	 eax, esi
  00176	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00179	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0017c	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0017f	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00182	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00185	8b f0		 mov	 esi, eax
  00187	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00189	03 f7		 add	 esi, edi
  0018b	ba 00 00 00 00	 mov	 edx, 0
  00190	66 0f 38 f6 c2	 adcx	 eax, edx
  00195	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00198	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0019b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0019e	1b c6		 sbb	 eax, esi
  001a0	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001a3	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001a6	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001a9	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  001ac	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  001af	8b f0		 mov	 esi, eax
  001b1	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001b3	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  001b6	b8 00 00 00 00	 mov	 eax, 0
  001bb	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  001c0	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001c3	80 c3 ff	 add	 bl, 255			; 000000ffH
  001c6	1b c6		 sbb	 eax, esi
  001c8	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001cb	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001ce	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001d1	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  001d4	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  001d7	8b f0		 mov	 esi, eax
  001d9	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001db	03 f7		 add	 esi, edi
  001dd	ba 00 00 00 00	 mov	 edx, 0
  001e2	66 0f 38 f6 c2	 adcx	 eax, edx
  001e7	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001ea	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  001ed	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001f0	1b c6		 sbb	 eax, esi
  001f2	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001f5	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001f8	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001fb	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  001fe	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00201	8b f0		 mov	 esi, eax
  00203	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00205	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00208	b8 00 00 00 00	 mov	 eax, 0
  0020d	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00212	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00215	80 c3 ff	 add	 bl, 255			; 000000ffH
  00218	1b c6		 sbb	 eax, esi
  0021a	0f 92 c3	 setb	 bl
  0021d	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00220	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  00223	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00226	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00229	8b f0		 mov	 esi, eax
  0022b	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0022d	03 f7		 add	 esi, edi
  0022f	ba 00 00 00 00	 mov	 edx, 0
  00234	66 0f 38 f6 c2	 adcx	 eax, edx
  00239	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0023c	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0023f	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00242	1b c6		 sbb	 eax, esi
  00244	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00247	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0024a	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0024d	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  00250	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00253	8b f0		 mov	 esi, eax
  00255	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00257	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  0025a	b8 00 00 00 00	 mov	 eax, 0
  0025f	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00264	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00267	80 c3 ff	 add	 bl, 255			; 000000ffH
  0026a	1b c6		 sbb	 eax, esi
  0026c	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0026f	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00272	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00275	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00278	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0027b	8b f0		 mov	 esi, eax
  0027d	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0027f	03 f7		 add	 esi, edi
  00281	ba 00 00 00 00	 mov	 edx, 0
  00286	66 0f 38 f6 c2	 adcx	 eax, edx
  0028b	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0028e	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00291	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00294	1b c6		 sbb	 eax, esi
  00296	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00299	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0029c	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0029f	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  002a2	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  002a5	8b f0		 mov	 esi, eax
  002a7	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002a9	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  002ac	b8 00 00 00 00	 mov	 eax, 0
  002b1	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  002b6	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002b9	80 c3 ff	 add	 bl, 255			; 000000ffH
  002bc	1b c6		 sbb	 eax, esi
  002be	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002c1	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002c4	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002c7	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  002ca	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  002cd	8b f0		 mov	 esi, eax
  002cf	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002d1	03 f7		 add	 esi, edi
  002d3	ba 00 00 00 00	 mov	 edx, 0
  002d8	66 0f 38 f6 c2	 adcx	 eax, edx
  002dd	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002e0	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  002e3	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002e6	1b c6		 sbb	 eax, esi
  002e8	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002eb	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002ee	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002f1	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  002f4	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  002f7	8b f0		 mov	 esi, eax
  002f9	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002fb	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  002fe	b8 00 00 00 00	 mov	 eax, 0
  00303	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00308	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0030b	80 c3 ff	 add	 bl, 255			; 000000ffH
  0030e	1b c6		 sbb	 eax, esi
  00310	0f 92 c3	 setb	 bl
  00313	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00316	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  00319	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  0031c	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0031f	8b f0		 mov	 esi, eax
  00321	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00323	03 f7		 add	 esi, edi
  00325	ba 00 00 00 00	 mov	 edx, 0
  0032a	66 0f 38 f6 c2	 adcx	 eax, edx
  0032f	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00332	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00335	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00338	1b c6		 sbb	 eax, esi
  0033a	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0033d	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00340	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00343	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00346	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00349	8b f0		 mov	 esi, eax
  0034b	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0034d	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00350	b8 00 00 00 00	 mov	 eax, 0
  00355	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0035a	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0035d	80 c3 ff	 add	 bl, 255			; 000000ffH
  00360	1b c6		 sbb	 eax, esi
  00362	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00365	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00368	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0036b	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  0036e	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00371	8b f0		 mov	 esi, eax
  00373	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00375	03 f7		 add	 esi, edi
  00377	ba 00 00 00 00	 mov	 edx, 0
  0037c	66 0f 38 f6 c2	 adcx	 eax, edx
  00381	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00384	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00387	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0038a	1b c6		 sbb	 eax, esi
  0038c	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0038f	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00392	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00395	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00398	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0039b	8b f0		 mov	 esi, eax
  0039d	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0039f	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  003a2	b8 00 00 00 00	 mov	 eax, 0
  003a7	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  003ac	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003af	80 c3 ff	 add	 bl, 255			; 000000ffH
  003b2	1b c6		 sbb	 eax, esi
  003b4	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003b7	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003ba	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003bd	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  003c0	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  003c3	8b f0		 mov	 esi, eax
  003c5	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003c7	03 f7		 add	 esi, edi
  003c9	ba 00 00 00 00	 mov	 edx, 0
  003ce	66 0f 38 f6 c2	 adcx	 eax, edx
  003d3	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003d6	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  003d9	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003dc	1b c6		 sbb	 eax, esi
  003de	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003e1	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003e4	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003e7	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  003ea	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  003ed	8b f0		 mov	 esi, eax
  003ef	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003f1	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  003f4	b8 00 00 00 00	 mov	 eax, 0
  003f9	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  003fe	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00401	80 c3 ff	 add	 bl, 255			; 000000ffH
  00404	1b c6		 sbb	 eax, esi
  00406	0f 92 c3	 setb	 bl
  00409	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0040c	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  0040f	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  00412	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00415	8b f0		 mov	 esi, eax
  00417	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00419	03 f7		 add	 esi, edi
  0041b	ba 00 00 00 00	 mov	 edx, 0
  00420	66 0f 38 f6 c2	 adcx	 eax, edx
  00425	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00428	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0042b	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0042e	1b c6		 sbb	 eax, esi
  00430	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00433	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00436	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00439	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
  0043c	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0043f	8b f0		 mov	 esi, eax
  00441	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00443	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00446	b8 00 00 00 00	 mov	 eax, 0
  0044b	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00450	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00453	80 c3 ff	 add	 bl, 255			; 000000ffH
  00456	1b c6		 sbb	 eax, esi
  00458	89 41 64	 mov	 DWORD PTR [ecx+100], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0045b	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0045e	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00461	8b 40 68	 mov	 eax, DWORD PTR [eax+104]
  00464	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00467	8b f0		 mov	 esi, eax
  00469	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0046b	03 f7		 add	 esi, edi
  0046d	ba 00 00 00 00	 mov	 edx, 0
  00472	66 0f 38 f6 c2	 adcx	 eax, edx
  00477	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0047a	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0047d	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00480	1b c6		 sbb	 eax, esi
  00482	89 41 68	 mov	 DWORD PTR [ecx+104], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00485	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00488	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0048b	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  0048e	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00491	8b f0		 mov	 esi, eax
  00493	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00495	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00498	b8 00 00 00 00	 mov	 eax, 0
  0049d	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  004a2	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004a5	80 c3 ff	 add	 bl, 255			; 000000ffH
  004a8	1b c6		 sbb	 eax, esi
  004aa	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004ad	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004b0	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004b3	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  004b6	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  004b9	8b f0		 mov	 esi, eax
  004bb	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004bd	03 f7		 add	 esi, edi
  004bf	ba 00 00 00 00	 mov	 edx, 0
  004c4	66 0f 38 f6 c2	 adcx	 eax, edx
  004c9	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004cc	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  004cf	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004d2	1b c6		 sbb	 eax, esi
  004d4	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004d7	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004da	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004dd	8b 40 74	 mov	 eax, DWORD PTR [eax+116]
  004e0	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  004e3	8b f0		 mov	 esi, eax
  004e5	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004e7	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  004ea	b8 00 00 00 00	 mov	 eax, 0
  004ef	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  004f4	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004f7	80 c3 ff	 add	 bl, 255			; 000000ffH
  004fa	1b c6		 sbb	 eax, esi
  004fc	0f 92 c3	 setb	 bl
  004ff	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00502	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  00505	8b 40 78	 mov	 eax, DWORD PTR [eax+120]
  00508	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0050b	8b f0		 mov	 esi, eax
  0050d	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0050f	03 f7		 add	 esi, edi
  00511	ba 00 00 00 00	 mov	 edx, 0

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00516	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00519	66 0f 38 f6 c2	 adcx	 eax, edx
  0051e	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00521	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00524	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00527	1b c6		 sbb	 eax, esi
  00529	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0052c	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0052f	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00532	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00535	8b f0		 mov	 esi, eax
  00537	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00539	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  0053c	ba 00 00 00 00	 mov	 edx, 0
  00541	66 0f 38 f6 c2	 adcx	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1067 :             --count;

  00546	8b 55 fc	 mov	 edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00549	80 c3 ff	 add	 bl, 255			; 000000ffH

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0054c	89 45 18	 mov	 DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0054f	8b 41 7c	 mov	 eax, DWORD PTR [ecx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00552	1b c6		 sbb	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00554	be 04 00 00 00	 mov	 esi, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00559	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0055c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00561	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1066 :             v_ptr += 32;

  00564	83 ef 80	 sub	 edi, -128		; ffffff80H

; 1067 :             --count;

  00567	4a		 dec	 edx
  00568	89 7d 10	 mov	 DWORD PTR _v_buf$[ebp], edi
  0056b	83 e9 80	 sub	 ecx, -128		; ffffff80H
  0056e	89 55 fc	 mov	 DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00571	f0 0f c1 06	 lock	  xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1031 :         while (count != 0)

  00575	85 d2		 test	 edx, edx
  00577	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  0057a	0f 85 b4 fa ff
	ff		 jne	 $LL2@SubtructOn
  00580	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
$LN3@SubtructOn:

; 1068 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1069 :             if (sizeof(k) == sizeof(_UINT64_T))
; 1070 :                 AddToMULTI64Counter(32);
; 1071 :             else
; 1072 :                 AddToMULTI32Counter(32);
; 1073 : #endif
; 1074 :         }
; 1075 : 
; 1076 :         if (v_count & 0x10)

  00583	a8 10		 test	 al, 16			; 00000010H
  00585	0f 84 ab 02 00
	00		 je	 $LN8@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0058b	8b 07		 mov	 eax, DWORD PTR [edi]
  0058d	f7 e2		 mul	 edx
  0058f	8b f0		 mov	 esi, eax
  00591	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00593	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
  00596	b8 00 00 00 00	 mov	 eax, 0
  0059b	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  005a0	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005a2	80 c3 ff	 add	 bl, 255			; 000000ffH
  005a5	1b c6		 sbb	 eax, esi
  005a7	89 01		 mov	 DWORD PTR [ecx], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005a9	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005ac	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005af	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  005b2	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  005b5	8b f0		 mov	 esi, eax
  005b7	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  005b9	89 75 18	 mov	 DWORD PTR _t_lo$9[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005bc	ba 00 00 00 00	 mov	 edx, 0
  005c1	03 f7		 add	 esi, edi
  005c3	66 0f 38 f6 c2	 adcx	 eax, edx
  005c8	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005cb	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  005ce	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005d1	1b c6		 sbb	 eax, esi
  005d3	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005d6	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005d9	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005dc	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  005df	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  005e2	8b f0		 mov	 esi, eax
  005e4	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005e6	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  005e9	b8 00 00 00 00	 mov	 eax, 0
  005ee	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  005f3	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005f6	80 c3 ff	 add	 bl, 255			; 000000ffH
  005f9	1b c6		 sbb	 eax, esi
  005fb	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005fe	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00601	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00604	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00607	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0060a	8b f0		 mov	 esi, eax
  0060c	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  0060e	89 75 18	 mov	 DWORD PTR _t_lo$8[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00611	ba 00 00 00 00	 mov	 edx, 0
  00616	03 f7		 add	 esi, edi
  00618	66 0f 38 f6 c2	 adcx	 eax, edx
  0061d	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00620	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00623	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00626	1b c6		 sbb	 eax, esi
  00628	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0062b	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0062e	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00631	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00634	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00637	8b f0		 mov	 esi, eax
  00639	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0063b	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  0063e	b8 00 00 00 00	 mov	 eax, 0
  00643	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00648	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0064b	80 c3 ff	 add	 bl, 255			; 000000ffH
  0064e	1b c6		 sbb	 eax, esi
  00650	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00653	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00656	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00659	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0065c	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0065f	8b f0		 mov	 esi, eax
  00661	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  00663	89 75 18	 mov	 DWORD PTR _t_lo$7[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00666	ba 00 00 00 00	 mov	 edx, 0
  0066b	03 f7		 add	 esi, edi
  0066d	66 0f 38 f6 c2	 adcx	 eax, edx
  00672	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00675	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00678	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0067b	1b c6		 sbb	 eax, esi
  0067d	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00680	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00683	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]
  00686	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00689	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0068c	8b f0		 mov	 esi, eax
  0068e	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00690	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00693	ba 00 00 00 00	 mov	 edx, 0
  00698	66 0f 38 f6 c2	 adcx	 eax, edx
  0069d	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006a0	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  006a3	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006a6	1b c6		 sbb	 eax, esi
  006a8	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006ab	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006ae	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006b1	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  006b4	8b f0		 mov	 esi, eax
  006b6	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006b8	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  006bb	b8 00 00 00 00	 mov	 eax, 0
  006c0	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  006c5	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006c8	80 c3 ff	 add	 bl, 255			; 000000ffH
  006cb	1b c6		 sbb	 eax, esi
  006cd	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006d0	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006d3	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006d6	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  006d9	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  006dc	8b f0		 mov	 esi, eax
  006de	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006e0	03 f7		 add	 esi, edi
  006e2	ba 00 00 00 00	 mov	 edx, 0
  006e7	66 0f 38 f6 c2	 adcx	 eax, edx
  006ec	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006ef	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  006f2	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006f5	1b c6		 sbb	 eax, esi
  006f7	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006fa	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006fd	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00700	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00703	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00706	8b f0		 mov	 esi, eax
  00708	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0070a	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  0070d	b8 00 00 00 00	 mov	 eax, 0
  00712	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00717	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0071a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0071d	1b c6		 sbb	 eax, esi
  0071f	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00722	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00725	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00728	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0072b	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0072e	8b f0		 mov	 esi, eax
  00730	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00732	03 f7		 add	 esi, edi
  00734	ba 00 00 00 00	 mov	 edx, 0
  00739	66 0f 38 f6 c2	 adcx	 eax, edx
  0073e	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00741	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00744	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00747	1b c6		 sbb	 eax, esi
  00749	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0074c	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0074f	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00752	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00755	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00758	8b f0		 mov	 esi, eax
  0075a	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0075c	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  0075f	b8 00 00 00 00	 mov	 eax, 0
  00764	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00769	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0076c	80 c3 ff	 add	 bl, 255			; 000000ffH
  0076f	1b c6		 sbb	 eax, esi
  00771	0f 92 c3	 setb	 bl
  00774	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00777	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  0077a	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0077d	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00780	8b f0		 mov	 esi, eax
  00782	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00784	03 f7		 add	 esi, edi
  00786	ba 00 00 00 00	 mov	 edx, 0
  0078b	66 0f 38 f6 c2	 adcx	 eax, edx
  00790	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00793	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00796	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00799	1b c6		 sbb	 eax, esi
  0079b	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0079e	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007a1	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007a4	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  007a7	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  007aa	8b f0		 mov	 esi, eax
  007ac	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  007ae	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  007b1	b8 00 00 00 00	 mov	 eax, 0
  007b6	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  007bb	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007be	80 c3 ff	 add	 bl, 255			; 000000ffH
  007c1	1b c6		 sbb	 eax, esi
  007c3	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007c6	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007c9	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007cc	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  007cf	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  007d2	8b f0		 mov	 esi, eax
  007d4	8b c2		 mov	 eax, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  007d6	03 f7		 add	 esi, edi
  007d8	ba 00 00 00 00	 mov	 edx, 0

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007dd	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  007e0	66 0f 38 f6 c2	 adcx	 eax, edx
  007e5	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007e8	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  007eb	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007ee	1b c6		 sbb	 eax, esi
  007f0	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007f3	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007f6	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007f9	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  007fc	8b f0		 mov	 esi, eax

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  007fe	b8 00 00 00 00	 mov	 eax, 0
  00803	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00806	66 0f 38 f6 d0	 adcx	 edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0080b	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0080e	80 c3 ff	 add	 bl, 255			; 000000ffH

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00811	89 55 18	 mov	 DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00814	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00819	1b c6		 sbb	 eax, esi
  0081b	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0081e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00823	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1095 :             v_ptr += 16;

  00826	83 c7 40	 add	 edi, 64			; 00000040H
  00829	83 c1 40	 add	 ecx, 64			; 00000040H
  0082c	89 7d 10	 mov	 DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0082f	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  00833	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
$LN8@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1104 :         if (v_count & 0x8)

  00836	a8 08		 test	 al, 8
  00838	0f 84 68 01 00
	00		 je	 $LN824@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0083e	8b 07		 mov	 eax, DWORD PTR [edi]
  00840	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00843	8b f0		 mov	 esi, eax
  00845	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00847	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
  0084a	b8 00 00 00 00	 mov	 eax, 0
  0084f	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00854	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00856	80 c3 ff	 add	 bl, 255			; 000000ffH
  00859	1b c6		 sbb	 eax, esi
  0085b	89 01		 mov	 DWORD PTR [ecx], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0085d	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00860	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00863	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00866	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00869	8b f0		 mov	 esi, eax
  0086b	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  0086d	89 75 18	 mov	 DWORD PTR _t_lo$6[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00870	ba 00 00 00 00	 mov	 edx, 0
  00875	03 f7		 add	 esi, edi
  00877	66 0f 38 f6 c2	 adcx	 eax, edx
  0087c	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0087f	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00882	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00885	1b c6		 sbb	 eax, esi
  00887	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0088a	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0088d	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00890	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00893	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00896	8b f0		 mov	 esi, eax
  00898	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0089a	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  0089d	b8 00 00 00 00	 mov	 eax, 0
  008a2	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  008a7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008aa	80 c3 ff	 add	 bl, 255			; 000000ffH
  008ad	1b c6		 sbb	 eax, esi
  008af	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  008b2	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008b5	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  008b8	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  008bb	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  008be	8b f0		 mov	 esi, eax
  008c0	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  008c2	89 75 18	 mov	 DWORD PTR _t_lo$5[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  008c5	ba 00 00 00 00	 mov	 edx, 0
  008ca	03 f7		 add	 esi, edi
  008cc	66 0f 38 f6 c2	 adcx	 eax, edx
  008d1	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008d4	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  008d7	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008da	1b c6		 sbb	 eax, esi
  008dc	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  008df	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008e2	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  008e5	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  008e8	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  008eb	8b f0		 mov	 esi, eax
  008ed	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  008ef	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  008f2	b8 00 00 00 00	 mov	 eax, 0
  008f7	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  008fc	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008ff	80 c3 ff	 add	 bl, 255			; 000000ffH
  00902	1b c6		 sbb	 eax, esi
  00904	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00907	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0090a	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0090d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00910	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00913	8b f0		 mov	 esi, eax
  00915	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  00917	89 75 18	 mov	 DWORD PTR _t_lo$4[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0091a	ba 00 00 00 00	 mov	 edx, 0
  0091f	03 f7		 add	 esi, edi
  00921	66 0f 38 f6 c2	 adcx	 eax, edx
  00926	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00929	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0092c	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0092f	1b c6		 sbb	 eax, esi
  00931	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00934	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00937	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  0093a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0093d	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00940	8b f0		 mov	 esi, eax
  00942	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00944	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00947	b8 00 00 00 00	 mov	 eax, 0
  0094c	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00951	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00954	80 c3 ff	 add	 bl, 255			; 000000ffH
  00957	1b c6		 sbb	 eax, esi
  00959	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0095c	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0095f	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00962	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00965	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00968	8b f0		 mov	 esi, eax

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0096a	b8 00 00 00 00	 mov	 eax, 0
  0096f	03 f7		 add	 esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1115 :             v_ptr += 8;

  00971	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00974	66 0f 38 f6 d0	 adcx	 edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00979	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0097c	80 c3 ff	 add	 bl, 255			; 000000ffH

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0097f	89 55 18	 mov	 DWORD PTR _k$1$[ebp], edx

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00982	1b c6		 sbb	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00984	be 04 00 00 00	 mov	 esi, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00989	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0098c	b8 08 00 00 00	 mov	 eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00991	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1115 :             v_ptr += 8;

  00994	83 c7 20	 add	 edi, 32			; 00000020H
  00997	83 c1 20	 add	 ecx, 32			; 00000020H
  0099a	89 7d 10	 mov	 DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0099d	f0 0f c1 06	 lock	  xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1104 :         if (v_count & 0x8)

  009a1	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
  009a4	eb 03		 jmp	 SHORT $LN11@SubtructOn
$LN824@SubtructOn:
  009a6	8b 55 18	 mov	 edx, DWORD PTR _k$1$[ebp]
$LN11@SubtructOn:

; 1116 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1117 :             if (sizeof(k) == sizeof(_UINT64_T))
; 1118 :                 AddToMULTI64Counter(8);
; 1119 :             else
; 1120 :                 AddToMULTI32Counter(8);
; 1121 : #endif
; 1122 :         }
; 1123 : 
; 1124 :         if (v_count & 0x4)

  009a9	a8 04		 test	 al, 4
  009ab	0f 84 bf 00 00
	00		 je	 $LN14@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  009b1	8b 07		 mov	 eax, DWORD PTR [edi]
  009b3	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  009b6	8b f0		 mov	 esi, eax
  009b8	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  009ba	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
  009bd	b8 00 00 00 00	 mov	 eax, 0
  009c2	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  009c7	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  009c9	80 c3 ff	 add	 bl, 255			; 000000ffH
  009cc	1b c6		 sbb	 eax, esi
  009ce	89 01		 mov	 DWORD PTR [ecx], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  009d0	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  009d3	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  009d6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  009d9	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  009dc	8b f0		 mov	 esi, eax
  009de	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  009e0	89 75 18	 mov	 DWORD PTR _t_lo$3[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  009e3	ba 00 00 00 00	 mov	 edx, 0
  009e8	03 f7		 add	 esi, edi
  009ea	66 0f 38 f6 c2	 adcx	 eax, edx
  009ef	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  009f2	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  009f5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  009f8	1b c6		 sbb	 eax, esi
  009fa	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  009fd	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00a00	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00a03	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00a06	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00a09	8b f0		 mov	 esi, eax
  00a0b	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00a0d	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00a10	b8 00 00 00 00	 mov	 eax, 0
  00a15	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00a1a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00a1d	80 c3 ff	 add	 bl, 255			; 000000ffH
  00a20	1b c6		 sbb	 eax, esi
  00a22	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00a25	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00a28	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00a2b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00a2e	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00a31	8b f0		 mov	 esi, eax

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00a33	b8 00 00 00 00	 mov	 eax, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  00a38	89 75 18	 mov	 DWORD PTR _t_lo$2[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00a3b	03 f7		 add	 esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1131 :             v_ptr += 4;

  00a3d	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00a40	66 0f 38 f6 d0	 adcx	 edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00a45	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00a48	80 c3 ff	 add	 bl, 255			; 000000ffH

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00a4b	89 55 18	 mov	 DWORD PTR _k$1$[ebp], edx

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00a4e	1b c6		 sbb	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00a50	be 04 00 00 00	 mov	 esi, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00a55	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00a58	b8 04 00 00 00	 mov	 eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00a5d	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1131 :             v_ptr += 4;

  00a60	83 c7 10	 add	 edi, 16			; 00000010H
  00a63	83 c1 10	 add	 ecx, 16			; 00000010H
  00a66	89 7d 10	 mov	 DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00a69	f0 0f c1 06	 lock	  xadd	 DWORD PTR [esi], eax
  00a6d	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
$LN14@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1140 :         if (v_count & 0x2)

  00a70	a8 02		 test	 al, 2
  00a72	74 6c		 je	 SHORT $LN17@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00a74	8b 07		 mov	 eax, DWORD PTR [edi]
  00a76	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00a79	8b f0		 mov	 esi, eax
  00a7b	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00a7d	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
  00a80	b8 00 00 00 00	 mov	 eax, 0
  00a85	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00a8a	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00a8c	80 c3 ff	 add	 bl, 255			; 000000ffH
  00a8f	1b c6		 sbb	 eax, esi
  00a91	89 01		 mov	 DWORD PTR [ecx], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00a93	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00a96	0f 92 c3	 setb	 bl

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00a99	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00a9c	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00a9f	8b f0		 mov	 esi, eax
  00aa1	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  00aa3	89 75 18	 mov	 DWORD PTR _t_lo$1[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00aa6	ba 00 00 00 00	 mov	 edx, 0
  00aab	03 f7		 add	 esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1145 :             v_ptr += 2;

  00aad	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00ab0	66 0f 38 f6 c2	 adcx	 eax, edx
  00ab5	89 45 18	 mov	 DWORD PTR _k$1$[ebp], eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00ab8	80 c3 ff	 add	 bl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00abb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00abe	ba 02 00 00 00	 mov	 edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00ac3	1b c6		 sbb	 eax, esi
  00ac5	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00ac8	b8 04 00 00 00	 mov	 eax, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00acd	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1144 :             u_ptr += 2;

  00ad0	83 c1 08	 add	 ecx, 8

; 1145 :             v_ptr += 2;

  00ad3	83 c7 08	 add	 edi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00ad6	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  00ada	8b 55 18	 mov	 edx, DWORD PTR _k$1$[ebp]
  00add	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
$LN17@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1154 :         if (v_count & 0x1)

  00ae0	a8 01		 test	 al, 1
  00ae2	74 2a		 je	 SHORT $LN20@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00ae4	8b 07		 mov	 eax, DWORD PTR [edi]
  00ae6	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00ae9	8b f0		 mov	 esi, eax

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00aeb	b8 00 00 00 00	 mov	 eax, 0
  00af0	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
  00af3	66 0f 38 f6 d0	 adcx	 edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00af8	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00afa	80 c3 ff	 add	 bl, 255			; 000000ffH
  00afd	1b c6		 sbb	 eax, esi
  00aff	89 01		 mov	 DWORD PTR [ecx], eax
  00b01	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1157 :             u_ptr += 1;

  00b04	83 c1 04	 add	 ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  00b07	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
$LN20@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1167 :         c = _SUBTRUCT_UNIT(c, *u_ptr, k, u_ptr);

  00b0e	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00b10	80 c3 ff	 add	 bl, 255			; 000000ffH
  00b13	1b c2		 sbb	 eax, edx
  00b15	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1170 :         return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

  00b17	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00b1a	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1168 :         u_ptr += 1;

  00b1d	83 c1 04	 add	 ecx, 4

; 1170 :         return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

  00b20	8d 34 85 04 00
	00 00		 lea	 esi, DWORD PTR [eax*4+4]
  00b27	2b f1		 sub	 esi, ecx
  00b29	03 75 08	 add	 esi, DWORD PTR _u_buf$[ebp]
  00b2c	c1 fe 02	 sar	 esi, 2

; 814  :             if (u_count <= 0)

  00b2f	85 f6		 test	 esi, esi
  00b31	74 19		 je	 SHORT $LN818@SubtructOn
$LL805@SubtructOn:

; 819  :                 {
; 820  :                     // かつそれでも桁借りを行う必要がある場合
; 821  : 
; 822  :                     // 減算結果が負になってしまったので呼び出し元に通知する。
; 823  :                     return (TRUE);
; 824  :                 }
; 825  : 
; 826  :                 // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 827  : 
; 828  :                 return (FALSE);
; 829  :             }
; 830  :             else if (c)

  00b33	84 d2		 test	 dl, dl
  00b35	74 23		 je	 SHORT $LN811@SubtructOn

; 831  :             {
; 832  :                 // u の最上位に達しておらず、かつボローが立っている場合
; 833  : 
; 834  :                 // 桁借りを継続する
; 835  :                 c = _SUBTRUCT_UNIT(c, *up, 0, up);

  00b37	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00b39	80 c2 ff	 add	 dl, 255			; 000000ffH
  00b3c	83 d8 00	 sbb	 eax, 0
  00b3f	89 01		 mov	 DWORD PTR [ecx], eax
  00b41	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 836  :                 ++up;

  00b44	83 c1 04	 add	 ecx, 4

; 837  :                 --u_count;

  00b47	83 ee 01	 sub	 esi, 1
  00b4a	75 e7		 jne	 SHORT $LL805@SubtructOn
$LN818@SubtructOn:

; 815  :             {
; 816  :                 // u の最上位まで達してしまった場合
; 817  : 
; 818  :                 if (c)

  00b4c	33 c0		 xor	 eax, eax
  00b4e	84 d2		 test	 dl, dl
  00b50	5f		 pop	 edi

; 1171 :     }

  00b51	5e		 pop	 esi

; 818  :                 if (c)

  00b52	0f 95 c0	 setne	 al

; 1171 :     }

  00b55	5b		 pop	 ebx
  00b56	8b e5		 mov	 esp, ebp
  00b58	5d		 pop	 ebp
  00b59	c3		 ret	 0
$LN811@SubtructOn:
  00b5a	5f		 pop	 edi
  00b5b	5e		 pop	 esi
  00b5c	33 c0		 xor	 eax, eax
  00b5e	5b		 pop	 ebx
  00b5f	8b e5		 mov	 esp, ebp
  00b61	5d		 pop	 ebp
  00b62	c3		 ret	 0
?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPAII0III@Z ENDP ; Palmtree::Math::Core::Internal::SubtructOneLineX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPAII0III@Z
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_t_hi$2$ = 24						; size = 4
_k$1$ = 24						; size = 4
_t_lo$1 = 24						; size = 4
_t_lo$2 = 24						; size = 4
_t_lo$3 = 24						; size = 4
_t_lo$4 = 24						; size = 4
_t_lo$5 = 24						; size = 4
_t_lo$6 = 24						; size = 4
_t_lo$7 = 24						; size = 4
_t_lo$8 = 24						; size = 4
_t_lo$9 = 24						; size = 4
_t_lo$10 = 24						; size = 4
_t_lo$11 = 24						; size = 4
_t_lo$12 = 24						; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPAII0III@Z PROC ; Palmtree::Math::Core::Internal::SubtructOneLine, COMDAT

; 872  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 873  :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  00006	8b 45 18	 mov	 eax, DWORD PTR _q_index$[ebp]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi

; 874  :         __UNIT_TYPE* v_ptr = &v_buf[0];
; 875  :         __UNIT_TYPE v_count = v_buf_len;
; 876  :         __UNIT_TYPE k = 0;
; 877  :         char c = 0;

  0000e	32 db		 xor	 bl, bl
  00010	c7 45 18 00 00
	00 00		 mov	 DWORD PTR _k$1$[ebp], 0
  00017	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]

; 878  : 
; 879  :         __UNIT_TYPE count = v_count >> 5;

  0001a	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
  0001d	8b d0		 mov	 edx, eax
  0001f	c1 ea 05	 shr	 edx, 5
  00022	57		 push	 edi

; 880  :         while (count != 0)

  00023	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]
  00026	85 d2		 test	 edx, edx
  00028	89 55 fc	 mov	 DWORD PTR _count$1$[ebp], edx
  0002b	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  0002e	0f 84 6f 04 00
	00		 je	 $LN3@SubtructOn
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00034	8b 07		 mov	 eax, DWORD PTR [edi]
  00036	f7 e2		 mul	 edx
  00038	8b f0		 mov	 esi, eax
  0003a	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0003c	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0003f	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00041	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00044	80 c3 ff	 add	 bl, 255			; 000000ffH
  00047	1b c6		 sbb	 eax, esi
  00049	89 01		 mov	 DWORD PTR [ecx], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0004b	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0004e	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00051	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00054	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00057	8b f0		 mov	 esi, eax
  00059	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  0005b	89 75 18	 mov	 DWORD PTR _t_lo$12[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0005e	03 f7		 add	 esi, edi
  00060	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00063	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00066	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00069	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0006c	1b c6		 sbb	 eax, esi
  0006e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00071	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00074	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00077	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0007a	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0007d	8b f0		 mov	 esi, eax
  0007f	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00081	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00084	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00087	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0008a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0008d	1b c6		 sbb	 eax, esi
  0008f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00092	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00095	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00098	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0009b	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0009e	8b f0		 mov	 esi, eax
  000a0	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  000a2	89 75 18	 mov	 DWORD PTR _t_lo$11[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000a5	03 f7		 add	 esi, edi
  000a7	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000aa	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000ad	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  000b0	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000b3	1b c6		 sbb	 eax, esi
  000b5	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000b8	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000bb	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000be	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000c1	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  000c4	8b f0		 mov	 esi, eax
  000c6	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000c8	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  000cb	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000ce	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000d1	80 c3 ff	 add	 bl, 255			; 000000ffH
  000d4	1b c6		 sbb	 eax, esi
  000d6	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000d9	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000dc	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000df	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  000e2	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  000e5	8b f0		 mov	 esi, eax
  000e7	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  000e9	89 75 18	 mov	 DWORD PTR _t_lo$10[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000ec	03 f7		 add	 esi, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000ee	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000f1	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000f4	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000f7	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  000fa	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000fd	1b c6		 sbb	 eax, esi
  000ff	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00102	8b 47 18	 mov	 eax, DWORD PTR [edi+24]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00105	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00108	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0010b	8b f0		 mov	 esi, eax

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0010d	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00110	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00112	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00115	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00118	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0011b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0011e	1b c6		 sbb	 eax, esi
  00120	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00123	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00126	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00129	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0012c	8b f0		 mov	 esi, eax
  0012e	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00130	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00133	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00136	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00139	80 c3 ff	 add	 bl, 255			; 000000ffH
  0013c	1b c6		 sbb	 eax, esi
  0013e	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00141	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00144	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00147	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0014a	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0014d	8b f0		 mov	 esi, eax
  0014f	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00151	03 f7		 add	 esi, edi
  00153	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00156	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00159	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0015c	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0015f	1b c6		 sbb	 eax, esi
  00161	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00164	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00167	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0016a	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  0016d	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00170	8b f0		 mov	 esi, eax
  00172	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00174	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00177	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0017a	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0017d	80 c3 ff	 add	 bl, 255			; 000000ffH
  00180	1b c6		 sbb	 eax, esi
  00182	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00185	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00188	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0018b	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0018e	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00191	8b f0		 mov	 esi, eax
  00193	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00195	03 f7		 add	 esi, edi
  00197	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0019a	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0019d	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  001a0	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001a3	1b c6		 sbb	 eax, esi
  001a5	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001a8	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001ab	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001ae	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  001b1	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  001b4	8b f0		 mov	 esi, eax
  001b6	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001b8	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  001bb	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001be	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001c1	80 c3 ff	 add	 bl, 255			; 000000ffH
  001c4	1b c6		 sbb	 eax, esi
  001c6	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001c9	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001cc	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001cf	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  001d2	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  001d5	8b f0		 mov	 esi, eax
  001d7	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001d9	03 f7		 add	 esi, edi
  001db	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001de	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001e1	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  001e4	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  001e7	1b c6		 sbb	 eax, esi
  001e9	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  001ec	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001ef	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  001f2	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  001f5	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  001f8	8b f0		 mov	 esi, eax
  001fa	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001fc	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  001ff	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00202	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00205	80 c3 ff	 add	 bl, 255			; 000000ffH
  00208	1b c6		 sbb	 eax, esi
  0020a	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0020d	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00210	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00213	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00216	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00219	8b f0		 mov	 esi, eax
  0021b	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0021d	03 f7		 add	 esi, edi
  0021f	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00222	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00225	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00228	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0022b	1b c6		 sbb	 eax, esi
  0022d	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00230	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00233	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00236	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00239	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0023c	8b f0		 mov	 esi, eax
  0023e	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00240	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00243	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00246	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00249	80 c3 ff	 add	 bl, 255			; 000000ffH
  0024c	1b c6		 sbb	 eax, esi
  0024e	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00251	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00254	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00257	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0025a	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0025d	8b f0		 mov	 esi, eax
  0025f	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00261	03 f7		 add	 esi, edi
  00263	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00266	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00269	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0026c	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0026f	1b c6		 sbb	 eax, esi
  00271	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00274	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00277	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0027a	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  0027d	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00280	8b f0		 mov	 esi, eax
  00282	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00284	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00287	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0028a	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0028d	80 c3 ff	 add	 bl, 255			; 000000ffH
  00290	1b c6		 sbb	 eax, esi
  00292	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00295	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00298	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0029b	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  0029e	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  002a1	8b f0		 mov	 esi, eax
  002a3	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002a5	03 f7		 add	 esi, edi
  002a7	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002aa	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002ad	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  002b0	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002b3	1b c6		 sbb	 eax, esi
  002b5	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002b8	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002bb	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002be	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  002c1	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  002c4	8b f0		 mov	 esi, eax

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002c6	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002c9	8b fa		 mov	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  002cb	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002ce	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002d1	80 c3 ff	 add	 bl, 255			; 000000ffH
  002d4	1b c6		 sbb	 eax, esi
  002d6	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002d9	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002dc	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002df	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  002e2	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  002e5	8b f0		 mov	 esi, eax
  002e7	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002e9	03 f7		 add	 esi, edi
  002eb	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002ee	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002f1	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  002f4	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002f7	1b c6		 sbb	 eax, esi
  002f9	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002fc	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  002ff	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00302	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00305	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00308	8b f0		 mov	 esi, eax
  0030a	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0030c	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0030f	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00312	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00315	80 c3 ff	 add	 bl, 255			; 000000ffH
  00318	1b c6		 sbb	 eax, esi
  0031a	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0031d	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00320	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00323	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  00326	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00329	8b f0		 mov	 esi, eax
  0032b	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0032d	03 f7		 add	 esi, edi
  0032f	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00332	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00335	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00338	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0033b	1b c6		 sbb	 eax, esi
  0033d	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00340	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00343	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00346	8b 40 5c	 mov	 eax, DWORD PTR [eax+92]
  00349	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0034c	8b f0		 mov	 esi, eax
  0034e	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00350	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00353	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00356	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00359	80 c3 ff	 add	 bl, 255			; 000000ffH
  0035c	1b c6		 sbb	 eax, esi
  0035e	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00361	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00364	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00367	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  0036a	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0036d	8b f0		 mov	 esi, eax
  0036f	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00371	03 f7		 add	 esi, edi
  00373	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00376	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00379	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0037c	8b 41 60	 mov	 eax, DWORD PTR [ecx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0037f	1b c6		 sbb	 eax, esi
  00381	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00384	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00387	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0038a	8b 40 64	 mov	 eax, DWORD PTR [eax+100]
  0038d	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00390	8b f0		 mov	 esi, eax
  00392	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00394	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00397	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0039a	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0039d	80 c3 ff	 add	 bl, 255			; 000000ffH
  003a0	1b c6		 sbb	 eax, esi
  003a2	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  003a5	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003a8	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  003ab	8b 40 68	 mov	 eax, DWORD PTR [eax+104]
  003ae	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  003b1	8b f0		 mov	 esi, eax
  003b3	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003b5	03 f7		 add	 esi, edi
  003b7	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003ba	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003bd	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  003c0	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003c3	1b c6		 sbb	 eax, esi
  003c5	89 41 68	 mov	 DWORD PTR [ecx+104], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003c8	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003cb	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003ce	8b 40 6c	 mov	 eax, DWORD PTR [eax+108]
  003d1	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  003d4	8b f0		 mov	 esi, eax
  003d6	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003d8	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  003db	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003de	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003e1	80 c3 ff	 add	 bl, 255			; 000000ffH
  003e4	1b c6		 sbb	 eax, esi
  003e6	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003e9	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003ec	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003ef	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  003f2	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  003f5	8b f0		 mov	 esi, eax
  003f7	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003f9	03 f7		 add	 esi, edi
  003fb	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  003fe	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00401	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00404	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00407	1b c6		 sbb	 eax, esi
  00409	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0040c	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0040f	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00412	8b 40 74	 mov	 eax, DWORD PTR [eax+116]
  00415	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00418	8b f0		 mov	 esi, eax
  0041a	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0041c	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0041f	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00422	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00425	80 c3 ff	 add	 bl, 255			; 000000ffH
  00428	1b c6		 sbb	 eax, esi
  0042a	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0042d	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00430	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00433	8b 40 78	 mov	 eax, DWORD PTR [eax+120]
  00436	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00439	8b f0		 mov	 esi, eax
  0043b	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0043d	03 f7		 add	 esi, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0043f	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00442	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00445	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00448	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0044b	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0044e	1b c6		 sbb	 eax, esi
  00450	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00453	8b 47 7c	 mov	 eax, DWORD PTR [edi+124]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00456	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00459	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0045c	8b f0		 mov	 esi, eax
  0045e	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00460	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  00463	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00466	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00469	89 45 18	 mov	 DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0046c	8b 41 7c	 mov	 eax, DWORD PTR [ecx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0046f	1b c6		 sbb	 eax, esi
  00471	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
  00474	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 914  :             u_ptr += 32;

  00477	83 e9 80	 sub	 ecx, -128		; ffffff80H

; 915  :             v_ptr += 32;

  0047a	83 ef 80	 sub	 edi, -128		; ffffff80H
  0047d	89 7d 10	 mov	 DWORD PTR _v_buf$[ebp], edi

; 916  :             --count;

  00480	8b 55 fc	 mov	 edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00483	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 916  :             --count;

  00488	4a		 dec	 edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00489	be 04 00 00 00	 mov	 esi, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 916  :             --count;

  0048e	89 55 fc	 mov	 DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00491	f0 0f c1 06	 lock	  xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 880  :         while (count != 0)

  00495	85 d2		 test	 edx, edx
  00497	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  0049a	0f 85 94 fb ff
	ff		 jne	 $LL2@SubtructOn
  004a0	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
$LN3@SubtructOn:

; 917  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 918  :             if (sizeof(k) == sizeof(_UINT64_T))
; 919  :                 AddToMULTI64Counter(32);
; 920  :             else
; 921  :                 AddToMULTI32Counter(32);
; 922  : #endif
; 923  :         }
; 924  : 
; 925  :         if (v_count & 0x10)

  004a3	a8 10		 test	 al, 16			; 00000010H
  004a5	0f 84 3b 02 00
	00		 je	 $LN8@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004ab	8b 07		 mov	 eax, DWORD PTR [edi]
  004ad	f7 e2		 mul	 edx
  004af	8b f0		 mov	 esi, eax
  004b1	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004b3	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  004b6	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004b8	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004bb	80 c3 ff	 add	 bl, 255			; 000000ffH
  004be	1b c6		 sbb	 eax, esi
  004c0	89 01		 mov	 DWORD PTR [ecx], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004c2	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004c5	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004c8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  004cb	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  004ce	8b f0		 mov	 esi, eax
  004d0	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  004d2	89 75 18	 mov	 DWORD PTR _t_lo$9[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004d5	03 f7		 add	 esi, edi
  004d7	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004da	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004dd	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  004e0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004e3	1b c6		 sbb	 eax, esi
  004e5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004e8	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  004eb	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004ee	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  004f1	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  004f4	8b f0		 mov	 esi, eax
  004f6	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004f8	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  004fb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004fe	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00501	80 c3 ff	 add	 bl, 255			; 000000ffH
  00504	1b c6		 sbb	 eax, esi
  00506	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00509	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0050c	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0050f	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00512	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00515	8b f0		 mov	 esi, eax
  00517	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  00519	89 75 18	 mov	 DWORD PTR _t_lo$8[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0051c	03 f7		 add	 esi, edi
  0051e	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00521	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00524	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00527	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0052a	1b c6		 sbb	 eax, esi
  0052c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0052f	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00532	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00535	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00538	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0053b	8b f0		 mov	 esi, eax
  0053d	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0053f	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00542	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00545	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00548	80 c3 ff	 add	 bl, 255			; 000000ffH
  0054b	1b c6		 sbb	 eax, esi
  0054d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00550	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00553	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00556	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00559	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0055c	8b f0		 mov	 esi, eax
  0055e	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  00560	89 75 18	 mov	 DWORD PTR _t_lo$7[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00563	03 f7		 add	 esi, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00565	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00568	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0056b	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0056e	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00571	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00574	1b c6		 sbb	 eax, esi
  00576	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00579	8b 47 18	 mov	 eax, DWORD PTR [edi+24]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0057c	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0057f	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00582	8b f0		 mov	 esi, eax

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00584	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00587	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00589	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0058c	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0058f	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00592	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00595	1b c6		 sbb	 eax, esi
  00597	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0059a	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0059d	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005a0	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  005a3	8b f0		 mov	 esi, eax
  005a5	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005a7	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  005aa	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005ad	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005b0	80 c3 ff	 add	 bl, 255			; 000000ffH
  005b3	1b c6		 sbb	 eax, esi
  005b5	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005b8	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005bb	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005be	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  005c1	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  005c4	8b f0		 mov	 esi, eax
  005c6	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005c8	03 f7		 add	 esi, edi
  005ca	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005cd	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005d0	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  005d3	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005d6	1b c6		 sbb	 eax, esi
  005d8	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005db	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005de	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005e1	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  005e4	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  005e7	8b f0		 mov	 esi, eax
  005e9	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005eb	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  005ee	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005f1	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005f4	80 c3 ff	 add	 bl, 255			; 000000ffH
  005f7	1b c6		 sbb	 eax, esi
  005f9	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005fc	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  005ff	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00602	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00605	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00608	8b f0		 mov	 esi, eax
  0060a	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0060c	03 f7		 add	 esi, edi
  0060e	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00611	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00614	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00617	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0061a	1b c6		 sbb	 eax, esi
  0061c	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0061f	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00622	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00625	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  00628	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0062b	8b f0		 mov	 esi, eax
  0062d	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0062f	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00632	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00635	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00638	80 c3 ff	 add	 bl, 255			; 000000ffH
  0063b	1b c6		 sbb	 eax, esi
  0063d	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00640	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00643	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00646	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00649	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0064c	8b f0		 mov	 esi, eax
  0064e	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00650	03 f7		 add	 esi, edi
  00652	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00655	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00658	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0065b	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0065e	1b c6		 sbb	 eax, esi
  00660	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00663	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00666	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  00669	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  0066c	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0066f	8b f0		 mov	 esi, eax
  00671	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00673	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00676	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00679	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0067c	80 c3 ff	 add	 bl, 255			; 000000ffH
  0067f	1b c6		 sbb	 eax, esi
  00681	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00684	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00687	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0068a	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0068d	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00690	8b f0		 mov	 esi, eax
  00692	8b c2		 mov	 eax, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00694	03 f7		 add	 esi, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00696	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00699	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0069c	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0069f	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  006a2	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006a5	1b c6		 sbb	 eax, esi
  006a7	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006aa	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006ad	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006b0	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  006b3	8b f0		 mov	 esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  006b5	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  006b8	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
  006bb	83 d2 00	 adc	 edx, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006be	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  006c1	89 55 18	 mov	 DWORD PTR _k$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  006c4	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006c9	1b c6		 sbb	 eax, esi
  006cb	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  006ce	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006d3	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 944  :             v_ptr += 16;

  006d6	83 c7 40	 add	 edi, 64			; 00000040H
  006d9	83 c1 40	 add	 ecx, 64			; 00000040H
  006dc	89 7d 10	 mov	 DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  006df	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  006e3	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
$LN8@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 953  :         if (v_count & 0x8)

  006e6	a8 08		 test	 al, 8
  006e8	0f 84 30 01 00
	00		 je	 $LN824@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006ee	8b 07		 mov	 eax, DWORD PTR [edi]
  006f0	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  006f3	8b f0		 mov	 esi, eax
  006f5	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  006f7	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  006fa	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  006fc	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  006ff	80 c3 ff	 add	 bl, 255			; 000000ffH
  00702	1b c6		 sbb	 eax, esi
  00704	89 01		 mov	 DWORD PTR [ecx], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00706	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00709	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0070c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0070f	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00712	8b f0		 mov	 esi, eax
  00714	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  00716	89 75 18	 mov	 DWORD PTR _t_lo$6[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00719	03 f7		 add	 esi, edi
  0071b	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0071e	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00721	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00724	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00727	1b c6		 sbb	 eax, esi
  00729	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0072c	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0072f	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00732	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00735	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00738	8b f0		 mov	 esi, eax
  0073a	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0073c	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0073f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00742	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00745	80 c3 ff	 add	 bl, 255			; 000000ffH
  00748	1b c6		 sbb	 eax, esi
  0074a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0074d	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00750	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00753	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00756	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00759	8b f0		 mov	 esi, eax
  0075b	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  0075d	89 75 18	 mov	 DWORD PTR _t_lo$5[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00760	03 f7		 add	 esi, edi
  00762	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00765	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00768	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0076b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0076e	1b c6		 sbb	 eax, esi
  00770	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00773	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00776	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00779	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0077c	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0077f	8b f0		 mov	 esi, eax
  00781	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00783	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00786	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00789	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0078c	80 c3 ff	 add	 bl, 255			; 000000ffH
  0078f	1b c6		 sbb	 eax, esi
  00791	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00794	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00797	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0079a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0079d	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  007a0	8b f0		 mov	 esi, eax
  007a2	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  007a4	89 75 18	 mov	 DWORD PTR _t_lo$4[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  007a7	03 f7		 add	 esi, edi
  007a9	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007ac	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  007af	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  007b2	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007b5	1b c6		 sbb	 eax, esi
  007b7	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007ba	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007bd	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007c0	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  007c3	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  007c6	8b f0		 mov	 esi, eax

; 178  :             return (_addcarry_u32(carry, u, v, w));

  007c8	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007cb	8b fa		 mov	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  007cd	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  007d0	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007d3	80 c3 ff	 add	 bl, 255			; 000000ffH
  007d6	1b c6		 sbb	 eax, esi
  007d8	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007db	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007de	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007e1	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  007e4	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  007e7	8b f0		 mov	 esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  007e9	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  007ec	03 f7		 add	 esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 964  :             v_ptr += 8;

  007ee	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  007f1	83 d2 00	 adc	 edx, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007f4	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  007f7	89 55 18	 mov	 DWORD PTR _k$1$[ebp], edx

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  007fa	1b c6		 sbb	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  007fc	be 04 00 00 00	 mov	 esi, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00801	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00804	b8 08 00 00 00	 mov	 eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00809	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 964  :             v_ptr += 8;

  0080c	83 c7 20	 add	 edi, 32			; 00000020H
  0080f	83 c1 20	 add	 ecx, 32			; 00000020H
  00812	89 7d 10	 mov	 DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00815	f0 0f c1 06	 lock	  xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 953  :         if (v_count & 0x8)

  00819	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
  0081c	eb 03		 jmp	 SHORT $LN11@SubtructOn
$LN824@SubtructOn:
  0081e	8b 55 18	 mov	 edx, DWORD PTR _k$1$[ebp]
$LN11@SubtructOn:

; 965  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 966  :             if (sizeof(k) == sizeof(_UINT64_T))
; 967  :                 AddToMULTI64Counter(8);
; 968  :             else
; 969  :                 AddToMULTI32Counter(8);
; 970  : #endif
; 971  :         }
; 972  : 
; 973  :         if (v_count & 0x4)

  00821	a8 04		 test	 al, 4
  00823	0f 84 a3 00 00
	00		 je	 $LN14@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00829	8b 07		 mov	 eax, DWORD PTR [edi]
  0082b	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0082e	8b f0		 mov	 esi, eax
  00830	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00832	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00835	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00837	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0083a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0083d	1b c6		 sbb	 eax, esi
  0083f	89 01		 mov	 DWORD PTR [ecx], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00841	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00844	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00847	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0084a	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  0084d	8b f0		 mov	 esi, eax
  0084f	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  00851	89 75 18	 mov	 DWORD PTR _t_lo$3[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00854	03 f7		 add	 esi, edi
  00856	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00859	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0085c	89 45 18	 mov	 DWORD PTR _t_hi$2$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0085f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00862	1b c6		 sbb	 eax, esi
  00864	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00867	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0086a	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0086d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00870	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00873	8b f0		 mov	 esi, eax
  00875	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00877	03 75 18	 add	 esi, DWORD PTR _t_hi$2$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0087a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0087d	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00880	80 c3 ff	 add	 bl, 255			; 000000ffH
  00883	1b c6		 sbb	 eax, esi
  00885	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00888	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0088b	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0088e	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00891	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00894	8b f0		 mov	 esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00896	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00899	89 75 18	 mov	 DWORD PTR _t_lo$2[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0089c	03 f7		 add	 esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 980  :             v_ptr += 4;

  0089e	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  008a1	83 d2 00	 adc	 edx, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008a4	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  008a7	89 55 18	 mov	 DWORD PTR _k$1$[ebp], edx

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008aa	1b c6		 sbb	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  008ac	be 04 00 00 00	 mov	 esi, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008b1	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  008b4	b8 04 00 00 00	 mov	 eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008b9	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 980  :             v_ptr += 4;

  008bc	83 c7 10	 add	 edi, 16			; 00000010H
  008bf	83 c1 10	 add	 ecx, 16			; 00000010H
  008c2	89 7d 10	 mov	 DWORD PTR _v_buf$[ebp], edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  008c5	f0 0f c1 06	 lock	  xadd	 DWORD PTR [esi], eax
  008c9	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
$LN14@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 989  :         if (v_count & 0x2)

  008cc	a8 02		 test	 al, 2
  008ce	74 5e		 je	 SHORT $LN17@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  008d0	8b 07		 mov	 eax, DWORD PTR [edi]
  008d2	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  008d5	8b f0		 mov	 esi, eax
  008d7	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  008d9	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  008dc	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  008de	83 d7 00	 adc	 edi, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008e1	80 c3 ff	 add	 bl, 255			; 000000ffH
  008e4	1b c6		 sbb	 eax, esi
  008e6	89 01		 mov	 DWORD PTR [ecx], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  008e8	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  008eb	0f 92 c3	 setb	 bl

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  008ee	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  008f1	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  008f4	8b f0		 mov	 esi, eax
  008f6	8b c2		 mov	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  008f8	89 75 18	 mov	 DWORD PTR _t_lo$1[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  008fb	ba 02 00 00 00	 mov	 edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00900	03 f7		 add	 esi, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 994  :             v_ptr += 2;

  00902	8b 7d 10	 mov	 edi, DWORD PTR _v_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00905	83 d0 00	 adc	 eax, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00908	80 c3 ff	 add	 bl, 255			; 000000ffH

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0090b	89 45 18	 mov	 DWORD PTR _k$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0090e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00911	1b c6		 sbb	 eax, esi
  00913	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00916	b8 04 00 00 00	 mov	 eax, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0091b	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 993  :             u_ptr += 2;

  0091e	83 c1 08	 add	 ecx, 8

; 994  :             v_ptr += 2;

  00921	83 c7 08	 add	 edi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00924	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  00928	8b 55 18	 mov	 edx, DWORD PTR _k$1$[ebp]
  0092b	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
$LN17@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1003 :         if (v_count & 0x1)

  0092e	a8 01		 test	 al, 1
  00930	74 23		 je	 SHORT $LN20@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00932	8b 07		 mov	 eax, DWORD PTR [edi]
  00934	f7 65 1c	 mul	 DWORD PTR _q_$[ebp]
  00937	8b f0		 mov	 esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00939	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0093b	03 75 18	 add	 esi, DWORD PTR _k$1$[ebp]
  0093e	83 d2 00	 adc	 edx, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00941	80 c3 ff	 add	 bl, 255			; 000000ffH
  00944	1b c6		 sbb	 eax, esi
  00946	89 01		 mov	 DWORD PTR [ecx], eax
  00948	0f 92 c3	 setb	 bl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1006 :             u_ptr += 1;

  0094b	83 c1 04	 add	 ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  0094e	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
$LN20@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1016 :         c = _SUBTRUCT_UNIT(c, *u_ptr, k, u_ptr);

  00955	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00957	80 c3 ff	 add	 bl, 255			; 000000ffH
  0095a	1b c2		 sbb	 eax, edx
  0095c	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1019 :         return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

  0095e	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00961	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1017 :         u_ptr += 1;

  00964	83 c1 04	 add	 ecx, 4

; 1019 :         return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

  00967	8d 34 85 04 00
	00 00		 lea	 esi, DWORD PTR [eax*4+4]
  0096e	2b f1		 sub	 esi, ecx
  00970	03 75 08	 add	 esi, DWORD PTR _u_buf$[ebp]
  00973	c1 fe 02	 sar	 esi, 2

; 814  :             if (u_count <= 0)

  00976	85 f6		 test	 esi, esi
  00978	74 1f		 je	 SHORT $LN818@SubtructOn
  0097a	66 0f 1f 44 00
	00		 npad	 6
$LL805@SubtructOn:

; 819  :                 {
; 820  :                     // かつそれでも桁借りを行う必要がある場合
; 821  : 
; 822  :                     // 減算結果が負になってしまったので呼び出し元に通知する。
; 823  :                     return (TRUE);
; 824  :                 }
; 825  : 
; 826  :                 // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 827  : 
; 828  :                 return (FALSE);
; 829  :             }
; 830  :             else if (c)

  00980	84 d2		 test	 dl, dl
  00982	74 23		 je	 SHORT $LN811@SubtructOn

; 831  :             {
; 832  :                 // u の最上位に達しておらず、かつボローが立っている場合
; 833  : 
; 834  :                 // 桁借りを継続する
; 835  :                 c = _SUBTRUCT_UNIT(c, *up, 0, up);

  00984	8b 01		 mov	 eax, DWORD PTR [ecx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00986	80 c2 ff	 add	 dl, 255			; 000000ffH
  00989	83 d8 00	 sbb	 eax, 0
  0098c	89 01		 mov	 DWORD PTR [ecx], eax
  0098e	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 836  :                 ++up;

  00991	83 c1 04	 add	 ecx, 4

; 837  :                 --u_count;

  00994	83 ee 01	 sub	 esi, 1
  00997	75 e7		 jne	 SHORT $LL805@SubtructOn
$LN818@SubtructOn:

; 815  :             {
; 816  :                 // u の最上位まで達してしまった場合
; 817  : 
; 818  :                 if (c)

  00999	33 c0		 xor	 eax, eax
  0099b	84 d2		 test	 dl, dl
  0099d	5f		 pop	 edi

; 1020 :     }

  0099e	5e		 pop	 esi

; 818  :                 if (c)

  0099f	0f 95 c0	 setne	 al

; 1020 :     }

  009a2	5b		 pop	 ebx
  009a3	8b e5		 mov	 esp, ebp
  009a5	5d		 pop	 ebp
  009a6	c3		 ret	 0
$LN811@SubtructOn:
  009a7	5f		 pop	 edi
  009a8	5e		 pop	 esi
  009a9	33 c0		 xor	 eax, eax
  009ab	5b		 pop	 ebx
  009ac	8b e5		 mov	 esp, ebp
  009ae	5d		 pop	 ebp
  009af	c3		 ret	 0
?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPAII0III@Z ENDP ; Palmtree::Math::Core::Internal::SubtructOneLine
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z PROC ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV, COMDAT

; 861  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 10	 mov	 eax, DWORD PTR _vp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 861  :     {

  00006	53		 push	 ebx
  00007	56		 push	 esi

; 862  :         __UNIT_TYPE t_hi;
; 863  :         __UNIT_TYPE t_lo;
; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);
; 865  :         _ADDX_UNIT(_ADDX_UNIT(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

  00008	8b 75 0c	 mov	 esi, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	f7 65 14	 mul	 DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 861  :     {

  00010	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00011	8b f8		 mov	 edi, eax
  00013	8b da		 mov	 ebx, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00015	03 3e		 add	 edi, DWORD PTR [esi]
  00017	b8 00 00 00 00	 mov	 eax, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0001c	8b 55 18	 mov	 edx, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0001f	66 0f 38 f6 d8	 adcx	 ebx, eax

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00024	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
  00027	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00029	8b 0a		 mov	 ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0002b	1b cf		 sbb	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 868  :         return (c);

  0002d	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0002e	89 0a		 mov	 DWORD PTR [edx], ecx
  00030	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 867  :         *k = t_hi;

  00033	89 1e		 mov	 DWORD PTR [esi], ebx

; 868  :         return (c);

  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 869  :     }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ENDP ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z PROC ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT, COMDAT

; 850  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 10	 mov	 eax, DWORD PTR _vp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 850  :     {

  00006	53		 push	 ebx
  00007	56		 push	 esi

; 851  :         __UNIT_TYPE t_hi;
; 852  :         __UNIT_TYPE t_lo;
; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);
; 854  :         _ADD_UNIT(_ADD_UNIT(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

  00008	8b 75 0c	 mov	 esi, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	f7 65 14	 mul	 DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 850  :     {

  00010	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00011	8b f8		 mov	 edi, eax
  00013	8b da		 mov	 ebx, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00015	03 3e		 add	 edi, DWORD PTR [esi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00017	8b 55 18	 mov	 edx, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0001a	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0001d	83 d3 00	 adc	 ebx, 0

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00020	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  00022	8b 0a		 mov	 ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00024	1b cf		 sbb	 ecx, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 857  :         return (c);

  00026	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00027	89 0a		 mov	 DWORD PTR [edx], ecx
  00029	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 856  :         *k = t_hi;

  0002c	89 1e		 mov	 DWORD PTR [esi], ebx

; 857  :         return (c);

  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx

; 858  :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ENDP ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPAII@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
_up$ = 12						; size = 4
_u_count$ = 16						; size = 4
?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPAII@Z PROC	; Palmtree::Math::Core::Internal::DoBorrow, COMDAT

; 810  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 811  :         // 桁借りを続く限り行う
; 812  :         for (;;)
; 813  :         {
; 814  :             if (u_count <= 0)

  00003	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR _u_count$[ebp]
  0000a	85 f6		 test	 esi, esi
  0000c	74 1b		 je	 SHORT $LN14@DoBorrow
  0000e	8b 55 0c	 mov	 edx, DWORD PTR _up$[ebp]
$LL2@DoBorrow:

; 824  :                 }
; 825  : 
; 826  :                 // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 827  : 
; 828  :                 return (FALSE);
; 829  :             }
; 830  :             else if (c)

  00011	84 c0		 test	 al, al
  00013	74 20		 je	 SHORT $LN8@DoBorrow

; 831  :             {
; 832  :                 // u の最上位に達しておらず、かつボローが立っている場合
; 833  : 
; 834  :                 // 桁借りを継続する
; 835  :                 c = _SUBTRUCT_UNIT(c, *up, 0, up);

  00015	8b 0a		 mov	 ecx, DWORD PTR [edx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00017	04 ff		 add	 al, 255			; 000000ffH
  00019	83 d9 00	 sbb	 ecx, 0
  0001c	89 0a		 mov	 DWORD PTR [edx], ecx
  0001e	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 836  :                 ++up;

  00021	83 c2 04	 add	 edx, 4

; 837  :                 --u_count;

  00024	83 ee 01	 sub	 esi, 1
  00027	75 e8		 jne	 SHORT $LL2@DoBorrow
$LN14@DoBorrow:

; 815  :             {
; 816  :                 // u の最上位まで達してしまった場合
; 817  : 
; 818  :                 if (c)

  00029	84 c0		 test	 al, al
  0002b	74 08		 je	 SHORT $LN8@DoBorrow

; 819  :                 {
; 820  :                     // かつそれでも桁借りを行う必要がある場合
; 821  : 
; 822  :                     // 減算結果が負になってしまったので呼び出し元に通知する。
; 823  :                     return (TRUE);

  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	5e		 pop	 esi

; 845  :             }
; 846  :         }
; 847  :     }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
$LN8@DoBorrow:

; 838  :             }
; 839  :             else
; 840  :             {
; 841  :                 // u の最上位に達しておらず、かつボローが立っていない場合
; 842  : 
; 843  :                 // 桁借りを中断し復帰する。
; 844  :                 return (FALSE);

  00035	33 c0		 xor	 eax, eax
  00037	5e		 pop	 esi

; 845  :             }
; 846  :         }
; 847  :     }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPAII@Z ENDP	; Palmtree::Math::Core::Internal::DoBorrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?CalculateQ_X@Internal@Core@Math@Palmtree@@YAIPAI0II@Z
_TEXT	SEGMENT
_value$1$ = -8						; size = 4
_lh_mi$1$ = -4						; size = 4
tv328 = 8						; size = 4
_u_buf$ = 8						; size = 4
_rh_mi$1$ = 12						; size = 4
_v_buf$ = 12						; size = 4
_value$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf_len$ = 16					; size = 4
_v1$1$ = 20						; size = 4
_q_index$ = 20						; size = 4
?CalculateQ_X@Internal@Core@Math@Palmtree@@YAIPAI0II@Z PROC ; Palmtree::Math::Core::Internal::CalculateQ_X, COMDAT

; 792  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 793  :         __UNIT_TYPE u_index = q_index + v_buf_len;

  00006	8b 55 10	 mov	 edx, DWORD PTR _v_buf_len$[ebp]

; 794  :         __UNIT_TYPE uj = u_buf[u_index];

  00009	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0000c	8b 4d 14	 mov	 ecx, DWORD PTR _q_index$[ebp]
  0000f	03 ca		 add	 ecx, edx
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]

; 795  :         __UNIT_TYPE uj_1 = u_buf[u_index - 1];

  00017	8b 7c 88 fc	 mov	 edi, DWORD PTR [eax+ecx*4-4]

; 796  :         __UNIT_TYPE uj_2 = u_buf[u_index - 2];

  0001b	8b 4c 88 f8	 mov	 ecx, DWORD PTR [eax+ecx*4-8]

; 797  :         __UNIT_TYPE v1 = v_buf[v_buf_len - 1];

  0001f	8b 45 0c	 mov	 eax, DWORD PTR _v_buf$[ebp]
  00022	89 4d 08	 mov	 DWORD PTR tv328[ebp], ecx
  00025	8b 74 90 fc	 mov	 esi, DWORD PTR [eax+edx*4-4]

; 798  :         __UNIT_TYPE v2 = v_buf[v_buf_len - 2];

  00029	8b 44 90 f8	 mov	 eax, DWORD PTR [eax+edx*4-8]
  0002d	89 75 14	 mov	 DWORD PTR _v1$1$[ebp], esi
  00030	89 45 10	 mov	 DWORD PTR _v2$1$[ebp], eax

; 697  :         if (uj == v1)

  00033	3b de		 cmp	 ebx, esi
  00035	75 05		 jne	 SHORT $LN6@CalculateQ

; 698  :             return (-1);

  00037	83 ce ff	 or	 esi, -1
  0003a	eb 19		 jmp	 SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  0003c	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 262  :             return ((_UINT32_T)(t / v));

  00043	6a 00		 push	 0
  00045	56		 push	 esi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00046	33 c9		 xor	 ecx, ecx
  00048	8b c3		 mov	 eax, ebx
  0004a	0b cf		 or	 ecx, edi

; 262  :             return ((_UINT32_T)(t / v));

  0004c	50		 push	 eax
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 __aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 707  :         return (q);

  00053	8b f0		 mov	 esi, eax
$LN5@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00055	8b c6		 mov	 eax, esi

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00057	8b cf		 mov	 ecx, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00059	f7 65 10	 mul	 DWORD PTR _v2$1$[ebp]
  0005c	89 45 f8	 mov	 DWORD PTR _value$1$[ebp], eax
  0005f	8b c6		 mov	 eax, esi
  00061	89 55 fc	 mov	 DWORD PTR _lh_mi$1$[ebp], edx
  00064	f7 65 14	 mul	 DWORD PTR _v1$1$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00067	2b c8		 sub	 ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00069	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0006e	89 4d 0c	 mov	 DWORD PTR _rh_mi$1$[ebp], ecx
  00071	8b cb		 mov	 ecx, ebx
  00073	1b ca		 sbb	 ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00075	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  0007a	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 755  :         if (rh_hi > 0)

  0007e	85 c9		 test	 ecx, ecx
  00080	75 50		 jne	 SHORT $LN70@CalculateQ

; 756  :         {
; 757  :             return (FALSE);
; 758  :         }
; 759  :         else if (lh_mi > rh_mi)

  00082	8b 45 0c	 mov	 eax, DWORD PTR _rh_mi$1$[ebp]
  00085	39 45 fc	 cmp	 DWORD PTR _lh_mi$1$[ebp], eax
  00088	77 0a		 ja	 SHORT $LN2@CalculateQ

; 760  :         {
; 761  :             return (TRUE);
; 762  :         }
; 763  :         else if (lh_mi < rh_mi)

  0008a	72 46		 jb	 SHORT $LN70@CalculateQ

; 799  :         __UNIT_TYPE q_ = AsumeQ_(uj, uj_1, v1);
; 800  :         if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _value$1$[ebp]
  0008f	3b 45 08	 cmp	 eax, DWORD PTR tv328[ebp]
  00092	76 3e		 jbe	 SHORT $LN70@CalculateQ
$LN2@CalculateQ:

; 801  :             return (q_);
; 802  :         --q_;

  00094	4e		 dec	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00095	8b c6		 mov	 eax, esi
  00097	f7 65 10	 mul	 DWORD PTR _v2$1$[ebp]
  0009a	89 45 10	 mov	 DWORD PTR _value$1$[ebp], eax
  0009d	8b ca		 mov	 ecx, edx
  0009f	8b c6		 mov	 eax, esi
  000a1	f7 65 14	 mul	 DWORD PTR _v1$1$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000a4	2b f8		 sub	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  000a6	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000ab	1b da		 sbb	 ebx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  000ad	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  000b2	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 755  :         if (rh_hi > 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	75 18		 jne	 SHORT $LN70@CalculateQ

; 756  :         {
; 757  :             return (FALSE);
; 758  :         }
; 759  :         else if (lh_mi > rh_mi)

  000ba	3b cf		 cmp	 ecx, edi
  000bc	77 0a		 ja	 SHORT $LN3@CalculateQ

; 760  :         {
; 761  :             return (TRUE);
; 762  :         }
; 763  :         else if (lh_mi < rh_mi)

  000be	72 12		 jb	 SHORT $LN70@CalculateQ

; 803  :         if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

  000c0	8b 45 10	 mov	 eax, DWORD PTR _value$1$[ebp]
  000c3	3b 45 08	 cmp	 eax, DWORD PTR tv328[ebp]
  000c6	76 0a		 jbe	 SHORT $LN70@CalculateQ
$LN3@CalculateQ:
  000c8	5f		 pop	 edi

; 804  :             return (q_);
; 805  :         --q_;

  000c9	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]

; 806  :         return (q_);
; 807  :     }

  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
$LN70@CalculateQ:
  000d2	5f		 pop	 edi
  000d3	8b c6		 mov	 eax, esi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?CalculateQ_X@Internal@Core@Math@Palmtree@@YAIPAI0II@Z ENDP ; Palmtree::Math::Core::Internal::CalculateQ_X
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?CalculateQ_@Internal@Core@Math@Palmtree@@YAIPAI0II@Z
_TEXT	SEGMENT
_value$1$ = -8						; size = 4
_lh_mi$1$ = -4						; size = 4
tv328 = 8						; size = 4
_u_buf$ = 8						; size = 4
_rh_mi$1$ = 12						; size = 4
_v_buf$ = 12						; size = 4
_value$1$ = 16						; size = 4
_v2$1$ = 16						; size = 4
_v_buf_len$ = 16					; size = 4
_v1$1$ = 20						; size = 4
_q_index$ = 20						; size = 4
?CalculateQ_@Internal@Core@Math@Palmtree@@YAIPAI0II@Z PROC ; Palmtree::Math::Core::Internal::CalculateQ_, COMDAT

; 774  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 775  :         __UNIT_TYPE u_index = q_index + v_buf_len;

  00006	8b 55 10	 mov	 edx, DWORD PTR _v_buf_len$[ebp]

; 776  :         __UNIT_TYPE uj = u_buf[u_index];

  00009	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0000c	8b 4d 14	 mov	 ecx, DWORD PTR _q_index$[ebp]
  0000f	03 ca		 add	 ecx, edx
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]

; 777  :         __UNIT_TYPE uj_1 = u_buf[u_index - 1];

  00017	8b 7c 88 fc	 mov	 edi, DWORD PTR [eax+ecx*4-4]

; 778  :         __UNIT_TYPE uj_2 = u_buf[u_index - 2];

  0001b	8b 4c 88 f8	 mov	 ecx, DWORD PTR [eax+ecx*4-8]

; 779  :         __UNIT_TYPE v1 = v_buf[v_buf_len - 1];

  0001f	8b 45 0c	 mov	 eax, DWORD PTR _v_buf$[ebp]
  00022	89 4d 08	 mov	 DWORD PTR tv328[ebp], ecx
  00025	8b 74 90 fc	 mov	 esi, DWORD PTR [eax+edx*4-4]

; 780  :         __UNIT_TYPE v2 = v_buf[v_buf_len - 2];

  00029	8b 44 90 f8	 mov	 eax, DWORD PTR [eax+edx*4-8]
  0002d	89 75 14	 mov	 DWORD PTR _v1$1$[ebp], esi
  00030	89 45 10	 mov	 DWORD PTR _v2$1$[ebp], eax

; 697  :         if (uj == v1)

  00033	3b de		 cmp	 ebx, esi
  00035	75 05		 jne	 SHORT $LN6@CalculateQ

; 698  :             return (-1);

  00037	83 ce ff	 or	 esi, -1
  0003a	eb 19		 jmp	 SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  0003c	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 262  :             return ((_UINT32_T)(t / v));

  00043	6a 00		 push	 0
  00045	56		 push	 esi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00046	33 c9		 xor	 ecx, ecx
  00048	8b c3		 mov	 eax, ebx
  0004a	0b cf		 or	 ecx, edi

; 262  :             return ((_UINT32_T)(t / v));

  0004c	50		 push	 eax
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 __aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 707  :         return (q);

  00053	8b f0		 mov	 esi, eax
$LN5@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00055	8b c6		 mov	 eax, esi

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00057	8b cf		 mov	 ecx, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00059	f7 65 10	 mul	 DWORD PTR _v2$1$[ebp]
  0005c	89 45 f8	 mov	 DWORD PTR _value$1$[ebp], eax
  0005f	8b c6		 mov	 eax, esi
  00061	89 55 fc	 mov	 DWORD PTR _lh_mi$1$[ebp], edx
  00064	f7 65 14	 mul	 DWORD PTR _v1$1$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00067	2b c8		 sub	 ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00069	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0006e	89 4d 0c	 mov	 DWORD PTR _rh_mi$1$[ebp], ecx
  00071	8b cb		 mov	 ecx, ebx
  00073	1b ca		 sbb	 ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00075	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  0007a	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 727  :         if (rh_hi > 0)

  0007e	85 c9		 test	 ecx, ecx
  00080	75 50		 jne	 SHORT $LN70@CalculateQ

; 728  :             return (FALSE);
; 729  :         else if (lh_mi > rh_mi)

  00082	8b 45 0c	 mov	 eax, DWORD PTR _rh_mi$1$[ebp]
  00085	39 45 fc	 cmp	 DWORD PTR _lh_mi$1$[ebp], eax
  00088	77 0a		 ja	 SHORT $LN2@CalculateQ

; 730  :             return (TRUE);
; 731  :         else if (lh_mi < rh_mi)

  0008a	72 46		 jb	 SHORT $LN70@CalculateQ

; 781  :         __UNIT_TYPE q_ = AsumeQ_(uj, uj_1, v1);
; 782  :         if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _value$1$[ebp]
  0008f	3b 45 08	 cmp	 eax, DWORD PTR tv328[ebp]
  00092	76 3e		 jbe	 SHORT $LN70@CalculateQ
$LN2@CalculateQ:

; 783  :             return (q_);
; 784  :         --q_;

  00094	4e		 dec	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00095	8b c6		 mov	 eax, esi
  00097	f7 65 10	 mul	 DWORD PTR _v2$1$[ebp]
  0009a	89 45 10	 mov	 DWORD PTR _value$1$[ebp], eax
  0009d	8b ca		 mov	 ecx, edx
  0009f	8b c6		 mov	 eax, esi
  000a1	f7 65 14	 mul	 DWORD PTR _v1$1$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000a4	2b f8		 sub	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  000a6	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  000ab	1b da		 sbb	 ebx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  000ad	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  000b2	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 727  :         if (rh_hi > 0)

  000b6	85 db		 test	 ebx, ebx
  000b8	75 18		 jne	 SHORT $LN70@CalculateQ

; 728  :             return (FALSE);
; 729  :         else if (lh_mi > rh_mi)

  000ba	3b cf		 cmp	 ecx, edi
  000bc	77 0a		 ja	 SHORT $LN3@CalculateQ

; 730  :             return (TRUE);
; 731  :         else if (lh_mi < rh_mi)

  000be	72 12		 jb	 SHORT $LN70@CalculateQ

; 785  :         if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

  000c0	8b 45 10	 mov	 eax, DWORD PTR _value$1$[ebp]
  000c3	3b 45 08	 cmp	 eax, DWORD PTR tv328[ebp]
  000c6	76 0a		 jbe	 SHORT $LN70@CalculateQ
$LN3@CalculateQ:
  000c8	5f		 pop	 edi

; 786  :             return (q_);
; 787  :         --q_;

  000c9	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]

; 788  :         return (q_);
; 789  :     }

  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
$LN70@CalculateQ:
  000d2	5f		 pop	 edi
  000d3	8b c6		 mov	 eax, esi
  000d5	5e		 pop	 esi
  000d6	5b		 pop	 ebx
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
?CalculateQ_@Internal@Core@Math@Palmtree@@YAIPAI0II@Z ENDP ; Palmtree::Math::Core::Internal::CalculateQ_
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?CheckQ_X@Internal@Core@Math@Palmtree@@YAHIIIIII@Z
_TEXT	SEGMENT
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
?CheckQ_X@Internal@Core@Math@Palmtree@@YAHIIIIII@Z PROC	; Palmtree::Math::Core::Internal::CheckQ_X, COMDAT

; 738  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 08	 mov	 eax, DWORD PTR _q_$[ebp]
  00006	f7 65 1c	 mul	 DWORD PTR _v2$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _uj$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 738  :     {

  0000c	53		 push	 ebx
  0000d	56		 push	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0000e	8b 75 10	 mov	 esi, DWORD PTR _uj_1$[ebp]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00011	8b d8		 mov	 ebx, eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 738  :     {

  00016	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00017	8b fa		 mov	 edi, edx
  00019	f7 65 18	 mul	 DWORD PTR _v1$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0001c	2b f0		 sub	 esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0001e	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00023	1b ca		 sbb	 ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00025	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  0002a	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 755  :         if (rh_hi > 0)

  0002e	85 c9		 test	 ecx, ecx
  00030	75 1a		 jne	 SHORT $LN27@CheckQ_X

; 756  :         {
; 757  :             return (FALSE);
; 758  :         }
; 759  :         else if (lh_mi > rh_mi)

  00032	3b fe		 cmp	 edi, esi
  00034	76 08		 jbe	 SHORT $LN6@CheckQ_X

; 770  :         }
; 771  :     }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0003b	5b		 pop	 ebx
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN6@CheckQ_X:

; 760  :         {
; 761  :             return (TRUE);
; 762  :         }
; 763  :         else if (lh_mi < rh_mi)

  0003e	72 0c		 jb	 SHORT $LN27@CheckQ_X

; 764  :         {
; 765  :             return (FALSE);
; 766  :         }
; 767  :         else
; 768  :         {
; 769  :             return (lh_lo > rh_lo);

  00040	39 5d 14	 cmp	 DWORD PTR _uj_2$[ebp], ebx
  00043	5f		 pop	 edi
  00044	1b c0		 sbb	 eax, eax

; 770  :         }
; 771  :     }

  00046	5e		 pop	 esi
  00047	f7 d8		 neg	 eax
  00049	5b		 pop	 ebx
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN27@CheckQ_X:
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	33 c0		 xor	 eax, eax
  00050	5b		 pop	 ebx
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?CheckQ_X@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ENDP	; Palmtree::Math::Core::Internal::CheckQ_X
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?CheckQ_@Internal@Core@Math@Palmtree@@YAHIIIIII@Z
_TEXT	SEGMENT
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
?CheckQ_@Internal@Core@Math@Palmtree@@YAHIIIIII@Z PROC	; Palmtree::Math::Core::Internal::CheckQ_, COMDAT

; 711  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 08	 mov	 eax, DWORD PTR _q_$[ebp]
  00006	f7 65 1c	 mul	 DWORD PTR _v2$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _uj$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 711  :     {

  0000c	53		 push	 ebx
  0000d	56		 push	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0000e	8b 75 10	 mov	 esi, DWORD PTR _uj_1$[ebp]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00011	8b d8		 mov	 ebx, eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _q_$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 711  :     {

  00016	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00017	8b fa		 mov	 edi, edx
  00019	f7 65 18	 mul	 DWORD PTR _v1$[ebp]

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0001c	2b f0		 sub	 esi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0001e	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00023	1b ca		 sbb	 ecx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00025	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  0002a	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 727  :         if (rh_hi > 0)

  0002e	85 c9		 test	 ecx, ecx
  00030	75 1a		 jne	 SHORT $LN27@CheckQ_

; 728  :             return (FALSE);
; 729  :         else if (lh_mi > rh_mi)

  00032	3b fe		 cmp	 edi, esi
  00034	76 08		 jbe	 SHORT $LN6@CheckQ_

; 735  :     }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0003b	5b		 pop	 ebx
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN6@CheckQ_:

; 730  :             return (TRUE);
; 731  :         else if (lh_mi < rh_mi)

  0003e	72 0c		 jb	 SHORT $LN27@CheckQ_

; 732  :             return (FALSE);
; 733  :         else
; 734  :             return (lh_lo > rh_lo);

  00040	39 5d 14	 cmp	 DWORD PTR _uj_2$[ebp], ebx
  00043	5f		 pop	 edi
  00044	1b c0		 sbb	 eax, eax

; 735  :     }

  00046	5e		 pop	 esi
  00047	f7 d8		 neg	 eax
  00049	5b		 pop	 ebx
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN27@CheckQ_:
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	33 c0		 xor	 eax, eax
  00050	5b		 pop	 ebx
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?CheckQ_@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ENDP	; Palmtree::Math::Core::Internal::CheckQ_
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?AsumeQ_@Internal@Core@Math@Palmtree@@YAIIII@Z
_TEXT	SEGMENT
_uj$ = 8						; size = 4
_uj_1$ = 12						; size = 4
_v1$ = 16						; size = 4
?AsumeQ_@Internal@Core@Math@Palmtree@@YAIIII@Z PROC	; Palmtree::Math::Core::Internal::AsumeQ_, COMDAT

; 696  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  :         if (uj == v1)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _uj$[ebp]
  00006	8b 55 10	 mov	 edx, DWORD PTR _v1$[ebp]
  00009	3b ca		 cmp	 ecx, edx
  0000b	75 05		 jne	 SHORT $LN2@AsumeQ_

; 698  :             return (-1);

  0000d	83 c8 ff	 or	 eax, -1

; 708  :     }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
$LN2@AsumeQ_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  00012	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 262  :             return ((_UINT32_T)(t / v));

  00019	6a 00		 push	 0
  0001b	52		 push	 edx

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0001c	33 c0		 xor	 eax, eax
  0001e	0b 45 0c	 or	 eax, DWORD PTR _uj_1$[ebp]

; 262  :             return ((_UINT32_T)(t / v));

  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 __aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 708  :     }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?AsumeQ_@Internal@Core@Math@Palmtree@@YAIIII@Z ENDP	; Palmtree::Math::Core::Internal::AsumeQ_
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_2WORDS_ADCX
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADCX PROC					; COMDAT

; 2228 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2230 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00006	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2228 : {

  00009	56		 push	 esi

; 2230 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000a	8b 75 10	 mov	 esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0000d	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2230 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00012	8b 7d 14	 mov	 edi, DWORD PTR _zp$[ebp]
  00015	66 0f 38 f6 0e	 adcx	 ecx, DWORD PTR [esi]
  0001a	89 0f		 mov	 DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2231 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  0001c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0001f	66 0f 38 f6 4e
	04		 adcx	 ecx, DWORD PTR [esi+4]
  00025	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2267 :     return (c);

  00028	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00029	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2267 :     return (c);

  0002c	5e		 pop	 esi

; 2268 : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
__ADD_2WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_2WORDS_ADC
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADC PROC					; COMDAT

; 2185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2187 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00006	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2185 : {

  00009	56		 push	 esi

; 2187 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000a	8b 75 10	 mov	 esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0000d	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2187 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00012	8b 7d 14	 mov	 edi, DWORD PTR _zp$[ebp]
  00015	13 0e		 adc	 ecx, DWORD PTR [esi]
  00017	89 0f		 mov	 DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2188 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00019	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0001c	13 4e 04	 adc	 ecx, DWORD PTR [esi+4]
  0001f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2224 :     return (c);

  00022	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00023	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2224 :     return (c);

  00026	5e		 pop	 esi

; 2225 : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__ADD_2WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_4WORDS_ADCX
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADCX PROC					; COMDAT

; 2014 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2016 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00006	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2014 : {

  00009	56		 push	 esi

; 2016 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000a	8b 75 10	 mov	 esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0000d	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2016 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00012	8b 7d 14	 mov	 edi, DWORD PTR _zp$[ebp]
  00015	66 0f 38 f6 0e	 adcx	 ecx, DWORD PTR [esi]
  0001a	89 0f		 mov	 DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2017 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  0001c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0001f	66 0f 38 f6 46
	04		 adcx	 eax, DWORD PTR [esi+4]
  00025	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2018 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00028	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0002b	66 0f 38 f6 46
	08		 adcx	 eax, DWORD PTR [esi+8]
  00031	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2019 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  00034	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00037	66 0f 38 f6 4e
	0c		 adcx	 ecx, DWORD PTR [esi+12]
  0003d	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2067 :     return (c);

  00040	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00041	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2067 :     return (c);

  00044	5e		 pop	 esi

; 2068 : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
__ADD_4WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_4WORDS_ADC
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADC PROC					; COMDAT

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1959 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00006	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1957 : {

  00009	56		 push	 esi

; 1959 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000a	8b 75 10	 mov	 esi, DWORD PTR _yp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0000d	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1959 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00012	8b 7d 14	 mov	 edi, DWORD PTR _zp$[ebp]
  00015	13 0e		 adc	 ecx, DWORD PTR [esi]
  00017	89 0f		 mov	 DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1960 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00019	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0001c	13 46 04	 adc	 eax, DWORD PTR [esi+4]
  0001f	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1961 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00022	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00025	13 46 08	 adc	 eax, DWORD PTR [esi+8]
  00028	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1962 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0002b	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0002e	13 4e 0c	 adc	 ecx, DWORD PTR [esi+12]
  00031	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2010 :     return (c);

  00034	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00035	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2010 :     return (c);

  00038	5e		 pop	 esi

; 2011 : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
__ADD_4WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_8WORDS_ADCX
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADCX PROC					; COMDAT

; 1702 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1703 : #ifdef _MSC_VER
; 1704 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00006	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1702 : {

  0000b	56		 push	 esi

; 1703 : #ifdef _MSC_VER
; 1704 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000c	8b 75 10	 mov	 esi, DWORD PTR _yp$[ebp]
  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00012	8b 7d 14	 mov	 edi, DWORD PTR _zp$[ebp]
  00015	66 0f 38 f6 0e	 adcx	 ecx, DWORD PTR [esi]
  0001a	89 0f		 mov	 DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1705 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  0001c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0001f	66 0f 38 f6 46
	04		 adcx	 eax, DWORD PTR [esi+4]
  00025	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1706 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00028	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0002b	66 0f 38 f6 46
	08		 adcx	 eax, DWORD PTR [esi+8]
  00031	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1707 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  00034	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00037	66 0f 38 f6 46
	0c		 adcx	 eax, DWORD PTR [esi+12]
  0003d	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1708 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00040	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00043	66 0f 38 f6 46
	10		 adcx	 eax, DWORD PTR [esi+16]
  00049	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1709 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  0004c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0004f	66 0f 38 f6 46
	14		 adcx	 eax, DWORD PTR [esi+20]
  00055	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1710 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00058	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0005b	66 0f 38 f6 46
	18		 adcx	 eax, DWORD PTR [esi+24]
  00061	89 47 18	 mov	 DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1711 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00064	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00067	66 0f 38 f6 4e
	1c		 adcx	 ecx, DWORD PTR [esi+28]
  0006d	89 4f 1c	 mov	 DWORD PTR [edi+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1783 :     return (c);

  00070	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00071	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1783 :     return (c);

  00074	5e		 pop	 esi

; 1784 : }

  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
__ADD_8WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_8WORDS_ADC
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADC PROC					; COMDAT

; 1617 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1618 : #ifdef _MSC_VER
; 1619 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00006	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1617 : {

  0000b	56		 push	 esi

; 1618 : #ifdef _MSC_VER
; 1619 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000c	8b 75 10	 mov	 esi, DWORD PTR _yp$[ebp]
  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00012	8b 7d 14	 mov	 edi, DWORD PTR _zp$[ebp]
  00015	13 0e		 adc	 ecx, DWORD PTR [esi]
  00017	89 0f		 mov	 DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1620 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00019	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0001c	13 46 04	 adc	 eax, DWORD PTR [esi+4]
  0001f	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1621 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00022	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00025	13 46 08	 adc	 eax, DWORD PTR [esi+8]
  00028	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1622 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0002b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0002e	13 46 0c	 adc	 eax, DWORD PTR [esi+12]
  00031	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1623 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  00034	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00037	13 46 10	 adc	 eax, DWORD PTR [esi+16]
  0003a	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1624 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  0003d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00040	13 46 14	 adc	 eax, DWORD PTR [esi+20]
  00043	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1625 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00046	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00049	13 46 18	 adc	 eax, DWORD PTR [esi+24]
  0004c	89 47 18	 mov	 DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1626 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  0004f	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00052	13 4e 1c	 adc	 ecx, DWORD PTR [esi+28]
  00055	89 4f 1c	 mov	 DWORD PTR [edi+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1698 :     return (c);

  00058	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00059	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1698 :     return (c);

  0005c	5e		 pop	 esi

; 1699 : }

  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
__ADD_8WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_16WORDS_ADCX
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADCX PROC					; COMDAT

; 1194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1195 : #ifdef _MSC_VER
; 1196 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00006	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1194 : {

  0000b	56		 push	 esi

; 1195 : #ifdef _MSC_VER
; 1196 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000c	8b 75 10	 mov	 esi, DWORD PTR _yp$[ebp]
  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00012	8b 7d 14	 mov	 edi, DWORD PTR _zp$[ebp]
  00015	66 0f 38 f6 0e	 adcx	 ecx, DWORD PTR [esi]
  0001a	89 0f		 mov	 DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1197 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  0001c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0001f	66 0f 38 f6 46
	04		 adcx	 eax, DWORD PTR [esi+4]
  00025	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1198 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00028	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0002b	66 0f 38 f6 46
	08		 adcx	 eax, DWORD PTR [esi+8]
  00031	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1199 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  00034	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00037	66 0f 38 f6 46
	0c		 adcx	 eax, DWORD PTR [esi+12]
  0003d	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1200 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00040	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00043	66 0f 38 f6 46
	10		 adcx	 eax, DWORD PTR [esi+16]
  00049	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1201 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  0004c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0004f	66 0f 38 f6 46
	14		 adcx	 eax, DWORD PTR [esi+20]
  00055	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1202 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00058	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0005b	66 0f 38 f6 46
	18		 adcx	 eax, DWORD PTR [esi+24]
  00061	89 47 18	 mov	 DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1203 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00064	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00067	66 0f 38 f6 46
	1c		 adcx	 eax, DWORD PTR [esi+28]
  0006d	89 47 1c	 mov	 DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1204 :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  00070	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00073	66 0f 38 f6 46
	20		 adcx	 eax, DWORD PTR [esi+32]
  00079	89 47 20	 mov	 DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1205 :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  0007c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0007f	66 0f 38 f6 46
	24		 adcx	 eax, DWORD PTR [esi+36]
  00085	89 47 24	 mov	 DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1206 :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  00088	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0008b	66 0f 38 f6 46
	28		 adcx	 eax, DWORD PTR [esi+40]
  00091	89 47 28	 mov	 DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1207 :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  00094	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00097	66 0f 38 f6 46
	2c		 adcx	 eax, DWORD PTR [esi+44]
  0009d	89 47 2c	 mov	 DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1208 :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  000a0	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000a3	66 0f 38 f6 46
	30		 adcx	 eax, DWORD PTR [esi+48]
  000a9	89 47 30	 mov	 DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1209 :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  000ac	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000af	66 0f 38 f6 46
	34		 adcx	 eax, DWORD PTR [esi+52]
  000b5	89 47 34	 mov	 DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1210 :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  000b8	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000bb	66 0f 38 f6 46
	38		 adcx	 eax, DWORD PTR [esi+56]
  000c1	89 47 38	 mov	 DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1211 :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  000c4	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000c7	66 0f 38 f6 4e
	3c		 adcx	 ecx, DWORD PTR [esi+60]
  000cd	89 4f 3c	 mov	 DWORD PTR [edi+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1331 :     return (c);

  000d0	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000d1	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1331 :     return (c);

  000d4	5e		 pop	 esi

; 1332 : }

  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
__ADD_16WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_16WORDS_ADC
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADC PROC					; COMDAT

; 1053 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1054 : #ifdef _MSC_VER
; 1055 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00006	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1053 : {

  0000b	56		 push	 esi

; 1054 : #ifdef _MSC_VER
; 1055 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000c	8b 75 10	 mov	 esi, DWORD PTR _yp$[ebp]
  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00012	8b 7d 14	 mov	 edi, DWORD PTR _zp$[ebp]
  00015	13 0e		 adc	 ecx, DWORD PTR [esi]
  00017	89 0f		 mov	 DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1056 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00019	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0001c	13 46 04	 adc	 eax, DWORD PTR [esi+4]
  0001f	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1057 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00022	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00025	13 46 08	 adc	 eax, DWORD PTR [esi+8]
  00028	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1058 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0002b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0002e	13 46 0c	 adc	 eax, DWORD PTR [esi+12]
  00031	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1059 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  00034	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00037	13 46 10	 adc	 eax, DWORD PTR [esi+16]
  0003a	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  0003d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00040	13 46 14	 adc	 eax, DWORD PTR [esi+20]
  00043	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00046	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00049	13 46 18	 adc	 eax, DWORD PTR [esi+24]
  0004c	89 47 18	 mov	 DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  0004f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00052	13 46 1c	 adc	 eax, DWORD PTR [esi+28]
  00055	89 47 1c	 mov	 DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  00058	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0005b	13 46 20	 adc	 eax, DWORD PTR [esi+32]
  0005e	89 47 20	 mov	 DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  00061	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00064	13 46 24	 adc	 eax, DWORD PTR [esi+36]
  00067	89 47 24	 mov	 DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  0006a	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0006d	13 46 28	 adc	 eax, DWORD PTR [esi+40]
  00070	89 47 28	 mov	 DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  00073	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00076	13 46 2c	 adc	 eax, DWORD PTR [esi+44]
  00079	89 47 2c	 mov	 DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  0007c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0007f	13 46 30	 adc	 eax, DWORD PTR [esi+48]
  00082	89 47 30	 mov	 DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  00085	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00088	13 46 34	 adc	 eax, DWORD PTR [esi+52]
  0008b	89 47 34	 mov	 DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  0008e	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00091	13 46 38	 adc	 eax, DWORD PTR [esi+56]
  00094	89 47 38	 mov	 DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  00097	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0009a	13 4e 3c	 adc	 ecx, DWORD PTR [esi+60]
  0009d	89 4f 3c	 mov	 DWORD PTR [edi+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1190 :     return (c);

  000a0	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000a1	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1190 :     return (c);

  000a4	5e		 pop	 esi

; 1191 : }

  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
__ADD_16WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_32WORDS_ADCX
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADCX PROC					; COMDAT

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 295  : #ifdef _MSC_VER
; 296  :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00006	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 294  : {

  0000b	56		 push	 esi

; 295  : #ifdef _MSC_VER
; 296  :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000c	8b 75 10	 mov	 esi, DWORD PTR _yp$[ebp]
  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00012	8b 7d 14	 mov	 edi, DWORD PTR _zp$[ebp]
  00015	66 0f 38 f6 0e	 adcx	 ecx, DWORD PTR [esi]
  0001a	89 0f		 mov	 DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 297  :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  0001c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0001f	66 0f 38 f6 46
	04		 adcx	 eax, DWORD PTR [esi+4]
  00025	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 298  :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00028	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0002b	66 0f 38 f6 46
	08		 adcx	 eax, DWORD PTR [esi+8]
  00031	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 299  :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  00034	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00037	66 0f 38 f6 46
	0c		 adcx	 eax, DWORD PTR [esi+12]
  0003d	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 300  :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00040	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00043	66 0f 38 f6 46
	10		 adcx	 eax, DWORD PTR [esi+16]
  00049	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 301  :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  0004c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0004f	66 0f 38 f6 46
	14		 adcx	 eax, DWORD PTR [esi+20]
  00055	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 302  :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00058	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0005b	66 0f 38 f6 46
	18		 adcx	 eax, DWORD PTR [esi+24]
  00061	89 47 18	 mov	 DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 303  :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00064	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00067	66 0f 38 f6 46
	1c		 adcx	 eax, DWORD PTR [esi+28]
  0006d	89 47 1c	 mov	 DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 304  :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  00070	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00073	66 0f 38 f6 46
	20		 adcx	 eax, DWORD PTR [esi+32]
  00079	89 47 20	 mov	 DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 305  :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  0007c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0007f	66 0f 38 f6 46
	24		 adcx	 eax, DWORD PTR [esi+36]
  00085	89 47 24	 mov	 DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 306  :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  00088	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0008b	66 0f 38 f6 46
	28		 adcx	 eax, DWORD PTR [esi+40]
  00091	89 47 28	 mov	 DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 307  :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  00094	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00097	66 0f 38 f6 46
	2c		 adcx	 eax, DWORD PTR [esi+44]
  0009d	89 47 2c	 mov	 DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 308  :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  000a0	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000a3	66 0f 38 f6 46
	30		 adcx	 eax, DWORD PTR [esi+48]
  000a9	89 47 30	 mov	 DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 309  :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  000ac	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000af	66 0f 38 f6 46
	34		 adcx	 eax, DWORD PTR [esi+52]
  000b5	89 47 34	 mov	 DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 310  :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  000b8	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000bb	66 0f 38 f6 46
	38		 adcx	 eax, DWORD PTR [esi+56]
  000c1	89 47 38	 mov	 DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 311  :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  000c4	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000c7	66 0f 38 f6 46
	3c		 adcx	 eax, DWORD PTR [esi+60]
  000cd	89 47 3c	 mov	 DWORD PTR [edi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 312  :     c = _ADDX_UNIT(c, xp[16], yp[16], &zp[16]);

  000d0	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000d3	66 0f 38 f6 46
	40		 adcx	 eax, DWORD PTR [esi+64]
  000d9	89 47 40	 mov	 DWORD PTR [edi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 313  :     c = _ADDX_UNIT(c, xp[17], yp[17], &zp[17]);

  000dc	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000df	66 0f 38 f6 46
	44		 adcx	 eax, DWORD PTR [esi+68]
  000e5	89 47 44	 mov	 DWORD PTR [edi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 314  :     c = _ADDX_UNIT(c, xp[18], yp[18], &zp[18]);

  000e8	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000eb	66 0f 38 f6 46
	48		 adcx	 eax, DWORD PTR [esi+72]
  000f1	89 47 48	 mov	 DWORD PTR [edi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 315  :     c = _ADDX_UNIT(c, xp[19], yp[19], &zp[19]);

  000f4	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000f7	66 0f 38 f6 46
	4c		 adcx	 eax, DWORD PTR [esi+76]
  000fd	89 47 4c	 mov	 DWORD PTR [edi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 316  :     c = _ADDX_UNIT(c, xp[20], yp[20], &zp[20]);

  00100	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00103	66 0f 38 f6 46
	50		 adcx	 eax, DWORD PTR [esi+80]
  00109	89 47 50	 mov	 DWORD PTR [edi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 317  :     c = _ADDX_UNIT(c, xp[21], yp[21], &zp[21]);

  0010c	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0010f	66 0f 38 f6 46
	54		 adcx	 eax, DWORD PTR [esi+84]
  00115	89 47 54	 mov	 DWORD PTR [edi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 318  :     c = _ADDX_UNIT(c, xp[22], yp[22], &zp[22]);

  00118	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0011b	66 0f 38 f6 46
	58		 adcx	 eax, DWORD PTR [esi+88]
  00121	89 47 58	 mov	 DWORD PTR [edi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 319  :     c = _ADDX_UNIT(c, xp[23], yp[23], &zp[23]);

  00124	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00127	66 0f 38 f6 46
	5c		 adcx	 eax, DWORD PTR [esi+92]
  0012d	89 47 5c	 mov	 DWORD PTR [edi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 320  :     c = _ADDX_UNIT(c, xp[24], yp[24], &zp[24]);

  00130	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00133	66 0f 38 f6 46
	60		 adcx	 eax, DWORD PTR [esi+96]
  00139	89 47 60	 mov	 DWORD PTR [edi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 321  :     c = _ADDX_UNIT(c, xp[25], yp[25], &zp[25]);

  0013c	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0013f	66 0f 38 f6 46
	64		 adcx	 eax, DWORD PTR [esi+100]
  00145	89 47 64	 mov	 DWORD PTR [edi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 322  :     c = _ADDX_UNIT(c, xp[26], yp[26], &zp[26]);

  00148	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0014b	66 0f 38 f6 46
	68		 adcx	 eax, DWORD PTR [esi+104]
  00151	89 47 68	 mov	 DWORD PTR [edi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 323  :     c = _ADDX_UNIT(c, xp[27], yp[27], &zp[27]);

  00154	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00157	66 0f 38 f6 46
	6c		 adcx	 eax, DWORD PTR [esi+108]
  0015d	89 47 6c	 mov	 DWORD PTR [edi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 324  :     c = _ADDX_UNIT(c, xp[28], yp[28], &zp[28]);

  00160	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00163	66 0f 38 f6 46
	70		 adcx	 eax, DWORD PTR [esi+112]
  00169	89 47 70	 mov	 DWORD PTR [edi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 325  :     c = _ADDX_UNIT(c, xp[29], yp[29], &zp[29]);

  0016c	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0016f	66 0f 38 f6 46
	74		 adcx	 eax, DWORD PTR [esi+116]
  00175	89 47 74	 mov	 DWORD PTR [edi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 326  :     c = _ADDX_UNIT(c, xp[30], yp[30], &zp[30]);

  00178	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0017b	66 0f 38 f6 46
	78		 adcx	 eax, DWORD PTR [esi+120]
  00181	89 47 78	 mov	 DWORD PTR [edi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 327  :     c = _ADDX_UNIT(c, xp[31], yp[31], &zp[31]);

  00184	8b 4a 7c	 mov	 ecx, DWORD PTR [edx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00187	66 0f 38 f6 4e
	7c		 adcx	 ecx, DWORD PTR [esi+124]
  0018d	89 4f 7c	 mov	 DWORD PTR [edi+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 543  :     return (c);

  00190	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00191	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 543  :     return (c);

  00194	5e		 pop	 esi

; 544  : }

  00195	5d		 pop	 ebp
  00196	c3		 ret	 0
__ADD_32WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT __ADD_32WORDS_ADC
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADC PROC					; COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : #ifdef _MSC_VER
; 43   :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00003	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00006	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 41   : {

  0000b	56		 push	 esi

; 42   : #ifdef _MSC_VER
; 43   :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000c	8b 75 10	 mov	 esi, DWORD PTR _yp$[ebp]
  0000f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00011	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00012	8b 7d 14	 mov	 edi, DWORD PTR _zp$[ebp]
  00015	13 0e		 adc	 ecx, DWORD PTR [esi]
  00017	89 0f		 mov	 DWORD PTR [edi], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 44   :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00019	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0001c	13 46 04	 adc	 eax, DWORD PTR [esi+4]
  0001f	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 45   :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00022	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00025	13 46 08	 adc	 eax, DWORD PTR [esi+8]
  00028	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 46   :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0002b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0002e	13 46 0c	 adc	 eax, DWORD PTR [esi+12]
  00031	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 47   :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  00034	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00037	13 46 10	 adc	 eax, DWORD PTR [esi+16]
  0003a	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 48   :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  0003d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00040	13 46 14	 adc	 eax, DWORD PTR [esi+20]
  00043	89 47 14	 mov	 DWORD PTR [edi+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 49   :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00046	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00049	13 46 18	 adc	 eax, DWORD PTR [esi+24]
  0004c	89 47 18	 mov	 DWORD PTR [edi+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 50   :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  0004f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00052	13 46 1c	 adc	 eax, DWORD PTR [esi+28]
  00055	89 47 1c	 mov	 DWORD PTR [edi+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 51   :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  00058	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0005b	13 46 20	 adc	 eax, DWORD PTR [esi+32]
  0005e	89 47 20	 mov	 DWORD PTR [edi+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 52   :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  00061	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00064	13 46 24	 adc	 eax, DWORD PTR [esi+36]
  00067	89 47 24	 mov	 DWORD PTR [edi+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 53   :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  0006a	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0006d	13 46 28	 adc	 eax, DWORD PTR [esi+40]
  00070	89 47 28	 mov	 DWORD PTR [edi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 54   :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  00073	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00076	13 46 2c	 adc	 eax, DWORD PTR [esi+44]
  00079	89 47 2c	 mov	 DWORD PTR [edi+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 55   :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  0007c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0007f	13 46 30	 adc	 eax, DWORD PTR [esi+48]
  00082	89 47 30	 mov	 DWORD PTR [edi+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 56   :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  00085	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00088	13 46 34	 adc	 eax, DWORD PTR [esi+52]
  0008b	89 47 34	 mov	 DWORD PTR [edi+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 57   :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  0008e	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00091	13 46 38	 adc	 eax, DWORD PTR [esi+56]
  00094	89 47 38	 mov	 DWORD PTR [edi+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 58   :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  00097	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0009a	13 46 3c	 adc	 eax, DWORD PTR [esi+60]
  0009d	89 47 3c	 mov	 DWORD PTR [edi+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 59   :     c = _ADD_UNIT(c, xp[16], yp[16], &zp[16]);

  000a0	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000a3	13 46 40	 adc	 eax, DWORD PTR [esi+64]
  000a6	89 47 40	 mov	 DWORD PTR [edi+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 60   :     c = _ADD_UNIT(c, xp[17], yp[17], &zp[17]);

  000a9	8b 42 44	 mov	 eax, DWORD PTR [edx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000ac	13 46 44	 adc	 eax, DWORD PTR [esi+68]
  000af	89 47 44	 mov	 DWORD PTR [edi+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 61   :     c = _ADD_UNIT(c, xp[18], yp[18], &zp[18]);

  000b2	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000b5	13 46 48	 adc	 eax, DWORD PTR [esi+72]
  000b8	89 47 48	 mov	 DWORD PTR [edi+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 62   :     c = _ADD_UNIT(c, xp[19], yp[19], &zp[19]);

  000bb	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000be	13 46 4c	 adc	 eax, DWORD PTR [esi+76]
  000c1	89 47 4c	 mov	 DWORD PTR [edi+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 63   :     c = _ADD_UNIT(c, xp[20], yp[20], &zp[20]);

  000c4	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000c7	13 46 50	 adc	 eax, DWORD PTR [esi+80]
  000ca	89 47 50	 mov	 DWORD PTR [edi+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 64   :     c = _ADD_UNIT(c, xp[21], yp[21], &zp[21]);

  000cd	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000d0	13 46 54	 adc	 eax, DWORD PTR [esi+84]
  000d3	89 47 54	 mov	 DWORD PTR [edi+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 65   :     c = _ADD_UNIT(c, xp[22], yp[22], &zp[22]);

  000d6	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000d9	13 46 58	 adc	 eax, DWORD PTR [esi+88]
  000dc	89 47 58	 mov	 DWORD PTR [edi+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 66   :     c = _ADD_UNIT(c, xp[23], yp[23], &zp[23]);

  000df	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000e2	13 46 5c	 adc	 eax, DWORD PTR [esi+92]
  000e5	89 47 5c	 mov	 DWORD PTR [edi+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 67   :     c = _ADD_UNIT(c, xp[24], yp[24], &zp[24]);

  000e8	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000eb	13 46 60	 adc	 eax, DWORD PTR [esi+96]
  000ee	89 47 60	 mov	 DWORD PTR [edi+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 68   :     c = _ADD_UNIT(c, xp[25], yp[25], &zp[25]);

  000f1	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000f4	13 46 64	 adc	 eax, DWORD PTR [esi+100]
  000f7	89 47 64	 mov	 DWORD PTR [edi+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 69   :     c = _ADD_UNIT(c, xp[26], yp[26], &zp[26]);

  000fa	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000fd	13 46 68	 adc	 eax, DWORD PTR [esi+104]
  00100	89 47 68	 mov	 DWORD PTR [edi+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 70   :     c = _ADD_UNIT(c, xp[27], yp[27], &zp[27]);

  00103	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00106	13 46 6c	 adc	 eax, DWORD PTR [esi+108]
  00109	89 47 6c	 mov	 DWORD PTR [edi+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 71   :     c = _ADD_UNIT(c, xp[28], yp[28], &zp[28]);

  0010c	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0010f	13 46 70	 adc	 eax, DWORD PTR [esi+112]
  00112	89 47 70	 mov	 DWORD PTR [edi+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 72   :     c = _ADD_UNIT(c, xp[29], yp[29], &zp[29]);

  00115	8b 42 74	 mov	 eax, DWORD PTR [edx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00118	13 46 74	 adc	 eax, DWORD PTR [esi+116]
  0011b	89 47 74	 mov	 DWORD PTR [edi+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 73   :     c = _ADD_UNIT(c, xp[30], yp[30], &zp[30]);

  0011e	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00121	13 46 78	 adc	 eax, DWORD PTR [esi+120]
  00124	89 47 78	 mov	 DWORD PTR [edi+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 74   :     c = _ADD_UNIT(c, xp[31], yp[31], &zp[31]);

  00127	8b 4a 7c	 mov	 ecx, DWORD PTR [edx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0012a	13 4e 7c	 adc	 ecx, DWORD PTR [esi+124]
  0012d	89 4f 7c	 mov	 DWORD PTR [edi+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 290  :     return (c);

  00130	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00131	0f 92 c0	 setb	 al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 290  :     return (c);

  00134	5e		 pop	 esi

; 291  : }

  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
__ADD_32WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 454  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 455  :             if (x == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 456  :                 return (sizeof(x) * 8);

  0000a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H

; 480  :         }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN2@LZCNT_ALT_:

; 457  : #ifdef _M_IX86
; 458  :             DWORD pos;
; 459  : #ifdef _MSC_VER
; 460  :             _BitScanReverse(&pos, x);

  00011	0f bd c8	 bsr	 ecx, eax

; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);
; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  00014	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  00019	2b c1		 sub	 eax, ecx

; 480  :         }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 421  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 422  :             if (x == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 423  :                 return (sizeof(x) * 8);

  0000a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H

; 433  :         }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN2@LZCNT_ALT_:

; 424  :             DWORD pos;
; 425  : #ifdef _MSC_VER
; 426  :             _BitScanReverse(&pos, x);

  00011	0f bd c8	 bsr	 ecx, eax

; 427  : #elif defined(__GNUC__)
; 428  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 429  : #else
; 430  : #error unknown compiler
; 431  : #endif
; 432  :             return (sizeof(x) * 8 - 1 - pos);

  00014	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  00019	2b c1		 sub	 eax, ecx

; 433  :         }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVREM_SINGLE_UNIT
_TEXT	SEGMENT
tv69 = -8						; size = 8
tv68 = -8						; size = 8
_r$ = 8							; size = 4
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_q$ = 20						; size = 4
__DIVREM_SINGLE_UNIT PROC				; COMDAT

; 290  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00006	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	0b 4d 0c	 or	 ecx, DWORD PTR _u$[ebp]

; 290  :         {

  0000e	53		 push	 ebx

; 291  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 292  :             _UINT64_T t = _FROMWORDTODWORD(r, u);
; 293  :             *q = (_UINT32_T)(t / v);

  0000f	53		 push	 ebx
  00010	6a 00		 push	 0
  00012	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 __aulldvrm
  0001c	89 5d fc	 mov	 DWORD PTR tv69[ebp+4], ebx
  0001f	5b		 pop	 ebx
  00020	89 55 fc	 mov	 DWORD PTR tv68[ebp+4], edx
  00023	8b 55 14	 mov	 edx, DWORD PTR _q$[ebp]

; 294  :             return ((_UINT32_T)(t % v));

  00026	5b		 pop	 ebx
  00027	89 02		 mov	 DWORD PTR [edx], eax
  00029	8b c1		 mov	 eax, ecx

; 295  :         }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
__DIVREM_SINGLE_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVREM_UNIT
_TEXT	SEGMENT
tv69 = -8						; size = 8
tv68 = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC					; COMDAT

; 258  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00006	8b 45 08	 mov	 eax, DWORD PTR _u_high$[ebp]
  00009	33 c9		 xor	 ecx, ecx
  0000b	0b 4d 0c	 or	 ecx, DWORD PTR _u_low$[ebp]

; 258  :         {

  0000e	53		 push	 ebx

; 259  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 260  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 261  :             *r = (_UINT32_T)(t % v);

  0000f	53		 push	 ebx
  00010	6a 00		 push	 0
  00012	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 __aulldvrm
  0001c	89 5d fc	 mov	 DWORD PTR tv68[ebp+4], ebx
  0001f	5b		 pop	 ebx
  00020	89 55 fc	 mov	 DWORD PTR tv69[ebp+4], edx
  00023	8b 55 14	 mov	 edx, DWORD PTR _r$[ebp]

; 262  :             return ((_UINT32_T)(t / v));

  00026	5b		 pop	 ebx
  00027	89 0a		 mov	 DWORD PTR [edx], ecx

; 263  :         }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLYX_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC					; COMDAT

; 228  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  : #ifdef _MSC_VER
; 230  : #ifdef _M_IX86
; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00006	f7 65 0c	 mul	 DWORD PTR _v$[ebp]

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR _w_hi$[ebp]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 232  : #elif defined(_M_X64)
; 233  :             return (_mulx_u64(u, v, w_hi));
; 234  : #else
; 235  : #error unknown platform
; 236  : #endif
; 237  : #elif defined(__GNUC__)
; 238  : #ifdef _M_IX86
; 239  :             _UINT32_T w_lo;
; 240  :             __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 241  :             return (w_lo);
; 242  : #elif defined(_M_X64)
; 243  :             _UINT64_T w_lo;
; 244  :             __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 245  :             return (w_lo);
; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  : #else
; 250  : #error unknown compiler
; 251  : #endif
; 252  :         }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLY_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC					; COMDAT

; 209  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 210  : #ifdef _M_IX86
; 211  : #ifdef _MSC_VER
; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00006	f7 65 0c	 mul	 DWORD PTR _v$[ebp]

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR _w_hi$[ebp]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 213  : #elif defined(__GNUC__)
; 214  :             _UINT32_T w_lo;
; 215  :             __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 216  :             return (w_lo);
; 217  : #else
; 218  : #error unknown compiler
; 219  : #endif
; 220  : #elif defined(_M_X64)
; 221  :             return (_umul128(u, v, w_hi));
; 222  : #else
; 223  : #error unknown platform
; 224  : #endif
; 225  :         }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __SUBTRUCT_UNIT
_TEXT	SEGMENT
_borrow$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__SUBTRUCT_UNIT PROC					; COMDAT

; 198  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 199  : #ifdef _M_IX86
; 200  :             return (_subborrow_u32(borrow, u, v, w));

  00003	8a 45 08	 mov	 al, BYTE PTR _borrow$[ebp]
  00006	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp]
  0000e	1b 4d 10	 sbb	 ecx, DWORD PTR _v$[ebp]
  00011	0f 92 c0	 setb	 al
  00014	89 0a		 mov	 DWORD PTR [edx], ecx

; 201  : #elif defined(_M_X64)
; 202  :             return (_subborrow_u64(borrow, u, v, w));
; 203  : #else
; 204  : #error unknown platform
; 205  : #endif
; 206  :         }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
__SUBTRUCT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADDX_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC					; COMDAT

; 187  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00003	8a 45 08	 mov	 al, BYTE PTR _carry$[ebp]
  00006	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp]
  0000e	66 0f 38 f6 4d
	10		 adcx	 ecx, DWORD PTR _v$[ebp]
  00014	0f 92 c0	 setb	 al
  00017	89 0a		 mov	 DWORD PTR [edx], ecx

; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));
; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADD_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC						; COMDAT

; 176  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));

  00003	8a 45 08	 mov	 al, BYTE PTR _carry$[ebp]
  00006	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp]
  0000e	13 4d 10	 adc	 ecx, DWORD PTR _v$[ebp]
  00011	0f 92 c0	 setb	 al
  00014	89 0a		 mov	 DWORD PTR [edx], ecx

; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));
; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 145  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  00003	8b 45 10	 mov	 eax, DWORD PTR _result_high$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 147  :             return ((_UINT32_T)value);

  0000b	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 148  :         }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMWORDTODWORD
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC					; COMDAT

; 140  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00003	8b 55 08	 mov	 edx, DWORD PTR _value_high$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	0b 45 0c	 or	 eax, DWORD PTR _value_low$[ebp]

; 142  :         }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _count$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  0000e	f3 a5		 rep movsd
  00010	5f		 pop	 edi
  00011	5e		 pop	 esi

; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);
; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI64Counter, COMDAT

; 359  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  00003	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A ; Palmtree::Math::Core::Internal::statistics_info
  0000b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 361  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI32Counter, COMDAT

; 353  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00003	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00006	b9 04 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  0000b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 355  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToDIV64Counter, COMDAT

; 347  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

  00003	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00006	b9 08 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+8
  0000b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 349  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToDIV64Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToDIV32Counter, COMDAT

; 341  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  00003	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00006	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  0000b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 343  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToDIV32Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter, COMDAT

; 337  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  00000	f0 ff 05 00 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A

; 338  :     }

  00007	c3		 ret	 0
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter, COMDAT

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  00000	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4

; 332  :     }

  00007	c3		 ret	 0
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementDIV64Counter, COMDAT

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

  00000	f0 ff 05 08 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+8

; 326  :     }

  00007	c3		 ret	 0
?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementDIV64Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementDIV32Counter, COMDAT

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  00000	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12

; 320  :     }

  00007	c3		 ret	 0
?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
$T3 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X, COMDAT

; 2188 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2189 :         if (u == nullptr)

  00028	8b 7d 08	 mov	 edi, DWORD PTR _u$[ebp]
  0002b	85 ff		 test	 edi, edi
  0002d	0f 84 ca 00 00
	00		 je	 $LN15@PMC_DivRem

; 2191 :         if (v == nullptr)

  00033	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00036	85 f6		 test	 esi, esi
  00038	75 0a		 jne	 SHORT $LN3@PMC_DivRem

; 2192 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_13JAOPNPKD@?$AAv@
  0003f	e9 be 00 00 00	 jmp	 $LN12@PMC_DivRem
$LN3@PMC_DivRem:

; 2193 :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 2194 :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 2195 :         CheckNumber(nu);

  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 2196 :         CheckNumber(nv);

  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00050	83 c4 08	 add	 esp, 8

; 2197 :         if (nv->IS_ZERO)

  00053	f6 46 04 01	 test	 BYTE PTR [esi+4], 1
  00057	74 17		 je	 SHORT $LN4@PMC_DivRem

; 2198 :         {
; 2199 :             // v が 0 である場合
; 2200 : 
; 2201 :             // 0 による除算はエラーで返す
; 2202 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  0005e	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00061	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  00066	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  0006b	e9 a4 00 00 00	 jmp	 $LN13@PMC_DivRem
$LN4@PMC_DivRem:

; 2203 :         }
; 2204 :         ResourceHolderUINT root;

  00070	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00073	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00078	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2205 :         NUMBER_HEADER* nq;
; 2206 :         NUMBER_HEADER* nr;
; 2207 : 
; 2208 :         if (q != nullptr)

  0007f	8b 5d 10	 mov	 ebx, DWORD PTR _q$[ebp]
  00082	85 db		 test	 ebx, ebx
  00084	74 32		 je	 SHORT $LN5@PMC_DivRem

; 2209 :         {
; 2210 :             nr = PMC_DivRem_X_X_Imp(nu, nv, &nq);

  00086	8d 45 08	 lea	 eax, DWORD PTR _nq$[ebp]
  00089	50		 push	 eax
  0008a	56		 push	 esi
  0008b	57		 push	 edi
  0008c	e8 00 00 00 00	 call	 ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp

; 2211 :             root.HookNumber(nq);

  00091	8b 75 08	 mov	 esi, DWORD PTR _nq$[ebp]
  00094	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	8b f8		 mov	 edi, eax
  0009c	56		 push	 esi
  0009d	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2212 :             root.HookNumber(nr);

  000a2	57		 push	 edi
  000a3	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000a6	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2213 : #ifdef _DEBUG
; 2214 :             CheckNumber(nq);
; 2215 :             CheckNumber(nr);
; 2216 : #endif
; 2217 :             root.UnlinkNumber(nq);

  000ab	56		 push	 esi
  000ac	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000af	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 2218 :             *q = (PMC_HANDLE_UINT)nq;

  000b4	89 33		 mov	 DWORD PTR [ebx], esi

; 2219 :             root.UnlinkNumber(nr);
; 2220 :         }
; 2221 :         else

  000b6	eb 17		 jmp	 SHORT $LN11@PMC_DivRem
$LN5@PMC_DivRem:

; 2222 :         {
; 2223 :             nr = PMC_DivRem_X_X_Imp(nu, nv, nullptr);

  000b8	6a 00		 push	 0
  000ba	56		 push	 esi
  000bb	57		 push	 edi
  000bc	e8 00 00 00 00	 call	 ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2224 :             root.HookNumber(nr);

  000c4	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000c7	8b f8		 mov	 edi, eax
  000c9	57		 push	 edi
  000ca	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
$LN11@PMC_DivRem:

; 2225 : #ifdef _DEBUG
; 2226 :             CheckNumber(nr);
; 2227 : #endif
; 2228 :             root.UnlinkNumber(nr);
; 2229 :         }
; 2230 : 
; 2231 :         return ((PMC_HANDLE_UINT)nr);

  000cf	57		 push	 edi
  000d0	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000d3	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
  000d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000df	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000e2	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000e7	8b c7		 mov	 eax, edi

; 2232 :     }

  000e9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ec	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f3	59		 pop	 ecx
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 0c 00	 ret	 12			; 0000000cH
$LN15@PMC_DivRem:

; 2190 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_13ICFKHAEN@?$AAu@
$LN12@PMC_DivRem:

; 2232 :     }

  00102	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00107	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  0010a	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0010f	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
$LN13@PMC_DivRem:
  00114	8d 45 cc	 lea	 eax, DWORD PTR $T3[ebp]
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@PMC_DivRem:
  0011d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_q$ = 20						; size = 4
?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L, COMDAT

; 2008 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2009 :         if (sizeof(__UNIT_TYPE) * 2 < sizeof(v))
; 2010 :         {
; 2011 :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 2012 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_X_L;1");
; 2013 :         }
; 2014 :         if (u == nullptr)

  00028	8b 75 08	 mov	 esi, DWORD PTR _u$[ebp]
  0002b	85 f6		 test	 esi, esi
  0002d	0f 84 b2 00 00
	00		 je	 $LN11@PMC_DivRem

; 2016 :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 2017 :         CheckNumber(nu);

  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00039	83 c4 04	 add	 esp, 4

; 2018 :         ResourceHolderUINT root;

  0003c	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0003f	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2019 :         NUMBER_HEADER* nq;
; 2020 :         if (q != nullptr)

  0004b	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  0004f	74 58		 je	 SHORT $LN4@PMC_DivRem

; 2021 :         {
; 2022 :             _UINT64_T r = PMC_DivRem_X_L_Imp(nu, v, &nq);

  00051	8d 45 08	 lea	 eax, DWORD PTR _nq$[ebp]
  00054	50		 push	 eax
  00055	ff 75 10	 push	 DWORD PTR _v$[ebp+4]
  00058	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp

; 2023 :             root.HookNumber(nq);

  00061	8b 75 08	 mov	 esi, DWORD PTR _nq$[ebp]
  00064	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00067	83 c4 10	 add	 esp, 16			; 00000010H
  0006a	8b f8		 mov	 edi, eax
  0006c	8b da		 mov	 ebx, edx
  0006e	56		 push	 esi
  0006f	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2024 : #ifdef _DEBUG
; 2025 :             CheckNumber(nq);
; 2026 : #endif
; 2027 :             *q = (PMC_HANDLE_UINT)nq;

  00074	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]

; 2028 :             root.UnlinkNumber(nq);

  00077	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0007a	56		 push	 esi
  0007b	89 30		 mov	 DWORD PTR [eax], esi
  0007d	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 2029 :             return (r);

  00082	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0008c	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00091	8b c7		 mov	 eax, edi
  00093	8b d3		 mov	 edx, ebx

; 2035 :         }
; 2036 :     }

  00095	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00098	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009f	59		 pop	 ecx
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 10 00	 ret	 16			; 00000010H
$LN4@PMC_DivRem:

; 2030 :         }
; 2031 :         else
; 2032 :         {
; 2033 :             _UINT64_T r = PMC_DivRem_X_L_Imp(nu, v, nullptr);

  000a9	6a 00		 push	 0
  000ab	ff 75 10	 push	 DWORD PTR _v$[ebp+4]
  000ae	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  000b1	56		 push	 esi
  000b2	e8 00 00 00 00	 call	 ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
  000b7	83 c4 10	 add	 esp, 16			; 00000010H

; 2034 :             return (r);

  000ba	8b f0		 mov	 esi, eax
  000bc	8b fa		 mov	 edi, edx
  000be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c5	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000c8	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000cd	8b c6		 mov	 eax, esi
  000cf	8b d7		 mov	 edx, edi

; 2035 :         }
; 2036 :     }

  000d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000db	59		 pop	 ecx
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c2 10 00	 ret	 16			; 00000010H
$LN11@PMC_DivRem:

; 2015 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_13ICFKHAEN@?$AAu@
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  000ef	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  000f2	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000f7	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000fc	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@PMC_DivRem:
  00105	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
$T3 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_nq$ = 8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I, COMDAT

; 1599 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1600 :         if (sizeof(__UNIT_TYPE) < sizeof(v))
; 1601 :         {
; 1602 :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1603 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_X_I;1");
; 1604 :         }
; 1605 :         if (u == nullptr)

  00028	8b 75 08	 mov	 esi, DWORD PTR _u$[ebp]
  0002b	85 f6		 test	 esi, esi
  0002d	0f 84 da 00 00
	00		 je	 $LN33@PMC_DivRem

; 1607 :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1608 :         CheckNumber(nu);

  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00039	83 c4 04	 add	 esp, 4

; 1609 :         ResourceHolderUINT root;

  0003c	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0003f	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1610 :         NUMBER_HEADER* nq;
; 1611 :         if (q != nullptr)

  0004b	8b 5d 10	 mov	 ebx, DWORD PTR _q$[ebp]
  0004e	85 db		 test	 ebx, ebx
  00050	74 4e		 je	 SHORT $LN4@PMC_DivRem

; 1612 :         {
; 1613 :             _UINT32_T r = PMC_DivRem_X_I_Imp(nu, v, &nq);

  00052	8d 45 08	 lea	 eax, DWORD PTR _nq$[ebp]
  00055	50		 push	 eax
  00056	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp

; 1614 :             root.HookNumber(nq);

  0005f	8b 75 08	 mov	 esi, DWORD PTR _nq$[ebp]
  00062	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH
  00068	8b f8		 mov	 edi, eax
  0006a	56		 push	 esi
  0006b	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 1615 : #ifdef _DEBUG
; 1616 :             CheckNumber(nq);
; 1617 : #endif
; 1618 :             *q = (PMC_HANDLE_UINT)nq;
; 1619 :             root.UnlinkNumber(nq);

  00070	56		 push	 esi
  00071	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00074	89 33		 mov	 DWORD PTR [ebx], esi
  00076	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1620 :             return (r);

  0007b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00082	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00085	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0008a	8b c7		 mov	 eax, edi

; 1626 :         }
; 1627 :     }

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 0c 00	 ret	 12			; 0000000cH
$LN4@PMC_DivRem:

; 1522 :         if (v == 0)

  000a0	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000a3	85 d2		 test	 edx, edx
  000a5	0f 84 82 00 00
	00		 je	 $LN34@PMC_DivRem

; 1528 :         }
; 1529 :         if (u->IS_ZERO)

  000ab	f6 46 04 01	 test	 BYTE PTR [esi+4], 1
  000af	74 04		 je	 SHORT $LN10@PMC_DivRem
$LN31@PMC_DivRem:

; 1621 :         }
; 1622 :         else
; 1623 :         {
; 1624 :             _UINT32_T r = PMC_DivRem_X_I_Imp(nu, v, nullptr);
; 1625 :             return (r);

  000b1	33 f6		 xor	 esi, esi
  000b3	eb 33		 jmp	 SHORT $LN20@PMC_DivRem
$LN10@PMC_DivRem:

; 1543 :             if (v == 1)

  000b5	83 fa 01	 cmp	 edx, 1
  000b8	74 f7		 je	 SHORT $LN31@PMC_DivRem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 426  :             _BitScanReverse(&pos, x);

  000ba	0f bd c2	 bsr	 eax, edx

; 427  : #elif defined(__GNUC__)
; 428  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 429  : #else
; 430  : #error unknown compiler
; 431  : #endif
; 432  :             return (sizeof(x) * 8 - 1 - pos);

  000bd	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  000c2	2b c8		 sub	 ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1558 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

  000c4	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000c9	2b c1		 sub	 eax, ecx

; 1559 :                 if (u_bit_count < v_bit_count)

  000cb	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  000ce	73 07		 jae	 SHORT $LN16@PMC_DivRem

; 1560 :                 {
; 1561 :                     // 明らかに u < v である場合
; 1562 : 
; 1563 :                     // q = 0, r = u を返す。
; 1564 :                     if (q != nullptr)
; 1565 :                         *q = &number_zero;
; 1566 :                     return ((_UINT32_T)u->BLOCK[0]);

  000d0	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000d3	8b 30		 mov	 esi, DWORD PTR [eax]
  000d5	eb 11		 jmp	 SHORT $LN20@PMC_DivRem
$LN16@PMC_DivRem:

; 1567 :                 }
; 1568 :                 else
; 1569 :                 {
; 1570 :                     if (q != nullptr)
; 1571 :                     {
; 1572 :                         ResourceHolderUINT root;
; 1573 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1574 :                         *q = root.AllocateNumber(q_bit_count);
; 1575 :                         __UNIT_TYPE r_buf = 0;
; 1576 :                         DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v, (*q)->BLOCK, &r_buf);
; 1577 :                         root.CheckNumber(*q);
; 1578 :                         CommitNumber(*q);
; 1579 :                         if ((*q)->IS_ZERO)
; 1580 :                         {
; 1581 :                             root.DeallocateNumber(*q);
; 1582 :                             *q = &number_zero;
; 1583 :                         }
; 1584 :                         else
; 1585 :                             root.UnlinkNumber(*q);
; 1586 :                         return ((_UINT32_T)r_buf);
; 1587 :                     }
; 1588 :                     else
; 1589 :                     {
; 1590 :                         __UNIT_TYPE r_buf = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v);

  000d7	52		 push	 edx
  000d8	ff 76 10	 push	 DWORD PTR [esi+16]
  000db	ff 76 24	 push	 DWORD PTR [esi+36]
  000de	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1591 :                         return ((_UINT32_T)r_buf);

  000e6	8b f0		 mov	 esi, eax
$LN20@PMC_DivRem:

; 1621 :         }
; 1622 :         else
; 1623 :         {
; 1624 :             _UINT32_T r = PMC_DivRem_X_I_Imp(nu, v, nullptr);
; 1625 :             return (r);

  000e8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ef	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000f2	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f7	8b c6		 mov	 eax, esi

; 1626 :         }
; 1627 :     }

  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00103	59		 pop	 ecx
  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c2 0c 00	 ret	 12			; 0000000cH
$LN33@PMC_DivRem:

; 1606 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_13ICFKHAEN@?$AAu@
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00117	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  0011a	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0011f	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00124	8d 45 cc	 lea	 eax, DWORD PTR $T3[ebp]
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN34@PMC_DivRem:

; 1527 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  00132	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00135	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  0013a	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  0013f	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN30@PMC_DivRem:
  00148	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@PA_K@Z
_TEXT	SEGMENT
_u_buf$1 = -56						; size = 8
_u_buf$2 = -56						; size = 8
tv423 = -52						; size = 4
_r_buf$3 = -52						; size = 4
_work_v_buf$4 = -48					; size = 8
_work_v_buf$5 = -48					; size = 8
_u_buf$6 = -48						; size = 8
_u_buf$7 = -48						; size = 8
$T8 = -40						; size = 24
$T9 = -40						; size = 24
_r_buf$10 = -28						; size = 12
_r_buf$11 = -28						; size = 12
_q_buf$12 = -16						; size = 12
_q_buf$13 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_q$ = 20						; size = 4
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@PA_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X, COMDAT

; 1630 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 10	 mov	 ebx, DWORD PTR _v$[ebp]
  00014	56		 push	 esi
  00015	8b 75 14	 mov	 esi, DWORD PTR _q$[ebp]
  00018	57		 push	 edi

; 1631 :         if (sizeof(__UNIT_TYPE) * 2 < sizeof(u))
; 1632 :         {
; 1633 :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1634 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_L_X;1");
; 1635 :         }
; 1636 :         if (v == nullptr)

  00019	85 db		 test	 ebx, ebx
  0001b	0f 84 5b 02 00
	00		 je	 $LN66@PMC_DivRem

; 1638 :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1639 :         CheckNumber(nv);

  00021	53		 push	 ebx
  00022	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 1640 :         if (nv->IS_ZERO)

  00027	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0002a	83 c4 04	 add	 esp, 4
  0002d	f6 c1 01	 test	 cl, 1
  00030	0f 85 66 02 00
	00		 jne	 $LN67@PMC_DivRem

; 1646 :         }
; 1647 :         if (u == 0)

  00036	8b 7d 08	 mov	 edi, DWORD PTR _u$[ebp]
  00039	8b c7		 mov	 eax, edi
  0003b	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp+4]
  0003e	0b c2		 or	 eax, edx
  00040	75 1e		 jne	 SHORT $LN5@PMC_DivRem

; 1648 :         {
; 1649 :             // x が 0 である場合
; 1650 : 
; 1651 :             // q = 0, r = 0 を返す
; 1652 :             if (q != nullptr)

  00042	85 f6		 test	 esi, esi
  00044	74 28		 je	 SHORT $LN10@PMC_DivRem

; 1653 :                 *q = 0;

  00046	5f		 pop	 edi
  00047	89 06		 mov	 DWORD PTR [esi], eax

; 1667 :                 return (0);

  00049	33 d2		 xor	 edx, edx
  0004b	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1772 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));
; 1773 :                                 }
; 1774 :                             }
; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :                 else
; 1779 :                 {
; 1780 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1781 : 
; 1782 :                     // x と y の商・剰余を計算する
; 1783 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1784 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1785 :                     if (u_bit_count < v_bit_count)
; 1786 :                     {
; 1787 :                         // 明らかに u < v である場合
; 1788 : 
; 1789 :                         // q = 0, r = u を返す。
; 1790 :                         if (q != nullptr)
; 1791 :                             *q = 0;
; 1792 :                         return (u);
; 1793 :                     }
; 1794 :                     else
; 1795 :                     {
; 1796 :                         // u のビット数が v のビット数以上である場合
; 1797 : 
; 1798 :                         // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1799 :                         __UNIT_TYPE temp_r;
; 1800 :                         __UNIT_TYPE temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE)u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);
; 1801 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1802 :                         if (sizeof(temp_r) == sizeof(_UINT64_T))
; 1803 :                             IncrementDIV64Counter();
; 1804 :                         else
; 1805 :                             IncrementDIV32Counter();
; 1806 : #endif
; 1807 :                         if (q != nullptr)
; 1808 :                             *q = temp_q;
; 1809 :                         return (temp_r);
; 1810 :                     }
; 1811 :                 }
; 1812 : 
; 1813 :             }
; 1814 :         }
; 1815 :     }

  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 10 00	 ret	 16			; 00000010H
$LN5@PMC_DivRem:

; 1654 :             return (0);
; 1655 :         }
; 1656 :         else
; 1657 :         {
; 1658 :             // u が 0 ではない場合
; 1659 : 
; 1660 :             if (nv->IS_ONE)

  00060	f6 c1 02	 test	 cl, 2
  00063	74 20		 je	 SHORT $LN8@PMC_DivRem

; 1661 :             {
; 1662 :                 // v が 1 である場合
; 1663 : 
; 1664 :                 // q = u, r = 0 を返す
; 1665 :                 if (q != nullptr)

  00065	85 f6		 test	 esi, esi
  00067	74 05		 je	 SHORT $LN10@PMC_DivRem

; 1666 :                     *q = u;

  00069	89 3e		 mov	 DWORD PTR [esi], edi
  0006b	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN10@PMC_DivRem:

; 1772 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));
; 1773 :                                 }
; 1774 :                             }
; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :                 else
; 1779 :                 {
; 1780 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1781 : 
; 1782 :                     // x と y の商・剰余を計算する
; 1783 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1784 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1785 :                     if (u_bit_count < v_bit_count)
; 1786 :                     {
; 1787 :                         // 明らかに u < v である場合
; 1788 : 
; 1789 :                         // q = 0, r = u を返す。
; 1790 :                         if (q != nullptr)
; 1791 :                             *q = 0;
; 1792 :                         return (u);
; 1793 :                     }
; 1794 :                     else
; 1795 :                     {
; 1796 :                         // u のビット数が v のビット数以上である場合
; 1797 : 
; 1798 :                         // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1799 :                         __UNIT_TYPE temp_r;
; 1800 :                         __UNIT_TYPE temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE)u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);
; 1801 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1802 :                         if (sizeof(temp_r) == sizeof(_UINT64_T))
; 1803 :                             IncrementDIV64Counter();
; 1804 :                         else
; 1805 :                             IncrementDIV32Counter();
; 1806 : #endif
; 1807 :                         if (q != nullptr)
; 1808 :                             *q = temp_q;
; 1809 :                         return (temp_r);
; 1810 :                     }
; 1811 :                 }
; 1812 : 
; 1813 :             }
; 1814 :         }
; 1815 :     }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	33 c0		 xor	 eax, eax
  00072	33 d2		 xor	 edx, edx
  00074	5b		 pop	 ebx
  00075	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00078	33 cd		 xor	 ecx, ebp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 10 00	 ret	 16			; 00000010H
$LN8@PMC_DivRem:

; 1668 :             }
; 1669 :             else
; 1670 :             {
; 1671 :                 // u > 0 かつ v > 1 である場合
; 1672 : 
; 1673 :                 // u と v の商・剰余を計算する
; 1674 :                 if (sizeof(__UNIT_TYPE) < sizeof(u))
; 1675 :                 {
; 1676 :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 1677 :                     _UINT32_T u_hi;
; 1678 :                     _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);
; 1679 :                     if (u_hi == 0)

  00085	85 d2		 test	 edx, edx
  00087	0f 85 82 00 00
	00		 jne	 $LN13@PMC_DivRem

; 1680 :                     {
; 1681 :                         // u の値が 32bit で表現可能な場合
; 1682 :                         __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

  0008d	57		 push	 edi
  0008e	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  00093	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00098	83 c4 04	 add	 esp, 4
  0009b	2b c8		 sub	 ecx, eax

; 1683 :                         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1684 :                         if (u_bit_count < v_bit_count)

  0009d	3b 4b 14	 cmp	 ecx, DWORD PTR [ebx+20]
  000a0	73 20		 jae	 SHORT $LN15@PMC_DivRem

; 1685 :                         {
; 1686 :                             // 明らかに u < v である場合
; 1687 : 
; 1688 :                             // q = 0, r = u を返す。
; 1689 :                             if (q != nullptr)

  000a2	85 f6		 test	 esi, esi
  000a4	74 05		 je	 SHORT $LN17@PMC_DivRem

; 1690 :                                 *q = 0;

  000a6	89 16		 mov	 DWORD PTR [esi], edx
  000a8	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN17@PMC_DivRem:

; 1691 :                             return (u_lo);

  000ab	8b c7		 mov	 eax, edi
  000ad	33 d2		 xor	 edx, edx
  000af	5f		 pop	 edi

; 1772 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));
; 1773 :                                 }
; 1774 :                             }
; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :                 else
; 1779 :                 {
; 1780 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1781 : 
; 1782 :                     // x と y の商・剰余を計算する
; 1783 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1784 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1785 :                     if (u_bit_count < v_bit_count)
; 1786 :                     {
; 1787 :                         // 明らかに u < v である場合
; 1788 : 
; 1789 :                         // q = 0, r = u を返す。
; 1790 :                         if (q != nullptr)
; 1791 :                             *q = 0;
; 1792 :                         return (u);
; 1793 :                     }
; 1794 :                     else
; 1795 :                     {
; 1796 :                         // u のビット数が v のビット数以上である場合
; 1797 : 
; 1798 :                         // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1799 :                         __UNIT_TYPE temp_r;
; 1800 :                         __UNIT_TYPE temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE)u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);
; 1801 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1802 :                         if (sizeof(temp_r) == sizeof(_UINT64_T))
; 1803 :                             IncrementDIV64Counter();
; 1804 :                         else
; 1805 :                             IncrementDIV32Counter();
; 1806 : #endif
; 1807 :                         if (q != nullptr)
; 1808 :                             *q = temp_q;
; 1809 :                         return (temp_r);
; 1810 :                     }
; 1811 :                 }
; 1812 : 
; 1813 :             }
; 1814 :         }
; 1815 :     }

  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b5	33 cd		 xor	 ecx, ebp
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 10 00	 ret	 16			; 00000010H
$LN15@PMC_DivRem:

; 1692 :                         }
; 1693 :                         else
; 1694 :                         {
; 1695 :                             // u のビット数が v のビット数以上である場合
; 1696 : 
; 1697 :                             // u は 32bit で表現できるので、v も 32bit で表現できる。
; 1698 :                             __UNIT_TYPE temp_r;
; 1699 :                             __UNIT_TYPE temp_q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);

  000c2	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  000c5	6a 00		 push	 0
  000c7	8b 00		 mov	 eax, DWORD PTR [eax]
  000c9	50		 push	 eax
  000ca	6a 00		 push	 0
  000cc	57		 push	 edi
  000cd	89 45 cc	 mov	 DWORD PTR tv423[ebp], eax
  000d0	e8 00 00 00 00	 call	 __aullrem
  000d5	8b d8		 mov	 ebx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  000d7	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1706 :                             if (q != nullptr)

  000de	85 f6		 test	 esi, esi
  000e0	74 16		 je	 SHORT $LN20@PMC_DivRem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 262  :             return ((_UINT32_T)(t / v));

  000e2	6a 00		 push	 0
  000e4	ff 75 cc	 push	 DWORD PTR tv423[ebp]
  000e7	6a 00		 push	 0
  000e9	57		 push	 edi
  000ea	e8 00 00 00 00	 call	 __aulldiv
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1707 :                                 *q = temp_q;

  000ef	89 06		 mov	 DWORD PTR [esi], eax
  000f1	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN20@PMC_DivRem:

; 1772 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));
; 1773 :                                 }
; 1774 :                             }
; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :                 else
; 1779 :                 {
; 1780 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1781 : 
; 1782 :                     // x と y の商・剰余を計算する
; 1783 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1784 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1785 :                     if (u_bit_count < v_bit_count)
; 1786 :                     {
; 1787 :                         // 明らかに u < v である場合
; 1788 : 
; 1789 :                         // q = 0, r = u を返す。
; 1790 :                         if (q != nullptr)
; 1791 :                             *q = 0;
; 1792 :                         return (u);
; 1793 :                     }
; 1794 :                     else
; 1795 :                     {
; 1796 :                         // u のビット数が v のビット数以上である場合
; 1797 : 
; 1798 :                         // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1799 :                         __UNIT_TYPE temp_r;
; 1800 :                         __UNIT_TYPE temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE)u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);
; 1801 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1802 :                         if (sizeof(temp_r) == sizeof(_UINT64_T))
; 1803 :                             IncrementDIV64Counter();
; 1804 :                         else
; 1805 :                             IncrementDIV32Counter();
; 1806 : #endif
; 1807 :                         if (q != nullptr)
; 1808 :                             *q = temp_q;
; 1809 :                         return (temp_r);
; 1810 :                     }
; 1811 :                 }
; 1812 : 
; 1813 :             }
; 1814 :         }
; 1815 :     }

  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	8b c3		 mov	 eax, ebx
  000fc	33 d2		 xor	 edx, edx
  000fe	5b		 pop	 ebx
  000ff	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00102	33 cd		 xor	 ecx, ebp
  00104	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c2 10 00	 ret	 16			; 00000010H
$LN13@PMC_DivRem:

; 1708 :                             return (temp_r);
; 1709 :                         }
; 1710 :                     }
; 1711 :                     else
; 1712 :                     {
; 1713 :                         // v の値が 32bit では表現できない場合
; 1714 :                         __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

  0010f	52		 push	 edx
  00110	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  00115	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0011a	83 c4 04	 add	 esp, 4
  0011d	2b c8		 sub	 ecx, eax

; 1715 :                         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1716 :                         if (u_bit_count < v_bit_count)

  0011f	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00122	3b c8		 cmp	 ecx, eax
  00124	73 26		 jae	 SHORT $LN21@PMC_DivRem

; 1717 :                         {
; 1718 :                             // 明らかに u < v である場合
; 1719 : 
; 1720 :                             // q = 0, r = u を返す。
; 1721 :                             if (q != nullptr)

  00126	85 f6		 test	 esi, esi
  00128	74 0d		 je	 SHORT $LN23@PMC_DivRem

; 1722 :                                 *q = 0;

  0012a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00130	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN23@PMC_DivRem:

; 1723 :                             return (u);

  00137	8b c7		 mov	 eax, edi
  00139	5f		 pop	 edi

; 1772 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));
; 1773 :                                 }
; 1774 :                             }
; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :                 else
; 1779 :                 {
; 1780 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1781 : 
; 1782 :                     // x と y の商・剰余を計算する
; 1783 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1784 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1785 :                     if (u_bit_count < v_bit_count)
; 1786 :                     {
; 1787 :                         // 明らかに u < v である場合
; 1788 : 
; 1789 :                         // q = 0, r = u を返す。
; 1790 :                         if (q != nullptr)
; 1791 :                             *q = 0;
; 1792 :                         return (u);
; 1793 :                     }
; 1794 :                     else
; 1795 :                     {
; 1796 :                         // u のビット数が v のビット数以上である場合
; 1797 : 
; 1798 :                         // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1799 :                         __UNIT_TYPE temp_r;
; 1800 :                         __UNIT_TYPE temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE)u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);
; 1801 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1802 :                         if (sizeof(temp_r) == sizeof(_UINT64_T))
; 1803 :                             IncrementDIV64Counter();
; 1804 :                         else
; 1805 :                             IncrementDIV32Counter();
; 1806 : #endif
; 1807 :                         if (q != nullptr)
; 1808 :                             *q = temp_q;
; 1809 :                         return (temp_r);
; 1810 :                     }
; 1811 :                 }
; 1812 : 
; 1813 :             }
; 1814 :         }
; 1815 :     }

  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013f	33 cd		 xor	 ecx, ebp
  00141	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c2 10 00	 ret	 16			; 00000010H
$LN21@PMC_DivRem:

; 1724 :                         }
; 1725 :                         else
; 1726 :                         {
; 1727 :                             // u のビット長が 33 以上 64 以下であり、かつ、u のビット長が v のビット長以上(v のビット長は多くとも64以下)である場合
; 1728 : 
; 1729 :                             if (nv->UNIT_BIT_COUNT <= sizeof(__UNIT_TYPE) * 8)

  0014c	83 f8 20	 cmp	 eax, 32			; 00000020H
  0014f	0f 87 84 00 00
	00		 ja	 $LN24@PMC_DivRem

; 1730 :                             {
; 1731 :                                 // v が 32bit で表現できる場合
; 1732 : 
; 1733 :                                 if (q != nullptr)

  00155	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  00158	89 7d d0	 mov	 DWORD PTR _u_buf$7[ebp], edi
  0015b	89 55 d4	 mov	 DWORD PTR _u_buf$7[ebp+4], edx
  0015e	8b 00		 mov	 eax, DWORD PTR [eax]
  00160	85 f6		 test	 esi, esi
  00162	74 51		 je	 SHORT $LN26@PMC_DivRem

; 1739 :                                     DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE)nv->BLOCK[0], q_buf, &r_buf);

  00164	8d 4d cc	 lea	 ecx, DWORD PTR _r_buf$3[ebp]
  00167	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _q_buf$13[ebp], 0
  0016e	51		 push	 ecx
  0016f	8d 4d f0	 lea	 ecx, DWORD PTR _q_buf$13[ebp]
  00172	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _q_buf$13[ebp+4], 0
  00179	51		 push	 ecx
  0017a	50		 push	 eax
  0017b	8d 45 d0	 lea	 eax, DWORD PTR _u_buf$7[ebp]
  0017e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _q_buf$13[ebp+8], 0
  00185	6a 02		 push	 2
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0018d	8b 4d f4	 mov	 ecx, DWORD PTR _q_buf$13[ebp+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1739 :                                     DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE)nv->BLOCK[0], q_buf, &r_buf);

  00190	83 c4 14	 add	 esp, 20			; 00000014H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00193	33 c0		 xor	 eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1741 :                                     *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

  00195	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00198	0b 45 f0	 or	 eax, DWORD PTR _q_buf$13[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1742 :                                     return (r_buf);

  0019b	33 d2		 xor	 edx, edx
  0019d	89 06		 mov	 DWORD PTR [esi], eax
  0019f	8b 45 cc	 mov	 eax, DWORD PTR _r_buf$3[ebp]
  001a2	5f		 pop	 edi

; 1772 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));
; 1773 :                                 }
; 1774 :                             }
; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :                 else
; 1779 :                 {
; 1780 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1781 : 
; 1782 :                     // x と y の商・剰余を計算する
; 1783 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1784 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1785 :                     if (u_bit_count < v_bit_count)
; 1786 :                     {
; 1787 :                         // 明らかに u < v である場合
; 1788 : 
; 1789 :                         // q = 0, r = u を返す。
; 1790 :                         if (q != nullptr)
; 1791 :                             *q = 0;
; 1792 :                         return (u);
; 1793 :                     }
; 1794 :                     else
; 1795 :                     {
; 1796 :                         // u のビット数が v のビット数以上である場合
; 1797 : 
; 1798 :                         // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1799 :                         __UNIT_TYPE temp_r;
; 1800 :                         __UNIT_TYPE temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE)u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);
; 1801 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1802 :                         if (sizeof(temp_r) == sizeof(_UINT64_T))
; 1803 :                             IncrementDIV64Counter();
; 1804 :                         else
; 1805 :                             IncrementDIV32Counter();
; 1806 : #endif
; 1807 :                         if (q != nullptr)
; 1808 :                             *q = temp_q;
; 1809 :                         return (temp_r);
; 1810 :                     }
; 1811 :                 }
; 1812 : 
; 1813 :             }
; 1814 :         }
; 1815 :     }

  001a3	5e		 pop	 esi
  001a4	5b		 pop	 ebx
  001a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a8	33 cd		 xor	 ecx, ebp
  001aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c2 10 00	 ret	 16			; 00000010H
$LN26@PMC_DivRem:

; 1743 :                                 }
; 1744 :                                 else
; 1745 :                                 {
; 1746 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };
; 1747 :                                     __UNIT_TYPE r_buf = Rem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE)nv->BLOCK[0]);

  001b5	50		 push	 eax
  001b6	8d 45 d0	 lea	 eax, DWORD PTR _u_buf$6[ebp]
  001b9	6a 02		 push	 2
  001bb	50		 push	 eax
  001bc	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  001c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1748 :                                     return (r_buf);

  001c4	33 d2		 xor	 edx, edx
  001c6	5f		 pop	 edi

; 1772 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));
; 1773 :                                 }
; 1774 :                             }
; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :                 else
; 1779 :                 {
; 1780 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1781 : 
; 1782 :                     // x と y の商・剰余を計算する
; 1783 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1784 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1785 :                     if (u_bit_count < v_bit_count)
; 1786 :                     {
; 1787 :                         // 明らかに u < v である場合
; 1788 : 
; 1789 :                         // q = 0, r = u を返す。
; 1790 :                         if (q != nullptr)
; 1791 :                             *q = 0;
; 1792 :                         return (u);
; 1793 :                     }
; 1794 :                     else
; 1795 :                     {
; 1796 :                         // u のビット数が v のビット数以上である場合
; 1797 : 
; 1798 :                         // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1799 :                         __UNIT_TYPE temp_r;
; 1800 :                         __UNIT_TYPE temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE)u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);
; 1801 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1802 :                         if (sizeof(temp_r) == sizeof(_UINT64_T))
; 1803 :                             IncrementDIV64Counter();
; 1804 :                         else
; 1805 :                             IncrementDIV32Counter();
; 1806 : #endif
; 1807 :                         if (q != nullptr)
; 1808 :                             *q = temp_q;
; 1809 :                         return (temp_r);
; 1810 :                     }
; 1811 :                 }
; 1812 : 
; 1813 :             }
; 1814 :         }
; 1815 :     }

  001c7	5e		 pop	 esi
  001c8	5b		 pop	 ebx
  001c9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cc	33 cd		 xor	 ecx, ebp
  001ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c2 10 00	 ret	 16			; 00000010H
$LN24@PMC_DivRem:

; 1749 :                                 }
; 1750 :                             }
; 1751 :                             else
; 1752 :                             {
; 1753 :                                 // v が 32bit では表現できない場合
; 1754 : 
; 1755 :                                 // この場合、2 ワード / 2 ワード の除算となるため、_DIVREM_UNIT 単発では計算できない。
; 1756 :                                 if (q != nullptr)

  001d9	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  001dc	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  001df	89 55 cc	 mov	 DWORD PTR _u_buf$2[ebp+4], edx
  001e2	8d 55 e4	 lea	 edx, DWORD PTR _r_buf$11[ebp]
  001e5	89 7d c8	 mov	 DWORD PTR _u_buf$2[ebp], edi
  001e8	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _r_buf$11[ebp], 0
  001ef	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _r_buf$11[ebp+4], 0
  001f6	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _r_buf$11[ebp+8], 0
  001fd	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _work_v_buf$5[ebp], 0
  00204	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _work_v_buf$5[ebp+4], 0
  0020b	52		 push	 edx
  0020c	85 f6		 test	 esi, esi
  0020e	74 3a		 je	 SHORT $LN28@PMC_DivRem

; 1757 :                                 {
; 1758 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };
; 1759 :                                     __UNIT_TYPE q_buf[] = { 0, 0, 0 };// 演算結果を格納するためには u のビット数 - v のビット数 + 1 ビットだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1760 :                                     __UNIT_TYPE r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1761 :                                     __UNIT_TYPE work_v_buf[] = { 0, 0 };
; 1762 :                                     (*fp_DivRem_X_X)(u_buf, countof(u_buf), nv->BLOCK, nv->UNIT_WORD_COUNT, work_v_buf, q_buf, r_buf);

  00210	8d 55 f0	 lea	 edx, DWORD PTR _q_buf$12[ebp]
  00213	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _q_buf$12[ebp], 0
  0021a	52		 push	 edx
  0021b	8d 55 d0	 lea	 edx, DWORD PTR _work_v_buf$5[ebp]
  0021e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _q_buf$12[ebp+4], 0
  00225	52		 push	 edx
  00226	50		 push	 eax
  00227	51		 push	 ecx
  00228	8d 45 c8	 lea	 eax, DWORD PTR _u_buf$2[ebp]
  0022b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _q_buf$12[ebp+8], 0
  00232	6a 02		 push	 2
  00234	50		 push	 eax
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0023b	8b 4d f4	 mov	 ecx, DWORD PTR _q_buf$12[ebp+4]
  0023e	33 c0		 xor	 eax, eax
  00240	0b 45 f0	 or	 eax, DWORD PTR _q_buf$12[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1763 :                                     *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

  00243	89 06		 mov	 DWORD PTR [esi], eax
  00245	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1764 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));

  00248	eb 14		 jmp	 SHORT $LN64@PMC_DivRem
$LN28@PMC_DivRem:

; 1765 :                                 }
; 1766 :                                 else
; 1767 :                                 {
; 1768 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };
; 1769 :                                     __UNIT_TYPE r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1770 :                                     __UNIT_TYPE work_v_buf[] = { 0, 0 };
; 1771 :                                     (*fp_DivRem_X_X)(u_buf, countof(u_buf), nv->BLOCK, nv->UNIT_WORD_COUNT, work_v_buf, nullptr, r_buf);

  0024a	6a 00		 push	 0
  0024c	8d 55 d0	 lea	 edx, DWORD PTR _work_v_buf$4[ebp]
  0024f	52		 push	 edx
  00250	50		 push	 eax
  00251	51		 push	 ecx
  00252	8d 45 c8	 lea	 eax, DWORD PTR _u_buf$1[ebp]
  00255	6a 02		 push	 2
  00257	50		 push	 eax
  00258	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
$LN64@PMC_DivRem:

; 1772 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));
; 1773 :                                 }
; 1774 :                             }
; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :                 else
; 1779 :                 {
; 1780 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1781 : 
; 1782 :                     // x と y の商・剰余を計算する
; 1783 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);
; 1784 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1785 :                     if (u_bit_count < v_bit_count)
; 1786 :                     {
; 1787 :                         // 明らかに u < v である場合
; 1788 : 
; 1789 :                         // q = 0, r = u を返す。
; 1790 :                         if (q != nullptr)
; 1791 :                             *q = 0;
; 1792 :                         return (u);
; 1793 :                     }
; 1794 :                     else
; 1795 :                     {
; 1796 :                         // u のビット数が v のビット数以上である場合
; 1797 : 
; 1798 :                         // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1799 :                         __UNIT_TYPE temp_r;
; 1800 :                         __UNIT_TYPE temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE)u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);
; 1801 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1802 :                         if (sizeof(temp_r) == sizeof(_UINT64_T))
; 1803 :                             IncrementDIV64Counter();
; 1804 :                         else
; 1805 :                             IncrementDIV32Counter();
; 1806 : #endif
; 1807 :                         if (q != nullptr)
; 1808 :                             *q = temp_q;
; 1809 :                         return (temp_r);
; 1810 :                     }
; 1811 :                 }
; 1812 : 
; 1813 :             }
; 1814 :         }
; 1815 :     }

  0025e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00261	83 c4 1c	 add	 esp, 28			; 0000001cH
  00264	8b 55 e8	 mov	 edx, DWORD PTR _r_buf$10[ebp+4]
  00267	33 c0		 xor	 eax, eax
  00269	0b 45 e4	 or	 eax, DWORD PTR _r_buf$10[ebp]
  0026c	33 cd		 xor	 ecx, ebp
  0026e	5f		 pop	 edi
  0026f	5e		 pop	 esi
  00270	5b		 pop	 ebx
  00271	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00276	8b e5		 mov	 esp, ebp
  00278	5d		 pop	 ebp
  00279	c2 10 00	 ret	 16			; 00000010H
$LN66@PMC_DivRem:

; 1637 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0027c	68 00 00 00 00	 push	 OFFSET ??_C@_13JAOPNPKD@?$AAv@
  00281	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00286	8d 4d d8	 lea	 ecx, DWORD PTR $T9[ebp]
  00289	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0028e	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00293	8d 45 d8	 lea	 eax, DWORD PTR $T9[ebp]
  00296	50		 push	 eax
  00297	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN67@PMC_DivRem:

; 1641 :         {
; 1642 :             // v が 0 である場合
; 1643 : 
; 1644 :             // 0 による除算はエラーで返す
; 1645 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  0029c	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  002a1	8d 4d d8	 lea	 ecx, DWORD PTR $T8[ebp]
  002a4	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  002a9	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  002ae	8d 45 d8	 lea	 eax, DWORD PTR $T8[ebp]
  002b1	50		 push	 eax
  002b2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN63@PMC_DivRem:
  002b7	cc		 int	 3
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@PA_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z
_TEXT	SEGMENT
$T1 = -32						; size = 24
$T2 = -32						; size = 24
tv258 = -8						; size = 8
tv130 = -8						; size = 8
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X, COMDAT

; 1444 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi

; 1445 :         if (sizeof(__UNIT_TYPE) < sizeof(u))
; 1446 :         {
; 1447 :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1448 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_I_X;1");
; 1449 :         }
; 1450 :         if (v == nullptr)

  00007	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0000a	85 f6		 test	 esi, esi
  0000c	0f 84 a2 00 00
	00		 je	 $LN28@PMC_DivRem

; 1452 :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1453 :         CheckNumber(nv);

  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 1454 :         if (nv->IS_ZERO)

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	83 c4 04	 add	 esp, 4
  0001e	a8 01		 test	 al, 1
  00020	0f 85 ae 00 00
	00		 jne	 $LN29@PMC_DivRem

; 1460 :         }
; 1461 :         if (u == 0)

  00026	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00029	85 d2		 test	 edx, edx
  0002b	75 12		 jne	 SHORT $LN5@PMC_DivRem

; 1462 :         {
; 1463 :             // u が 0 である場合
; 1464 : 
; 1465 :             // q = 0, r = 0 を返す
; 1466 :             if (q != nullptr)

  0002d	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  00030	85 c0		 test	 eax, eax
  00032	74 18		 je	 SHORT $LN10@PMC_DivRem

; 1467 :                 *q = 0;

  00034	89 10		 mov	 DWORD PTR [eax], edx

; 1481 :                 return (0);

  00036	33 c0		 xor	 eax, eax
  00038	5e		 pop	 esi

; 1515 :                 }
; 1516 :             }
; 1517 :         }
; 1518 :     }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
$LN5@PMC_DivRem:

; 1468 :             return (0);
; 1469 :         }
; 1470 :         else
; 1471 :         {
; 1472 :             // u が 0 ではない場合
; 1473 : 
; 1474 :             if (nv->IS_ONE)

  0003f	a8 02		 test	 al, 2
  00041	74 12		 je	 SHORT $LN8@PMC_DivRem

; 1475 :             {
; 1476 :                 // v が 1 である場合
; 1477 : 
; 1478 :                 // q = u, r = 0 を返す
; 1479 :                 if (q != nullptr)

  00043	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  00046	85 c0		 test	 eax, eax
  00048	74 02		 je	 SHORT $LN10@PMC_DivRem

; 1480 :                     *q = u;

  0004a	89 10		 mov	 DWORD PTR [eax], edx
$LN10@PMC_DivRem:

; 1481 :                 return (0);

  0004c	33 c0		 xor	 eax, eax
  0004e	5e		 pop	 esi

; 1515 :                 }
; 1516 :             }
; 1517 :         }
; 1518 :     }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
$LN8@PMC_DivRem:

; 1482 :             }
; 1483 :             else
; 1484 :             {
; 1485 :                 // u と v がともに 0 ではない場合
; 1486 : 
; 1487 :                 // x と y の商・剰余を計算する
; 1488 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  0005b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00060	83 c4 04	 add	 esp, 4
  00063	2b c8		 sub	 ecx, eax

; 1489 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1490 :                 if (u_bit_count < v_bit_count)

  00065	3b 4e 14	 cmp	 ecx, DWORD PTR [esi+20]
  00068	73 16		 jae	 SHORT $LN11@PMC_DivRem

; 1491 :                 {
; 1492 :                     // 明らかに u < v である場合
; 1493 : 
; 1494 :                     // q = 0, r = u を返す。
; 1495 :                     if (q != nullptr)

  0006a	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  0006d	85 c0		 test	 eax, eax
  0006f	74 06		 je	 SHORT $LN13@PMC_DivRem

; 1496 :                         *q = 0;

  00071	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN13@PMC_DivRem:

; 1497 :                     return (u);

  00077	8b c2		 mov	 eax, edx
  00079	5e		 pop	 esi

; 1515 :                 }
; 1516 :             }
; 1517 :         }
; 1518 :     }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 0c 00	 ret	 12			; 0000000cH
$LN11@PMC_DivRem:

; 1498 :                 }
; 1499 :                 else
; 1500 :                 {
; 1501 :                     // u のビット数が v のビット数以上である場合
; 1502 : 
; 1503 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1504 :                     __UNIT_TYPE temp_r;
; 1505 :                     __UNIT_TYPE temp_q = _DIVREM_UNIT(0, u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);

  00080	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00083	53		 push	 ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 261  :             *r = (_UINT32_T)(t % v);

  00084	53		 push	 ebx
  00085	6a 00		 push	 0
  00087	ff 30		 push	 DWORD PTR [eax]
  00089	6a 00		 push	 0
  0008b	52		 push	 edx
  0008c	e8 00 00 00 00	 call	 __aulldvrm
  00091	89 5d fc	 mov	 DWORD PTR tv130[ebp+4], ebx
  00094	5b		 pop	 ebx
  00095	8b f1		 mov	 esi, ecx
  00097	89 55 fc	 mov	 DWORD PTR tv258[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1506 :                     if (q != nullptr)

  0009a	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  0009d	5b		 pop	 ebx
  0009e	85 c9		 test	 ecx, ecx
  000a0	74 02		 je	 SHORT $LN14@PMC_DivRem

; 1507 :                         *q = (_UINT32_T)temp_q;

  000a2	89 01		 mov	 DWORD PTR [ecx], eax
$LN14@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  000a4	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 1514 :                     return ((_UINT32_T)temp_r);

  000ab	8b c6		 mov	 eax, esi
  000ad	5e		 pop	 esi

; 1515 :                 }
; 1516 :             }
; 1517 :         }
; 1518 :     }

  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 0c 00	 ret	 12			; 0000000cH
$LN28@PMC_DivRem:

; 1451 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_13JAOPNPKD@?$AAv@
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  000be	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp]
  000c1	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000c6	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000cb	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@PMC_DivRem:

; 1455 :         {
; 1456 :             // v が 0 である場合
; 1457 : 
; 1458 :             // 0 による除算はエラーで返す
; 1459 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  000d9	8d 4d e0	 lea	 ecx, DWORD PTR $T1[ebp]
  000dc	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  000e1	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  000e6	8d 45 e0	 lea	 eax, DWORD PTR $T1[ebp]
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN26@PMC_DivRem:
  000ef	cc		 int	 3
?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_DivRem, COMDAT

; 2235 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _feature$[ebp]

; 2236 :         fp_DivRem_X_X = feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2 ? DivRem_X_X_using_ADX_MULX : DivRem_X_X_using_ADC_MUL;
; 2237 :         return (PMC_STATUS_OK);

  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADX_MULX
  0000b	ba 00 00 00 00	 mov	 edx, OFFSET ?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADC_MUL
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	83 e0 0a	 and	 eax, 10			; 0000000aH
  00015	3c 0a		 cmp	 al, 10			; 0000000aH
  00017	0f 45 ca	 cmovne	 ecx, edx
  0001a	33 c0		 xor	 eax, eax
  0001c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA, ecx

; 2238 :     }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_DivRem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z
_TEXT	SEGMENT
tv261 = -8						; size = 8
tv156 = -8						; size = 8
_u_buf$ = 8						; size = 4
_r$1 = 12						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_X, COMDAT

; 352  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 353  :         __UNIT_TYPE* u_buf_2 = u_buf;
; 354  :         __UNIT_TYPE u_count_2 = u_count;
; 355  :         __UNIT_TYPE* v_buf_2 = v_buf;
; 356  :         __UNIT_TYPE v_count_2 = v_count;
; 357  :         if (v_count_2 == 1)

  00003	8b 45 14	 mov	 eax, DWORD PTR _v_count$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	83 f8 01	 cmp	 eax, 1
  0000d	75 7d		 jne	 SHORT $LN2@DivRem_X_X

; 358  :         {
; 359  :             if (u_count_2 == 1)

  0000f	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00017	83 f8 01	 cmp	 eax, 1
  0001a	75 33		 jne	 SHORT $LN4@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0001c	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0001f	53		 push	 ebx

; 261  :             *r = (_UINT32_T)(t % v);

  00020	53		 push	 ebx
  00021	6a 00		 push	 0
  00023	51		 push	 ecx
  00024	6a 00		 push	 0
  00026	ff 30		 push	 DWORD PTR [eax]
  00028	e8 00 00 00 00	 call	 __aulldvrm
  0002d	89 5d fc	 mov	 DWORD PTR tv156[ebp+4], ebx
  00030	5b		 pop	 ebx
  00031	89 55 fc	 mov	 DWORD PTR tv261[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 363  :                 if (q_buf != nullptr)

  00034	8b 55 1c	 mov	 edx, DWORD PTR _q_buf$[ebp]
  00037	5b		 pop	 ebx
  00038	85 d2		 test	 edx, edx
  0003a	74 02		 je	 SHORT $LN6@DivRem_X_X

; 364  :                     q_buf[0] = q;

  0003c	89 02		 mov	 DWORD PTR [edx], eax
$LN6@DivRem_X_X:

; 365  :                 r_buf[0] = r;

  0003e	8b 45 20	 mov	 eax, DWORD PTR _r_buf$[ebp]
  00041	89 08		 mov	 DWORD PTR [eax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  00043	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  0004a	5e		 pop	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 396  :     }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN4@DivRem_X_X:

; 366  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 367  :                 if (sizeof(r) == sizeof(_UINT64_T))
; 368  :                     IncrementDIV64Counter();
; 369  :                 else
; 370  :                     IncrementDIV32Counter();
; 371  : #endif
; 372  :             }
; 373  :             else
; 374  :             {
; 375  :                 if (q_buf != nullptr)

  0004f	8b 55 1c	 mov	 edx, DWORD PTR _q_buf$[ebp]
  00052	85 d2		 test	 edx, edx
  00054	74 1f		 je	 SHORT $LN9@DivRem_X_X

; 376  :                 {
; 377  :                     __UNIT_TYPE r;
; 378  :                     DivRem_X_1W(u_buf_2, u_count_2, v_buf_2[0], q_buf, &r);

  00056	8d 75 0c	 lea	 esi, DWORD PTR _r$1[ebp]
  00059	56		 push	 esi
  0005a	52		 push	 edx
  0005b	51		 push	 ecx
  0005c	50		 push	 eax
  0005d	ff 75 08	 push	 DWORD PTR _u_buf$[ebp]
  00060	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W

; 379  :                     r_buf[0] = r;

  00065	8b 4d 20	 mov	 ecx, DWORD PTR _r_buf$[ebp]
  00068	83 c4 14	 add	 esp, 20			; 00000014H
  0006b	8b 45 0c	 mov	 eax, DWORD PTR _r$1[ebp]
  0006e	89 01		 mov	 DWORD PTR [ecx], eax
  00070	5e		 pop	 esi

; 396  :     }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN9@DivRem_X_X:

; 380  :                 }
; 381  :                 else
; 382  :                     r_buf[0] = Rem_X_1W(u_buf_2, u_count_2, v_buf_2[0]);

  00075	51		 push	 ecx
  00076	50		 push	 eax
  00077	ff 75 08	 push	 DWORD PTR _u_buf$[ebp]
  0007a	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  0007f	8b 4d 20	 mov	 ecx, DWORD PTR _r_buf$[ebp]
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH
  00085	89 01		 mov	 DWORD PTR [ecx], eax
  00087	5e		 pop	 esi

; 396  :     }

  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
$LN2@DivRem_X_X:

; 383  :             }
; 384  :         }
; 385  :         else
; 386  :         {
; 387  :             if (u_count_2 < v_count_2)

  0008c	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  0008f	3b c8		 cmp	 ecx, eax
  00091	73 1c		 jae	 SHORT $LN11@DivRem_X_X

; 388  :             {
; 389  :                 if (q_buf != nullptr)

  00093	8b 45 1c	 mov	 eax, DWORD PTR _q_buf$[ebp]
  00096	85 c0		 test	 eax, eax
  00098	74 06		 je	 SHORT $LN13@DivRem_X_X

; 390  :                     q_buf[0] = 0;

  0009a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN13@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  000a0	8b 75 08	 mov	 esi, DWORD PTR _u_buf$[ebp]
  000a3	57		 push	 edi
  000a4	8b 7d 20	 mov	 edi, DWORD PTR _r_buf$[ebp]
  000a7	f3 a5		 rep movsd
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 396  :     }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
$LN11@DivRem_X_X:

; 391  :                 _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);
; 392  :             }
; 393  :             else
; 394  :                 (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, work_v_buf, q_buf, r_buf);

  000af	ff 75 20	 push	 DWORD PTR _r_buf$[ebp]
  000b2	ff 75 1c	 push	 DWORD PTR _q_buf$[ebp]
  000b5	ff 75 18	 push	 DWORD PTR _work_v_buf$[ebp]
  000b8	50		 push	 eax
  000b9	ff 75 10	 push	 DWORD PTR _v_buf$[ebp]
  000bc	51		 push	 ecx
  000bd	ff 75 08	 push	 DWORD PTR _u_buf$[ebp]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  000c6	83 c4 1c	 add	 esp, 28			; 0000001cH
  000c9	5e		 pop	 esi

; 396  :     }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_X
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v$ = 16						; size = 4
?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z PROC	; Palmtree::Math::Core::Internal::Rem_X_1W, COMDAT

; 399  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 400  :         // u の最上位ワードは 0 でありうることに注意すること。
; 401  :         __UNIT_TYPE* up = u_buf + u_buf_len - 1;

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _u_buf_len$[ebp]

; 402  :         __UNIT_TYPE u_count = u_buf_len;
; 403  :         __UNIT_TYPE dummy_q;
; 404  :         __UNIT_TYPE r = 0;

  00007	33 d2		 xor	 edx, edx
  00009	56		 push	 esi
  0000a	8b 75 08	 mov	 esi, DWORD PTR _u_buf$[ebp]

; 405  :         __UNIT_TYPE count = u_count >> 5;

  0000d	8b c3		 mov	 eax, ebx
  0000f	83 c6 fc	 add	 esi, -4			; fffffffcH
  00012	c1 e8 05	 shr	 eax, 5
  00015	57		 push	 edi
  00016	8b 7d 10	 mov	 edi, DWORD PTR _v$[ebp]
  00019	8d 34 9e	 lea	 esi, DWORD PTR [esi+ebx*4]

; 406  :         while (count != 0)

  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 00 02 00
	00		 je	 $LN300@Rem_X_1W
  00024	8b d8		 mov	 ebx, eax
$LL2@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :             return ((_UINT32_T)(t % v));

  00026	6a 00		 push	 0
  00028	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00029	33 c0		 xor	 eax, eax
  0002b	0b 06		 or	 eax, DWORD PTR [esi]

; 294  :             return ((_UINT32_T)(t % v));

  0002d	52		 push	 edx
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 __aullrem
  00034	6a 00		 push	 0
  00036	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00037	33 c9		 xor	 ecx, ecx
  00039	0b 4e fc	 or	 ecx, DWORD PTR [esi-4]

; 294  :             return ((_UINT32_T)(t % v));

  0003c	50		 push	 eax
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __aullrem
  00043	6a 00		 push	 0
  00045	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00046	33 c9		 xor	 ecx, ecx
  00048	0b 4e f8	 or	 ecx, DWORD PTR [esi-8]

; 294  :             return ((_UINT32_T)(t % v));

  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 __aullrem
  00052	6a 00		 push	 0
  00054	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00055	33 c9		 xor	 ecx, ecx
  00057	0b 4e f4	 or	 ecx, DWORD PTR [esi-12]

; 294  :             return ((_UINT32_T)(t % v));

  0005a	50		 push	 eax
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 __aullrem
  00061	6a 00		 push	 0
  00063	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00064	33 c9		 xor	 ecx, ecx
  00066	0b 4e f0	 or	 ecx, DWORD PTR [esi-16]

; 294  :             return ((_UINT32_T)(t % v));

  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 __aullrem
  00070	6a 00		 push	 0
  00072	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00073	33 c9		 xor	 ecx, ecx
  00075	0b 4e ec	 or	 ecx, DWORD PTR [esi-20]

; 294  :             return ((_UINT32_T)(t % v));

  00078	50		 push	 eax
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 __aullrem
  0007f	6a 00		 push	 0
  00081	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00082	33 c9		 xor	 ecx, ecx
  00084	0b 4e e8	 or	 ecx, DWORD PTR [esi-24]

; 294  :             return ((_UINT32_T)(t % v));

  00087	50		 push	 eax
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 __aullrem
  0008e	6a 00		 push	 0
  00090	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00091	33 c9		 xor	 ecx, ecx
  00093	0b 4e e4	 or	 ecx, DWORD PTR [esi-28]

; 294  :             return ((_UINT32_T)(t % v));

  00096	50		 push	 eax
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 __aullrem
  0009d	6a 00		 push	 0
  0009f	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000a0	33 c9		 xor	 ecx, ecx
  000a2	0b 4e e0	 or	 ecx, DWORD PTR [esi-32]

; 294  :             return ((_UINT32_T)(t % v));

  000a5	50		 push	 eax
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 __aullrem
  000ac	6a 00		 push	 0
  000ae	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000af	33 c9		 xor	 ecx, ecx
  000b1	0b 4e dc	 or	 ecx, DWORD PTR [esi-36]

; 294  :             return ((_UINT32_T)(t % v));

  000b4	50		 push	 eax
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 __aullrem
  000bb	6a 00		 push	 0
  000bd	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000be	33 c9		 xor	 ecx, ecx
  000c0	0b 4e d8	 or	 ecx, DWORD PTR [esi-40]

; 294  :             return ((_UINT32_T)(t % v));

  000c3	50		 push	 eax
  000c4	51		 push	 ecx
  000c5	e8 00 00 00 00	 call	 __aullrem

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000ca	33 c9		 xor	 ecx, ecx
  000cc	0b 4e d4	 or	 ecx, DWORD PTR [esi-44]

; 294  :             return ((_UINT32_T)(t % v));

  000cf	6a 00		 push	 0
  000d1	57		 push	 edi
  000d2	50		 push	 eax
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 __aullrem
  000d9	6a 00		 push	 0
  000db	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000dc	33 c9		 xor	 ecx, ecx
  000de	0b 4e d0	 or	 ecx, DWORD PTR [esi-48]

; 294  :             return ((_UINT32_T)(t % v));

  000e1	50		 push	 eax
  000e2	51		 push	 ecx
  000e3	e8 00 00 00 00	 call	 __aullrem
  000e8	6a 00		 push	 0
  000ea	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000eb	33 c9		 xor	 ecx, ecx
  000ed	0b 4e cc	 or	 ecx, DWORD PTR [esi-52]

; 294  :             return ((_UINT32_T)(t % v));

  000f0	50		 push	 eax
  000f1	51		 push	 ecx
  000f2	e8 00 00 00 00	 call	 __aullrem
  000f7	6a 00		 push	 0
  000f9	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000fa	33 c9		 xor	 ecx, ecx
  000fc	0b 4e c8	 or	 ecx, DWORD PTR [esi-56]

; 294  :             return ((_UINT32_T)(t % v));

  000ff	50		 push	 eax
  00100	51		 push	 ecx
  00101	e8 00 00 00 00	 call	 __aullrem
  00106	6a 00		 push	 0
  00108	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00109	33 c9		 xor	 ecx, ecx
  0010b	0b 4e c4	 or	 ecx, DWORD PTR [esi-60]

; 294  :             return ((_UINT32_T)(t % v));

  0010e	50		 push	 eax
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 __aullrem
  00115	6a 00		 push	 0
  00117	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00118	33 c9		 xor	 ecx, ecx
  0011a	0b 4e c0	 or	 ecx, DWORD PTR [esi-64]

; 294  :             return ((_UINT32_T)(t % v));

  0011d	50		 push	 eax
  0011e	51		 push	 ecx
  0011f	e8 00 00 00 00	 call	 __aullrem
  00124	6a 00		 push	 0
  00126	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00127	33 c9		 xor	 ecx, ecx
  00129	0b 4e bc	 or	 ecx, DWORD PTR [esi-68]

; 294  :             return ((_UINT32_T)(t % v));

  0012c	50		 push	 eax
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 __aullrem
  00133	6a 00		 push	 0
  00135	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00136	33 c9		 xor	 ecx, ecx
  00138	0b 4e b8	 or	 ecx, DWORD PTR [esi-72]

; 294  :             return ((_UINT32_T)(t % v));

  0013b	50		 push	 eax
  0013c	51		 push	 ecx
  0013d	e8 00 00 00 00	 call	 __aullrem
  00142	6a 00		 push	 0
  00144	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00145	33 c9		 xor	 ecx, ecx
  00147	0b 4e b4	 or	 ecx, DWORD PTR [esi-76]

; 294  :             return ((_UINT32_T)(t % v));

  0014a	50		 push	 eax
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 __aullrem
  00151	6a 00		 push	 0
  00153	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00154	33 c9		 xor	 ecx, ecx
  00156	0b 4e b0	 or	 ecx, DWORD PTR [esi-80]

; 294  :             return ((_UINT32_T)(t % v));

  00159	50		 push	 eax
  0015a	51		 push	 ecx
  0015b	e8 00 00 00 00	 call	 __aullrem
  00160	6a 00		 push	 0
  00162	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00163	33 c9		 xor	 ecx, ecx
  00165	0b 4e ac	 or	 ecx, DWORD PTR [esi-84]

; 294  :             return ((_UINT32_T)(t % v));

  00168	50		 push	 eax
  00169	51		 push	 ecx
  0016a	e8 00 00 00 00	 call	 __aullrem
  0016f	6a 00		 push	 0
  00171	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00172	33 c9		 xor	 ecx, ecx
  00174	0b 4e a8	 or	 ecx, DWORD PTR [esi-88]

; 294  :             return ((_UINT32_T)(t % v));

  00177	50		 push	 eax
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 __aullrem

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0017e	33 c9		 xor	 ecx, ecx
  00180	0b 4e a4	 or	 ecx, DWORD PTR [esi-92]

; 294  :             return ((_UINT32_T)(t % v));

  00183	6a 00		 push	 0
  00185	57		 push	 edi
  00186	50		 push	 eax
  00187	51		 push	 ecx
  00188	e8 00 00 00 00	 call	 __aullrem
  0018d	6a 00		 push	 0
  0018f	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00190	33 c9		 xor	 ecx, ecx
  00192	0b 4e a0	 or	 ecx, DWORD PTR [esi-96]

; 294  :             return ((_UINT32_T)(t % v));

  00195	50		 push	 eax
  00196	51		 push	 ecx
  00197	e8 00 00 00 00	 call	 __aullrem
  0019c	6a 00		 push	 0
  0019e	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0019f	33 c9		 xor	 ecx, ecx
  001a1	0b 4e 9c	 or	 ecx, DWORD PTR [esi-100]

; 294  :             return ((_UINT32_T)(t % v));

  001a4	50		 push	 eax
  001a5	51		 push	 ecx
  001a6	e8 00 00 00 00	 call	 __aullrem
  001ab	6a 00		 push	 0
  001ad	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001ae	33 c9		 xor	 ecx, ecx
  001b0	0b 4e 98	 or	 ecx, DWORD PTR [esi-104]

; 294  :             return ((_UINT32_T)(t % v));

  001b3	50		 push	 eax
  001b4	51		 push	 ecx
  001b5	e8 00 00 00 00	 call	 __aullrem
  001ba	6a 00		 push	 0
  001bc	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001bd	33 c9		 xor	 ecx, ecx
  001bf	0b 4e 94	 or	 ecx, DWORD PTR [esi-108]

; 294  :             return ((_UINT32_T)(t % v));

  001c2	50		 push	 eax
  001c3	51		 push	 ecx
  001c4	e8 00 00 00 00	 call	 __aullrem
  001c9	6a 00		 push	 0
  001cb	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001cc	33 c9		 xor	 ecx, ecx
  001ce	0b 4e 90	 or	 ecx, DWORD PTR [esi-112]

; 294  :             return ((_UINT32_T)(t % v));

  001d1	50		 push	 eax
  001d2	51		 push	 ecx
  001d3	e8 00 00 00 00	 call	 __aullrem
  001d8	6a 00		 push	 0
  001da	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001db	33 c9		 xor	 ecx, ecx
  001dd	0b 4e 8c	 or	 ecx, DWORD PTR [esi-116]

; 294  :             return ((_UINT32_T)(t % v));

  001e0	50		 push	 eax
  001e1	51		 push	 ecx
  001e2	e8 00 00 00 00	 call	 __aullrem
  001e7	6a 00		 push	 0
  001e9	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001ea	33 c9		 xor	 ecx, ecx
  001ec	0b 4e 88	 or	 ecx, DWORD PTR [esi-120]

; 294  :             return ((_UINT32_T)(t % v));

  001ef	50		 push	 eax
  001f0	51		 push	 ecx
  001f1	e8 00 00 00 00	 call	 __aullrem
  001f6	6a 00		 push	 0
  001f8	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001f9	33 c9		 xor	 ecx, ecx
  001fb	0b 4e 84	 or	 ecx, DWORD PTR [esi-124]

; 294  :             return ((_UINT32_T)(t % v));

  001fe	50		 push	 eax
  001ff	51		 push	 ecx
  00200	e8 00 00 00 00	 call	 __aullrem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 439  :             r = _DIVREM_SINGLE_UNIT(r, up[-31], v, &dummy_q);

  00205	8b d0		 mov	 edx, eax

; 440  :             up -= 32;

  00207	83 c6 80	 add	 esi, -128		; ffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  0020a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0020f	b8 0c 00 00 00	 mov	 eax, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  00214	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 441  :             --count;

  00218	83 eb 01	 sub	 ebx, 1
  0021b	0f 85 05 fe ff
	ff		 jne	 $LL2@Rem_X_1W
  00221	8b 5d 0c	 mov	 ebx, DWORD PTR _u_buf_len$[ebp]
$LN300@Rem_X_1W:

; 442  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 443  :             if (sizeof(r) == sizeof(_UINT64_T))
; 444  :                 AddToDIV64Counter(32);
; 445  :             else
; 446  :                 AddToDIV32Counter(32);
; 447  : #endif
; 448  :         }
; 449  : 
; 450  :         if (u_count & 0x10)

  00224	f6 c3 10	 test	 bl, 16			; 00000010H
  00227	0f 84 02 01 00
	00		 je	 $LN8@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :             return ((_UINT32_T)(t % v));

  0022d	6a 00		 push	 0
  0022f	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00230	33 c0		 xor	 eax, eax
  00232	0b 06		 or	 eax, DWORD PTR [esi]

; 294  :             return ((_UINT32_T)(t % v));

  00234	52		 push	 edx
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 __aullrem
  0023b	6a 00		 push	 0
  0023d	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0023e	33 c9		 xor	 ecx, ecx
  00240	0b 4e fc	 or	 ecx, DWORD PTR [esi-4]

; 294  :             return ((_UINT32_T)(t % v));

  00243	50		 push	 eax
  00244	51		 push	 ecx
  00245	e8 00 00 00 00	 call	 __aullrem
  0024a	6a 00		 push	 0
  0024c	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0024d	33 c9		 xor	 ecx, ecx
  0024f	0b 4e f8	 or	 ecx, DWORD PTR [esi-8]

; 294  :             return ((_UINT32_T)(t % v));

  00252	50		 push	 eax
  00253	51		 push	 ecx
  00254	e8 00 00 00 00	 call	 __aullrem
  00259	6a 00		 push	 0
  0025b	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0025c	33 c9		 xor	 ecx, ecx
  0025e	0b 4e f4	 or	 ecx, DWORD PTR [esi-12]

; 294  :             return ((_UINT32_T)(t % v));

  00261	50		 push	 eax
  00262	51		 push	 ecx
  00263	e8 00 00 00 00	 call	 __aullrem
  00268	6a 00		 push	 0
  0026a	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0026b	33 c9		 xor	 ecx, ecx
  0026d	0b 4e f0	 or	 ecx, DWORD PTR [esi-16]

; 294  :             return ((_UINT32_T)(t % v));

  00270	50		 push	 eax
  00271	51		 push	 ecx
  00272	e8 00 00 00 00	 call	 __aullrem
  00277	6a 00		 push	 0
  00279	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0027a	33 c9		 xor	 ecx, ecx
  0027c	0b 4e ec	 or	 ecx, DWORD PTR [esi-20]

; 294  :             return ((_UINT32_T)(t % v));

  0027f	50		 push	 eax
  00280	51		 push	 ecx
  00281	e8 00 00 00 00	 call	 __aullrem
  00286	6a 00		 push	 0
  00288	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00289	33 c9		 xor	 ecx, ecx
  0028b	0b 4e e8	 or	 ecx, DWORD PTR [esi-24]

; 294  :             return ((_UINT32_T)(t % v));

  0028e	50		 push	 eax
  0028f	51		 push	 ecx
  00290	e8 00 00 00 00	 call	 __aullrem
  00295	6a 00		 push	 0
  00297	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00298	33 c9		 xor	 ecx, ecx
  0029a	0b 4e e4	 or	 ecx, DWORD PTR [esi-28]

; 294  :             return ((_UINT32_T)(t % v));

  0029d	50		 push	 eax
  0029e	51		 push	 ecx
  0029f	e8 00 00 00 00	 call	 __aullrem
  002a4	6a 00		 push	 0
  002a6	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002a7	33 c9		 xor	 ecx, ecx
  002a9	0b 4e e0	 or	 ecx, DWORD PTR [esi-32]

; 294  :             return ((_UINT32_T)(t % v));

  002ac	50		 push	 eax
  002ad	51		 push	 ecx
  002ae	e8 00 00 00 00	 call	 __aullrem
  002b3	6a 00		 push	 0
  002b5	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002b6	33 c9		 xor	 ecx, ecx
  002b8	0b 4e dc	 or	 ecx, DWORD PTR [esi-36]

; 294  :             return ((_UINT32_T)(t % v));

  002bb	50		 push	 eax
  002bc	51		 push	 ecx
  002bd	e8 00 00 00 00	 call	 __aullrem
  002c2	6a 00		 push	 0
  002c4	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002c5	33 c9		 xor	 ecx, ecx
  002c7	0b 4e d8	 or	 ecx, DWORD PTR [esi-40]

; 294  :             return ((_UINT32_T)(t % v));

  002ca	50		 push	 eax
  002cb	51		 push	 ecx
  002cc	e8 00 00 00 00	 call	 __aullrem

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002d1	33 c9		 xor	 ecx, ecx
  002d3	0b 4e d4	 or	 ecx, DWORD PTR [esi-44]

; 294  :             return ((_UINT32_T)(t % v));

  002d6	6a 00		 push	 0
  002d8	57		 push	 edi
  002d9	50		 push	 eax
  002da	51		 push	 ecx
  002db	e8 00 00 00 00	 call	 __aullrem
  002e0	6a 00		 push	 0
  002e2	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002e3	33 c9		 xor	 ecx, ecx
  002e5	0b 4e d0	 or	 ecx, DWORD PTR [esi-48]

; 294  :             return ((_UINT32_T)(t % v));

  002e8	50		 push	 eax
  002e9	51		 push	 ecx
  002ea	e8 00 00 00 00	 call	 __aullrem
  002ef	6a 00		 push	 0
  002f1	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002f2	33 c9		 xor	 ecx, ecx
  002f4	0b 4e cc	 or	 ecx, DWORD PTR [esi-52]

; 294  :             return ((_UINT32_T)(t % v));

  002f7	50		 push	 eax
  002f8	51		 push	 ecx
  002f9	e8 00 00 00 00	 call	 __aullrem
  002fe	6a 00		 push	 0
  00300	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00301	33 c9		 xor	 ecx, ecx
  00303	0b 4e c8	 or	 ecx, DWORD PTR [esi-56]

; 294  :             return ((_UINT32_T)(t % v));

  00306	50		 push	 eax
  00307	51		 push	 ecx
  00308	e8 00 00 00 00	 call	 __aullrem
  0030d	6a 00		 push	 0
  0030f	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00310	33 c9		 xor	 ecx, ecx
  00312	0b 4e c4	 or	 ecx, DWORD PTR [esi-60]

; 294  :             return ((_UINT32_T)(t % v));

  00315	50		 push	 eax
  00316	51		 push	 ecx
  00317	e8 00 00 00 00	 call	 __aullrem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 467  :             r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &dummy_q);

  0031c	8b d0		 mov	 edx, eax

; 468  :             up -= 16;

  0031e	83 ee 40	 sub	 esi, 64			; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  00321	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00326	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  0032b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
$LN8@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 477  :         if (u_count & 0x8)

  0032f	f6 c3 08	 test	 bl, 8
  00332	0f 84 8a 00 00
	00		 je	 $LN11@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :             return ((_UINT32_T)(t % v));

  00338	6a 00		 push	 0
  0033a	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0033b	33 c0		 xor	 eax, eax
  0033d	0b 06		 or	 eax, DWORD PTR [esi]

; 294  :             return ((_UINT32_T)(t % v));

  0033f	52		 push	 edx
  00340	50		 push	 eax
  00341	e8 00 00 00 00	 call	 __aullrem
  00346	6a 00		 push	 0
  00348	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00349	33 c9		 xor	 ecx, ecx
  0034b	0b 4e fc	 or	 ecx, DWORD PTR [esi-4]

; 294  :             return ((_UINT32_T)(t % v));

  0034e	50		 push	 eax
  0034f	51		 push	 ecx
  00350	e8 00 00 00 00	 call	 __aullrem
  00355	6a 00		 push	 0
  00357	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00358	33 c9		 xor	 ecx, ecx
  0035a	0b 4e f8	 or	 ecx, DWORD PTR [esi-8]

; 294  :             return ((_UINT32_T)(t % v));

  0035d	50		 push	 eax
  0035e	51		 push	 ecx
  0035f	e8 00 00 00 00	 call	 __aullrem
  00364	6a 00		 push	 0
  00366	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00367	33 c9		 xor	 ecx, ecx
  00369	0b 4e f4	 or	 ecx, DWORD PTR [esi-12]

; 294  :             return ((_UINT32_T)(t % v));

  0036c	50		 push	 eax
  0036d	51		 push	 ecx
  0036e	e8 00 00 00 00	 call	 __aullrem
  00373	6a 00		 push	 0
  00375	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00376	33 c9		 xor	 ecx, ecx
  00378	0b 4e f0	 or	 ecx, DWORD PTR [esi-16]

; 294  :             return ((_UINT32_T)(t % v));

  0037b	50		 push	 eax
  0037c	51		 push	 ecx
  0037d	e8 00 00 00 00	 call	 __aullrem
  00382	6a 00		 push	 0
  00384	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00385	33 c9		 xor	 ecx, ecx
  00387	0b 4e ec	 or	 ecx, DWORD PTR [esi-20]

; 294  :             return ((_UINT32_T)(t % v));

  0038a	50		 push	 eax
  0038b	51		 push	 ecx
  0038c	e8 00 00 00 00	 call	 __aullrem
  00391	6a 00		 push	 0
  00393	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00394	33 c9		 xor	 ecx, ecx
  00396	0b 4e e8	 or	 ecx, DWORD PTR [esi-24]

; 294  :             return ((_UINT32_T)(t % v));

  00399	50		 push	 eax
  0039a	51		 push	 ecx
  0039b	e8 00 00 00 00	 call	 __aullrem
  003a0	6a 00		 push	 0
  003a2	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  003a3	33 c9		 xor	 ecx, ecx
  003a5	0b 4e e4	 or	 ecx, DWORD PTR [esi-28]

; 294  :             return ((_UINT32_T)(t % v));

  003a8	50		 push	 eax
  003a9	51		 push	 ecx
  003aa	e8 00 00 00 00	 call	 __aullrem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 486  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &dummy_q);

  003af	8b d0		 mov	 edx, eax

; 487  :             up -= 8;

  003b1	83 ee 20	 sub	 esi, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  003b4	b8 08 00 00 00	 mov	 eax, 8
  003b9	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  003be	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
$LN11@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 496  :         if (u_count & 0x4)

  003c2	f6 c3 04	 test	 bl, 4
  003c5	74 4e		 je	 SHORT $LN14@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :             return ((_UINT32_T)(t % v));

  003c7	6a 00		 push	 0
  003c9	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  003ca	33 c0		 xor	 eax, eax
  003cc	0b 06		 or	 eax, DWORD PTR [esi]

; 294  :             return ((_UINT32_T)(t % v));

  003ce	52		 push	 edx
  003cf	50		 push	 eax
  003d0	e8 00 00 00 00	 call	 __aullrem
  003d5	6a 00		 push	 0
  003d7	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  003d8	33 c9		 xor	 ecx, ecx
  003da	0b 4e fc	 or	 ecx, DWORD PTR [esi-4]

; 294  :             return ((_UINT32_T)(t % v));

  003dd	50		 push	 eax
  003de	51		 push	 ecx
  003df	e8 00 00 00 00	 call	 __aullrem
  003e4	6a 00		 push	 0
  003e6	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  003e7	33 c9		 xor	 ecx, ecx
  003e9	0b 4e f8	 or	 ecx, DWORD PTR [esi-8]

; 294  :             return ((_UINT32_T)(t % v));

  003ec	50		 push	 eax
  003ed	51		 push	 ecx
  003ee	e8 00 00 00 00	 call	 __aullrem
  003f3	6a 00		 push	 0
  003f5	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  003f6	33 c9		 xor	 ecx, ecx
  003f8	0b 4e f4	 or	 ecx, DWORD PTR [esi-12]

; 294  :             return ((_UINT32_T)(t % v));

  003fb	50		 push	 eax
  003fc	51		 push	 ecx
  003fd	e8 00 00 00 00	 call	 __aullrem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 501  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

  00402	8b d0		 mov	 edx, eax

; 502  :             up -= 4;

  00404	83 ee 10	 sub	 esi, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  00407	b8 04 00 00 00	 mov	 eax, 4
  0040c	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  00411	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
$LN14@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 511  :         if (u_count & 0x2)

  00415	f6 c3 02	 test	 bl, 2
  00418	74 30		 je	 SHORT $LN17@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :             return ((_UINT32_T)(t % v));

  0041a	6a 00		 push	 0
  0041c	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0041d	33 c0		 xor	 eax, eax
  0041f	0b 06		 or	 eax, DWORD PTR [esi]

; 294  :             return ((_UINT32_T)(t % v));

  00421	52		 push	 edx
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 __aullrem
  00428	6a 00		 push	 0
  0042a	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0042b	33 c9		 xor	 ecx, ecx
  0042d	0b 4e fc	 or	 ecx, DWORD PTR [esi-4]

; 294  :             return ((_UINT32_T)(t % v));

  00430	50		 push	 eax
  00431	51		 push	 ecx
  00432	e8 00 00 00 00	 call	 __aullrem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 514  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  00437	8b d0		 mov	 edx, eax

; 515  :             up -= 2;

  00439	83 ee 08	 sub	 esi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  0043c	b8 02 00 00 00	 mov	 eax, 2
  00441	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  00446	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
$LN17@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 524  :         if (u_count & 0x1)

  0044a	f6 c3 01	 test	 bl, 1
  0044d	74 1a		 je	 SHORT $LN302@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :             return ((_UINT32_T)(t % v));

  0044f	6a 00		 push	 0
  00451	57		 push	 edi

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00452	33 c0		 xor	 eax, eax
  00454	0b 06		 or	 eax, DWORD PTR [esi]

; 294  :             return ((_UINT32_T)(t % v));

  00456	52		 push	 edx
  00457	50		 push	 eax
  00458	e8 00 00 00 00	 call	 __aullrem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  0045d	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  00464	5f		 pop	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 537  :     }

  00465	5e		 pop	 esi
  00466	5b		 pop	 ebx
  00467	5d		 pop	 ebp
  00468	c3		 ret	 0
$LN302@Rem_X_1W:
  00469	5f		 pop	 edi
  0046a	5e		 pop	 esi
  0046b	8b c2		 mov	 eax, edx
  0046d	5b		 pop	 ebx
  0046e	5d		 pop	 ebp
  0046f	c3		 ret	 0
?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ENDP	; Palmtree::Math::Core::Internal::Rem_X_1W
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z
_TEXT	SEGMENT
tv6162 = -8						; size = 8
tv6161 = -8						; size = 8
tv6152 = -8						; size = 8
tv6151 = -8						; size = 8
tv6141 = -8						; size = 8
tv6140 = -8						; size = 8
tv6130 = -8						; size = 8
tv6129 = -8						; size = 8
tv6119 = -8						; size = 8
tv6118 = -8						; size = 8
tv6108 = -8						; size = 8
tv6107 = -8						; size = 8
tv6097 = -8						; size = 8
tv6096 = -8						; size = 8
tv6086 = -8						; size = 8
tv6085 = -8						; size = 8
tv6075 = -8						; size = 8
tv6074 = -8						; size = 8
tv6064 = -8						; size = 8
tv6063 = -8						; size = 8
tv6053 = -8						; size = 8
tv6052 = -8						; size = 8
tv6042 = -8						; size = 8
tv6041 = -8						; size = 8
tv6031 = -8						; size = 8
tv6030 = -8						; size = 8
tv6020 = -8						; size = 8
tv6019 = -8						; size = 8
tv6009 = -8						; size = 8
tv6008 = -8						; size = 8
tv5998 = -8						; size = 8
tv5997 = -8						; size = 8
tv5987 = -8						; size = 8
tv5986 = -8						; size = 8
tv5976 = -8						; size = 8
tv5975 = -8						; size = 8
tv5965 = -8						; size = 8
tv5964 = -8						; size = 8
tv5954 = -8						; size = 8
tv5953 = -8						; size = 8
tv5943 = -8						; size = 8
tv5942 = -8						; size = 8
tv5932 = -8						; size = 8
tv5931 = -8						; size = 8
tv5921 = -8						; size = 8
tv5920 = -8						; size = 8
tv5910 = -8						; size = 8
tv5909 = -8						; size = 8
tv5899 = -8						; size = 8
tv5898 = -8						; size = 8
tv5888 = -8						; size = 8
tv5887 = -8						; size = 8
tv5877 = -8						; size = 8
tv5876 = -8						; size = 8
tv5866 = -8						; size = 8
tv5865 = -8						; size = 8
tv5855 = -8						; size = 8
tv5854 = -8						; size = 8
tv5844 = -8						; size = 8
tv5843 = -8						; size = 8
tv5833 = -8						; size = 8
tv5832 = -8						; size = 8
tv5822 = -8						; size = 8
tv5821 = -8						; size = 8
tv5808 = -8						; size = 8
tv5807 = -8						; size = 8
tv5798 = -8						; size = 8
tv5797 = -8						; size = 8
tv5787 = -8						; size = 8
tv5786 = -8						; size = 8
tv5776 = -8						; size = 8
tv5775 = -8						; size = 8
tv5765 = -8						; size = 8
tv5764 = -8						; size = 8
tv5754 = -8						; size = 8
tv5753 = -8						; size = 8
tv5743 = -8						; size = 8
tv5742 = -8						; size = 8
tv5732 = -8						; size = 8
tv5731 = -8						; size = 8
tv5721 = -8						; size = 8
tv5720 = -8						; size = 8
tv5710 = -8						; size = 8
tv5709 = -8						; size = 8
tv5699 = -8						; size = 8
tv5698 = -8						; size = 8
tv5688 = -8						; size = 8
tv5687 = -8						; size = 8
tv5677 = -8						; size = 8
tv5676 = -8						; size = 8
tv5666 = -8						; size = 8
tv5665 = -8						; size = 8
tv5655 = -8						; size = 8
tv5654 = -8						; size = 8
tv5644 = -8						; size = 8
tv5643 = -8						; size = 8
tv5631 = -8						; size = 8
tv5630 = -8						; size = 8
tv5621 = -8						; size = 8
tv5620 = -8						; size = 8
tv5610 = -8						; size = 8
tv5609 = -8						; size = 8
tv5599 = -8						; size = 8
tv5598 = -8						; size = 8
tv5588 = -8						; size = 8
tv5587 = -8						; size = 8
tv5577 = -8						; size = 8
tv5576 = -8						; size = 8
tv5566 = -8						; size = 8
tv5565 = -8						; size = 8
tv5555 = -8						; size = 8
tv5554 = -8						; size = 8
tv5542 = -8						; size = 8
tv5541 = -8						; size = 8
tv5532 = -8						; size = 8
tv5531 = -8						; size = 8
tv5521 = -8						; size = 8
tv5520 = -8						; size = 8
tv5510 = -8						; size = 8
tv5509 = -8						; size = 8
tv5497 = -8						; size = 8
tv5496 = -8						; size = 8
tv5487 = -8						; size = 8
tv5486 = -8						; size = 8
tv5474 = -8						; size = 8
tv5473 = -8						; size = 8
_count$1$ = 8						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v$ = 16						; size = 4
_q_buf$ = 20						; size = 4
_r_buf$ = 24						; size = 4
?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_1W, COMDAT

; 540  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 541  :         // u の最上位ワードは 0 でありうることに注意すること。
; 542  :         __UNIT_TYPE* up = u_buf + u_buf_len - 1;

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _u_buf_len$[ebp]

; 543  :         __UNIT_TYPE* qp = q_buf + u_buf_len - 1;
; 544  :         __UNIT_TYPE u_count = u_buf_len;
; 545  :         if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE))
; 546  :         {
; 547  :             while (*up == 0)
; 548  :             {
; 549  :                 --up;
; 550  :                 --qp;
; 551  :                 --u_count;
; 552  :             }
; 553  :         }
; 554  :         __UNIT_TYPE r = 0;
; 555  :         __UNIT_TYPE count = u_count >> 5;

  00009	8b c1		 mov	 eax, ecx
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	8b 75 14	 mov	 esi, DWORD PTR _q_buf$[ebp]
  00010	33 db		 xor	 ebx, ebx
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _u_buf$[ebp]
  00016	83 c6 fc	 add	 esi, -4			; fffffffcH
  00019	83 c7 fc	 add	 edi, -4			; fffffffcH
  0001c	c1 e8 05	 shr	 eax, 5
  0001f	89 45 08	 mov	 DWORD PTR _count$1$[ebp], eax
  00022	8d 34 8e	 lea	 esi, DWORD PTR [esi+ecx*4]
  00025	8d 3c 8f	 lea	 edi, DWORD PTR [edi+ecx*4]
  00028	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]

; 556  :         while (count != 0)

  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 a4 03 00
	00		 je	 $LN303@DivRem_X_1
$LL4@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 293  :             *q = (_UINT32_T)(t / v);

  00033	53		 push	 ebx
  00034	6a 00		 push	 0
  00036	51		 push	 ecx

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00037	33 c0		 xor	 eax, eax
  00039	0b 07		 or	 eax, DWORD PTR [edi]

; 293  :             *q = (_UINT32_T)(t / v);

  0003b	53		 push	 ebx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 __aulldvrm
  00042	89 5d fc	 mov	 DWORD PTR tv6161[ebp+4], ebx
  00045	5b		 pop	 ebx
  00046	53		 push	 ebx
  00047	6a 00		 push	 0
  00049	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0004c	89 06		 mov	 DWORD PTR [esi], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0004e	33 c0		 xor	 eax, eax
  00050	0b 47 fc	 or	 eax, DWORD PTR [edi-4]

; 293  :             *q = (_UINT32_T)(t / v);

  00053	51		 push	 ecx
  00054	50		 push	 eax
  00055	89 55 fc	 mov	 DWORD PTR tv6162[ebp+4], edx
  00058	e8 00 00 00 00	 call	 __aulldvrm
  0005d	89 5d fc	 mov	 DWORD PTR tv6151[ebp+4], ebx
  00060	5b		 pop	 ebx
  00061	53		 push	 ebx
  00062	6a 00		 push	 0
  00064	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00067	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0006a	33 c0		 xor	 eax, eax
  0006c	0b 47 f8	 or	 eax, DWORD PTR [edi-8]

; 293  :             *q = (_UINT32_T)(t / v);

  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	89 55 fc	 mov	 DWORD PTR tv6152[ebp+4], edx
  00074	e8 00 00 00 00	 call	 __aulldvrm
  00079	89 5d fc	 mov	 DWORD PTR tv6140[ebp+4], ebx
  0007c	5b		 pop	 ebx
  0007d	53		 push	 ebx
  0007e	6a 00		 push	 0
  00080	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00083	89 46 f8	 mov	 DWORD PTR [esi-8], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00086	33 c0		 xor	 eax, eax
  00088	0b 47 f4	 or	 eax, DWORD PTR [edi-12]

; 293  :             *q = (_UINT32_T)(t / v);

  0008b	51		 push	 ecx
  0008c	50		 push	 eax
  0008d	89 55 fc	 mov	 DWORD PTR tv6141[ebp+4], edx
  00090	e8 00 00 00 00	 call	 __aulldvrm
  00095	89 5d fc	 mov	 DWORD PTR tv6129[ebp+4], ebx
  00098	5b		 pop	 ebx
  00099	53		 push	 ebx
  0009a	6a 00		 push	 0
  0009c	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0009f	89 46 f4	 mov	 DWORD PTR [esi-12], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000a2	33 c0		 xor	 eax, eax
  000a4	0b 47 f0	 or	 eax, DWORD PTR [edi-16]

; 293  :             *q = (_UINT32_T)(t / v);

  000a7	51		 push	 ecx
  000a8	50		 push	 eax
  000a9	89 55 fc	 mov	 DWORD PTR tv6130[ebp+4], edx
  000ac	e8 00 00 00 00	 call	 __aulldvrm
  000b1	89 5d fc	 mov	 DWORD PTR tv6118[ebp+4], ebx
  000b4	5b		 pop	 ebx
  000b5	53		 push	 ebx
  000b6	6a 00		 push	 0
  000b8	ff 75 10	 push	 DWORD PTR _v$[ebp]
  000bb	89 46 f0	 mov	 DWORD PTR [esi-16], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000be	33 c0		 xor	 eax, eax
  000c0	0b 47 ec	 or	 eax, DWORD PTR [edi-20]

; 293  :             *q = (_UINT32_T)(t / v);

  000c3	51		 push	 ecx
  000c4	50		 push	 eax
  000c5	89 55 fc	 mov	 DWORD PTR tv6119[ebp+4], edx
  000c8	e8 00 00 00 00	 call	 __aulldvrm
  000cd	89 5d fc	 mov	 DWORD PTR tv6107[ebp+4], ebx
  000d0	5b		 pop	 ebx
  000d1	89 46 ec	 mov	 DWORD PTR [esi-20], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000d4	33 c0		 xor	 eax, eax
  000d6	0b 47 e8	 or	 eax, DWORD PTR [edi-24]

; 293  :             *q = (_UINT32_T)(t / v);

  000d9	89 55 fc	 mov	 DWORD PTR tv6108[ebp+4], edx
  000dc	53		 push	 ebx
  000dd	6a 00		 push	 0
  000df	ff 75 10	 push	 DWORD PTR _v$[ebp]
  000e2	51		 push	 ecx
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 __aulldvrm
  000e9	89 5d fc	 mov	 DWORD PTR tv6096[ebp+4], ebx
  000ec	5b		 pop	 ebx
  000ed	53		 push	 ebx
  000ee	6a 00		 push	 0
  000f0	ff 75 10	 push	 DWORD PTR _v$[ebp]
  000f3	89 46 e8	 mov	 DWORD PTR [esi-24], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  000f6	33 c0		 xor	 eax, eax
  000f8	0b 47 e4	 or	 eax, DWORD PTR [edi-28]

; 293  :             *q = (_UINT32_T)(t / v);

  000fb	51		 push	 ecx
  000fc	50		 push	 eax
  000fd	89 55 fc	 mov	 DWORD PTR tv6097[ebp+4], edx
  00100	e8 00 00 00 00	 call	 __aulldvrm
  00105	89 5d fc	 mov	 DWORD PTR tv6085[ebp+4], ebx
  00108	5b		 pop	 ebx
  00109	53		 push	 ebx
  0010a	6a 00		 push	 0
  0010c	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0010f	89 46 e4	 mov	 DWORD PTR [esi-28], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00112	33 c0		 xor	 eax, eax
  00114	0b 47 e0	 or	 eax, DWORD PTR [edi-32]

; 293  :             *q = (_UINT32_T)(t / v);

  00117	51		 push	 ecx
  00118	50		 push	 eax
  00119	89 55 fc	 mov	 DWORD PTR tv6086[ebp+4], edx
  0011c	e8 00 00 00 00	 call	 __aulldvrm
  00121	89 5d fc	 mov	 DWORD PTR tv6074[ebp+4], ebx
  00124	5b		 pop	 ebx
  00125	53		 push	 ebx
  00126	6a 00		 push	 0
  00128	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0012b	89 46 e0	 mov	 DWORD PTR [esi-32], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0012e	33 c0		 xor	 eax, eax
  00130	0b 47 dc	 or	 eax, DWORD PTR [edi-36]

; 293  :             *q = (_UINT32_T)(t / v);

  00133	51		 push	 ecx
  00134	50		 push	 eax
  00135	89 55 fc	 mov	 DWORD PTR tv6075[ebp+4], edx
  00138	e8 00 00 00 00	 call	 __aulldvrm
  0013d	89 5d fc	 mov	 DWORD PTR tv6063[ebp+4], ebx
  00140	5b		 pop	 ebx
  00141	53		 push	 ebx
  00142	6a 00		 push	 0
  00144	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00147	89 46 dc	 mov	 DWORD PTR [esi-36], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0014a	33 c0		 xor	 eax, eax
  0014c	0b 47 d8	 or	 eax, DWORD PTR [edi-40]

; 293  :             *q = (_UINT32_T)(t / v);

  0014f	51		 push	 ecx
  00150	50		 push	 eax
  00151	89 55 fc	 mov	 DWORD PTR tv6064[ebp+4], edx
  00154	e8 00 00 00 00	 call	 __aulldvrm
  00159	89 5d fc	 mov	 DWORD PTR tv6052[ebp+4], ebx
  0015c	5b		 pop	 ebx
  0015d	53		 push	 ebx
  0015e	6a 00		 push	 0
  00160	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00163	89 46 d8	 mov	 DWORD PTR [esi-40], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00166	33 c0		 xor	 eax, eax
  00168	0b 47 d4	 or	 eax, DWORD PTR [edi-44]

; 293  :             *q = (_UINT32_T)(t / v);

  0016b	51		 push	 ecx
  0016c	50		 push	 eax
  0016d	89 55 fc	 mov	 DWORD PTR tv6053[ebp+4], edx
  00170	e8 00 00 00 00	 call	 __aulldvrm
  00175	89 5d fc	 mov	 DWORD PTR tv6041[ebp+4], ebx
  00178	5b		 pop	 ebx
  00179	53		 push	 ebx
  0017a	6a 00		 push	 0
  0017c	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0017f	89 46 d4	 mov	 DWORD PTR [esi-44], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00182	33 c0		 xor	 eax, eax
  00184	0b 47 d0	 or	 eax, DWORD PTR [edi-48]

; 293  :             *q = (_UINT32_T)(t / v);

  00187	89 55 fc	 mov	 DWORD PTR tv6042[ebp+4], edx
  0018a	51		 push	 ecx
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 __aulldvrm
  00191	89 5d fc	 mov	 DWORD PTR tv6030[ebp+4], ebx
  00194	5b		 pop	 ebx
  00195	53		 push	 ebx
  00196	6a 00		 push	 0
  00198	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0019b	89 46 d0	 mov	 DWORD PTR [esi-48], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0019e	33 c0		 xor	 eax, eax
  001a0	0b 47 cc	 or	 eax, DWORD PTR [edi-52]

; 293  :             *q = (_UINT32_T)(t / v);

  001a3	51		 push	 ecx
  001a4	50		 push	 eax
  001a5	89 55 fc	 mov	 DWORD PTR tv6031[ebp+4], edx
  001a8	e8 00 00 00 00	 call	 __aulldvrm
  001ad	89 5d fc	 mov	 DWORD PTR tv6019[ebp+4], ebx
  001b0	5b		 pop	 ebx
  001b1	53		 push	 ebx
  001b2	6a 00		 push	 0
  001b4	ff 75 10	 push	 DWORD PTR _v$[ebp]
  001b7	89 46 cc	 mov	 DWORD PTR [esi-52], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001ba	33 c0		 xor	 eax, eax
  001bc	0b 47 c8	 or	 eax, DWORD PTR [edi-56]

; 293  :             *q = (_UINT32_T)(t / v);

  001bf	51		 push	 ecx
  001c0	50		 push	 eax
  001c1	89 55 fc	 mov	 DWORD PTR tv6020[ebp+4], edx
  001c4	e8 00 00 00 00	 call	 __aulldvrm
  001c9	89 5d fc	 mov	 DWORD PTR tv6008[ebp+4], ebx
  001cc	5b		 pop	 ebx
  001cd	53		 push	 ebx
  001ce	6a 00		 push	 0
  001d0	ff 75 10	 push	 DWORD PTR _v$[ebp]
  001d3	89 46 c8	 mov	 DWORD PTR [esi-56], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001d6	33 c0		 xor	 eax, eax
  001d8	0b 47 c4	 or	 eax, DWORD PTR [edi-60]

; 293  :             *q = (_UINT32_T)(t / v);

  001db	51		 push	 ecx
  001dc	50		 push	 eax
  001dd	89 55 fc	 mov	 DWORD PTR tv6009[ebp+4], edx
  001e0	e8 00 00 00 00	 call	 __aulldvrm
  001e5	89 5d fc	 mov	 DWORD PTR tv5997[ebp+4], ebx
  001e8	5b		 pop	 ebx
  001e9	53		 push	 ebx
  001ea	6a 00		 push	 0
  001ec	ff 75 10	 push	 DWORD PTR _v$[ebp]
  001ef	89 46 c4	 mov	 DWORD PTR [esi-60], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  001f2	33 c0		 xor	 eax, eax
  001f4	0b 47 c0	 or	 eax, DWORD PTR [edi-64]

; 293  :             *q = (_UINT32_T)(t / v);

  001f7	51		 push	 ecx
  001f8	50		 push	 eax
  001f9	89 55 fc	 mov	 DWORD PTR tv5998[ebp+4], edx
  001fc	e8 00 00 00 00	 call	 __aulldvrm
  00201	89 5d fc	 mov	 DWORD PTR tv5986[ebp+4], ebx
  00204	5b		 pop	 ebx
  00205	53		 push	 ebx
  00206	6a 00		 push	 0
  00208	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0020b	89 46 c0	 mov	 DWORD PTR [esi-64], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0020e	33 c0		 xor	 eax, eax
  00210	0b 47 bc	 or	 eax, DWORD PTR [edi-68]

; 293  :             *q = (_UINT32_T)(t / v);

  00213	51		 push	 ecx
  00214	50		 push	 eax
  00215	89 55 fc	 mov	 DWORD PTR tv5987[ebp+4], edx
  00218	e8 00 00 00 00	 call	 __aulldvrm
  0021d	89 5d fc	 mov	 DWORD PTR tv5975[ebp+4], ebx
  00220	5b		 pop	 ebx
  00221	53		 push	 ebx
  00222	6a 00		 push	 0
  00224	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00227	89 46 bc	 mov	 DWORD PTR [esi-68], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0022a	33 c0		 xor	 eax, eax
  0022c	0b 47 b8	 or	 eax, DWORD PTR [edi-72]

; 293  :             *q = (_UINT32_T)(t / v);

  0022f	51		 push	 ecx
  00230	50		 push	 eax
  00231	89 55 fc	 mov	 DWORD PTR tv5976[ebp+4], edx
  00234	e8 00 00 00 00	 call	 __aulldvrm
  00239	89 5d fc	 mov	 DWORD PTR tv5964[ebp+4], ebx
  0023c	5b		 pop	 ebx
  0023d	53		 push	 ebx
  0023e	6a 00		 push	 0
  00240	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00243	89 46 b8	 mov	 DWORD PTR [esi-72], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00246	33 c0		 xor	 eax, eax
  00248	0b 47 b4	 or	 eax, DWORD PTR [edi-76]

; 293  :             *q = (_UINT32_T)(t / v);

  0024b	51		 push	 ecx
  0024c	50		 push	 eax
  0024d	89 55 fc	 mov	 DWORD PTR tv5965[ebp+4], edx
  00250	e8 00 00 00 00	 call	 __aulldvrm
  00255	89 5d fc	 mov	 DWORD PTR tv5953[ebp+4], ebx
  00258	5b		 pop	 ebx
  00259	53		 push	 ebx
  0025a	6a 00		 push	 0
  0025c	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0025f	89 46 b4	 mov	 DWORD PTR [esi-76], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00262	33 c0		 xor	 eax, eax
  00264	0b 47 b0	 or	 eax, DWORD PTR [edi-80]

; 293  :             *q = (_UINT32_T)(t / v);

  00267	51		 push	 ecx
  00268	50		 push	 eax
  00269	89 55 fc	 mov	 DWORD PTR tv5954[ebp+4], edx
  0026c	e8 00 00 00 00	 call	 __aulldvrm
  00271	89 5d fc	 mov	 DWORD PTR tv5942[ebp+4], ebx
  00274	5b		 pop	 ebx
  00275	53		 push	 ebx
  00276	6a 00		 push	 0
  00278	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0027b	89 46 b0	 mov	 DWORD PTR [esi-80], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0027e	33 c0		 xor	 eax, eax
  00280	0b 47 ac	 or	 eax, DWORD PTR [edi-84]

; 293  :             *q = (_UINT32_T)(t / v);

  00283	51		 push	 ecx
  00284	50		 push	 eax
  00285	89 55 fc	 mov	 DWORD PTR tv5943[ebp+4], edx
  00288	e8 00 00 00 00	 call	 __aulldvrm
  0028d	89 5d fc	 mov	 DWORD PTR tv5931[ebp+4], ebx
  00290	5b		 pop	 ebx
  00291	53		 push	 ebx
  00292	6a 00		 push	 0
  00294	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00297	89 46 ac	 mov	 DWORD PTR [esi-84], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0029a	33 c0		 xor	 eax, eax
  0029c	0b 47 a8	 or	 eax, DWORD PTR [edi-88]

; 293  :             *q = (_UINT32_T)(t / v);

  0029f	51		 push	 ecx
  002a0	50		 push	 eax
  002a1	89 55 fc	 mov	 DWORD PTR tv5932[ebp+4], edx
  002a4	e8 00 00 00 00	 call	 __aulldvrm
  002a9	89 5d fc	 mov	 DWORD PTR tv5920[ebp+4], ebx
  002ac	5b		 pop	 ebx
  002ad	53		 push	 ebx
  002ae	6a 00		 push	 0
  002b0	ff 75 10	 push	 DWORD PTR _v$[ebp]
  002b3	89 46 a8	 mov	 DWORD PTR [esi-88], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002b6	33 c0		 xor	 eax, eax
  002b8	0b 47 a4	 or	 eax, DWORD PTR [edi-92]

; 293  :             *q = (_UINT32_T)(t / v);

  002bb	51		 push	 ecx
  002bc	50		 push	 eax
  002bd	89 55 fc	 mov	 DWORD PTR tv5921[ebp+4], edx
  002c0	e8 00 00 00 00	 call	 __aulldvrm
  002c5	89 5d fc	 mov	 DWORD PTR tv5909[ebp+4], ebx
  002c8	5b		 pop	 ebx
  002c9	53		 push	 ebx
  002ca	6a 00		 push	 0
  002cc	ff 75 10	 push	 DWORD PTR _v$[ebp]
  002cf	89 46 a4	 mov	 DWORD PTR [esi-92], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002d2	33 c0		 xor	 eax, eax
  002d4	0b 47 a0	 or	 eax, DWORD PTR [edi-96]

; 293  :             *q = (_UINT32_T)(t / v);

  002d7	51		 push	 ecx
  002d8	50		 push	 eax
  002d9	89 55 fc	 mov	 DWORD PTR tv5910[ebp+4], edx
  002dc	e8 00 00 00 00	 call	 __aulldvrm
  002e1	89 5d fc	 mov	 DWORD PTR tv5898[ebp+4], ebx
  002e4	5b		 pop	 ebx
  002e5	89 55 fc	 mov	 DWORD PTR tv5899[ebp+4], edx
  002e8	53		 push	 ebx
  002e9	6a 00		 push	 0
  002eb	ff 75 10	 push	 DWORD PTR _v$[ebp]
  002ee	89 46 a0	 mov	 DWORD PTR [esi-96], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  002f1	33 c0		 xor	 eax, eax
  002f3	0b 47 9c	 or	 eax, DWORD PTR [edi-100]

; 293  :             *q = (_UINT32_T)(t / v);

  002f6	51		 push	 ecx
  002f7	50		 push	 eax
  002f8	e8 00 00 00 00	 call	 __aulldvrm
  002fd	89 5d fc	 mov	 DWORD PTR tv5887[ebp+4], ebx
  00300	5b		 pop	 ebx
  00301	53		 push	 ebx
  00302	6a 00		 push	 0
  00304	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00307	89 46 9c	 mov	 DWORD PTR [esi-100], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0030a	33 c0		 xor	 eax, eax
  0030c	0b 47 98	 or	 eax, DWORD PTR [edi-104]

; 293  :             *q = (_UINT32_T)(t / v);

  0030f	51		 push	 ecx
  00310	50		 push	 eax
  00311	89 55 fc	 mov	 DWORD PTR tv5888[ebp+4], edx
  00314	e8 00 00 00 00	 call	 __aulldvrm
  00319	89 5d fc	 mov	 DWORD PTR tv5876[ebp+4], ebx
  0031c	5b		 pop	 ebx
  0031d	53		 push	 ebx
  0031e	6a 00		 push	 0
  00320	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00323	89 46 98	 mov	 DWORD PTR [esi-104], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00326	33 c0		 xor	 eax, eax
  00328	0b 47 94	 or	 eax, DWORD PTR [edi-108]

; 293  :             *q = (_UINT32_T)(t / v);

  0032b	51		 push	 ecx
  0032c	50		 push	 eax
  0032d	89 55 fc	 mov	 DWORD PTR tv5877[ebp+4], edx
  00330	e8 00 00 00 00	 call	 __aulldvrm
  00335	89 5d fc	 mov	 DWORD PTR tv5865[ebp+4], ebx
  00338	5b		 pop	 ebx
  00339	53		 push	 ebx
  0033a	6a 00		 push	 0
  0033c	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0033f	89 46 94	 mov	 DWORD PTR [esi-108], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00342	33 c0		 xor	 eax, eax
  00344	0b 47 90	 or	 eax, DWORD PTR [edi-112]

; 293  :             *q = (_UINT32_T)(t / v);

  00347	51		 push	 ecx
  00348	50		 push	 eax
  00349	89 55 fc	 mov	 DWORD PTR tv5866[ebp+4], edx
  0034c	e8 00 00 00 00	 call	 __aulldvrm
  00351	89 5d fc	 mov	 DWORD PTR tv5854[ebp+4], ebx
  00354	5b		 pop	 ebx
  00355	53		 push	 ebx
  00356	6a 00		 push	 0
  00358	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0035b	89 46 90	 mov	 DWORD PTR [esi-112], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0035e	33 c0		 xor	 eax, eax
  00360	0b 47 8c	 or	 eax, DWORD PTR [edi-116]

; 293  :             *q = (_UINT32_T)(t / v);

  00363	51		 push	 ecx
  00364	50		 push	 eax
  00365	89 55 fc	 mov	 DWORD PTR tv5855[ebp+4], edx
  00368	e8 00 00 00 00	 call	 __aulldvrm
  0036d	89 5d fc	 mov	 DWORD PTR tv5843[ebp+4], ebx
  00370	5b		 pop	 ebx
  00371	53		 push	 ebx
  00372	6a 00		 push	 0
  00374	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00377	89 46 8c	 mov	 DWORD PTR [esi-116], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0037a	33 c0		 xor	 eax, eax
  0037c	0b 47 88	 or	 eax, DWORD PTR [edi-120]

; 293  :             *q = (_UINT32_T)(t / v);

  0037f	51		 push	 ecx
  00380	50		 push	 eax
  00381	89 55 fc	 mov	 DWORD PTR tv5844[ebp+4], edx
  00384	e8 00 00 00 00	 call	 __aulldvrm
  00389	89 5d fc	 mov	 DWORD PTR tv5832[ebp+4], ebx
  0038c	5b		 pop	 ebx
  0038d	89 46 88	 mov	 DWORD PTR [esi-120], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00390	33 c0		 xor	 eax, eax
  00392	0b 47 84	 or	 eax, DWORD PTR [edi-124]

; 293  :             *q = (_UINT32_T)(t / v);

  00395	89 55 fc	 mov	 DWORD PTR tv5833[ebp+4], edx
  00398	53		 push	 ebx
  00399	6a 00		 push	 0
  0039b	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0039e	51		 push	 ecx
  0039f	50		 push	 eax
  003a0	e8 00 00 00 00	 call	 __aulldvrm
  003a5	89 5d fc	 mov	 DWORD PTR tv5821[ebp+4], ebx
  003a8	5b		 pop	 ebx
  003a9	8b d9		 mov	 ebx, ecx
  003ab	89 46 84	 mov	 DWORD PTR [esi-124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 592  :             --count;

  003ae	8b 4d 08	 mov	 ecx, DWORD PTR _count$1$[ebp]
  003b1	83 c7 80	 add	 edi, -128		; ffffff80H
  003b4	49		 dec	 ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 293  :             *q = (_UINT32_T)(t / v);

  003b5	89 55 fc	 mov	 DWORD PTR tv5822[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 591  :             qp -= 32;

  003b8	83 c6 80	 add	 esi, -128		; ffffff80H

; 592  :             --count;

  003bb	89 4d 08	 mov	 DWORD PTR _count$1$[ebp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  003be	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  003c3	ba 0c 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  003c8	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 556  :         while (count != 0)

  003cc	85 c9		 test	 ecx, ecx
  003ce	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  003d1	0f 85 5c fc ff
	ff		 jne	 $LL4@DivRem_X_1
$LN303@DivRem_X_1:

; 593  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 594  :             if (sizeof(r) == sizeof(_UINT64_T))
; 595  :                 AddToDIV64Counter(32);
; 596  :             else
; 597  :                 AddToDIV32Counter(32);
; 598  : #endif
; 599  :         }
; 600  : 
; 601  :         if (u_count & 0x10)

  003d7	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  003da	a8 10		 test	 al, 16			; 00000010H
  003dc	0f 84 d5 01 00
	00		 je	 $LN11@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 293  :             *q = (_UINT32_T)(t / v);

  003e2	53		 push	 ebx
  003e3	6a 00		 push	 0
  003e5	51		 push	 ecx

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  003e6	33 c0		 xor	 eax, eax
  003e8	0b 07		 or	 eax, DWORD PTR [edi]

; 293  :             *q = (_UINT32_T)(t / v);

  003ea	53		 push	 ebx
  003eb	50		 push	 eax
  003ec	e8 00 00 00 00	 call	 __aulldvrm
  003f1	89 5d fc	 mov	 DWORD PTR tv5807[ebp+4], ebx
  003f4	5b		 pop	 ebx
  003f5	53		 push	 ebx
  003f6	6a 00		 push	 0
  003f8	ff 75 10	 push	 DWORD PTR _v$[ebp]
  003fb	89 06		 mov	 DWORD PTR [esi], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  003fd	33 c0		 xor	 eax, eax
  003ff	0b 47 fc	 or	 eax, DWORD PTR [edi-4]

; 293  :             *q = (_UINT32_T)(t / v);

  00402	51		 push	 ecx
  00403	50		 push	 eax
  00404	89 55 fc	 mov	 DWORD PTR tv5808[ebp+4], edx
  00407	e8 00 00 00 00	 call	 __aulldvrm
  0040c	89 5d fc	 mov	 DWORD PTR tv5797[ebp+4], ebx
  0040f	5b		 pop	 ebx
  00410	53		 push	 ebx
  00411	6a 00		 push	 0
  00413	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00416	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00419	33 c0		 xor	 eax, eax
  0041b	0b 47 f8	 or	 eax, DWORD PTR [edi-8]

; 293  :             *q = (_UINT32_T)(t / v);

  0041e	51		 push	 ecx
  0041f	50		 push	 eax
  00420	89 55 fc	 mov	 DWORD PTR tv5798[ebp+4], edx
  00423	e8 00 00 00 00	 call	 __aulldvrm
  00428	89 5d fc	 mov	 DWORD PTR tv5786[ebp+4], ebx
  0042b	5b		 pop	 ebx
  0042c	53		 push	 ebx
  0042d	6a 00		 push	 0
  0042f	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00432	89 46 f8	 mov	 DWORD PTR [esi-8], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00435	33 c0		 xor	 eax, eax
  00437	0b 47 f4	 or	 eax, DWORD PTR [edi-12]

; 293  :             *q = (_UINT32_T)(t / v);

  0043a	51		 push	 ecx
  0043b	50		 push	 eax
  0043c	89 55 fc	 mov	 DWORD PTR tv5787[ebp+4], edx
  0043f	e8 00 00 00 00	 call	 __aulldvrm
  00444	89 5d fc	 mov	 DWORD PTR tv5775[ebp+4], ebx
  00447	5b		 pop	 ebx
  00448	53		 push	 ebx
  00449	6a 00		 push	 0
  0044b	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0044e	89 46 f4	 mov	 DWORD PTR [esi-12], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00451	33 c0		 xor	 eax, eax
  00453	0b 47 f0	 or	 eax, DWORD PTR [edi-16]

; 293  :             *q = (_UINT32_T)(t / v);

  00456	51		 push	 ecx
  00457	50		 push	 eax
  00458	89 55 fc	 mov	 DWORD PTR tv5776[ebp+4], edx
  0045b	e8 00 00 00 00	 call	 __aulldvrm
  00460	89 5d fc	 mov	 DWORD PTR tv5764[ebp+4], ebx
  00463	5b		 pop	 ebx
  00464	53		 push	 ebx
  00465	6a 00		 push	 0
  00467	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0046a	89 46 f0	 mov	 DWORD PTR [esi-16], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0046d	33 c0		 xor	 eax, eax
  0046f	0b 47 ec	 or	 eax, DWORD PTR [edi-20]

; 293  :             *q = (_UINT32_T)(t / v);

  00472	51		 push	 ecx
  00473	50		 push	 eax
  00474	89 55 fc	 mov	 DWORD PTR tv5765[ebp+4], edx
  00477	e8 00 00 00 00	 call	 __aulldvrm
  0047c	89 5d fc	 mov	 DWORD PTR tv5753[ebp+4], ebx
  0047f	5b		 pop	 ebx
  00480	89 46 ec	 mov	 DWORD PTR [esi-20], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00483	33 c0		 xor	 eax, eax
  00485	0b 47 e8	 or	 eax, DWORD PTR [edi-24]

; 293  :             *q = (_UINT32_T)(t / v);

  00488	89 55 fc	 mov	 DWORD PTR tv5754[ebp+4], edx
  0048b	53		 push	 ebx
  0048c	6a 00		 push	 0
  0048e	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00491	51		 push	 ecx
  00492	50		 push	 eax
  00493	e8 00 00 00 00	 call	 __aulldvrm
  00498	89 5d fc	 mov	 DWORD PTR tv5742[ebp+4], ebx
  0049b	5b		 pop	 ebx
  0049c	53		 push	 ebx
  0049d	6a 00		 push	 0
  0049f	ff 75 10	 push	 DWORD PTR _v$[ebp]
  004a2	89 46 e8	 mov	 DWORD PTR [esi-24], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  004a5	33 c0		 xor	 eax, eax
  004a7	0b 47 e4	 or	 eax, DWORD PTR [edi-28]

; 293  :             *q = (_UINT32_T)(t / v);

  004aa	51		 push	 ecx
  004ab	50		 push	 eax
  004ac	89 55 fc	 mov	 DWORD PTR tv5743[ebp+4], edx
  004af	e8 00 00 00 00	 call	 __aulldvrm
  004b4	89 5d fc	 mov	 DWORD PTR tv5731[ebp+4], ebx
  004b7	5b		 pop	 ebx
  004b8	53		 push	 ebx
  004b9	6a 00		 push	 0
  004bb	ff 75 10	 push	 DWORD PTR _v$[ebp]
  004be	89 46 e4	 mov	 DWORD PTR [esi-28], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  004c1	33 c0		 xor	 eax, eax
  004c3	0b 47 e0	 or	 eax, DWORD PTR [edi-32]

; 293  :             *q = (_UINT32_T)(t / v);

  004c6	51		 push	 ecx
  004c7	50		 push	 eax
  004c8	89 55 fc	 mov	 DWORD PTR tv5732[ebp+4], edx
  004cb	e8 00 00 00 00	 call	 __aulldvrm
  004d0	89 5d fc	 mov	 DWORD PTR tv5720[ebp+4], ebx
  004d3	5b		 pop	 ebx
  004d4	53		 push	 ebx
  004d5	6a 00		 push	 0
  004d7	ff 75 10	 push	 DWORD PTR _v$[ebp]
  004da	89 46 e0	 mov	 DWORD PTR [esi-32], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  004dd	33 c0		 xor	 eax, eax
  004df	0b 47 dc	 or	 eax, DWORD PTR [edi-36]

; 293  :             *q = (_UINT32_T)(t / v);

  004e2	51		 push	 ecx
  004e3	50		 push	 eax
  004e4	89 55 fc	 mov	 DWORD PTR tv5721[ebp+4], edx
  004e7	e8 00 00 00 00	 call	 __aulldvrm
  004ec	89 5d fc	 mov	 DWORD PTR tv5709[ebp+4], ebx
  004ef	5b		 pop	 ebx
  004f0	53		 push	 ebx
  004f1	6a 00		 push	 0
  004f3	ff 75 10	 push	 DWORD PTR _v$[ebp]
  004f6	89 46 dc	 mov	 DWORD PTR [esi-36], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  004f9	33 c0		 xor	 eax, eax
  004fb	0b 47 d8	 or	 eax, DWORD PTR [edi-40]

; 293  :             *q = (_UINT32_T)(t / v);

  004fe	51		 push	 ecx
  004ff	50		 push	 eax
  00500	89 55 fc	 mov	 DWORD PTR tv5710[ebp+4], edx
  00503	e8 00 00 00 00	 call	 __aulldvrm
  00508	89 5d fc	 mov	 DWORD PTR tv5698[ebp+4], ebx
  0050b	5b		 pop	 ebx
  0050c	53		 push	 ebx
  0050d	6a 00		 push	 0
  0050f	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00512	89 46 d8	 mov	 DWORD PTR [esi-40], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00515	33 c0		 xor	 eax, eax
  00517	0b 47 d4	 or	 eax, DWORD PTR [edi-44]

; 293  :             *q = (_UINT32_T)(t / v);

  0051a	51		 push	 ecx
  0051b	50		 push	 eax
  0051c	89 55 fc	 mov	 DWORD PTR tv5699[ebp+4], edx
  0051f	e8 00 00 00 00	 call	 __aulldvrm
  00524	89 5d fc	 mov	 DWORD PTR tv5687[ebp+4], ebx
  00527	5b		 pop	 ebx
  00528	53		 push	 ebx
  00529	6a 00		 push	 0
  0052b	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0052e	89 46 d4	 mov	 DWORD PTR [esi-44], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00531	33 c0		 xor	 eax, eax
  00533	0b 47 d0	 or	 eax, DWORD PTR [edi-48]

; 293  :             *q = (_UINT32_T)(t / v);

  00536	89 55 fc	 mov	 DWORD PTR tv5688[ebp+4], edx
  00539	51		 push	 ecx
  0053a	50		 push	 eax
  0053b	e8 00 00 00 00	 call	 __aulldvrm
  00540	89 5d fc	 mov	 DWORD PTR tv5676[ebp+4], ebx
  00543	5b		 pop	 ebx
  00544	53		 push	 ebx
  00545	6a 00		 push	 0
  00547	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0054a	89 46 d0	 mov	 DWORD PTR [esi-48], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0054d	33 c0		 xor	 eax, eax
  0054f	0b 47 cc	 or	 eax, DWORD PTR [edi-52]

; 293  :             *q = (_UINT32_T)(t / v);

  00552	51		 push	 ecx
  00553	50		 push	 eax
  00554	89 55 fc	 mov	 DWORD PTR tv5677[ebp+4], edx
  00557	e8 00 00 00 00	 call	 __aulldvrm
  0055c	89 5d fc	 mov	 DWORD PTR tv5665[ebp+4], ebx
  0055f	5b		 pop	 ebx
  00560	53		 push	 ebx
  00561	6a 00		 push	 0
  00563	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00566	89 46 cc	 mov	 DWORD PTR [esi-52], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00569	33 c0		 xor	 eax, eax
  0056b	0b 47 c8	 or	 eax, DWORD PTR [edi-56]

; 293  :             *q = (_UINT32_T)(t / v);

  0056e	51		 push	 ecx
  0056f	50		 push	 eax
  00570	89 55 fc	 mov	 DWORD PTR tv5666[ebp+4], edx
  00573	e8 00 00 00 00	 call	 __aulldvrm
  00578	89 5d fc	 mov	 DWORD PTR tv5654[ebp+4], ebx
  0057b	5b		 pop	 ebx
  0057c	53		 push	 ebx
  0057d	6a 00		 push	 0
  0057f	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00582	89 46 c8	 mov	 DWORD PTR [esi-56], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00585	33 c0		 xor	 eax, eax
  00587	0b 47 c4	 or	 eax, DWORD PTR [edi-60]

; 293  :             *q = (_UINT32_T)(t / v);

  0058a	51		 push	 ecx
  0058b	50		 push	 eax
  0058c	89 55 fc	 mov	 DWORD PTR tv5655[ebp+4], edx
  0058f	e8 00 00 00 00	 call	 __aulldvrm
  00594	89 5d fc	 mov	 DWORD PTR tv5643[ebp+4], ebx
  00597	5b		 pop	 ebx
  00598	89 46 c4	 mov	 DWORD PTR [esi-60], eax
  0059b	8b d9		 mov	 ebx, ecx
  0059d	89 55 fc	 mov	 DWORD PTR tv5644[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 619  :             up -= 16;

  005a0	83 ef 40	 sub	 edi, 64			; 00000040H

; 620  :             qp -= 16;

  005a3	83 ee 40	 sub	 esi, 64			; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  005a6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005ab	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  005b0	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
  005b4	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
$LN11@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 629  :         if (u_count & 0x8)

  005b7	a8 08		 test	 al, 8
  005b9	0f 84 f7 00 00
	00		 je	 $LN14@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 293  :             *q = (_UINT32_T)(t / v);

  005bf	53		 push	 ebx
  005c0	6a 00		 push	 0
  005c2	ff 75 10	 push	 DWORD PTR _v$[ebp]

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  005c5	33 c0		 xor	 eax, eax
  005c7	0b 07		 or	 eax, DWORD PTR [edi]

; 293  :             *q = (_UINT32_T)(t / v);

  005c9	53		 push	 ebx
  005ca	50		 push	 eax
  005cb	e8 00 00 00 00	 call	 __aulldvrm
  005d0	89 5d fc	 mov	 DWORD PTR tv5630[ebp+4], ebx
  005d3	5b		 pop	 ebx
  005d4	53		 push	 ebx
  005d5	6a 00		 push	 0
  005d7	ff 75 10	 push	 DWORD PTR _v$[ebp]
  005da	89 06		 mov	 DWORD PTR [esi], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  005dc	33 c0		 xor	 eax, eax
  005de	0b 47 fc	 or	 eax, DWORD PTR [edi-4]

; 293  :             *q = (_UINT32_T)(t / v);

  005e1	51		 push	 ecx
  005e2	50		 push	 eax
  005e3	89 55 fc	 mov	 DWORD PTR tv5631[ebp+4], edx
  005e6	e8 00 00 00 00	 call	 __aulldvrm
  005eb	89 5d fc	 mov	 DWORD PTR tv5620[ebp+4], ebx
  005ee	5b		 pop	 ebx
  005ef	53		 push	 ebx
  005f0	6a 00		 push	 0
  005f2	ff 75 10	 push	 DWORD PTR _v$[ebp]
  005f5	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  005f8	33 c0		 xor	 eax, eax
  005fa	0b 47 f8	 or	 eax, DWORD PTR [edi-8]

; 293  :             *q = (_UINT32_T)(t / v);

  005fd	51		 push	 ecx
  005fe	50		 push	 eax
  005ff	89 55 fc	 mov	 DWORD PTR tv5621[ebp+4], edx
  00602	e8 00 00 00 00	 call	 __aulldvrm
  00607	89 5d fc	 mov	 DWORD PTR tv5609[ebp+4], ebx
  0060a	5b		 pop	 ebx
  0060b	53		 push	 ebx
  0060c	6a 00		 push	 0
  0060e	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00611	89 46 f8	 mov	 DWORD PTR [esi-8], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00614	33 c0		 xor	 eax, eax
  00616	0b 47 f4	 or	 eax, DWORD PTR [edi-12]

; 293  :             *q = (_UINT32_T)(t / v);

  00619	51		 push	 ecx
  0061a	50		 push	 eax
  0061b	89 55 fc	 mov	 DWORD PTR tv5610[ebp+4], edx
  0061e	e8 00 00 00 00	 call	 __aulldvrm
  00623	89 5d fc	 mov	 DWORD PTR tv5598[ebp+4], ebx
  00626	5b		 pop	 ebx
  00627	53		 push	 ebx
  00628	6a 00		 push	 0
  0062a	ff 75 10	 push	 DWORD PTR _v$[ebp]
  0062d	89 46 f4	 mov	 DWORD PTR [esi-12], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00630	33 c0		 xor	 eax, eax
  00632	0b 47 f0	 or	 eax, DWORD PTR [edi-16]

; 293  :             *q = (_UINT32_T)(t / v);

  00635	51		 push	 ecx
  00636	50		 push	 eax
  00637	89 55 fc	 mov	 DWORD PTR tv5599[ebp+4], edx
  0063a	e8 00 00 00 00	 call	 __aulldvrm
  0063f	89 5d fc	 mov	 DWORD PTR tv5587[ebp+4], ebx
  00642	5b		 pop	 ebx
  00643	53		 push	 ebx
  00644	6a 00		 push	 0
  00646	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00649	89 46 f0	 mov	 DWORD PTR [esi-16], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0064c	33 c0		 xor	 eax, eax
  0064e	0b 47 ec	 or	 eax, DWORD PTR [edi-20]

; 293  :             *q = (_UINT32_T)(t / v);

  00651	51		 push	 ecx
  00652	50		 push	 eax
  00653	89 55 fc	 mov	 DWORD PTR tv5588[ebp+4], edx
  00656	e8 00 00 00 00	 call	 __aulldvrm
  0065b	89 5d fc	 mov	 DWORD PTR tv5576[ebp+4], ebx
  0065e	5b		 pop	 ebx
  0065f	89 46 ec	 mov	 DWORD PTR [esi-20], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00662	33 c0		 xor	 eax, eax
  00664	0b 47 e8	 or	 eax, DWORD PTR [edi-24]

; 293  :             *q = (_UINT32_T)(t / v);

  00667	89 55 fc	 mov	 DWORD PTR tv5577[ebp+4], edx
  0066a	53		 push	 ebx
  0066b	6a 00		 push	 0
  0066d	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00670	51		 push	 ecx
  00671	50		 push	 eax
  00672	e8 00 00 00 00	 call	 __aulldvrm
  00677	89 5d fc	 mov	 DWORD PTR tv5565[ebp+4], ebx
  0067a	5b		 pop	 ebx
  0067b	53		 push	 ebx
  0067c	6a 00		 push	 0
  0067e	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00681	89 46 e8	 mov	 DWORD PTR [esi-24], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00684	33 c0		 xor	 eax, eax
  00686	0b 47 e4	 or	 eax, DWORD PTR [edi-28]

; 293  :             *q = (_UINT32_T)(t / v);

  00689	51		 push	 ecx
  0068a	50		 push	 eax
  0068b	89 55 fc	 mov	 DWORD PTR tv5566[ebp+4], edx
  0068e	e8 00 00 00 00	 call	 __aulldvrm
  00693	89 5d fc	 mov	 DWORD PTR tv5554[ebp+4], ebx
  00696	5b		 pop	 ebx
  00697	89 46 e4	 mov	 DWORD PTR [esi-28], eax
  0069a	8b d9		 mov	 ebx, ecx
  0069c	89 55 fc	 mov	 DWORD PTR tv5555[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 639  :             up -= 8;

  0069f	83 ef 20	 sub	 edi, 32			; 00000020H

; 640  :             qp -= 8;

  006a2	83 ee 20	 sub	 esi, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  006a5	b8 08 00 00 00	 mov	 eax, 8
  006aa	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  006af	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
  006b3	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
$LN14@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 649  :         if (u_count & 0x4)

  006b6	a8 04		 test	 al, 4
  006b8	0f 84 87 00 00
	00		 je	 $LN17@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 293  :             *q = (_UINT32_T)(t / v);

  006be	53		 push	 ebx
  006bf	6a 00		 push	 0
  006c1	ff 75 10	 push	 DWORD PTR _v$[ebp]

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  006c4	33 c0		 xor	 eax, eax
  006c6	0b 07		 or	 eax, DWORD PTR [edi]

; 293  :             *q = (_UINT32_T)(t / v);

  006c8	53		 push	 ebx
  006c9	50		 push	 eax
  006ca	e8 00 00 00 00	 call	 __aulldvrm
  006cf	89 5d fc	 mov	 DWORD PTR tv5541[ebp+4], ebx
  006d2	5b		 pop	 ebx
  006d3	53		 push	 ebx
  006d4	6a 00		 push	 0
  006d6	ff 75 10	 push	 DWORD PTR _v$[ebp]
  006d9	89 06		 mov	 DWORD PTR [esi], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  006db	33 c0		 xor	 eax, eax
  006dd	0b 47 fc	 or	 eax, DWORD PTR [edi-4]

; 293  :             *q = (_UINT32_T)(t / v);

  006e0	51		 push	 ecx
  006e1	50		 push	 eax
  006e2	89 55 fc	 mov	 DWORD PTR tv5542[ebp+4], edx
  006e5	e8 00 00 00 00	 call	 __aulldvrm
  006ea	89 5d fc	 mov	 DWORD PTR tv5531[ebp+4], ebx
  006ed	5b		 pop	 ebx
  006ee	53		 push	 ebx
  006ef	6a 00		 push	 0
  006f1	ff 75 10	 push	 DWORD PTR _v$[ebp]
  006f4	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  006f7	33 c0		 xor	 eax, eax
  006f9	0b 47 f8	 or	 eax, DWORD PTR [edi-8]

; 293  :             *q = (_UINT32_T)(t / v);

  006fc	51		 push	 ecx
  006fd	50		 push	 eax
  006fe	89 55 fc	 mov	 DWORD PTR tv5532[ebp+4], edx
  00701	e8 00 00 00 00	 call	 __aulldvrm
  00706	89 5d fc	 mov	 DWORD PTR tv5520[ebp+4], ebx
  00709	5b		 pop	 ebx
  0070a	53		 push	 ebx
  0070b	6a 00		 push	 0
  0070d	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00710	89 46 f8	 mov	 DWORD PTR [esi-8], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00713	33 c0		 xor	 eax, eax
  00715	0b 47 f4	 or	 eax, DWORD PTR [edi-12]

; 293  :             *q = (_UINT32_T)(t / v);

  00718	51		 push	 ecx
  00719	50		 push	 eax
  0071a	89 55 fc	 mov	 DWORD PTR tv5521[ebp+4], edx
  0071d	e8 00 00 00 00	 call	 __aulldvrm
  00722	89 5d fc	 mov	 DWORD PTR tv5509[ebp+4], ebx
  00725	5b		 pop	 ebx
  00726	89 46 f4	 mov	 DWORD PTR [esi-12], eax
  00729	8b d9		 mov	 ebx, ecx
  0072b	89 55 fc	 mov	 DWORD PTR tv5510[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 655  :             up -= 4;

  0072e	83 ef 10	 sub	 edi, 16			; 00000010H

; 656  :             qp -= 4;

  00731	83 ee 10	 sub	 esi, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  00734	b8 04 00 00 00	 mov	 eax, 4
  00739	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  0073e	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
  00742	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
$LN17@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 665  :         if (u_count & 0x2)

  00745	a8 02		 test	 al, 2
  00747	74 4f		 je	 SHORT $LN20@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 293  :             *q = (_UINT32_T)(t / v);

  00749	53		 push	 ebx
  0074a	6a 00		 push	 0
  0074c	ff 75 10	 push	 DWORD PTR _v$[ebp]

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0074f	33 c0		 xor	 eax, eax
  00751	0b 07		 or	 eax, DWORD PTR [edi]

; 293  :             *q = (_UINT32_T)(t / v);

  00753	53		 push	 ebx
  00754	50		 push	 eax
  00755	e8 00 00 00 00	 call	 __aulldvrm
  0075a	89 5d fc	 mov	 DWORD PTR tv5496[ebp+4], ebx
  0075d	5b		 pop	 ebx
  0075e	53		 push	 ebx
  0075f	6a 00		 push	 0
  00761	ff 75 10	 push	 DWORD PTR _v$[ebp]
  00764	89 06		 mov	 DWORD PTR [esi], eax

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00766	33 c0		 xor	 eax, eax
  00768	0b 47 fc	 or	 eax, DWORD PTR [edi-4]

; 293  :             *q = (_UINT32_T)(t / v);

  0076b	51		 push	 ecx
  0076c	50		 push	 eax
  0076d	89 55 fc	 mov	 DWORD PTR tv5497[ebp+4], edx
  00770	e8 00 00 00 00	 call	 __aulldvrm
  00775	89 5d fc	 mov	 DWORD PTR tv5486[ebp+4], ebx
  00778	5b		 pop	 ebx
  00779	89 46 fc	 mov	 DWORD PTR [esi-4], eax
  0077c	8b d9		 mov	 ebx, ecx
  0077e	89 55 fc	 mov	 DWORD PTR tv5487[ebp+4], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 669  :             up -= 2;

  00781	83 ef 08	 sub	 edi, 8

; 670  :             qp -= 2;

  00784	83 ee 08	 sub	 esi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  00787	b8 02 00 00 00	 mov	 eax, 2
  0078c	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  00791	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax
  00795	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
$LN20@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 679  :         if (u_count & 0x1)

  00798	a8 01		 test	 al, 1
  0079a	74 2d		 je	 SHORT $LN305@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 293  :             *q = (_UINT32_T)(t / v);

  0079c	53		 push	 ebx
  0079d	6a 00		 push	 0
  0079f	ff 75 10	 push	 DWORD PTR _v$[ebp]

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  007a2	33 c0		 xor	 eax, eax
  007a4	0b 07		 or	 eax, DWORD PTR [edi]

; 293  :             *q = (_UINT32_T)(t / v);

  007a6	53		 push	 ebx
  007a7	50		 push	 eax
  007a8	e8 00 00 00 00	 call	 __aulldvrm
  007ad	89 5d fc	 mov	 DWORD PTR tv5473[ebp+4], ebx
  007b0	5b		 pop	 ebx
  007b1	89 55 fc	 mov	 DWORD PTR tv5474[ebp+4], edx
  007b4	89 06		 mov	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  007b6	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp

; 692  :         *r_buf = r;

  007bd	8b 45 18	 mov	 eax, DWORD PTR _r_buf$[ebp]
  007c0	5f		 pop	 edi

; 693  :     }

  007c1	5e		 pop	 esi
  007c2	5b		 pop	 ebx
  007c3	89 08		 mov	 DWORD PTR [eax], ecx
  007c5	8b e5		 mov	 esp, ebp
  007c7	5d		 pop	 ebp
  007c8	c3		 ret	 0
$LN305@DivRem_X_1:

; 692  :         *r_buf = r;

  007c9	8b 45 18	 mov	 eax, DWORD PTR _r_buf$[ebp]
  007cc	5f		 pop	 edi

; 693  :     }

  007cd	5e		 pop	 esi
  007ce	89 18		 mov	 DWORD PTR [eax], ebx
  007d0	5b		 pop	 ebx
  007d1	8b e5		 mov	 esp, ebp
  007d3	5d		 pop	 ebp
  007d4	c3		 ret	 0
?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_1W
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 295  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 296  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 296  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 296  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	c7 41 0c 00 ff
	ff ff		 mov	 DWORD PTR [ecx+12], -256 ; ffffff00H
  00051	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)
; 234  :         {
; 235  :         }
; 236  : 
; 237  :         virtual ~InsufficientBufferException() noexcept(true)
; 238  :         {
; 239  :         }
; 240  :     };
; 241  : 
; 242  :     class NotEnoughMemoryException
; 243  :         : public Exception
; 244  :     {
; 245  :     public:
; 246  :         NotEnoughMemoryException(const wchar_t* message) noexcept(true)
; 247  :             : Exception(PMC_STATUS_NOT_ENOUGH_MEMORY, message)
; 248  :         {
; 249  :         }
; 250  : 
; 251  :         NotEnoughMemoryException(const NotEnoughMemoryException& p) noexcept(true)
; 252  :             : Exception(p)
; 253  :         {
; 254  :         }
; 255  : 
; 256  :         virtual ~NotEnoughMemoryException() noexcept(true)
; 257  :         {
; 258  :         }
; 259  :     };
; 260  : 
; 261  :     class NotSupportedException
; 262  :         : public Exception
; 263  :     {
; 264  :     public:
; 265  :         NotSupportedException(const wchar_t* message) noexcept(true)
; 266  :             : Exception(PMC_STATUS_NOT_SUPPORTED, message)
; 267  :         {
; 268  :         }
; 269  : 
; 270  :         NotSupportedException(const NotSupportedException& p) noexcept(true)
; 271  :             : Exception(p)
; 272  :         {
; 273  :         }
; 274  : 
; 275  :         virtual ~NotSupportedException() noexcept(true)
; 276  :         {
; 277  :         }
; 278  :     };
; 279  : 
; 280  :     class InternalErrorException
; 281  :         : public Exception
; 282  :     {
; 283  :     public:
; 284  :         InternalErrorException(const wchar_t* message, const wchar_t* data) noexcept(true)
; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 286  :         {

  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b c1		 mov	 eax, ecx
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 181  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@

; 182  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException, COMDAT
; _this$ = ecx

; 181  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@

; 182  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 182  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException, COMDAT
; _this$ = ecx

; 177  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 177  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@

; 178  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException, COMDAT
; _this$ = ecx

; 172  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 48   :         {
; 49   :             _code = code;
; 50   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00044	c7 41 0c fb ff
	ff ff		 mov	 DWORD PTR [ecx+12], -5	; fffffffbH
  0004b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 51   :             _data = nullptr;

  0004e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 52   :         }
; 53   : 
; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)
; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;
; 58   :             _data = data;
; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)

  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 172  :         {

  0005c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@

; 173  :         }

  00062	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00069	8b c1		 mov	 eax, ecx
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 124  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 125  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 125  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 125  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 120  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	c7 41 0c fe ff
	ff ff		 mov	 DWORD PTR [ecx+12], -2	; fffffffeH
  00051	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 115  :         {

  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b c1		 mov	 eax, ecx
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 70   :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00036	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00039	50		 push	 eax
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00040	e8 00 00 00 00	 call	 ___std_exception_destroy
  00045	83 c4 04	 add	 esp, 4
  00048	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0004c	74 0b		 je	 SHORT $LN9@scalar
  0004e	6a 18		 push	 24			; 00000018H
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00059	8b c6		 mov	 eax, esi
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5e		 pop	 esi
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00033	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00036	50		 push	 eax
  00037	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 71   :         }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }

  00058	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005f	8b c2		 mov	 eax, edx
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0003e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 57   :             _message = message;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  00044	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00047	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  0004a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00050	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b c1		 mov	 eax, ecx
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 48   :         {
; 49   :             _code = code;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0003e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 50   :             _message = message;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 51   :             _data = nullptr;

  0004d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 52   :         }

  00054	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005b	8b c1		 mov	 eax, ecx
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gexception@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00025	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ___std_exception_destroy
  00034	83 c4 04	 add	 esp, 4
  00037	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003b	74 0b		 je	 SHORT $LN6@scalar
  0003d	6a 0c		 push	 12			; 0000000cH
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00048	8b c6		 mov	 eax, esi
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gexception@std@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gexception@std@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 92   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 86   :         __std_exception_destroy(&_Data);

  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ___std_exception_destroy
  00031	83 c4 04	 add	 esp, 4

; 87   :     }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 51   :     }

  0000e	8b c1		 mov	 eax, ecx
  00010	c3		 ret	 0
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
_TEXT	ENDS
END
