; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_parse.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Initialize_Parse
PUBLIC	_PMC_TryParse@16
PUBLIC	_PMC_TryParseForSINT@20
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_InitializeNumberFormatoInfo:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_default_number_format_option DB 0b0H DUP (?)
_fp_MultiplyAndAdd DD 01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _PMC_TryParse_Imp
_TEXT	SEGMENT
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_PMC_TryParse_Imp PROC					; COMDAT

; 1270 : {

	push	ebp
	mov	ebp, esp

; 1271 :     PMC_STATUS_CODE result;
; 1272 :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

	mov	eax, DWORD PTR _number_styles$[ebp]
	test	eax, 512				; 00000200H
	je	SHORT $LN2@PMC_TryPar

; 1273 :     {
; 1274 :         // 16進数の場合
; 1275 : 
; 1276 :         // 許可されている組み合わせのフラグ
; 1277 :         _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE;
; 1278 : 
; 1279 :         // 許可されていないフラグが指定されていればエラー
; 1280 :         if (number_styles & ~mask)

	test	eax, -516				; fffffdfcH
	je	SHORT $LN4@PMC_TryPar

; 1281 :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1

; 1297 : }

	pop	ebp
	ret	0
$LN4@PMC_TryPar:

; 1282 : 
; 1283 :         if ((result = TryParseX(source, number_styles, format_option, o_sign, o_abs)) != PMC_STATUS_OK)

	push	DWORD PTR _o_abs$[ebp]
	push	DWORD PTR _o_sign$[ebp]
	push	DWORD PTR _format_option$[ebp]
	push	eax
	push	DWORD PTR _source$[ebp]
	call	_TryParseX
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN6@PMC_TryPar

; 1297 : }

	pop	ebp
	ret	0
$LN2@PMC_TryPar:

; 1284 :             return (result);
; 1285 :     }
; 1286 :     else
; 1287 :     {
; 1288 :         // 10進数の場合
; 1289 :         if ((result = TryParseDN(source, number_styles, format_option, o_sign, o_abs)) != PMC_STATUS_OK)

	push	DWORD PTR _o_abs$[ebp]
	push	DWORD PTR _o_sign$[ebp]
	push	DWORD PTR _format_option$[ebp]
	push	eax
	push	DWORD PTR _source$[ebp]
	call	_TryParseDN
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN1@PMC_TryPar
$LN6@PMC_TryPar:

; 1290 :             return (result);
; 1291 :     }
; 1292 : #ifdef _DEBUG
; 1293 :     if ((result = CheckNumber(*o_abs)) != PMC_STATUS_OK)
; 1294 :         return (result);
; 1295 : #endif
; 1296 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_TryPar:

; 1297 : }

	pop	ebp
	ret	0
_PMC_TryParse_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _TryParseX
_TEXT	SEGMENT
_o_bit_count$1$ = -132					; size = 4
_o_light_check_code$ = -128				; size = 4
_source_count$1$ = -124					; size = 4
_int_part_buf_code$ = -116				; size = 4
_r$1$ = -112						; size = 4
_int_part_buf_words$ = -108				; size = 4
_int_part_buf$1$ = -104					; size = 4
_o_abs$GSCopy$1$ = -100					; size = 4
_o_sign$GSCopy$1$ = -96					; size = 4
_state$1 = -92						; size = 88
__$ArrayPad$ = -4					; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_TryParseX PROC						; COMDAT

; 1206 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _o_sign$[ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _source$[ebp]
	push	edi
	mov	edi, DWORD PTR _format_option$[ebp]
	mov	DWORD PTR _o_sign$GSCopy$1$[ebp], eax
	mov	eax, DWORD PTR _o_abs$[ebp]

; 1207 :     PMC_STATUS_CODE result;
; 1208 :     __UNIT_TYPE source_len = lstrlenW(source);

	push	esi
	mov	DWORD PTR _o_abs$GSCopy$1$[ebp], eax
	call	DWORD PTR __imp__lstrlenW@4

; 1209 :     __UNIT_TYPE int_part_buf_code;
; 1210 :     __UNIT_TYPE int_part_buf_words;
; 1211 :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	ecx, DWORD PTR _int_part_buf_code$[ebp]
	inc	eax
	push	ecx
	lea	ecx, DWORD PTR _int_part_buf_words$[ebp]
	shl	eax, 4
	push	ecx
	push	eax
	call	_AllocateBlock
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _int_part_buf$1$[ebp], ebx

; 1212 :     if (int_part_buf == NULL)

	test	ebx, ebx
	jne	SHORT $LN4@TryParseX

; 1265 :     }
; 1266 :     return (PMC_STATUS_OK);
; 1267 : }

	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ebx-6]
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@TryParseX:

; 566  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, NULL);

	push	0
	push	ebx
	push	edi
	push	DWORD PTR _number_styles$[ebp]
	lea	eax, DWORD PTR _state$1[ebp]
	push	esi
	push	eax
	call	_InitializeParserState
	add	esp, 24					; 00000018H

; 567  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	test	BYTE PTR _number_styles$[ebp], 1
	je	SHORT $LN86@TryParseX

; 110  :         switch (*state->IN_PTR)

	mov	ecx, DWORD PTR _state$1[ebp]
	movzx	eax, WORD PTR [ecx]
	cmp	eax, 9
	jb	SHORT $LN86@TryParseX
$LL20@TryParseX:
	cmp	eax, 13					; 0000000dH
	jbe	SHORT $LN25@TryParseX
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN86@TryParseX
$LN25@TryParseX:

; 111  :         {
; 112  :         case L' ':
; 113  :         case L'\t':
; 114  :         case L'\n':
; 115  :         case L'\r':
; 116  :         case L'\f':
; 117  :         case L'\v':
; 118  :             break;
; 119  : 
; 120  :         default:
; 121  :             return;
; 122  :         }
; 123  :         state->IN_PTR += 1;

	add	ecx, 2
	mov	DWORD PTR _state$1[ebp], ecx
	movzx	eax, WORD PTR [ecx]
	cmp	eax, 9
	jae	SHORT $LL20@TryParseX
$LN86@TryParseX:

; 569  :     ParseAsIntegerPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$1[ebp]
	push	eax
	call	_ParseAsIntegerPartNumberSequence

; 570  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	eax, DWORD PTR _state$1[ebp]
	add	esp, 4
	test	BYTE PTR _number_styles$[ebp], 2
	je	SHORT $LN69@TryParseX

; 110  :         switch (*state->IN_PTR)

	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 9
	jb	SHORT $LN69@TryParseX
	npad	5
$LL29@TryParseX:
	cmp	ecx, 13					; 0000000dH
	jbe	SHORT $LN34@TryParseX
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN69@TryParseX
$LN34@TryParseX:

; 111  :         {
; 112  :         case L' ':
; 113  :         case L'\t':
; 114  :         case L'\n':
; 115  :         case L'\r':
; 116  :         case L'\f':
; 117  :         case L'\v':
; 118  :             break;
; 119  : 
; 120  :         default:
; 121  :             return;
; 122  :         }
; 123  :         state->IN_PTR += 1;

	add	eax, 2
	mov	DWORD PTR _state$1[ebp], eax
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 9
	jae	SHORT $LL29@TryParseX
$LN69@TryParseX:

; 572  :     if (*state.IN_PTR != L'\0')

	cmp	WORD PTR [eax], 0
	je	SHORT $LN17@TryParseX

; 573  :         return (0);

	xor	esi, esi
	jmp	SHORT $LN14@TryParseX
$LN17@TryParseX:

; 100  :     *state->INT_PART_PTR = L'\0';

	mov	eax, DWORD PTR _state$1[ebp+80]
	xor	ecx, ecx
	mov	WORD PTR [eax], cx

; 101  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR _state$1[ebp+4], 32		; 00000020H
	je	SHORT $LN38@TryParseX

; 102  :         *state->FRAC_PART_PTR = L'\0';

	mov	eax, DWORD PTR _state$1[ebp+84]
	mov	WORD PTR [eax], cx
$LN38@TryParseX:

; 575  :     return (1);

	mov	esi, 1
$LN14@TryParseX:

; 1213 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 1214 :     int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf);
; 1215 :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _int_part_buf_code$[ebp]
	push	ebx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@TryParseX

; 1216 :         return (result);
; 1217 :     if (!result_parsing || int_part_buf[0] == L'\0')

	test	esi, esi
	je	$LN7@TryParseX
	movzx	eax, WORD PTR [ebx]
	test	ax, ax
	je	$LN7@TryParseX

; 1221 :     }
; 1222 : 
; 1223 :     // 先頭 1 文字が 8～F であれば負数とみなす
; 1224 :     *o_sign = ParseHexDigit(int_part_buf[0]) >= 8 ? -1 : 1;

	push	eax
	call	_ParseHexDigit
	mov	ecx, DWORD PTR _o_sign$GSCopy$1$[ebp]
	add	esp, 4

; 1225 : 
; 1226 :     __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

	mov	edi, DWORD PTR __imp__lstrlenW@4
	cmp	eax, 8
	setl	al
	push	ebx
	lea	eax, DWORD PTR [eax*2-1]
	mov	BYTE PTR [ecx], al
	call	edi

; 1227 :     __UNIT_TYPE o_light_check_code;
; 1228 :     if ((result = AllocateNumber(o_abs, o_bit_count, &o_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _o_light_check_code$[ebp]
	shl	eax, 2
	push	ecx
	push	eax
	push	DWORD PTR _o_abs$GSCopy$1$[ebp]
	mov	DWORD PTR _o_bit_count$1$[ebp], eax
	call	_AllocateNumber
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN8@TryParseX

; 1229 :     {
; 1230 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	push	DWORD PTR _int_part_buf_words$[ebp]
	push	ebx
	call	_DeallocateBlock

; 1265 :     }
; 1266 :     return (PMC_STATUS_OK);
; 1267 : }

	add	esp, 8
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@TryParseX:

; 1231 :         return (result);
; 1232 :     }
; 1233 :     BuildBinaryFromHexString(int_part_buf, (*o_abs)->BLOCK);

	mov	eax, DWORD PTR _o_abs$GSCopy$1$[ebp]

; 1187 :     __UNIT_TYPE source_count = lstrlenW(source);

	push	ebx

; 1231 :         return (result);
; 1232 :     }
; 1233 :     BuildBinaryFromHexString(int_part_buf, (*o_abs)->BLOCK);

	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax+36]

; 1187 :     __UNIT_TYPE source_count = lstrlenW(source);

	call	edi
	mov	edx, eax

; 1188 :     wchar_t* in_ptr = source;

	mov	edi, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	sub	esi, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1187 :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	DWORD PTR _source_count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	ebx, DWORD PTR [edx+7]
	shr	ebx, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1190 :     int r = source_count % word_digit_count;

	and	eax, 7
	mov	DWORD PTR _r$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	ebx, DWORD PTR [esi+ebx*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1191 :     if (r > 0)

	jle	$LN66@TryParseX

; 1139 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr);

	movzx	ecx, WORD PTR [edi]

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN52@TryParseX

; 137  :         return (c - L'0');

	sub	ecx, 48					; 00000030H
	jmp	SHORT $LN51@TryParseX
$LN52@TryParseX:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [ecx-97]
	cmp	ax, 5
	ja	SHORT $LN53@TryParseX

; 140  :         return (c - L'a' + 10);

	sub	ecx, 87					; 00000057H
	jmp	SHORT $LN51@TryParseX
$LN53@TryParseX:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [ecx-65]
	cmp	ax, 5
	ja	SHORT $LN54@TryParseX

; 143  :         return (c - L'A' + 10);

	sub	ecx, 55					; 00000037H
	jmp	SHORT $LN51@TryParseX
$LN54@TryParseX:

; 144  :     return (-1);

	or	ecx, -1
$LN51@TryParseX:

; 1141 :     --count;

	mov	eax, DWORD PTR _r$1$[ebp]
	lea	esi, DWORD PTR [edi+2]
	add	eax, -1

; 1142 :     while (count > 0)

	je	SHORT $LN49@TryParseX
	mov	edi, eax
	npad	4
$LL48@TryParseX:

; 1143 :     {
; 1144 :         x = x * 16 + ParseHexDigit(*in_ptr);

	movzx	edx, WORD PTR [esi]

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN57@TryParseX

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [edx-48]
	jmp	SHORT $LN56@TryParseX
$LN57@TryParseX:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [edx-97]
	cmp	ax, 5
	ja	SHORT $LN58@TryParseX

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [edx-87]
	jmp	SHORT $LN56@TryParseX
$LN58@TryParseX:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [edx-65]
	cmp	ax, 5
	ja	SHORT $LN59@TryParseX

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [edx-55]
	jmp	SHORT $LN56@TryParseX
$LN59@TryParseX:

; 144  :     return (-1);

	or	eax, -1
$LN56@TryParseX:

; 1144 :         x = x * 16 + ParseHexDigit(*in_ptr);

	shl	ecx, 4

; 1145 :         ++in_ptr;

	add	esi, 2
	add	ecx, eax

; 1146 :         --count;

	sub	edi, 1
	jne	SHORT $LL48@TryParseX
	mov	edi, DWORD PTR _int_part_buf$1$[ebp]
	mov	edx, DWORD PTR _source_count$1$[ebp]
$LN49@TryParseX:

; 1194 :         in_ptr += r;

	mov	eax, DWORD PTR _r$1$[ebp]
	mov	DWORD PTR [ebx], ecx
	sub	ebx, 4

; 1195 :         source_count -= r;

	sub	edx, eax
	lea	edi, DWORD PTR [edi+eax*2]
$LN66@TryParseX:

; 1196 :     }
; 1197 :     while (source_count > 0)

	test	edx, edx
	je	SHORT $LN42@TryParseX
	lea	esi, DWORD PTR [edx-1]
	shr	esi, 3
	inc	esi
	npad	5
$LL41@TryParseX:

; 1198 :     {
; 1199 :         *out_ptr-- = Build1WordFromHexString(in_ptr);

	push	edi
	call	_Build1WordFromHexString
	add	esp, 4
	mov	DWORD PTR [ebx], eax

; 1200 :         in_ptr += word_digit_count;

	add	edi, 16					; 00000010H
	lea	ebx, DWORD PTR [ebx-4]
	sub	esi, 1
	jne	SHORT $LL41@TryParseX
$LN42@TryParseX:

; 1234 :     if ((result = CheckBlockLight((*o_abs)->BLOCK, o_light_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _o_abs$GSCopy$1$[ebp]
	push	DWORD PTR _o_light_check_code$[ebp]
	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@TryParseX

; 1235 :         return (result);
; 1236 :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	push	DWORD PTR _int_part_buf_words$[ebp]
	push	DWORD PTR _int_part_buf$1$[ebp]
	call	_DeallocateBlock

; 1237 :     if (*o_sign < 0)

	mov	esi, DWORD PTR _o_sign$GSCopy$1$[ebp]
	add	esp, 8
	cmp	BYTE PTR [esi], 0
	jge	SHORT $LN3@TryParseX

; 1238 :     {
; 1239 :         // 負数の場合
; 1240 : 
; 1241 :         int lzcnt = o_bit_count % __UNIT_TYPE_BIT_COUNT;

	mov	esi, DWORD PTR _o_bit_count$1$[ebp]
	and	esi, 31					; 0000001fH

; 1242 :         if (lzcnt != 0)

	je	SHORT $LN11@TryParseX

; 1243 :         {
; 1244 :             __UNIT_TYPE padding = (__UNIT_TYPE)-1 << lzcnt;
; 1245 :             (*o_abs)->BLOCK[(*o_abs)->BLOCK_COUNT - 1] |= padding;

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [eax+36]
	dec	ecx
	lea	edx, DWORD PTR [eax+ecx*4]
	or	eax, -1
	mov	ecx, esi
	shl	eax, cl
	or	DWORD PTR [edx], eax
$LN11@TryParseX:

; 1246 :         }
; 1247 : 
; 1248 :         // 配列 (*o_abs)->BLOCK の内容をビット反転してインクリメントする
; 1249 :         char carry = 1;
; 1250 :         __UNIT_TYPE* p = (*o_abs)->BLOCK;

	mov	eax, DWORD PTR [ebx]
	mov	dl, 1
	mov	esi, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR [eax+36]

; 1251 :         __UNIT_TYPE count = (*o_abs)->BLOCK_COUNT;
; 1252 :         while (count > 0)

	test	esi, esi
	je	SHORT $LN87@TryParseX
$LL2@TryParseX:

; 1254 :             carry = _ADD_UNIT(carry, ~*p, 0, p);

	mov	eax, DWORD PTR [ecx]

; 1255 :             ++p;

	lea	ecx, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	dl, 255					; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1254 :             carry = _ADD_UNIT(carry, ~*p, 0, p);

	not	eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, 0
	mov	DWORD PTR [ecx-4], eax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1256 :             --count;

	sub	esi, 1
	jne	SHORT $LL2@TryParseX
$LN87@TryParseX:

; 1257 :         }
; 1258 :     }
; 1259 :     CommitNumber(*o_abs);

	mov	esi, DWORD PTR _o_sign$GSCopy$1$[ebp]
$LN3@TryParseX:
	push	DWORD PTR [ebx]
	call	_CommitNumber

; 1260 :     if ((*o_abs)->IS_ZERO)

	mov	eax, DWORD PTR [ebx]
	add	esp, 4
	test	BYTE PTR [eax], 1
	je	SHORT $LN12@TryParseX

; 1261 :     {
; 1262 :         DeallocateNumber(*o_abs);

	push	eax
	call	_DeallocateNumber

; 1263 :         *o_sign = 0;

	mov	BYTE PTR [esi], 0
	add	esp, 4

; 1264 :         *o_abs = &number_zero;

	mov	DWORD PTR [ebx], OFFSET _number_zero
$LN12@TryParseX:

; 1265 :     }
; 1266 :     return (PMC_STATUS_OK);
; 1267 : }

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@TryParseX:

; 1218 :     {
; 1219 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	push	DWORD PTR _int_part_buf_words$[ebp]
	push	ebx
	call	_DeallocateBlock

; 1220 :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1

; 1265 :     }
; 1266 :     return (PMC_STATUS_OK);
; 1267 : }

	add	esp, 8
$LN1@TryParseX:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TryParseX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _BuildBinaryFromHexString
_TEXT	SEGMENT
_source_count$1$ = -8					; size = 4
_r$1$ = -4						; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_BuildBinaryFromHexString PROC				; COMDAT

; 1185 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi

; 1187 :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	edi, DWORD PTR _source$[ebp]
	push	edi
	call	DWORD PTR __imp__lstrlenW@4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	mov	ecx, DWORD PTR _out_buf$[ebp]
	sub	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1187 :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	DWORD PTR _source_count$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	edx, DWORD PTR [eax+7]
	shr	edx, 3
	lea	ebx, DWORD PTR [ecx+edx*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1190 :     int r = source_count % word_digit_count;

	mov	edx, eax
	and	edx, 7
	mov	DWORD PTR _r$1$[ebp], edx

; 1191 :     if (r > 0)

	jle	$LN23@BuildBinar

; 1139 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr);

	movzx	ecx, WORD PTR [edi]

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN13@BuildBinar

; 137  :         return (c - L'0');

	sub	ecx, 48					; 00000030H
	jmp	SHORT $LN12@BuildBinar
$LN13@BuildBinar:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [ecx-97]
	cmp	ax, 5
	ja	SHORT $LN14@BuildBinar

; 140  :         return (c - L'a' + 10);

	sub	ecx, 87					; 00000057H
	jmp	SHORT $LN12@BuildBinar
$LN14@BuildBinar:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [ecx-65]
	cmp	ax, 5
	ja	SHORT $LN15@BuildBinar

; 143  :         return (c - L'A' + 10);

	sub	ecx, 55					; 00000037H
	jmp	SHORT $LN12@BuildBinar
$LN15@BuildBinar:

; 144  :     return (-1);

	or	ecx, -1
$LN12@BuildBinar:

; 1141 :     --count;

	lea	eax, DWORD PTR [edx-1]
	lea	esi, DWORD PTR [edi+2]

; 1142 :     while (count > 0)

	test	eax, eax
	je	SHORT $LN10@BuildBinar
	mov	edi, eax
	npad	1
$LL9@BuildBinar:

; 1143 :     {
; 1144 :         x = x * 16 + ParseHexDigit(*in_ptr);

	movzx	edx, WORD PTR [esi]

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN18@BuildBinar

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [edx-48]
	jmp	SHORT $LN17@BuildBinar
$LN18@BuildBinar:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [edx-97]
	cmp	ax, 5
	ja	SHORT $LN19@BuildBinar

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [edx-87]
	jmp	SHORT $LN17@BuildBinar
$LN19@BuildBinar:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [edx-65]
	cmp	ax, 5
	ja	SHORT $LN20@BuildBinar

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [edx-55]
	jmp	SHORT $LN17@BuildBinar
$LN20@BuildBinar:

; 144  :     return (-1);

	or	eax, -1
$LN17@BuildBinar:

; 1144 :         x = x * 16 + ParseHexDigit(*in_ptr);

	shl	ecx, 4

; 1145 :         ++in_ptr;

	add	esi, 2
	add	ecx, eax

; 1146 :         --count;

	sub	edi, 1
	jne	SHORT $LL9@BuildBinar
	mov	edi, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR _r$1$[ebp]
$LN10@BuildBinar:

; 1192 :     {
; 1193 :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);
; 1194 :         in_ptr += r;
; 1195 :         source_count -= r;

	mov	eax, DWORD PTR _source_count$1$[ebp]
	lea	edi, DWORD PTR [edi+edx*2]
	mov	DWORD PTR [ebx], ecx
	sub	ebx, 4
	sub	eax, edx
$LN23@BuildBinar:

; 1196 :     }
; 1197 :     while (source_count > 0)

	test	eax, eax
	je	SHORT $LN3@BuildBinar
	lea	esi, DWORD PTR [eax-1]
	shr	esi, 3
	inc	esi
	npad	5
$LL2@BuildBinar:

; 1198 :     {
; 1199 :         *out_ptr-- = Build1WordFromHexString(in_ptr);

	push	edi
	call	_Build1WordFromHexString
	add	esp, 4
	mov	DWORD PTR [ebx], eax

; 1200 :         in_ptr += word_digit_count;

	add	edi, 16					; 00000010H
	lea	ebx, DWORD PTR [ebx-4]
	sub	esi, 1
	jne	SHORT $LL2@BuildBinar
$LN3@BuildBinar:
	pop	edi

; 1201 :         source_count -= word_digit_count;
; 1202 :     }
; 1203 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildBinaryFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _Build1WordFromHexString
_TEXT	SEGMENT
_in_ptr$ = 8						; size = 4
_Build1WordFromHexString PROC				; COMDAT

; 1152 : {

	push	ebp
	mov	ebp, esp

; 1153 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [edx]

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN8@Build1Word

; 137  :         return (c - L'0');

	sub	ecx, 48					; 00000030H
	jmp	SHORT $LN7@Build1Word
$LN8@Build1Word:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [ecx-97]
	cmp	ax, 5
	ja	SHORT $LN9@Build1Word

; 140  :         return (c - L'a' + 10);

	sub	ecx, 87					; 00000057H
	jmp	SHORT $LN7@Build1Word
$LN9@Build1Word:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [ecx-65]
	cmp	ax, 5
	ja	SHORT $LN10@Build1Word

; 143  :         return (c - L'A' + 10);

	sub	ecx, 55					; 00000037H
	jmp	SHORT $LN7@Build1Word
$LN10@Build1Word:

; 144  :     return (-1);

	or	ecx, -1
$LN7@Build1Word:
	push	esi

; 1154 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 1155 :     {
; 1156 :         x = x * 16 + ParseHexDigit(*in_ptr++);
; 1157 :         x = x * 16 + ParseHexDigit(*in_ptr++);
; 1158 :         x = x * 16 + ParseHexDigit(*in_ptr++);
; 1159 :         x = x * 16 + ParseHexDigit(*in_ptr++);
; 1160 :         x = x * 16 + ParseHexDigit(*in_ptr++);
; 1161 :         x = x * 16 + ParseHexDigit(*in_ptr++);
; 1162 :         x = x * 16 + ParseHexDigit(*in_ptr++);
; 1163 :         x = x * 16 + ParseHexDigit(*in_ptr++);
; 1164 :     }
; 1165 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 1166 :     {
; 1167 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	esi, WORD PTR [edx+2]

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [esi-48]
	cmp	ax, 9
	ja	SHORT $LN53@Build1Word

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [esi-48]
	jmp	SHORT $LN52@Build1Word
$LN53@Build1Word:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [esi-97]
	cmp	ax, 5
	ja	SHORT $LN54@Build1Word

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [esi-87]
	jmp	SHORT $LN52@Build1Word
$LN54@Build1Word:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [esi-65]
	cmp	ax, 5
	ja	SHORT $LN55@Build1Word

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [esi-55]
	jmp	SHORT $LN52@Build1Word
$LN55@Build1Word:

; 144  :     return (-1);

	or	eax, -1
$LN52@Build1Word:

; 1168 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	esi, WORD PTR [edx+4]
	shl	ecx, 4
	add	ecx, eax

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [esi-48]
	cmp	ax, 9
	ja	SHORT $LN58@Build1Word

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [esi-48]
	jmp	SHORT $LN57@Build1Word
$LN58@Build1Word:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [esi-97]
	cmp	ax, 5
	ja	SHORT $LN59@Build1Word

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [esi-87]
	jmp	SHORT $LN57@Build1Word
$LN59@Build1Word:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [esi-65]
	cmp	ax, 5
	ja	SHORT $LN60@Build1Word

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [esi-55]
	jmp	SHORT $LN57@Build1Word
$LN60@Build1Word:

; 144  :     return (-1);

	or	eax, -1
$LN57@Build1Word:

; 1169 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	esi, WORD PTR [edx+6]
	shl	ecx, 4
	add	ecx, eax

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [esi-48]
	cmp	ax, 9
	ja	SHORT $LN63@Build1Word

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [esi-48]
	jmp	SHORT $LN62@Build1Word
$LN63@Build1Word:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [esi-97]
	cmp	ax, 5
	ja	SHORT $LN64@Build1Word

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [esi-87]
	jmp	SHORT $LN62@Build1Word
$LN64@Build1Word:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [esi-65]
	cmp	ax, 5
	ja	SHORT $LN65@Build1Word

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [esi-55]
	jmp	SHORT $LN62@Build1Word
$LN65@Build1Word:

; 144  :     return (-1);

	or	eax, -1
$LN62@Build1Word:

; 1170 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	esi, WORD PTR [edx+8]
	shl	ecx, 4
	add	ecx, eax

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [esi-48]
	cmp	ax, 9
	ja	SHORT $LN68@Build1Word

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [esi-48]
	jmp	SHORT $LN67@Build1Word
$LN68@Build1Word:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [esi-97]
	cmp	ax, 5
	ja	SHORT $LN69@Build1Word

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [esi-87]
	jmp	SHORT $LN67@Build1Word
$LN69@Build1Word:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [esi-65]
	cmp	ax, 5
	ja	SHORT $LN70@Build1Word

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [esi-55]
	jmp	SHORT $LN67@Build1Word
$LN70@Build1Word:

; 144  :     return (-1);

	or	eax, -1
$LN67@Build1Word:

; 1171 :     }
; 1172 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 1173 :     {
; 1174 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	esi, WORD PTR [edx+10]
	shl	ecx, 4
	add	ecx, eax

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [esi-48]
	cmp	ax, 9
	ja	SHORT $LN73@Build1Word

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [esi-48]
	jmp	SHORT $LN72@Build1Word
$LN73@Build1Word:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [esi-97]
	cmp	ax, 5
	ja	SHORT $LN74@Build1Word

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [esi-87]
	jmp	SHORT $LN72@Build1Word
$LN74@Build1Word:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [esi-65]
	cmp	ax, 5
	ja	SHORT $LN75@Build1Word

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [esi-55]
	jmp	SHORT $LN72@Build1Word
$LN75@Build1Word:

; 144  :     return (-1);

	or	eax, -1
$LN72@Build1Word:

; 1175 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	esi, WORD PTR [edx+12]
	shl	ecx, 4
	add	ecx, eax

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [esi-48]
	cmp	ax, 9
	ja	SHORT $LN78@Build1Word

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [esi-48]
	jmp	SHORT $LN77@Build1Word
$LN78@Build1Word:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [esi-97]
	cmp	ax, 5
	ja	SHORT $LN79@Build1Word

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [esi-87]
	jmp	SHORT $LN77@Build1Word
$LN79@Build1Word:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [esi-65]
	cmp	ax, 5
	ja	SHORT $LN80@Build1Word

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [esi-55]
	jmp	SHORT $LN77@Build1Word
$LN80@Build1Word:

; 144  :     return (-1);

	or	eax, -1
$LN77@Build1Word:

; 1176 :     }
; 1177 :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1178 :     {
; 1179 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	edx, WORD PTR [edx+14]
	shl	ecx, 4
	add	ecx, eax

; 136  :     if (c >= L'0' && c <= L'9')

	pop	esi
	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN83@Build1Word

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [edx-48]

; 1176 :     }
; 1177 :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1178 :     {
; 1179 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	ecx, 4
	add	eax, ecx

; 1180 :     }
; 1181 :     return (x);
; 1182 : }

	pop	ebp
	ret	0
$LN83@Build1Word:

; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [edx-97]
	cmp	ax, 5
	ja	SHORT $LN84@Build1Word

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [edx-87]

; 1176 :     }
; 1177 :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1178 :     {
; 1179 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	ecx, 4
	add	eax, ecx

; 1180 :     }
; 1181 :     return (x);
; 1182 : }

	pop	ebp
	ret	0
$LN84@Build1Word:

; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [edx-65]
	cmp	ax, 5
	ja	SHORT $LN85@Build1Word

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [edx-55]

; 1176 :     }
; 1177 :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1178 :     {
; 1179 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	ecx, 4
	add	eax, ecx

; 1180 :     }
; 1181 :     return (x);
; 1182 : }

	pop	ebp
	ret	0
$LN85@Build1Word:

; 144  :     return (-1);

	or	eax, -1

; 1176 :     }
; 1177 :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1178 :     {
; 1179 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	ecx, 4
	add	eax, ecx

; 1180 :     }
; 1181 :     return (x);
; 1182 : }

	pop	ebp
	ret	0
_Build1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _BuildLeading1WordFromHexString
_TEXT	SEGMENT
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
_BuildLeading1WordFromHexString PROC			; COMDAT

; 1138 : {

	push	ebp
	mov	ebp, esp
	push	esi

; 1139 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr);

	mov	esi, DWORD PTR _in_ptr$[ebp]
	push	edi
	movzx	ecx, WORD PTR [esi]

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN6@BuildLeadi

; 137  :         return (c - L'0');

	sub	ecx, 48					; 00000030H
	jmp	SHORT $LN5@BuildLeadi
$LN6@BuildLeadi:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [ecx-97]
	cmp	ax, 5
	ja	SHORT $LN7@BuildLeadi

; 140  :         return (c - L'a' + 10);

	sub	ecx, 87					; 00000057H
	jmp	SHORT $LN5@BuildLeadi
$LN7@BuildLeadi:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [ecx-65]
	cmp	ax, 5
	ja	SHORT $LN8@BuildLeadi

; 143  :         return (c - L'A' + 10);

	sub	ecx, 55					; 00000037H
	jmp	SHORT $LN5@BuildLeadi
$LN8@BuildLeadi:

; 144  :     return (-1);

	or	ecx, -1
$LN5@BuildLeadi:

; 1139 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr);

	mov	edi, DWORD PTR _count$[ebp]

; 1140 :     ++in_ptr;

	add	esi, 2
	sub	edi, 1

; 1141 :     --count;
; 1142 :     while (count > 0)

	je	SHORT $LN19@BuildLeadi
$LL2@BuildLeadi:

; 1143 :     {
; 1144 :         x = x * 16 + ParseHexDigit(*in_ptr);

	movzx	edx, WORD PTR [esi]

; 136  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN11@BuildLeadi

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [edx-48]
	jmp	SHORT $LN10@BuildLeadi
$LN11@BuildLeadi:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [edx-97]
	cmp	ax, 5
	ja	SHORT $LN12@BuildLeadi

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [edx-87]
	jmp	SHORT $LN10@BuildLeadi
$LN12@BuildLeadi:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [edx-65]
	cmp	ax, 5
	ja	SHORT $LN13@BuildLeadi

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [edx-55]
	jmp	SHORT $LN10@BuildLeadi
$LN13@BuildLeadi:

; 144  :     return (-1);

	or	eax, -1
$LN10@BuildLeadi:

; 1143 :     {
; 1144 :         x = x * 16 + ParseHexDigit(*in_ptr);

	shl	ecx, 4

; 1145 :         ++in_ptr;

	add	esi, 2
	add	ecx, eax

; 1146 :         --count;

	sub	edi, 1
	jne	SHORT $LL2@BuildLeadi
$LN19@BuildLeadi:
	pop	edi

; 1147 :     }
; 1148 :     return (x);
; 1149 : }

	mov	eax, ecx
	pop	esi
	pop	ebp
	ret	0
_BuildLeading1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _TryParseDN
_TEXT	SEGMENT
_no_light_check_code$ = -52				; size = 4
_work_buf_words$1 = -48					; size = 4
_work_buf$1$ = -44					; size = 4
_bin_buf_code$ = -40					; size = 4
_result$4$ = -36					; size = 4
_int_part_buf$1$ = -36					; size = 4
_work_buf_code$2 = -36					; size = 4
_r$1$ = -32						; size = 4
tv587 = -32						; size = 4
_out_buf$1$ = -32					; size = 4
_frac_part_buf_code$ = -28				; size = 4
_int_part_buf_code$ = -24				; size = 4
_source_count$1$ = -20					; size = 4
_in_buf$1$ = -20					; size = 4
_bin_buf_words$ = -16					; size = 4
_frac_part_buf_words$ = -12				; size = 4
_bin_buf$1$ = -8					; size = 4
_int_part_buf_words$ = -4				; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_TryParseDN PROC					; COMDAT

; 999  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	ebx

; 1000 :     PMC_STATUS_CODE result;
; 1001 : #ifdef _M_IX86
; 1002 :     int word_digit_count = 9;
; 1003 : #elif defined(_M_IX64)
; 1004 :     int word_digit_count = 19;
; 1005 : #else
; 1006 : #error unknown platform
; 1007 : #endif
; 1008 :     __UNIT_TYPE source_len = lstrlenW(source);

	mov	ebx, DWORD PTR _source$[ebp]
	push	esi
	push	edi
	push	ebx
	call	DWORD PTR __imp__lstrlenW@4

; 1009 : 
; 1010 :     __UNIT_TYPE int_part_buf_code;
; 1011 :     __UNIT_TYPE int_part_buf_words;
; 1012 :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	esi, DWORD PTR [eax+1]
	lea	eax, DWORD PTR _int_part_buf_code$[ebp]
	shl	esi, 4
	push	eax
	lea	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	push	esi
	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _int_part_buf$1$[ebp], edi

; 1013 :     if (int_part_buf == NULL)

	test	edi, edi
	je	SHORT $LN79@TryParseDN

; 1014 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 1015 : 
; 1016 :     __UNIT_TYPE frac_part_buf_code;
; 1017 :     __UNIT_TYPE frac_part_buf_words;
; 1018 :     wchar_t* frac_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &frac_part_buf_words, &frac_part_buf_code);

	lea	eax, DWORD PTR _frac_part_buf_code$[ebp]
	push	eax
	lea	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	push	esi
	call	_AllocateBlock
	mov	esi, eax
	add	esp, 12					; 0000000cH

; 1019 :     if (frac_part_buf == NULL)

	test	esi, esi
	jne	SHORT $LN10@TryParseDN
$LN80@TryParseDN:

; 1135 : }

	push	DWORD PTR _int_part_buf_words$[ebp]
	push	edi
	call	_DeallocateBlock
	add	esp, 8
$LN79@TryParseDN:
	pop	edi
	pop	esi
	mov	eax, -6					; fffffffaH
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@TryParseDN:

; 1020 :     {
; 1021 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 1022 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 1023 :     }
; 1024 :     int result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, o_sign, int_part_buf, frac_part_buf);

	push	esi
	push	edi
	push	DWORD PTR _o_sign$[ebp]
	push	DWORD PTR _format_option$[ebp]
	push	DWORD PTR _number_styles$[ebp]
	push	ebx
	call	_ParseAsDecimalNumberString

; 1025 :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _int_part_buf_code$[ebp]
	mov	ebx, eax
	push	edi
	call	_CheckBlockLight
	add	esp, 32					; 00000020H
	test	eax, eax
	jne	$LN1@TryParseDN

; 1026 :         return (result);
; 1027 :     if ((result = CheckBlockLight((__UNIT_TYPE*)frac_part_buf, frac_part_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _frac_part_buf_code$[ebp]
	push	esi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@TryParseDN

; 1028 :         return (result);
; 1029 :     if (!result_parsing)

	test	ebx, ebx
	je	SHORT $LN81@TryParseDN

; 1030 :     {
; 1031 :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);
; 1032 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 1033 :         return (PMC_STATUS_PARSING_ERROR);
; 1034 :     }
; 1035 :     // 整数部と小数部がともに空ならばエラーとする
; 1036 :     if (int_part_buf[0] == L'\0' && frac_part_buf[0] == L'\0')

	movzx	eax, WORD PTR [edi]
	test	ax, ax
	jne	SHORT $LN67@TryParseDN
	cmp	WORD PTR [esi], ax
	jne	SHORT $LN54@TryParseDN
$LN81@TryParseDN:

; 1135 : }

	push	DWORD PTR _frac_part_buf_words$[ebp]
	push	esi
	call	_DeallocateBlock
	push	DWORD PTR _int_part_buf_words$[ebp]
	push	edi
	call	_DeallocateBlock
	add	esp, 16					; 00000010H
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN67@TryParseDN:

; 1037 :     {
; 1038 :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);
; 1039 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 1040 :         return (PMC_STATUS_PARSING_ERROR);
; 1041 :     }
; 1042 : 
; 1043 :     if (int_part_buf[0] == L'0')

	cmp	eax, 48					; 00000030H
	jne	SHORT $LN54@TryParseDN

; 1044 :     {
; 1045 :         // 整数部の先行する 0 を削除する
; 1046 :         wchar_t* s_ptr = int_part_buf;

	mov	ecx, edi

; 1047 :         wchar_t* d_ptr = int_part_buf;

	mov	edx, edi
	npad	8
$LL2@TryParseDN:

; 1048 :         while (*s_ptr == L'0')

	movzx	eax, WORD PTR [ecx+2]

; 1049 :             ++s_ptr;

	add	ecx, 2
	cmp	eax, 48					; 00000030H
	je	SHORT $LL2@TryParseDN

; 1050 :         for (;;)
; 1051 :         {
; 1052 :             *d_ptr = *s_ptr;

	mov	WORD PTR [edi], ax

; 1053 :             if (*s_ptr == L'\0')

	cmp	WORD PTR [ecx], 0
	je	SHORT $LN54@TryParseDN
$LL4@TryParseDN:

; 1050 :         for (;;)
; 1051 :         {
; 1052 :             *d_ptr = *s_ptr;

	mov	ax, WORD PTR [ecx+2]

; 1054 :                 break;
; 1055 :             ++s_ptr;

	lea	ecx, DWORD PTR [ecx+2]

; 1056 :             ++d_ptr;

	lea	edx, DWORD PTR [edx+2]
	mov	WORD PTR [edx], ax
	cmp	WORD PTR [ecx], 0
	jne	SHORT $LL4@TryParseDN
$LN54@TryParseDN:

; 1057 :         }
; 1058 :     }
; 1059 : 
; 1060 :     // 小数部の末尾の 0 を削除する
; 1061 :     wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

	mov	ebx, DWORD PTR __imp__lstrlenW@4
	push	esi
	call	ebx
	lea	eax, DWORD PTR [esi+eax*2]

; 1062 :     while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

	cmp	eax, esi
	jbe	SHORT $LN76@TryParseDN
$LL7@TryParseDN:
	cmp	WORD PTR [eax-2], 48			; 00000030H
	jne	SHORT $LN76@TryParseDN

; 1063 :         --frac_ptr;

	add	eax, -2					; fffffffeH
	cmp	eax, esi
	ja	SHORT $LL7@TryParseDN
$LN76@TryParseDN:

; 1064 :     *frac_ptr = L'\0';

	xor	ecx, ecx
	mov	WORD PTR [eax], cx

; 1065 : 
; 1066 :     // 小数部が 0 ではない場合、エラーとする
; 1067 :     if (frac_part_buf[0] != L'\0')

	cmp	WORD PTR [esi], cx
	jne	$LN81@TryParseDN

; 1068 :     {
; 1069 :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);
; 1070 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 1071 :         return (PMC_STATUS_PARSING_ERROR);
; 1072 :     }
; 1073 : 
; 1074 :     if (int_part_buf[0] == L'\0')

	cmp	WORD PTR [edi], cx
	jne	SHORT $LN18@TryParseDN

; 1075 :     {
; 1076 :         // 整数部が空である場合
; 1077 :         
; 1078 :         // 符号を 0 に 修正する
; 1079 :         *o_sign = 0;

	mov	eax, DWORD PTR _o_sign$[ebp]
	mov	BYTE PTR [eax], cl

; 1080 : 
; 1081 :         // 整数部に 0 を設定する
; 1082 :         int_part_buf[0] = L'0';

	mov	DWORD PTR [edi], 48			; 00000030H
$LN18@TryParseDN:

; 1083 :         int_part_buf[1] = L'\0';
; 1084 :     }
; 1085 : 
; 1086 :     // 小数部は捨てる
; 1087 :     DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	push	DWORD PTR _frac_part_buf_words$[ebp]
	push	esi
	call	_DeallocateBlock
	add	esp, 8

; 1091 :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	push	edi
	call	ebx
	lea	ecx, DWORD PTR _bin_buf_code$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bin_buf_words$[ebp]
	push	ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 193  :         return ((u + v - 1) / v);

	lea	ecx, DWORD PTR [eax+8]
	mov	eax, 954437177				; 38e38e39H
	mul	ecx
	shr	edx, 1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1091 :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	shl	edx, 5
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bin_buf$1$[ebp], eax

; 1092 :     if (bin_buf == NULL)

	test	eax, eax
	je	$LN80@TryParseDN

; 637  :     __UNIT_TYPE source_count = lstrlenW(source);

	push	edi
	mov	ebx, edi
	mov	esi, eax
	call	DWORD PTR __imp__lstrlenW@4

; 638  :     int r = source_count % word_digit_count;

	xor	edx, edx
	mov	DWORD PTR _source_count$1$[ebp], eax
	mov	ecx, 9
	div	ecx
	mov	ecx, edx
	mov	DWORD PTR _r$1$[ebp], ecx

; 639  :     if (r > 0)

	test	ecx, ecx
	jle	SHORT $LN77@TryParseDN

; 580  :     __UNIT_TYPE x = 0;

	xor	edx, edx

; 641  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	mov	ebx, ecx
	mov	esi, edi

; 581  :     while (count > 0)

	test	ecx, ecx
	je	SHORT $LN35@TryParseDN
	npad	8
$LL34@TryParseDN:

; 582  :     {
; 583  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	ecx, WORD PTR [esi]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN38@TryParseDN

; 130  :         return (c - L'0');

	sub	ecx, 48					; 00000030H
	jmp	SHORT $LN37@TryParseDN
$LN38@TryParseDN:

; 131  :     return (-1);

	or	ecx, -1
$LN37@TryParseDN:

; 583  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	eax, DWORD PTR [edx+edx*4]
	add	esi, 2
	lea	edx, DWORD PTR [ecx+eax*2]

; 584  :         --count;

	sub	ebx, 1
	jne	SHORT $LL34@TryParseDN
	mov	ecx, DWORD PTR _r$1$[ebp]
$LN35@TryParseDN:

; 641  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	mov	eax, DWORD PTR _bin_buf$1$[ebp]

; 642  :         in_ptr += r;

	lea	ebx, DWORD PTR [edi+ecx*2]
	mov	DWORD PTR [eax], edx
	lea	esi, DWORD PTR [eax+4]

; 643  :         source_count -= r;

	mov	eax, DWORD PTR _source_count$1$[ebp]
	sub	eax, ecx
	jmp	SHORT $LN75@TryParseDN
$LN77@TryParseDN:

; 639  :     if (r > 0)

	mov	eax, DWORD PTR _source_count$1$[ebp]
$LN75@TryParseDN:

; 644  :     }
; 645  :     while (source_count > 0)

	test	eax, eax
	je	SHORT $LN30@TryParseDN
	lea	ecx, DWORD PTR [eax-1]
	mov	eax, 954437177				; 38e38e39H
	mul	ecx
	mov	eax, edx
	shr	eax, 1
	inc	eax
	mov	DWORD PTR tv587[ebp], eax
	mov	edi, eax
$LL29@TryParseDN:

; 646  :     {
; 647  :         *out_ptr++ = Build1WordFromDecimalString(in_ptr);

	push	ebx
	call	_Build1WordFromDecimalString
	mov	DWORD PTR [esi], eax
	add	esp, 4
	add	esi, 4

; 648  :         in_ptr += word_digit_count;

	add	ebx, 18					; 00000012H
	sub	edi, 1
	jne	SHORT $LL29@TryParseDN
	mov	edi, DWORD PTR _int_part_buf$1$[ebp]
$LN30@TryParseDN:

; 649  :         source_count -= word_digit_count;
; 650  :     }
; 651  :     *out_buf_count = out_ptr - out_buf;

	mov	eax, DWORD PTR _bin_buf$1$[ebp]
	sub	esi, eax

; 1093 :     {
; 1094 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 1095 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 1096 :     }
; 1097 :     __UNIT_TYPE bin_buf_count;
; 1098 :     BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);
; 1099 :     if ((result = CheckBlockLight(bin_buf, bin_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _bin_buf_code$[ebp]

; 651  :     *out_buf_count = out_ptr - out_buf;

	sar	esi, 2

; 1093 :     {
; 1094 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 1095 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 1096 :     }
; 1097 :     __UNIT_TYPE bin_buf_count;
; 1098 :     BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);
; 1099 :     if ((result = CheckBlockLight(bin_buf, bin_buf_code)) != PMC_STATUS_OK)

	push	eax
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	$LN1@TryParseDN

; 1100 :         return (result);
; 1101 :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	push	DWORD PTR _int_part_buf_words$[ebp]
	push	edi
	call	_DeallocateBlock

; 1102 : 
; 1103 :     __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;
; 1104 :     __UNIT_TYPE no_light_check_code;
; 1105 :     if ((result = AllocateNumber(o_abs, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _o_abs$[ebp]
	lea	eax, DWORD PTR _no_light_check_code$[ebp]
	mov	edi, esi
	push	eax
	shl	edi, 5
	push	edi
	push	ebx
	call	_AllocateNumber
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$4$[ebp], eax
	test	eax, eax
	je	SHORT $LN21@TryParseDN

; 1106 :     {
; 1107 :         DeallocateBlock(bin_buf, bin_buf_words);

	push	DWORD PTR _bin_buf_words$[ebp]
	push	DWORD PTR _bin_buf$1$[ebp]
	call	_DeallocateBlock

; 1108 :         return (result);

	mov	eax, DWORD PTR _result$4$[ebp]
	add	esp, 8
	pop	edi

; 1135 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@TryParseDN:

; 1109 :     }
; 1110 : 
; 1111 :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o_abs)->BLOCK)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR _out_buf$1$[ebp], eax

; 975  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	lea	eax, DWORD PTR _work_buf_code$2[ebp]
	push	eax
	lea	eax, DWORD PTR _work_buf_words$1[ebp]
	push	eax
	lea	eax, DWORD PTR [edi+32]
	push	eax
	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf$1$[ebp], edi

; 976  :     if (work_buf == NULL)

	test	edi, edi
	jne	SHORT $LN43@TryParseDN

; 977  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	esi, DWORD PTR [eax-6]
	jmp	SHORT $LN40@TryParseDN
$LN43@TryParseDN:

; 978  : 
; 979  :     __UNIT_TYPE work_buf_count = 1;
; 980  :     work_buf[0] = in_buf[0];

	mov	ecx, DWORD PTR _bin_buf$1$[ebp]
	mov	ebx, 1
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edi], eax

; 981  :     ++in_buf;

	lea	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _in_buf$1$[ebp], eax

; 982  :     --in_buf_count;

	add	esi, -1

; 983  : 
; 984  :     while (in_buf_count > 0)

	je	SHORT $LN42@TryParseDN
$LL41@TryParseDN:

; 985  :     {
; 986  :         __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

	push	DWORD PTR [eax]
	push	ebx
	push	edi
	call	DWORD PTR _fp_MultiplyAndAdd
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 987  :         work_buf_count = w_tail - work_buf;
; 988  :         ++in_buf;

	mov	eax, DWORD PTR _in_buf$1$[ebp]
	sub	ebx, edi
	add	eax, 4
	sar	ebx, 2
	mov	DWORD PTR _in_buf$1$[ebp], eax

; 989  :         --in_buf_count;

	sub	esi, 1
	jne	SHORT $LL41@TryParseDN
$LN42@TryParseDN:

; 990  :     }
; 991  :     if ((result = CheckBlockLight(work_buf, work_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_buf_code$2[ebp]
	push	edi
	call	_CheckBlockLight
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	jne	SHORT $LN78@TryParseDN
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR _work_buf$1$[ebp]
	mov	ecx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 994  :     DeallocateBlock(work_buf, work_buf_words);

	push	DWORD PTR _work_buf_words$1[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _out_buf$1$[ebp]
	mov	esi, eax
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 994  :     DeallocateBlock(work_buf, work_buf_words);

	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 995  :     return (PMC_STATUS_OK);

	xor	esi, esi
$LN78@TryParseDN:

; 1109 :     }
; 1110 : 
; 1111 :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o_abs)->BLOCK)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _o_abs$[ebp]
$LN40@TryParseDN:
	mov	eax, DWORD PTR [ebx]
	test	esi, esi
	je	SHORT $LN22@TryParseDN

; 1112 :     {
; 1113 :         DeallocateNumber(*o_abs);

	push	eax
	call	_DeallocateNumber

; 1114 :         DeallocateBlock(bin_buf, bin_buf_words);

	push	DWORD PTR _bin_buf_words$[ebp]
	push	DWORD PTR _bin_buf$1$[ebp]
	call	_DeallocateBlock
	add	esp, 12					; 0000000cH

; 1115 :         return (result);

	mov	eax, esi
	pop	edi

; 1135 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@TryParseDN:

; 1116 :     }
; 1117 :     if ((result = CheckBlockLight((*o_abs)->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	push	DWORD PTR _no_light_check_code$[ebp]
	push	DWORD PTR [eax+36]
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@TryParseDN

; 1118 :         return (result);
; 1119 :     DeallocateBlock(bin_buf, bin_buf_words);

	push	DWORD PTR _bin_buf_words$[ebp]
	push	DWORD PTR _bin_buf$1$[ebp]
	call	_DeallocateBlock

; 1120 :     CommitNumber(*o_abs);

	push	DWORD PTR [ebx]
	call	_CommitNumber

; 1121 :     if ((*o_abs)->IS_ZERO)

	mov	eax, DWORD PTR [ebx]
	add	esp, 12					; 0000000cH
	test	BYTE PTR [eax], 1
	je	SHORT $LN24@TryParseDN

; 1122 :     {
; 1123 :         DeallocateNumber(*o_abs);

	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 1124 :         *o_abs = &number_zero;

	mov	DWORD PTR [ebx], OFFSET _number_zero
$LN24@TryParseDN:

; 1125 :     }
; 1126 : #ifdef _DEBUG
; 1127 :     if (*o_sign != 0 && *o_sign != 1 && *o_sign != -1)
; 1128 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1129 :     if (*o_sign == 0 && !(*o_abs)->IS_ZERO)
; 1130 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1131 :     if (*o_sign != 0 && (*o_abs)->IS_ZERO)
; 1132 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1133 : #endif
; 1134 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@TryParseDN:
	pop	edi

; 1135 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TryParseDN ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _ConvertCardinalNumber
_TEXT	SEGMENT
_work_buf_words$ = -12					; size = 4
_work_buf$1$ = -8					; size = 4
_work_buf_code$ = -4					; size = 4
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_ConvertCardinalNumber PROC				; COMDAT

; 971  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	edi

; 972  :     PMC_STATUS_CODE result;
; 973  :     __UNIT_TYPE work_buf_code;
; 974  :     __UNIT_TYPE work_buf_words;
; 975  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	lea	eax, DWORD PTR _work_buf_code$[ebp]
	push	eax
	lea	eax, DWORD PTR _work_buf_words$[ebp]
	push	eax
	mov	eax, DWORD PTR _in_buf_count$[ebp]
	inc	eax
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf$1$[ebp], edi

; 976  :     if (work_buf == NULL)

	test	edi, edi
	jne	SHORT $LN4@ConvertCar

; 977  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, DWORD PTR [edi-6]
	pop	edi

; 996  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@ConvertCar:
	push	ebx
	push	esi

; 978  : 
; 979  :     __UNIT_TYPE work_buf_count = 1;
; 980  :     work_buf[0] = in_buf[0];

	mov	esi, DWORD PTR _in_buf$[ebp]
	mov	ebx, 1
	mov	eax, DWORD PTR [esi]

; 981  :     ++in_buf;

	add	esi, 4
	sub	DWORD PTR _in_buf_count$[ebp], ebx
	mov	DWORD PTR [edi], eax

; 982  :     --in_buf_count;
; 983  : 
; 984  :     while (in_buf_count > 0)

	je	SHORT $LN3@ConvertCar
$LL2@ConvertCar:

; 985  :     {
; 986  :         __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

	push	DWORD PTR [esi]
	push	ebx
	push	edi
	call	DWORD PTR _fp_MultiplyAndAdd
	mov	ebx, eax

; 987  :         work_buf_count = w_tail - work_buf;
; 988  :         ++in_buf;

	lea	esi, DWORD PTR [esi+4]
	sub	ebx, edi
	add	esp, 12					; 0000000cH
	sar	ebx, 2

; 989  :         --in_buf_count;

	sub	DWORD PTR _in_buf_count$[ebp], 1
	jne	SHORT $LL2@ConvertCar
$LN3@ConvertCar:

; 990  :     }
; 991  :     if ((result = CheckBlockLight(work_buf, work_buf_code)) != PMC_STATUS_OK)

	push	DWORD PTR _work_buf_code$[ebp]
	push	edi
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@ConvertCar
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR _work_buf$1$[ebp]
	mov	ecx, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 994  :     DeallocateBlock(work_buf, work_buf_words);

	push	DWORD PTR _work_buf_words$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _out_buf$[ebp]
	mov	esi, eax
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 994  :     DeallocateBlock(work_buf, work_buf_words);

	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 995  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN13@ConvertCar:
	pop	esi
	pop	ebx
	pop	edi

; 996  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ConvertCardinalNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _MultiplyAndAdd_using_ADCX_MULX
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
_MultiplyAndAdd_using_ADCX_MULX PROC			; COMDAT

; 828  : {

	push	ebp
	mov	ebp, esp

; 829  :     __UNIT_TYPE k = x;
; 830  :     __UNIT_TYPE count = u_count >> 5;
; 831  :     while (count > 0)

	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _u_count$[ebp]
	mov	eax, ebx
	push	esi
	shr	eax, 5
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	test	eax, eax
	je	$LN3@MultiplyAn
	mov	ebx, eax
	npad	2
$LL2@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+4]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+4], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+8]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+8], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+12]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+12], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+16]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+16], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+20]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+20], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+24]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+24], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+28]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+28], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+32]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+32], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+36]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+36], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+40]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+40], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+44]
	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi
	mov	DWORD PTR [ecx+44], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+48]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+48], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+52]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+52], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+56]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+56], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+60]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+60], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+64]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+64], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+68]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+68], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+72]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+72], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+76]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+76], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+80]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+80], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+84]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+84], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+88]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+88], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+92]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+92], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+96]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+96], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+100]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+100], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+104]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+104], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+108]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+108], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+112]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+112], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+116]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+116], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+120]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+120], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+124]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 865  :         u_buf += 32;

	sub	ecx, -128				; ffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 866  :         --count;

	sub	ebx, 1
	jne	$LL2@MultiplyAn

; 829  :     __UNIT_TYPE k = x;
; 830  :     __UNIT_TYPE count = u_count >> 5;
; 831  :     while (count > 0)

	mov	ebx, DWORD PTR _u_count$[ebp]
$LN3@MultiplyAn:

; 867  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 868  :         if (sizeof(k) == sizeof(_UINT32_T))
; 869  :             AddToMULTI32Counter(32);
; 870  :         else
; 871  :             AddToMULTI64Counter(32);
; 872  : #endif
; 873  :     }
; 874  : 
; 875  :     if (u_count & 0x10)

	test	bl, 16					; 00000010H
	je	$LN509@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+4]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+4], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+8]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+8], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+12]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+12], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+16]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+16], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+20]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+20], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+24]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+24], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+28]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+28], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+32]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+32], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+36]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+36], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+40]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+40], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+44]
	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi
	mov	DWORD PTR [ecx+44], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+48]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+48], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+52]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+52], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+56]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+56], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+60]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 893  :         u_buf += 16;

	add	ecx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H
	lock	 xadd	 DWORD PTR [edx], eax
$LN509@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 902  :     if (u_count & 0x8)

	test	bl, 8
	je	$LN593@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+4]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+4], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+8]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+8], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+12]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+12], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+16]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+16], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+20]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+20], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+24]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+24], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+28]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 912  :         u_buf += 8;

	add	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8
	lock	 xadd	 DWORD PTR [edx], eax
$LN593@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 921  :     if (u_count & 0x4)

	test	bl, 4
	je	SHORT $LN637@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+4]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+4], eax
	mov	eax, 0
	adcx	edi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+8]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+8], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+12]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 927  :         u_buf += 4;

	add	ecx, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4
	lock	 xadd	 DWORD PTR [edx], eax
$LN637@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 936  :     if (u_count & 0x2)

	test	bl, 2
	je	SHORT $LN661@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx], eax
	mov	eax, 0
	adcx	esi, eax

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+4]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, esi

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 940  :         u_buf += 2;

	add	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [eax], edx
$LN661@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 949  :     if (u_count & 0x1)

	test	bl, 1
	je	SHORT $LN675@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, edi
	mov	edi, edx
	mov	DWORD PTR [ecx], eax
	mov	eax, 0
	adcx	edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 952  :         u_buf += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 361  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN675@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 961  :     if (k > 0)

	test	edi, edi
	je	SHORT $LN680@MultiplyAn

; 962  :     {
; 963  :         u_buf[0] = k;

	mov	DWORD PTR [ecx], edi

; 964  :         u_buf += 1;

	lea	eax, DWORD PTR [ecx+4]
	pop	edi

; 965  :     }
; 966  : 
; 967  :     return (u_buf);
; 968  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN680@MultiplyAn:
	pop	edi
	pop	esi
	mov	eax, ecx
	pop	ebx
	pop	ebp
	ret	0
_MultiplyAndAdd_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _MultiplyAndAdd_using_ADC_MUL
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
_MultiplyAndAdd_using_ADC_MUL PROC			; COMDAT

; 685  : {

	push	ebp
	mov	ebp, esp

; 686  :     __UNIT_TYPE k = x;
; 687  :     __UNIT_TYPE count = u_count >> 5;
; 688  :     while (count > 0)

	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _u_count$[ebp]
	mov	eax, ebx
	push	esi
	shr	eax, 5
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	test	eax, eax
	je	$LN3@MultiplyAn
	mov	ebx, eax
	npad	2
$LL2@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+4]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+4], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+8]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+8], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+12]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+12], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+16]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+16], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+20]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+20], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+24]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+24], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+28]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+28], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+32]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+32], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+36]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+36], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+40]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+40], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+44]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+44], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+48]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+48], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+52]
	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+56]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+56], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+60]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+60], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+64]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+64], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+68]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+68], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+72]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+72], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+76]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+76], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+80]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+80], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+84]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+84], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+88]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+88], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+92]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+92], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+96]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+96], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+100]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+100], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+104]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+104], eax
	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx+108]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+108], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+112]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+112], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+116]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+116], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+120]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+120], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+124]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 722  :         u_buf += 32;

	sub	ecx, -128				; ffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 723  :         --count;

	sub	ebx, 1
	jne	$LL2@MultiplyAn

; 686  :     __UNIT_TYPE k = x;
; 687  :     __UNIT_TYPE count = u_count >> 5;
; 688  :     while (count > 0)

	mov	ebx, DWORD PTR _u_count$[ebp]
$LN3@MultiplyAn:

; 724  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 725  :         if (sizeof(k) == sizeof(_UINT32_T))
; 726  :             AddToMULTI32Counter(32);
; 727  :         else
; 728  :             AddToMULTI64Counter(32);
; 729  : #endif
; 730  :     }
; 731  : 
; 732  :     if (u_count & 0x10)

	test	bl, 16					; 00000010H
	je	$LN509@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+4]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+4], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+8]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+8], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+12]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+12], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+16]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+16], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+20]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+20], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+24]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+24], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+28]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+28], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+32]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+32], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+36]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+36], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+40]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+40], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+44]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+44], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+48]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+48], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+52]
	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi
	mov	DWORD PTR [ecx+52], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+56]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+56], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+60]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 750  :         u_buf += 16;

	add	ecx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
$LN509@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 759  :     if (u_count & 0x8)

	test	bl, 8
	je	$LN593@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+4]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+4], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+8]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+8], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+12]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+12], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+16]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+16], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+20]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+20], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+24]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+24], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+28]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 769  :         u_buf += 8;

	add	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
$LN593@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 778  :     if (u_count & 0x4)

	test	bl, 4
	je	SHORT $LN637@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+4]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+4], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+8]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+8], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+12]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 784  :         u_buf += 4;

	add	ecx, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
$LN637@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 793  :     if (u_count & 0x2)

	test	bl, 2
	je	SHORT $LN661@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx], eax

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR [ecx+4]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, esi

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 797  :         u_buf += 2;

	add	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [eax], edx
$LN661@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 806  :     if (u_count & 0x1)

	test	bl, 1
	je	SHORT $LN675@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR [ecx]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, edi
	mov	edi, edx
	mov	DWORD PTR [ecx], eax
	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 809  :         u_buf += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 361  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN675@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 818  :     if (k > 0)

	test	edi, edi
	je	SHORT $LN680@MultiplyAn

; 819  :     {
; 820  :         u_buf[0] = k;

	mov	DWORD PTR [ecx], edi

; 821  :         u_buf += 1;

	lea	eax, DWORD PTR [ecx+4]
	pop	edi

; 822  :     }
; 823  : 
; 824  :     return (u_buf);
; 825  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN680@MultiplyAn:
	pop	edi
	pop	esi
	mov	eax, ecx
	pop	ebx
	pop	ebp
	ret	0
_MultiplyAndAdd_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _MultiplyAndAdd1Word_using_ADCX_MULX
_TEXT	SEGMENT
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
_MultiplyAndAdd1Word_using_ADCX_MULX PROC		; COMDAT

; 670  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	ecx, DWORD PTR _w_buf$[ebp]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR _u$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, 0
	adcx	eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 682  : }

	pop	ebp
	ret	0
_MultiplyAndAdd1Word_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _MultiplyAndAdd1Word_using_ADC_MUL
_TEXT	SEGMENT
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
_MultiplyAndAdd1Word_using_ADC_MUL PROC			; COMDAT

; 655  : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	ecx, DWORD PTR _w_buf$[ebp]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, 1000000000				; 3b9aca00H
	mul	DWORD PTR _u$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx], eax
	adc	edx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 666  :     return (k);

	mov	eax, edx

; 667  : }

	pop	ebp
	ret	0
_MultiplyAndAdd1Word_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _BuildBinaryFromDecimalString
_TEXT	SEGMENT
_r$1$ = -4						; size = 4
_source_count$1$ = 8					; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_out_buf_count$ = 16					; size = 4
_BuildBinaryFromDecimalString PROC			; COMDAT

; 627  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi

; 628  : #ifdef _M_IX86
; 629  :     int word_digit_count = 9;
; 630  : #elif defined(_M_IX64)
; 631  :     int word_digit_count = 19;
; 632  : #else
; 633  : #error unknown platform
; 634  : #endif
; 635  :     wchar_t* in_ptr = source;
; 636  :     __UNIT_TYPE* out_ptr = out_buf;

	mov	esi, DWORD PTR _out_buf$[ebp]
	push	edi
	mov	edi, DWORD PTR _source$[ebp]

; 637  :     __UNIT_TYPE source_count = lstrlenW(source);

	push	edi
	call	DWORD PTR __imp__lstrlenW@4
	mov	ecx, eax

; 638  :     int r = source_count % word_digit_count;

	xor	edx, edx
	mov	ebx, 9
	mov	DWORD PTR _source_count$1$[ebp], ecx
	div	ebx
	mov	eax, edx
	mov	DWORD PTR _r$1$[ebp], eax

; 639  :     if (r > 0)

	test	eax, eax
	jle	SHORT $LN14@BuildBinar

; 580  :     __UNIT_TYPE x = 0;

	xor	edx, edx

; 640  :     {
; 641  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	mov	ebx, eax
	mov	esi, edi

; 581  :     while (count > 0)

	test	eax, eax
	je	SHORT $LN8@BuildBinar
$LL7@BuildBinar:

; 582  :     {
; 583  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	ecx, WORD PTR [esi]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN11@BuildBinar

; 130  :         return (c - L'0');

	sub	ecx, 48					; 00000030H
	jmp	SHORT $LN10@BuildBinar
$LN11@BuildBinar:

; 131  :     return (-1);

	or	ecx, -1
$LN10@BuildBinar:

; 583  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	eax, DWORD PTR [edx+edx*4]
	add	esi, 2
	lea	edx, DWORD PTR [ecx+eax*2]

; 584  :         --count;

	sub	ebx, 1
	jne	SHORT $LL7@BuildBinar
	mov	ecx, DWORD PTR _source_count$1$[ebp]
	mov	eax, DWORD PTR _r$1$[ebp]
$LN8@BuildBinar:

; 640  :     {
; 641  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	mov	ebx, DWORD PTR _out_buf$[ebp]

; 642  :         in_ptr += r;

	lea	edi, DWORD PTR [edi+eax*2]

; 643  :         source_count -= r;

	sub	ecx, eax
	mov	DWORD PTR [ebx], edx
	lea	esi, DWORD PTR [ebx+4]
$LN14@BuildBinar:

; 644  :     }
; 645  :     while (source_count > 0)

	test	ecx, ecx
	je	SHORT $LN3@BuildBinar
	dec	ecx
	mov	eax, 954437177				; 38e38e39H
	mul	ecx
	mov	ebx, edx
	shr	ebx, 1
	inc	ebx
	npad	5
$LL2@BuildBinar:

; 646  :     {
; 647  :         *out_ptr++ = Build1WordFromDecimalString(in_ptr);

	push	edi
	call	_Build1WordFromDecimalString
	mov	DWORD PTR [esi], eax
	add	esp, 4
	add	esi, 4

; 648  :         in_ptr += word_digit_count;

	add	edi, 18					; 00000012H
	sub	ebx, 1
	jne	SHORT $LL2@BuildBinar
$LN3@BuildBinar:

; 649  :         source_count -= word_digit_count;
; 650  :     }
; 651  :     *out_buf_count = out_ptr - out_buf;

	sub	esi, DWORD PTR _out_buf$[ebp]
	mov	eax, DWORD PTR _out_buf_count$[ebp]
	sar	esi, 2
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebx

; 652  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_BuildBinaryFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _Build1WordFromDecimalString
_TEXT	SEGMENT
_in_ptr$ = 8						; size = 4
_Build1WordFromDecimalString PROC			; COMDAT

; 590  : {

	push	ebp
	mov	ebp, esp

; 591  :     __UNIT_TYPE x = ParseDecimalDigit(*in_ptr++);

	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN8@Build1Word

; 130  :         return (c - L'0');

	sub	edx, 48					; 00000030H
	jmp	SHORT $LN7@Build1Word
$LN8@Build1Word:

; 131  :     return (-1);

	or	edx, -1
$LN7@Build1Word:
	push	esi

; 592  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 593  :     {
; 594  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 595  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 596  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 597  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 598  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 599  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 600  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 601  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 602  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 603  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 604  :     }
; 605  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 606  :     {
; 607  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	esi, WORD PTR [ecx+2]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [esi-48]
	cmp	ax, 9
	ja	SHORT $LN41@Build1Word

; 130  :         return (c - L'0');

	sub	esi, 48					; 00000030H
	jmp	SHORT $LN40@Build1Word
$LN41@Build1Word:

; 131  :     return (-1);

	or	esi, -1
$LN40@Build1Word:

; 592  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 593  :     {
; 594  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 595  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 596  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 597  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 598  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 599  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 600  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 601  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 602  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 603  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 604  :     }
; 605  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 606  :     {
; 607  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	eax, DWORD PTR [edx+edx*4]

; 608  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	edx, WORD PTR [ecx+4]
	lea	esi, DWORD PTR [esi+eax*2]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN44@Build1Word

; 130  :         return (c - L'0');

	sub	edx, 48					; 00000030H
	jmp	SHORT $LN43@Build1Word
$LN44@Build1Word:

; 131  :     return (-1);

	or	edx, -1
$LN43@Build1Word:

; 608  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	eax, DWORD PTR [esi+esi*4]
	lea	esi, DWORD PTR [edx+eax*2]

; 609  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	edx, WORD PTR [ecx+6]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN47@Build1Word

; 130  :         return (c - L'0');

	sub	edx, 48					; 00000030H
	jmp	SHORT $LN46@Build1Word
$LN47@Build1Word:

; 131  :     return (-1);

	or	edx, -1
$LN46@Build1Word:

; 609  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	eax, DWORD PTR [esi+esi*4]
	lea	esi, DWORD PTR [edx+eax*2]

; 610  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	edx, WORD PTR [ecx+8]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN50@Build1Word

; 130  :         return (c - L'0');

	sub	edx, 48					; 00000030H
	jmp	SHORT $LN49@Build1Word
$LN50@Build1Word:

; 131  :     return (-1);

	or	edx, -1
$LN49@Build1Word:

; 610  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	eax, DWORD PTR [esi+esi*4]
	lea	esi, DWORD PTR [edx+eax*2]

; 611  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	edx, WORD PTR [ecx+10]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN53@Build1Word

; 130  :         return (c - L'0');

	sub	edx, 48					; 00000030H
	jmp	SHORT $LN52@Build1Word
$LN53@Build1Word:

; 131  :     return (-1);

	or	edx, -1
$LN52@Build1Word:

; 611  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	eax, DWORD PTR [esi+esi*4]
	lea	esi, DWORD PTR [edx+eax*2]

; 612  :     }
; 613  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 614  :     {
; 615  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	edx, WORD PTR [ecx+12]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN56@Build1Word

; 130  :         return (c - L'0');

	sub	edx, 48					; 00000030H
	jmp	SHORT $LN55@Build1Word
$LN56@Build1Word:

; 131  :     return (-1);

	or	edx, -1
$LN55@Build1Word:

; 612  :     }
; 613  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 614  :     {
; 615  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	eax, DWORD PTR [esi+esi*4]
	lea	esi, DWORD PTR [edx+eax*2]

; 616  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	edx, WORD PTR [ecx+14]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edx-48]
	cmp	ax, 9
	ja	SHORT $LN59@Build1Word

; 130  :         return (c - L'0');

	sub	edx, 48					; 00000030H
	jmp	SHORT $LN58@Build1Word
$LN59@Build1Word:

; 131  :     return (-1);

	or	edx, -1
$LN58@Build1Word:

; 617  :     }
; 618  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 619  :     {
; 620  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	ecx, WORD PTR [ecx+16]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	edx, DWORD PTR [edx+eax*2]

; 129  :     if (c >= L'0' && c <= L'9')

	pop	esi
	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN62@Build1Word

; 130  :         return (c - L'0');

	sub	ecx, 48					; 00000030H

; 617  :     }
; 618  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 619  :     {
; 620  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	eax, DWORD PTR [edx+edx*4]
	lea	eax, DWORD PTR [ecx+eax*2]

; 621  :     }
; 622  :     return (x);
; 623  : }

	pop	ebp
	ret	0
$LN62@Build1Word:

; 131  :     return (-1);

	or	ecx, -1

; 617  :     }
; 618  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 619  :     {
; 620  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	eax, DWORD PTR [edx+edx*4]
	lea	eax, DWORD PTR [ecx+eax*2]

; 621  :     }
; 622  :     return (x);
; 623  : }

	pop	ebp
	ret	0
_Build1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _BuildLeading1WordFromDecimalString
_TEXT	SEGMENT
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
_BuildLeading1WordFromDecimalString PROC		; COMDAT

; 579  : {

	push	ebp
	mov	ebp, esp
	push	edi

; 580  :     __UNIT_TYPE x = 0;
; 581  :     while (count > 0)

	mov	edi, DWORD PTR _count$[ebp]
	xor	edx, edx
	test	edi, edi
	je	SHORT $LN12@BuildLeadi
	push	esi
	mov	esi, DWORD PTR _in_ptr$[ebp]
$LL2@BuildLeadi:

; 582  :     {
; 583  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	movzx	ecx, WORD PTR [esi]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN6@BuildLeadi

; 130  :         return (c - L'0');

	lea	eax, DWORD PTR [ecx-48]
	jmp	SHORT $LN5@BuildLeadi
$LN6@BuildLeadi:

; 131  :     return (-1);

	or	eax, -1
$LN5@BuildLeadi:

; 582  :     {
; 583  :         x = x * 10 + ParseDecimalDigit(*in_ptr++);

	lea	ecx, DWORD PTR [edx+edx*4]
	add	esi, 2
	lea	edx, DWORD PTR [eax+ecx*2]

; 584  :         --count;

	sub	edi, 1
	jne	SHORT $LL2@BuildLeadi

; 585  :     }
; 586  :     return (x);

	pop	esi
$LN12@BuildLeadi:

; 587  : }

	mov	eax, edx
	pop	edi
	pop	ebp
	ret	0
_BuildLeading1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _ParseAsHexNumberString
_TEXT	SEGMENT
_state$ = -92						; size = 88
__$ArrayPad$ = -4					; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_int_part_buf$ = 20					; size = 4
_ParseAsHexNumberString PROC				; COMDAT

; 564  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _format_option$[ebp]
	push	ebx

; 565  :     struct __tag_PARSER_STATE state;
; 566  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, NULL);

	mov	ebx, DWORD PTR _number_styles$[ebp]
	push	0
	push	DWORD PTR _int_part_buf$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _in_ptr$[ebp]
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_InitializeParserState
	add	esp, 24					; 00000018H

; 567  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	test	bl, 1
	je	SHORT $LN38@ParseAsHex

; 110  :         switch (*state->IN_PTR)

	mov	ecx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [ecx]
	cmp	eax, 9
	jb	SHORT $LN38@ParseAsHex
	npad	3
$LL7@ParseAsHex:
	cmp	eax, 13					; 0000000dH
	jbe	SHORT $LN12@ParseAsHex
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN38@ParseAsHex
$LN12@ParseAsHex:

; 111  :         {
; 112  :         case L' ':
; 113  :         case L'\t':
; 114  :         case L'\n':
; 115  :         case L'\r':
; 116  :         case L'\f':
; 117  :         case L'\v':
; 118  :             break;
; 119  : 
; 120  :         default:
; 121  :             return;
; 122  :         }
; 123  :         state->IN_PTR += 1;

	add	ecx, 2
	mov	DWORD PTR _state$[ebp], ecx
	movzx	eax, WORD PTR [ecx]
	cmp	eax, 9
	jae	SHORT $LL7@ParseAsHex
$LN38@ParseAsHex:

; 568  :         SkipSpace(&state);
; 569  :     ParseAsIntegerPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsIntegerPartNumberSequence

; 570  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	eax, DWORD PTR _state$[ebp]
	add	esp, 4
	test	bl, 2
	pop	ebx
	je	SHORT $LN30@ParseAsHex

; 110  :         switch (*state->IN_PTR)

	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 9
	jb	SHORT $LN30@ParseAsHex
$LL16@ParseAsHex:
	cmp	ecx, 13					; 0000000dH
	jbe	SHORT $LN21@ParseAsHex
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN30@ParseAsHex
$LN21@ParseAsHex:

; 111  :         {
; 112  :         case L' ':
; 113  :         case L'\t':
; 114  :         case L'\n':
; 115  :         case L'\r':
; 116  :         case L'\f':
; 117  :         case L'\v':
; 118  :             break;
; 119  : 
; 120  :         default:
; 121  :             return;
; 122  :         }
; 123  :         state->IN_PTR += 1;

	add	eax, 2
	mov	DWORD PTR _state$[ebp], eax
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 9
	jae	SHORT $LL16@ParseAsHex
$LN30@ParseAsHex:

; 571  :         SkipSpace(&state);
; 572  :     if (*state.IN_PTR != L'\0')

	cmp	WORD PTR [eax], 0
	je	SHORT $LN4@ParseAsHex

; 573  :         return (0);

	xor	eax, eax

; 574  :     FinalizeParserState(&state);
; 575  :     return (1);
; 576  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@ParseAsHex:

; 100  :     *state->INT_PART_PTR = L'\0';

	mov	eax, DWORD PTR _state$[ebp+80]
	xor	ecx, ecx
	mov	WORD PTR [eax], cx

; 101  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR _state$[ebp+4], 32		; 00000020H
	je	SHORT $LN25@ParseAsHex

; 102  :         *state->FRAC_PART_PTR = L'\0';

	mov	eax, DWORD PTR _state$[ebp+84]
	mov	WORD PTR [eax], cx
$LN25@ParseAsHex:

; 574  :     FinalizeParserState(&state);
; 575  :     return (1);
; 576  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, 1
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ParseAsHexNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _ParseAsDecimalNumberString
_TEXT	SEGMENT
_sign$GSCopy$1$ = -104					; size = 4
tv1191 = -100						; size = 4
tv1179 = -100						; size = 4
tv1210 = -96						; size = 4
_state$ = -92						; size = 88
__$ArrayPad$ = -4					; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_sign$ = 20						; size = 4
_int_part_buf$ = 24					; size = 4
_frac_part_buf$ = 28					; size = 4
_ParseAsDecimalNumberString PROC			; COMDAT

; 195  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _format_option$[ebp]
	mov	ecx, DWORD PTR _sign$[ebp]
	push	ebx

; 196  :     /*
; 197  :       想定している書式：
; 198  : 
; 199  :         $ -n
; 200  :         $ n
; 201  :         $-n
; 202  :         $n
; 203  :         $n-
; 204  :         ($ n)
; 205  :         ($n)
; 206  :         (n $)
; 207  :         (n)
; 208  :         -$ n
; 209  :         -$n
; 210  :         -n
; 211  :         -n $
; 212  :         -n$
; 213  :         n $
; 214  :         n $-
; 215  :         n -
; 216  :         n$
; 217  :         n$-
; 218  :         n-
; 219  :         n-$
; 220  :     */
; 221  :     struct __tag_PARSER_STATE state;
; 222  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, frac_part_buf);

	mov	ebx, DWORD PTR _number_styles$[ebp]
	push	esi
	push	edi
	push	DWORD PTR _frac_part_buf$[ebp]
	mov	DWORD PTR _sign$GSCopy$1$[ebp], ecx
	push	DWORD PTR _int_part_buf$[ebp]
	push	eax
	push	ebx
	push	DWORD PTR _in_ptr$[ebp]
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_InitializeParserState

; 223  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	esi, DWORD PTR _state$[ebp]
	mov	eax, ebx
	add	esp, 24					; 00000018H
	and	eax, 1
	mov	DWORD PTR tv1210[ebp], eax
	je	SHORT $LN163@ParseAsDec

; 110  :         switch (*state->IN_PTR)

	movzx	eax, WORD PTR [esi]
	cmp	eax, 9
	jb	SHORT $LN163@ParseAsDec
	npad	5
$LL117@ParseAsDec:
	cmp	eax, 13					; 0000000dH
	jbe	SHORT $LN122@ParseAsDec
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN163@ParseAsDec
$LN122@ParseAsDec:

; 111  :         {
; 112  :         case L' ':
; 113  :         case L'\t':
; 114  :         case L'\n':
; 115  :         case L'\r':
; 116  :         case L'\f':
; 117  :         case L'\v':
; 118  :             break;
; 119  : 
; 120  :         default:
; 121  :             return;
; 122  :         }
; 123  :         state->IN_PTR += 1;

	add	esi, 2
	mov	DWORD PTR _state$[ebp], esi
	movzx	eax, WORD PTR [esi]
	cmp	eax, 9
	jae	SHORT $LL117@ParseAsDec
$LN163@ParseAsDec:

; 224  :         SkipSpace(&state);
; 225  :     if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	edi, ebx
	and	edi, 256				; 00000100H
	je	$LN3@ParseAsDec

; 58   :     while (*b != L'\0')

	mov	ax, WORD PTR _state$[ebp+10]

; 224  :         SkipSpace(&state);
; 225  :     if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	lea	ecx, DWORD PTR _state$[ebp+10]

; 58   :     while (*b != L'\0')

	test	ax, ax
	je	SHORT $LN127@ParseAsDec
	movzx	edx, ax
	mov	ebx, ecx
	mov	eax, esi
	sub	eax, ebx
	mov	ebx, DWORD PTR _number_styles$[ebp]
	mov	DWORD PTR tv1179[ebp], eax
$LL126@ParseAsDec:

; 59   :     {
; 60   :         if (*a != *b)

	cmp	WORD PTR [eax+ecx], dx
	jne	$LN3@ParseAsDec

; 61   :             return (0);
; 62   :         ++a;
; 63   :         ++b;

	movzx	eax, WORD PTR [ecx+2]
	add	ecx, 2
	mov	edx, eax
	test	ax, ax
	mov	eax, DWORD PTR tv1179[ebp]
	jne	SHORT $LL126@ParseAsDec
$LN127@ParseAsDec:

; 226  :     {
; 227  :         state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 228  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')

	cmp	DWORD PTR tv1210[ebp], 0
	mov	eax, DWORD PTR _state$[ebp+16]
	lea	esi, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], esi
	je	SHORT $LN5@ParseAsDec
	cmp	WORD PTR [esi], 32			; 00000020H
	jne	SHORT $LN5@ParseAsDec

; 229  :             state.IN_PTR += 1;

	add	esi, 2
	mov	DWORD PTR _state$[ebp], esi
$LN5@ParseAsDec:

; 230  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 4
	je	$LN10@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+20]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@ParseAsDec

; 231  :         {
; 232  :             state.SIGN = 1;
; 233  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+28]
	lea	esi, DWORD PTR [esi+eax*2]
	mov	BYTE PTR _state$[ebp+8], 1
	mov	DWORD PTR _state$[ebp], esi
	movzx	ecx, WORD PTR [esi]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN12@ParseAsDec

; 234  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)

	cmp	ecx, 48					; 00000030H
	jb	SHORT $LN12@ParseAsDec

; 235  :                 ParseAsIntegerPartNumberSequence(&state);
; 236  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))
; 237  :             {
; 238  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 239  :                 ParseAsFractionPartNumberSequence(&state);
; 240  :             }
; 241  :         }

	jmp	SHORT $LN188@ParseAsDec
$LN6@ParseAsDec:

; 242  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	eax, DWORD PTR _state$[ebp+32]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@ParseAsDec

; 243  :         {
; 244  :             state.SIGN = -1;
; 245  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+40]
	mov	BYTE PTR _state$[ebp+8], -1
	lea	esi, DWORD PTR [esi+eax*2]
$LN190@ParseAsDec:

; 475  :     {
; 476  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 477  :         ParseAsFractionPartNumberSequence(&state);
; 478  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')
; 479  :         {
; 480  :             state.IN_PTR += 1;
; 481  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 482  :             {
; 483  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 484  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 485  :                 {
; 486  :                     state.SIGN = 1;
; 487  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 488  :                 }
; 489  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 490  :                 {
; 491  :                     state.SIGN = -1;
; 492  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 493  :                 }
; 494  :                 else
; 495  :                 {
; 496  :                 }
; 497  :             }
; 498  :             else
; 499  :             {
; 500  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 501  :                 {
; 502  :                     state.SIGN = 1;
; 503  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 504  :                 }
; 505  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 506  :                 {
; 507  :                     state.SIGN = -1;
; 508  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 509  :                 }
; 510  :                 else
; 511  :                 {
; 512  :                 }
; 513  :             }
; 514  :         }
; 515  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 516  :         {
; 517  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 518  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 519  :             {
; 520  :                 state.SIGN = 1;
; 521  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 522  :             }
; 523  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 524  :             {
; 525  :                 state.SIGN = -1;
; 526  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 527  :             }
; 528  :             else
; 529  :             {
; 530  :             }
; 531  :         }
; 532  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 533  :         {
; 534  :             state.SIGN = 1;
; 535  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 536  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 537  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 538  :         }
; 539  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 540  :         {
; 541  :             state.SIGN = -1;
; 542  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 543  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 544  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 545  :         }
; 546  :         else
; 547  :         {
; 548  :         }
; 549  :     }
; 550  :     else
; 551  :         return (0);
; 552  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	DWORD PTR _state$[ebp], esi
$LN36@ParseAsDec:
	movzx	eax, WORD PTR [esi]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 4
	test	eax, eax
	js	SHORT $LN12@ParseAsDec
$LN188@ParseAsDec:
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsIntegerPartNumberSequence
	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
$LN12@ParseAsDec:
	test	bl, 32					; 00000020H
	je	$LN112@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+44]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN112@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp+52]
	lea	eax, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], eax
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
	jmp	$LN112@ParseAsDec
$LN10@ParseAsDec:

; 246  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)
; 247  :                 ParseAsIntegerPartNumberSequence(&state);
; 248  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))
; 249  :             {
; 250  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 251  :                 ParseAsFractionPartNumberSequence(&state);
; 252  :             }
; 253  :         }
; 254  :         else
; 255  :         {
; 256  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)

	movzx	eax, WORD PTR [esi]
	mov	ecx, eax

; 129  :     if (c >= L'0' && c <= L'9')

	add	eax, -48				; ffffffd0H
	cmp	ax, 9
	ja	SHORT $LN14@ParseAsDec

; 246  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)
; 247  :                 ParseAsIntegerPartNumberSequence(&state);
; 248  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))
; 249  :             {
; 250  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 251  :                 ParseAsFractionPartNumberSequence(&state);
; 252  :             }
; 253  :         }
; 254  :         else
; 255  :         {
; 256  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)

	cmp	ecx, 48					; 00000030H
	jb	SHORT $LN14@ParseAsDec

; 257  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsIntegerPartNumberSequence
	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
$LN14@ParseAsDec:

; 258  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	SHORT $LN15@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+44]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@ParseAsDec

; 259  :             {
; 260  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+52]
	lea	eax, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], eax

; 261  :                 ParseAsFractionPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
$LN15@ParseAsDec:

; 475  :     {
; 476  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 477  :         ParseAsFractionPartNumberSequence(&state);
; 478  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')
; 479  :         {
; 480  :             state.IN_PTR += 1;
; 481  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 482  :             {
; 483  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 484  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 485  :                 {
; 486  :                     state.SIGN = 1;
; 487  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 488  :                 }
; 489  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 490  :                 {
; 491  :                     state.SIGN = -1;
; 492  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 493  :                 }
; 494  :                 else
; 495  :                 {
; 496  :                 }
; 497  :             }
; 498  :             else
; 499  :             {
; 500  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 501  :                 {
; 502  :                     state.SIGN = 1;
; 503  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 504  :                 }
; 505  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 506  :                 {
; 507  :                     state.SIGN = -1;
; 508  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 509  :                 }
; 510  :                 else
; 511  :                 {
; 512  :                 }
; 513  :             }
; 514  :         }
; 515  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 516  :         {
; 517  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 518  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 519  :             {
; 520  :                 state.SIGN = 1;
; 521  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 522  :             }
; 523  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 524  :             {
; 525  :                 state.SIGN = -1;
; 526  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 527  :             }
; 528  :             else
; 529  :             {
; 530  :             }
; 531  :         }
; 532  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 533  :         {
; 534  :             state.SIGN = 1;
; 535  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 536  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 537  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 538  :         }
; 539  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 540  :         {
; 541  :             state.SIGN = -1;
; 542  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 543  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 544  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 545  :         }
; 546  :         else
; 547  :         {
; 548  :         }
; 549  :     }
; 550  :     else
; 551  :         return (0);
; 552  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	test	bl, 8
	je	$LN112@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+20]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp+28]
	mov	BYTE PTR _state$[ebp+8], 1
	jmp	$LN179@ParseAsDec
$LN16@ParseAsDec:
	lea	eax, DWORD PTR _state$[ebp+32]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN112@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp+40]
	mov	BYTE PTR _state$[ebp+8], -1
	jmp	$LN179@ParseAsDec
$LN3@ParseAsDec:

; 262  :             }
; 263  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 264  :             {
; 265  :                 state.SIGN = 1;
; 266  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 267  :             }
; 268  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 269  :             {
; 270  :                 state.SIGN = -1;
; 271  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 272  :             }
; 273  :             else
; 274  :             {
; 275  :             }
; 276  :         }
; 277  :     }
; 278  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && *state.IN_PTR == L'(')

	test	bl, 16					; 00000010H
	je	$LN20@ParseAsDec
	cmp	WORD PTR [esi], 40			; 00000028H
	jne	$LN20@ParseAsDec

; 279  :     {
; 280  :         state.SIGN = -1;
; 281  :         state.IN_PTR += 1;

	add	esi, 2
	mov	BYTE PTR _state$[ebp+8], -1
	mov	DWORD PTR _state$[ebp], esi

; 282  : 
; 283  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN22@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+10]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@ParseAsDec

; 284  :         {
; 285  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 286  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')

	cmp	DWORD PTR tv1210[ebp], 0
	mov	eax, DWORD PTR _state$[ebp+16]
	lea	esi, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], esi
	je	SHORT $LN24@ParseAsDec
	cmp	WORD PTR [esi], 32			; 00000020H
	jne	SHORT $LN24@ParseAsDec

; 287  :                 state.IN_PTR += 1;

	add	esi, 2
	mov	DWORD PTR _state$[ebp], esi
$LN24@ParseAsDec:

; 288  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)

	movzx	eax, WORD PTR [esi]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 4
	test	eax, eax
	js	SHORT $LN25@ParseAsDec

; 289  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsIntegerPartNumberSequence
	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
$LN25@ParseAsDec:

; 290  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	$LN30@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+44]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN30@ParseAsDec

; 291  :             {
; 292  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+52]
	lea	eax, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], eax

; 293  :                 ParseAsFractionPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence

; 294  :             }
; 295  :         }

	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
	jmp	$LN30@ParseAsDec
$LN22@ParseAsDec:

; 296  :         else
; 297  :         {
; 298  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)

	movzx	ecx, WORD PTR [esi]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN27@ParseAsDec

; 296  :         else
; 297  :         {
; 298  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)

	cmp	ecx, 48					; 00000030H
	jb	SHORT $LN27@ParseAsDec

; 299  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsIntegerPartNumberSequence
	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
$LN27@ParseAsDec:

; 300  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	SHORT $LN28@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+44]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN28@ParseAsDec

; 301  :             {
; 302  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+52]
	lea	eax, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], eax

; 303  :                 ParseAsFractionPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
$LN28@ParseAsDec:

; 304  :             }
; 305  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	test	bl, 2
	je	SHORT $LN30@ParseAsDec
	cmp	WORD PTR [esi], 32			; 00000020H
	jne	SHORT $LN30@ParseAsDec

; 306  :             {
; 307  :                 state.IN_PTR += 1;

	add	esi, 2
	mov	DWORD PTR _state$[ebp], esi

; 308  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	SHORT $LN30@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+10]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN30@ParseAsDec

; 309  :                     state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+16]
	lea	esi, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], esi
$LN30@ParseAsDec:

; 310  :             }
; 311  :         }
; 312  :         if (*state.IN_PTR != L')')

	cmp	WORD PTR [esi], 41			; 00000029H
	jne	$LN87@ParseAsDec

; 313  :             return (0);
; 314  :         state.IN_PTR += 1;

	add	esi, 2

; 315  :     }

	jmp	$LN180@ParseAsDec
$LN20@ParseAsDec:

; 316  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 4
	je	$LN46@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+20]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN32@ParseAsDec

; 317  :     {
; 318  :         state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1
$LN200@ParseAsDec:

; 475  :     {
; 476  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 477  :         ParseAsFractionPartNumberSequence(&state);
; 478  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')
; 479  :         {
; 480  :             state.IN_PTR += 1;
; 481  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 482  :             {
; 483  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 484  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 485  :                 {
; 486  :                     state.SIGN = 1;
; 487  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 488  :                 }
; 489  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 490  :                 {
; 491  :                     state.SIGN = -1;
; 492  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 493  :                 }
; 494  :                 else
; 495  :                 {
; 496  :                 }
; 497  :             }
; 498  :             else
; 499  :             {
; 500  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 501  :                 {
; 502  :                     state.SIGN = 1;
; 503  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 504  :                 }
; 505  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 506  :                 {
; 507  :                     state.SIGN = -1;
; 508  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 509  :                 }
; 510  :                 else
; 511  :                 {
; 512  :                 }
; 513  :             }
; 514  :         }
; 515  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 516  :         {
; 517  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 518  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 519  :             {
; 520  :                 state.SIGN = 1;
; 521  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 522  :             }
; 523  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 524  :             {
; 525  :                 state.SIGN = -1;
; 526  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 527  :             }
; 528  :             else
; 529  :             {
; 530  :             }
; 531  :         }
; 532  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 533  :         {
; 534  :             state.SIGN = 1;
; 535  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 536  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 537  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 538  :         }
; 539  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 540  :         {
; 541  :             state.SIGN = -1;
; 542  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 543  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 544  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 545  :         }
; 546  :         else
; 547  :         {
; 548  :         }
; 549  :     }
; 550  :     else
; 551  :         return (0);
; 552  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	eax, DWORD PTR _state$[ebp+28]
	lea	esi, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], esi
	test	edi, edi
	je	SHORT $LN34@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+10]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN34@ParseAsDec
	cmp	DWORD PTR tv1210[ebp], 0
	mov	eax, DWORD PTR _state$[ebp+16]
	lea	esi, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], esi
	je	$LN36@ParseAsDec
	cmp	WORD PTR [esi], 32			; 00000020H
	jne	$LN36@ParseAsDec
	add	esi, 2
	jmp	$LN190@ParseAsDec
$LN34@ParseAsDec:
	movzx	ecx, WORD PTR [esi]
	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN39@ParseAsDec
	cmp	ecx, 48					; 00000030H
	jb	SHORT $LN39@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsIntegerPartNumberSequence
	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
$LN39@ParseAsDec:
	test	bl, 32					; 00000020H
	je	SHORT $LN40@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+44]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN40@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp+52]
	lea	eax, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], eax
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
$LN40@ParseAsDec:
	test	bl, 2
	je	$LN41@ParseAsDec
	cmp	WORD PTR [esi], 32			; 00000020H
	jne	$LN41@ParseAsDec
	add	esi, 2
	jmp	$LN183@ParseAsDec
$LN32@ParseAsDec:

; 319  :         state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 320  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 321  :         {
; 322  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 323  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')
; 324  :                 state.IN_PTR += 1;
; 325  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)
; 326  :                 ParseAsIntegerPartNumberSequence(&state);
; 327  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))
; 328  :             {
; 329  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 330  :                 ParseAsFractionPartNumberSequence(&state);
; 331  :             }
; 332  :         }
; 333  :         else
; 334  :         {
; 335  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)
; 336  :                 ParseAsIntegerPartNumberSequence(&state);
; 337  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))
; 338  :             {
; 339  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 340  :                 ParseAsFractionPartNumberSequence(&state);
; 341  :             }
; 342  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')
; 343  :             {
; 344  :                 state.IN_PTR += 1;
; 345  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 346  :                     state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 347  :             }
; 348  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 349  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 350  :             else
; 351  :             {
; 352  :             }
; 353  :         }
; 354  :     }
; 355  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	eax, DWORD PTR _state$[ebp+32]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN46@ParseAsDec

; 356  :     {
; 357  :         state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 358  :         state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 359  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 360  :         {
; 361  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 362  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')
; 363  :                 state.IN_PTR += 1;
; 364  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)
; 365  :                 ParseAsIntegerPartNumberSequence(&state);
; 366  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))
; 367  :             {
; 368  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 369  :                 ParseAsFractionPartNumberSequence(&state);
; 370  :             }
; 371  :         }
; 372  :         else
; 373  :         {
; 374  :             if (ParseDecimalDigit(*state.IN_PTR) >= 0)
; 375  :                 ParseAsIntegerPartNumberSequence(&state);
; 376  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))
; 377  :             {
; 378  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 379  :                 ParseAsFractionPartNumberSequence(&state);
; 380  :             }
; 381  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')
; 382  :             {
; 383  :                 state.IN_PTR += 1;
; 384  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 385  :                     state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 386  :             }

	jmp	$LN200@ParseAsDec
$LN46@ParseAsDec:

; 387  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 388  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 389  :             else
; 390  :             {
; 391  :             }
; 392  :         }
; 393  :     }
; 394  :     else if (ParseDecimalDigit(*state.IN_PTR) >= 0)

	movzx	ecx, WORD PTR [esi]

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN146@ParseAsDec

; 130  :         return (c - L'0');

	add	ecx, -48				; ffffffd0H
	jmp	SHORT $LN145@ParseAsDec
$LN146@ParseAsDec:

; 131  :     return (-1);

	or	ecx, -1
$LN145@ParseAsDec:

; 387  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 388  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 389  :             else
; 390  :             {
; 391  :             }
; 392  :         }
; 393  :     }
; 394  :     else if (ParseDecimalDigit(*state.IN_PTR) >= 0)

	mov	eax, ebx
	and	eax, 32					; 00000020H
	mov	DWORD PTR tv1191[ebp], eax
	test	ecx, ecx
	js	$LN60@ParseAsDec

; 395  :     {
; 396  :         ParseAsIntegerPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsIntegerPartNumberSequence

; 397  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
	cmp	DWORD PTR tv1191[ebp], 0
	je	SHORT $LN62@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+44]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN62@ParseAsDec
$LN205@ParseAsDec:

; 475  :     {
; 476  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 477  :         ParseAsFractionPartNumberSequence(&state);
; 478  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')
; 479  :         {
; 480  :             state.IN_PTR += 1;
; 481  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 482  :             {
; 483  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 484  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 485  :                 {
; 486  :                     state.SIGN = 1;
; 487  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 488  :                 }
; 489  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 490  :                 {
; 491  :                     state.SIGN = -1;
; 492  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 493  :                 }
; 494  :                 else
; 495  :                 {
; 496  :                 }
; 497  :             }
; 498  :             else
; 499  :             {
; 500  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 501  :                 {
; 502  :                     state.SIGN = 1;
; 503  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 504  :                 }
; 505  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 506  :                 {
; 507  :                     state.SIGN = -1;
; 508  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 509  :                 }
; 510  :                 else
; 511  :                 {
; 512  :                 }
; 513  :             }
; 514  :         }
; 515  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 516  :         {
; 517  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 518  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 519  :             {
; 520  :                 state.SIGN = 1;
; 521  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 522  :             }
; 523  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 524  :             {
; 525  :                 state.SIGN = -1;
; 526  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 527  :             }
; 528  :             else
; 529  :             {
; 530  :             }
; 531  :         }
; 532  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 533  :         {
; 534  :             state.SIGN = 1;
; 535  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 536  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 537  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 538  :         }
; 539  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 540  :         {
; 541  :             state.SIGN = -1;
; 542  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 543  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 544  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 545  :         }
; 546  :         else
; 547  :         {
; 548  :         }
; 549  :     }
; 550  :     else
; 551  :         return (0);
; 552  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	eax, DWORD PTR _state$[ebp+52]
	lea	eax, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], eax
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	mov	esi, DWORD PTR _state$[ebp]
	add	esp, 4
$LN62@ParseAsDec:
	test	bl, 2
	je	SHORT $LN63@ParseAsDec
	cmp	WORD PTR [esi], 32			; 00000020H
	jne	SHORT $LN63@ParseAsDec
	add	esi, 2
	mov	DWORD PTR _state$[ebp], esi
	test	edi, edi
	je	$LN15@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+10]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN15@ParseAsDec
$LN187@ParseAsDec:
	mov	eax, DWORD PTR _state$[ebp+16]
	lea	esi, DWORD PTR [esi+eax*2]
	mov	DWORD PTR _state$[ebp], esi
	jmp	$LN15@ParseAsDec
$LN63@ParseAsDec:
	test	edi, edi
	je	SHORT $LN75@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+10]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN187@ParseAsDec
$LN75@ParseAsDec:
	test	bl, 8
	je	$LN112@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+20]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN107@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp+28]
	mov	BYTE PTR _state$[ebp+8], 1
	jmp	SHORT $LN184@ParseAsDec
$LN60@ParseAsDec:

; 398  :         {
; 399  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 400  :             ParseAsFractionPartNumberSequence(&state);
; 401  :         }
; 402  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')
; 403  :         {
; 404  :             state.IN_PTR += 1;
; 405  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 406  :             {
; 407  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 408  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 409  :                 {
; 410  :                     state.SIGN = 1;
; 411  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 412  :                 }
; 413  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 414  :                 {
; 415  :                     state.SIGN = -1;
; 416  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 417  :                 }
; 418  :                 else
; 419  :                 {
; 420  :                 }
; 421  :             }
; 422  :             else
; 423  :             {
; 424  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 425  :                 {
; 426  :                     state.SIGN = 1;
; 427  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 428  :                 }
; 429  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 430  :                 {
; 431  :                     state.SIGN = -1;
; 432  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 433  :                 }
; 434  :                 else
; 435  :                 {
; 436  :                 }
; 437  :             }
; 438  :         }
; 439  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 440  :         {
; 441  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 442  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 443  :             {
; 444  :                 state.SIGN = 1;
; 445  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 446  :             }
; 447  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 448  :             {
; 449  :                 state.SIGN = -1;
; 450  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 451  :             }
; 452  :             else
; 453  :             {
; 454  :             }
; 455  :         }
; 456  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 457  :         {
; 458  :             state.SIGN = 1;
; 459  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 460  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 461  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 462  :         }
; 463  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 464  :         {
; 465  :             state.SIGN = -1;
; 466  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 467  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 468  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 469  :         }
; 470  :         else
; 471  :         {
; 472  :         }
; 473  :     }
; 474  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	eax, eax
	je	SHORT $LN87@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+44]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	jne	$LN205@ParseAsDec
$LN87@ParseAsDec:
	pop	edi

; 559  :     return (1);
; 560  : }

	pop	esi
	xor	eax, eax
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN107@ParseAsDec:

; 475  :     {
; 476  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 477  :         ParseAsFractionPartNumberSequence(&state);
; 478  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')
; 479  :         {
; 480  :             state.IN_PTR += 1;
; 481  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 482  :             {
; 483  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 484  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 485  :                 {
; 486  :                     state.SIGN = 1;
; 487  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 488  :                 }
; 489  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 490  :                 {
; 491  :                     state.SIGN = -1;
; 492  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 493  :                 }
; 494  :                 else
; 495  :                 {
; 496  :                 }
; 497  :             }
; 498  :             else
; 499  :             {
; 500  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 501  :                 {
; 502  :                     state.SIGN = 1;
; 503  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 504  :                 }
; 505  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 506  :                 {
; 507  :                     state.SIGN = -1;
; 508  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 509  :                 }
; 510  :                 else
; 511  :                 {
; 512  :                 }
; 513  :             }
; 514  :         }
; 515  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 516  :         {
; 517  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 518  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 519  :             {
; 520  :                 state.SIGN = 1;
; 521  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 522  :             }
; 523  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 524  :             {
; 525  :                 state.SIGN = -1;
; 526  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 527  :             }
; 528  :             else
; 529  :             {
; 530  :             }
; 531  :         }
; 532  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))
; 533  :         {
; 534  :             state.SIGN = 1;
; 535  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 536  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 537  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 538  :         }
; 539  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))
; 540  :         {
; 541  :             state.SIGN = -1;
; 542  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 543  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))
; 544  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 545  :         }
; 546  :         else
; 547  :         {
; 548  :         }
; 549  :     }
; 550  :     else
; 551  :         return (0);
; 552  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	lea	eax, DWORD PTR _state$[ebp+32]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN112@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp+40]
	mov	BYTE PTR _state$[ebp+8], -1
$LN184@ParseAsDec:
	lea	esi, DWORD PTR [esi+eax*2]
$LN183@ParseAsDec:
	mov	DWORD PTR _state$[ebp], esi
$LN41@ParseAsDec:
	test	edi, edi
	je	SHORT $LN112@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+10]
	push	eax
	push	esi
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN112@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp+16]
$LN179@ParseAsDec:
	lea	esi, DWORD PTR [esi+eax*2]
$LN180@ParseAsDec:
	mov	DWORD PTR _state$[ebp], esi
$LN112@ParseAsDec:
	test	bl, 2
	je	SHORT $LN178@ParseAsDec

; 110  :         switch (*state->IN_PTR)

	movzx	eax, WORD PTR [esi]
	cmp	eax, 9
	jb	SHORT $LN178@ParseAsDec
	npad	3
$LL149@ParseAsDec:
	cmp	eax, 13					; 0000000dH
	jbe	SHORT $LN154@ParseAsDec
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN178@ParseAsDec
$LN154@ParseAsDec:

; 111  :         {
; 112  :         case L' ':
; 113  :         case L'\t':
; 114  :         case L'\n':
; 115  :         case L'\r':
; 116  :         case L'\f':
; 117  :         case L'\v':
; 118  :             break;
; 119  : 
; 120  :         default:
; 121  :             return;
; 122  :         }
; 123  :         state->IN_PTR += 1;

	add	esi, 2
	mov	DWORD PTR _state$[ebp], esi
	movzx	eax, WORD PTR [esi]
	cmp	eax, 9
	jae	SHORT $LL149@ParseAsDec
$LN178@ParseAsDec:

; 553  :         SkipSpace(&state);
; 554  :     if (*state.IN_PTR != L'\0')

	cmp	WORD PTR [esi], 0
	jne	$LN87@ParseAsDec

; 100  :     *state->INT_PART_PTR = L'\0';

	mov	eax, DWORD PTR _state$[ebp+80]
	xor	ecx, ecx
	mov	WORD PTR [eax], cx

; 101  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR _state$[ebp+4], 32		; 00000020H
	je	SHORT $LN158@ParseAsDec

; 102  :         *state->FRAC_PART_PTR = L'\0';

	mov	eax, DWORD PTR _state$[ebp+84]
	mov	WORD PTR [eax], cx
$LN158@ParseAsDec:

; 555  :         return (0);
; 556  :     FinalizeParserState(&state);
; 557  :     // 明示的に負の符号が与えられていた場合は負数、そうではない場合は正数とみなす
; 558  :     *sign = state.SIGN < 0 ? -1 : 1;

	cmp	BYTE PTR _state$[ebp+8], 0
	mov	ecx, DWORD PTR _sign$GSCopy$1$[ebp]
	setge	al
	pop	edi

; 559  :     return (1);
; 560  : }

	pop	esi
	pop	ebx
	lea	eax, DWORD PTR [eax*2-1]
	mov	BYTE PTR [ecx], al
	mov	eax, 1
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_ParseAsDecimalNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _ParseAsFractionPartNumberSequence
_TEXT	SEGMENT
_state$ = 8						; size = 4
_ParseAsFractionPartNumberSequence PROC			; COMDAT

; 173  : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _state$[ebp]
	push	esi
	push	edi
$LN21@ParseAsFra:

; 174  :     for (;;)
; 175  :     {
; 176  :         if (ParseDecimalDigit(*state->IN_PTR) >= 0)

	mov	ecx, DWORD PTR [eax]
	movzx	esi, WORD PTR [ecx]
	mov	edx, esi

; 129  :     if (c >= L'0' && c <= L'9')

	lea	ecx, DWORD PTR [esi-48]
	movzx	edi, cx
	cmp	cx, 9
	ja	SHORT $LN5@ParseAsFra

; 174  :     for (;;)
; 175  :     {
; 176  :         if (ParseDecimalDigit(*state->IN_PTR) >= 0)

	cmp	edx, 48					; 00000030H
	jb	SHORT $LN5@ParseAsFra

; 177  :         {
; 178  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	ecx, DWORD PTR [eax+84]
	mov	WORD PTR [ecx], si

; 179  :             state->FRAC_PART_PTR += 1;

	add	DWORD PTR [eax+84], 2

; 180  :             state->IN_PTR += 1;

	add	DWORD PTR [eax], 2

; 181  :         }

	jmp	SHORT $LN21@ParseAsFra
$LN5@ParseAsFra:

; 182  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit( *state->IN_PTR) >= 0)

	test	DWORD PTR [eax+4], 512			; 00000200H
	je	SHORT $LN16@ParseAsFra
	mov	edx, esi

; 136  :     if (c >= L'0' && c <= L'9')

	cmp	edi, 9
	ja	SHORT $LN14@ParseAsFra

; 137  :         return (c - L'0');

	lea	ecx, DWORD PTR [edx-48]
	jmp	SHORT $LN13@ParseAsFra
$LN14@ParseAsFra:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	ecx, DWORD PTR [edx-97]
	cmp	cx, 5
	ja	SHORT $LN15@ParseAsFra

; 140  :         return (c - L'a' + 10);

	lea	ecx, DWORD PTR [edx-87]
	jmp	SHORT $LN13@ParseAsFra
$LN15@ParseAsFra:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	ecx, DWORD PTR [edx-65]
	cmp	cx, 5
	ja	SHORT $LN16@ParseAsFra

; 143  :         return (c - L'A' + 10);

	lea	ecx, DWORD PTR [edx-55]
$LN13@ParseAsFra:

; 182  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit( *state->IN_PTR) >= 0)

	test	ecx, ecx
	js	SHORT $LN16@ParseAsFra

; 183  :         {
; 184  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	ecx, DWORD PTR [eax+84]
	mov	WORD PTR [ecx], si

; 185  :             state->FRAC_PART_PTR += 1;

	add	DWORD PTR [eax+84], 2

; 186  :             state->IN_PTR += 1;

	add	DWORD PTR [eax], 2

; 187  :         }
; 188  :         else
; 189  :             break;
; 190  :     }

	jmp	SHORT $LN21@ParseAsFra
$LN16@ParseAsFra:
	pop	edi

; 191  : }

	pop	esi
	pop	ebp
	ret	0
_ParseAsFractionPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _ParseAsIntegerPartNumberSequence
_TEXT	SEGMENT
tv610 = 8						; size = 4
_state$ = 8						; size = 4
_ParseAsIntegerPartNumberSequence PROC			; COMDAT

; 148  : {

	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR _state$[ebp]
	push	ebx
	push	esi
	push	edi
$LN48@ParseAsInt:

; 149  :     for (;;)
; 150  :     {
; 151  :         if (ParseDecimalDigit(*state->IN_PTR) >= 0)

	mov	esi, DWORD PTR [edx]
	npad	5
$LL2@ParseAsInt:
	movzx	edi, WORD PTR [esi]
	mov	ecx, edi

; 129  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [edi-48]
	movzx	ebx, ax
	mov	DWORD PTR tv610[ebp], ebx
	cmp	ax, 9
	ja	SHORT $LN5@ParseAsInt

; 149  :     for (;;)
; 150  :     {
; 151  :         if (ParseDecimalDigit(*state->IN_PTR) >= 0)

	cmp	ecx, 48					; 00000030H
	jb	SHORT $LN5@ParseAsInt

; 152  :         {
; 153  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	eax, DWORD PTR [edx+80]
	mov	WORD PTR [eax], di

; 154  :             state->INT_PART_PTR += 1;

	add	DWORD PTR [edx+80], 2

; 155  :             state->IN_PTR += 1;

	add	DWORD PTR [edx], 2

; 156  :         }

	jmp	SHORT $LN48@ParseAsInt
$LN5@ParseAsInt:

; 157  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit(*state->IN_PTR) >= 0)

	mov	ebx, DWORD PTR [edx+4]
	test	ebx, 512				; 00000200H
	je	SHORT $LN7@ParseAsInt

; 136  :     if (c >= L'0' && c <= L'9')

	cmp	WORD PTR tv610[ebp], 9

; 157  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit(*state->IN_PTR) >= 0)

	mov	ecx, edi

; 136  :     if (c >= L'0' && c <= L'9')

	ja	SHORT $LN18@ParseAsInt

; 137  :         return (c - L'0');

	lea	eax, DWORD PTR [ecx-48]
	jmp	SHORT $LN17@ParseAsInt
$LN18@ParseAsInt:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [ecx-97]
	cmp	ax, 5
	ja	SHORT $LN19@ParseAsInt

; 140  :         return (c - L'a' + 10);

	lea	eax, DWORD PTR [ecx-87]
	jmp	SHORT $LN17@ParseAsInt
$LN19@ParseAsInt:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [ecx-65]
	cmp	ax, 5
	ja	SHORT $LN7@ParseAsInt

; 143  :         return (c - L'A' + 10);

	lea	eax, DWORD PTR [ecx-55]
$LN17@ParseAsInt:

; 157  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit(*state->IN_PTR) >= 0)

	test	eax, eax
	js	SHORT $LN7@ParseAsInt

; 158  :         {
; 159  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	eax, DWORD PTR [edx+80]
	mov	WORD PTR [eax], di

; 160  :             state->INT_PART_PTR += 1;

	add	DWORD PTR [edx+80], 2

; 161  :             state->IN_PTR += 1;

	add	DWORD PTR [edx], 2

; 162  :         }

	jmp	SHORT $LN48@ParseAsInt
$LN7@ParseAsInt:

; 163  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && StartsWith(state->IN_PTR, state->GROUP_SEPARATOR))

	test	bl, 64					; 00000040H
	je	SHORT $LN36@ParseAsInt

; 58   :     while (*b != L'\0')

	movzx	ecx, WORD PTR [edx+56]

; 163  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && StartsWith(state->IN_PTR, state->GROUP_SEPARATOR))

	lea	eax, DWORD PTR [edx+56]

; 58   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN24@ParseAsInt
	mov	edi, ecx
	sub	esi, eax
$LL23@ParseAsInt:

; 59   :     {
; 60   :         if (*a != *b)

	cmp	WORD PTR [esi+eax], di
	jne	SHORT $LN42@ParseAsInt

; 61   :             return (0);
; 62   :         ++a;
; 63   :         ++b;

	movzx	ecx, WORD PTR [eax+2]
	add	eax, 2
	mov	edi, ecx
	test	cx, cx
	jne	SHORT $LL23@ParseAsInt
$LN24@ParseAsInt:

; 164  :             state->IN_PTR += state->GROUP_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR [edx+64]
	add	eax, eax
	add	DWORD PTR [edx], eax

; 167  :         else
; 168  :             break;
; 169  :     }

	jmp	$LN48@ParseAsInt
$LN42@ParseAsInt:

; 165  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && state->SECONDARY_GROUP_SEPARATOR_LENGTH > 0 && StartsWith(state->IN_PTR, state->SECONDARY_GROUP_SEPARATOR))

	mov	ebx, DWORD PTR [edx+76]
	test	ebx, ebx
	jle	SHORT $LN36@ParseAsInt

; 58   :     while (*b != L'\0')

	movzx	eax, WORD PTR [edx+68]

; 165  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && state->SECONDARY_GROUP_SEPARATOR_LENGTH > 0 && StartsWith(state->IN_PTR, state->SECONDARY_GROUP_SEPARATOR))

	lea	ecx, DWORD PTR [edx+68]
	mov	edi, DWORD PTR [edx]

; 58   :     while (*b != L'\0')

	test	ax, ax
	je	SHORT $LN29@ParseAsInt
	mov	esi, eax
	sub	edi, ecx
	npad	4
$LL28@ParseAsInt:

; 59   :     {
; 60   :         if (*a != *b)

	cmp	WORD PTR [edi+ecx], si
	jne	SHORT $LN36@ParseAsInt

; 61   :             return (0);
; 62   :         ++a;
; 63   :         ++b;

	movzx	eax, WORD PTR [ecx+2]
	add	ecx, 2
	mov	esi, eax
	test	ax, ax
	jne	SHORT $LL28@ParseAsInt
	mov	edi, DWORD PTR [edx]
$LN29@ParseAsInt:

; 166  :             state->IN_PTR += state->SECONDARY_GROUP_SEPARATOR_LENGTH;

	lea	esi, DWORD PTR [edi+ebx*2]
	mov	DWORD PTR [edx], esi
	jmp	$LL2@ParseAsInt
$LN36@ParseAsInt:
	pop	edi

; 170  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_ParseAsIntegerPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _ParseHexDigit
_TEXT	SEGMENT
_c$ = 8							; size = 2
_ParseHexDigit PROC					; COMDAT

; 135  : {

	push	ebp
	mov	ebp, esp

; 136  :     if (c >= L'0' && c <= L'9')

	mov	ecx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN2@ParseHexDi

; 137  :         return (c - L'0');

	movzx	eax, cx
	sub	eax, 48					; 00000030H

; 145  : }

	pop	ebp
	ret	0
$LN2@ParseHexDi:

; 138  : 
; 139  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [ecx-97]
	cmp	ax, 5
	ja	SHORT $LN3@ParseHexDi

; 140  :         return (c - L'a' + 10);

	movzx	eax, cx
	sub	eax, 87					; 00000057H

; 145  : }

	pop	ebp
	ret	0
$LN3@ParseHexDi:

; 141  : 
; 142  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [ecx-65]
	cmp	ax, 5
	ja	SHORT $LN4@ParseHexDi

; 143  :         return (c - L'A' + 10);

	movzx	eax, cx
	sub	eax, 55					; 00000037H

; 145  : }

	pop	ebp
	ret	0
$LN4@ParseHexDi:

; 144  :     return (-1);

	or	eax, -1

; 145  : }

	pop	ebp
	ret	0
_ParseHexDigit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _ParseDecimalDigit
_TEXT	SEGMENT
_c$ = 8							; size = 2
_ParseDecimalDigit PROC					; COMDAT

; 128  : {

	push	ebp
	mov	ebp, esp

; 129  :     if (c >= L'0' && c <= L'9')

	mov	ecx, DWORD PTR _c$[ebp]
	lea	eax, DWORD PTR [ecx-48]
	cmp	ax, 9
	ja	SHORT $LN2@ParseDecim

; 130  :         return (c - L'0');

	movzx	eax, cx
	sub	eax, 48					; 00000030H

; 132  : }

	pop	ebp
	ret	0
$LN2@ParseDecim:

; 131  :     return (-1);

	or	eax, -1

; 132  : }

	pop	ebp
	ret	0
_ParseDecimalDigit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _SkipSpace
_TEXT	SEGMENT
_state$ = 8						; size = 4
_SkipSpace PROC						; COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp

; 108  :     for (;;)
; 109  :     {
; 110  :         switch (*state->IN_PTR)

	mov	ecx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [ecx]
	movzx	eax, WORD PTR [eax]
	cmp	eax, 9
	jb	SHORT $LN11@SkipSpace
$LL2@SkipSpace:
	cmp	eax, 13					; 0000000dH
	jbe	SHORT $LN7@SkipSpace
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN11@SkipSpace
$LN7@SkipSpace:

; 111  :         {
; 112  :         case L' ':
; 113  :         case L'\t':
; 114  :         case L'\n':
; 115  :         case L'\r':
; 116  :         case L'\f':
; 117  :         case L'\v':
; 118  :             break;
; 119  : 
; 120  :         default:
; 121  :             return;
; 122  :         }
; 123  :         state->IN_PTR += 1;

	add	DWORD PTR [ecx], 2
	mov	eax, DWORD PTR [ecx]
	movzx	eax, WORD PTR [eax]
	cmp	eax, 9
	jae	SHORT $LL2@SkipSpace
$LN11@SkipSpace:

; 124  :     }
; 125  : }

	pop	ebp
	ret	0
_SkipSpace ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _FinalizeParserState
_TEXT	SEGMENT
_state$ = 8						; size = 4
_FinalizeParserState PROC				; COMDAT

; 99   : {

	push	ebp
	mov	ebp, esp

; 100  :     *state->INT_PART_PTR = L'\0';

	mov	ecx, DWORD PTR _state$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR [ecx+80]
	mov	WORD PTR [eax], dx

; 101  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR [ecx+4], 32			; 00000020H
	je	SHORT $LN2@FinalizePa

; 102  :         *state->FRAC_PART_PTR = L'\0';

	mov	eax, DWORD PTR [ecx+84]
	xor	ecx, ecx
	mov	WORD PTR [eax], cx
$LN2@FinalizePa:

; 103  : }

	pop	ebp
	ret	0
_FinalizeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _InitializeParserState
_TEXT	SEGMENT
_state$ = 8						; size = 4
_in_ptr$ = 12						; size = 4
_number_styles$ = 16					; size = 4
_format_option$ = 20					; size = 4
_int_part_buf$ = 24					; size = 4
_frac_part_buf$ = 28					; size = 4
_InitializeParserState PROC				; COMDAT

; 69   : {

	push	ebp
	mov	ebp, esp

; 70   :     state->IN_PTR = in_ptr;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _in_ptr$[ebp]

; 71   :     state->NUMBER_STYLES = number_styles;

	mov	ecx, DWORD PTR _number_styles$[ebp]
	push	ebx

; 72   :     state->SIGN = 0;
; 73   :     lstrcpyW(state->CURRENCY_SYMBOL, format_option->CurrencySymbol);

	mov	ebx, DWORD PTR __imp__lstrcpyW@8
	push	esi
	mov	DWORD PTR [edx], eax
	lea	esi, DWORD PTR [edx+10]
	mov	eax, DWORD PTR _format_option$[ebp]
	push	edi
	add	eax, 144				; 00000090H
	mov	DWORD PTR [edx+4], ecx
	push	eax
	push	esi
	mov	BYTE PTR [edx+8], 0
	call	ebx

; 74   :     state->CURRENCY_SYMBOL_LENGTH = lstrlenW(state->CURRENCY_SYMBOL);

	mov	edi, DWORD PTR __imp__lstrlenW@4
	push	esi
	call	edi
	mov	esi, DWORD PTR _state$[ebp]
	mov	DWORD PTR [esi+16], eax

; 75   :     lstrcpyW(state->POSITIVE_SIGN, format_option->PositiveSign);

	add	esi, 20					; 00000014H
	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 156				; 0000009cH
	push	eax
	push	esi
	call	ebx

; 76   :     state->POSITIVE_SIGN_LENGTH = lstrlenW(state->POSITIVE_SIGN);

	push	esi
	call	edi
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 77   :     lstrcpyW(state->NEGATIVE_SIGN, format_option->NegativeSign);

	lea	esi, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 150				; 00000096H
	push	eax
	push	esi
	call	ebx

; 78   :     state->NEGATIVE_SIGN_LENGTH = lstrlenW(state->NEGATIVE_SIGN);

	push	esi
	call	edi
	mov	ecx, DWORD PTR _state$[ebp]

; 79   :     lstrcpyW(state->DECIMAL_SEPARATOR, number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL ? format_option->Currency.DecimalSeparator : format_option->Number.DecimalSeparator);

	and	DWORD PTR _number_styles$[ebp], 256	; 00000100H
	mov	DWORD PTR [ecx+40], eax
	lea	esi, DWORD PTR [ecx+44]
	mov	ecx, 52					; 00000034H
	mov	eax, 4
	cmove	eax, ecx
	add	eax, DWORD PTR _format_option$[ebp]
	push	eax
	push	esi
	call	ebx

; 80   :     state->DECIMAL_SEPARATOR_LENGTH = lstrlenW(state->DECIMAL_SEPARATOR);

	push	esi
	call	edi
	mov	ecx, DWORD PTR _state$[ebp]

; 81   :     lstrcpyW(state->GROUP_SEPARATOR, number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL ? format_option->Currency.GroupSeparator: format_option->Number.GroupSeparator);

	mov	edx, 58					; 0000003aH
	cmp	DWORD PTR _number_styles$[ebp], 0
	mov	DWORD PTR [ecx+52], eax
	lea	esi, DWORD PTR [ecx+56]
	mov	eax, 10					; 0000000aH
	cmove	eax, edx
	add	eax, DWORD PTR _format_option$[ebp]
	push	eax
	push	esi
	call	ebx

; 82   :     state->GROUP_SEPARATOR_LENGTH = lstrlenW(state->GROUP_SEPARATOR);

	push	esi
	call	edi
	mov	ecx, DWORD PTR _state$[ebp]

; 83   :     if (state->GROUP_SEPARATOR[0] == L'\xa0' && state->GROUP_SEPARATOR[1] == L'\0')

	pop	edi
	mov	DWORD PTR [ecx+64], eax
	mov	eax, 160				; 000000a0H
	cmp	WORD PTR [esi], ax
	pop	esi
	pop	ebx
	jne	SHORT $LN2@Initialize
	cmp	WORD PTR [ecx+58], 0
	jne	SHORT $LN2@Initialize

; 84   :     {
; 85   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\x20';
; 86   :         state->SECONDARY_GROUP_SEPARATOR[1] = L'\0';

	xor	eax, eax
	mov	WORD PTR [ecx+70], ax

; 87   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 1;

	mov	eax, 1
	lea	edx, DWORD PTR [eax+31]

; 88   :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 89   :     else
; 90   :     {
; 91   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\0';
; 92   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 0;

	xor	eax, eax
	xor	edx, edx
$LN3@Initialize:

; 93   :     }
; 94   :     state->INT_PART_PTR = int_part_buf;

	mov	WORD PTR [ecx+68], dx
	mov	DWORD PTR [ecx+76], eax
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 95   :     state->FRAC_PART_PTR = frac_part_buf;

	mov	eax, DWORD PTR _frac_part_buf$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 96   : }

	pop	ebp
	ret	0
_InitializeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _StartsWith
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_StartsWith PROC					; COMDAT

; 57   : {

	push	ebp
	mov	ebp, esp

; 58   :     while (*b != L'\0')

	mov	eax, DWORD PTR _b$[ebp]
	push	esi
	movzx	ecx, WORD PTR [eax]
	test	cx, cx
	je	SHORT $LN3@StartsWith
	mov	esi, DWORD PTR _a$[ebp]
	mov	edx, ecx
	sub	esi, eax
$LL2@StartsWith:

; 59   :     {
; 60   :         if (*a != *b)

	cmp	WORD PTR [esi+eax], dx
	jne	SHORT $LN7@StartsWith

; 62   :         ++a;
; 63   :         ++b;

	movzx	ecx, WORD PTR [eax+2]
	add	eax, 2
	mov	edx, ecx
	test	cx, cx
	jne	SHORT $LL2@StartsWith
$LN3@StartsWith:

; 64   :     }
; 65   :     return (1);

	mov	eax, 1
	pop	esi

; 66   : }

	pop	ebp
	ret	0
$LN7@StartsWith:

; 61   :             return (0);

	xor	eax, eax
	pop	esi

; 66   : }

	pop	ebp
	ret	0
_StartsWith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLYX_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC					; COMDAT

; 329  :     {

	push	ebp
	mov	ebp, esp

; 330  : #ifdef _MSC_VER
; 331  : #ifdef _M_IX86
; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 333  : #elif defined(_M_X64)
; 334  :         return (_mulx_u64(u, v, w_hi));
; 335  : #else
; 336  : #error unknown platform
; 337  : #endif
; 338  : #elif defined(__GNUC__)
; 339  : #ifdef _M_IX86
; 340  :         _UINT32_T w_lo;
; 341  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 342  :         return (w_lo);
; 343  : #elif defined(_M_X64)
; 344  :         _UINT64_T w_lo;
; 345  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 346  :         return (w_lo);
; 347  : #else
; 348  : #error unknown platform
; 349  : #endif
; 350  : #else
; 351  : #error unknown compiler
; 352  : #endif
; 353  :     }

	pop	ebp
	ret	0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLY_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC					; COMDAT

; 291  :     {

	push	ebp
	mov	ebp, esp

; 292  : #ifdef _M_IX86
; 293  : #ifdef _MSC_VER
; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 295  : #elif defined(__GNUC__)
; 296  :         _UINT32_T w_lo;
; 297  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 298  :         return (w_lo);
; 299  : #else
; 300  : #error unknown compiler
; 301  : #endif
; 302  : #elif defined(_M_X64)
; 303  :         return (_umul128(u, v, w_hi));
; 304  : #else
; 305  : #error unknown platform
; 306  : #endif
; 307  :     }

	pop	ebp
	ret	0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADDX_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC					; COMDAT

; 235  :     {

	push	ebp
	mov	ebp, esp

; 236  : #ifdef _M_IX86
; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adcx	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 238  : #elif defined(_M_X64)
; 239  :         return (_addcarryx_u64(carry, u, v, w));
; 240  : #else
; 241  : #error unknown platform
; 242  : #endif
; 243  :     }

	pop	ebp
	ret	0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADD_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC						; COMDAT

; 207  :     {

	push	ebp
	mov	ebp, esp

; 208  : #ifdef _M_IX86
; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adc	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 210  : #elif defined(_M_X64)
; 211  :         return (_addcarry_u64(carry, u, v, w));
; 212  : #else
; 213  : #error unknown platform
; 214  : #endif
; 215  :     }

	pop	ebp
	ret	0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_SIZE PROC				; COMDAT

; 192  :     {

	push	ebp
	mov	ebp, esp

; 193  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _u$[ebp]
	xor	edx, edx
	dec	eax
	add	eax, DWORD PTR _v$[ebp]
	div	DWORD PTR _v$[ebp]

; 194  :     }

	pop	ebp
	ret	0
__DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC				; COMDAT

; 187  :     {

	push	ebp
	mov	ebp, esp

; 188  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _u$[ebp]
	xor	edx, edx
	dec	eax
	add	eax, DWORD PTR _v$[ebp]
	div	DWORD PTR _v$[ebp]

; 189  :     }

	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 176  :     {

	push	ebp
	mov	ebp, esp

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 179  :     }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	push	ebp
	mov	ebp, esp

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	esi
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	mov	edi, DWORD PTR _d$[ebp]
	rep movsd
	pop	edi
	pop	esi

; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);
; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToMULTI64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC				; COMDAT

; 389  :     {

	push	ebp
	mov	ebp, esp

; 390  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 391  :     }

	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToMULTI32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC				; COMDAT

; 383  :     {

	push	ebp
	mov	ebp, esp

; 384  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 385  :     }

	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementMULTI64Counter
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC				; COMDAT

; 367  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 368  :     }

	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementMULTI32Counter
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC				; COMDAT

; 361  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 362  :     }

	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _PMC_TryParseForSINT@20
_TEXT	SEGMENT
_no_abs$ = 8						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_PMC_TryParseForSINT@20 PROC				; COMDAT

; 1323 : {

	push	ebp
	mov	ebp, esp

; 1324 :     PMC_STATUS_CODE result;
; 1325 :     if (source == NULL)

	mov	edx, DWORD PTR _source$[ebp]
	push	esi
	test	edx, edx
	je	SHORT $LN8@PMC_TryPar

; 1326 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1327 :     if (o_sign == NULL)

	mov	eax, DWORD PTR _o_sign$[ebp]
	test	eax, eax
	je	SHORT $LN8@PMC_TryPar

; 1328 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1329 :     if (o_abs == NULL)

	mov	esi, DWORD PTR _o_abs$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_TryPar

; 1331 :     if (format_option == NULL)
; 1332 :         format_option = &default_number_format_option;
; 1333 :     NUMBER_HEADER* no_abs;
; 1334 :     if ((result = PMC_TryParse_Imp(source, number_styles, format_option, o_sign, &no_abs)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _no_abs$[ebp]
	push	ecx
	push	eax
	mov	eax, DWORD PTR _format_option$[ebp]
	mov	ecx, OFFSET _default_number_format_option
	test	eax, eax
	cmovne	ecx, eax
	push	ecx
	push	DWORD PTR _number_styles$[ebp]
	push	edx
	call	_PMC_TryParse_Imp
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN1@PMC_TryPar

; 1335 :         return (result);
; 1336 :     *o_abs = (PMC_HANDLE_UINT)no_abs;

	mov	eax, DWORD PTR _no_abs$[ebp]
	mov	DWORD PTR [esi], eax

; 1337 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi

; 1338 : }

	pop	ebp
	ret	20					; 00000014H
$LN8@PMC_TryPar:

; 1330 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_TryPar:
	pop	esi

; 1338 : }

	pop	ebp
	ret	20					; 00000014H
_PMC_TryParseForSINT@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _PMC_TryParse@16
_TEXT	SEGMENT
_source$ = 8						; size = 4
_o_sign$ = 11						; size = 1
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_abs$ = 20						; size = 4
_o$ = 20						; size = 4
_PMC_TryParse@16 PROC					; COMDAT

; 1300 : {

	push	ebp
	mov	ebp, esp

; 1301 :     PMC_STATUS_CODE result;
; 1302 :     if (source == NULL)

	mov	edx, DWORD PTR _source$[ebp]
	push	esi
	test	edx, edx
	je	SHORT $LN8@PMC_TryPar

; 1303 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1304 :     if (o == NULL)

	mov	esi, DWORD PTR _o$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_TryPar

; 1306 :     if (format_option == NULL)
; 1307 :         format_option = &default_number_format_option;
; 1308 :     char o_sign;
; 1309 :     NUMBER_HEADER* o_abs;
; 1310 :     if ((result = PMC_TryParse_Imp(source, number_styles, format_option, &o_sign, &o_abs)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _o_abs$[ebp]
	mov	ecx, OFFSET _default_number_format_option
	push	eax
	lea	eax, DWORD PTR _o_sign$[ebp]
	push	eax
	mov	eax, DWORD PTR _format_option$[ebp]
	test	eax, eax
	cmovne	ecx, eax
	push	ecx
	push	DWORD PTR _number_styles$[ebp]
	push	edx
	call	_PMC_TryParse_Imp
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	SHORT $LN1@PMC_TryPar

; 1311 :         return (result);
; 1312 :     if (o_sign < 0)

	cmp	BYTE PTR _o_sign$[ebp], al
	jge	SHORT $LN6@PMC_TryPar

; 1313 :     {
; 1314 :         // 負数は表現できないのでエラーとする
; 1315 :         DeallocateNumber(o_abs);

	push	DWORD PTR _o_abs$[ebp]
	call	_DeallocateNumber
	add	esp, 4

; 1316 :         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	pop	esi

; 1320 : }

	pop	ebp
	ret	16					; 00000010H
$LN6@PMC_TryPar:

; 1317 :     }
; 1318 :     *o = (PMC_HANDLE_UINT)o_abs;

	mov	eax, DWORD PTR _o_abs$[ebp]
	mov	DWORD PTR [esi], eax

; 1319 :     return (PMC_STATUS_OK);

	xor	eax, eax
	pop	esi

; 1320 : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_TryPar:

; 1305 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_TryPar:
	pop	esi

; 1320 : }

	pop	ebp
	ret	16					; 00000010H
_PMC_TryParse@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT _Initialize_Parse
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Parse PROC					; COMDAT

; 1341 : {

	push	ebp
	mov	ebp, esp

; 1342 :     InitializeNumberFormatoInfo(&default_number_format_option);

	push	OFFSET _default_number_format_option
	call	_InitializeNumberFormatoInfo
	mov	eax, DWORD PTR _feature$[ebp]
	add	esp, 4

; 1343 : 
; 1344 :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 1345 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;
; 1346 :     else
; 1347 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;
; 1348 : 
; 1349 :     return (PMC_STATUS_OK);

	mov	ecx, OFFSET _MultiplyAndAdd_using_ADCX_MULX
	mov	edx, OFFSET _MultiplyAndAdd_using_ADC_MUL
	mov	eax, DWORD PTR [eax]
	and	eax, 10					; 0000000aH
	cmp	al, 10					; 0000000aH
	cmovne	ecx, edx
	xor	eax, eax
	mov	DWORD PTR _fp_MultiplyAndAdd, ecx

; 1350 : }

	pop	ebp
	ret	0
_Initialize_Parse ENDP
_TEXT	ENDS
END
