; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_multiply.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_Multiply_X_X_Imp
PUBLIC	_Initialize_Multiply
PUBLIC	_PMC_Multiply_I_X@12
PUBLIC	_PMC_Multiply_L_X@16
PUBLIC	_PMC_Multiply_X_I@12
PUBLIC	_PMC_Multiply_X_L@16
PUBLIC	_PMC_Multiply_X_X@12
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
_BSS	SEGMENT
_fp_Multiply_X_1W DD 01H DUP (?)
_fp_Multiply_X_2W DD 01H DUP (?)
_fp_Multiply_X_X DD 01H DUP (?)
_BSS	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_L_Imp
_TEXT	SEGMENT
_nz_light_check_code$1 = 8				; size = 4
_nz_light_check_code$2 = 8				; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Multiply_X_L_Imp PROC				; COMDAT

; 546  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 547  :     PMC_STATUS_CODE result;
; 548  :     if (u->IS_ZERO)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	mov	eax, DWORD PTR [esi+24]
	test	al, 2
	jne	SHORT $LN30@PMC_Multip

; 549  :     {
; 550  :         // x が 0 である場合
; 551  : 
; 552  :         // y の値にかかわらず 0 を返す。
; 553  :         *w = &number_zero;
; 554  :     }
; 555  :     else if (u->IS_ONE)

	mov	ecx, DWORD PTR _v$[ebp]
	test	al, 4
	mov	eax, ecx
	je	SHORT $LN4@PMC_Multip

; 556  :     {
; 557  :         // x が 1 である場合
; 558  :         if (v == 0)

	mov	edx, DWORD PTR _v$[ebp+4]
	or	eax, edx
	je	SHORT $LN30@PMC_Multip

; 559  :         {
; 560  :             // y が 0 である場合
; 561  : 
; 562  :             //  0  を返す。
; 563  :             *w = &number_zero;
; 564  :         }
; 565  :         else
; 566  :         {
; 567  :             // y が 0 ではない場合
; 568  : 
; 569  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 570  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	edx
	push	ecx
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN15@PMC_Multip

; 649  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN4@PMC_Multip:

; 571  :                 return (result);
; 572  :         }
; 573  :     }
; 574  :     else
; 575  :     {
; 576  :         // x が 0 と 1 のどちらでもない場合
; 577  : 
; 578  :         if (v == 0)

	mov	edi, DWORD PTR _v$[ebp+4]
	or	eax, edi
	jne	SHORT $LN9@PMC_Multip
$LN30@PMC_Multip:

; 630  :             }
; 631  :             else
; 632  :             {
; 633  :                 // _UINT64_T が 1 ワードで表現できる場合
; 634  : 
; 635  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;
; 636  :                 __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 637  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 638  :                 __UNIT_TYPE nz_light_check_code;
; 639  :                 if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 640  :                     return (result);
; 641  :                 (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*w)->BLOCK);
; 642  :                 if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 643  :                     return (result);
; 644  :                 CommitNumber(*w);
; 645  :             }
; 646  :         }
; 647  :     }
; 648  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _w$[ebp]
	pop	edi

; 649  : }

	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], OFFSET _number_zero
	xor	eax, eax
	pop	ebp
	ret	0
$LN9@PMC_Multip:

; 579  :         {
; 580  :             // y が 0 である場合
; 581  : 
; 582  :             //  0  を返す。
; 583  :             *w = &number_zero;
; 584  :         }
; 585  :         else if (v == 1)

	cmp	ecx, 1
	jne	SHORT $LN11@PMC_Multip
	test	edi, edi
	jne	SHORT $LN11@PMC_Multip

; 586  :         {
; 587  :             // y が 1 である場合
; 588  : 
; 589  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 590  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	$LN15@PMC_Multip

; 649  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN11@PMC_Multip:

; 591  :                 return (result);
; 592  :         }
; 593  :         else
; 594  :         {
; 595  :             // x と y がともに 0 、1 のどちらでもない場合
; 596  : 
; 597  :             // x と y の積を計算する
; 598  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 599  :             {
; 600  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 601  : 
; 602  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+12]

; 603  :                 _UINT32_T y_hi;
; 604  :                 _UINT32_T y_lo = _FROMDWORDTOWORD(v, &y_hi);
; 605  :                 if (y_hi == 0)

	test	edi, edi
	jne	SHORT $LN16@PMC_Multip

; 606  :                 {
; 607  :                     // y の値が 32bit で表現可能な場合
; 608  :                     __UNIT_TYPE y_bit_count = sizeof(y_lo) * 8 - _LZCNT_ALT_32(y_lo);

	push	ecx
	call	__LZCNT_ALT_32

; 609  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 610  :                     __UNIT_TYPE nz_light_check_code;
; 611  :                     if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _w$[ebp]
	sub	edx, eax
	lea	eax, DWORD PTR _nz_light_check_code$2[ebp]
	add	edx, 32					; 00000020H
	push	eax
	push	edx
	push	ebx
	call	_AllocateNumber
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN1@PMC_Multip

; 612  :                         return (result);
; 613  :                     (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, y_lo, (*w)->BLOCK);

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR [eax+32]
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	push	DWORD PTR [esi+8]
	push	DWORD PTR [esi+32]
	call	DWORD PTR _fp_Multiply_X_1W

; 614  :                     if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _nz_light_check_code$2[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN21@PMC_Multip

; 649  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN16@PMC_Multip:

; 615  :                         return (result);
; 616  :                 }
; 617  :                 else
; 618  :                 {
; 619  :                     // y の値が 32bit では表現できない場合
; 620  :                     __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(y_hi);

	push	edi
	call	__LZCNT_ALT_32

; 621  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 622  :                     __UNIT_TYPE nz_light_check_code;
; 623  :                     if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _w$[ebp]
	sub	edx, eax
	lea	eax, DWORD PTR _nz_light_check_code$1[ebp]
	add	edx, 64					; 00000040H
	push	eax
	push	edx
	push	ebx
	call	_AllocateNumber
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 624  :                         return (result);
; 625  :                     (*fp_Multiply_X_2W)(u->BLOCK, u->UNIT_WORD_COUNT, y_hi, y_lo, (*w)->BLOCK);

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR [eax+32]
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	push	edi
	push	DWORD PTR [esi+8]
	push	DWORD PTR [esi+32]
	call	DWORD PTR _fp_Multiply_X_2W

; 626  :                     if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _nz_light_check_code$1[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip
$LN21@PMC_Multip:

; 627  :                         return (result);
; 628  :                 }
; 629  :                 CommitNumber(*w);

	push	DWORD PTR [ebx]
	call	_CommitNumber
	add	esp, 4
$LN15@PMC_Multip:

; 630  :             }
; 631  :             else
; 632  :             {
; 633  :                 // _UINT64_T が 1 ワードで表現できる場合
; 634  : 
; 635  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;
; 636  :                 __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 637  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 638  :                 __UNIT_TYPE nz_light_check_code;
; 639  :                 if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 640  :                     return (result);
; 641  :                 (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*w)->BLOCK);
; 642  :                 if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 643  :                     return (result);
; 644  :                 CommitNumber(*w);
; 645  :             }
; 646  :         }
; 647  :     }
; 648  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:
	pop	edi

; 649  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_PMC_Multiply_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_I_Imp
_TEXT	SEGMENT
_w_light_check_code$1 = 8				; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_X_I_Imp PROC				; COMDAT

; 432  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 433  :     PMC_STATUS_CODE result;
; 434  :     if (u->IS_ZERO)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	mov	eax, DWORD PTR [esi+24]
	test	al, 2
	jne	SHORT $LN20@PMC_Multip

; 435  :     {
; 436  :         // u が 0 である場合
; 437  : 
; 438  :         // v の値にかかわらず 0 を返す。
; 439  :         *w = &number_zero;
; 440  :     }
; 441  :     else if (u->IS_ONE)

	test	al, 4
	je	SHORT $LN4@PMC_Multip

; 442  :     {
; 443  :         // u が 1 である場合
; 444  :         if (v == 0)

	mov	eax, DWORD PTR _v$[ebp]
	test	eax, eax
	je	SHORT $LN20@PMC_Multip

; 445  :         {
; 446  :             // v が 0 である場合
; 447  : 
; 448  :             //  0  を返す。
; 449  :             *w = &number_zero;
; 450  :         }
; 451  :         else
; 452  :         {
; 453  :             // y が 0 ではない場合
; 454  : 
; 455  :             // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 456  :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	eax
	call	_From_I_Imp
	add	esp, 8
	test	eax, eax
	je	$LN12@PMC_Multip

; 497  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN4@PMC_Multip:

; 457  :                 return (result);
; 458  :         }
; 459  :     }
; 460  :     else
; 461  :     {
; 462  :         // u が 0 と 1 のどちらでもない場合
; 463  : 
; 464  :         if (v == 0)

	mov	edi, DWORD PTR _v$[ebp]
	test	edi, edi
	jne	SHORT $LN9@PMC_Multip
$LN20@PMC_Multip:

; 494  :         }
; 495  :     }
; 496  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _w$[ebp]
	pop	edi

; 497  : }

	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], OFFSET _number_zero
	xor	eax, eax
	pop	ebp
	ret	0
$LN9@PMC_Multip:

; 465  :         {
; 466  :             // v が 0 である場合
; 467  : 
; 468  :             //  0  を返す。
; 469  :             *w = &number_zero;
; 470  :         }
; 471  :         else if (v == 1)

	cmp	edi, 1
	jne	SHORT $LN11@PMC_Multip

; 472  :         {
; 473  :             // v が 1 である場合
; 474  : 
; 475  :             // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 476  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	esi
	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@PMC_Multip

; 497  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN11@PMC_Multip:

; 477  :                 return (result);
; 478  :         }
; 479  :         else
; 480  :         {
; 481  :             // u と v がともに 0 、1 のどちらでもない場合
; 482  : 
; 483  :             // u と v の積を計算する
; 484  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR [esi+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 488  :             if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	mov	ebx, DWORD PTR _w$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, edi

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 488  :             if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _w_light_check_code$1[ebp]
	sub	edx, ecx
	push	eax
	add	edx, 32					; 00000020H
	push	edx
	push	ebx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 489  :                 return (result);
; 490  :             (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, v, (*w)->BLOCK);

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR [eax+32]
	push	edi
	push	DWORD PTR [esi+8]
	push	DWORD PTR [esi+32]
	call	DWORD PTR _fp_Multiply_X_1W

; 491  :             if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR [ebx]
	push	DWORD PTR _w_light_check_code$1[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 492  :                 return (result);
; 493  :             CommitNumber(*w);

	push	DWORD PTR [ebx]
	call	_CommitNumber
	add	esp, 4
$LN12@PMC_Multip:

; 494  :         }
; 495  :     }
; 496  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:
	pop	edi

; 497  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_PMC_Multiply_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _Multiply_X_X_using_MULX_ADCX
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
tv198 = 20						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_Multiply_X_X_using_MULX_ADCX PROC			; COMDAT

; 407  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _v_count$[ebp]

; 408  :     // x のワード長が y のワード長以上であるようにする
; 409  :     if (u_count < v_count)
; 410  :     {
; 411  :         __UNIT_TYPE* t_buf = u_buf;
; 412  :         u_buf = v_buf;
; 413  :         v_buf = t_buf;
; 414  :         __UNIT_TYPE t_count = u_count;
; 415  :         u_count = v_count;
; 416  :         v_count = t_count;
; 417  :     }
; 418  :     __UNIT_TYPE* up = u_buf;

	mov	edx, ecx
	mov	eax, DWORD PTR _w_buf$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _v_buf$[ebp]
	push	esi
	mov	esi, DWORD PTR _u_buf$[ebp]
	push	edi
	mov	edi, DWORD PTR _u_count$[ebp]
	cmp	edi, ecx
	cmovae	esi, ebx
	cmovae	edx, edi
	cmovae	ebx, DWORD PTR _u_buf$[ebp]
	sub	eax, esi
	cmp	edi, ecx
	mov	DWORD PTR tv198[ebp], edx
	mov	DWORD PTR _w_buf$[ebp], eax
	cmovae	edi, ecx
$LL4@Multiply_X:

; 419  :     __UNIT_TYPE* vp = v_buf;
; 420  :     __UNIT_TYPE* wp = w_buf;
; 421  : 
; 422  :     do
; 423  :     {
; 424  :         Multiply_WORD_using_MULX_ADCX(up, u_count, *vp, wp);

	add	eax, esi
	push	eax
	push	DWORD PTR [esi]
	push	edx
	push	ebx
	call	_Multiply_WORD_using_MULX_ADCX

; 425  :         ++vp;
; 426  :         ++wp;
; 427  :         --v_count;
; 428  :     } while (v_count != 0);

	mov	edx, DWORD PTR tv198[ebp]
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _w_buf$[ebp]
	add	esi, 4
	sub	edi, 1
	jne	SHORT $LL4@Multiply_X

; 429  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_Multiply_X_X_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _Multiply_X_X_using_MUL_ADC
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
tv198 = 20						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_Multiply_X_X_using_MUL_ADC PROC			; COMDAT

; 382  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _v_count$[ebp]

; 383  :     // x のワード長が y のワード長以上であるようにする
; 384  :     if (u_count < v_count)
; 385  :     {
; 386  :         __UNIT_TYPE* t_buf = u_buf;
; 387  :         u_buf = v_buf;
; 388  :         v_buf = t_buf;
; 389  :         __UNIT_TYPE t_count = u_count;
; 390  :         u_count = v_count;
; 391  :         v_count = t_count;
; 392  :     }
; 393  :     __UNIT_TYPE* up = u_buf;

	mov	edx, ecx
	mov	eax, DWORD PTR _w_buf$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _v_buf$[ebp]
	push	esi
	mov	esi, DWORD PTR _u_buf$[ebp]
	push	edi
	mov	edi, DWORD PTR _u_count$[ebp]
	cmp	edi, ecx
	cmovae	esi, ebx
	cmovae	edx, edi
	cmovae	ebx, DWORD PTR _u_buf$[ebp]
	sub	eax, esi
	cmp	edi, ecx
	mov	DWORD PTR tv198[ebp], edx
	mov	DWORD PTR _w_buf$[ebp], eax
	cmovae	edi, ecx
$LL4@Multiply_X:

; 394  :     __UNIT_TYPE* vp = v_buf;
; 395  :     __UNIT_TYPE* wp = w_buf;
; 396  : 
; 397  :     do
; 398  :     {
; 399  :         Multiply_WORD_using_MUL_ADC(up, u_count, *vp, wp);

	add	eax, esi
	push	eax
	push	DWORD PTR [esi]
	push	edx
	push	ebx
	call	_Multiply_WORD_using_MUL_ADC

; 400  :         ++vp;
; 401  :         ++wp;
; 402  :         --v_count;
; 403  :     } while (v_count != 0);

	mov	edx, DWORD PTR tv198[ebp]
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR _w_buf$[ebp]
	add	esi, 4
	sub	edi, 1
	jne	SHORT $LL4@Multiply_X

; 404  : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_Multiply_X_X_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _Multiply_X_2W_using_MULX_ADCX
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_Multiply_X_2W_using_MULX_ADCX PROC			; COMDAT

; 376  : {

	push	ebp
	mov	ebp, esp
	push	edi

; 377  :     Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_lo, &w_buf[0]);

	mov	edi, DWORD PTR _w_buf$[ebp]
	push	edi
	push	DWORD PTR _v_lo$[ebp]
	push	DWORD PTR _u_count$[ebp]
	push	DWORD PTR _u_buf$[ebp]
	call	_Multiply_WORD_using_MULX_ADCX

; 378  :     Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_hi, &w_buf[1]);

	lea	eax, DWORD PTR [edi+4]
	push	eax
	push	DWORD PTR _v_hi$[ebp]
	push	DWORD PTR _u_count$[ebp]
	push	DWORD PTR _u_buf$[ebp]
	call	_Multiply_WORD_using_MULX_ADCX
	add	esp, 32					; 00000020H
	pop	edi

; 379  : }

	pop	ebp
	ret	0
_Multiply_X_2W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _Multiply_X_2W_using_MUL_ADC
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_Multiply_X_2W_using_MUL_ADC PROC			; COMDAT

; 370  : {

	push	ebp
	mov	ebp, esp
	push	edi

; 371  :     Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_lo, &w_buf[0]);

	mov	edi, DWORD PTR _w_buf$[ebp]
	push	edi
	push	DWORD PTR _v_lo$[ebp]
	push	DWORD PTR _u_count$[ebp]
	push	DWORD PTR _u_buf$[ebp]
	call	_Multiply_WORD_using_MUL_ADC

; 372  :     Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_hi, &w_buf[1]);

	lea	eax, DWORD PTR [edi+4]
	push	eax
	push	DWORD PTR _v_hi$[ebp]
	push	DWORD PTR _u_count$[ebp]
	push	DWORD PTR _u_buf$[ebp]
	call	_Multiply_WORD_using_MUL_ADC
	add	esp, 32					; 00000020H
	pop	edi

; 373  : }

	pop	ebp
	ret	0
_Multiply_X_2W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _Multiply_X_1W_using_MULX_ADCX
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w_buf$ = 20						; size = 4
_Multiply_X_1W_using_MULX_ADCX PROC			; COMDAT

; 366  :     Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v, w_buf);

	jmp	_Multiply_WORD_using_MULX_ADCX
_Multiply_X_1W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _Multiply_X_1W_using_MUL_ADC
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w_buf$ = 20						; size = 4
_Multiply_X_1W_using_MUL_ADC PROC			; COMDAT

; 361  :     Multiply_WORD_using_MUL_ADC(u_buf, u_count, v, w_buf);

	jmp	_Multiply_WORD_using_MUL_ADC
_Multiply_X_1W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _Multiply_WORD_using_MULX_ADCX
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
_Multiply_WORD_using_MULX_ADCX PROC			; COMDAT

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 213  :     __UNIT_TYPE k = 0;
; 214  :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, DWORD PTR _u_count$[ebp]
	mov	ecx, eax

; 216  :     while (count != 0)

	mov	edx, DWORD PTR _v$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _up$[ebp]
	push	esi
	shr	ecx, 5
	push	edi
	xor	edi, edi
	mov	DWORD PTR _count$1$[ebp], ecx
	test	ecx, ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	je	$LN3@Multiply_W
$LL2@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+64]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+64]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+68]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+68]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+72]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+72]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+76]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+76]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+80]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+80]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+84]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+84]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+88]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+88]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+92]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+92]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+96]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+96]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+100]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+100]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+104]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+104]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+108]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+108]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+112]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+112]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+116]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+116]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+120]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+120]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+124]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+124]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 252  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
	sub	ebx, -128				; ffffff80H
	dec	edx
	sub	ecx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 216  :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _v$[ebp]
	jne	$LL2@Multiply_W
	mov	eax, DWORD PTR _u_count$[ebp]
$LN3@Multiply_W:

; 253  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 254  :         if (sizeof(k) == sizeof(_UINT32_T))
; 255  :             AddToMULTI32Counter(32);
; 256  :         else
; 257  :             AddToMULTI64Counter(32);
; 258  : #endif
; 259  :     }
; 260  : 
; 261  :     if (u_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN701@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 279  :         up += 16;

	add	ebx, 64					; 00000040H

; 280  :         wp += 16;

	add	ecx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN701@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 289  :     if (u_count & 0x8)

	test	al, 8
	je	$LN817@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 299  :         up += 8;

	add	ebx, 32					; 00000020H

; 300  :         wp += 8;

	add	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN817@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 309  :     if (u_count & 0x4)

	test	al, 4
	je	$LN877@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 315  :         up += 4;

	add	ebx, 16					; 00000010H

; 316  :         wp += 4;

	add	ecx, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN877@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 325  :     if (u_count & 0x2)

	test	al, 2
	je	SHORT $LN909@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	esi, edx
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	esi, edx

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	edx, 0
	adcx	edi, edx
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 329  :         up += 2;

	add	ebx, 8

; 330  :         wp += 2;

	add	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2
	lock	 xadd	 DWORD PTR [eax], edx
	mov	eax, DWORD PTR _u_count$[ebp]
$LN909@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 339  :     if (u_count & 0x1)

	test	al, 1
	je	SHORT $LN927@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	esi, 0

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adcx	edx, esi
	add	eax, edi
	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edi, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 343  :         wp += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN927@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 352  :     if (k != 0)

	xor	eax, eax
	test	edi, edi
	je	SHORT $LN21@Multiply_W

; 353  :         *wp = k;

	mov	DWORD PTR [ecx], edi
$LN21@Multiply_W:
	pop	edi

; 354  : 
; 355  :     return (PMC_STATUS_OK);
; 356  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Multiply_WORD_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _Multiply_WORD_using_MUL_ADC
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
_Multiply_WORD_using_MUL_ADC PROC			; COMDAT

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 66   :     __UNIT_TYPE k = 0;
; 67   :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, DWORD PTR _u_count$[ebp]
	mov	ecx, eax

; 69   :     while (count != 0)

	mov	edx, DWORD PTR _v$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _up$[ebp]
	push	esi
	shr	ecx, 5
	push	edi
	xor	edi, edi
	mov	DWORD PTR _count$1$[ebp], ecx
	test	ecx, ecx
	mov	ecx, DWORD PTR _wp$[ebp]
	je	$LN3@Multiply_W
$LL2@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+64]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+64]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+68]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+68]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+72]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+72]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+76]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+76]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+80]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+80]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+84]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+84]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+88]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+88]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+92]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+92]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+96]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+96]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+100]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+100]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+104]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+104]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+108]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+108]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+112]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+112]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+116]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+116]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+120]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]
	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+120]
	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+124]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+124]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 105  :         --count;

	mov	edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	esi, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 105  :         --count;

	dec	edx
	sub	ebx, -128				; ffffff80H
	sub	ecx, -128				; ffffff80H
	mov	DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 69   :     while (count != 0)

	test	edx, edx
	mov	edx, DWORD PTR _v$[ebp]
	jne	$LL2@Multiply_W
	mov	eax, DWORD PTR _u_count$[ebp]
$LN3@Multiply_W:

; 106  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 107  :         if (sizeof(k) == sizeof(_UINT32_T))
; 108  :             AddToMULTI32Counter(32);
; 109  :         else
; 110  :             AddToMULTI64Counter(32);
; 111  : #endif
; 112  :     }
; 113  : 
; 114  :     if (u_count & 0x10)

	test	al, 16					; 00000010H
	je	$LN701@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+32]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+32]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+36]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+36]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+40]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+40]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+44]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+44]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+48]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+48]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+52]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+52]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+56]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+56]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+60]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+60]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 132  :         up += 16;

	add	ebx, 64					; 00000040H

; 133  :         wp += 16;

	add	ecx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN701@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 142  :     if (u_count & 0x8)

	test	al, 8
	je	$LN817@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+16]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+16]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+20]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+20]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+24]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+24]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+28]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+28]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 152  :         up += 8;

	add	ebx, 32					; 00000020H

; 153  :         wp += 8;

	add	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN817@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 162  :     if (u_count & 0x4)

	test	al, 4
	je	SHORT $LN877@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+8]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+8]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+12]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+12]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 168  :         up += 4;

	add	ebx, 16					; 00000010H

; 169  :         wp += 4;

	add	ecx, 16					; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [edx], eax
	mov	eax, DWORD PTR _u_count$[ebp]
$LN877@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 178  :     if (u_count & 0x2)

	test	al, 2
	je	SHORT $LN909@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	esi, edx

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0
	add	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx+4]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	esi, 0

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx+4]

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
	add	eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, OFFSET _statistics_info+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 182  :         up += 2;

	add	ebx, 8

; 183  :         wp += 2;

	add	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock	 xadd	 DWORD PTR [eax], edx
	mov	eax, DWORD PTR _u_count$[ebp]
$LN909@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 192  :     if (u_count & 0x1)

	test	al, 1
	je	SHORT $LN927@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [ebx]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adc	edx, 0
	add	eax, edi
	mov	edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 196  :         wp += 1;

	add	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4
$LN927@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 205  :     if (k != 0)

	xor	eax, eax
	test	edi, edi
	je	SHORT $LN21@Multiply_W

; 206  :         *wp = k;

	mov	DWORD PTR [ecx], edi
$LN21@Multiply_W:
	pop	edi

; 207  : 
; 208  :     return (PMC_STATUS_OK);
; 209  : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_Multiply_WORD_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT __MULTIPLYX_DIGIT_UNIT
_TEXT	SEGMENT
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
__MULTIPLYX_DIGIT_UNIT PROC				; COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 57   :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	esi, 0

; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _v$[ebp]

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adcx	edx, esi
	add	eax, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 59   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 237  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	edx, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 61   :     return (k);

	mov	eax, edx
	pop	esi

; 62   : }

	pop	ebp
	ret	0
__MULTIPLYX_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT __MULTIPLY_DIGIT_UNIT
_TEXT	SEGMENT
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
__MULTIPLY_DIGIT_UNIT PROC				; COMDAT

; 41   : {

	push	ebp
	mov	ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 45   :     _ADD_UNIT(_ADD_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

	mov	ecx, DWORD PTR _wp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR [eax]
	mul	DWORD PTR _v$[ebp]

; 209  :         return (_addcarry_u32(carry, u, v, w));

	add	eax, DWORD PTR [ecx]
	adc	edx, 0
	add	eax, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 47   :     *wp = t_lo;

	mov	DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (_addcarry_u32(carry, u, v, w));

	adc	edx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 49   :     return (k);

	mov	eax, edx

; 50   : }

	pop	ebp
	ret	0
__MULTIPLY_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :     {

	push	ebp
	mov	ebp, esp

; 624  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 649  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 649  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 590  :     {

	push	ebp
	mov	ebp, esp

; 591  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 602  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 602  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLYX_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC					; COMDAT

; 329  :     {

	push	ebp
	mov	ebp, esp

; 330  : #ifdef _MSC_VER
; 331  : #ifdef _M_IX86
; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 333  : #elif defined(_M_X64)
; 334  :         return (_mulx_u64(u, v, w_hi));
; 335  : #else
; 336  : #error unknown platform
; 337  : #endif
; 338  : #elif defined(__GNUC__)
; 339  : #ifdef _M_IX86
; 340  :         _UINT32_T w_lo;
; 341  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 342  :         return (w_lo);
; 343  : #elif defined(_M_X64)
; 344  :         _UINT64_T w_lo;
; 345  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 346  :         return (w_lo);
; 347  : #else
; 348  : #error unknown platform
; 349  : #endif
; 350  : #else
; 351  : #error unknown compiler
; 352  : #endif
; 353  :     }

	pop	ebp
	ret	0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLY_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC					; COMDAT

; 291  :     {

	push	ebp
	mov	ebp, esp

; 292  : #ifdef _M_IX86
; 293  : #ifdef _MSC_VER
; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	ecx, DWORD PTR _w_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 295  : #elif defined(__GNUC__)
; 296  :         _UINT32_T w_lo;
; 297  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 298  :         return (w_lo);
; 299  : #else
; 300  : #error unknown compiler
; 301  : #endif
; 302  : #elif defined(_M_X64)
; 303  :         return (_umul128(u, v, w_hi));
; 304  : #else
; 305  : #error unknown platform
; 306  : #endif
; 307  :     }

	pop	ebp
	ret	0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADDX_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC					; COMDAT

; 235  :     {

	push	ebp
	mov	ebp, esp

; 236  : #ifdef _M_IX86
; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adcx	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 238  : #elif defined(_M_X64)
; 239  :         return (_addcarryx_u64(carry, u, v, w));
; 240  : #else
; 241  : #error unknown platform
; 242  : #endif
; 243  :     }

	pop	ebp
	ret	0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADD_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC						; COMDAT

; 207  :     {

	push	ebp
	mov	ebp, esp

; 208  : #ifdef _M_IX86
; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	al, BYTE PTR _carry$[ebp]
	mov	edx, DWORD PTR _w$[ebp]
	add	al, 255					; 000000ffH
	mov	ecx, DWORD PTR _u$[ebp]
	adc	ecx, DWORD PTR _v$[ebp]
	setb	al
	mov	DWORD PTR [edx], ecx

; 210  : #elif defined(_M_X64)
; 211  :         return (_addcarry_u64(carry, u, v, w));
; 212  : #else
; 213  : #error unknown platform
; 214  : #endif
; 215  :     }

	pop	ebp
	ret	0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 176  :     {

	push	ebp
	mov	ebp, esp

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 179  :     }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToMULTI64Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC				; COMDAT

; 353  :     {

	push	ebp
	mov	ebp, esp

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 355  :     }

	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _AddToMULTI32Counter
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC				; COMDAT

; 347  :     {

	push	ebp
	mov	ebp, esp

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 349  :     }

	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementMULTI64Counter
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC				; COMDAT

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 332  :     }

	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT _IncrementMULTI32Counter
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC				; COMDAT

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 326  :     }

	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_X@12
_TEXT	SEGMENT
_nw$ = 8						; size = 4
_u$ = 8							; size = 4
_w_light_check_code$1 = 12				; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_X_X@12 PROC				; COMDAT

; 698  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 699  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	push	edi
	test	esi, esi
	je	$LN22@PMC_Multip

; 700  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 701  :     if (v == NULL)

	mov	ebx, DWORD PTR _v$[ebp]
	test	ebx, ebx
	je	$LN22@PMC_Multip

; 702  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 703  :     if (w == NULL)

	mov	edi, DWORD PTR _w$[ebp]
	test	edi, edi
	je	$LN22@PMC_Multip

; 705  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 706  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 707  :     PMC_STATUS_CODE result;
; 708  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Multip

; 709  :         return (result);
; 710  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	push	ebx
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	$LN1@PMC_Multip

; 711  :         return (result);
; 712  :     NUMBER_HEADER* nw;
; 713  :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR [esi+24]
	test	cl, 2
	je	SHORT $LN7@PMC_Multip
$LN26@PMC_Multip:

; 774  :         }
; 775  :         *w = (PMC_HANDLE_UINT)nw;
; 776  :     }
; 777  : #ifdef _DEBUG
; 778  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 779  :         return (result);
; 780  : #endif
; 781  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], OFFSET _number_zero
	xor	eax, eax
	pop	edi

; 782  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN7@PMC_Multip:

; 714  :     {
; 715  :         // x が 0 である場合
; 716  : 
; 717  :         // y の値にかかわらず 0 を返す。
; 718  :         *w = (PMC_HANDLE_UINT)&number_zero;
; 719  :     }
; 720  :     else if (nu->IS_ONE)

	mov	edx, DWORD PTR [ebx+24]
	mov	eax, edx
	and	eax, 2
	test	cl, 4
	je	SHORT $LN9@PMC_Multip

; 721  :     {
; 722  :         // x が 1 である場合
; 723  :         if (nv->IS_ZERO)

	test	eax, eax
	jne	SHORT $LN26@PMC_Multip

; 724  :         {
; 725  :             // y が 0 である場合
; 726  : 
; 727  :             //  0  を返す。
; 728  :             *w = (PMC_HANDLE_UINT)&number_zero;
; 729  :         }
; 730  :         else
; 731  :         {
; 732  :             // y が 0 ではない場合
; 733  : 
; 734  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 735  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	ebx
$LN25@PMC_Multip:

; 774  :         }
; 775  :         *w = (PMC_HANDLE_UINT)nw;
; 776  :     }
; 777  : #ifdef _DEBUG
; 778  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 779  :         return (result);
; 780  : #endif
; 781  :     return (PMC_STATUS_OK);

	call	_DuplicateNumber
	add	esp, 8
	test	eax, eax
	jne	$LN1@PMC_Multip
	mov	eax, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 782  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN9@PMC_Multip:

; 736  :                 return (result);
; 737  :             *w = (PMC_HANDLE_UINT)nw;
; 738  :         }
; 739  :     }
; 740  :     else
; 741  :     {
; 742  :         // x が 0 と 1 のどちらでもない場合
; 743  : 
; 744  :         if (nv->IS_ZERO)

	test	eax, eax
	je	SHORT $LN14@PMC_Multip

; 745  :         {
; 746  :             // y が 0 である場合
; 747  : 
; 748  :             //  0  を返す。
; 749  :             nw = &number_zero;

	mov	eax, OFFSET _number_zero

; 774  :         }
; 775  :         *w = (PMC_HANDLE_UINT)nw;
; 776  :     }
; 777  : #ifdef _DEBUG
; 778  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 779  :         return (result);
; 780  : #endif
; 781  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 782  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN14@PMC_Multip:

; 750  :         }
; 751  :         else if (nv->IS_ONE)

	test	dl, 4
	je	SHORT $LN16@PMC_Multip

; 752  :         {
; 753  :             // y が 1 である場合
; 754  : 
; 755  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 756  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	push	esi
	jmp	SHORT $LN25@PMC_Multip
$LN16@PMC_Multip:

; 757  :                 return (result);
; 758  :         }
; 759  :         else
; 760  :         {
; 761  :             // x と y がともに 0 、1 のどちらでもない場合
; 762  : 
; 763  :             // x と y の積を計算する
; 764  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 765  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 766  :             __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

	mov	eax, DWORD PTR [esi+12]

; 767  :             __UNIT_TYPE w_light_check_code;
; 768  :             if ((result = AllocateNumber(&nw, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _w_light_check_code$1[ebp]
	add	eax, DWORD PTR [ebx+12]
	push	ecx
	push	eax
	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 769  :                 return (result);
; 770  :             (*fp_Multiply_X_X)(nu->BLOCK, nu->UNIT_WORD_COUNT, nv->BLOCK, nv->UNIT_WORD_COUNT, nw->BLOCK);

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR [eax+32]
	push	DWORD PTR [ebx+8]
	push	DWORD PTR [ebx+32]
	push	DWORD PTR [esi+8]
	push	DWORD PTR [esi+32]
	call	DWORD PTR _fp_Multiply_X_X

; 771  :             if ((result = CheckBlockLight(nw->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw$[ebp]
	push	DWORD PTR _w_light_check_code$1[ebp]
	push	DWORD PTR [eax+32]
	call	_CheckBlockLight
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 772  :                 return (result);
; 773  :             CommitNumber(nw);

	push	DWORD PTR _nw$[ebp]
	call	_CommitNumber

; 774  :         }
; 775  :         *w = (PMC_HANDLE_UINT)nw;
; 776  :     }
; 777  : #ifdef _DEBUG
; 778  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 779  :         return (result);
; 780  : #endif
; 781  :     return (PMC_STATUS_OK);

	mov	eax, DWORD PTR _nw$[ebp]
	add	esp, 4
	mov	DWORD PTR [edi], eax
	xor	eax, eax
	pop	edi

; 782  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
$LN22@PMC_Multip:

; 704  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_Multip:
	pop	edi

; 782  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	12					; 0000000cH
_PMC_Multiply_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_L@16
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Multiply_X_L@16 PROC				; COMDAT

; 675  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 676  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 677  :     {
; 678  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 679  :         return (PMC_STATUS_INTERNAL_ERROR);
; 680  :     }
; 681  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Multip

; 682  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 683  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Multip

; 685  :     PMC_STATUS_CODE result;
; 686  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 687  :         return (result);
; 688  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _v$[ebp+4]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_PMC_Multiply_X_L_Imp
	add	esp, 16					; 00000010H
	pop	esi

; 689  :         return (result);
; 690  : #ifdef _DEBUG
; 691  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 692  :         return (result);
; 693  : #endif
; 694  :     return (PMC_STATUS_OK);
; 695  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Multip:

; 684  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Multip:
	pop	esi

; 689  :         return (result);
; 690  : #ifdef _DEBUG
; 691  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 692  :         return (result);
; 693  : #endif
; 694  :     return (PMC_STATUS_OK);
; 695  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_Multiply_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _PMC_Multiply_X_I@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_X_I@12 PROC				; COMDAT

; 523  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 524  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 525  :     {
; 526  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 527  :         return (PMC_STATUS_INTERNAL_ERROR);
; 528  :     }
; 529  :     if (u == NULL)

	mov	esi, DWORD PTR _u$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Multip

; 530  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 531  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Multip

; 533  :     PMC_STATUS_CODE result;
; 534  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 535  :         return (result);
; 536  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _v$[ebp]
	push	esi
	call	_PMC_Multiply_X_I_Imp
	add	esp, 12					; 0000000cH
	pop	esi

; 537  :         return (result);
; 538  : #ifdef _DEBUG
; 539  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 540  :         return (result);
; 541  : #endif
; 542  :     return (PMC_STATUS_OK);
; 543  : }

	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Multip:

; 532  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Multip:
	pop	esi

; 537  :         return (result);
; 538  : #ifdef _DEBUG
; 539  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 540  :         return (result);
; 541  : #endif
; 542  :     return (PMC_STATUS_OK);
; 543  : }

	pop	ebp
	ret	12					; 0000000cH
_PMC_Multiply_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _PMC_Multiply_L_X@16
_TEXT	SEGMENT
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Multiply_L_X@16 PROC				; COMDAT

; 652  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 653  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 654  :     {
; 655  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 656  :         return (PMC_STATUS_INTERNAL_ERROR);
; 657  :     }
; 658  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Multip

; 659  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 660  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Multip

; 662  :     PMC_STATUS_CODE result;
; 663  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 664  :         return (result);
; 665  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _u$[ebp+4]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_PMC_Multiply_X_L_Imp
	add	esp, 16					; 00000010H
	pop	esi

; 666  :         return (result);
; 667  : #ifdef _DEBUG
; 668  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 669  :         return (result);
; 670  : #endif
; 671  :     return (PMC_STATUS_OK);
; 672  : }

	pop	ebp
	ret	16					; 00000010H
$LN8@PMC_Multip:

; 661  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Multip:
	pop	esi

; 666  :         return (result);
; 667  : #ifdef _DEBUG
; 668  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 669  :         return (result);
; 670  : #endif
; 671  :     return (PMC_STATUS_OK);
; 672  : }

	pop	ebp
	ret	16					; 00000010H
_PMC_Multiply_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _PMC_Multiply_I_X@12
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Multiply_I_X@12 PROC				; COMDAT

; 500  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 501  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 502  :     {
; 503  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 504  :         return (PMC_STATUS_INTERNAL_ERROR);
; 505  :     }
; 506  :     if (v == NULL)

	mov	esi, DWORD PTR _v$[ebp]
	test	esi, esi
	je	SHORT $LN8@PMC_Multip

; 507  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 508  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	je	SHORT $LN8@PMC_Multip

; 510  :     PMC_STATUS_CODE result;
; 511  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	push	esi
	call	_CheckNumber
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 512  :         return (result);
; 513  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	push	DWORD PTR _w$[ebp]
	push	DWORD PTR _u$[ebp]
	push	esi
	call	_PMC_Multiply_X_I_Imp
	add	esp, 12					; 0000000cH
	pop	esi

; 514  :         return (result);
; 515  : #ifdef _DEBUG
; 516  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 517  :         return (result);
; 518  : #endif
; 519  :     return (PMC_STATUS_OK);
; 520  : }

	pop	ebp
	ret	12					; 0000000cH
$LN8@PMC_Multip:

; 509  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN6@PMC_Multip:
	pop	esi

; 514  :         return (result);
; 515  : #ifdef _DEBUG
; 516  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 517  :         return (result);
; 518  : #endif
; 519  :     return (PMC_STATUS_OK);
; 520  : }

	pop	ebp
	ret	12					; 0000000cH
_PMC_Multiply_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _Initialize_Multiply
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Multiply PROC				; COMDAT

; 785  : {

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _feature$[ebp]

; 786  :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 787  :     {
; 788  :         fp_Multiply_X_1W = Multiply_X_1W_using_MULX_ADCX;
; 789  :         fp_Multiply_X_2W = Multiply_X_2W_using_MULX_ADCX;
; 790  :         fp_Multiply_X_X = Multiply_X_X_using_MULX_ADCX;
; 791  :     }
; 792  :     else
; 793  :     {
; 794  :         fp_Multiply_X_1W = Multiply_X_1W_using_MUL_ADC;
; 795  :         fp_Multiply_X_2W = Multiply_X_2W_using_MUL_ADC;
; 796  :         fp_Multiply_X_X = Multiply_X_X_using_MUL_ADC;
; 797  :     }
; 798  :     return (PMC_STATUS_OK);

	mov	edx, OFFSET _Multiply_X_1W_using_MUL_ADC
	mov	ecx, DWORD PTR [eax]
	mov	eax, OFFSET _Multiply_X_1W_using_MULX_ADCX
	and	ecx, 10					; 0000000aH
	cmp	ecx, 10					; 0000000aH
	cmovne	eax, edx
	mov	edx, OFFSET _Multiply_X_2W_using_MUL_ADC
	mov	DWORD PTR _fp_Multiply_X_1W, eax
	mov	eax, OFFSET _Multiply_X_2W_using_MULX_ADCX
	cmovne	eax, edx
	mov	edx, OFFSET _Multiply_X_X_using_MUL_ADC
	mov	DWORD PTR _fp_Multiply_X_2W, eax
	mov	eax, OFFSET _Multiply_X_X_using_MULX_ADCX
	cmovne	eax, edx
	mov	DWORD PTR _fp_Multiply_X_X, eax
	xor	eax, eax

; 799  : }

	pop	ebp
	ret	0
_Initialize_Multiply ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _Multiply_X_X_Imp
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w$ = 24						; size = 4
_Multiply_X_X_Imp PROC					; COMDAT

; 37   :     (*fp_Multiply_X_X)(u, u_count,  v,  v_count,  w);

	jmp	DWORD PTR _fp_Multiply_X_X
_Multiply_X_X_Imp ENDP
_TEXT	ENDS
END
