; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_parse.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
PUBLIC	??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
PUBLIC	??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException
PUBLIC	??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
PUBLIC	??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ; Palmtree::Math::Core::Internal::StringReader::PeekChar
PUBLIC	?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ ; Palmtree::Math::Core::Internal::StringReader::Progress
PUBLIC	?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
PUBLIC	?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
PUBLIC	?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::StringReader::SkipString
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::StringWriter::GetString
PUBLIC	?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Parse
PUBLIC	?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse
PUBLIC	?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
PUBLIC	??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState
PUBLIC	?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
PUBLIC	?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
PUBLIC	?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	??_7StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ ; `string'
PUBLIC	??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
PUBLIC	__TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ ; `string'
PUBLIC	??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_13JDNADJOG@?$PP?$KA@			; `string'
PUBLIC	??_C@_13HOIJIPNN@?$AA?5@			; `string'
PUBLIC	??_C@_13LLDNKHDC@?$AA?$CI@			; `string'
PUBLIC	??_C@_13DIBMAFH@?$AA?$CJ@			; `string'
PUBLIC	__TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@ ; `string'
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@ ; `string'
PUBLIC	??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ ; `string'
PUBLIC	??_C@_13LNPOMHLG@?$AAo@				; `string'
PUBLIC	??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@ ; `string'
PUBLIC	??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
PUBLIC	??_R3StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
PUBLIC	??_R3StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__lstrcmpW@8:PROC
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentException::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z:PROC ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
EXTRN	?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
EXTRN	?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
EXTRN	?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
EXTRN	?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString
EXTRN	?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A DB 01e4H DUP (?) ; Palmtree::Math::Core::Internal::default_number_format_option
?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APAIPAIII@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_MultiplyAndAdd
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringWriter@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringWriter@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringReader@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringReader@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringReader@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@
CONST	SEGMENT
??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@ DB 'o', 00H, '_', 00H, 'a', 00H
	DB	'b', 00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@
CONST	SEGMENT
??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@ DB 'o', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13LNPOMHLG@?$AAo@
CONST	SEGMENT
??_C@_13LNPOMHLG@?$AAo@ DB 'o', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
CONST	SEGMENT
??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ DB 015H
	DB	'_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@
CONST	SEGMENT
??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@ DB 's', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@
CONST	SEGMENT
??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@ DB 015H
	DB	'_pen', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'y', 00H, 'l', 00H, 'e', 00H, 's', 00H
	DB	'k01', 08aH, 0efH, 'SU0', 08cH, '0f0D0j0D0D}', 07fH, '0', 08H, 'T'
	DB	08fH, '0[0n0', 0d5H, '0', 0e9H, '0', 0b0H, '0L0', 07H, 'c', 09aH
	DB	'[U0', 08cH, '0~0W0_0', 02H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_13DIBMAFH@?$AA?$CJ@
CONST	SEGMENT
??_C@_13DIBMAFH@?$AA?$CJ@ DB ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13LLDNKHDC@?$AA?$CI@
CONST	SEGMENT
??_C@_13LLDNKHDC@?$AA?$CI@ DB '(', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5@ DB ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13JDNADJOG@?$PP?$KA@
CONST	SEGMENT
??_C@_13JDNADJOG@?$PP?$KA@ DB 0a0H, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '7', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '6', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '5', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '4', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '3', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '2', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '1', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
CONST	SEGMENT
??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ DB 0f8H
	DB	'fM0', 0bcH, 08fH, 07fH, '0HQ', 0d0H, '0', 0c3H, '0', 0d5H, '0'
	DB	0a1H, '0n0', 0b5H, '0', 0a4H, '0', 0baH, '0L0', 0dH, 'N', 0b3H
	DB	08dH, 'W0f0D0~0Y0', 02H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInsufficientBufferException@Internal@Core@Math@Palmt'
	DB	'ree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
	DD	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
	DD	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
	DD	FLAT:?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
CONST	ENDS
;	COMDAT ??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'S', 00H, 'k', 00H, 'i', 00H, 'p', 00H
	DB	'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ';'
	DB	00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
CONST	SEGMENT
??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ DB 085H
	DB	'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv', 01fH, 'u'
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ';', 00H, '1', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringReader@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringReader@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
	DD	FLAT:?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
	DD	FLAT:?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ
	DD	FLAT:?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
	DD	FLAT:?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
CONST	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
	DD	FLAT:??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`vftable'
	DD	FLAT:??_EArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0
__ehfuncinfo$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0
__ehfuncinfo$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$1
__ehfuncinfo$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z$0
__ehfuncinfo$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z$0
__ehfuncinfo$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
__ehfuncinfo$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gexception@std@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_result$ = 28						; size = 4
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp, COMDAT

; 1271 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1272 :         ResourceHolderUINT root;

  00028	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1273 :         if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _number_styles$[ebp]
  0003a	a9 00 02 00 00	 test	 eax, 512		; 00000200H
  0003f	74 52		 je	 SHORT $LN2@PMC_TryPar

; 1274 :         {
; 1275 :             // 16進数の場合
; 1276 : 
; 1277 :             // 許可されている組み合わせのフラグ
; 1278 :             _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE | PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING | PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER;
; 1279 : 
; 1280 :             // 許可されていないフラグが指定されていればエラー
; 1281 :             if (number_styles & ~mask)

  00041	a9 fc fd ff fc	 test	 eax, -50332164		; fcfffdfcH
  00046	0f 85 a8 00 00
	00		 jne	 $LN15@PMC_TryPar

; 1283 : 
; 1284 :             PMC_STATUS_CODE err = TryParseX(source, number_styles, format_option, o_sign, o_abs, result);

  0004c	8b 75 1c	 mov	 esi, DWORD PTR _result$[ebp]
  0004f	8b 7d 18	 mov	 edi, DWORD PTR _o_abs$[ebp]
  00052	56		 push	 esi
  00053	57		 push	 edi
  00054	ff 75 14	 push	 DWORD PTR _o_sign$[ebp]
  00057	ff 75 10	 push	 DWORD PTR _format_option$[ebp]
  0005a	50		 push	 eax
  0005b	ff 75 08	 push	 DWORD PTR _source$[ebp]
  0005e	e8 00 00 00 00	 call	 ?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ; Palmtree::Math::Core::Internal::TryParseX
  00063	8b d8		 mov	 ebx, eax
  00065	83 c4 18	 add	 esp, 24			; 00000018H

; 1285 :             if (err != PMC_STATUS_OK || !*result)

  00068	85 db		 test	 ebx, ebx
  0006a	75 04		 jne	 SHORT $LN8@PMC_TryPar
  0006c	39 06		 cmp	 DWORD PTR [esi], eax
  0006e	75 47		 jne	 SHORT $LN13@PMC_TryPar
$LN8@PMC_TryPar:

; 1303 :     }

  00070	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00077	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0007a	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0007f	8b c3		 mov	 eax, ebx
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN2@PMC_TryPar:

; 1286 :                 return (err);
; 1287 :             root.HookNumber(*o_abs);
; 1288 :         }
; 1289 :         else
; 1290 :         {
; 1291 :             // 10進数の場合
; 1292 :             PMC_STATUS_CODE err = TryParseDN(source, number_styles, format_option, o_sign, o_abs, result);

  00093	8b 75 1c	 mov	 esi, DWORD PTR _result$[ebp]
  00096	8b 7d 18	 mov	 edi, DWORD PTR _o_abs$[ebp]
  00099	56		 push	 esi
  0009a	57		 push	 edi
  0009b	ff 75 14	 push	 DWORD PTR _o_sign$[ebp]
  0009e	ff 75 10	 push	 DWORD PTR _format_option$[ebp]
  000a1	50		 push	 eax
  000a2	ff 75 08	 push	 DWORD PTR _source$[ebp]
  000a5	e8 00 00 00 00	 call	 ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ; Palmtree::Math::Core::Internal::TryParseDN
  000aa	8b d8		 mov	 ebx, eax
  000ac	83 c4 18	 add	 esp, 24			; 00000018H

; 1293 :             if (err != PMC_STATUS_OK || !*result)

  000af	85 db		 test	 ebx, ebx
  000b1	75 bd		 jne	 SHORT $LN8@PMC_TryPar
  000b3	39 06		 cmp	 DWORD PTR [esi], eax
  000b5	74 b9		 je	 SHORT $LN8@PMC_TryPar
$LN13@PMC_TryPar:

; 1294 :                 return (err);
; 1295 :             root.HookNumber(*o_abs);
; 1296 :         }
; 1297 : #ifdef _DEBUG
; 1298 :         CheckNumber(*o_abs);
; 1299 : #endif
; 1300 :         root.UnlinkNumber(*o_abs);

  000b7	ff 37		 push	 DWORD PTR [edi]
  000b9	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000bc	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
  000c1	ff 37		 push	 DWORD PTR [edi]
  000c3	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000c6	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1301 :         *result = 1;

  000cb	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1

; 1302 :         return (PMC_STATUS_OK);

  000d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d8	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000db	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000e0	33 c0		 xor	 eax, eax

; 1303 :     }

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
$LN15@PMC_TryPar:

; 1282 :                 throw ArgumentException(L"引数number_stylesに許可されていない組み合わせのフラグが指定されました。");

  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@
  000f9	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  000fc	e8 00 00 00 00	 call	 ??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
  00101	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
  00106	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN12@PMC_TryPar:
  0010f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
_TEXT	SEGMENT
_o_bit_count$1$ = -324					; size = 4
_source_count$1$ = -320					; size = 4
_root$ = -316						; size = 16
_result$GSCopy$1$ = -300				; size = 4
_o_abs$GSCopy$1$ = -296					; size = 4
_r$1$ = -292						; size = 4
_dummy_sign$2 = -285					; size = 1
_int_part_buf$1$ = -284					; size = 4
_o_sign$GSCopy$1$ = -280				; size = 4
_state$3 = -276						; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_result$ = 28						; size = 4
?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::TryParseX, COMDAT

; 1190 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]

; 1191 :         ResourceHolderUINT root;

  00031	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  00037	8b 5d 08	 mov	 ebx, DWORD PTR _source$[ebp]
  0003a	8b 7d 10	 mov	 edi, DWORD PTR _format_option$[ebp]
  0003d	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _o_sign$GSCopy$1$[ebp], eax
  00043	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  00046	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _o_abs$GSCopy$1$[ebp], eax
  0004c	8b 45 1c	 mov	 eax, DWORD PTR _result$[ebp]
  0004f	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _result$GSCopy$1$[ebp], eax
  00055	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1192 :         __UNIT_TYPE source_len = lstrlenW(source);

  00061	53		 push	 ebx
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4

; 1193 :         size_t int_part_buf_size = source_len + 1;
; 1194 :         wchar_t* int_part_buf = root.AllocateString(source_len + 1);

  00068	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  0006e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString

; 1185 :         ParserState state(in_ptr, number_styles, format_option, &dummy_sign, int_part_buf, int_part_buf_size, nullptr, 0);

  00077	6a 00		 push	 0
  00079	6a 00		 push	 0
  0007b	56		 push	 esi
  0007c	8b 75 0c	 mov	 esi, DWORD PTR _number_styles$[ebp]
  0007f	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp]
  00085	50		 push	 eax

; 1193 :         size_t int_part_buf_size = source_len + 1;
; 1194 :         wchar_t* int_part_buf = root.AllocateString(source_len + 1);

  00086	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _int_part_buf$1$[ebp], eax

; 1185 :         ParserState state(in_ptr, number_styles, format_option, &dummy_sign, int_part_buf, int_part_buf_size, nullptr, 0);

  0008c	8d 85 e3 fe ff
	ff		 lea	 eax, DWORD PTR _dummy_sign$2[ebp]
  00092	50		 push	 eax
  00093	57		 push	 edi
  00094	56		 push	 esi
  00095	53		 push	 ebx
  00096	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState

; 480  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  0009b	f6 85 1c ff ff
	ff 01		 test	 BYTE PTR _state$3[ebp+48], 1
  000a2	74 0b		 je	 SHORT $LN22@TryParseX

; 481  :                 _source.SkipSpace();

  000a4	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp]
  000aa	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN22@TryParseX:

; 482  :             ParseAsIntegerPartNumberSequence();

  000af	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp]
  000b5	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 483  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  000ba	f6 85 1c ff ff
	ff 02		 test	 BYTE PTR _state$3[ebp+48], 2
  000c1	74 0b		 je	 SHORT $LN23@TryParseX

; 484  :                 _source.SkipSpace();

  000c3	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp]
  000c9	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN23@TryParseX:

; 485  :             if (_source.PeekChar() != L'\0')

  000ce	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _state$3[ebp]
  000d4	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp]
  000da	ff 10		 call	 DWORD PTR [eax]

; 1195 :         int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf, int_part_buf_size);
; 1196 :         root.CheckString(int_part_buf);

  000dc	8b bd e4 fe ff
	ff		 mov	 edi, DWORD PTR _int_part_buf$1$[ebp]
  000e2	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]

; 485  :             if (_source.PeekChar() != L'\0')

  000e8	33 db		 xor	 ebx, ebx
  000ea	66 85 c0	 test	 ax, ax

; 1195 :         int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf, int_part_buf_size);
; 1196 :         root.CheckString(int_part_buf);

  000ed	57		 push	 edi

; 485  :             if (_source.PeekChar() != L'\0')

  000ee	0f 94 c3	 sete	 bl

; 1195 :         int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf, int_part_buf_size);
; 1196 :         root.CheckString(int_part_buf);

  000f1	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 1197 :         if (!result_parsing || int_part_buf[0] == L'\0')

  000f6	85 db		 test	 ebx, ebx
  000f8	0f 84 2f 02 00
	00		 je	 $LN5@TryParseX
  000fe	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00101	66 85 c0	 test	 ax, ax
  00104	0f 84 23 02 00
	00		 je	 $LN5@TryParseX

; 1201 :                 return (PMC_STATUS_FORMAT_ERROR);
; 1202 :             return (PMC_STATUS_OK);
; 1203 :         }
; 1204 : 
; 1205 :         // 先頭 1 文字が 8～F であれば負数とみなす
; 1206 :         if (ParseHexDigit(int_part_buf[0]) >= 8)

  0010a	8b c8		 mov	 ecx, eax

; 49   :         if (c >= L'0' && c <= L'9')

  0010c	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0010f	66 83 f8 09	 cmp	 ax, 9
  00113	77 05		 ja	 SHORT $LN29@TryParseX

; 50   :             return (c - L'0');

  00115	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00118	eb 1a		 jmp	 SHORT $LN28@TryParseX
$LN29@TryParseX:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  0011a	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  0011d	66 83 f8 05	 cmp	 ax, 5
  00121	77 05		 ja	 SHORT $LN30@TryParseX

; 53   :             return (c - L'a' + 10);

  00123	8d 41 a9	 lea	 eax, DWORD PTR [ecx-87]
  00126	eb 0c		 jmp	 SHORT $LN28@TryParseX
$LN30@TryParseX:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00128	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  0012b	66 83 f8 05	 cmp	 ax, 5
  0012f	77 22		 ja	 SHORT $LN7@TryParseX

; 56   :             return (c - L'A' + 10);

  00131	8d 41 c9	 lea	 eax, DWORD PTR [ecx-55]
$LN28@TryParseX:

; 1201 :                 return (PMC_STATUS_FORMAT_ERROR);
; 1202 :             return (PMC_STATUS_OK);
; 1203 :         }
; 1204 : 
; 1205 :         // 先頭 1 文字が 8～F であれば負数とみなす
; 1206 :         if (ParseHexDigit(int_part_buf[0]) >= 8)

  00134	83 f8 08	 cmp	 eax, 8
  00137	7c 1a		 jl	 SHORT $LN7@TryParseX

; 1207 :         {
; 1208 :             // 先頭 1 文字が 8～F であれば負数とみなす
; 1209 :             if (!(number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER))

  00139	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _o_sign$GSCopy$1$[ebp]
  0013f	f7 c6 00 00 00
	01		 test	 esi, 16777216		; 01000000H
  00145	0f 94 c0	 sete	 al
  00148	8d 04 45 ff ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-1]
  0014f	88 01		 mov	 BYTE PTR [ecx], al

; 1210 :             {
; 1211 :                 // 負数が許可されていないにもかかわらず先頭文字が'8'～'F'である場合
; 1212 : 
; 1213 :                 // そのまま正数として扱う
; 1214 :                 *o_sign = 1;
; 1215 :             }
; 1216 :             else
; 1217 :             {
; 1218 :                 // 負数が許可されていて先頭文字が'8'～'F'である場合
; 1219 : 
; 1220 :                 // 負数として扱う
; 1221 :                 *o_sign = -1;
; 1222 :             }
; 1223 :         }
; 1224 :         else

  00151	eb 09		 jmp	 SHORT $LN8@TryParseX
$LN7@TryParseX:

; 1225 :         {
; 1226 :             // 先頭 1 文字が 0～7 であれば正数とみなす
; 1227 :             *o_sign = 1;

  00153	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _o_sign$GSCopy$1$[ebp]
  00159	c6 01 01	 mov	 BYTE PTR [ecx], 1
$LN8@TryParseX:

; 1228 :         }
; 1229 : 
; 1230 :         __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

  0015c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__lstrlenW@4
  00162	57		 push	 edi
  00163	ff d3		 call	 ebx
  00165	c1 e0 02	 shl	 eax, 2

; 1231 :         *o_abs = root.AllocateNumber(o_bit_count);

  00168	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  0016e	50		 push	 eax
  0016f	89 85 bc fe ff
	ff		 mov	 DWORD PTR _o_bit_count$1$[ebp], eax
  00175	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0017a	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _o_abs$GSCopy$1$[ebp]

; 1164 :         __UNIT_TYPE source_count = lstrlenW(source);

  00180	57		 push	 edi

; 1231 :         *o_abs = root.AllocateNumber(o_bit_count);

  00181	89 01		 mov	 DWORD PTR [ecx], eax

; 1232 :         BuildBinaryFromHexString(int_part_buf, (*o_abs)->BLOCK);

  00183	8b 70 24	 mov	 esi, DWORD PTR [eax+36]

; 1164 :         __UNIT_TYPE source_count = lstrlenW(source);

  00186	ff d3		 call	 ebx
  00188	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _source_count$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 157  :             return ((u + v - 1) / v);

  0018e	8d 48 07	 lea	 ecx, DWORD PTR [eax+7]
  00191	c1 e9 03	 shr	 ecx, 3
  00194	49		 dec	 ecx
  00195	8d 1c 8e	 lea	 ebx, DWORD PTR [esi+ecx*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 1167 :         int r = source_count % word_digit_count;

  00198	8b c8		 mov	 ecx, eax
  0019a	83 e1 07	 and	 ecx, 7
  0019d	89 8d dc fe ff
	ff		 mov	 DWORD PTR _r$1$[ebp], ecx

; 1168 :         if (r > 0)

  001a3	0f 8e a0 00 00
	00		 jle	 $LN57@TryParseX

; 1116 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr);

  001a9	8b d7		 mov	 edx, edi
  001ab	0f b7 0a	 movzx	 ecx, WORD PTR [edx]

; 49   :         if (c >= L'0' && c <= L'9')

  001ae	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  001b1	66 83 f8 09	 cmp	 ax, 9
  001b5	77 05		 ja	 SHORT $LN45@TryParseX

; 50   :             return (c - L'0');

  001b7	83 e9 30	 sub	 ecx, 48			; 00000030H
  001ba	eb 1f		 jmp	 SHORT $LN44@TryParseX
$LN45@TryParseX:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  001bc	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  001bf	66 83 f8 05	 cmp	 ax, 5
  001c3	77 05		 ja	 SHORT $LN46@TryParseX

; 53   :             return (c - L'a' + 10);

  001c5	83 e9 57	 sub	 ecx, 87			; 00000057H
  001c8	eb 11		 jmp	 SHORT $LN44@TryParseX
$LN46@TryParseX:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  001ca	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  001cd	66 83 f8 05	 cmp	 ax, 5
  001d1	77 05		 ja	 SHORT $LN47@TryParseX

; 56   :             return (c - L'A' + 10);

  001d3	83 e9 37	 sub	 ecx, 55			; 00000037H
  001d6	eb 03		 jmp	 SHORT $LN44@TryParseX
$LN47@TryParseX:

; 57   :         return (-1);

  001d8	83 c9 ff	 or	 ecx, -1
$LN44@TryParseX:

; 1118 :         --count;

  001db	8b bd dc fe ff
	ff		 mov	 edi, DWORD PTR _r$1$[ebp]
  001e1	8d 72 02	 lea	 esi, DWORD PTR [edx+2]
  001e4	83 c7 ff	 add	 edi, -1

; 1119 :         while (count > 0)

  001e7	74 4a		 je	 SHORT $LN42@TryParseX
  001e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL41@TryParseX:

; 1120 :         {
; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  001f0	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 49   :         if (c >= L'0' && c <= L'9')

  001f3	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  001f6	66 83 f8 09	 cmp	 ax, 9
  001fa	77 05		 ja	 SHORT $LN50@TryParseX

; 50   :             return (c - L'0');

  001fc	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  001ff	eb 1f		 jmp	 SHORT $LN49@TryParseX
$LN50@TryParseX:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00201	8d 42 9f	 lea	 eax, DWORD PTR [edx-97]
  00204	66 83 f8 05	 cmp	 ax, 5
  00208	77 05		 ja	 SHORT $LN51@TryParseX

; 53   :             return (c - L'a' + 10);

  0020a	8d 42 a9	 lea	 eax, DWORD PTR [edx-87]
  0020d	eb 11		 jmp	 SHORT $LN49@TryParseX
$LN51@TryParseX:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0020f	8d 42 bf	 lea	 eax, DWORD PTR [edx-65]
  00212	66 83 f8 05	 cmp	 ax, 5
  00216	77 05		 ja	 SHORT $LN52@TryParseX

; 56   :             return (c - L'A' + 10);

  00218	8d 42 c9	 lea	 eax, DWORD PTR [edx-55]
  0021b	eb 03		 jmp	 SHORT $LN49@TryParseX
$LN52@TryParseX:

; 57   :         return (-1);

  0021d	83 c8 ff	 or	 eax, -1
$LN49@TryParseX:

; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  00220	c1 e1 04	 shl	 ecx, 4

; 1122 :             ++in_ptr;

  00223	83 c6 02	 add	 esi, 2
  00226	03 c8		 add	 ecx, eax

; 1123 :             --count;

  00228	83 ef 01	 sub	 edi, 1
  0022b	75 c3		 jne	 SHORT $LL41@TryParseX
  0022d	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _int_part_buf$1$[ebp]
$LN42@TryParseX:

; 1172 :             source_count -= r;

  00233	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _source_count$1$[ebp]
  00239	89 0b		 mov	 DWORD PTR [ebx], ecx
  0023b	83 eb 04	 sub	 ebx, 4
  0023e	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _r$1$[ebp]
  00244	2b c1		 sub	 eax, ecx
  00246	8d 3c 4a	 lea	 edi, DWORD PTR [edx+ecx*2]
$LN57@TryParseX:

; 1173 :         }
; 1174 :         while (source_count > 0)

  00249	85 c0		 test	 eax, eax
  0024b	74 1d		 je	 SHORT $LN35@TryParseX
  0024d	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
  00250	c1 ee 03	 shr	 esi, 3
  00253	46		 inc	 esi
$LL34@TryParseX:

; 1175 :         {
; 1176 :             *out_ptr-- = Build1WordFromHexString(in_ptr);

  00254	57		 push	 edi
  00255	e8 00 00 00 00	 call	 ?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromHexString
  0025a	83 c4 04	 add	 esp, 4
  0025d	89 03		 mov	 DWORD PTR [ebx], eax

; 1177 :             in_ptr += word_digit_count;

  0025f	83 c7 10	 add	 edi, 16			; 00000010H
  00262	8d 5b fc	 lea	 ebx, DWORD PTR [ebx-4]
  00265	83 ee 01	 sub	 esi, 1
  00268	75 ea		 jne	 SHORT $LL34@TryParseX
$LN35@TryParseX:

; 1233 :         root.CheckNumber(*o_abs);

  0026a	8b 9d d8 fe ff
	ff		 mov	 ebx, DWORD PTR _o_abs$GSCopy$1$[ebp]
  00270	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  00276	ff 33		 push	 DWORD PTR [ebx]
  00278	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1234 :         root.DeallocateString(int_part_buf);

  0027d	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _int_part_buf$1$[ebp]
  00283	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  00289	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1235 :         if (*o_sign < 0)

  0028e	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _o_sign$GSCopy$1$[ebp]
  00294	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00297	7d 48		 jge	 SHORT $LN3@TryParseX

; 1236 :         {
; 1237 :             // 負数の場合
; 1238 : 
; 1239 :             int lzcnt = o_bit_count % __UNIT_TYPE_BIT_COUNT;

  00299	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _o_bit_count$1$[ebp]
  0029f	83 e1 1f	 and	 ecx, 31			; 0000001fH

; 1240 :             if (lzcnt != 0)

  002a2	74 11		 je	 SHORT $LN12@TryParseX

; 1241 :             {
; 1242 :                 __UNIT_TYPE padding = (__UNIT_TYPE)-1 << lzcnt;
; 1243 :                 (*o_abs)->BLOCK[(*o_abs)->BLOCK_COUNT - 1] |= padding;

  002a4	8b 03		 mov	 eax, DWORD PTR [ebx]
  002a6	83 ca ff	 or	 edx, -1
  002a9	d3 e2		 shl	 edx, cl
  002ab	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002ae	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  002b1	09 54 88 fc	 or	 DWORD PTR [eax+ecx*4-4], edx
$LN12@TryParseX:

; 1244 :             }
; 1245 : 
; 1246 :             // 配列 (*o_abs)->BLOCK の内容をビット反転してインクリメントする
; 1247 :             char carry = 1;
; 1248 :             __UNIT_TYPE* p = (*o_abs)->BLOCK;

  002b5	8b 03		 mov	 eax, DWORD PTR [ebx]
  002b7	b2 01		 mov	 dl, 1
  002b9	8b 70 20	 mov	 esi, DWORD PTR [eax+32]
  002bc	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]

; 1249 :             __UNIT_TYPE count = (*o_abs)->BLOCK_COUNT;
; 1250 :             while (count > 0)

  002bf	85 f6		 test	 esi, esi
  002c1	74 18		 je	 SHORT $LN68@TryParseX
$LL2@TryParseX:

; 1252 :                 carry = _ADD_UNIT(carry, ~*p, 0, p);

  002c3	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1253 :                 ++p;

  002c5	8d 49 04	 lea	 ecx, DWORD PTR [ecx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002c8	80 c2 ff	 add	 dl, 255			; 000000ffH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 1252 :                 carry = _ADD_UNIT(carry, ~*p, 0, p);

  002cb	f7 d0		 not	 eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002cd	83 d0 00	 adc	 eax, 0
  002d0	89 41 fc	 mov	 DWORD PTR [ecx-4], eax
  002d3	0f 92 c2	 setb	 dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 1254 :                 --count;

  002d6	83 ee 01	 sub	 esi, 1
  002d9	75 e8		 jne	 SHORT $LL2@TryParseX
$LN68@TryParseX:

; 1255 :             }
; 1256 :         }
; 1257 :         CommitNumber(*o_abs);

  002db	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _o_sign$GSCopy$1$[ebp]
$LN3@TryParseX:
  002e1	ff 33		 push	 DWORD PTR [ebx]
  002e3	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1258 :         if ((*o_abs)->IS_ZERO)

  002e8	8b 03		 mov	 eax, DWORD PTR [ebx]
  002ea	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  002f0	83 c4 04	 add	 esp, 4
  002f3	f6 40 04 01	 test	 BYTE PTR [eax+4], 1
  002f7	50		 push	 eax
  002f8	74 1e		 je	 SHORT $LN13@TryParseX

; 1259 :         {
; 1260 :             root.DeallocateNumber(*o_abs);

  002fa	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1266 :         *result = 1;

  002ff	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _result$GSCopy$1$[ebp]
  00305	c6 06 00	 mov	 BYTE PTR [esi], 0

; 1267 :         return (PMC_STATUS_OK);

  00308	33 f6		 xor	 esi, esi
  0030a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00310	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  00316	eb 2e		 jmp	 SHORT $LN18@TryParseX
$LN13@TryParseX:

; 1261 :             *o_sign = 0;
; 1262 :             *o_abs = &number_zero;
; 1263 :         }
; 1264 :         else
; 1265 :             root.UnlinkNumber(*o_abs);

  00318	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1266 :         *result = 1;

  0031d	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _result$GSCopy$1$[ebp]

; 1267 :         return (PMC_STATUS_OK);

  00323	33 f6		 xor	 esi, esi
  00325	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
  0032b	eb 19		 jmp	 SHORT $LN18@TryParseX
$LN5@TryParseX:

; 1198 :         {
; 1199 :             *result = 0;

  0032d	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _result$GSCopy$1$[ebp]

; 1200 :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  00333	81 e6 00 00 00
	02		 and	 esi, 33554432		; 02000000H
  00339	f7 de		 neg	 esi
  0033b	1b f6		 sbb	 esi, esi
  0033d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00343	83 e6 f9	 and	 esi, -7			; fffffff9H
$LN18@TryParseX:

; 1267 :         return (PMC_STATUS_OK);

  00346	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0034d	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  00353	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00358	8b c6		 mov	 eax, esi

; 1268 :     }

  0035a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0035d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00364	59		 pop	 ecx
  00365	5f		 pop	 edi
  00366	5e		 pop	 esi
  00367	5b		 pop	 ebx
  00368	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036b	33 cd		 xor	 ecx, ebp
  0036d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00372	8b e5		 mov	 esp, ebp
  00374	5d		 pop	 ebp
  00375	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0:
  00000	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a b8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-328]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::TryParseX
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z
_TEXT	SEGMENT
_dummy_sign$ = -265					; size = 1
_state$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_int_part_buf$ = 20					; size = 4
_int_part_buf_size$ = 24				; size = 4
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::ParseAsHexNumberString, COMDAT

; 1183 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 14	 mov	 eax, DWORD PTR _int_part_buf$[ebp]
  00016	8b 4d 10	 mov	 ecx, DWORD PTR _format_option$[ebp]

; 1184 :         char dummy_sign;
; 1185 :         ParserState state(in_ptr, number_styles, format_option, &dummy_sign, int_part_buf, int_part_buf_size, nullptr, 0);

  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	ff 75 18	 push	 DWORD PTR _int_part_buf_size$[ebp]
  00020	50		 push	 eax
  00021	8d 85 f7 fe ff
	ff		 lea	 eax, DWORD PTR _dummy_sign$[ebp]
  00027	50		 push	 eax
  00028	51		 push	 ecx
  00029	ff 75 0c	 push	 DWORD PTR _number_styles$[ebp]
  0002c	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00032	ff 75 08	 push	 DWORD PTR _in_ptr$[ebp]
  00035	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState

; 480  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  0003a	f6 85 28 ff ff
	ff 01		 test	 BYTE PTR _state$[ebp+48], 1
  00041	74 0b		 je	 SHORT $LN4@ParseAsHex

; 481  :                 _source.SkipSpace();

  00043	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00049	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN4@ParseAsHex:

; 482  :             ParseAsIntegerPartNumberSequence();

  0004e	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00054	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 483  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00059	f6 85 28 ff ff
	ff 02		 test	 BYTE PTR _state$[ebp+48], 2
  00060	74 0b		 je	 SHORT $LN5@ParseAsHex

; 484  :                 _source.SkipSpace();

  00062	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00068	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN5@ParseAsHex:

; 485  :             if (_source.PeekChar() != L'\0')

  0006d	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _state$[ebp]
  00073	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00079	ff 10		 call	 DWORD PTR [eax]
  0007b	33 c9		 xor	 ecx, ecx
  0007d	66 85 c0	 test	 ax, ax
  00080	0f 94 c1	 sete	 cl

; 1186 :         return (state.ParseAsHexNumberString());

  00083	8b c1		 mov	 eax, ecx

; 1187 :     }

  00085	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00088	33 cd		 xor	 ecx, ebp
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::ParseAsHexNumberString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPA_WPAI@Z
_TEXT	SEGMENT
_source_count$1$ = -8					; size = 4
_r$1$ = -4						; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPA_WPAI@Z PROC ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString, COMDAT

; 1162 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1164 :         __UNIT_TYPE source_count = lstrlenW(source);

  00009	8b 7d 08	 mov	 edi, DWORD PTR _source$[ebp]
  0000c	57		 push	 edi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 157  :             return ((u + v - 1) / v);

  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _out_buf$[ebp]
  00016	83 e9 04	 sub	 ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 1164 :         __UNIT_TYPE source_count = lstrlenW(source);

  00019	89 45 f8	 mov	 DWORD PTR _source_count$1$[ebp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 157  :             return ((u + v - 1) / v);

  0001c	8d 50 07	 lea	 edx, DWORD PTR [eax+7]
  0001f	c1 ea 03	 shr	 edx, 3
  00022	8d 1c 91	 lea	 ebx, DWORD PTR [ecx+edx*4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 1167 :         int r = source_count % word_digit_count;

  00025	8b d0		 mov	 edx, eax
  00027	83 e2 07	 and	 edx, 7
  0002a	89 55 fc	 mov	 DWORD PTR _r$1$[ebp], edx

; 1168 :         if (r > 0)

  0002d	0f 8e 8d 00 00
	00		 jle	 $LN23@BuildBinar

; 1116 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr);

  00033	0f b7 0f	 movzx	 ecx, WORD PTR [edi]

; 49   :         if (c >= L'0' && c <= L'9')

  00036	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00039	66 83 f8 09	 cmp	 ax, 9
  0003d	77 05		 ja	 SHORT $LN13@BuildBinar

; 50   :             return (c - L'0');

  0003f	83 e9 30	 sub	 ecx, 48			; 00000030H
  00042	eb 1f		 jmp	 SHORT $LN12@BuildBinar
$LN13@BuildBinar:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00044	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  00047	66 83 f8 05	 cmp	 ax, 5
  0004b	77 05		 ja	 SHORT $LN14@BuildBinar

; 53   :             return (c - L'a' + 10);

  0004d	83 e9 57	 sub	 ecx, 87			; 00000057H
  00050	eb 11		 jmp	 SHORT $LN12@BuildBinar
$LN14@BuildBinar:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00052	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  00055	66 83 f8 05	 cmp	 ax, 5
  00059	77 05		 ja	 SHORT $LN15@BuildBinar

; 56   :             return (c - L'A' + 10);

  0005b	83 e9 37	 sub	 ecx, 55			; 00000037H
  0005e	eb 03		 jmp	 SHORT $LN12@BuildBinar
$LN15@BuildBinar:

; 57   :         return (-1);

  00060	83 c9 ff	 or	 ecx, -1
$LN12@BuildBinar:

; 1118 :         --count;

  00063	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00066	8d 77 02	 lea	 esi, DWORD PTR [edi+2]

; 1119 :         while (count > 0)

  00069	85 c0		 test	 eax, eax
  0006b	74 46		 je	 SHORT $LN10@BuildBinar
  0006d	8b f8		 mov	 edi, eax
  0006f	90		 npad	 1
$LL9@BuildBinar:

; 1120 :         {
; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  00070	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 49   :         if (c >= L'0' && c <= L'9')

  00073	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  00076	66 83 f8 09	 cmp	 ax, 9
  0007a	77 05		 ja	 SHORT $LN18@BuildBinar

; 50   :             return (c - L'0');

  0007c	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  0007f	eb 1f		 jmp	 SHORT $LN17@BuildBinar
$LN18@BuildBinar:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00081	8d 42 9f	 lea	 eax, DWORD PTR [edx-97]
  00084	66 83 f8 05	 cmp	 ax, 5
  00088	77 05		 ja	 SHORT $LN19@BuildBinar

; 53   :             return (c - L'a' + 10);

  0008a	8d 42 a9	 lea	 eax, DWORD PTR [edx-87]
  0008d	eb 11		 jmp	 SHORT $LN17@BuildBinar
$LN19@BuildBinar:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0008f	8d 42 bf	 lea	 eax, DWORD PTR [edx-65]
  00092	66 83 f8 05	 cmp	 ax, 5
  00096	77 05		 ja	 SHORT $LN20@BuildBinar

; 56   :             return (c - L'A' + 10);

  00098	8d 42 c9	 lea	 eax, DWORD PTR [edx-55]
  0009b	eb 03		 jmp	 SHORT $LN17@BuildBinar
$LN20@BuildBinar:

; 57   :         return (-1);

  0009d	83 c8 ff	 or	 eax, -1
$LN17@BuildBinar:

; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  000a0	c1 e1 04	 shl	 ecx, 4

; 1122 :             ++in_ptr;

  000a3	83 c6 02	 add	 esi, 2
  000a6	03 c8		 add	 ecx, eax

; 1123 :             --count;

  000a8	83 ef 01	 sub	 edi, 1
  000ab	75 c3		 jne	 SHORT $LL9@BuildBinar
  000ad	8b 7d 08	 mov	 edi, DWORD PTR _source$[ebp]
  000b0	8b 55 fc	 mov	 edx, DWORD PTR _r$1$[ebp]
$LN10@BuildBinar:

; 1169 :         {
; 1170 :             *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);
; 1171 :             in_ptr += r;
; 1172 :             source_count -= r;

  000b3	8b 45 f8	 mov	 eax, DWORD PTR _source_count$1$[ebp]
  000b6	8d 3c 57	 lea	 edi, DWORD PTR [edi+edx*2]
  000b9	89 0b		 mov	 DWORD PTR [ebx], ecx
  000bb	83 eb 04	 sub	 ebx, 4
  000be	2b c2		 sub	 eax, edx
$LN23@BuildBinar:

; 1173 :         }
; 1174 :         while (source_count > 0)

  000c0	85 c0		 test	 eax, eax
  000c2	74 22		 je	 SHORT $LN3@BuildBinar
  000c4	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
  000c7	c1 ee 03	 shr	 esi, 3
  000ca	46		 inc	 esi
  000cb	0f 1f 44 00 00	 npad	 5
$LL2@BuildBinar:

; 1175 :         {
; 1176 :             *out_ptr-- = Build1WordFromHexString(in_ptr);

  000d0	57		 push	 edi
  000d1	e8 00 00 00 00	 call	 ?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromHexString
  000d6	83 c4 04	 add	 esp, 4
  000d9	89 03		 mov	 DWORD PTR [ebx], eax

; 1177 :             in_ptr += word_digit_count;

  000db	83 c7 10	 add	 edi, 16			; 00000010H
  000de	8d 5b fc	 lea	 ebx, DWORD PTR [ebx-4]
  000e1	83 ee 01	 sub	 esi, 1
  000e4	75 ea		 jne	 SHORT $LL2@BuildBinar
$LN3@BuildBinar:
  000e6	5f		 pop	 edi

; 1178 :             source_count -= word_digit_count;
; 1179 :         }
; 1180 :     }

  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPA_WPAI@Z ENDP ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_W@Z
_TEXT	SEGMENT
_in_ptr$ = 8						; size = 4
?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_W@Z PROC ; Palmtree::Math::Core::Internal::Build1WordFromHexString, COMDAT

; 1129 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1130 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr++);

  00003	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00006	0f b7 0a	 movzx	 ecx, WORD PTR [edx]

; 49   :         if (c >= L'0' && c <= L'9')

  00009	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0000c	66 83 f8 09	 cmp	 ax, 9
  00010	77 05		 ja	 SHORT $LN8@Build1Word

; 50   :             return (c - L'0');

  00012	83 e9 30	 sub	 ecx, 48			; 00000030H
  00015	eb 1f		 jmp	 SHORT $LN7@Build1Word
$LN8@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00017	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  0001a	66 83 f8 05	 cmp	 ax, 5
  0001e	77 05		 ja	 SHORT $LN9@Build1Word

; 53   :             return (c - L'a' + 10);

  00020	83 e9 57	 sub	 ecx, 87			; 00000057H
  00023	eb 11		 jmp	 SHORT $LN7@Build1Word
$LN9@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00025	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  00028	66 83 f8 05	 cmp	 ax, 5
  0002c	77 05		 ja	 SHORT $LN10@Build1Word

; 56   :             return (c - L'A' + 10);

  0002e	83 e9 37	 sub	 ecx, 55			; 00000037H
  00031	eb 03		 jmp	 SHORT $LN7@Build1Word
$LN10@Build1Word:

; 57   :         return (-1);

  00033	83 c9 ff	 or	 ecx, -1
$LN7@Build1Word:
  00036	56		 push	 esi

; 1131 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 1132 :         {
; 1133 :             x = x * 16 + ParseHexDigit(*in_ptr++);
; 1134 :             x = x * 16 + ParseHexDigit(*in_ptr++);
; 1135 :             x = x * 16 + ParseHexDigit(*in_ptr++);
; 1136 :             x = x * 16 + ParseHexDigit(*in_ptr++);
; 1137 :             x = x * 16 + ParseHexDigit(*in_ptr++);
; 1138 :             x = x * 16 + ParseHexDigit(*in_ptr++);
; 1139 :             x = x * 16 + ParseHexDigit(*in_ptr++);
; 1140 :             x = x * 16 + ParseHexDigit(*in_ptr++);
; 1141 :         }
; 1142 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 1143 :         {
; 1144 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00037	0f b7 72 02	 movzx	 esi, WORD PTR [edx+2]

; 49   :         if (c >= L'0' && c <= L'9')

  0003b	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  0003e	66 83 f8 09	 cmp	 ax, 9
  00042	77 05		 ja	 SHORT $LN53@Build1Word

; 50   :             return (c - L'0');

  00044	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  00047	eb 1f		 jmp	 SHORT $LN52@Build1Word
$LN53@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00049	8d 46 9f	 lea	 eax, DWORD PTR [esi-97]
  0004c	66 83 f8 05	 cmp	 ax, 5
  00050	77 05		 ja	 SHORT $LN54@Build1Word

; 53   :             return (c - L'a' + 10);

  00052	8d 46 a9	 lea	 eax, DWORD PTR [esi-87]
  00055	eb 11		 jmp	 SHORT $LN52@Build1Word
$LN54@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00057	8d 46 bf	 lea	 eax, DWORD PTR [esi-65]
  0005a	66 83 f8 05	 cmp	 ax, 5
  0005e	77 05		 ja	 SHORT $LN55@Build1Word

; 56   :             return (c - L'A' + 10);

  00060	8d 46 c9	 lea	 eax, DWORD PTR [esi-55]
  00063	eb 03		 jmp	 SHORT $LN52@Build1Word
$LN55@Build1Word:

; 57   :         return (-1);

  00065	83 c8 ff	 or	 eax, -1
$LN52@Build1Word:

; 1145 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00068	0f b7 72 04	 movzx	 esi, WORD PTR [edx+4]
  0006c	c1 e1 04	 shl	 ecx, 4
  0006f	03 c8		 add	 ecx, eax

; 49   :         if (c >= L'0' && c <= L'9')

  00071	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  00074	66 83 f8 09	 cmp	 ax, 9
  00078	77 05		 ja	 SHORT $LN58@Build1Word

; 50   :             return (c - L'0');

  0007a	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  0007d	eb 1f		 jmp	 SHORT $LN57@Build1Word
$LN58@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  0007f	8d 46 9f	 lea	 eax, DWORD PTR [esi-97]
  00082	66 83 f8 05	 cmp	 ax, 5
  00086	77 05		 ja	 SHORT $LN59@Build1Word

; 53   :             return (c - L'a' + 10);

  00088	8d 46 a9	 lea	 eax, DWORD PTR [esi-87]
  0008b	eb 11		 jmp	 SHORT $LN57@Build1Word
$LN59@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0008d	8d 46 bf	 lea	 eax, DWORD PTR [esi-65]
  00090	66 83 f8 05	 cmp	 ax, 5
  00094	77 05		 ja	 SHORT $LN60@Build1Word

; 56   :             return (c - L'A' + 10);

  00096	8d 46 c9	 lea	 eax, DWORD PTR [esi-55]
  00099	eb 03		 jmp	 SHORT $LN57@Build1Word
$LN60@Build1Word:

; 57   :         return (-1);

  0009b	83 c8 ff	 or	 eax, -1
$LN57@Build1Word:

; 1146 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0009e	0f b7 72 06	 movzx	 esi, WORD PTR [edx+6]
  000a2	c1 e1 04	 shl	 ecx, 4
  000a5	03 c8		 add	 ecx, eax

; 49   :         if (c >= L'0' && c <= L'9')

  000a7	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  000aa	66 83 f8 09	 cmp	 ax, 9
  000ae	77 05		 ja	 SHORT $LN63@Build1Word

; 50   :             return (c - L'0');

  000b0	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  000b3	eb 1f		 jmp	 SHORT $LN62@Build1Word
$LN63@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  000b5	8d 46 9f	 lea	 eax, DWORD PTR [esi-97]
  000b8	66 83 f8 05	 cmp	 ax, 5
  000bc	77 05		 ja	 SHORT $LN64@Build1Word

; 53   :             return (c - L'a' + 10);

  000be	8d 46 a9	 lea	 eax, DWORD PTR [esi-87]
  000c1	eb 11		 jmp	 SHORT $LN62@Build1Word
$LN64@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  000c3	8d 46 bf	 lea	 eax, DWORD PTR [esi-65]
  000c6	66 83 f8 05	 cmp	 ax, 5
  000ca	77 05		 ja	 SHORT $LN65@Build1Word

; 56   :             return (c - L'A' + 10);

  000cc	8d 46 c9	 lea	 eax, DWORD PTR [esi-55]
  000cf	eb 03		 jmp	 SHORT $LN62@Build1Word
$LN65@Build1Word:

; 57   :         return (-1);

  000d1	83 c8 ff	 or	 eax, -1
$LN62@Build1Word:

; 1147 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  000d4	0f b7 72 08	 movzx	 esi, WORD PTR [edx+8]
  000d8	c1 e1 04	 shl	 ecx, 4
  000db	03 c8		 add	 ecx, eax

; 49   :         if (c >= L'0' && c <= L'9')

  000dd	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  000e0	66 83 f8 09	 cmp	 ax, 9
  000e4	77 05		 ja	 SHORT $LN68@Build1Word

; 50   :             return (c - L'0');

  000e6	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  000e9	eb 1f		 jmp	 SHORT $LN67@Build1Word
$LN68@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  000eb	8d 46 9f	 lea	 eax, DWORD PTR [esi-97]
  000ee	66 83 f8 05	 cmp	 ax, 5
  000f2	77 05		 ja	 SHORT $LN69@Build1Word

; 53   :             return (c - L'a' + 10);

  000f4	8d 46 a9	 lea	 eax, DWORD PTR [esi-87]
  000f7	eb 11		 jmp	 SHORT $LN67@Build1Word
$LN69@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  000f9	8d 46 bf	 lea	 eax, DWORD PTR [esi-65]
  000fc	66 83 f8 05	 cmp	 ax, 5
  00100	77 05		 ja	 SHORT $LN70@Build1Word

; 56   :             return (c - L'A' + 10);

  00102	8d 46 c9	 lea	 eax, DWORD PTR [esi-55]
  00105	eb 03		 jmp	 SHORT $LN67@Build1Word
$LN70@Build1Word:

; 57   :         return (-1);

  00107	83 c8 ff	 or	 eax, -1
$LN67@Build1Word:

; 1148 :         }
; 1149 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 1150 :         {
; 1151 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0010a	0f b7 72 0a	 movzx	 esi, WORD PTR [edx+10]
  0010e	c1 e1 04	 shl	 ecx, 4
  00111	03 c8		 add	 ecx, eax

; 49   :         if (c >= L'0' && c <= L'9')

  00113	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  00116	66 83 f8 09	 cmp	 ax, 9
  0011a	77 05		 ja	 SHORT $LN73@Build1Word

; 50   :             return (c - L'0');

  0011c	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  0011f	eb 1f		 jmp	 SHORT $LN72@Build1Word
$LN73@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00121	8d 46 9f	 lea	 eax, DWORD PTR [esi-97]
  00124	66 83 f8 05	 cmp	 ax, 5
  00128	77 05		 ja	 SHORT $LN74@Build1Word

; 53   :             return (c - L'a' + 10);

  0012a	8d 46 a9	 lea	 eax, DWORD PTR [esi-87]
  0012d	eb 11		 jmp	 SHORT $LN72@Build1Word
$LN74@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0012f	8d 46 bf	 lea	 eax, DWORD PTR [esi-65]
  00132	66 83 f8 05	 cmp	 ax, 5
  00136	77 05		 ja	 SHORT $LN75@Build1Word

; 56   :             return (c - L'A' + 10);

  00138	8d 46 c9	 lea	 eax, DWORD PTR [esi-55]
  0013b	eb 03		 jmp	 SHORT $LN72@Build1Word
$LN75@Build1Word:

; 57   :         return (-1);

  0013d	83 c8 ff	 or	 eax, -1
$LN72@Build1Word:

; 1152 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00140	0f b7 72 0c	 movzx	 esi, WORD PTR [edx+12]
  00144	c1 e1 04	 shl	 ecx, 4
  00147	03 c8		 add	 ecx, eax

; 49   :         if (c >= L'0' && c <= L'9')

  00149	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  0014c	66 83 f8 09	 cmp	 ax, 9
  00150	77 05		 ja	 SHORT $LN78@Build1Word

; 50   :             return (c - L'0');

  00152	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  00155	eb 1f		 jmp	 SHORT $LN77@Build1Word
$LN78@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00157	8d 46 9f	 lea	 eax, DWORD PTR [esi-97]
  0015a	66 83 f8 05	 cmp	 ax, 5
  0015e	77 05		 ja	 SHORT $LN79@Build1Word

; 53   :             return (c - L'a' + 10);

  00160	8d 46 a9	 lea	 eax, DWORD PTR [esi-87]
  00163	eb 11		 jmp	 SHORT $LN77@Build1Word
$LN79@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00165	8d 46 bf	 lea	 eax, DWORD PTR [esi-65]
  00168	66 83 f8 05	 cmp	 ax, 5
  0016c	77 05		 ja	 SHORT $LN80@Build1Word

; 56   :             return (c - L'A' + 10);

  0016e	8d 46 c9	 lea	 eax, DWORD PTR [esi-55]
  00171	eb 03		 jmp	 SHORT $LN77@Build1Word
$LN80@Build1Word:

; 57   :         return (-1);

  00173	83 c8 ff	 or	 eax, -1
$LN77@Build1Word:

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00176	0f b7 52 0e	 movzx	 edx, WORD PTR [edx+14]
  0017a	c1 e1 04	 shl	 ecx, 4
  0017d	03 c8		 add	 ecx, eax

; 49   :         if (c >= L'0' && c <= L'9')

  0017f	5e		 pop	 esi
  00180	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  00183	66 83 f8 09	 cmp	 ax, 9
  00187	77 0a		 ja	 SHORT $LN83@Build1Word

; 50   :             return (c - L'0');

  00189	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0018c	c1 e1 04	 shl	 ecx, 4
  0018f	03 c1		 add	 eax, ecx

; 1157 :         }
; 1158 :         return (x);
; 1159 :     }

  00191	5d		 pop	 ebp
  00192	c3		 ret	 0
$LN83@Build1Word:

; 52   :         if (c >= L'a' && c <= L'f')

  00193	8d 42 9f	 lea	 eax, DWORD PTR [edx-97]
  00196	66 83 f8 05	 cmp	 ax, 5
  0019a	77 0a		 ja	 SHORT $LN84@Build1Word

; 53   :             return (c - L'a' + 10);

  0019c	8d 42 a9	 lea	 eax, DWORD PTR [edx-87]

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0019f	c1 e1 04	 shl	 ecx, 4
  001a2	03 c1		 add	 eax, ecx

; 1157 :         }
; 1158 :         return (x);
; 1159 :     }

  001a4	5d		 pop	 ebp
  001a5	c3		 ret	 0
$LN84@Build1Word:

; 55   :         if (c >= L'A' && c <= L'F')

  001a6	8d 42 bf	 lea	 eax, DWORD PTR [edx-65]
  001a9	66 83 f8 05	 cmp	 ax, 5
  001ad	77 0a		 ja	 SHORT $LN85@Build1Word

; 56   :             return (c - L'A' + 10);

  001af	8d 42 c9	 lea	 eax, DWORD PTR [edx-55]

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  001b2	c1 e1 04	 shl	 ecx, 4
  001b5	03 c1		 add	 eax, ecx

; 1157 :         }
; 1158 :         return (x);
; 1159 :     }

  001b7	5d		 pop	 ebp
  001b8	c3		 ret	 0
$LN85@Build1Word:

; 57   :         return (-1);

  001b9	83 c8 ff	 or	 eax, -1

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  001bc	c1 e1 04	 shl	 ecx, 4
  001bf	03 c1		 add	 eax, ecx

; 1157 :         }
; 1158 :         return (x);
; 1159 :     }

  001c1	5d		 pop	 ebp
  001c2	c3		 ret	 0
?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_W@Z ENDP ; Palmtree::Math::Core::Internal::Build1WordFromHexString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z
_TEXT	SEGMENT
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z PROC ; Palmtree::Math::Core::Internal::BuildLeading1WordFromHexString, COMDAT

; 1115 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1116 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr);

  00004	8b 75 08	 mov	 esi, DWORD PTR _in_ptr$[ebp]
  00007	57		 push	 edi
  00008	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 49   :         if (c >= L'0' && c <= L'9')

  0000b	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0000e	66 83 f8 09	 cmp	 ax, 9
  00012	77 05		 ja	 SHORT $LN6@BuildLeadi

; 50   :             return (c - L'0');

  00014	83 e9 30	 sub	 ecx, 48			; 00000030H
  00017	eb 1f		 jmp	 SHORT $LN5@BuildLeadi
$LN6@BuildLeadi:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00019	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  0001c	66 83 f8 05	 cmp	 ax, 5
  00020	77 05		 ja	 SHORT $LN7@BuildLeadi

; 53   :             return (c - L'a' + 10);

  00022	83 e9 57	 sub	 ecx, 87			; 00000057H
  00025	eb 11		 jmp	 SHORT $LN5@BuildLeadi
$LN7@BuildLeadi:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00027	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  0002a	66 83 f8 05	 cmp	 ax, 5
  0002e	77 05		 ja	 SHORT $LN8@BuildLeadi

; 56   :             return (c - L'A' + 10);

  00030	83 e9 37	 sub	 ecx, 55			; 00000037H
  00033	eb 03		 jmp	 SHORT $LN5@BuildLeadi
$LN8@BuildLeadi:

; 57   :         return (-1);

  00035	83 c9 ff	 or	 ecx, -1
$LN5@BuildLeadi:

; 1116 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr);

  00038	8b 7d 0c	 mov	 edi, DWORD PTR _count$[ebp]

; 1117 :         ++in_ptr;

  0003b	83 c6 02	 add	 esi, 2
  0003e	83 ef 01	 sub	 edi, 1

; 1118 :         --count;
; 1119 :         while (count > 0)

  00041	74 3d		 je	 SHORT $LN19@BuildLeadi
$LL2@BuildLeadi:

; 1120 :         {
; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  00043	0f b7 16	 movzx	 edx, WORD PTR [esi]

; 49   :         if (c >= L'0' && c <= L'9')

  00046	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  00049	66 83 f8 09	 cmp	 ax, 9
  0004d	77 05		 ja	 SHORT $LN11@BuildLeadi

; 50   :             return (c - L'0');

  0004f	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  00052	eb 1f		 jmp	 SHORT $LN10@BuildLeadi
$LN11@BuildLeadi:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00054	8d 42 9f	 lea	 eax, DWORD PTR [edx-97]
  00057	66 83 f8 05	 cmp	 ax, 5
  0005b	77 05		 ja	 SHORT $LN12@BuildLeadi

; 53   :             return (c - L'a' + 10);

  0005d	8d 42 a9	 lea	 eax, DWORD PTR [edx-87]
  00060	eb 11		 jmp	 SHORT $LN10@BuildLeadi
$LN12@BuildLeadi:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00062	8d 42 bf	 lea	 eax, DWORD PTR [edx-65]
  00065	66 83 f8 05	 cmp	 ax, 5
  00069	77 05		 ja	 SHORT $LN13@BuildLeadi

; 56   :             return (c - L'A' + 10);

  0006b	8d 42 c9	 lea	 eax, DWORD PTR [edx-55]
  0006e	eb 03		 jmp	 SHORT $LN10@BuildLeadi
$LN13@BuildLeadi:

; 57   :         return (-1);

  00070	83 c8 ff	 or	 eax, -1
$LN10@BuildLeadi:

; 1120 :         {
; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  00073	c1 e1 04	 shl	 ecx, 4

; 1122 :             ++in_ptr;

  00076	83 c6 02	 add	 esi, 2
  00079	03 c8		 add	 ecx, eax

; 1123 :             --count;

  0007b	83 ef 01	 sub	 edi, 1
  0007e	75 c3		 jne	 SHORT $LL2@BuildLeadi
$LN19@BuildLeadi:
  00080	5f		 pop	 edi

; 1124 :         }
; 1125 :         return (x);
; 1126 :     }

  00081	8b c1		 mov	 eax, ecx
  00083	5e		 pop	 esi
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z ENDP ; Palmtree::Math::Core::Internal::BuildLeading1WordFromHexString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
_TEXT	SEGMENT
_root$2 = -332						; size = 16
_o_abs$GSCopy$1$ = -316					; size = 4
_root$ = -312						; size = 16
_source_count$1$ = -296					; size = 4
_out_buf$1$ = -296					; size = 4
_r$1$ = -292						; size = 4
_frac_part_buf$1$ = -292				; size = 4
tv664 = -292						; size = 4
_result$GSCopy$1$ = -288				; size = 4
_work_buf$1$ = -284					; size = 4
_int_part_buf$1$ = -284					; size = 4
_o_sign$GSCopy$1$ = -280				; size = 4
_bin_buf$1$ = -280					; size = 4
_state$3 = -276						; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_result$ = 28						; size = 4
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::TryParseDN, COMDAT

; 967  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]

; 968  : #ifdef _M_IX86
; 969  :         int word_digit_count = 9;
; 970  : #elif defined(_M_X64)
; 971  :         int word_digit_count = 19;
; 972  : #else
; 973  : #error unknown platform
; 974  : #endif
; 975  : 
; 976  :         ResourceHolderUINT root;

  00031	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  00037	8b 5d 08	 mov	 ebx, DWORD PTR _source$[ebp]
  0003a	8b 7d 10	 mov	 edi, DWORD PTR _format_option$[ebp]
  0003d	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _o_sign$GSCopy$1$[ebp], eax
  00043	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  00046	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _o_abs$GSCopy$1$[ebp], eax
  0004c	8b 45 1c	 mov	 eax, DWORD PTR _result$[ebp]
  0004f	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _result$GSCopy$1$[ebp], eax
  00055	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 977  : 
; 978  :         __UNIT_TYPE source_len = lstrlenW(source);

  00061	53		 push	 ebx
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4

; 979  : 
; 980  :         size_t int_part_buf_count = source_len + 1;
; 981  :         wchar_t* int_part_buf = root.AllocateString(int_part_buf_count);

  00068	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  0006e	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString

; 982  :         size_t frac_part_buf_count = source_len + 1;
; 983  :         wchar_t* frac_part_buf = root.AllocateString(frac_part_buf_count);

  00077	56		 push	 esi
  00078	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  0007e	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _int_part_buf$1$[ebp], eax
  00084	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString

; 550  :         ParserState state(in_ptr, number_styles, format_option, sign, int_part_buf, int_part_buf_size, frac_part_buf, frac_part_buf_size);

  00089	56		 push	 esi
  0008a	50		 push	 eax
  0008b	56		 push	 esi
  0008c	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _int_part_buf$1$[ebp]
  00092	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp]

; 982  :         size_t frac_part_buf_count = source_len + 1;
; 983  :         wchar_t* frac_part_buf = root.AllocateString(frac_part_buf_count);

  00098	89 85 dc fe ff
	ff		 mov	 DWORD PTR _frac_part_buf$1$[ebp], eax

; 550  :         ParserState state(in_ptr, number_styles, format_option, sign, int_part_buf, int_part_buf_size, frac_part_buf, frac_part_buf_size);

  0009e	ff b5 e8 fe ff
	ff		 push	 DWORD PTR _o_sign$GSCopy$1$[ebp]
  000a4	57		 push	 edi
  000a5	8b 7d 0c	 mov	 edi, DWORD PTR _number_styles$[ebp]
  000a8	57		 push	 edi
  000a9	53		 push	 ebx
  000aa	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState

; 551  :         return (state.ParseAsDecimalNumberString());

  000af	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR _state$3[ebp]
  000b5	e8 00 00 00 00	 call	 ?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString

; 984  :         bool result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, o_sign, int_part_buf, int_part_buf_count, frac_part_buf, frac_part_buf_count);
; 985  :         root.CheckString(int_part_buf);

  000ba	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _int_part_buf$1$[ebp]
  000c0	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]

; 551  :         return (state.ParseAsDecimalNumberString());

  000c6	8b f0		 mov	 esi, eax

; 984  :         bool result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, o_sign, int_part_buf, int_part_buf_count, frac_part_buf, frac_part_buf_count);
; 985  :         root.CheckString(int_part_buf);

  000c8	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 986  :         root.CheckString(frac_part_buf);

  000cd	8b 9d dc fe ff
	ff		 mov	 ebx, DWORD PTR _frac_part_buf$1$[ebp]
  000d3	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  000d9	53		 push	 ebx
  000da	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 987  :         if (!result_parsing)

  000df	85 f6		 test	 esi, esi
  000e1	75 1a		 jne	 SHORT $LN9@TryParseDN

; 988  :         {
; 989  :             *result = 0;

  000e3	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _result$GSCopy$1$[ebp]

; 990  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  000e9	81 e7 00 00 00
	02		 and	 edi, 33554432		; 02000000H

; 620  :             source_count -= r;

  000ef	f7 df		 neg	 edi
  000f1	1b ff		 sbb	 edi, edi

; 988  :         {
; 989  :             *result = 0;

  000f3	89 30		 mov	 DWORD PTR [eax], esi

; 620  :             source_count -= r;

  000f5	83 e7 f9	 and	 edi, -7			; fffffff9H
  000f8	e9 1e 03 00 00	 jmp	 $LN39@TryParseDN
$LN9@TryParseDN:

; 991  :                 return (PMC_STATUS_FORMAT_ERROR);
; 992  :             return (PMC_STATUS_OK);
; 993  :         }
; 994  :         if (int_part_buf[0] == L'\0' && (frac_part_buf[0] == L'\0' || frac_part_buf[0] == L'.' && frac_part_buf[1] == L'\0'))

  000fd	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR _int_part_buf$1$[ebp]
  00103	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00106	66 85 c9	 test	 cx, cx
  00109	75 35		 jne	 SHORT $LN11@TryParseDN
  0010b	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  0010e	66 85 c0	 test	 ax, ax
  00111	74 0b		 je	 SHORT $LN12@TryParseDN
  00113	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00116	75 28		 jne	 SHORT $LN11@TryParseDN
  00118	66 39 4b 02	 cmp	 WORD PTR [ebx+2], cx
  0011c	75 22		 jne	 SHORT $LN11@TryParseDN
$LN12@TryParseDN:

; 995  :         {
; 996  :             // 整数部と小数部がともに空ならばエラーとする
; 997  :             *result = 0;

  0011e	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _result$GSCopy$1$[ebp]
  00124	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 998  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  0012a	f7 c7 00 00 00
	02		 test	 edi, 33554432		; 02000000H
  00130	0f 84 e3 02 00
	00		 je	 $LN13@TryParseDN

; 999  :                 return (PMC_STATUS_FORMAT_ERROR);

  00136	bf f9 ff ff ff	 mov	 edi, -7			; fffffff9H
  0013b	e9 db 02 00 00	 jmp	 $LN39@TryParseDN
$LN11@TryParseDN:

; 1000 :             return (PMC_STATUS_OK);
; 1001 :         }
; 1002 : 
; 1003 :         if (*o_sign < 0 && frac_part_buf[0] != L'\0')

  00140	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _o_sign$GSCopy$1$[ebp]
  00146	80 38 00	 cmp	 BYTE PTR [eax], 0
  00149	7d 1f		 jge	 SHORT $LN15@TryParseDN
  0014b	66 83 3b 00	 cmp	 WORD PTR [ebx], 0
  0014f	74 19		 je	 SHORT $LN15@TryParseDN

; 1004 :         {
; 1005 :             // 負の符号が含まれていて、かつ小数部が存在する場合はエラー (OverflowException) とする。(小数点のみや小数部が '0' の連続のみでも存在するうちに入る)
; 1006 :             // ※エラーの条件がそうなっている根拠は不明だが実際問題として uint.Parse などではそうなっているため、それに合わせる。
; 1007 : 
; 1008 :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) == 0)

  00151	f7 c7 00 00 00
	01		 test	 edi, 16777216		; 01000000H
  00157	75 11		 jne	 SHORT $LN15@TryParseDN

; 1009 :             {
; 1010 :                 // 負数が許可されていない場合
; 1011 : 
; 1012 :                 *result = 0;

  00159	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _result$GSCopy$1$[ebp]
  0015f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00165	e9 94 00 00 00	 jmp	 $LN95@TryParseDN
$LN15@TryParseDN:

; 1013 :                 if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)
; 1014 :                     return (PMC_STATUS_OVERFLOW);
; 1015 :                 return (PMC_STATUS_OK);
; 1016 :             }
; 1017 :         }
; 1018 : 
; 1019 :         if (int_part_buf[0] == L'0')

  0016a	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0016d	75 34		 jne	 SHORT $LN71@TryParseDN

; 1020 :         {
; 1021 :             // 整数部の先行する 0 を削除する
; 1022 :             wchar_t* s_ptr = int_part_buf;

  0016f	8b ce		 mov	 ecx, esi

; 1023 :             wchar_t* d_ptr = int_part_buf;

  00171	8b d6		 mov	 edx, esi
$LL2@TryParseDN:

; 1024 :             while (*s_ptr == L'0')

  00173	0f b7 41 02	 movzx	 eax, WORD PTR [ecx+2]

; 1025 :                 ++s_ptr;

  00177	83 c1 02	 add	 ecx, 2
  0017a	83 f8 30	 cmp	 eax, 48			; 00000030H
  0017d	74 f4		 je	 SHORT $LL2@TryParseDN

; 1026 :             for (;;)
; 1027 :             {
; 1028 :                 *d_ptr = *s_ptr;

  0017f	66 89 06	 mov	 WORD PTR [esi], ax

; 1029 :                 if (*s_ptr == L'\0')

  00182	66 83 39 00	 cmp	 WORD PTR [ecx], 0
  00186	74 1b		 je	 SHORT $LN71@TryParseDN
  00188	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@TryParseDN:

; 1026 :             for (;;)
; 1027 :             {
; 1028 :                 *d_ptr = *s_ptr;

  00190	66 8b 41 02	 mov	 ax, WORD PTR [ecx+2]

; 1030 :                     break;
; 1031 :                 ++s_ptr;

  00194	8d 49 02	 lea	 ecx, DWORD PTR [ecx+2]

; 1032 :                 ++d_ptr;

  00197	8d 52 02	 lea	 edx, DWORD PTR [edx+2]
  0019a	66 89 02	 mov	 WORD PTR [edx], ax
  0019d	66 83 39 00	 cmp	 WORD PTR [ecx], 0
  001a1	75 ed		 jne	 SHORT $LL4@TryParseDN
$LN71@TryParseDN:

; 1033 :             }
; 1034 :         }
; 1035 : 
; 1036 :         // 小数部の末尾の 0 を削除する
; 1037 :         wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

  001a3	53		 push	 ebx
  001a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  001aa	8d 04 43	 lea	 eax, DWORD PTR [ebx+eax*2]

; 1038 :         while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

  001ad	3b c3		 cmp	 eax, ebx
  001af	76 0e		 jbe	 SHORT $LN8@TryParseDN
$LL7@TryParseDN:
  001b1	66 83 78 fe 30	 cmp	 WORD PTR [eax-2], 48	; 00000030H
  001b6	75 07		 jne	 SHORT $LN8@TryParseDN

; 1039 :             --frac_ptr;

  001b8	83 c0 fe	 add	 eax, -2			; fffffffeH
  001bb	3b c3		 cmp	 eax, ebx
  001bd	77 f2		 ja	 SHORT $LL7@TryParseDN
$LN8@TryParseDN:

; 1040 :         *frac_ptr = L'\0';

  001bf	33 c9		 xor	 ecx, ecx
  001c1	66 89 08	 mov	 WORD PTR [eax], cx

; 1041 : 
; 1042 :         // 小数部が 0 ではない場合、エラーとする
; 1043 :         if (!(frac_part_buf[0] == L'\0' || frac_part_buf[0] == L'.' && frac_part_buf[1] == L'\0'))

  001c4	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  001c7	66 85 c0	 test	 ax, ax
  001ca	74 0b		 je	 SHORT $LN19@TryParseDN
  001cc	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  001cf	75 25		 jne	 SHORT $LN20@TryParseDN
  001d1	66 39 4b 02	 cmp	 WORD PTR [ebx+2], cx
  001d5	75 1f		 jne	 SHORT $LN20@TryParseDN
$LN19@TryParseDN:

; 1044 :         {
; 1045 :             *result = 0;
; 1046 :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)
; 1047 :                 return (PMC_STATUS_OVERFLOW);
; 1048 :             return (PMC_STATUS_OK);
; 1049 :         }
; 1050 : 
; 1051 :         if (int_part_buf[0] == L'\0')

  001d7	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _o_sign$GSCopy$1$[ebp]
  001dd	66 39 0e	 cmp	 WORD PTR [esi], cx
  001e0	75 08		 jne	 SHORT $LN22@TryParseDN

; 1052 :         {
; 1053 :             // 整数部が空である場合
; 1054 : 
; 1055 :             // 符号を 0 に 修正する
; 1056 :             *o_sign = 0;

  001e2	88 08		 mov	 BYTE PTR [eax], cl

; 1057 : 
; 1058 :             // 整数部に 0 を設定する
; 1059 :             int_part_buf[0] = L'0';

  001e4	c7 06 30 00 00
	00		 mov	 DWORD PTR [esi], 48	; 00000030H
$LN22@TryParseDN:

; 1060 :             int_part_buf[1] = L'\0';
; 1061 :         }
; 1062 : 
; 1063 :         if (*o_sign < 0)

  001ea	38 08		 cmp	 BYTE PTR [eax], cl
  001ec	7d 26		 jge	 SHORT $LN24@TryParseDN

; 1064 :         {
; 1065 :             // 数値が負である場合
; 1066 : 
; 1067 :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) == 0)

  001ee	f7 c7 00 00 00
	01		 test	 edi, 16777216		; 01000000H
  001f4	75 1e		 jne	 SHORT $LN24@TryParseDN
$LN20@TryParseDN:

; 1111 :         return (PMC_STATUS_OK);

  001f6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _result$GSCopy$1$[ebp]
  001fc	89 08		 mov	 DWORD PTR [eax], ecx
$LN95@TryParseDN:
  001fe	f7 c7 00 00 00
	02		 test	 edi, 33554432		; 02000000H
  00204	0f 84 0f 02 00
	00		 je	 $LN13@TryParseDN
  0020a	bf fc ff ff ff	 mov	 edi, -4			; fffffffcH
  0020f	e9 07 02 00 00	 jmp	 $LN39@TryParseDN
$LN24@TryParseDN:

; 1068 :             {
; 1069 :                 // 負数が許可されていない場合
; 1070 : 
; 1071 :                 *result = 0;
; 1072 :                 if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)
; 1073 :                     return (PMC_STATUS_OVERFLOW);
; 1074 :                 return (PMC_STATUS_OK);
; 1075 :             }
; 1076 :         }
; 1077 : 
; 1078 :         // 小数部は捨てる
; 1079 :         root.DeallocateString(frac_part_buf);

  00214	53		 push	 ebx
  00215	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  0021b	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1082 :         __UNIT_TYPE* bin_buf = root.AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT);

  00220	56		 push	 esi
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :             return ((u + v - 1) / v);

  00227	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  0022a	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0022f	f7 e1		 mul	 ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 1082 :         __UNIT_TYPE* bin_buf = root.AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT);

  00231	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :             return ((u + v - 1) / v);

  00237	d1 ea		 shr	 edx, 1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 1082 :         __UNIT_TYPE* bin_buf = root.AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT);

  00239	c1 e2 05	 shl	 edx, 5
  0023c	52		 push	 edx
  0023d	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock

; 614  :         __UNIT_TYPE source_count = lstrlenW(source);

  00242	8b de		 mov	 ebx, esi

; 1082 :         __UNIT_TYPE* bin_buf = root.AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT);

  00244	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _bin_buf$1$[ebp], eax

; 614  :         __UNIT_TYPE source_count = lstrlenW(source);

  0024a	53		 push	 ebx
  0024b	8b f8		 mov	 edi, eax
  0024d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00253	8b c8		 mov	 ecx, eax

; 615  :         int r = source_count % word_digit_count;

  00255	c7 85 dc fe ff
	ff 09 00 00 00	 mov	 DWORD PTR tv664[ebp], 9
  0025f	33 d2		 xor	 edx, edx
  00261	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _source_count$1$[ebp], ecx
  00267	f7 b5 dc fe ff
	ff		 div	 DWORD PTR tv664[ebp]
  0026d	8b c2		 mov	 eax, edx
  0026f	89 85 dc fe ff
	ff		 mov	 DWORD PTR _r$1$[ebp], eax

; 616  :         if (r > 0)

  00275	85 c0		 test	 eax, eax
  00277	7e 45		 jle	 SHORT $LN91@TryParseDN

; 556  :         __UNIT_TYPE x = 0;

  00279	33 ff		 xor	 edi, edi

; 557  :         while (count > 0)

  0027b	85 c0		 test	 eax, eax
  0027d	74 2f		 je	 SHORT $LN53@TryParseDN
  0027f	90		 npad	 1
$LL52@TryParseDN:

; 558  :         {
; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00280	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00283	8d 76 02	 lea	 esi, DWORD PTR [esi+2]

; 42   :         if (c >= L'0' && c <= L'9')

  00286	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00289	66 83 f8 09	 cmp	 ax, 9
  0028d	77 05		 ja	 SHORT $LN56@TryParseDN

; 43   :             return (c - L'0');

  0028f	83 e9 30	 sub	 ecx, 48			; 00000030H
  00292	eb 03		 jmp	 SHORT $LN55@TryParseDN
$LN56@TryParseDN:

; 44   :         return (-1);

  00294	83 c9 ff	 or	 ecx, -1
$LN55@TryParseDN:

; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00297	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  0029a	8d 3c 41	 lea	 edi, DWORD PTR [ecx+eax*2]

; 560  :             --count;

  0029d	83 ea 01	 sub	 edx, 1
  002a0	75 de		 jne	 SHORT $LL52@TryParseDN
  002a2	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _r$1$[ebp]
  002a8	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _source_count$1$[ebp]
$LN53@TryParseDN:

; 618  :             *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

  002ae	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _bin_buf$1$[ebp]

; 619  :             in_ptr += r;

  002b4	8d 34 43	 lea	 esi, DWORD PTR [ebx+eax*2]

; 620  :             source_count -= r;

  002b7	2b c8		 sub	 ecx, eax
  002b9	89 3a		 mov	 DWORD PTR [edx], edi
  002bb	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
$LN91@TryParseDN:

; 621  :         }
; 622  :         while (source_count > 0)

  002be	85 c9		 test	 ecx, ecx
  002c0	74 2a		 je	 SHORT $LN48@TryParseDN
  002c2	49		 dec	 ecx
  002c3	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  002c8	f7 e1		 mul	 ecx
  002ca	8b da		 mov	 ebx, edx
  002cc	d1 eb		 shr	 ebx, 1
  002ce	43		 inc	 ebx
  002cf	90		 npad	 1
$LL47@TryParseDN:

; 623  :         {
; 624  :             *out_ptr++ = Build1WordFromDecimalString(in_ptr);

  002d0	56		 push	 esi
  002d1	e8 00 00 00 00	 call	 ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString
  002d6	89 07		 mov	 DWORD PTR [edi], eax
  002d8	83 c4 04	 add	 esp, 4
  002db	83 c7 04	 add	 edi, 4

; 625  :             in_ptr += word_digit_count;

  002de	83 c6 12	 add	 esi, 18			; 00000012H
  002e1	83 eb 01	 sub	 ebx, 1
  002e4	75 ea		 jne	 SHORT $LL47@TryParseDN
  002e6	8b 9d e4 fe ff
	ff		 mov	 ebx, DWORD PTR _int_part_buf$1$[ebp]
$LN48@TryParseDN:

; 626  :             source_count -= word_digit_count;
; 627  :         }
; 628  :         *out_buf_count = out_ptr - out_buf;

  002ec	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _bin_buf$1$[ebp]

; 1083 :         __UNIT_TYPE bin_buf_count;
; 1084 :         BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);
; 1085 :         root.CheckBlock(bin_buf);

  002f2	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]

; 628  :         *out_buf_count = out_ptr - out_buf;

  002f8	2b f8		 sub	 edi, eax

; 1083 :         __UNIT_TYPE bin_buf_count;
; 1084 :         BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);
; 1085 :         root.CheckBlock(bin_buf);

  002fa	50		 push	 eax

; 628  :         *out_buf_count = out_ptr - out_buf;

  002fb	c1 ff 02	 sar	 edi, 2

; 1083 :         __UNIT_TYPE bin_buf_count;
; 1084 :         BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);
; 1085 :         root.CheckBlock(bin_buf);

  002fe	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 1086 :         root.DeallocateString(int_part_buf);

  00303	53		 push	 ebx
  00304	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  0030a	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1087 : 
; 1088 :         // 10^word_digit_count を基数としたバイト列を 10 を基数としたバイト列に変換する
; 1089 :         __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;

  0030f	8b f7		 mov	 esi, edi

; 1090 :         *o_abs = root.AllocateNumber(o_bit_count);

  00311	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  00317	c1 e6 05	 shl	 esi, 5
  0031a	56		 push	 esi
  0031b	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00320	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _o_abs$GSCopy$1$[ebp]
  00326	89 01		 mov	 DWORD PTR [ecx], eax

; 949  :         ResourceHolderUINT root;

  00328	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$2[ebp]

; 1091 :         ConvertCardinalNumber(bin_buf, bin_buf_count, (*o_abs)->BLOCK);

  0032e	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00331	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _out_buf$1$[ebp], eax

; 949  :         ResourceHolderUINT root;

  00337	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0033c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 950  :         __UNIT_TYPE* work_buf = root.AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1));

  00340	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  00343	50		 push	 eax
  00344	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$2[ebp]
  0034a	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock

; 951  :         __UNIT_TYPE work_buf_count = 1;
; 952  :         work_buf[0] = in_buf[0];

  0034f	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _bin_buf$1$[ebp]
  00355	bb 01 00 00 00	 mov	 ebx, 1
  0035a	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _work_buf$1$[ebp], eax
  00360	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 953  :         ++in_buf;

  00362	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00365	89 08		 mov	 DWORD PTR [eax], ecx

; 954  :         --in_buf_count;

  00367	83 c7 ff	 add	 edi, -1

; 955  :         while (in_buf_count > 0)

  0036a	74 26		 je	 SHORT $LN60@TryParseDN
  0036c	0f 1f 40 00	 npad	 4
$LL59@TryParseDN:

; 956  :         {
; 957  :             __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

  00370	ff 36		 push	 DWORD PTR [esi]
  00372	53		 push	 ebx
  00373	50		 push	 eax
  00374	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APAIPAIII@ZA
  0037a	8b d8		 mov	 ebx, eax

; 958  :             work_buf_count = w_tail - work_buf;
; 959  :             ++in_buf;

  0037c	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0037f	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _work_buf$1$[ebp]
  00385	83 c4 0c	 add	 esp, 12			; 0000000cH
  00388	2b d8		 sub	 ebx, eax
  0038a	c1 fb 02	 sar	 ebx, 2

; 960  :             --in_buf_count;

  0038d	83 ef 01	 sub	 edi, 1
  00390	75 de		 jne	 SHORT $LL59@TryParseDN
$LN60@TryParseDN:

; 961  :         }
; 962  :         root.CheckBlock(work_buf);

  00392	50		 push	 eax
  00393	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$2[ebp]
  00399	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0039e	8b bd d8 fe ff
	ff		 mov	 edi, DWORD PTR _out_buf$1$[ebp]
  003a4	8b cb		 mov	 ecx, ebx
  003a6	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR _work_buf$1$[ebp]
  003ac	f3 a5		 rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 964  :     }

  003ae	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  003b2	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$2[ebp]
  003b8	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT

; 1092 :         root.CheckNumber(*o_abs);

  003bd	8b 9d c4 fe ff
	ff		 mov	 ebx, DWORD PTR _o_abs$GSCopy$1$[ebp]
  003c3	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  003c9	ff 33		 push	 DWORD PTR [ebx]
  003cb	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1093 :         root.DeallocateBlock(bin_buf);

  003d0	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _bin_buf$1$[ebp]
  003d6	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  003dc	52		 push	 edx
  003dd	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 1094 :         CommitNumber(*o_abs);

  003e2	ff 33		 push	 DWORD PTR [ebx]
  003e4	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1095 :         if ((*o_abs)->IS_ZERO)

  003e9	8b 03		 mov	 eax, DWORD PTR [ebx]
  003eb	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  003f1	83 c4 04	 add	 esp, 4
  003f4	f6 40 04 01	 test	 BYTE PTR [eax+4], 1
  003f8	50		 push	 eax
  003f9	74 0d		 je	 SHORT $LN26@TryParseDN

; 1096 :         {
; 1097 :             root.DeallocateNumber(*o_abs);

  003fb	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1098 :             *o_abs = &number_zero;

  00400	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 1099 :         }
; 1100 :         else

  00406	eb 05		 jmp	 SHORT $LN27@TryParseDN
$LN26@TryParseDN:

; 1101 :             root.UnlinkNumber(*o_abs);

  00408	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN27@TryParseDN:

; 1102 : #ifdef _DEBUG
; 1103 :         if (*o_sign != 0 && *o_sign != 1 && *o_sign != -1)
; 1104 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;1");
; 1105 :         if (*o_sign == 0 && !(*o_abs)->IS_ZERO)
; 1106 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;2");
; 1107 :         if (*o_sign != 0 && (*o_abs)->IS_ZERO)
; 1108 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;3");
; 1109 : #endif
; 1110 :         *result = 1;

  0040d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _result$GSCopy$1$[ebp]
  00413	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN13@TryParseDN:

; 1111 :         return (PMC_STATUS_OK);

  00419	33 ff		 xor	 edi, edi
$LN39@TryParseDN:
  0041b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00422	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  00428	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0042d	8b c7		 mov	 eax, edi

; 1112 :     }

  0042f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00432	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00439	59		 pop	 ecx
  0043a	5f		 pop	 edi
  0043b	5e		 pop	 esi
  0043c	5b		 pop	 ebx
  0043d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00440	33 cd		 xor	 ecx, ebp
  00442	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00447	8b e5		 mov	 esp, ebp
  00449	5d		 pop	 ebp
  0044a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0:
  00000	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _root$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$1:
  0000b	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR _root$2[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 8a b0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-336]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002d	33 c8		 xor	 ecx, eax
  0002f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00034	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  00039	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::TryParseDN
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z
_TEXT	SEGMENT
_root$ = -32						; size = 16
_work_buf$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z PROC ; Palmtree::Math::Core::Internal::ConvertCardinalNumber, COMDAT

; 948  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 949  :         ResourceHolderUINT root;

  00028	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 950  :         __UNIT_TYPE* work_buf = root.AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1));

  00037	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _in_buf_count$[ebp]
  0003d	40		 inc	 eax
  0003e	c1 e0 05	 shl	 eax, 5
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock

; 951  :         __UNIT_TYPE work_buf_count = 1;
; 952  :         work_buf[0] = in_buf[0];

  00047	8b 75 08	 mov	 esi, DWORD PTR _in_buf$[ebp]
  0004a	8b f8		 mov	 edi, eax
  0004c	bb 01 00 00 00	 mov	 ebx, 1
  00051	89 7d f0	 mov	 DWORD PTR _work_buf$1$[ebp], edi
  00054	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 953  :         ++in_buf;

  00056	83 c6 04	 add	 esi, 4
  00059	29 5d 0c	 sub	 DWORD PTR _in_buf_count$[ebp], ebx
  0005c	89 0f		 mov	 DWORD PTR [edi], ecx

; 954  :         --in_buf_count;
; 955  :         while (in_buf_count > 0)

  0005e	74 1d		 je	 SHORT $LN3@ConvertCar
$LL2@ConvertCar:

; 956  :         {
; 957  :             __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

  00060	ff 36		 push	 DWORD PTR [esi]
  00062	53		 push	 ebx
  00063	57		 push	 edi
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APAIPAIII@ZA
  0006a	8b d8		 mov	 ebx, eax

; 958  :             work_buf_count = w_tail - work_buf;
; 959  :             ++in_buf;

  0006c	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0006f	2b df		 sub	 ebx, edi
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	c1 fb 02	 sar	 ebx, 2

; 960  :             --in_buf_count;

  00077	83 6d 0c 01	 sub	 DWORD PTR _in_buf_count$[ebp], 1
  0007b	75 e3		 jne	 SHORT $LL2@ConvertCar
$LN3@ConvertCar:

; 961  :         }
; 962  :         root.CheckBlock(work_buf);

  0007d	57		 push	 edi
  0007e	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00081	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00086	8b 7d 10	 mov	 edi, DWORD PTR _out_buf$[ebp]
  00089	8b cb		 mov	 ecx, ebx
  0008b	8b 75 f0	 mov	 esi, DWORD PTR _work_buf$1$[ebp]
  0008e	f3 a5		 rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 964  :     }

  00090	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00097	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0009a	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z ENDP ; Palmtree::Math::Core::Internal::ConvertCardinalNumber
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX, COMDAT

; 805  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 808  :         while (count > 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00006	ba 00 ca 9a 3b	 mov	 edx, 1000000000		; 3b9aca00H
  0000b	53		 push	 ebx
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _u_count$[ebp]
  0000f	8b c3		 mov	 eax, ebx
  00011	56		 push	 esi
  00012	c1 e8 05	 shr	 eax, 5
  00015	57		 push	 edi
  00016	8b 7d 10	 mov	 edi, DWORD PTR _x$[ebp]
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 3f 03 00
	00		 je	 $LN3@MultiplyAn
  00021	8b d8		 mov	 ebx, eax
$LL2@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00023	8b c2		 mov	 eax, edx
  00025	f7 21		 mul	 DWORD PTR [ecx]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00027	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00029	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0002b	89 01		 mov	 DWORD PTR [ecx], eax
  0002d	b8 00 00 00 00	 mov	 eax, 0
  00032	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00037	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0003c	f7 61 04	 mul	 DWORD PTR [ecx+4]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0003f	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00041	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00043	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00046	b8 00 00 00 00	 mov	 eax, 0
  0004b	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00050	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00055	f7 61 08	 mul	 DWORD PTR [ecx+8]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00058	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0005a	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0005c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0005f	b8 00 00 00 00	 mov	 eax, 0
  00064	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00069	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0006e	f7 61 0c	 mul	 DWORD PTR [ecx+12]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00071	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00073	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00075	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00078	b8 00 00 00 00	 mov	 eax, 0
  0007d	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00082	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00087	f7 61 10	 mul	 DWORD PTR [ecx+16]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0008a	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0008c	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0008e	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00091	b8 00 00 00 00	 mov	 eax, 0
  00096	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0009b	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  000a0	f7 61 14	 mul	 DWORD PTR [ecx+20]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000a3	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000a5	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000a7	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000aa	b8 00 00 00 00	 mov	 eax, 0
  000af	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000b4	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  000b9	f7 61 18	 mul	 DWORD PTR [ecx+24]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000bc	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000be	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000c0	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  000c3	b8 00 00 00 00	 mov	 eax, 0
  000c8	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000cd	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  000d2	f7 61 1c	 mul	 DWORD PTR [ecx+28]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000d5	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000d7	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000d9	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  000dc	b8 00 00 00 00	 mov	 eax, 0
  000e1	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000e6	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  000eb	f7 61 20	 mul	 DWORD PTR [ecx+32]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000ee	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000f0	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000f2	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  000f5	b8 00 00 00 00	 mov	 eax, 0
  000fa	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000ff	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00104	f7 61 24	 mul	 DWORD PTR [ecx+36]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00107	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00109	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0010b	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  0010e	b8 00 00 00 00	 mov	 eax, 0
  00113	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00118	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0011d	f7 61 28	 mul	 DWORD PTR [ecx+40]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00120	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00122	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00124	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  00127	b8 00 00 00 00	 mov	 eax, 0
  0012c	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00131	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00136	f7 61 2c	 mul	 DWORD PTR [ecx+44]
  00139	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0013b	03 c6		 add	 eax, esi
  0013d	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  00140	b8 00 00 00 00	 mov	 eax, 0
  00145	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0014a	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0014f	f7 61 30	 mul	 DWORD PTR [ecx+48]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00152	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00154	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00156	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00159	b8 00 00 00 00	 mov	 eax, 0
  0015e	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00163	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00168	f7 61 34	 mul	 DWORD PTR [ecx+52]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0016b	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0016d	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0016f	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  00172	b8 00 00 00 00	 mov	 eax, 0
  00177	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0017c	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00181	f7 61 38	 mul	 DWORD PTR [ecx+56]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00184	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00186	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00188	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  0018b	b8 00 00 00 00	 mov	 eax, 0
  00190	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00195	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0019a	f7 61 3c	 mul	 DWORD PTR [ecx+60]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0019d	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0019f	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001a1	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
  001a4	b8 00 00 00 00	 mov	 eax, 0
  001a9	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001ae	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  001b3	f7 61 40	 mul	 DWORD PTR [ecx+64]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001b6	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001b8	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001ba	89 41 40	 mov	 DWORD PTR [ecx+64], eax
  001bd	b8 00 00 00 00	 mov	 eax, 0
  001c2	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001c7	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  001cc	f7 61 44	 mul	 DWORD PTR [ecx+68]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001cf	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001d1	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001d3	89 41 44	 mov	 DWORD PTR [ecx+68], eax
  001d6	b8 00 00 00 00	 mov	 eax, 0
  001db	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001e0	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  001e5	f7 61 48	 mul	 DWORD PTR [ecx+72]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001e8	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001ea	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001ec	89 41 48	 mov	 DWORD PTR [ecx+72], eax
  001ef	b8 00 00 00 00	 mov	 eax, 0
  001f4	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001f9	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  001fe	f7 61 4c	 mul	 DWORD PTR [ecx+76]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00201	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00203	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00205	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
  00208	b8 00 00 00 00	 mov	 eax, 0
  0020d	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00212	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00217	f7 61 50	 mul	 DWORD PTR [ecx+80]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0021a	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0021c	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0021e	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  00221	b8 00 00 00 00	 mov	 eax, 0
  00226	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0022b	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00230	f7 61 54	 mul	 DWORD PTR [ecx+84]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00233	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00235	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00237	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  0023a	b8 00 00 00 00	 mov	 eax, 0
  0023f	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00244	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00249	f7 61 58	 mul	 DWORD PTR [ecx+88]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0024c	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0024e	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00250	89 41 58	 mov	 DWORD PTR [ecx+88], eax
  00253	b8 00 00 00 00	 mov	 eax, 0
  00258	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0025d	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00262	f7 61 5c	 mul	 DWORD PTR [ecx+92]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00265	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00267	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00269	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  0026c	b8 00 00 00 00	 mov	 eax, 0
  00271	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00276	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0027b	f7 61 60	 mul	 DWORD PTR [ecx+96]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0027e	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00280	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00282	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  00285	b8 00 00 00 00	 mov	 eax, 0
  0028a	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0028f	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00294	f7 61 64	 mul	 DWORD PTR [ecx+100]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00297	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00299	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0029b	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  0029e	b8 00 00 00 00	 mov	 eax, 0
  002a3	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002a8	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  002ad	f7 61 68	 mul	 DWORD PTR [ecx+104]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002b0	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002b2	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002b4	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  002b7	b8 00 00 00 00	 mov	 eax, 0
  002bc	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002c1	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  002c6	f7 61 6c	 mul	 DWORD PTR [ecx+108]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002c9	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002cb	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002cd	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
  002d0	b8 00 00 00 00	 mov	 eax, 0
  002d5	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002da	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  002df	f7 61 70	 mul	 DWORD PTR [ecx+112]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002e2	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002e4	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002e6	89 41 70	 mov	 DWORD PTR [ecx+112], eax
  002e9	b8 00 00 00 00	 mov	 eax, 0
  002ee	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002f3	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  002f8	f7 61 74	 mul	 DWORD PTR [ecx+116]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002fb	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002fd	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002ff	89 41 74	 mov	 DWORD PTR [ecx+116], eax
  00302	b8 00 00 00 00	 mov	 eax, 0
  00307	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0030c	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00311	f7 61 78	 mul	 DWORD PTR [ecx+120]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00314	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00316	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00318	89 41 78	 mov	 DWORD PTR [ecx+120], eax
  0031b	b8 00 00 00 00	 mov	 eax, 0
  00320	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00325	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0032a	f7 61 7c	 mul	 DWORD PTR [ecx+124]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0032d	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0032f	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00331	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00334	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00339	b8 00 00 00 00	 mov	 eax, 0
  0033e	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 842  :             u_buf += 32;

  00343	83 e9 80	 sub	 ecx, -128		; ffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00346	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0034b	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 808  :         while (count > 0)

  0034f	ba 00 ca 9a 3b	 mov	 edx, 1000000000		; 3b9aca00H

; 843  :             --count;

  00354	83 eb 01	 sub	 ebx, 1
  00357	0f 85 c6 fc ff
	ff		 jne	 $LL2@MultiplyAn

; 808  :         while (count > 0)

  0035d	8b 5d 0c	 mov	 ebx, DWORD PTR _u_count$[ebp]
$LN3@MultiplyAn:

; 844  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 845  :             if (sizeof(k) == sizeof(_UINT32_T))
; 846  :                 AddToMULTI32Counter(32);
; 847  :             else
; 848  :                 AddToMULTI64Counter(32);
; 849  : #endif
; 850  :         }
; 851  : 
; 852  :         if (u_count & 0x10)

  00360	f6 c3 10	 test	 bl, 16			; 00000010H
  00363	0f 84 9c 01 00
	00		 je	 $LN8@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00369	8b c2		 mov	 eax, edx
  0036b	f7 21		 mul	 DWORD PTR [ecx]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0036d	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0036f	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00371	89 01		 mov	 DWORD PTR [ecx], eax
  00373	b8 00 00 00 00	 mov	 eax, 0
  00378	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0037d	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00382	f7 61 04	 mul	 DWORD PTR [ecx+4]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00385	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00387	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00389	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0038c	b8 00 00 00 00	 mov	 eax, 0
  00391	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00396	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0039b	f7 61 08	 mul	 DWORD PTR [ecx+8]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0039e	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003a0	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003a2	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  003a5	b8 00 00 00 00	 mov	 eax, 0
  003aa	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003af	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  003b4	f7 61 0c	 mul	 DWORD PTR [ecx+12]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003b7	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003b9	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003bb	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  003be	b8 00 00 00 00	 mov	 eax, 0
  003c3	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003c8	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  003cd	f7 61 10	 mul	 DWORD PTR [ecx+16]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003d0	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003d2	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003d4	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  003d7	b8 00 00 00 00	 mov	 eax, 0
  003dc	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003e1	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  003e6	f7 61 14	 mul	 DWORD PTR [ecx+20]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003e9	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003eb	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003ed	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  003f0	b8 00 00 00 00	 mov	 eax, 0
  003f5	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003fa	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  003ff	f7 61 18	 mul	 DWORD PTR [ecx+24]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00402	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00404	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00406	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00409	b8 00 00 00 00	 mov	 eax, 0
  0040e	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00413	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00418	f7 61 1c	 mul	 DWORD PTR [ecx+28]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0041b	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0041d	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0041f	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00422	b8 00 00 00 00	 mov	 eax, 0
  00427	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0042c	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00431	f7 61 20	 mul	 DWORD PTR [ecx+32]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00434	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00436	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00438	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0043b	b8 00 00 00 00	 mov	 eax, 0
  00440	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00445	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0044a	f7 61 24	 mul	 DWORD PTR [ecx+36]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0044d	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0044f	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00451	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00454	b8 00 00 00 00	 mov	 eax, 0
  00459	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0045e	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00463	f7 61 28	 mul	 DWORD PTR [ecx+40]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00466	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00468	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0046a	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  0046d	b8 00 00 00 00	 mov	 eax, 0
  00472	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00477	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0047c	f7 61 2c	 mul	 DWORD PTR [ecx+44]
  0047f	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00481	03 c6		 add	 eax, esi
  00483	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
  00486	b8 00 00 00 00	 mov	 eax, 0
  0048b	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00490	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00495	f7 61 30	 mul	 DWORD PTR [ecx+48]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00498	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0049a	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0049c	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  0049f	b8 00 00 00 00	 mov	 eax, 0
  004a4	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004a9	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  004ae	f7 61 34	 mul	 DWORD PTR [ecx+52]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004b1	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004b3	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004b5	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  004b8	b8 00 00 00 00	 mov	 eax, 0
  004bd	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004c2	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  004c7	f7 61 38	 mul	 DWORD PTR [ecx+56]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004ca	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004cc	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004ce	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  004d1	b8 00 00 00 00	 mov	 eax, 0
  004d6	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004db	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  004e0	f7 61 3c	 mul	 DWORD PTR [ecx+60]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004e3	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004e5	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004e7	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  004ea	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004ef	b8 00 00 00 00	 mov	 eax, 0
  004f4	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 870  :             u_buf += 16;

  004f9	83 c1 40	 add	 ecx, 64			; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  004fc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00501	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
$LN8@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 879  :         if (u_count & 0x8)

  00505	f6 c3 08	 test	 bl, 8
  00508	0f 84 d9 00 00
	00		 je	 $LN11@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0050e	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00513	f7 21		 mul	 DWORD PTR [ecx]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00515	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00517	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00519	89 01		 mov	 DWORD PTR [ecx], eax
  0051b	b8 00 00 00 00	 mov	 eax, 0
  00520	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00525	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0052a	f7 61 04	 mul	 DWORD PTR [ecx+4]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0052d	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0052f	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00531	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00534	b8 00 00 00 00	 mov	 eax, 0
  00539	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0053e	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00543	f7 61 08	 mul	 DWORD PTR [ecx+8]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00546	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00548	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0054a	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0054d	b8 00 00 00 00	 mov	 eax, 0
  00552	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00557	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0055c	f7 61 0c	 mul	 DWORD PTR [ecx+12]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0055f	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00561	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00563	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00566	b8 00 00 00 00	 mov	 eax, 0
  0056b	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00570	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00575	f7 61 10	 mul	 DWORD PTR [ecx+16]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00578	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0057a	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0057c	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0057f	b8 00 00 00 00	 mov	 eax, 0
  00584	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00589	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0058e	f7 61 14	 mul	 DWORD PTR [ecx+20]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00591	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00593	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00595	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00598	ba 00 ca 9a 3b	 mov	 edx, 1000000000		; 3b9aca00H

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0059d	b8 00 00 00 00	 mov	 eax, 0
  005a2	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005a7	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  005aa	f7 e2		 mul	 edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005ac	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005ae	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005b0	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  005b3	b8 00 00 00 00	 mov	 eax, 0
  005b8	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005bd	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  005c2	f7 61 1c	 mul	 DWORD PTR [ecx+28]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005c5	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005c7	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005c9	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  005cc	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005d1	b8 00 00 00 00	 mov	 eax, 0
  005d6	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 889  :             u_buf += 8;

  005db	83 c1 20	 add	 ecx, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  005de	b8 08 00 00 00	 mov	 eax, 8
  005e3	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
$LN11@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 898  :         if (u_count & 0x4)

  005e7	f6 c3 04	 test	 bl, 4
  005ea	74 73		 je	 SHORT $LN14@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005ec	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  005f1	f7 21		 mul	 DWORD PTR [ecx]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005f3	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005f5	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005f7	89 01		 mov	 DWORD PTR [ecx], eax
  005f9	b8 00 00 00 00	 mov	 eax, 0
  005fe	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00603	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00608	f7 61 04	 mul	 DWORD PTR [ecx+4]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0060b	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0060d	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0060f	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00612	b8 00 00 00 00	 mov	 eax, 0
  00617	66 0f 38 f6 f8	 adcx	 edi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0061c	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00621	f7 61 08	 mul	 DWORD PTR [ecx+8]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00624	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00626	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00628	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0062b	b8 00 00 00 00	 mov	 eax, 0
  00630	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00635	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0063a	f7 61 0c	 mul	 DWORD PTR [ecx+12]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0063d	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0063f	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00641	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00644	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00649	b8 00 00 00 00	 mov	 eax, 0
  0064e	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 904  :             u_buf += 4;

  00653	83 c1 10	 add	 ecx, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00656	b8 04 00 00 00	 mov	 eax, 4
  0065b	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
$LN14@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 913  :         if (u_count & 0x2)

  0065f	f6 c3 02	 test	 bl, 2
  00662	74 41		 je	 SHORT $LN17@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00664	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00669	f7 21		 mul	 DWORD PTR [ecx]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0066b	03 c7		 add	 eax, edi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0066d	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0066f	89 01		 mov	 DWORD PTR [ecx], eax
  00671	b8 00 00 00 00	 mov	 eax, 0
  00676	66 0f 38 f6 f0	 adcx	 esi, eax

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0067b	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00680	f7 61 04	 mul	 DWORD PTR [ecx+4]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00683	03 c6		 add	 eax, esi

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00685	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00687	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0068a	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0068f	b8 00 00 00 00	 mov	 eax, 0
  00694	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 917  :             u_buf += 2;

  00699	83 c1 08	 add	 ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0069c	b8 02 00 00 00	 mov	 eax, 2
  006a1	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
$LN17@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 926  :         if (u_count & 0x1)

  006a5	f6 c3 01	 test	 bl, 1
  006a8	74 21		 je	 SHORT $LN20@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006aa	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  006af	f7 21		 mul	 DWORD PTR [ecx]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006b1	03 c7		 add	 eax, edi
  006b3	8b fa		 mov	 edi, edx
  006b5	89 01		 mov	 DWORD PTR [ecx], eax
  006b7	b8 00 00 00 00	 mov	 eax, 0
  006bc	66 0f 38 f6 f8	 adcx	 edi, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 929  :             u_buf += 1;

  006c1	83 c1 04	 add	 ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  006c4	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
$LN20@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 938  :         if (k > 0)

  006cb	85 ff		 test	 edi, edi
  006cd	74 0a		 je	 SHORT $LN680@MultiplyAn

; 939  :         {
; 940  :             u_buf[0] = k;

  006cf	89 39		 mov	 DWORD PTR [ecx], edi

; 941  :             u_buf += 1;

  006d1	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  006d4	5f		 pop	 edi

; 942  :         }
; 943  : 
; 944  :         return (u_buf);
; 945  :     }

  006d5	5e		 pop	 esi
  006d6	5b		 pop	 ebx
  006d7	5d		 pop	 ebp
  006d8	c3		 ret	 0
$LN680@MultiplyAn:
  006d9	5f		 pop	 edi
  006da	5e		 pop	 esi
  006db	8b c1		 mov	 eax, ecx
  006dd	5b		 pop	 ebx
  006de	5d		 pop	 ebp
  006df	c3		 ret	 0
?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL, COMDAT

; 662  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 665  :         while (count > 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00006	ba 00 ca 9a 3b	 mov	 edx, 1000000000		; 3b9aca00H
  0000b	53		 push	 ebx
  0000c	8b 5d 0c	 mov	 ebx, DWORD PTR _u_count$[ebp]
  0000f	8b c3		 mov	 eax, ebx
  00011	56		 push	 esi
  00012	c1 e8 05	 shr	 eax, 5
  00015	57		 push	 edi
  00016	8b 7d 10	 mov	 edi, DWORD PTR _x$[ebp]
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 5f 02 00
	00		 je	 $LN3@MultiplyAn
  00021	8b d8		 mov	 ebx, eax
$LL2@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00023	8b c2		 mov	 eax, edx
  00025	f7 21		 mul	 DWORD PTR [ecx]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00027	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00029	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0002b	89 01		 mov	 DWORD PTR [ecx], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0002d	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00032	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00035	f7 61 04	 mul	 DWORD PTR [ecx+4]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00038	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0003a	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0003c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0003f	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00044	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00047	f7 61 08	 mul	 DWORD PTR [ecx+8]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0004a	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0004c	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0004e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00051	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00056	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00059	f7 61 0c	 mul	 DWORD PTR [ecx+12]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0005c	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0005e	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00060	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00063	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00068	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0006b	f7 61 10	 mul	 DWORD PTR [ecx+16]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0006e	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00070	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00072	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00075	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0007a	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0007d	f7 61 14	 mul	 DWORD PTR [ecx+20]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00080	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00082	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00084	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00087	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0008c	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0008f	f7 61 18	 mul	 DWORD PTR [ecx+24]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00092	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00094	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00096	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00099	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0009e	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000a1	f7 61 1c	 mul	 DWORD PTR [ecx+28]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000a4	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000a6	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000a8	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000ab	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000b0	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000b3	f7 61 20	 mul	 DWORD PTR [ecx+32]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000b6	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000b8	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000ba	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000bd	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000c2	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000c5	f7 61 24	 mul	 DWORD PTR [ecx+36]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000c8	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000ca	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000cc	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000cf	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000d4	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000d7	f7 61 28	 mul	 DWORD PTR [ecx+40]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000da	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000dc	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000de	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000e1	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000e6	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000e9	f7 61 2c	 mul	 DWORD PTR [ecx+44]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000ec	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000ee	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000f0	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000f3	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000f8	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000fb	f7 61 30	 mul	 DWORD PTR [ecx+48]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000fe	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00100	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00102	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00105	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0010a	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0010d	f7 61 34	 mul	 DWORD PTR [ecx+52]
  00110	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00112	03 c6		 add	 eax, esi
  00114	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00117	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0011c	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0011f	f7 61 38	 mul	 DWORD PTR [ecx+56]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00122	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00124	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00126	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00129	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0012e	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00131	f7 61 3c	 mul	 DWORD PTR [ecx+60]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00134	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00136	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00138	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0013b	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00140	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00143	f7 61 40	 mul	 DWORD PTR [ecx+64]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00146	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00148	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0014a	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0014d	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00152	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00155	f7 61 44	 mul	 DWORD PTR [ecx+68]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00158	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0015a	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0015c	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0015f	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00164	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00167	f7 61 48	 mul	 DWORD PTR [ecx+72]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0016a	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0016c	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0016e	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00171	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00176	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00179	f7 61 4c	 mul	 DWORD PTR [ecx+76]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0017c	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0017e	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00180	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00183	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00188	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0018b	f7 61 50	 mul	 DWORD PTR [ecx+80]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0018e	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00190	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00192	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00195	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0019a	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0019d	f7 61 54	 mul	 DWORD PTR [ecx+84]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001a0	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001a2	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001a4	89 41 54	 mov	 DWORD PTR [ecx+84], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001a7	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001ac	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001af	f7 61 58	 mul	 DWORD PTR [ecx+88]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001b2	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001b4	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001b6	89 41 58	 mov	 DWORD PTR [ecx+88], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001b9	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001be	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001c1	f7 61 5c	 mul	 DWORD PTR [ecx+92]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001c4	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001c6	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001c8	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001cb	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001d0	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001d3	f7 61 60	 mul	 DWORD PTR [ecx+96]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001d6	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001d8	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001da	89 41 60	 mov	 DWORD PTR [ecx+96], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001dd	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001e2	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001e5	f7 61 64	 mul	 DWORD PTR [ecx+100]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001e8	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001ea	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001ec	89 41 64	 mov	 DWORD PTR [ecx+100], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001ef	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001f4	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001f7	f7 61 68	 mul	 DWORD PTR [ecx+104]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001fa	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001fc	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001fe	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  00201	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00204	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00209	f7 61 6c	 mul	 DWORD PTR [ecx+108]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0020c	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0020e	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00210	89 41 6c	 mov	 DWORD PTR [ecx+108], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00213	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00218	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0021b	f7 61 70	 mul	 DWORD PTR [ecx+112]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0021e	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00220	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00222	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00225	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0022a	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0022d	f7 61 74	 mul	 DWORD PTR [ecx+116]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00230	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00232	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00234	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00237	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0023c	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0023f	f7 61 78	 mul	 DWORD PTR [ecx+120]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00242	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00244	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00246	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00249	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0024e	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00251	f7 61 7c	 mul	 DWORD PTR [ecx+124]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00254	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00256	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00258	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0025b	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00260	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00263	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 699  :             u_buf += 32;

  00268	83 e9 80	 sub	 ecx, -128		; ffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0026b	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 665  :         while (count > 0)

  0026f	ba 00 ca 9a 3b	 mov	 edx, 1000000000		; 3b9aca00H

; 700  :             --count;

  00274	83 eb 01	 sub	 ebx, 1
  00277	0f 85 a6 fd ff
	ff		 jne	 $LL2@MultiplyAn

; 665  :         while (count > 0)

  0027d	8b 5d 0c	 mov	 ebx, DWORD PTR _u_count$[ebp]
$LN3@MultiplyAn:

; 701  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 702  :             if (sizeof(k) == sizeof(_UINT32_T))
; 703  :                 AddToMULTI32Counter(32);
; 704  :             else
; 705  :                 AddToMULTI64Counter(32);
; 706  : #endif
; 707  :         }
; 708  : 
; 709  :         if (u_count & 0x10)

  00280	f6 c3 10	 test	 bl, 16			; 00000010H
  00283	0f 84 2c 01 00
	00		 je	 $LN8@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00289	8b c2		 mov	 eax, edx
  0028b	f7 21		 mul	 DWORD PTR [ecx]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0028d	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0028f	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00291	89 01		 mov	 DWORD PTR [ecx], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00293	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00298	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0029b	f7 61 04	 mul	 DWORD PTR [ecx+4]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0029e	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002a0	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002a2	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002a5	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002aa	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002ad	f7 61 08	 mul	 DWORD PTR [ecx+8]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002b0	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002b2	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002b4	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002b7	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002bc	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002bf	f7 61 0c	 mul	 DWORD PTR [ecx+12]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002c2	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002c4	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002c6	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002c9	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002ce	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002d1	f7 61 10	 mul	 DWORD PTR [ecx+16]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002d4	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002d6	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002d8	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002db	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002e0	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002e3	f7 61 14	 mul	 DWORD PTR [ecx+20]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002e6	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002e8	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002ea	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002ed	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002f2	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002f5	f7 61 18	 mul	 DWORD PTR [ecx+24]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002f8	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002fa	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002fc	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002ff	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00304	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00307	f7 61 1c	 mul	 DWORD PTR [ecx+28]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0030a	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0030c	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0030e	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00311	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00316	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00319	f7 61 20	 mul	 DWORD PTR [ecx+32]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0031c	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0031e	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00320	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00323	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00328	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0032b	f7 61 24	 mul	 DWORD PTR [ecx+36]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0032e	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00330	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00332	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00335	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0033a	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0033d	f7 61 28	 mul	 DWORD PTR [ecx+40]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00340	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00342	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00344	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00347	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0034c	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0034f	f7 61 2c	 mul	 DWORD PTR [ecx+44]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00352	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00354	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00356	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00359	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0035e	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00361	f7 61 30	 mul	 DWORD PTR [ecx+48]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00364	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00366	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00368	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0036b	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00370	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00373	f7 61 34	 mul	 DWORD PTR [ecx+52]
  00376	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00378	03 c6		 add	 eax, esi
  0037a	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0037d	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00382	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00385	f7 61 38	 mul	 DWORD PTR [ecx+56]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00388	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0038a	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0038c	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0038f	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00394	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00397	f7 61 3c	 mul	 DWORD PTR [ecx+60]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0039a	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0039c	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0039e	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  003a1	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003a6	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  003a9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 727  :             u_buf += 16;

  003ae	83 c1 40	 add	 ecx, 64			; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  003b1	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
$LN8@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 736  :         if (u_count & 0x8)

  003b5	f6 c3 08	 test	 bl, 8
  003b8	0f 84 a1 00 00
	00		 je	 $LN11@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003be	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  003c3	f7 21		 mul	 DWORD PTR [ecx]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003c5	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003c7	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003c9	89 01		 mov	 DWORD PTR [ecx], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003cb	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003d0	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003d3	f7 61 04	 mul	 DWORD PTR [ecx+4]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003d6	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003d8	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003da	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003dd	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003e2	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003e5	f7 61 08	 mul	 DWORD PTR [ecx+8]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003e8	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003ea	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003ec	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003ef	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003f4	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003f7	f7 61 0c	 mul	 DWORD PTR [ecx+12]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003fa	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003fc	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003fe	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00401	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00406	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00409	f7 61 10	 mul	 DWORD PTR [ecx+16]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0040c	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0040e	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00410	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00413	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00418	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0041b	f7 61 14	 mul	 DWORD PTR [ecx+20]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0041e	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00420	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00422	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00425	ba 00 ca 9a 3b	 mov	 edx, 1000000000		; 3b9aca00H
  0042a	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0042d	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00430	f7 e2		 mul	 edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00432	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00434	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00436	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00439	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0043e	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00441	f7 61 1c	 mul	 DWORD PTR [ecx+28]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00444	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00446	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00448	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0044b	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00450	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00453	b8 08 00 00 00	 mov	 eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 746  :             u_buf += 8;

  00458	83 c1 20	 add	 ecx, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0045b	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
$LN11@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 755  :         if (u_count & 0x4)

  0045f	f6 c3 04	 test	 bl, 4
  00462	74 57		 je	 SHORT $LN14@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00464	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  00469	f7 21		 mul	 DWORD PTR [ecx]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0046b	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0046d	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0046f	89 01		 mov	 DWORD PTR [ecx], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00471	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00476	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00479	f7 61 04	 mul	 DWORD PTR [ecx+4]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0047c	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0047e	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00480	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00483	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00488	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0048b	f7 61 08	 mul	 DWORD PTR [ecx+8]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0048e	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00490	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00492	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00495	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0049a	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0049d	f7 61 0c	 mul	 DWORD PTR [ecx+12]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004a0	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004a2	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004a4	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  004a7	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004ac	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  004af	b8 04 00 00 00	 mov	 eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 761  :             u_buf += 4;

  004b4	83 c1 10	 add	 ecx, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  004b7	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
$LN14@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 770  :         if (u_count & 0x2)

  004bb	f6 c3 02	 test	 bl, 2
  004be	74 33		 je	 SHORT $LN17@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004c0	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  004c5	f7 21		 mul	 DWORD PTR [ecx]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004c7	03 c7		 add	 eax, edi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004c9	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004cb	89 01		 mov	 DWORD PTR [ecx], eax

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004cd	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004d2	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004d5	f7 61 04	 mul	 DWORD PTR [ecx+4]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004d8	03 c6		 add	 eax, esi

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004da	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004dc	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  004df	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004e4	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  004e7	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 774  :             u_buf += 2;

  004ec	83 c1 08	 add	 ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  004ef	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
$LN17@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 783  :         if (u_count & 0x1)

  004f3	f6 c3 01	 test	 bl, 1
  004f6	74 1a		 je	 SHORT $LN20@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004f8	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  004fd	f7 21		 mul	 DWORD PTR [ecx]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004ff	03 c7		 add	 eax, edi
  00501	8b fa		 mov	 edi, edx
  00503	89 01		 mov	 DWORD PTR [ecx], eax
  00505	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 786  :             u_buf += 1;

  00508	83 c1 04	 add	 ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  0050b	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
$LN20@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 795  :         if (k > 0)

  00512	85 ff		 test	 edi, edi
  00514	74 0a		 je	 SHORT $LN680@MultiplyAn

; 796  :         {
; 797  :             u_buf[0] = k;

  00516	89 39		 mov	 DWORD PTR [ecx], edi

; 798  :             u_buf += 1;

  00518	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0051b	5f		 pop	 edi

; 799  :         }
; 800  : 
; 801  :         return (u_buf);
; 802  :     }

  0051c	5e		 pop	 esi
  0051d	5b		 pop	 ebx
  0051e	5d		 pop	 ebp
  0051f	c3		 ret	 0
$LN680@MultiplyAn:
  00520	5f		 pop	 edi
  00521	5e		 pop	 esi
  00522	8b c1		 mov	 eax, ecx
  00524	5b		 pop	 ebx
  00525	5d		 pop	 ebp
  00526	c3		 ret	 0
?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z
_TEXT	SEGMENT
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX, COMDAT

; 647  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _w_buf$[ebp]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00006	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0000b	f7 65 0c	 mul	 DWORD PTR _u$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0000e	03 45 08	 add	 eax, DWORD PTR _k$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax
  00013	b8 00 00 00 00	 mov	 eax, 0
  00018	66 0f 38 f6 c2	 adcx	 eax, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 659  :     }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z
_TEXT	SEGMENT
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL, COMDAT

; 632  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _w_buf$[ebp]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00006	b8 00 ca 9a 3b	 mov	 eax, 1000000000		; 3b9aca00H
  0000b	f7 65 0c	 mul	 DWORD PTR _u$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0000e	03 45 08	 add	 eax, DWORD PTR _k$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax
  00013	83 d2 00	 adc	 edx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 643  :         return (k);

  00016	8b c2		 mov	 eax, edx

; 644  :     }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPA_WPAI1@Z
_TEXT	SEGMENT
_r$1$ = -4						; size = 4
_source_count$1$ = 8					; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_out_buf_count$ = 16					; size = 4
?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPA_WPAI1@Z PROC ; Palmtree::Math::Core::Internal::BuildBinaryFromDecimalString, COMDAT

; 604  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 605  : #ifdef _M_IX86
; 606  :         int word_digit_count = 9;
; 607  : #elif defined(_M_X64)
; 608  :         int word_digit_count = 19;
; 609  : #else
; 610  : #error unknown platform
; 611  : #endif
; 612  :         wchar_t* in_ptr = source;
; 613  :         __UNIT_TYPE* out_ptr = out_buf;

  00006	8b 75 0c	 mov	 esi, DWORD PTR _out_buf$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR _source$[ebp]

; 614  :         __UNIT_TYPE source_count = lstrlenW(source);

  0000d	57		 push	 edi
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00014	8b c8		 mov	 ecx, eax

; 615  :         int r = source_count % word_digit_count;

  00016	33 d2		 xor	 edx, edx
  00018	bb 09 00 00 00	 mov	 ebx, 9
  0001d	89 4d 08	 mov	 DWORD PTR _source_count$1$[ebp], ecx
  00020	f7 f3		 div	 ebx
  00022	8b c2		 mov	 eax, edx
  00024	89 45 fc	 mov	 DWORD PTR _r$1$[ebp], eax

; 616  :         if (r > 0)

  00027	85 c0		 test	 eax, eax
  00029	7e 3f		 jle	 SHORT $LN14@BuildBinar

; 556  :         __UNIT_TYPE x = 0;

  0002b	33 d2		 xor	 edx, edx

; 617  :         {
; 618  :             *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

  0002d	8b d8		 mov	 ebx, eax
  0002f	8b f7		 mov	 esi, edi

; 557  :         while (count > 0)

  00031	85 c0		 test	 eax, eax
  00033	74 28		 je	 SHORT $LN8@BuildBinar
$LL7@BuildBinar:

; 558  :         {
; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00035	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00038	8d 76 02	 lea	 esi, DWORD PTR [esi+2]

; 42   :         if (c >= L'0' && c <= L'9')

  0003b	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0003e	66 83 f8 09	 cmp	 ax, 9
  00042	77 05		 ja	 SHORT $LN11@BuildBinar

; 43   :             return (c - L'0');

  00044	83 e9 30	 sub	 ecx, 48			; 00000030H
  00047	eb 03		 jmp	 SHORT $LN10@BuildBinar
$LN11@BuildBinar:

; 44   :         return (-1);

  00049	83 c9 ff	 or	 ecx, -1
$LN10@BuildBinar:

; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0004c	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  0004f	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]

; 560  :             --count;

  00052	83 eb 01	 sub	 ebx, 1
  00055	75 de		 jne	 SHORT $LL7@BuildBinar
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _source_count$1$[ebp]
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _r$1$[ebp]
$LN8@BuildBinar:

; 617  :         {
; 618  :             *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

  0005d	8b 5d 0c	 mov	 ebx, DWORD PTR _out_buf$[ebp]

; 619  :             in_ptr += r;

  00060	8d 3c 47	 lea	 edi, DWORD PTR [edi+eax*2]

; 620  :             source_count -= r;

  00063	2b c8		 sub	 ecx, eax
  00065	89 13		 mov	 DWORD PTR [ebx], edx
  00067	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
$LN14@BuildBinar:

; 621  :         }
; 622  :         while (source_count > 0)

  0006a	85 c9		 test	 ecx, ecx
  0006c	74 28		 je	 SHORT $LN3@BuildBinar
  0006e	49		 dec	 ecx
  0006f	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00074	f7 e1		 mul	 ecx
  00076	8b da		 mov	 ebx, edx
  00078	d1 eb		 shr	 ebx, 1
  0007a	43		 inc	 ebx
  0007b	0f 1f 44 00 00	 npad	 5
$LL2@BuildBinar:

; 623  :         {
; 624  :             *out_ptr++ = Build1WordFromDecimalString(in_ptr);

  00080	57		 push	 edi
  00081	e8 00 00 00 00	 call	 ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString
  00086	89 06		 mov	 DWORD PTR [esi], eax
  00088	83 c4 04	 add	 esp, 4
  0008b	83 c6 04	 add	 esi, 4

; 625  :             in_ptr += word_digit_count;

  0008e	83 c7 12	 add	 edi, 18			; 00000012H
  00091	83 eb 01	 sub	 ebx, 1
  00094	75 ea		 jne	 SHORT $LL2@BuildBinar
$LN3@BuildBinar:

; 626  :             source_count -= word_digit_count;
; 627  :         }
; 628  :         *out_buf_count = out_ptr - out_buf;

  00096	2b 75 0c	 sub	 esi, DWORD PTR _out_buf$[ebp]
  00099	8b 45 10	 mov	 eax, DWORD PTR _out_buf_count$[ebp]
  0009c	c1 fe 02	 sar	 esi, 2
  0009f	5f		 pop	 edi
  000a0	89 30		 mov	 DWORD PTR [eax], esi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx

; 629  :     }

  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPA_WPAI1@Z ENDP ; Palmtree::Math::Core::Internal::BuildBinaryFromDecimalString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_W@Z
_TEXT	SEGMENT
_in_ptr$ = 8						; size = 4
?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_W@Z PROC ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString, COMDAT

; 566  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 567  :         __UNIT_TYPE x = ParseDecimalDigit(*in_ptr++);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00006	0f b7 11	 movzx	 edx, WORD PTR [ecx]

; 42   :         if (c >= L'0' && c <= L'9')

  00009	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  0000c	66 83 f8 09	 cmp	 ax, 9
  00010	77 05		 ja	 SHORT $LN8@Build1Word

; 43   :             return (c - L'0');

  00012	83 ea 30	 sub	 edx, 48			; 00000030H
  00015	eb 03		 jmp	 SHORT $LN7@Build1Word
$LN8@Build1Word:

; 44   :         return (-1);

  00017	83 ca ff	 or	 edx, -1
$LN7@Build1Word:
  0001a	56		 push	 esi

; 568  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 569  :         {
; 570  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 571  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 572  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 573  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 574  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 575  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 576  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 577  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 578  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 579  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 580  :         }
; 581  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 582  :         {
; 583  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0001b	0f b7 71 02	 movzx	 esi, WORD PTR [ecx+2]

; 42   :         if (c >= L'0' && c <= L'9')

  0001f	8d 46 d0	 lea	 eax, DWORD PTR [esi-48]
  00022	66 83 f8 09	 cmp	 ax, 9
  00026	77 05		 ja	 SHORT $LN41@Build1Word

; 43   :             return (c - L'0');

  00028	83 ee 30	 sub	 esi, 48			; 00000030H
  0002b	eb 03		 jmp	 SHORT $LN40@Build1Word
$LN41@Build1Word:

; 44   :         return (-1);

  0002d	83 ce ff	 or	 esi, -1
$LN40@Build1Word:

; 568  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 569  :         {
; 570  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 571  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 572  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 573  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 574  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 575  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 576  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 577  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 578  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 579  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);
; 580  :         }
; 581  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 582  :         {
; 583  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00030	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]

; 584  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00033	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  00037	8d 34 46	 lea	 esi, DWORD PTR [esi+eax*2]

; 42   :         if (c >= L'0' && c <= L'9')

  0003a	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  0003d	66 83 f8 09	 cmp	 ax, 9
  00041	77 05		 ja	 SHORT $LN44@Build1Word

; 43   :             return (c - L'0');

  00043	83 ea 30	 sub	 edx, 48			; 00000030H
  00046	eb 03		 jmp	 SHORT $LN43@Build1Word
$LN44@Build1Word:

; 44   :         return (-1);

  00048	83 ca ff	 or	 edx, -1
$LN43@Build1Word:

; 584  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0004b	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  0004e	8d 34 42	 lea	 esi, DWORD PTR [edx+eax*2]

; 585  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00051	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]

; 42   :         if (c >= L'0' && c <= L'9')

  00055	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  00058	66 83 f8 09	 cmp	 ax, 9
  0005c	77 05		 ja	 SHORT $LN47@Build1Word

; 43   :             return (c - L'0');

  0005e	83 ea 30	 sub	 edx, 48			; 00000030H
  00061	eb 03		 jmp	 SHORT $LN46@Build1Word
$LN47@Build1Word:

; 44   :         return (-1);

  00063	83 ca ff	 or	 edx, -1
$LN46@Build1Word:

; 585  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00066	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  00069	8d 34 42	 lea	 esi, DWORD PTR [edx+eax*2]

; 586  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0006c	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]

; 42   :         if (c >= L'0' && c <= L'9')

  00070	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  00073	66 83 f8 09	 cmp	 ax, 9
  00077	77 05		 ja	 SHORT $LN50@Build1Word

; 43   :             return (c - L'0');

  00079	83 ea 30	 sub	 edx, 48			; 00000030H
  0007c	eb 03		 jmp	 SHORT $LN49@Build1Word
$LN50@Build1Word:

; 44   :         return (-1);

  0007e	83 ca ff	 or	 edx, -1
$LN49@Build1Word:

; 586  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00081	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  00084	8d 34 42	 lea	 esi, DWORD PTR [edx+eax*2]

; 587  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00087	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]

; 42   :         if (c >= L'0' && c <= L'9')

  0008b	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  0008e	66 83 f8 09	 cmp	 ax, 9
  00092	77 05		 ja	 SHORT $LN53@Build1Word

; 43   :             return (c - L'0');

  00094	83 ea 30	 sub	 edx, 48			; 00000030H
  00097	eb 03		 jmp	 SHORT $LN52@Build1Word
$LN53@Build1Word:

; 44   :         return (-1);

  00099	83 ca ff	 or	 edx, -1
$LN52@Build1Word:

; 587  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0009c	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  0009f	8d 34 42	 lea	 esi, DWORD PTR [edx+eax*2]

; 588  :         }
; 589  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 590  :         {
; 591  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000a2	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]

; 42   :         if (c >= L'0' && c <= L'9')

  000a6	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  000a9	66 83 f8 09	 cmp	 ax, 9
  000ad	77 05		 ja	 SHORT $LN56@Build1Word

; 43   :             return (c - L'0');

  000af	83 ea 30	 sub	 edx, 48			; 00000030H
  000b2	eb 03		 jmp	 SHORT $LN55@Build1Word
$LN56@Build1Word:

; 44   :         return (-1);

  000b4	83 ca ff	 or	 edx, -1
$LN55@Build1Word:

; 588  :         }
; 589  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 590  :         {
; 591  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000b7	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  000ba	8d 34 42	 lea	 esi, DWORD PTR [edx+eax*2]

; 592  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000bd	0f b7 51 0e	 movzx	 edx, WORD PTR [ecx+14]

; 42   :         if (c >= L'0' && c <= L'9')

  000c1	8d 42 d0	 lea	 eax, DWORD PTR [edx-48]
  000c4	66 83 f8 09	 cmp	 ax, 9
  000c8	77 05		 ja	 SHORT $LN59@Build1Word

; 43   :             return (c - L'0');

  000ca	83 ea 30	 sub	 edx, 48			; 00000030H
  000cd	eb 03		 jmp	 SHORT $LN58@Build1Word
$LN59@Build1Word:

; 44   :         return (-1);

  000cf	83 ca ff	 or	 edx, -1
$LN58@Build1Word:

; 593  :         }
; 594  :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 595  :         {
; 596  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000d2	0f b7 49 10	 movzx	 ecx, WORD PTR [ecx+16]
  000d6	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  000d9	8d 14 42	 lea	 edx, DWORD PTR [edx+eax*2]

; 42   :         if (c >= L'0' && c <= L'9')

  000dc	5e		 pop	 esi
  000dd	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  000e0	66 83 f8 09	 cmp	 ax, 9
  000e4	77 0b		 ja	 SHORT $LN62@Build1Word

; 43   :             return (c - L'0');

  000e6	83 e9 30	 sub	 ecx, 48			; 00000030H

; 593  :         }
; 594  :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 595  :         {
; 596  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000e9	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  000ec	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 597  :         }
; 598  :         return (x);
; 599  :     }

  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
$LN62@Build1Word:

; 44   :         return (-1);

  000f1	83 c9 ff	 or	 ecx, -1

; 593  :         }
; 594  :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 595  :         {
; 596  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000f4	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  000f7	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 597  :         }
; 598  :         return (x);
; 599  :     }

  000fa	5d		 pop	 ebp
  000fb	c3		 ret	 0
?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_W@Z ENDP ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z
_TEXT	SEGMENT
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z PROC ; Palmtree::Math::Core::Internal::BuildLeading1WordFromDecimalString, COMDAT

; 555  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 556  :         __UNIT_TYPE x = 0;
; 557  :         while (count > 0)

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _count$[ebp]
  00008	33 f6		 xor	 esi, esi
  0000a	85 ff		 test	 edi, edi
  0000c	74 25		 je	 SHORT $LN12@BuildLeadi
  0000e	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
$LL2@BuildLeadi:

; 558  :         {
; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00011	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00014	8d 52 02	 lea	 edx, DWORD PTR [edx+2]

; 42   :         if (c >= L'0' && c <= L'9')

  00017	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0001a	66 83 f8 09	 cmp	 ax, 9
  0001e	77 05		 ja	 SHORT $LN6@BuildLeadi

; 43   :             return (c - L'0');

  00020	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00023	eb 03		 jmp	 SHORT $LN5@BuildLeadi
$LN6@BuildLeadi:

; 44   :         return (-1);

  00025	83 c8 ff	 or	 eax, -1
$LN5@BuildLeadi:

; 558  :         {
; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00028	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  0002b	8d 34 48	 lea	 esi, DWORD PTR [eax+ecx*2]

; 560  :             --count;

  0002e	83 ef 01	 sub	 edi, 1
  00031	75 de		 jne	 SHORT $LL2@BuildLeadi
$LN12@BuildLeadi:
  00033	5f		 pop	 edi

; 561  :         }
; 562  :         return (x);
; 563  :     }

  00034	8b c6		 mov	 eax, esi
  00036	5e		 pop	 esi
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z ENDP ; Palmtree::Math::Core::Internal::BuildLeading1WordFromDecimalString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z
_TEXT	SEGMENT
_state$ = -264						; size = 260
__$ArrayPad$ = -4					; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_sign$ = 20						; size = 4
_int_part_buf$ = 24					; size = 4
_int_part_buf_size$ = 28				; size = 4
_frac_part_buf$ = 32					; size = 4
_frac_part_buf_size$ = 36				; size = 4
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z PROC ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString, COMDAT

; 549  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 20	 mov	 eax, DWORD PTR _frac_part_buf$[ebp]
  00016	8b 4d 18	 mov	 ecx, DWORD PTR _int_part_buf$[ebp]
  00019	8b 55 14	 mov	 edx, DWORD PTR _sign$[ebp]
  0001c	56		 push	 esi

; 550  :         ParserState state(in_ptr, number_styles, format_option, sign, int_part_buf, int_part_buf_size, frac_part_buf, frac_part_buf_size);

  0001d	ff 75 24	 push	 DWORD PTR _frac_part_buf_size$[ebp]
  00020	8b 75 10	 mov	 esi, DWORD PTR _format_option$[ebp]
  00023	50		 push	 eax
  00024	ff 75 1c	 push	 DWORD PTR _int_part_buf_size$[ebp]
  00027	51		 push	 ecx
  00028	52		 push	 edx
  00029	56		 push	 esi
  0002a	ff 75 0c	 push	 DWORD PTR _number_styles$[ebp]
  0002d	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00033	ff 75 08	 push	 DWORD PTR _in_ptr$[ebp]
  00036	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState

; 551  :         return (state.ParseAsDecimalNumberString());

  0003b	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00041	e8 00 00 00 00	 call	 ?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString

; 552  :     }

  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	5e		 pop	 esi
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ENDP ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ
_TEXT	SEGMENT
?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence, COMDAT
; _this$ = ecx

; 527  :         {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx
$LL2@ParseAsFra:

; 528  :             for (;;)
; 529  :             {
; 530  :                 wchar_t c = _source.PeekChar();

  00004	8b 06		 mov	 eax, DWORD PTR [esi]
  00006	8b ce		 mov	 ecx, esi
  00008	ff 10		 call	 DWORD PTR [eax]
  0000a	0f b7 d0	 movzx	 edx, ax

; 42   :         if (c >= L'0' && c <= L'9')

  0000d	8b fa		 mov	 edi, edx
  0000f	8d 4a d0	 lea	 ecx, DWORD PTR [edx-48]
  00012	66 83 f9 09	 cmp	 cx, 9
  00016	77 05		 ja	 SHORT $LN11@ParseAsFra

; 43   :             return (c - L'0');

  00018	8d 47 d0	 lea	 eax, DWORD PTR [edi-48]
  0001b	eb 03		 jmp	 SHORT $LN10@ParseAsFra
$LN11@ParseAsFra:

; 44   :         return (-1);

  0001d	83 c8 ff	 or	 eax, -1
$LN10@ParseAsFra:

; 531  :                 if (ParseDecimalDigit(c) >= 0)

  00020	85 c0		 test	 eax, eax
  00022	79 38		 jns	 SHORT $LN21@ParseAsFra

; 532  :                 {
; 533  :                     _frac_part.Write(c);
; 534  :                     _source.Progress();
; 535  :                 }
; 536  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  00024	f7 46 30 00 02
	00 00		 test	 DWORD PTR [esi+48], 512	; 00000200H
  0002b	74 42		 je	 SHORT $LN16@ParseAsFra

; 49   :         if (c >= L'0' && c <= L'9')

  0002d	66 83 f9 09	 cmp	 cx, 9
  00031	77 07		 ja	 SHORT $LN14@ParseAsFra

; 50   :             return (c - L'0');

  00033	b8 d0 ff ff ff	 mov	 eax, -48		; ffffffd0H
  00038	eb 1e		 jmp	 SHORT $LN13@ParseAsFra
$LN14@ParseAsFra:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  0003a	8d 42 9f	 lea	 eax, DWORD PTR [edx-97]
  0003d	66 83 f8 05	 cmp	 ax, 5
  00041	77 07		 ja	 SHORT $LN15@ParseAsFra

; 53   :             return (c - L'a' + 10);

  00043	b8 a9 ff ff ff	 mov	 eax, -87		; ffffffa9H
  00048	eb 0e		 jmp	 SHORT $LN13@ParseAsFra
$LN15@ParseAsFra:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0004a	8d 42 bf	 lea	 eax, DWORD PTR [edx-65]
  0004d	66 83 f8 05	 cmp	 ax, 5
  00051	77 1c		 ja	 SHORT $LN16@ParseAsFra

; 56   :             return (c - L'A' + 10);

  00053	b8 c9 ff ff ff	 mov	 eax, -55		; ffffffc9H
$LN13@ParseAsFra:

; 532  :                 {
; 533  :                     _frac_part.Write(c);
; 534  :                     _source.Progress();
; 535  :                 }
; 536  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  00058	03 c7		 add	 eax, edi
  0005a	78 13		 js	 SHORT $LN16@ParseAsFra
$LN21@ParseAsFra:

; 528  :             for (;;)
; 529  :             {
; 530  :                 wchar_t c = _source.PeekChar();

  0005c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005f	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00062	52		 push	 edx
  00063	ff 50 04	 call	 DWORD PTR [eax+4]
  00066	8b 06		 mov	 eax, DWORD PTR [esi]
  00068	8b ce		 mov	 ecx, esi
  0006a	ff 50 04	 call	 DWORD PTR [eax+4]
  0006d	eb 95		 jmp	 SHORT $LL2@ParseAsFra
$LN16@ParseAsFra:
  0006f	5f		 pop	 edi

; 537  :                 {
; 538  :                     _frac_part.Write(c);
; 539  :                     _source.Progress();
; 540  :                 }
; 541  :                 else
; 542  :                     break;
; 543  :             }
; 544  :         }

  00070	5e		 pop	 esi
  00071	c3		 ret	 0
?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ
_TEXT	SEGMENT
?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence, COMDAT
; _this$ = ecx

; 503  :         {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx
$LL2@ParseAsInt:

; 504  :             for (;;)
; 505  :             {
; 506  :                 wchar_t c = _source.PeekChar();

  00005	8b 06		 mov	 eax, DWORD PTR [esi]
  00007	8b ce		 mov	 ecx, esi
  00009	ff 10		 call	 DWORD PTR [eax]
  0000b	0f b7 d0	 movzx	 edx, ax

; 42   :         if (c >= L'0' && c <= L'9')

  0000e	8b da		 mov	 ebx, edx
  00010	8d 7a d0	 lea	 edi, DWORD PTR [edx-48]
  00013	66 83 ff 09	 cmp	 di, 9
  00017	77 05		 ja	 SHORT $LN15@ParseAsInt

; 43   :             return (c - L'0');

  00019	8d 43 d0	 lea	 eax, DWORD PTR [ebx-48]
  0001c	eb 03		 jmp	 SHORT $LN14@ParseAsInt
$LN15@ParseAsInt:

; 44   :         return (-1);

  0001e	83 c8 ff	 or	 eax, -1
$LN14@ParseAsInt:

; 507  :                 if (ParseDecimalDigit(c) >= 0)

  00021	85 c0		 test	 eax, eax
  00023	79 3a		 jns	 SHORT $LN26@ParseAsInt

; 508  :                 {
; 509  :                     _int_part.Write(c);
; 510  :                     _source.Progress();
; 511  :                 }
; 512  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  00025	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00028	f7 c1 00 02 00
	00		 test	 ecx, 512		; 00000200H
  0002e	74 42		 je	 SHORT $LN7@ParseAsInt

; 49   :         if (c >= L'0' && c <= L'9')

  00030	66 83 ff 09	 cmp	 di, 9
  00034	77 07		 ja	 SHORT $LN18@ParseAsInt

; 50   :             return (c - L'0');

  00036	b8 d0 ff ff ff	 mov	 eax, -48		; ffffffd0H
  0003b	eb 1e		 jmp	 SHORT $LN17@ParseAsInt
$LN18@ParseAsInt:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  0003d	8d 42 9f	 lea	 eax, DWORD PTR [edx-97]
  00040	66 83 f8 05	 cmp	 ax, 5
  00044	77 07		 ja	 SHORT $LN19@ParseAsInt

; 53   :             return (c - L'a' + 10);

  00046	b8 a9 ff ff ff	 mov	 eax, -87		; ffffffa9H
  0004b	eb 0e		 jmp	 SHORT $LN17@ParseAsInt
$LN19@ParseAsInt:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0004d	8d 42 bf	 lea	 eax, DWORD PTR [edx-65]
  00050	66 83 f8 05	 cmp	 ax, 5
  00054	77 1c		 ja	 SHORT $LN7@ParseAsInt

; 56   :             return (c - L'A' + 10);

  00056	b8 c9 ff ff ff	 mov	 eax, -55		; ffffffc9H
$LN17@ParseAsInt:

; 508  :                 {
; 509  :                     _int_part.Write(c);
; 510  :                     _source.Progress();
; 511  :                 }
; 512  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  0005b	03 c3		 add	 eax, ebx
  0005d	78 13		 js	 SHORT $LN7@ParseAsInt
$LN26@ParseAsInt:

; 504  :             for (;;)
; 505  :             {
; 506  :                 wchar_t c = _source.PeekChar();

  0005f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00062	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00065	52		 push	 edx
  00066	ff 50 04	 call	 DWORD PTR [eax+4]
  00069	8b 06		 mov	 eax, DWORD PTR [esi]
  0006b	8b ce		 mov	 ecx, esi
  0006d	ff 50 04	 call	 DWORD PTR [eax+4]
  00070	eb 93		 jmp	 SHORT $LL2@ParseAsInt
$LN7@ParseAsInt:

; 513  :                 {
; 514  :                     _int_part.Write(c);
; 515  :                     _source.Progress();
; 516  :                 }
; 517  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_THOUSANDS) && _source.StartsWith(_group_separator))

  00072	f6 c1 40	 test	 cl, 64			; 00000040H
  00075	74 46		 je	 SHORT $LN11@ParseAsInt
  00077	8b 06		 mov	 eax, DWORD PTR [esi]
  00079	8d be c0 00 00
	00		 lea	 edi, DWORD PTR [esi+192]
  0007f	57		 push	 edi
  00080	8b ce		 mov	 ecx, esi
  00082	ff 50 08	 call	 DWORD PTR [eax+8]
  00085	85 c0		 test	 eax, eax
  00087	74 0d		 je	 SHORT $LN24@ParseAsInt

; 518  :                     _source.SkipString(_group_separator);

  00089	8b 06		 mov	 eax, DWORD PTR [esi]
  0008b	8b ce		 mov	 ecx, esi
  0008d	57		 push	 edi
  0008e	ff 50 0c	 call	 DWORD PTR [eax+12]
  00091	e9 6f ff ff ff	 jmp	 $LL2@ParseAsInt
$LN24@ParseAsInt:
  00096	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]

; 519  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_THOUSANDS) && _source.StartsWith(_secondary_group_separator))

  00099	f6 c1 40	 test	 cl, 64			; 00000040H
  0009c	74 1f		 je	 SHORT $LN11@ParseAsInt
  0009e	8b 06		 mov	 eax, DWORD PTR [esi]
  000a0	8d be e2 00 00
	00		 lea	 edi, DWORD PTR [esi+226]
  000a6	57		 push	 edi
  000a7	8b ce		 mov	 ecx, esi
  000a9	ff 50 08	 call	 DWORD PTR [eax+8]
  000ac	85 c0		 test	 eax, eax
  000ae	74 0d		 je	 SHORT $LN11@ParseAsInt

; 520  :                     _source.SkipString(_secondary_group_separator);

  000b0	8b 06		 mov	 eax, DWORD PTR [esi]
  000b2	8b ce		 mov	 ecx, esi
  000b4	57		 push	 edi
  000b5	ff 50 0c	 call	 DWORD PTR [eax+12]

; 521  :                 else
; 522  :                     break;
; 523  :             }

  000b8	e9 48 ff ff ff	 jmp	 $LL2@ParseAsInt
$LN11@ParseAsInt:
  000bd	5f		 pop	 edi

; 524  :         }

  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	c3		 ret	 0
?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ
_TEXT	SEGMENT
?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString, COMDAT
; _this$ = ecx

; 479  :         {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 480  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  00003	f6 46 30 01	 test	 BYTE PTR [esi+48], 1
  00007	74 05		 je	 SHORT $LN2@ParseAsHex

; 481  :                 _source.SkipSpace();

  00009	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN2@ParseAsHex:

; 482  :             ParseAsIntegerPartNumberSequence();

  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 483  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00015	f6 46 30 02	 test	 BYTE PTR [esi+48], 2
  00019	74 07		 je	 SHORT $LN3@ParseAsHex

; 484  :                 _source.SkipSpace();

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN3@ParseAsHex:

; 485  :             if (_source.PeekChar() != L'\0')

  00022	8b 06		 mov	 eax, DWORD PTR [esi]
  00024	8b ce		 mov	 ecx, esi
  00026	ff 10		 call	 DWORD PTR [eax]
  00028	33 c9		 xor	 ecx, ecx
  0002a	66 85 c0	 test	 ax, ax
  0002d	5e		 pop	 esi
  0002e	0f 94 c1	 sete	 cl
  00031	8b c1		 mov	 eax, ecx

; 486  :                 return (0);
; 487  :             return (1);
; 488  :         }

  00033	c3		 ret	 0
?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ
_TEXT	SEGMENT
?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString, COMDAT
; _this$ = ecx

; 130  :         {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 131  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  00005	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00008	8b c8		 mov	 ecx, eax
  0000a	a8 01		 test	 al, 1
  0000c	74 0c		 je	 SHORT $LN2@ParseAsDec

; 132  :                 _source.SkipSpace();

  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
  00015	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00018	8b c8		 mov	 ecx, eax
$LN2@ParseAsDec:

; 133  :             if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  0001a	8d 7e 38	 lea	 edi, DWORD PTR [esi+56]
  0001d	a9 00 01 00 00	 test	 eax, 256		; 00000100H
  00022	0f 84 9b 01 00
	00		 je	 $LN136@ParseAsDec
  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	8b ce		 mov	 ecx, esi
  0002c	57		 push	 edi
  0002d	ff 50 08	 call	 DWORD PTR [eax+8]
  00030	85 c0		 test	 eax, eax
  00032	0f 84 88 01 00
	00		 je	 $LN135@ParseAsDec

; 134  :             {
; 135  :                 _source.SkipString(_currency_symbol);

  00038	8b 06		 mov	 eax, DWORD PTR [esi]
  0003a	8b ce		 mov	 ecx, esi
  0003c	57		 push	 edi
  0003d	ff 50 0c	 call	 DWORD PTR [eax+12]

; 136  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  00040	f6 46 30 01	 test	 BYTE PTR [esi+48], 1
  00044	74 1c		 je	 SHORT $LN5@ParseAsDec
  00046	8b 06		 mov	 eax, DWORD PTR [esi]
  00048	8b ce		 mov	 ecx, esi
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  0004f	ff 50 08	 call	 DWORD PTR [eax+8]
  00052	85 c0		 test	 eax, eax
  00054	74 0c		 je	 SHORT $LN5@ParseAsDec

; 137  :                     _source.SkipString(L" ");

  00056	8b 06		 mov	 eax, DWORD PTR [esi]
  00058	8b ce		 mov	 ecx, esi
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  0005f	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN5@ParseAsDec:

; 138  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_positive_sign))

  00062	f6 46 30 04	 test	 BYTE PTR [esi+48], 4
  00066	0f 84 b5 00 00
	00		 je	 $LN162@ParseAsDec
  0006c	8b 06		 mov	 eax, DWORD PTR [esi]
  0006e	8d 7e 5a	 lea	 edi, DWORD PTR [esi+90]
  00071	57		 push	 edi
  00072	8b ce		 mov	 ecx, esi
  00074	ff 50 08	 call	 DWORD PTR [eax+8]
  00077	85 c0		 test	 eax, eax
  00079	74 27		 je	 SHORT $LN161@ParseAsDec

; 139  :                 {
; 140  :                     *_sign = 1;

  0007b	8b 46 34	 mov	 eax, DWORD PTR [esi+52]

; 141  :                     _source.SkipString(_positive_sign);

  0007e	8b ce		 mov	 ecx, esi
  00080	57		 push	 edi
  00081	c6 00 01	 mov	 BYTE PTR [eax], 1
  00084	8b 06		 mov	 eax, DWORD PTR [esi]
  00086	ff 50 0c	 call	 DWORD PTR [eax+12]

; 142  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00089	8b 06		 mov	 eax, DWORD PTR [esi]
  0008b	8b ce		 mov	 ecx, esi
  0008d	ff 10		 call	 DWORD PTR [eax]
  0008f	0f b7 c8	 movzx	 ecx, ax

; 42   :         if (c >= L'0' && c <= L'9')

  00092	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00095	66 83 f8 09	 cmp	 ax, 9
  00099	77 47		 ja	 SHORT $LN12@ParseAsDec

; 142  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  0009b	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0009e	72 42		 jb	 SHORT $LN12@ParseAsDec

; 143  :                         ParseAsIntegerPartNumberSequence();
; 144  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 145  :                     {
; 146  :                         _source.SkipString(_decimal_separator);
; 147  :                         _frac_part.Write(L'.');
; 148  :                         ParseAsFractionPartNumberSequence();
; 149  :                     }
; 150  :                 }

  000a0	eb 39		 jmp	 SHORT $LN200@ParseAsDec
$LN161@ParseAsDec:

; 151  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  000a2	f6 46 30 04	 test	 BYTE PTR [esi+48], 4
  000a6	74 79		 je	 SHORT $LN162@ParseAsDec
  000a8	8b 06		 mov	 eax, DWORD PTR [esi]
  000aa	8d 7e 7c	 lea	 edi, DWORD PTR [esi+124]
  000ad	57		 push	 edi
  000ae	8b ce		 mov	 ecx, esi
  000b0	ff 50 08	 call	 DWORD PTR [eax+8]
  000b3	85 c0		 test	 eax, eax
  000b5	74 6a		 je	 SHORT $LN162@ParseAsDec

; 152  :                 {
; 153  :                     *_sign = -1;

  000b7	8b 46 34	 mov	 eax, DWORD PTR [esi+52]

; 154  :                     _source.SkipString(_negative_sign);

  000ba	57		 push	 edi
  000bb	c6 00 ff	 mov	 BYTE PTR [eax], -1
$LN203@ParseAsDec:

; 407  :                         }
; 408  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 409  :                         {
; 410  :                             *_sign = -1;
; 411  :                             _source.SkipString(_negative_sign);
; 412  :                         }
; 413  :                         else
; 414  :                         {
; 415  :                         }
; 416  :                     }
; 417  :                     else
; 418  :                     {
; 419  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 420  :                         {
; 421  :                             *_sign = 1;
; 422  :                             _source.SkipString(_positive_sign);
; 423  :                         }
; 424  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 425  :                         {
; 426  :                             *_sign = -1;
; 427  :                             _source.SkipString(_negative_sign);
; 428  :                         }
; 429  :                         else
; 430  :                         {
; 431  :                         }
; 432  :                     }
; 433  :                 }
; 434  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 435  :                 {
; 436  :                     _source.SkipString(_currency_symbol);
; 437  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 438  :                     {
; 439  :                         *_sign = 1;
; 440  :                         _source.SkipString(_positive_sign);
; 441  :                     }
; 442  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 443  :                     {
; 444  :                         *_sign = -1;
; 445  :                         _source.SkipString(_negative_sign);
; 446  :                     }
; 447  :                     else
; 448  :                     {
; 449  :                     }
; 450  :                 }
; 451  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 452  :                 {
; 453  :                     *_sign = 1;
; 454  :                     _source.SkipString(_positive_sign);
; 455  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 456  :                         _source.SkipString(_currency_symbol);
; 457  :                 }
; 458  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 459  :                 {
; 460  :                     *_sign = -1;
; 461  :                     _source.SkipString(_negative_sign);
; 462  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 463  :                         _source.SkipString(_currency_symbol);
; 464  :                 }
; 465  :                 else
; 466  :                 {
; 467  :                 }
; 468  :             }
; 469  :             else
; 470  :                 return (0);
; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  000be	8b 06		 mov	 eax, DWORD PTR [esi]
  000c0	8b ce		 mov	 ecx, esi
  000c2	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN35@ParseAsDec:
  000c5	8b 06		 mov	 eax, DWORD PTR [esi]
  000c7	8b ce		 mov	 ecx, esi
  000c9	ff 10		 call	 DWORD PTR [eax]
  000cb	0f b7 c0	 movzx	 eax, ax
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  000d4	83 c4 04	 add	 esp, 4
  000d7	85 c0		 test	 eax, eax
  000d9	78 07		 js	 SHORT $LN12@ParseAsDec
$LN200@ParseAsDec:
  000db	8b ce		 mov	 ecx, esi
  000dd	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN12@ParseAsDec:
  000e2	f6 46 30 20	 test	 BYTE PTR [esi+48], 32	; 00000020H
  000e6	0f 84 15 06 00
	00		 je	 $LN111@ParseAsDec
  000ec	8b 06		 mov	 eax, DWORD PTR [esi]
  000ee	8d be 9e 00 00
	00		 lea	 edi, DWORD PTR [esi+158]
  000f4	57		 push	 edi
  000f5	8b ce		 mov	 ecx, esi
  000f7	ff 50 08	 call	 DWORD PTR [eax+8]
  000fa	85 c0		 test	 eax, eax
  000fc	0f 84 ff 05 00
	00		 je	 $LN111@ParseAsDec
  00102	8b 06		 mov	 eax, DWORD PTR [esi]
  00104	8b ce		 mov	 ecx, esi
  00106	57		 push	 edi
  00107	ff 50 0c	 call	 DWORD PTR [eax+12]
  0010a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0010d	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00110	6a 2e		 push	 46			; 0000002eH
  00112	ff 50 04	 call	 DWORD PTR [eax+4]
  00115	8b ce		 mov	 ecx, esi
  00117	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
  0011c	e9 e0 05 00 00	 jmp	 $LN111@ParseAsDec
$LN162@ParseAsDec:

; 155  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 156  :                         ParseAsIntegerPartNumberSequence();
; 157  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 158  :                     {
; 159  :                         _source.SkipString(_decimal_separator);
; 160  :                         _frac_part.Write(L'.');
; 161  :                         ParseAsFractionPartNumberSequence();
; 162  :                     }
; 163  :                 }
; 164  :                 else
; 165  :                 {
; 166  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00121	8b 06		 mov	 eax, DWORD PTR [esi]
  00123	8b ce		 mov	 ecx, esi
  00125	ff 10		 call	 DWORD PTR [eax]
  00127	0f b7 c8	 movzx	 ecx, ax

; 42   :         if (c >= L'0' && c <= L'9')

  0012a	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0012d	66 83 f8 09	 cmp	 ax, 9
  00131	77 0c		 ja	 SHORT $LN14@ParseAsDec

; 155  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 156  :                         ParseAsIntegerPartNumberSequence();
; 157  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 158  :                     {
; 159  :                         _source.SkipString(_decimal_separator);
; 160  :                         _frac_part.Write(L'.');
; 161  :                         ParseAsFractionPartNumberSequence();
; 162  :                     }
; 163  :                 }
; 164  :                 else
; 165  :                 {
; 166  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00133	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00136	72 07		 jb	 SHORT $LN14@ParseAsDec

; 167  :                         ParseAsIntegerPartNumberSequence();

  00138	8b ce		 mov	 ecx, esi
  0013a	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN14@ParseAsDec:

; 168  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  0013f	f6 46 30 20	 test	 BYTE PTR [esi+48], 32	; 00000020H
  00143	74 2c		 je	 SHORT $LN15@ParseAsDec
  00145	8b 06		 mov	 eax, DWORD PTR [esi]
  00147	8d be 9e 00 00
	00		 lea	 edi, DWORD PTR [esi+158]
  0014d	57		 push	 edi
  0014e	8b ce		 mov	 ecx, esi
  00150	ff 50 08	 call	 DWORD PTR [eax+8]
  00153	85 c0		 test	 eax, eax
  00155	74 1a		 je	 SHORT $LN15@ParseAsDec

; 169  :                     {
; 170  :                         _source.SkipString(_decimal_separator);

  00157	8b 06		 mov	 eax, DWORD PTR [esi]
  00159	8b ce		 mov	 ecx, esi
  0015b	57		 push	 edi
  0015c	ff 50 0c	 call	 DWORD PTR [eax+12]

; 171  :                         _frac_part.Write(L'.');

  0015f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00162	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00165	6a 2e		 push	 46			; 0000002eH
  00167	ff 50 04	 call	 DWORD PTR [eax+4]

; 172  :                         ParseAsFractionPartNumberSequence();

  0016a	8b ce		 mov	 ecx, esi
  0016c	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN15@ParseAsDec:

; 173  :                     }
; 174  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  00171	f6 46 30 08	 test	 BYTE PTR [esi+48], 8
  00175	0f 84 86 05 00
	00		 je	 $LN111@ParseAsDec
  0017b	8b 06		 mov	 eax, DWORD PTR [esi]
  0017d	8d 7e 5a	 lea	 edi, DWORD PTR [esi+90]
  00180	57		 push	 edi
  00181	8b ce		 mov	 ecx, esi
  00183	ff 50 08	 call	 DWORD PTR [eax+8]
  00186	85 c0		 test	 eax, eax
  00188	74 0e		 je	 SHORT $LN16@ParseAsDec

; 175  :                     {
; 176  :                         *_sign = 1;

  0018a	8b 46 34	 mov	 eax, DWORD PTR [esi+52]

; 177  :                         _source.SkipString(_positive_sign);

  0018d	8b ce		 mov	 ecx, esi
  0018f	57		 push	 edi
  00190	c6 00 01	 mov	 BYTE PTR [eax], 1
  00193	8b 06		 mov	 eax, DWORD PTR [esi]
  00195	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN16@ParseAsDec:

; 407  :                         }
; 408  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 409  :                         {
; 410  :                             *_sign = -1;
; 411  :                             _source.SkipString(_negative_sign);
; 412  :                         }
; 413  :                         else
; 414  :                         {
; 415  :                         }
; 416  :                     }
; 417  :                     else
; 418  :                     {
; 419  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 420  :                         {
; 421  :                             *_sign = 1;
; 422  :                             _source.SkipString(_positive_sign);
; 423  :                         }
; 424  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 425  :                         {
; 426  :                             *_sign = -1;
; 427  :                             _source.SkipString(_negative_sign);
; 428  :                         }
; 429  :                         else
; 430  :                         {
; 431  :                         }
; 432  :                     }
; 433  :                 }
; 434  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 435  :                 {
; 436  :                     _source.SkipString(_currency_symbol);
; 437  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 438  :                     {
; 439  :                         *_sign = 1;
; 440  :                         _source.SkipString(_positive_sign);
; 441  :                     }
; 442  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 443  :                     {
; 444  :                         *_sign = -1;
; 445  :                         _source.SkipString(_negative_sign);
; 446  :                     }
; 447  :                     else
; 448  :                     {
; 449  :                     }
; 450  :                 }
; 451  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 452  :                 {
; 453  :                     *_sign = 1;
; 454  :                     _source.SkipString(_positive_sign);
; 455  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 456  :                         _source.SkipString(_currency_symbol);
; 457  :                 }
; 458  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 459  :                 {
; 460  :                     *_sign = -1;
; 461  :                     _source.SkipString(_negative_sign);
; 462  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 463  :                         _source.SkipString(_currency_symbol);
; 464  :                 }
; 465  :                 else
; 466  :                 {
; 467  :                 }
; 468  :             }
; 469  :             else
; 470  :                 return (0);
; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00198	f6 46 30 08	 test	 BYTE PTR [esi+48], 8
  0019c	0f 84 5f 05 00
	00		 je	 $LN111@ParseAsDec
  001a2	8b 06		 mov	 eax, DWORD PTR [esi]
  001a4	8d 7e 7c	 lea	 edi, DWORD PTR [esi+124]
  001a7	57		 push	 edi
  001a8	8b ce		 mov	 ecx, esi
  001aa	ff 50 08	 call	 DWORD PTR [eax+8]
  001ad	85 c0		 test	 eax, eax
  001af	0f 84 4c 05 00
	00		 je	 $LN111@ParseAsDec
  001b5	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  001b8	c6 00 ff	 mov	 BYTE PTR [eax], -1
  001bb	e9 39 05 00 00	 jmp	 $LN185@ParseAsDec
$LN135@ParseAsDec:
  001c0	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
$LN136@ParseAsDec:

; 178  :                     }
; 179  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 180  :                     {
; 181  :                         *_sign = -1;
; 182  :                         _source.SkipString(_negative_sign);
; 183  :                     }
; 184  :                     else
; 185  :                     {
; 186  :                     }
; 187  :                 }
; 188  :             }
; 189  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && _source.StartsWith(L"(") /*&& 負数のエラーチェック()*/)

  001c3	f6 c1 10	 test	 cl, 16			; 00000010H
  001c6	0f 84 76 01 00
	00		 je	 $LN164@ParseAsDec
  001cc	8b 06		 mov	 eax, DWORD PTR [esi]
  001ce	8b ce		 mov	 ecx, esi
  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_13LLDNKHDC@?$AA?$CI@
  001d5	ff 50 08	 call	 DWORD PTR [eax+8]
  001d8	85 c0		 test	 eax, eax
  001da	0f 84 62 01 00
	00		 je	 $LN164@ParseAsDec

; 190  :             {
; 191  :                 *_sign = -1;

  001e0	8b 46 34	 mov	 eax, DWORD PTR [esi+52]

; 192  :                 _source.SkipString(L"(");

  001e3	8b ce		 mov	 ecx, esi
  001e5	68 00 00 00 00	 push	 OFFSET ??_C@_13LLDNKHDC@?$AA?$CI@
  001ea	c6 00 ff	 mov	 BYTE PTR [eax], -1
  001ed	8b 06		 mov	 eax, DWORD PTR [esi]
  001ef	ff 50 0c	 call	 DWORD PTR [eax+12]

; 193  : 
; 194  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  001f2	f7 46 30 00 01
	00 00		 test	 DWORD PTR [esi+48], 256	; 00000100H
  001f9	0f 84 96 00 00
	00		 je	 $LN163@ParseAsDec
  001ff	8b 06		 mov	 eax, DWORD PTR [esi]
  00201	8b ce		 mov	 ecx, esi
  00203	57		 push	 edi
  00204	ff 50 08	 call	 DWORD PTR [eax+8]
  00207	85 c0		 test	 eax, eax
  00209	0f 84 86 00 00
	00		 je	 $LN163@ParseAsDec

; 195  :                 {
; 196  :                     _source.SkipString(_currency_symbol);

  0020f	8b 06		 mov	 eax, DWORD PTR [esi]
  00211	8b ce		 mov	 ecx, esi
  00213	57		 push	 edi
  00214	ff 50 0c	 call	 DWORD PTR [eax+12]

; 197  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  00217	f6 46 30 01	 test	 BYTE PTR [esi+48], 1
  0021b	74 1c		 je	 SHORT $LN23@ParseAsDec
  0021d	8b 06		 mov	 eax, DWORD PTR [esi]
  0021f	8b ce		 mov	 ecx, esi
  00221	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00226	ff 50 08	 call	 DWORD PTR [eax+8]
  00229	85 c0		 test	 eax, eax
  0022b	74 0c		 je	 SHORT $LN23@ParseAsDec

; 198  :                         _source.SkipString(L" ");

  0022d	8b 06		 mov	 eax, DWORD PTR [esi]
  0022f	8b ce		 mov	 ecx, esi
  00231	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00236	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN23@ParseAsDec:

; 199  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00239	8b 06		 mov	 eax, DWORD PTR [esi]
  0023b	8b ce		 mov	 ecx, esi
  0023d	ff 10		 call	 DWORD PTR [eax]
  0023f	0f b7 c0	 movzx	 eax, ax
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00248	83 c4 04	 add	 esp, 4
  0024b	85 c0		 test	 eax, eax
  0024d	78 07		 js	 SHORT $LN24@ParseAsDec

; 200  :                         ParseAsIntegerPartNumberSequence();

  0024f	8b ce		 mov	 ecx, esi
  00251	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN24@ParseAsDec:

; 201  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00256	f6 46 30 20	 test	 BYTE PTR [esi+48], 32	; 00000020H
  0025a	0f 84 c4 00 00
	00		 je	 $LN29@ParseAsDec
  00260	8b 06		 mov	 eax, DWORD PTR [esi]
  00262	8d be 9e 00 00
	00		 lea	 edi, DWORD PTR [esi+158]
  00268	57		 push	 edi
  00269	8b ce		 mov	 ecx, esi
  0026b	ff 50 08	 call	 DWORD PTR [eax+8]
  0026e	85 c0		 test	 eax, eax
  00270	0f 84 ae 00 00
	00		 je	 $LN29@ParseAsDec

; 202  :                     {
; 203  :                         _source.SkipString(_decimal_separator);

  00276	8b 06		 mov	 eax, DWORD PTR [esi]
  00278	8b ce		 mov	 ecx, esi
  0027a	57		 push	 edi
  0027b	ff 50 0c	 call	 DWORD PTR [eax+12]

; 204  :                         _frac_part.Write(L'.');

  0027e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00281	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00284	6a 2e		 push	 46			; 0000002eH
  00286	ff 50 04	 call	 DWORD PTR [eax+4]

; 205  :                         ParseAsFractionPartNumberSequence();

  00289	8b ce		 mov	 ecx, esi
  0028b	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence

; 206  :                     }
; 207  :                 }
; 208  :                 else

  00290	e9 8f 00 00 00	 jmp	 $LN29@ParseAsDec
$LN163@ParseAsDec:

; 209  :                 {
; 210  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00295	8b 06		 mov	 eax, DWORD PTR [esi]
  00297	8b ce		 mov	 ecx, esi
  00299	ff 10		 call	 DWORD PTR [eax]
  0029b	0f b7 c8	 movzx	 ecx, ax

; 42   :         if (c >= L'0' && c <= L'9')

  0029e	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  002a1	66 83 f8 09	 cmp	 ax, 9
  002a5	77 0c		 ja	 SHORT $LN26@ParseAsDec

; 209  :                 {
; 210  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  002a7	83 f9 30	 cmp	 ecx, 48			; 00000030H
  002aa	72 07		 jb	 SHORT $LN26@ParseAsDec

; 211  :                         ParseAsIntegerPartNumberSequence();

  002ac	8b ce		 mov	 ecx, esi
  002ae	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN26@ParseAsDec:

; 212  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  002b3	f6 46 30 20	 test	 BYTE PTR [esi+48], 32	; 00000020H
  002b7	74 2c		 je	 SHORT $LN27@ParseAsDec
  002b9	8b 06		 mov	 eax, DWORD PTR [esi]
  002bb	8d 9e 9e 00 00
	00		 lea	 ebx, DWORD PTR [esi+158]
  002c1	53		 push	 ebx
  002c2	8b ce		 mov	 ecx, esi
  002c4	ff 50 08	 call	 DWORD PTR [eax+8]
  002c7	85 c0		 test	 eax, eax
  002c9	74 1a		 je	 SHORT $LN27@ParseAsDec

; 213  :                     {
; 214  :                         _source.SkipString(_decimal_separator);

  002cb	8b 06		 mov	 eax, DWORD PTR [esi]
  002cd	8b ce		 mov	 ecx, esi
  002cf	53		 push	 ebx
  002d0	ff 50 0c	 call	 DWORD PTR [eax+12]

; 215  :                         _frac_part.Write(L'.');

  002d3	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002d6	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  002d9	6a 2e		 push	 46			; 0000002eH
  002db	ff 50 04	 call	 DWORD PTR [eax+4]

; 216  :                         ParseAsFractionPartNumberSequence();

  002de	8b ce		 mov	 ecx, esi
  002e0	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN27@ParseAsDec:

; 217  :                     }
; 218  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  002e5	f6 46 30 02	 test	 BYTE PTR [esi+48], 2
  002e9	74 39		 je	 SHORT $LN29@ParseAsDec
  002eb	8b 06		 mov	 eax, DWORD PTR [esi]
  002ed	8b ce		 mov	 ecx, esi
  002ef	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  002f4	ff 50 08	 call	 DWORD PTR [eax+8]
  002f7	85 c0		 test	 eax, eax
  002f9	74 29		 je	 SHORT $LN29@ParseAsDec

; 219  :                     {
; 220  :                         _source.SkipString(L" ");

  002fb	8b 06		 mov	 eax, DWORD PTR [esi]
  002fd	8b ce		 mov	 ecx, esi
  002ff	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00304	ff 50 0c	 call	 DWORD PTR [eax+12]

; 221  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00307	f7 46 30 00 01
	00 00		 test	 DWORD PTR [esi+48], 256	; 00000100H
  0030e	74 14		 je	 SHORT $LN29@ParseAsDec
  00310	8b 06		 mov	 eax, DWORD PTR [esi]
  00312	8b ce		 mov	 ecx, esi
  00314	57		 push	 edi
  00315	ff 50 08	 call	 DWORD PTR [eax+8]
  00318	85 c0		 test	 eax, eax
  0031a	74 08		 je	 SHORT $LN29@ParseAsDec

; 222  :                             _source.SkipString(_currency_symbol);

  0031c	8b 06		 mov	 eax, DWORD PTR [esi]
  0031e	8b ce		 mov	 ecx, esi
  00320	57		 push	 edi
  00321	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN29@ParseAsDec:

; 223  :                     }
; 224  :                 }
; 225  :                 if (!_source.StartsWith(L")"))

  00324	8b 06		 mov	 eax, DWORD PTR [esi]
  00326	8b ce		 mov	 ecx, esi
  00328	68 00 00 00 00	 push	 OFFSET ??_C@_13DIBMAFH@?$AA?$CJ@
  0032d	ff 50 08	 call	 DWORD PTR [eax+8]
  00330	85 c0		 test	 eax, eax
  00332	0f 84 ea 03 00
	00		 je	 $LN86@ParseAsDec

; 226  :                     return (0);
; 227  :                 _source.SkipString(L")");

  00338	68 00 00 00 00	 push	 OFFSET ??_C@_13DIBMAFH@?$AA?$CJ@
  0033d	e9 b8 03 00 00	 jmp	 $LN186@ParseAsDec
$LN164@ParseAsDec:

; 228  :             }
; 229  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_positive_sign))

  00342	f6 46 30 04	 test	 BYTE PTR [esi+48], 4
  00346	0f 84 9a 01 00
	00		 je	 $LN170@ParseAsDec
  0034c	8b 06		 mov	 eax, DWORD PTR [esi]
  0034e	8d 5e 5a	 lea	 ebx, DWORD PTR [esi+90]
  00351	53		 push	 ebx
  00352	8b ce		 mov	 ecx, esi
  00354	ff 50 08	 call	 DWORD PTR [eax+8]
  00357	85 c0		 test	 eax, eax
  00359	0f 84 cb 00 00
	00		 je	 $LN167@ParseAsDec

; 230  :             {
; 231  :                 *_sign = 1;

  0035f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]

; 232  :                 _source.SkipString(_positive_sign);

  00362	8b ce		 mov	 ecx, esi
  00364	53		 push	 ebx
  00365	c6 00 01	 mov	 BYTE PTR [eax], 1
  00368	8b 06		 mov	 eax, DWORD PTR [esi]
  0036a	ff 50 0c	 call	 DWORD PTR [eax+12]

; 233  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  0036d	f7 46 30 00 01
	00 00		 test	 DWORD PTR [esi+48], 256	; 00000100H
  00374	74 3c		 je	 SHORT $LN165@ParseAsDec
  00376	8b 06		 mov	 eax, DWORD PTR [esi]
  00378	8b ce		 mov	 ecx, esi
  0037a	57		 push	 edi
  0037b	ff 50 08	 call	 DWORD PTR [eax+8]
  0037e	85 c0		 test	 eax, eax
  00380	74 30		 je	 SHORT $LN165@ParseAsDec
$LN206@ParseAsDec:

; 407  :                         }
; 408  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 409  :                         {
; 410  :                             *_sign = -1;
; 411  :                             _source.SkipString(_negative_sign);
; 412  :                         }
; 413  :                         else
; 414  :                         {
; 415  :                         }
; 416  :                     }
; 417  :                     else
; 418  :                     {
; 419  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 420  :                         {
; 421  :                             *_sign = 1;
; 422  :                             _source.SkipString(_positive_sign);
; 423  :                         }
; 424  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 425  :                         {
; 426  :                             *_sign = -1;
; 427  :                             _source.SkipString(_negative_sign);
; 428  :                         }
; 429  :                         else
; 430  :                         {
; 431  :                         }
; 432  :                     }
; 433  :                 }
; 434  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 435  :                 {
; 436  :                     _source.SkipString(_currency_symbol);
; 437  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 438  :                     {
; 439  :                         *_sign = 1;
; 440  :                         _source.SkipString(_positive_sign);
; 441  :                     }
; 442  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 443  :                     {
; 444  :                         *_sign = -1;
; 445  :                         _source.SkipString(_negative_sign);
; 446  :                     }
; 447  :                     else
; 448  :                     {
; 449  :                     }
; 450  :                 }
; 451  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 452  :                 {
; 453  :                     *_sign = 1;
; 454  :                     _source.SkipString(_positive_sign);
; 455  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 456  :                         _source.SkipString(_currency_symbol);
; 457  :                 }
; 458  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 459  :                 {
; 460  :                     *_sign = -1;
; 461  :                     _source.SkipString(_negative_sign);
; 462  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 463  :                         _source.SkipString(_currency_symbol);
; 464  :                 }
; 465  :                 else
; 466  :                 {
; 467  :                 }
; 468  :             }
; 469  :             else
; 470  :                 return (0);
; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00382	8b 06		 mov	 eax, DWORD PTR [esi]
  00384	8b ce		 mov	 ecx, esi
  00386	57		 push	 edi
  00387	ff 50 0c	 call	 DWORD PTR [eax+12]
  0038a	f6 46 30 01	 test	 BYTE PTR [esi+48], 1
  0038e	0f 84 31 fd ff
	ff		 je	 $LN35@ParseAsDec
  00394	8b 06		 mov	 eax, DWORD PTR [esi]
  00396	8b ce		 mov	 ecx, esi
  00398	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  0039d	ff 50 08	 call	 DWORD PTR [eax+8]
  003a0	85 c0		 test	 eax, eax
  003a2	0f 84 1d fd ff
	ff		 je	 $LN35@ParseAsDec
  003a8	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  003ad	e9 0c fd ff ff	 jmp	 $LN203@ParseAsDec
$LN165@ParseAsDec:

; 234  :                 {
; 235  :                     _source.SkipString(_currency_symbol);
; 236  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))
; 237  :                         _source.SkipString(L" ");
; 238  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 239  :                         ParseAsIntegerPartNumberSequence();
; 240  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 241  :                     {
; 242  :                         _source.SkipString(_decimal_separator);
; 243  :                         _frac_part.Write(L'.');
; 244  :                         ParseAsFractionPartNumberSequence();
; 245  :                     }
; 246  :                 }
; 247  :                 else
; 248  :                 {
; 249  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  003b2	8b 06		 mov	 eax, DWORD PTR [esi]
  003b4	8b ce		 mov	 ecx, esi
  003b6	ff 10		 call	 DWORD PTR [eax]
  003b8	0f b7 c8	 movzx	 ecx, ax

; 42   :         if (c >= L'0' && c <= L'9')

  003bb	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  003be	66 83 f8 09	 cmp	 ax, 9
  003c2	77 0c		 ja	 SHORT $LN38@ParseAsDec

; 234  :                 {
; 235  :                     _source.SkipString(_currency_symbol);
; 236  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))
; 237  :                         _source.SkipString(L" ");
; 238  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 239  :                         ParseAsIntegerPartNumberSequence();
; 240  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 241  :                     {
; 242  :                         _source.SkipString(_decimal_separator);
; 243  :                         _frac_part.Write(L'.');
; 244  :                         ParseAsFractionPartNumberSequence();
; 245  :                     }
; 246  :                 }
; 247  :                 else
; 248  :                 {
; 249  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  003c4	83 f9 30	 cmp	 ecx, 48			; 00000030H
  003c7	72 07		 jb	 SHORT $LN38@ParseAsDec

; 250  :                         ParseAsIntegerPartNumberSequence();

  003c9	8b ce		 mov	 ecx, esi
  003cb	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN38@ParseAsDec:

; 251  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  003d0	f6 46 30 20	 test	 BYTE PTR [esi+48], 32	; 00000020H
  003d4	74 2c		 je	 SHORT $LN39@ParseAsDec
  003d6	8b 06		 mov	 eax, DWORD PTR [esi]
  003d8	8d 9e 9e 00 00
	00		 lea	 ebx, DWORD PTR [esi+158]
  003de	53		 push	 ebx
  003df	8b ce		 mov	 ecx, esi
  003e1	ff 50 08	 call	 DWORD PTR [eax+8]
  003e4	85 c0		 test	 eax, eax
  003e6	74 1a		 je	 SHORT $LN39@ParseAsDec

; 252  :                     {
; 253  :                         _source.SkipString(_decimal_separator);

  003e8	8b 06		 mov	 eax, DWORD PTR [esi]
  003ea	8b ce		 mov	 ecx, esi
  003ec	53		 push	 ebx
  003ed	ff 50 0c	 call	 DWORD PTR [eax+12]

; 254  :                         _frac_part.Write(L'.');

  003f0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003f3	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  003f6	6a 2e		 push	 46			; 0000002eH
  003f8	ff 50 04	 call	 DWORD PTR [eax+4]

; 255  :                         ParseAsFractionPartNumberSequence();

  003fb	8b ce		 mov	 ecx, esi
  003fd	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN39@ParseAsDec:

; 256  :                     }
; 257  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  00402	f6 46 30 02	 test	 BYTE PTR [esi+48], 2
  00406	0f 84 d8 02 00
	00		 je	 $LN166@ParseAsDec
  0040c	8b 06		 mov	 eax, DWORD PTR [esi]
  0040e	8b ce		 mov	 ecx, esi
  00410	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00415	ff 50 08	 call	 DWORD PTR [eax+8]
  00418	85 c0		 test	 eax, eax
  0041a	0f 84 c4 02 00
	00		 je	 $LN166@ParseAsDec

; 258  :                     {
; 259  :                         _source.SkipString(L" ");

  00420	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@

; 260  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 261  :                             _source.SkipString(_currency_symbol);
; 262  :                     }

  00425	e9 b3 02 00 00	 jmp	 $LN190@ParseAsDec
$LN167@ParseAsDec:

; 263  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 264  :                         _source.SkipString(_currency_symbol);
; 265  :                     else
; 266  :                     {
; 267  :                     }
; 268  :                 }
; 269  :             }
; 270  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  0042a	f6 46 30 04	 test	 BYTE PTR [esi+48], 4
  0042e	0f 84 b2 00 00
	00		 je	 $LN170@ParseAsDec
  00434	8b 06		 mov	 eax, DWORD PTR [esi]
  00436	8d 5e 7c	 lea	 ebx, DWORD PTR [esi+124]
  00439	53		 push	 ebx
  0043a	8b ce		 mov	 ecx, esi
  0043c	ff 50 08	 call	 DWORD PTR [eax+8]
  0043f	85 c0		 test	 eax, eax
  00441	0f 84 9f 00 00
	00		 je	 $LN170@ParseAsDec

; 271  :             {
; 272  :                 *_sign = -1;

  00447	8b 46 34	 mov	 eax, DWORD PTR [esi+52]

; 273  :                 _source.SkipString(_negative_sign);

  0044a	8b ce		 mov	 ecx, esi
  0044c	53		 push	 ebx
  0044d	c6 00 ff	 mov	 BYTE PTR [eax], -1
  00450	8b 06		 mov	 eax, DWORD PTR [esi]
  00452	ff 50 0c	 call	 DWORD PTR [eax+12]

; 274  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00455	f7 46 30 00 01
	00 00		 test	 DWORD PTR [esi+48], 256	; 00000100H
  0045c	74 10		 je	 SHORT $LN168@ParseAsDec
  0045e	8b 06		 mov	 eax, DWORD PTR [esi]
  00460	8b ce		 mov	 ecx, esi
  00462	57		 push	 edi
  00463	ff 50 08	 call	 DWORD PTR [eax+8]
  00466	85 c0		 test	 eax, eax
  00468	0f 85 14 ff ff
	ff		 jne	 $LN206@ParseAsDec
$LN168@ParseAsDec:

; 275  :                 {
; 276  :                     _source.SkipString(_currency_symbol);
; 277  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))
; 278  :                         _source.SkipString(L" ");
; 279  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 280  :                         ParseAsIntegerPartNumberSequence();
; 281  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 282  :                     {
; 283  :                         _source.SkipString(_decimal_separator);
; 284  :                         _frac_part.Write(L'.');
; 285  :                         ParseAsFractionPartNumberSequence();
; 286  :                     }
; 287  :                 }
; 288  :                 else
; 289  :                 {
; 290  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  0046e	8b 06		 mov	 eax, DWORD PTR [esi]
  00470	8b ce		 mov	 ecx, esi
  00472	ff 10		 call	 DWORD PTR [eax]
  00474	0f b7 c8	 movzx	 ecx, ax

; 42   :         if (c >= L'0' && c <= L'9')

  00477	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  0047a	66 83 f8 09	 cmp	 ax, 9
  0047e	77 0c		 ja	 SHORT $LN52@ParseAsDec

; 275  :                 {
; 276  :                     _source.SkipString(_currency_symbol);
; 277  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))
; 278  :                         _source.SkipString(L" ");
; 279  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 280  :                         ParseAsIntegerPartNumberSequence();
; 281  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 282  :                     {
; 283  :                         _source.SkipString(_decimal_separator);
; 284  :                         _frac_part.Write(L'.');
; 285  :                         ParseAsFractionPartNumberSequence();
; 286  :                     }
; 287  :                 }
; 288  :                 else
; 289  :                 {
; 290  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00480	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00483	72 07		 jb	 SHORT $LN52@ParseAsDec

; 291  :                         ParseAsIntegerPartNumberSequence();

  00485	8b ce		 mov	 ecx, esi
  00487	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN52@ParseAsDec:

; 292  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  0048c	f6 46 30 20	 test	 BYTE PTR [esi+48], 32	; 00000020H
  00490	74 2c		 je	 SHORT $LN53@ParseAsDec
  00492	8b 06		 mov	 eax, DWORD PTR [esi]
  00494	8d 9e 9e 00 00
	00		 lea	 ebx, DWORD PTR [esi+158]
  0049a	53		 push	 ebx
  0049b	8b ce		 mov	 ecx, esi
  0049d	ff 50 08	 call	 DWORD PTR [eax+8]
  004a0	85 c0		 test	 eax, eax
  004a2	74 1a		 je	 SHORT $LN53@ParseAsDec

; 293  :                     {
; 294  :                         _source.SkipString(_decimal_separator);

  004a4	8b 06		 mov	 eax, DWORD PTR [esi]
  004a6	8b ce		 mov	 ecx, esi
  004a8	53		 push	 ebx
  004a9	ff 50 0c	 call	 DWORD PTR [eax+12]

; 295  :                         _frac_part.Write(L'.');

  004ac	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004af	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  004b2	6a 2e		 push	 46			; 0000002eH
  004b4	ff 50 04	 call	 DWORD PTR [eax+4]

; 296  :                         ParseAsFractionPartNumberSequence();

  004b7	8b ce		 mov	 ecx, esi
  004b9	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN53@ParseAsDec:

; 297  :                     }
; 298  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  004be	f6 46 30 02	 test	 BYTE PTR [esi+48], 2
  004c2	0f 84 1c 02 00
	00		 je	 $LN166@ParseAsDec
  004c8	8b 06		 mov	 eax, DWORD PTR [esi]
  004ca	8b ce		 mov	 ecx, esi
  004cc	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  004d1	ff 50 08	 call	 DWORD PTR [eax+8]
  004d4	85 c0		 test	 eax, eax
  004d6	0f 84 08 02 00
	00		 je	 $LN166@ParseAsDec

; 299  :                     {
; 300  :                         _source.SkipString(L" ");

  004dc	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@

; 301  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 302  :                             _source.SkipString(_currency_symbol);
; 303  :                     }

  004e1	e9 f7 01 00 00	 jmp	 $LN190@ParseAsDec
$LN170@ParseAsDec:

; 304  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 305  :                         _source.SkipString(_currency_symbol);
; 306  :                     else
; 307  :                     {
; 308  :                     }
; 309  :                 }
; 310  :             }
; 311  :             else if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  004e6	8b 06		 mov	 eax, DWORD PTR [esi]
  004e8	8b ce		 mov	 ecx, esi
  004ea	ff 10		 call	 DWORD PTR [eax]
  004ec	0f b7 c8	 movzx	 ecx, ax

; 42   :         if (c >= L'0' && c <= L'9')

  004ef	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  004f2	66 83 f8 09	 cmp	 ax, 9
  004f6	77 05		 ja	 SHORT $LN131@ParseAsDec

; 43   :             return (c - L'0');

  004f8	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  004fb	eb 03		 jmp	 SHORT $LN130@ParseAsDec
$LN131@ParseAsDec:

; 44   :         return (-1);

  004fd	83 c8 ff	 or	 eax, -1
$LN130@ParseAsDec:

; 304  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 305  :                         _source.SkipString(_currency_symbol);
; 306  :                     else
; 307  :                     {
; 308  :                     }
; 309  :                 }
; 310  :             }
; 311  :             else if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00500	85 c0		 test	 eax, eax
  00502	0f 88 0f 01 00
	00		 js	 $LN59@ParseAsDec

; 312  :             {
; 313  :                 ParseAsIntegerPartNumberSequence();

  00508	8b ce		 mov	 ecx, esi
  0050a	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 314  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  0050f	f6 46 30 20	 test	 BYTE PTR [esi+48], 32	; 00000020H
  00513	74 2c		 je	 SHORT $LN61@ParseAsDec
  00515	8b 06		 mov	 eax, DWORD PTR [esi]
  00517	8d 9e 9e 00 00
	00		 lea	 ebx, DWORD PTR [esi+158]
  0051d	53		 push	 ebx
  0051e	8b ce		 mov	 ecx, esi
  00520	ff 50 08	 call	 DWORD PTR [eax+8]
  00523	85 c0		 test	 eax, eax
  00525	74 1a		 je	 SHORT $LN61@ParseAsDec

; 315  :                 {
; 316  :                     _source.SkipString(_decimal_separator);

  00527	8b 06		 mov	 eax, DWORD PTR [esi]
  00529	8b ce		 mov	 ecx, esi
  0052b	53		 push	 ebx
  0052c	ff 50 0c	 call	 DWORD PTR [eax+12]

; 317  :                     _frac_part.Write(L'.');

  0052f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00532	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00535	6a 2e		 push	 46			; 0000002eH
  00537	ff 50 04	 call	 DWORD PTR [eax+4]

; 318  :                     ParseAsFractionPartNumberSequence();

  0053a	8b ce		 mov	 ecx, esi
  0053c	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN61@ParseAsDec:

; 319  :                 }
; 320  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  00541	f6 46 30 02	 test	 BYTE PTR [esi+48], 2
  00545	74 61		 je	 SHORT $LN174@ParseAsDec
  00547	8b 06		 mov	 eax, DWORD PTR [esi]
  00549	8b ce		 mov	 ecx, esi
  0054b	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00550	ff 50 08	 call	 DWORD PTR [eax+8]
  00553	85 c0		 test	 eax, eax
  00555	74 51		 je	 SHORT $LN174@ParseAsDec

; 321  :                 {
; 322  :                     _source.SkipString(L" ");

  00557	8b 06		 mov	 eax, DWORD PTR [esi]
  00559	8b ce		 mov	 ecx, esi
  0055b	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00560	ff 50 0c	 call	 DWORD PTR [eax+12]

; 323  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00563	f7 46 30 00 01
	00 00		 test	 DWORD PTR [esi+48], 256	; 00000100H
  0056a	74 14		 je	 SHORT $LN172@ParseAsDec
  0056c	8b 06		 mov	 eax, DWORD PTR [esi]
  0056e	8b ce		 mov	 ecx, esi
  00570	57		 push	 edi
  00571	ff 50 08	 call	 DWORD PTR [eax+8]
  00574	85 c0		 test	 eax, eax
  00576	74 08		 je	 SHORT $LN172@ParseAsDec

; 324  :                     {
; 325  :                         _source.SkipString(_currency_symbol);

  00578	8b 06		 mov	 eax, DWORD PTR [esi]
  0057a	8b ce		 mov	 ecx, esi
  0057c	57		 push	 edi
  0057d	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN172@ParseAsDec:

; 407  :                         }
; 408  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 409  :                         {
; 410  :                             *_sign = -1;
; 411  :                             _source.SkipString(_negative_sign);
; 412  :                         }
; 413  :                         else
; 414  :                         {
; 415  :                         }
; 416  :                     }
; 417  :                     else
; 418  :                     {
; 419  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 420  :                         {
; 421  :                             *_sign = 1;
; 422  :                             _source.SkipString(_positive_sign);
; 423  :                         }
; 424  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 425  :                         {
; 426  :                             *_sign = -1;
; 427  :                             _source.SkipString(_negative_sign);
; 428  :                         }
; 429  :                         else
; 430  :                         {
; 431  :                         }
; 432  :                     }
; 433  :                 }
; 434  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 435  :                 {
; 436  :                     _source.SkipString(_currency_symbol);
; 437  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 438  :                     {
; 439  :                         *_sign = 1;
; 440  :                         _source.SkipString(_positive_sign);
; 441  :                     }
; 442  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 443  :                     {
; 444  :                         *_sign = -1;
; 445  :                         _source.SkipString(_negative_sign);
; 446  :                     }
; 447  :                     else
; 448  :                     {
; 449  :                     }
; 450  :                 }
; 451  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 452  :                 {
; 453  :                     *_sign = 1;
; 454  :                     _source.SkipString(_positive_sign);
; 455  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 456  :                         _source.SkipString(_currency_symbol);
; 457  :                 }
; 458  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 459  :                 {
; 460  :                     *_sign = -1;
; 461  :                     _source.SkipString(_negative_sign);
; 462  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 463  :                         _source.SkipString(_currency_symbol);
; 464  :                 }
; 465  :                 else
; 466  :                 {
; 467  :                 }
; 468  :             }
; 469  :             else
; 470  :                 return (0);
; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00580	f6 46 30 08	 test	 BYTE PTR [esi+48], 8
  00584	0f 84 77 01 00
	00		 je	 $LN111@ParseAsDec
  0058a	8b 06		 mov	 eax, DWORD PTR [esi]
  0058c	8d 7e 5a	 lea	 edi, DWORD PTR [esi+90]
  0058f	57		 push	 edi
  00590	8b ce		 mov	 ecx, esi
  00592	ff 50 08	 call	 DWORD PTR [eax+8]
  00595	85 c0		 test	 eax, eax
  00597	0f 84 fb fb ff
	ff		 je	 $LN16@ParseAsDec
  0059d	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  005a0	c6 00 01	 mov	 BYTE PTR [eax], 1
  005a3	e9 51 01 00 00	 jmp	 $LN185@ParseAsDec
$LN174@ParseAsDec:
  005a8	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  005ab	a9 00 01 00 00	 test	 eax, 256		; 00000100H
  005b0	74 3f		 je	 SHORT $LN151@ParseAsDec
  005b2	8b 06		 mov	 eax, DWORD PTR [esi]
  005b4	8b ce		 mov	 ecx, esi
  005b6	57		 push	 edi
  005b7	ff 50 08	 call	 DWORD PTR [eax+8]
  005ba	85 c0		 test	 eax, eax
  005bc	74 30		 je	 SHORT $LN150@ParseAsDec
  005be	8b 06		 mov	 eax, DWORD PTR [esi]
  005c0	8b ce		 mov	 ecx, esi
  005c2	57		 push	 edi
  005c3	ff 50 0c	 call	 DWORD PTR [eax+12]
  005c6	f6 46 30 08	 test	 BYTE PTR [esi+48], 8
  005ca	0f 84 31 01 00
	00		 je	 $LN111@ParseAsDec
  005d0	8b 06		 mov	 eax, DWORD PTR [esi]
  005d2	8d 7e 5a	 lea	 edi, DWORD PTR [esi+90]
  005d5	57		 push	 edi
  005d6	8b ce		 mov	 ecx, esi
  005d8	ff 50 08	 call	 DWORD PTR [eax+8]
  005db	85 c0		 test	 eax, eax
  005dd	0f 84 b5 fb ff
	ff		 je	 $LN16@ParseAsDec
  005e3	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  005e6	c6 00 01	 mov	 BYTE PTR [eax], 1
  005e9	e9 0b 01 00 00	 jmp	 $LN185@ParseAsDec
$LN150@ParseAsDec:
  005ee	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
$LN151@ParseAsDec:
  005f1	a8 08		 test	 al, 8
  005f3	0f 84 c8 00 00
	00		 je	 $LN182@ParseAsDec
  005f9	8b 06		 mov	 eax, DWORD PTR [esi]
  005fb	8d 5e 5a	 lea	 ebx, DWORD PTR [esi+90]
  005fe	53		 push	 ebx
  005ff	8b ce		 mov	 ecx, esi
  00601	ff 50 08	 call	 DWORD PTR [eax+8]
  00604	85 c0		 test	 eax, eax
  00606	0f 84 b5 00 00
	00		 je	 $LN182@ParseAsDec
  0060c	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0060f	c6 00 01	 mov	 BYTE PTR [eax], 1
  00612	e9 c5 00 00 00	 jmp	 $LN194@ParseAsDec
$LN59@ParseAsDec:

; 326  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 327  :                         {
; 328  :                             *_sign = 1;
; 329  :                             _source.SkipString(_positive_sign);
; 330  :                         }
; 331  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 332  :                         {
; 333  :                             *_sign = -1;
; 334  :                             _source.SkipString(_negative_sign);
; 335  :                         }
; 336  :                         else
; 337  :                         {
; 338  :                         }
; 339  :                     }
; 340  :                     else
; 341  :                     {
; 342  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 343  :                         {
; 344  :                             *_sign = 1;
; 345  :                             _source.SkipString(_positive_sign);
; 346  :                         }
; 347  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 348  :                         {
; 349  :                             *_sign = -1;
; 350  :                             _source.SkipString(_negative_sign);
; 351  :                         }
; 352  :                         else
; 353  :                         {
; 354  :                         }
; 355  :                     }
; 356  :                 }
; 357  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 358  :                 {
; 359  :                     _source.SkipString(_currency_symbol);
; 360  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 361  :                     {
; 362  :                         *_sign = 1;
; 363  :                         _source.SkipString(_positive_sign);
; 364  :                     }
; 365  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 366  :                     {
; 367  :                         *_sign = -1;
; 368  :                         _source.SkipString(_negative_sign);
; 369  :                     }
; 370  :                     else
; 371  :                     {
; 372  :                     }
; 373  :                 }
; 374  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 375  :                 {
; 376  :                     *_sign = 1;
; 377  :                     _source.SkipString(_positive_sign);
; 378  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 379  :                         _source.SkipString(_currency_symbol);
; 380  :                 }
; 381  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 382  :                 {
; 383  :                     *_sign = -1;
; 384  :                     _source.SkipString(_negative_sign);
; 385  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 386  :                         _source.SkipString(_currency_symbol);
; 387  :                 }
; 388  :                 else
; 389  :                 {
; 390  :                 }
; 391  :             }
; 392  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00617	f6 46 30 20	 test	 BYTE PTR [esi+48], 32	; 00000020H
  0061b	0f 84 01 01 00
	00		 je	 $LN86@ParseAsDec
  00621	8b 06		 mov	 eax, DWORD PTR [esi]
  00623	8d 9e 9e 00 00
	00		 lea	 ebx, DWORD PTR [esi+158]
  00629	53		 push	 ebx
  0062a	8b ce		 mov	 ecx, esi
  0062c	ff 50 08	 call	 DWORD PTR [eax+8]
  0062f	85 c0		 test	 eax, eax
  00631	0f 84 eb 00 00
	00		 je	 $LN86@ParseAsDec

; 393  :             {
; 394  :                 _source.SkipString(_decimal_separator);

  00637	8b 06		 mov	 eax, DWORD PTR [esi]
  00639	8b ce		 mov	 ecx, esi
  0063b	53		 push	 ebx
  0063c	ff 50 0c	 call	 DWORD PTR [eax+12]

; 395  :                 _frac_part.Write(L'.');

  0063f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00642	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00645	6a 2e		 push	 46			; 0000002eH
  00647	ff 50 04	 call	 DWORD PTR [eax+4]

; 396  :                 ParseAsFractionPartNumberSequence();

  0064a	8b ce		 mov	 ecx, esi
  0064c	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence

; 397  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  00651	f6 46 30 02	 test	 BYTE PTR [esi+48], 2
  00655	0f 84 4d ff ff
	ff		 je	 $LN174@ParseAsDec
  0065b	8b 06		 mov	 eax, DWORD PTR [esi]
  0065d	8b ce		 mov	 ecx, esi
  0065f	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00664	ff 50 08	 call	 DWORD PTR [eax+8]
  00667	85 c0		 test	 eax, eax
  00669	0f 84 39 ff ff
	ff		 je	 $LN174@ParseAsDec

; 398  :                 {
; 399  :                     _source.SkipString(L" ");

  0066f	8b 06		 mov	 eax, DWORD PTR [esi]
  00671	8b ce		 mov	 ecx, esi
  00673	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00678	ff 50 0c	 call	 DWORD PTR [eax+12]

; 400  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  0067b	f7 46 30 00 01
	00 00		 test	 DWORD PTR [esi+48], 256	; 00000100H
  00682	0f 84 f8 fe ff
	ff		 je	 $LN172@ParseAsDec
  00688	8b 06		 mov	 eax, DWORD PTR [esi]
  0068a	8b ce		 mov	 ecx, esi
  0068c	57		 push	 edi
  0068d	ff 50 08	 call	 DWORD PTR [eax+8]
  00690	85 c0		 test	 eax, eax
  00692	0f 84 e8 fe ff
	ff		 je	 $LN172@ParseAsDec

; 401  :                     {
; 402  :                         _source.SkipString(_currency_symbol);

  00698	8b 06		 mov	 eax, DWORD PTR [esi]
  0069a	8b ce		 mov	 ecx, esi
  0069c	57		 push	 edi
  0069d	ff 50 0c	 call	 DWORD PTR [eax+12]

; 403  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  006a0	f6 46 30 08	 test	 BYTE PTR [esi+48], 8
  006a4	74 5b		 je	 SHORT $LN111@ParseAsDec
  006a6	8b 06		 mov	 eax, DWORD PTR [esi]
  006a8	8d 7e 5a	 lea	 edi, DWORD PTR [esi+90]
  006ab	57		 push	 edi
  006ac	8b ce		 mov	 ecx, esi
  006ae	ff 50 08	 call	 DWORD PTR [eax+8]
  006b1	85 c0		 test	 eax, eax
  006b3	0f 84 df fa ff
	ff		 je	 $LN16@ParseAsDec

; 404  :                         {
; 405  :                             *_sign = 1;

  006b9	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  006bc	c6 00 01	 mov	 BYTE PTR [eax], 1

; 406  :                             _source.SkipString(_positive_sign);

  006bf	eb 38		 jmp	 SHORT $LN185@ParseAsDec
$LN182@ParseAsDec:

; 407  :                         }
; 408  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 409  :                         {
; 410  :                             *_sign = -1;
; 411  :                             _source.SkipString(_negative_sign);
; 412  :                         }
; 413  :                         else
; 414  :                         {
; 415  :                         }
; 416  :                     }
; 417  :                     else
; 418  :                     {
; 419  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 420  :                         {
; 421  :                             *_sign = 1;
; 422  :                             _source.SkipString(_positive_sign);
; 423  :                         }
; 424  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 425  :                         {
; 426  :                             *_sign = -1;
; 427  :                             _source.SkipString(_negative_sign);
; 428  :                         }
; 429  :                         else
; 430  :                         {
; 431  :                         }
; 432  :                     }
; 433  :                 }
; 434  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 435  :                 {
; 436  :                     _source.SkipString(_currency_symbol);
; 437  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 438  :                     {
; 439  :                         *_sign = 1;
; 440  :                         _source.SkipString(_positive_sign);
; 441  :                     }
; 442  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 443  :                     {
; 444  :                         *_sign = -1;
; 445  :                         _source.SkipString(_negative_sign);
; 446  :                     }
; 447  :                     else
; 448  :                     {
; 449  :                     }
; 450  :                 }
; 451  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 452  :                 {
; 453  :                     *_sign = 1;
; 454  :                     _source.SkipString(_positive_sign);
; 455  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 456  :                         _source.SkipString(_currency_symbol);
; 457  :                 }
; 458  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 459  :                 {
; 460  :                     *_sign = -1;
; 461  :                     _source.SkipString(_negative_sign);
; 462  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 463  :                         _source.SkipString(_currency_symbol);
; 464  :                 }
; 465  :                 else
; 466  :                 {
; 467  :                 }
; 468  :             }
; 469  :             else
; 470  :                 return (0);
; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  006c1	f6 46 30 08	 test	 BYTE PTR [esi+48], 8
  006c5	74 3a		 je	 SHORT $LN111@ParseAsDec
  006c7	8b 06		 mov	 eax, DWORD PTR [esi]
  006c9	8d 5e 7c	 lea	 ebx, DWORD PTR [esi+124]
  006cc	53		 push	 ebx
  006cd	8b ce		 mov	 ecx, esi
  006cf	ff 50 08	 call	 DWORD PTR [eax+8]
  006d2	85 c0		 test	 eax, eax
  006d4	74 2b		 je	 SHORT $LN111@ParseAsDec
  006d6	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  006d9	c6 00 ff	 mov	 BYTE PTR [eax], -1
$LN194@ParseAsDec:
  006dc	53		 push	 ebx
$LN190@ParseAsDec:
  006dd	8b 06		 mov	 eax, DWORD PTR [esi]
  006df	8b ce		 mov	 ecx, esi
  006e1	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN166@ParseAsDec:
  006e4	f7 46 30 00 01
	00 00		 test	 DWORD PTR [esi+48], 256	; 00000100H
  006eb	74 14		 je	 SHORT $LN111@ParseAsDec
  006ed	8b 06		 mov	 eax, DWORD PTR [esi]
  006ef	8b ce		 mov	 ecx, esi
  006f1	57		 push	 edi
  006f2	ff 50 08	 call	 DWORD PTR [eax+8]
  006f5	85 c0		 test	 eax, eax
  006f7	74 08		 je	 SHORT $LN111@ParseAsDec
$LN185@ParseAsDec:
  006f9	57		 push	 edi
$LN186@ParseAsDec:
  006fa	8b 06		 mov	 eax, DWORD PTR [esi]
  006fc	8b ce		 mov	 ecx, esi
  006fe	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN111@ParseAsDec:
  00701	f6 46 30 02	 test	 BYTE PTR [esi+48], 2
  00705	74 07		 je	 SHORT $LN112@ParseAsDec

; 472  :                 _source.SkipSpace();

  00707	8b ce		 mov	 ecx, esi
  00709	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN112@ParseAsDec:

; 473  :             if (_source.PeekChar() != L'\0')

  0070e	8b 06		 mov	 eax, DWORD PTR [esi]
  00710	8b ce		 mov	 ecx, esi
  00712	ff 10		 call	 DWORD PTR [eax]
  00714	66 85 c0	 test	 ax, ax
  00717	75 09		 jne	 SHORT $LN86@ParseAsDec

; 474  :                 return (0);
; 475  :             return (1);
; 476  :         }

  00719	5f		 pop	 edi
  0071a	5e		 pop	 esi
  0071b	b8 01 00 00 00	 mov	 eax, 1
  00720	5b		 pop	 ebx
  00721	c3		 ret	 0
$LN86@ParseAsDec:
  00722	5f		 pop	 edi
  00723	5e		 pop	 esi
  00724	33 c0		 xor	 eax, eax
  00726	5b		 pop	 ebx
  00727	c3		 ret	 0
?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ
_TEXT	SEGMENT
??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ PROC	; Palmtree::Math::Core::Internal::ParserState::~ParserState, COMDAT
; _this$ = ecx

; 127  :         }

  00000	c3		 ret	 0
??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ ENDP	; Palmtree::Math::Core::Internal::ParserState::~ParserState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_in_ptr$ = 8						; size = 4
tv432 = 12						; size = 4
tv429 = 12						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_sign$ = 20						; size = 4
_int_part_buf$ = 24					; size = 4
_int_part_buf_size$ = 28				; size = 4
_frac_part_buf$ = 32					; size = 4
_frac_part_buf_size$ = 36				; size = 4
??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z PROC ; Palmtree::Math::Core::Internal::ParserState::ParserState, COMDAT
; _this$ = ecx

; 80   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 52   :             _p = p;

  00003	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 80   :         {

  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  0000d	8b 4d 18	 mov	 ecx, DWORD PTR _int_part_buf$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 80   :         {

  00010	57		 push	 edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 50   :         StringReader(const wchar_t* p)

  00011	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7StringReader@Internal@Core@Math@Palmtree@@6B@

; 52   :             _p = p;

  00017	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  0001a	85 c9		 test	 ecx, ecx
  0001c	74 08		 je	 SHORT $LN18@ParserStat
  0001e	8b 45 1c	 mov	 eax, DWORD PTR _int_part_buf_size$[ebp]
  00021	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00024	eb 02		 jmp	 SHORT $LN19@ParserStat
$LN18@ParserStat:
  00026	33 c0		 xor	 eax, eax
$LN19@ParserStat:

; 201  :             _p = p;

  00028	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 202  :             _sob = sob;

  0002b	89 4e 10	 mov	 DWORD PTR [esi+16], ecx

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  0002e	8b 4d 20	 mov	 ecx, DWORD PTR _frac_part_buf$[ebp]

; 203  :             _eob = eob;

  00031	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 204  :             _written = 0;

  00034	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 210  :         {

  0003b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00042	85 c9		 test	 ecx, ecx
  00044	74 08		 je	 SHORT $LN24@ParserStat
  00046	8b 45 24	 mov	 eax, DWORD PTR _frac_part_buf_size$[ebp]
  00049	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  0004c	eb 02		 jmp	 SHORT $LN25@ParserStat
$LN24@ParserStat:
  0004e	33 c0		 xor	 eax, eax
$LN25@ParserStat:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 88   :             if (countof(_currency_symbol) < lstrlenW(format_option->CurrencySymbol) + 1)

  00050	8b 5d 10	 mov	 ebx, DWORD PTR _format_option$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 203  :             _eob = eob;

  00053	89 46 28	 mov	 DWORD PTR [esi+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 81   :             _sign = sign;

  00056	8b 45 14	 mov	 eax, DWORD PTR _sign$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 201  :             _p = p;

  00059	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 202  :             _sob = sob;

  0005c	89 4e 24	 mov	 DWORD PTR [esi+36], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 88   :             if (countof(_currency_symbol) < lstrlenW(format_option->CurrencySymbol) + 1)

  0005f	8d bb 38 01 00
	00		 lea	 edi, DWORD PTR [ebx+312]
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _number_styles$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 204  :             _written = 0;

  00068	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 210  :         {

  0006f	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 81   :             _sign = sign;

  00076	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 82   :             _number_styles = number_styles;

  00079	89 4e 30	 mov	 DWORD PTR [esi+48], ecx

; 88   :             if (countof(_currency_symbol) < lstrlenW(format_option->CurrencySymbol) + 1)

  0007c	57		 push	 edi
  0007d	c6 00 01	 mov	 BYTE PTR [eax], 1
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00086	40		 inc	 eax
  00087	83 f8 11	 cmp	 eax, 17			; 00000011H
  0008a	0f 87 38 01 00
	00		 ja	 $LN33@ParserStat

; 90   :             lstrcpyW(_currency_symbol, format_option->CurrencySymbol);

  00090	57		 push	 edi
  00091	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__lstrcpyW@8
  00097	8d 46 38	 lea	 eax, DWORD PTR [esi+56]
  0009a	50		 push	 eax
  0009b	ff d7		 call	 edi

; 91   : 
; 92   :             // 符号文字の設定
; 93   :             if (countof(_positive_sign) < lstrlenW(format_option->PositiveSign) + 1)

  0009d	8d 83 7c 01 00
	00		 lea	 eax, DWORD PTR [ebx+380]
  000a3	50		 push	 eax
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  000aa	40		 inc	 eax
  000ab	83 f8 11	 cmp	 eax, 17			; 00000011H
  000ae	76 0a		 jbe	 SHORT $LN3@ParserStat

; 94   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;2");

  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  000b5	e9 13 01 00 00	 jmp	 $LN31@ParserStat
$LN3@ParserStat:

; 95   :             lstrcpyW(_positive_sign, format_option->PositiveSign);

  000ba	8d 83 7c 01 00
	00		 lea	 eax, DWORD PTR [ebx+380]
  000c0	50		 push	 eax
  000c1	8d 46 5a	 lea	 eax, DWORD PTR [esi+90]
  000c4	50		 push	 eax
  000c5	ff d7		 call	 edi

; 96   :             if (countof(_negative_sign) < lstrlenW(format_option->NegativeSign) + 1)

  000c7	8d 83 5a 01 00
	00		 lea	 eax, DWORD PTR [ebx+346]
  000cd	50		 push	 eax
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  000d4	40		 inc	 eax
  000d5	83 f8 11	 cmp	 eax, 17			; 00000011H
  000d8	76 0a		 jbe	 SHORT $LN4@ParserStat

; 97   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;3");

  000da	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  000df	e9 e9 00 00 00	 jmp	 $LN31@ParserStat
$LN4@ParserStat:

; 98   :             lstrcpyW(_negative_sign, format_option->NegativeSign);

  000e4	8d 83 5a 01 00
	00		 lea	 eax, DWORD PTR [ebx+346]
  000ea	50		 push	 eax
  000eb	8d 46 7c	 lea	 eax, DWORD PTR [esi+124]
  000ee	50		 push	 eax
  000ef	ff d7		 call	 edi

; 99   : 
; 100  :             // 小数点/3桁区切り文字の設定
; 101  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL)

  000f1	f7 45 0c 00 01
	00 00		 test	 DWORD PTR _number_styles$[ebp], 256 ; 00000100H
  000f8	74 49		 je	 SHORT $LN5@ParserStat

; 102  :             {
; 103  :                 if (countof(_decimal_separator) < lstrlenW(format_option->Currency.DecimalSeparator) + 1)

  000fa	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000fd	50		 push	 eax
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00104	40		 inc	 eax
  00105	83 f8 11	 cmp	 eax, 17			; 00000011H
  00108	76 0a		 jbe	 SHORT $LN7@ParserStat

; 104  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;4");

  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  0010f	e9 b9 00 00 00	 jmp	 $LN31@ParserStat
$LN7@ParserStat:

; 105  :                 lstrcpyW(_decimal_separator, format_option->Currency.DecimalSeparator);

  00114	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00117	50		 push	 eax
  00118	8d 86 9e 00 00
	00		 lea	 eax, DWORD PTR [esi+158]
  0011e	50		 push	 eax
  0011f	ff d7		 call	 edi

; 106  :                 if (countof(_group_separator) < lstrlenW(format_option->Currency.GroupSeparator) + 1)

  00121	8d 43 26	 lea	 eax, DWORD PTR [ebx+38]
  00124	50		 push	 eax
  00125	89 45 0c	 mov	 DWORD PTR tv432[ebp], eax
  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0012e	40		 inc	 eax
  0012f	83 f8 11	 cmp	 eax, 17			; 00000011H
  00132	76 0a		 jbe	 SHORT $LN8@ParserStat

; 107  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;5");

  00134	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00139	e9 8f 00 00 00	 jmp	 $LN31@ParserStat
$LN8@ParserStat:

; 108  :                 lstrcpyW(_group_separator, format_option->Currency.GroupSeparator);

  0013e	ff 75 0c	 push	 DWORD PTR tv432[ebp]

; 109  :             }
; 110  :             else

  00141	eb 44		 jmp	 SHORT $LN29@ParserStat
$LN5@ParserStat:

; 111  :             {
; 112  :                 if (countof(_decimal_separator) < lstrlenW(format_option->Number.DecimalSeparator) + 1)

  00143	8d 43 6c	 lea	 eax, DWORD PTR [ebx+108]
  00146	50		 push	 eax
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0014d	40		 inc	 eax
  0014e	83 f8 11	 cmp	 eax, 17			; 00000011H
  00151	76 07		 jbe	 SHORT $LN9@ParserStat

; 113  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;6");

  00153	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00158	eb 73		 jmp	 SHORT $LN31@ParserStat
$LN9@ParserStat:

; 114  :                 lstrcpyW(_decimal_separator, format_option->Number.DecimalSeparator);

  0015a	8d 43 6c	 lea	 eax, DWORD PTR [ebx+108]
  0015d	50		 push	 eax
  0015e	8d 86 9e 00 00
	00		 lea	 eax, DWORD PTR [esi+158]
  00164	50		 push	 eax
  00165	ff d7		 call	 edi

; 115  :                 if (countof(_group_separator) < lstrlenW(format_option->Number.GroupSeparator) + 1)

  00167	8d 83 8e 00 00
	00		 lea	 eax, DWORD PTR [ebx+142]
  0016d	50		 push	 eax
  0016e	89 45 0c	 mov	 DWORD PTR tv429[ebp], eax
  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00177	40		 inc	 eax
  00178	83 f8 11	 cmp	 eax, 17			; 00000011H
  0017b	76 07		 jbe	 SHORT $LN10@ParserStat

; 116  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;7");

  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00182	eb 49		 jmp	 SHORT $LN31@ParserStat
$LN10@ParserStat:

; 117  :                 lstrcpyW(_group_separator, format_option->Number.GroupSeparator);

  00184	ff 75 0c	 push	 DWORD PTR tv429[ebp]
$LN29@ParserStat:

; 118  :             }
; 119  :             if (lstrcmpW(_group_separator, L"\xa0") == 0)

  00187	8d 9e c0 00 00
	00		 lea	 ebx, DWORD PTR [esi+192]
  0018d	53		 push	 ebx
  0018e	ff d7		 call	 edi
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_13JDNADJOG@?$PP?$KA@
  00195	53		 push	 ebx
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpW@8
  0019c	85 c0		 test	 eax, eax
  0019e	8d 86 e2 00 00
	00		 lea	 eax, DWORD PTR [esi+226]
  001a4	75 13		 jne	 SHORT $LN11@ParserStat

; 120  :                 lstrcpyW(_secondary_group_separator, L"\x20");

  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@

; 123  :         }

  001ab	50		 push	 eax
  001ac	ff d7		 call	 edi
  001ae	5f		 pop	 edi
  001af	8b c6		 mov	 eax, esi
  001b1	5e		 pop	 esi
  001b2	5b		 pop	 ebx
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c2 20 00	 ret	 32			; 00000020H
$LN11@ParserStat:

; 121  :             else
; 122  :                 lstrcpyW(_secondary_group_separator, _group_separator);

  001b9	53		 push	 ebx

; 123  :         }

  001ba	50		 push	 eax
  001bb	ff d7		 call	 edi
  001bd	5f		 pop	 edi
  001be	8b c6		 mov	 eax, esi
  001c0	5e		 pop	 esi
  001c1	5b		 pop	 ebx
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c2 20 00	 ret	 32			; 00000020H
$LN33@ParserStat:

; 89   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;1");

  001c8	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
$LN31@ParserStat:

; 123  :         }

  001cd	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  001d2	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  001d5	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  001da	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  001df	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  001e2	50		 push	 eax
  001e3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN28@ParserStat:
  001e8	cc		 int	 3
??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ENDP ; Palmtree::Math::Core::Internal::ParserState::ParserState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z PROC ; Palmtree::Math::Core::Internal::ParseHexDigit, COMDAT

; 48   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   :         if (c >= L'0' && c <= L'9')

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _c$[ebp]
  00006	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00009	66 83 f8 09	 cmp	 ax, 9
  0000d	77 08		 ja	 SHORT $LN2@ParseHexDi

; 50   :             return (c - L'0');

  0000f	0f b7 c1	 movzx	 eax, cx
  00012	83 e8 30	 sub	 eax, 48			; 00000030H

; 58   :     }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
$LN2@ParseHexDi:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00017	8d 41 9f	 lea	 eax, DWORD PTR [ecx-97]
  0001a	66 83 f8 05	 cmp	 ax, 5
  0001e	77 08		 ja	 SHORT $LN3@ParseHexDi

; 53   :             return (c - L'a' + 10);

  00020	0f b7 c1	 movzx	 eax, cx
  00023	83 e8 57	 sub	 eax, 87			; 00000057H

; 58   :     }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN3@ParseHexDi:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00028	8d 41 bf	 lea	 eax, DWORD PTR [ecx-65]
  0002b	66 83 f8 05	 cmp	 ax, 5
  0002f	77 08		 ja	 SHORT $LN4@ParseHexDi

; 56   :             return (c - L'A' + 10);

  00031	0f b7 c1	 movzx	 eax, cx
  00034	83 e8 37	 sub	 eax, 55			; 00000037H

; 58   :     }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
$LN4@ParseHexDi:

; 57   :         return (-1);

  00039	83 c8 ff	 or	 eax, -1

; 58   :     }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP ; Palmtree::Math::Core::Internal::ParseHexDigit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z PROC ; Palmtree::Math::Core::Internal::ParseDecimalDigit, COMDAT

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   :         if (c >= L'0' && c <= L'9')

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _c$[ebp]
  00006	8d 41 d0	 lea	 eax, DWORD PTR [ecx-48]
  00009	66 83 f8 09	 cmp	 ax, 9
  0000d	77 08		 ja	 SHORT $LN2@ParseDecim

; 43   :             return (c - L'0');

  0000f	0f b7 c1	 movzx	 eax, cx
  00012	83 e8 30	 sub	 eax, 48			; 00000030H

; 45   :     }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
$LN2@ParseDecim:

; 44   :         return (-1);

  00017	83 c8 ff	 or	 eax, -1

; 45   :     }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP ; Palmtree::Math::Core::Internal::ParseDecimalDigit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLYX_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC					; COMDAT

; 228  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  : #ifdef _MSC_VER
; 230  : #ifdef _M_IX86
; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00006	f7 65 0c	 mul	 DWORD PTR _v$[ebp]

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR _w_hi$[ebp]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 232  : #elif defined(_M_X64)
; 233  :             return (_mulx_u64(u, v, w_hi));
; 234  : #else
; 235  : #error unknown platform
; 236  : #endif
; 237  : #elif defined(__GNUC__)
; 238  : #ifdef _M_IX86
; 239  :             _UINT32_T w_lo;
; 240  :             __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 241  :             return (w_lo);
; 242  : #elif defined(_M_X64)
; 243  :             _UINT64_T w_lo;
; 244  :             __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 245  :             return (w_lo);
; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  : #else
; 250  : #error unknown compiler
; 251  : #endif
; 252  :         }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLY_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC					; COMDAT

; 209  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 210  : #ifdef _M_IX86
; 211  : #ifdef _MSC_VER
; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00006	f7 65 0c	 mul	 DWORD PTR _v$[ebp]

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR _w_hi$[ebp]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 213  : #elif defined(__GNUC__)
; 214  :             _UINT32_T w_lo;
; 215  :             __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 216  :             return (w_lo);
; 217  : #else
; 218  : #error unknown compiler
; 219  : #endif
; 220  : #elif defined(_M_X64)
; 221  :             return (_umul128(u, v, w_hi));
; 222  : #else
; 223  : #error unknown platform
; 224  : #endif
; 225  :         }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADDX_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC					; COMDAT

; 187  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00003	8a 45 08	 mov	 al, BYTE PTR _carry$[ebp]
  00006	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp]
  0000e	66 0f 38 f6 4d
	10		 adcx	 ecx, DWORD PTR _v$[ebp]
  00014	0f 92 c0	 setb	 al
  00017	89 0a		 mov	 DWORD PTR [edx], ecx

; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));
; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADD_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC						; COMDAT

; 176  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));

  00003	8a 45 08	 mov	 al, BYTE PTR _carry$[ebp]
  00006	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp]
  0000e	13 4d 10	 adc	 ecx, DWORD PTR _v$[ebp]
  00011	0f 92 c0	 setb	 al
  00014	89 0a		 mov	 DWORD PTR [edx], ecx

; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));
; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_SIZE PROC				; COMDAT

; 161  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 162  :             return ((u + v - 1) / v);

  00003	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	48		 dec	 eax
  00009	03 45 0c	 add	 eax, DWORD PTR _v$[ebp]
  0000c	f7 75 0c	 div	 DWORD PTR _v$[ebp]

; 163  :         }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
__DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC				; COMDAT

; 156  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 157  :             return ((u + v - 1) / v);

  00003	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	48		 dec	 eax
  00009	03 45 0c	 add	 eax, DWORD PTR _v$[ebp]
  0000c	f7 75 0c	 div	 DWORD PTR _v$[ebp]

; 158  :         }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 145  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  00003	8b 45 10	 mov	 eax, DWORD PTR _result_high$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 147  :             return ((_UINT32_T)value);

  0000b	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 148  :         }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_UNIT
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC					; COMDAT

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _count$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  0000e	f3 a5		 rep movsd
  00010	5f		 pop	 edi
  00011	5e		 pop	 esi

; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);
; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI64Counter, COMDAT

; 344  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  00003	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A ; Palmtree::Math::Core::Internal::statistics_info
  0000b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 346  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI32Counter, COMDAT

; 338  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00003	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00006	b9 04 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  0000b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 340  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter, COMDAT

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  00000	f0 ff 05 00 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A

; 323  :     }

  00007	c3		 ret	 0
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter, COMDAT

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  00000	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4

; 317  :     }

  00007	c3		 ret	 0
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_no_abs$ = 8						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_result$ = 28						; size = 4
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT, COMDAT

; 1336 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1337 :         if (source == nullptr)

  00003	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	85 d2		 test	 edx, edx
  0000b	74 68		 je	 SHORT $LN11@PMC_TryPar

; 1339 :         if (o_sign == nullptr)

  0000d	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]
  00010	85 c0		 test	 eax, eax
  00012	75 07		 jne	 SHORT $LN3@PMC_TryPar

; 1340 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o_sign");

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@
  00019	eb 5f		 jmp	 SHORT $LN9@PMC_TryPar
$LN3@PMC_TryPar:
  0001b	56		 push	 esi

; 1341 :         if (o_abs == nullptr)

  0001c	8b 75 18	 mov	 esi, DWORD PTR _o_abs$[ebp]
  0001f	57		 push	 edi
  00020	85 f6		 test	 esi, esi
  00022	75 07		 jne	 SHORT $LN4@PMC_TryPar

; 1342 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o_abs");

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@
  00029	eb 4f		 jmp	 SHORT $LN9@PMC_TryPar
$LN4@PMC_TryPar:

; 1343 :         if (format_option == nullptr)
; 1344 :             format_option = &default_number_format_option;
; 1345 :         NUMBER_HEADER* no_abs;
; 1346 :         PMC_STATUS_CODE err = PMC_TryParse_Imp(source, number_styles, format_option, o_sign, &no_abs, result);

  0002b	8b 7d 1c	 mov	 edi, DWORD PTR _result$[ebp]
  0002e	8d 4d 08	 lea	 ecx, DWORD PTR _no_abs$[ebp]
  00031	57		 push	 edi
  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  00037	b9 00 00 00 00	 mov	 ecx, OFFSET ?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  0003c	85 c0		 test	 eax, eax
  0003e	0f 45 c8	 cmovne	 ecx, eax
  00041	51		 push	 ecx
  00042	ff 75 0c	 push	 DWORD PTR _number_styles$[ebp]
  00045	52		 push	 edx
  00046	e8 00 00 00 00	 call	 ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
  0004b	83 c4 18	 add	 esp, 24			; 00000018H

; 1347 :         if (err != PMC_STATUS_OK)

  0004e	85 c0		 test	 eax, eax
  00050	74 0e		 je	 SHORT $LN6@PMC_TryPar

; 1348 :         {
; 1349 :             *result = 0;

  00052	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00058	5f		 pop	 edi

; 1355 :     }

  00059	5e		 pop	 esi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 18 00	 ret	 24			; 00000018H
$LN6@PMC_TryPar:

; 1350 :             return (err);
; 1351 :         }
; 1352 :         *o_abs = (PMC_HANDLE_UINT)no_abs;

  00060	8b 45 08	 mov	 eax, DWORD PTR _no_abs$[ebp]
  00063	89 06		 mov	 DWORD PTR [esi], eax

; 1353 :         *result = 1;
; 1354 :         return (PMC_STATUS_OK);

  00065	33 c0		 xor	 eax, eax
  00067	c7 07 01 00 00
	00		 mov	 DWORD PTR [edi], 1
  0006d	5f		 pop	 edi

; 1355 :     }

  0006e	5e		 pop	 esi
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 18 00	 ret	 24			; 00000018H
$LN11@PMC_TryPar:

; 1338 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"source");

  00075	68 00 00 00 00	 push	 OFFSET ??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@
$LN9@PMC_TryPar:

; 1355 :     }

  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  0007f	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00082	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00087	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0008c	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@PMC_TryPar:
  00095	cc		 int	 3
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_source$ = 8						; size = 4
_o_sign$ = 11						; size = 1
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_abs$ = 20						; size = 4
_o$ = 20						; size = 4
_result$ = 24						; size = 4
?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParse, COMDAT

; 1306 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1307 :         if (source == nullptr)

  00028	8b 7d 08	 mov	 edi, DWORD PTR _source$[ebp]
  0002b	85 ff		 test	 edi, edi
  0002d	0f 84 f1 00 00
	00		 je	 $LN14@PMC_TryPar

; 1309 :         if (o == nullptr)

  00033	8b 5d 14	 mov	 ebx, DWORD PTR _o$[ebp]
  00036	85 db		 test	 ebx, ebx
  00038	75 0a		 jne	 SHORT $LN3@PMC_TryPar

; 1310 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_13LNPOMHLG@?$AAo@
  0003f	e9 e5 00 00 00	 jmp	 $LN12@PMC_TryPar
$LN3@PMC_TryPar:

; 1311 :         if (format_option == nullptr)
; 1312 :             format_option = &default_number_format_option;
; 1313 :         ResourceHolderUINT root;

  00044	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00047	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1314 :         char o_sign;
; 1315 :         NUMBER_HEADER* o_abs;
; 1316 :         PMC_STATUS_CODE err = PMC_TryParse_Imp(source, number_styles, format_option, &o_sign, &o_abs, result);

  00053	8d 45 14	 lea	 eax, DWORD PTR _o_abs$[ebp]
  00056	8b 75 18	 mov	 esi, DWORD PTR _result$[ebp]
  00059	b9 00 00 00 00	 mov	 ecx, OFFSET ?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  0005e	56		 push	 esi
  0005f	50		 push	 eax
  00060	8d 45 0b	 lea	 eax, DWORD PTR _o_sign$[ebp]
  00063	50		 push	 eax
  00064	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  00067	85 c0		 test	 eax, eax
  00069	0f 45 c8	 cmovne	 ecx, eax
  0006c	51		 push	 ecx
  0006d	ff 75 0c	 push	 DWORD PTR _number_styles$[ebp]
  00070	57		 push	 edi
  00071	e8 00 00 00 00	 call	 ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
  00076	8b f8		 mov	 edi, eax
  00078	83 c4 18	 add	 esp, 24			; 00000018H

; 1317 :         if (err != PMC_STATUS_OK || !*result)

  0007b	85 ff		 test	 edi, edi
  0007d	75 7a		 jne	 SHORT $LN6@PMC_TryPar
  0007f	39 06		 cmp	 DWORD PTR [esi], eax
  00081	74 76		 je	 SHORT $LN6@PMC_TryPar

; 1321 :         }
; 1322 :         root.HookNumber(o_abs);

  00083	8b 7d 14	 mov	 edi, DWORD PTR _o_abs$[ebp]
  00086	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00089	57		 push	 edi
  0008a	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 1323 :         if (o_sign < 0)

  0008f	80 7d 0b 00	 cmp	 BYTE PTR _o_sign$[ebp], 0
  00093	7d 2e		 jge	 SHORT $LN7@PMC_TryPar

; 1324 :         {
; 1325 :             // 負数は表現できないのでエラーとする
; 1326 :             *result = 0;

  00095	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1327 :             return (PMC_STATUS_OVERFLOW);

  0009b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a2	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000a5	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000aa	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH

; 1333 :     }

  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b9	59		 pop	 ecx
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 14 00	 ret	 20			; 00000014H
$LN7@PMC_TryPar:

; 1328 :         }
; 1329 :         *o = (PMC_HANDLE_UINT)o_abs;
; 1330 :         root.UnlinkNumber(o_abs);

  000c3	57		 push	 edi
  000c4	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000c7	89 3b		 mov	 DWORD PTR [ebx], edi
  000c9	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1331 :         *result = 1;

  000ce	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1

; 1332 :         return (PMC_STATUS_OK);

  000d4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000db	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  000de	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000e3	33 c0		 xor	 eax, eax

; 1333 :     }

  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 14 00	 ret	 20			; 00000014H
$LN6@PMC_TryPar:

; 1318 :         {
; 1319 :             *result = 0;

  000f9	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1320 :             return (err);

  000ff	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00106	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00109	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0010e	8b c7		 mov	 eax, edi

; 1333 :     }

  00110	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00113	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011a	59		 pop	 ecx
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 14 00	 ret	 20			; 00000014H
$LN14@PMC_TryPar:

; 1308 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"source");

  00124	68 00 00 00 00	 push	 OFFSET ??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@
$LN12@PMC_TryPar:

; 1333 :     }

  00129	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  0012e	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00131	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00136	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0013b	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN11@PMC_TryPar:
  00144	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParse
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Parse, COMDAT

; 1358 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1359 :         InitializeNumberFormatoInfo(&default_number_format_option);

  00003	68 00 00 00 00	 push	 OFFSET ?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  00008	e8 00 00 00 00	 call	 ?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
  0000d	8b 45 08	 mov	 eax, DWORD PTR _feature$[ebp]
  00010	83 c4 04	 add	 esp, 4

; 1360 : 
; 1361 :         if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 1362 :             fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;
; 1363 :         else
; 1364 :             fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;
; 1365 : 
; 1366 :         return (PMC_STATUS_OK);

  00013	b9 00 00 00 00	 mov	 ecx, OFFSET ?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX
  00018	ba 00 00 00 00	 mov	 edx, OFFSET ?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL
  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	83 e0 0a	 and	 eax, 10			; 0000000aH
  00022	3c 0a		 cmp	 al, 10			; 0000000aH
  00024	0f 45 ca	 cmovne	 ecx, edx
  00027	33 c0		 xor	 eax, eax
  00029	89 0d 00 00 00
	00		 mov	 DWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APAIPAIII@ZA, ecx

; 1367 :     }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Parse
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
_TEXT	SEGMENT
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ PROC ; Palmtree::Math::Core::Internal::StringWriter::GetString, COMDAT
; _this$ = ecx

; 245  :             return (_sob);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 246  :         }

  00003	c3		 ret	 0
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ENDP ; Palmtree::Math::Core::Internal::StringWriter::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT
; _this$ = ecx

; 235  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 236  :             while (*str != L'\0')

  00004	8b 75 08	 mov	 esi, DWORD PTR _str$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0000d	66 85 c0	 test	 ax, ax
  00010	74 18		 je	 SHORT $LN3@Write
  00012	8b c8		 mov	 ecx, eax
$LL2@Write:

; 237  :             {
; 238  :                 Write(*str);

  00014	8b 07		 mov	 eax, DWORD PTR [edi]
  00016	51		 push	 ecx
  00017	8b cf		 mov	 ecx, edi
  00019	ff 50 04	 call	 DWORD PTR [eax+4]
  0001c	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]

; 239  :                 ++str;

  00020	8d 76 02	 lea	 esi, DWORD PTR [esi+2]
  00023	8b c8		 mov	 ecx, eax
  00025	66 85 c0	 test	 ax, ax
  00028	75 ea		 jne	 SHORT $LL2@Write
$LN3@Write:
  0002a	5f		 pop	 edi

; 240  :             }
; 241  :         }

  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_c$ = 8							; size = 2
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT
; _this$ = ecx

; 214  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 215  :             if (_p != nullptr)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	85 d2		 test	 edx, edx
  0000b	74 1b		 je	 SHORT $LN2@Write

; 216  :             {
; 217  :                 if (_p + 1 >= _eob)

  0000d	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00010	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  00013	73 1c		 jae	 SHORT $LN7@Write

; 219  :                 *_p++ = c;

  00015	66 8b 45 08	 mov	 ax, WORD PTR _c$[ebp]
  00019	66 89 02	 mov	 WORD PTR [edx], ax
  0001c	83 41 04 02	 add	 DWORD PTR [ecx+4], 2

; 220  :                 *_p = L'\0';

  00020	33 d2		 xor	 edx, edx
  00022	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00025	66 89 10	 mov	 WORD PTR [eax], dx
$LN2@Write:

; 221  :             }
; 222  :             ++_written;

  00028	ff 41 10	 inc	 DWORD PTR [ecx+16]

; 223  :         }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN7@Write:

; 218  :                     throw InsufficientBufferException(L"書き込み先バッファのサイズが不足しています。");

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
  00036	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00039	e8 00 00 00 00	 call	 ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
  0003e	68 00 00 00 00	 push	 OFFSET __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
  00043	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@Write:
  0004c	cc		 int	 3
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT
; _this$ = ecx

; 210  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 205  :         }
; 206  : 
; 207  :     public:
; 208  :         StringWriter(wchar_t* buffer, size_t size)
; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00003	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 08		 je	 SHORT $LN3@StringWrit
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0000d	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00010	eb 02		 jmp	 SHORT $LN4@StringWrit
$LN3@StringWrit:
  00012	33 c0		 xor	 eax, eax
$LN4@StringWrit:

; 203  :             _eob = eob;

  00014	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 211  :         }

  00017	8b c1		 mov	 eax, ecx

; 201  :             _p = p;

  00019	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 202  :             _sob = sob;

  0001c	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 204  :             _written = 0;

  0001f	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 210  :         {

  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@

; 211  :         }

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sob$ = 12						; size = 4
_eob$ = 16						; size = 4
??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT
; _this$ = ecx

; 199  :         StringWriter(wchar_t* p, wchar_t* sob, wchar_t* eob)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  :         {
; 201  :             _p = p;

  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 202  :             _sob = sob;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _sob$[ebp]
  0000c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 203  :             _eob = eob;

  0000f	8b 45 10	 mov	 eax, DWORD PTR _eob$[ebp]
  00012	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 204  :             _written = 0;
; 205  :         }

  00015	8b c1		 mov	 eax, ecx
  00017	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  :             while (*b != L'\0')

  00003	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00006	56		 push	 esi
  00007	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0000a	66 85 c9	 test	 cx, cx
  0000d	74 1b		 je	 SHORT $LN3@StartsWith
  0000f	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00012	8b d1		 mov	 edx, ecx
  00014	2b f0		 sub	 esi, eax
$LL2@StartsWith:

; 122  :             {
; 123  :                 if (*a != *b)

  00016	66 39 14 06	 cmp	 WORD PTR [esi+eax], dx
  0001a	75 16		 jne	 SHORT $LN7@StartsWith

; 125  :                 ++a;
; 126  :                 ++b;

  0001c	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00020	83 c0 02	 add	 eax, 2
  00023	8b d1		 mov	 edx, ecx
  00025	66 85 c9	 test	 cx, cx
  00028	75 ec		 jne	 SHORT $LL2@StartsWith
$LN3@StartsWith:

; 127  :             }
; 128  :             return (1);

  0002a	b8 01 00 00 00	 mov	 eax, 1
  0002f	5e		 pop	 esi

; 129  :         }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN7@StartsWith:

; 124  :                     return (0);

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi

; 129  :         }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
$T1 = -24						; size = 24
_str$ = 8						; size = 4
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::SkipString, COMDAT
; _this$ = ecx

; 109  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 110  :             if (!StartsWith(_p, str))

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0000c	8b d1		 mov	 edx, ecx

; 121  :             while (*b != L'\0')

  0000e	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  00011	66 85 c0	 test	 ax, ax
  00014	74 20		 je	 SHORT $LN2@SkipString
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0001b	8b f0		 mov	 esi, eax
  0001d	2b f9		 sub	 edi, ecx
  0001f	90		 npad	 1
$LL5@SkipString:

; 122  :             {
; 123  :                 if (*a != *b)

  00020	66 39 34 17	 cmp	 WORD PTR [edi+edx], si
  00024	75 23		 jne	 SHORT $LN14@SkipString

; 124  :                     return (0);
; 125  :                 ++a;
; 126  :                 ++b;

  00026	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  0002a	83 c2 02	 add	 edx, 2
  0002d	8b f0		 mov	 esi, eax
  0002f	66 85 c0	 test	 ax, ax
  00032	75 ec		 jne	 SHORT $LL5@SkipString

; 122  :             {
; 123  :                 if (*a != *b)

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
$LN2@SkipString:

; 114  :             }
; 115  :             _p += lstrlenW(str);

  00036	51		 push	 ecx
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0003d	03 c0		 add	 eax, eax
  0003f	01 43 04	 add	 DWORD PTR [ebx+4], eax
  00042	5b		 pop	 ebx

; 116  :         }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN14@SkipString:

; 111  :             {
; 112  :                 // str で始まっていないにもかかわらず、strをスキップしようとした。
; 113  :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::SkipString;1");

  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00053	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00056	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0005b	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00060	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN15@SkipString:
  00069	cc		 int	 3
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::SkipString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ
_TEXT	SEGMENT
?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ PROC ; Palmtree::Math::Core::Internal::StringReader::SkipSpace, COMDAT
; _this$ = ecx

; 89   :         {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 90   :             for (;;)
; 91   :             {
; 92   :                 switch (PeekChar())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 10		 call	 DWORD PTR [eax]
  00007	0f b7 c0	 movzx	 eax, ax
  0000a	83 f8 09	 cmp	 eax, 9
  0000d	72 20		 jb	 SHORT $LN15@SkipSpace
  0000f	90		 npad	 1
$LL2@SkipSpace:
  00010	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  00013	76 05		 jbe	 SHORT $LN7@SkipSpace
  00015	83 f8 20	 cmp	 eax, 32			; 00000020H
  00018	75 15		 jne	 SHORT $LN15@SkipSpace
$LN7@SkipSpace:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;
; 101  :                 default:
; 102  :                     return;
; 103  :                 }
; 104  :                 Progress();

  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
  0001c	8b ce		 mov	 ecx, esi
  0001e	ff 50 04	 call	 DWORD PTR [eax+4]
  00021	8b 06		 mov	 eax, DWORD PTR [esi]
  00023	8b ce		 mov	 ecx, esi
  00025	ff 10		 call	 DWORD PTR [eax]
  00027	0f b7 c0	 movzx	 eax, ax
  0002a	83 f8 09	 cmp	 eax, 9
  0002d	73 e1		 jae	 SHORT $LL2@SkipSpace
$LN15@SkipSpace:
  0002f	5e		 pop	 esi

; 105  :             }
; 106  :         }

  00030	c3		 ret	 0
?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT
; _this$ = ecx

; 84   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 85   :             return (StartsWith(_p, str));

  00003	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00006	56		 push	 esi

; 121  :             while (*b != L'\0')

  00007	0f b7 10	 movzx	 edx, WORD PTR [eax]
  0000a	66 85 d2	 test	 dx, dx
  0000d	74 19		 je	 SHORT $LN5@StartsWith
  0000f	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00012	2b f0		 sub	 esi, eax
$LL4@StartsWith:

; 122  :             {
; 123  :                 if (*a != *b)

  00014	66 39 14 06	 cmp	 WORD PTR [esi+eax], dx
  00018	75 18		 jne	 SHORT $LN9@StartsWith

; 124  :                     return (0);
; 125  :                 ++a;
; 126  :                 ++b;

  0001a	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  0001e	83 c0 02	 add	 eax, 2
  00021	8b d1		 mov	 edx, ecx
  00023	66 85 c9	 test	 cx, cx
  00026	75 ec		 jne	 SHORT $LL4@StartsWith
$LN5@StartsWith:

; 85   :             return (StartsWith(_p, str));

  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	5e		 pop	 esi

; 86   :         }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN9@StartsWith:

; 85   :             return (StartsWith(_p, str));

  00032	33 c0		 xor	 eax, eax
  00034	5e		 pop	 esi

; 86   :         }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 24
?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ PROC ; Palmtree::Math::Core::Internal::StringReader::Progress, COMDAT
; _this$ = ecx

; 77   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 78   :             if (*_p == L'\0')

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	83 ec 18	 sub	 esp, 24			; 00000018H
  00009	66 83 38 00	 cmp	 WORD PTR [eax], 0
  0000d	74 0a		 je	 SHORT $LN6@Progress

; 80   :             ++_p;

  0000f	83 c0 02	 add	 eax, 2
  00012	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 81   :         }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN6@Progress:

; 79   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::Progress;1");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00023	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00026	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0002b	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00030	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@Progress:
  00039	cc		 int	 3
?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::Progress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
_TEXT	SEGMENT
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ PROC ; Palmtree::Math::Core::Internal::StringReader::PeekChar, COMDAT
; _this$ = ecx

; 73   :             return (*_p);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	66 8b 00	 mov	 ax, WORD PTR [eax]

; 74   :         }

  00006	c3		 ret	 0
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::PeekChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StringReader, COMDAT
; _this$ = ecx

; 50   :         StringReader(const wchar_t* p)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   :         {
; 52   :             _p = p;

  00003	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 53   :         }

  00009	8b c1		 mov	 eax, ecx
  0000b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7StringReader@Internal@Core@Math@Palmtree@@6B@
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StringReader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 295  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 296  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 296  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 296  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)
; 234  :         {
; 235  :         }
; 236  : 
; 237  :         virtual ~InsufficientBufferException() noexcept(true)
; 238  :         {
; 239  :         }
; 240  :     };
; 241  : 
; 242  :     class NotEnoughMemoryException
; 243  :         : public Exception
; 244  :     {
; 245  :     public:
; 246  :         NotEnoughMemoryException(const wchar_t* message) noexcept(true)
; 247  :             : Exception(PMC_STATUS_NOT_ENOUGH_MEMORY, message)
; 248  :         {
; 249  :         }
; 250  : 
; 251  :         NotEnoughMemoryException(const NotEnoughMemoryException& p) noexcept(true)
; 252  :             : Exception(p)
; 253  :         {
; 254  :         }
; 255  : 
; 256  :         virtual ~NotEnoughMemoryException() noexcept(true)
; 257  :         {
; 258  :         }
; 259  :     };
; 260  : 
; 261  :     class NotSupportedException
; 262  :         : public Exception
; 263  :     {
; 264  :     public:
; 265  :         NotSupportedException(const wchar_t* message) noexcept(true)
; 266  :             : Exception(PMC_STATUS_NOT_SUPPORTED, message)
; 267  :         {
; 268  :         }
; 269  : 
; 270  :         NotSupportedException(const NotSupportedException& p) noexcept(true)
; 271  :             : Exception(p)
; 272  :         {
; 273  :         }
; 274  : 
; 275  :         virtual ~NotSupportedException() noexcept(true)
; 276  :         {
; 277  :         }
; 278  :     };
; 279  : 
; 280  :     class InternalErrorException
; 281  :         : public Exception
; 282  :     {
; 283  :     public:
; 284  :         InternalErrorException(const wchar_t* message, const wchar_t* data) noexcept(true)
; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)
; 286  :         {
; 287  :         }
; 288  : 
; 289  :         InternalErrorException(const InternalErrorException& p) noexcept(true)
; 290  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 291  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	c7 41 0c 00 ff
	ff ff		 mov	 DWORD PTR [ecx+12], -256 ; ffffff00H
  00051	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)
; 234  :         {
; 235  :         }
; 236  : 
; 237  :         virtual ~InsufficientBufferException() noexcept(true)
; 238  :         {
; 239  :         }
; 240  :     };
; 241  : 
; 242  :     class NotEnoughMemoryException
; 243  :         : public Exception
; 244  :     {
; 245  :     public:
; 246  :         NotEnoughMemoryException(const wchar_t* message) noexcept(true)
; 247  :             : Exception(PMC_STATUS_NOT_ENOUGH_MEMORY, message)
; 248  :         {
; 249  :         }
; 250  : 
; 251  :         NotEnoughMemoryException(const NotEnoughMemoryException& p) noexcept(true)
; 252  :             : Exception(p)
; 253  :         {
; 254  :         }
; 255  : 
; 256  :         virtual ~NotEnoughMemoryException() noexcept(true)
; 257  :         {
; 258  :         }
; 259  :     };
; 260  : 
; 261  :     class NotSupportedException
; 262  :         : public Exception
; 263  :     {
; 264  :     public:
; 265  :         NotSupportedException(const wchar_t* message) noexcept(true)
; 266  :             : Exception(PMC_STATUS_NOT_SUPPORTED, message)
; 267  :         {
; 268  :         }
; 269  : 
; 270  :         NotSupportedException(const NotSupportedException& p) noexcept(true)
; 271  :             : Exception(p)
; 272  :         {
; 273  :         }
; 274  : 
; 275  :         virtual ~NotSupportedException() noexcept(true)
; 276  :         {
; 277  :         }
; 278  :     };
; 279  : 
; 280  :     class InternalErrorException
; 281  :         : public Exception
; 282  :     {
; 283  :     public:
; 284  :         InternalErrorException(const wchar_t* message, const wchar_t* data) noexcept(true)
; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 286  :         {

  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b c1		 mov	 eax, ecx
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 238  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 239  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException, COMDAT
; _this$ = ecx

; 238  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 239  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 239  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT
; _this$ = ecx

; 234  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 234  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 235  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT
; _this$ = ecx

; 229  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 48   :         {
; 49   :             _code = code;
; 50   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00044	c7 41 0c f8 ff
	ff ff		 mov	 DWORD PTR [ecx+12], -8	; fffffff8H
  0004b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 51   :             _data = nullptr;

  0004e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 52   :         }
; 53   : 
; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)
; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;
; 58   :             _data = data;
; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)

  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 229  :         {

  0005c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 230  :         }

  00062	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00069	8b c1		 mov	 eax, ecx
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 124  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 125  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 125  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 125  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 120  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	c7 41 0c fe ff
	ff ff		 mov	 DWORD PTR [ecx+12], -2	; fffffffeH
  00051	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 115  :         {

  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b c1		 mov	 eax, ecx
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 105  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@

; 106  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException, COMDAT
; _this$ = ecx

; 105  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@

; 106  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 106  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException, COMDAT
; _this$ = ecx

; 101  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 101  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@

; 102  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException, COMDAT
; _this$ = ecx

; 96   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 48   :         {
; 49   :             _code = code;
; 50   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00044	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1
  0004b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 51   :             _data = nullptr;

  0004e	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 52   :         }
; 53   : 
; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)
; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;
; 58   :             _data = data;
; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)

  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 96   :         {

  0005c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@

; 97   :         }

  00062	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00069	8b c1		 mov	 eax, ecx
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 70   :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00036	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00039	50		 push	 eax
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00040	e8 00 00 00 00	 call	 ___std_exception_destroy
  00045	83 c4 04	 add	 esp, 4
  00048	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0004c	74 0b		 je	 SHORT $LN9@scalar
  0004e	6a 18		 push	 24			; 00000018H
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00059	8b c6		 mov	 eax, esi
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5e		 pop	 esi
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00033	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00036	50		 push	 eax
  00037	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 71   :         }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }

  00058	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005f	8b c2		 mov	 eax, edx
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0003e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 57   :             _message = message;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  00044	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00047	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  0004a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00050	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b c1		 mov	 eax, ecx
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 48   :         {
; 49   :             _code = code;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0003e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 50   :             _message = message;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 51   :             _data = nullptr;

  0004d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 52   :         }

  00054	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005b	8b c1		 mov	 eax, ecx
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gexception@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00025	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ___std_exception_destroy
  00034	83 c4 04	 add	 esp, 4
  00037	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003b	74 0b		 je	 SHORT $LN6@scalar
  0003d	6a 0c		 push	 12			; 0000000cH
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00048	8b c6		 mov	 eax, esi
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gexception@std@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gexception@std@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 92   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 86   :         __std_exception_destroy(&_Data);

  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ___std_exception_destroy
  00031	83 c4 04	 add	 esp, 4

; 87   :     }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 51   :     }

  0000e	8b c1		 mov	 eax, ecx
  00010	c3		 ret	 0
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
_TEXT	ENDS
END
