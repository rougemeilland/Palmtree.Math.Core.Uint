; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_from.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_From_I_Imp
PUBLIC	_From_L_Imp
PUBLIC	_Initialize_From
PUBLIC	_PMC_From_I@8
PUBLIC	_PMC_From_L@12
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_number_zero:BYTE
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 629  :     {

	push	ebp
	mov	ebp, esp

; 630  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 655  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);
; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 655  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 596  :     {

	push	ebp
	mov	ebp, esp

; 597  :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 598  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 608  :     }

	pop	ebp
	ret	0
$LN2@LZCNT_ALT_:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, ecx

; 608  :     }

	pop	ebp
	ret	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 182  :     {

	push	ebp
	mov	ebp, esp

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _result_high$[ebp]
	mov	ecx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 184  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 185  :     }

	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
;	COMDAT _PMC_From_L@12
_TEXT	SEGMENT
_x$ = 8							; size = 8
_p$ = 12						; size = 4
_o$ = 16						; size = 4
_PMC_From_L@12 PROC					; COMDAT

; 112  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 113  :     NUMBER_HEADER* p;
; 114  :     PMC_STATUS_CODE result;
; 115  :     if (sizeof(__UNIT_TYPE) * 2 < sizeof(x))
; 116  :     {
; 117  :         // 32bit未満のCPUには未対応
; 118  :         return (PMC_STATUS_INTERNAL_ERROR);
; 119  :     }
; 120  :     if (x == 0)

	mov	esi, DWORD PTR _x$[ebp]
	mov	eax, esi
	push	edi
	mov	edi, DWORD PTR _x$[ebp+4]
	or	eax, edi
	jne	SHORT $LN3@PMC_From_L

; 121  :         *o = &number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	pop	edi

; 133  : }

	pop	esi
	mov	DWORD PTR [eax], OFFSET _number_zero
	xor	eax, eax
	pop	ebp
	ret	12					; 0000000cH
$LN3@PMC_From_L:

; 62   :         if (x_hi == 0)

	test	edi, edi
	jne	SHORT $LN12@PMC_From_L
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 597  :         if (x == 0)

	test	esi, esi
	jne	SHORT $LN21@PMC_From_L

; 598  :             return (sizeof(x) * 8);

	lea	ecx, DWORD PTR [edi+32]
	jmp	SHORT $LN20@PMC_From_L
$LN21@PMC_From_L:

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, esi

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
$LN20@PMC_From_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 64   :             __UNIT_TYPE x_bit_length = sizeof(x_lo) * 8 - _LZCNT_ALT_32(x_lo);

	mov	eax, 32					; 00000020H
	sub	eax, ecx

; 65   :             if ((result = AllocateNumber(o, x_bit_length, NULL)) != PMC_STATUS_OK)

	push	0
	push	eax
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN13@PMC_From_L

; 133  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
$LN12@PMC_From_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, edi

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 70   :             __UNIT_TYPE x_bit_length = sizeof(x) * 8 - _LZCNT_ALT_32(x_hi);

	mov	eax, 64					; 00000040H
	sub	eax, ecx

; 71   :             if ((result = AllocateNumber(o, x_bit_length, NULL)) != PMC_STATUS_OK)

	push	0
	push	eax
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_From_L

; 72   :                 return (result);
; 73   :             (*o)->BLOCK[1] = x_hi;

	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR [eax+4], edi
$LN13@PMC_From_L:

; 74   :         }
; 75   :         (*o)->BLOCK[0] = x_lo;

	mov	eax, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR [eax], esi

; 76   :     }
; 77   :     else
; 78   :     {
; 79   :         // _UINT64_T を表現するのに 1 ワードで十分である処理系の場合
; 80   : 
; 81   :         __UNIT_TYPE x_bit_length = sizeof(x) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)x);
; 82   :         if ((result = AllocateNumber(o, x_bit_length, NULL)) != PMC_STATUS_OK)
; 83   :             return (result);
; 84   :         (*o)->BLOCK[0] = (__UNIT_TYPE)x;
; 85   :     }
; 86   :     CommitNumber(*o);

	push	DWORD PTR _p$[ebp]
	call	_CommitNumber

; 122  :     else
; 123  :     {
; 124  :         if ((result = From_L_Imp(x, &p)) != PMC_STATUS_OK)
; 125  :             return (result);
; 126  :         *o = p;

	mov	ecx, DWORD PTR _o$[ebp]

; 86   :     CommitNumber(*o);

	add	esp, 4

; 122  :     else
; 123  :     {
; 124  :         if ((result = From_L_Imp(x, &p)) != PMC_STATUS_OK)
; 125  :             return (result);
; 126  :         *o = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax

; 127  :     }
; 128  : #ifdef _DEBUG
; 129  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 130  :         return (result);
; 131  : #endif
; 132  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_From_L:

; 133  : }

	pop	edi
	pop	esi
	pop	ebp
	ret	12					; 0000000cH
_PMC_From_L@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
;	COMDAT _PMC_From_I@8
_TEXT	SEGMENT
_p$1 = 8						; size = 4
_x$ = 8							; size = 4
_o$ = 12						; size = 4
_PMC_From_I@8 PROC					; COMDAT

; 91   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 92   :     PMC_STATUS_CODE result;
; 93   :     if (sizeof(__UNIT_TYPE) < sizeof(x))
; 94   :         return (PMC_STATUS_INTERNAL_ERROR);
; 95   :     if (x == 0)

	mov	esi, DWORD PTR _x$[ebp]
	test	esi, esi
	jne	SHORT $LN3@PMC_From_I

; 96   :         *o = &number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	pop	esi
	mov	DWORD PTR [eax], OFFSET _number_zero

; 103  :     }
; 104  : #ifdef _DEBUG
; 105  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 106  :         return (result);
; 107  : #endif
; 108  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 109  : }

	pop	ebp
	ret	8
$LN3@PMC_From_I:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, esi

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 41   :     if ((result = AllocateNumber(o, sizeof(x) * 8 - _LZCNT_ALT_32(x), NULL)) != PMC_STATUS_OK)

	mov	eax, 32					; 00000020H
	sub	eax, ecx
	push	0
	push	eax
	lea	eax, DWORD PTR _p$1[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@PMC_From_I

; 42   :         return (result);
; 43   :     (*o)->BLOCK[0] = x;

	mov	eax, DWORD PTR _p$1[ebp]
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR [eax], esi

; 44   :     CommitNumber(*o);

	push	DWORD PTR _p$1[ebp]
	call	_CommitNumber

; 97   :     else
; 98   :     {
; 99   :         NUMBER_HEADER* p;
; 100  :         if ((result = From_I_Imp(x, &p)) != PMC_STATUS_OK)
; 101  :             return (result);
; 102  :         *o = p;

	mov	ecx, DWORD PTR _o$[ebp]

; 44   :     CommitNumber(*o);

	add	esp, 4

; 97   :     else
; 98   :     {
; 99   :         NUMBER_HEADER* p;
; 100  :         if ((result = From_I_Imp(x, &p)) != PMC_STATUS_OK)
; 101  :             return (result);
; 102  :         *o = p;

	mov	eax, DWORD PTR _p$1[ebp]
	mov	DWORD PTR [ecx], eax

; 103  :     }
; 104  : #ifdef _DEBUG
; 105  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 106  :         return (result);
; 107  : #endif
; 108  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_From_I:
	pop	esi

; 109  : }

	pop	ebp
	ret	8
_PMC_From_I@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
;	COMDAT _Initialize_From
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_From PROC					; COMDAT

; 137  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 138  : }

	ret	0
_Initialize_From ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
;	COMDAT _From_L_Imp
_TEXT	SEGMENT
_x$ = 8							; size = 8
_o$ = 16						; size = 4
_From_L_Imp PROC					; COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp
	push	ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	ebx, DWORD PTR _x$[ebp+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 49   : {

	push	esi
	push	edi

; 50   :     PMC_STATUS_CODE result;
; 51   :     if (sizeof(__UNIT_TYPE) * 2 < sizeof(x))
; 52   :     {
; 53   :         // _UINT64_T を表現するのに 2 ワードでは不足する処理系には対応しない。
; 54   :         return (PMC_STATUS_INTERNAL_ERROR);
; 55   :     }
; 56   :     else if (sizeof(__UNIT_TYPE) < sizeof(x))
; 57   :     {
; 58   :         // _UINT64_T を表現するのに 1 ワードでは不足する(ちょうど 2 ワード必要とする)処理系の場合
; 59   : 
; 60   :         _UINT32_T x_hi;
; 61   :         _UINT32_T x_lo = _FROMDWORDTOWORD(x, &x_hi);

	mov	edi, DWORD PTR _x$[ebp]

; 62   :         if (x_hi == 0)

	test	ebx, ebx
	jne	SHORT $LN6@From_L_Imp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 597  :         if (x == 0)

	test	edi, edi
	jne	SHORT $LN15@From_L_Imp

; 598  :             return (sizeof(x) * 8);

	lea	ecx, DWORD PTR [ebx+32]
	jmp	SHORT $LN14@From_L_Imp
$LN15@From_L_Imp:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, edi

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
$LN14@From_L_Imp:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 65   :             if ((result = AllocateNumber(o, x_bit_length, NULL)) != PMC_STATUS_OK)

	mov	esi, DWORD PTR _o$[ebp]
	mov	eax, 32					; 00000020H
	push	0
	sub	eax, ecx
	push	eax
	push	esi
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@From_L_Imp

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN6@From_L_Imp:

; 71   :             if ((result = AllocateNumber(o, x_bit_length, NULL)) != PMC_STATUS_OK)

	mov	esi, DWORD PTR _o$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	bsr	eax, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 71   :             if ((result = AllocateNumber(o, x_bit_length, NULL)) != PMC_STATUS_OK)

	push	0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 70   :             __UNIT_TYPE x_bit_length = sizeof(x) * 8 - _LZCNT_ALT_32(x_hi);

	mov	eax, 64					; 00000040H
	sub	eax, ecx

; 71   :             if ((result = AllocateNumber(o, x_bit_length, NULL)) != PMC_STATUS_OK)

	push	eax
	push	esi
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@From_L_Imp

; 72   :                 return (result);
; 73   :             (*o)->BLOCK[1] = x_hi;

	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR [eax+4], ebx
$LN7@From_L_Imp:

; 74   :         }
; 75   :         (*o)->BLOCK[0] = x_lo;

	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR [eax], edi

; 76   :     }
; 77   :     else
; 78   :     {
; 79   :         // _UINT64_T を表現するのに 1 ワードで十分である処理系の場合
; 80   : 
; 81   :         __UNIT_TYPE x_bit_length = sizeof(x) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)x);
; 82   :         if ((result = AllocateNumber(o, x_bit_length, NULL)) != PMC_STATUS_OK)
; 83   :             return (result);
; 84   :         (*o)->BLOCK[0] = (__UNIT_TYPE)x;
; 85   :     }
; 86   :     CommitNumber(*o);

	push	DWORD PTR [esi]
	call	_CommitNumber
	add	esp, 4

; 87   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@From_L_Imp:

; 88   : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_From_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
;	COMDAT _From_I_Imp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_o$ = 12						; size = 4
_From_I_Imp PROC					; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	push	esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 597  :         if (x == 0)

	mov	esi, DWORD PTR _x$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 39   : {

	push	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 597  :         if (x == 0)

	test	esi, esi
	jne	SHORT $LN5@From_I_Imp

; 598  :             return (sizeof(x) * 8);

	lea	ecx, DWORD PTR [esi+32]
	jmp	SHORT $LN4@From_I_Imp
$LN5@From_I_Imp:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, esi

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31					; 0000001fH
	sub	ecx, eax
$LN4@From_I_Imp:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 41   :     if ((result = AllocateNumber(o, sizeof(x) * 8 - _LZCNT_ALT_32(x), NULL)) != PMC_STATUS_OK)

	mov	edi, DWORD PTR _o$[ebp]
	mov	eax, 32					; 00000020H
	push	0
	sub	eax, ecx
	push	eax
	push	edi
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@From_I_Imp

; 42   :         return (result);
; 43   :     (*o)->BLOCK[0] = x;

	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR [eax], esi

; 44   :     CommitNumber(*o);

	push	DWORD PTR [edi]
	call	_CommitNumber
	add	esp, 4

; 45   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@From_I_Imp:

; 46   : }

	pop	edi
	pop	esi
	pop	ebp
	ret	0
_From_I_Imp ENDP
_TEXT	ENDS
END
