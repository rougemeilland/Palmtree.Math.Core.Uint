; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_multiply.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ; Palmtree::Math::Core::Internal::Multiply_X_X_Imp
PUBLIC	?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
PUBLIC	?Initialize_Multiply@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Multiply
PUBLIC	?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_I_X
PUBLIC	?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_L_X
PUBLIC	?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I
PUBLIC	?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L
PUBLIC	?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_13JAOPNPKD@?$AAv@				; `string'
PUBLIC	??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ ; `string'
PUBLIC	??_C@_13ICFKHAEN@?$AAu@				; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z:PROC ; Palmtree::Math::Core::Internal::From_I_Imp
EXTRN	?From_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@_K@Z:PROC ; Palmtree::Math::Core::Internal::From_L_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?fp_Multiply_X_1W@Internal@Core@Math@Palmtree@@3P6AXPAIII0@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_Multiply_X_1W
?fp_Multiply_X_2W@Internal@Core@Math@Palmtree@@3P6AXPAIIII0@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_Multiply_X_2W
?fp_Multiply_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I0@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_Multiply_X_X
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_13ICFKHAEN@?$AAu@
CONST	SEGMENT
??_C@_13ICFKHAEN@?$AAu@ DB 'u', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
CONST	SEGMENT
??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ DB 015H
	DB	'_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13JAOPNPKD@?$AAv@
CONST	SEGMENT
??_C@_13JAOPNPKD@?$AAv@ DB 'v', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0
__ehfuncinfo$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$1
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$1
__ehfuncinfo$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z$0
__ehfuncinfo$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z$0
__ehfuncinfo$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z$0
__ehfuncinfo$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z$0
__ehfuncinfo$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0
__ehfuncinfo$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1
__ehfuncinfo$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$1
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0
__ehfuncinfo$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Gexception@std@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
_TEXT	SEGMENT
_root$2 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X_Imp, COMDAT

; 679  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 680  :         if (u->IS_ZERO)

  00028	8b 7d 08	 mov	 edi, DWORD PTR _u$[ebp]
  0002b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002e	a8 01		 test	 al, 1
  00030	74 17		 je	 SHORT $LN2@PMC_Multip
$LN15@PMC_Multip:

; 738  : 
; 739  :             }
; 740  :         }
; 741  :     }

  00032	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN2@PMC_Multip:

; 681  :         {
; 682  :             // u が 0 である場合
; 683  : 
; 684  :             // v の値にかかわらず 0 を返す。
; 685  :             return (&number_zero);
; 686  :         }
; 687  :         else if (u->IS_ONE)

  00049	a8 02		 test	 al, 2
  0004b	74 24		 je	 SHORT $LN4@PMC_Multip

; 688  :         {
; 689  :             // u が 1 である場合
; 690  :             if (v->IS_ZERO)

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00050	f6 40 04 01	 test	 BYTE PTR [eax+4], 1
  00054	75 dc		 jne	 SHORT $LN15@PMC_Multip

; 691  :             {
; 692  :                 // v が 0 である場合
; 693  : 
; 694  :                 //  0  を返す。
; 695  :                 return (&number_zero);
; 696  :             }
; 697  :             else
; 698  :             {
; 699  :                 // v が 0 ではない場合
; 700  : 
; 701  :                 // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 702  :                 return (DuplicateNumber(v));

  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0005c	83 c4 04	 add	 esp, 4

; 738  : 
; 739  :             }
; 740  :         }
; 741  :     }

  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
$LN4@PMC_Multip:

; 703  :             }
; 704  :         }
; 705  :         else
; 706  :         {
; 707  :             // u が 0 と 1 のどちらでもない場合
; 708  : 
; 709  :             if (v->IS_ZERO)

  00071	8b 5d 0c	 mov	 ebx, DWORD PTR _v$[ebp]
  00074	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00077	a8 01		 test	 al, 1
  00079	75 b7		 jne	 SHORT $LN15@PMC_Multip

; 710  :             {
; 711  :                 // v が 0 である場合
; 712  : 
; 713  :                 //  0  を返す。
; 714  :                 return (&number_zero);
; 715  :             }
; 716  :             else if (v->IS_ONE)

  0007b	a8 02		 test	 al, 2
  0007d	74 1b		 je	 SHORT $LN10@PMC_Multip

; 717  :             {
; 718  :                 // v が 1 である場合
; 719  : 
; 720  :                 // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 721  :                 return (DuplicateNumber(u));

  0007f	57		 push	 edi
  00080	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00085	83 c4 04	 add	 esp, 4

; 738  : 
; 739  :             }
; 740  :         }
; 741  :     }

  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
$LN10@PMC_Multip:

; 722  :             }
; 723  :             else
; 724  :             {
; 725  :                 // u と v がともに 0 、1 のどちらでもない場合
; 726  : 
; 727  :                 // u と v の積を計算する
; 728  :                 ResourceHolderUINT root;

  0009a	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  0009d	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 729  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 730  :                 __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;
; 731  :                 __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;
; 732  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000a9	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000ac	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  000af	03 47 14	 add	 eax, DWORD PTR [edi+20]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000b8	8b f0		 mov	 esi, eax

; 733  :                 (*fp_Multiply_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, w->BLOCK);

  000ba	ff 76 24	 push	 DWORD PTR [esi+36]
  000bd	ff 73 10	 push	 DWORD PTR [ebx+16]
  000c0	ff 73 24	 push	 DWORD PTR [ebx+36]
  000c3	ff 77 10	 push	 DWORD PTR [edi+16]
  000c6	ff 77 24	 push	 DWORD PTR [edi+36]
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_Multiply_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I0@ZA
  000cf	83 c4 14	 add	 esp, 20			; 00000014H

; 734  :                 root.CheckNumber(w);

  000d2	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000d5	56		 push	 esi
  000d6	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 735  :                 CommitNumber(w);

  000db	56		 push	 esi
  000dc	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  000e1	83 c4 04	 add	 esp, 4

; 736  :                 root.UnlinkNumber(w);

  000e4	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000e7	56		 push	 esi
  000e8	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 737  :                 return (w);

  000ed	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f4	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000f7	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000fc	8b c6		 mov	 eax, esi

; 738  : 
; 739  :             }
; 740  :         }
; 741  :     }

  000fe	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00101	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00108	59		 pop	 ecx
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X_Imp
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
_TEXT	SEGMENT
_root$2 = -28						; size = 16
_root$3 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u_bit_count$1$ = 8					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L_Imp, COMDAT

; 537  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 538  :         if (u->IS_ZERO)

  00028	8b 7d 08	 mov	 edi, DWORD PTR _u$[ebp]
  0002b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002e	a8 01		 test	 al, 1
  00030	74 17		 je	 SHORT $LN2@PMC_Multip
$LN27@PMC_Multip:

; 614  :                         root.CheckNumber(w);
; 615  :                         CommitNumber(w);
; 616  :                         root.UnlinkNumber(w);
; 617  :                         return (w);
; 618  :                     }
; 619  :                 }
; 620  :                 else
; 621  :                 {
; 622  :                     // _UINT64_T が 1 ワードで表現できる場合
; 623  :                     ResourceHolderUINT root;
; 624  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 625  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 626  :                     __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;
; 627  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);
; 628  :                     (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, w->BLOCK);
; 629  :                     root.CheckNumber(w);
; 630  :                     CommitNumber(w);
; 631  :                     root.UnlinkNumber(w);
; 632  :                     return (w);
; 633  :                 }
; 634  :             }
; 635  :         }
; 636  :     }

  00032	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN2@PMC_Multip:

; 539  :         {
; 540  :             // u が 0 である場合
; 541  : 
; 542  :             // v の値にかかわらず 0 を返す。
; 543  :             return (&number_zero);
; 544  :         }
; 545  :         else if (u->IS_ONE)

  00049	a8 02		 test	 al, 2
  0004b	74 28		 je	 SHORT $LN4@PMC_Multip

; 546  :         {
; 547  :             // u が 1 である場合
; 548  :             if (v == 0)

  0004d	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00050	8b c1		 mov	 eax, ecx
  00052	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp+4]
  00055	0b c2		 or	 eax, edx
  00057	74 d9		 je	 SHORT $LN27@PMC_Multip

; 549  :             {
; 550  :                 // v が 0 である場合
; 551  : 
; 552  :                 //  0  を返す。
; 553  :                 return (&number_zero);
; 554  :             }
; 555  :             else
; 556  :             {
; 557  :                 // v が 0 ではない場合
; 558  : 
; 559  :                 // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 560  :                 return (From_L_Imp(v));

  00059	52		 push	 edx
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ?From_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@_K@Z ; Palmtree::Math::Core::Internal::From_L_Imp
  00060	83 c4 08	 add	 esp, 8

; 614  :                         root.CheckNumber(w);
; 615  :                         CommitNumber(w);
; 616  :                         root.UnlinkNumber(w);
; 617  :                         return (w);
; 618  :                     }
; 619  :                 }
; 620  :                 else
; 621  :                 {
; 622  :                     // _UINT64_T が 1 ワードで表現できる場合
; 623  :                     ResourceHolderUINT root;
; 624  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 625  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 626  :                     __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;
; 627  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);
; 628  :                     (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, w->BLOCK);
; 629  :                     root.CheckNumber(w);
; 630  :                     CommitNumber(w);
; 631  :                     root.UnlinkNumber(w);
; 632  :                     return (w);
; 633  :                 }
; 634  :             }
; 635  :         }
; 636  :     }

  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN4@PMC_Multip:

; 561  :             }
; 562  :         }
; 563  :         else
; 564  :         {
; 565  :             // u が 0 と 1 のどちらでもない場合
; 566  : 
; 567  :             if (v == 0)

  00075	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00078	8b c6		 mov	 eax, esi
  0007a	8b 5d 10	 mov	 ebx, DWORD PTR _v$[ebp+4]
  0007d	0b c3		 or	 eax, ebx
  0007f	74 b1		 je	 SHORT $LN27@PMC_Multip

; 568  :             {
; 569  :                 // v が 0 である場合
; 570  : 
; 571  :                 //  0  を返す。
; 572  :                 return (&number_zero);
; 573  :             }
; 574  :             else if (v == 1)

  00081	83 fe 01	 cmp	 esi, 1
  00084	75 1f		 jne	 SHORT $LN10@PMC_Multip
  00086	85 db		 test	 ebx, ebx
  00088	75 1b		 jne	 SHORT $LN10@PMC_Multip

; 575  :             {
; 576  :                 // v が 1 である場合
; 577  : 
; 578  :                 // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 579  :                 return (DuplicateNumber(u));

  0008a	57		 push	 edi
  0008b	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00090	83 c4 04	 add	 esp, 4

; 614  :                         root.CheckNumber(w);
; 615  :                         CommitNumber(w);
; 616  :                         root.UnlinkNumber(w);
; 617  :                         return (w);
; 618  :                     }
; 619  :                 }
; 620  :                 else
; 621  :                 {
; 622  :                     // _UINT64_T が 1 ワードで表現できる場合
; 623  :                     ResourceHolderUINT root;
; 624  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 625  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 626  :                     __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;
; 627  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);
; 628  :                     (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, w->BLOCK);
; 629  :                     root.CheckNumber(w);
; 630  :                     CommitNumber(w);
; 631  :                     root.UnlinkNumber(w);
; 632  :                     return (w);
; 633  :                 }
; 634  :             }
; 635  :         }
; 636  :     }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN10@PMC_Multip:

; 580  :             }
; 581  :             else
; 582  :             {
; 583  :                 // u と v がともに 0 、1 のどちらでもない場合
; 584  : 
; 585  :                 // u と v の積を計算する
; 586  :                 if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 587  :                 {
; 588  :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 589  : 
; 590  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000a5	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 591  :                     _UINT32_T v_hi;
; 592  :                     _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 593  :                     if (v_hi == 0)

  000a8	8d 4d e4	 lea	 ecx, DWORD PTR _root$3[ebp]
  000ab	89 45 08	 mov	 DWORD PTR _u_bit_count$1$[ebp], eax
  000ae	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000b3	85 db		 test	 ebx, ebx
  000b5	75 3b		 jne	 SHORT $LN14@PMC_Multip

; 594  :                     {
; 595  :                         // v の値が 32bit で表現可能な場合
; 596  :                         ResourceHolderUINT root;

  000b7	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx

; 597  :                         __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000c0	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000c5	83 c4 04	 add	 esp, 4
  000c8	2b c8		 sub	 ecx, eax

; 598  :                         __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

  000ca	8b 45 08	 mov	 eax, DWORD PTR _u_bit_count$1$[ebp]
  000cd	03 c1		 add	 eax, ecx

; 599  :                         NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000cf	8d 4d e4	 lea	 ecx, DWORD PTR _root$3[ebp]
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000d8	8b f0		 mov	 esi, eax

; 600  :                         (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, w->BLOCK);

  000da	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000dd	ff 76 24	 push	 DWORD PTR [esi+36]
  000e0	50		 push	 eax
  000e1	ff 77 10	 push	 DWORD PTR [edi+16]
  000e4	ff 77 24	 push	 DWORD PTR [edi+36]
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_Multiply_X_1W@Internal@Core@Math@Palmtree@@3P6AXPAIII0@ZA
  000ed	83 c4 10	 add	 esp, 16			; 00000010H

; 601  :                         root.CheckNumber(w);
; 602  :                         CommitNumber(w);
; 603  :                         root.UnlinkNumber(w);
; 604  :                         return (w);

  000f0	eb 3e		 jmp	 SHORT $LN26@PMC_Multip
$LN14@PMC_Multip:

; 605  :                     }
; 606  :                     else
; 607  :                     {
; 608  :                         // v の値が 32bit では表現できない場合
; 609  :                         ResourceHolderUINT root;

  000f2	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 610  :                         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

  000f9	53		 push	 ebx
  000fa	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000ff	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00104	83 c4 04	 add	 esp, 4
  00107	2b c8		 sub	 ecx, eax

; 611  :                         __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

  00109	8b 45 08	 mov	 eax, DWORD PTR _u_bit_count$1$[ebp]
  0010c	03 c1		 add	 eax, ecx

; 612  :                         NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  0010e	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00117	8b f0		 mov	 esi, eax

; 613  :                         (*fp_Multiply_X_2W)(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, w->BLOCK);

  00119	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0011c	ff 76 24	 push	 DWORD PTR [esi+36]
  0011f	50		 push	 eax
  00120	53		 push	 ebx
  00121	ff 77 10	 push	 DWORD PTR [edi+16]
  00124	ff 77 24	 push	 DWORD PTR [edi+36]
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_Multiply_X_2W@Internal@Core@Math@Palmtree@@3P6AXPAIIII0@ZA
  0012d	83 c4 14	 add	 esp, 20			; 00000014H
$LN26@PMC_Multip:

; 614  :                         root.CheckNumber(w);
; 615  :                         CommitNumber(w);
; 616  :                         root.UnlinkNumber(w);
; 617  :                         return (w);
; 618  :                     }
; 619  :                 }
; 620  :                 else
; 621  :                 {
; 622  :                     // _UINT64_T が 1 ワードで表現できる場合
; 623  :                     ResourceHolderUINT root;
; 624  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 625  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 626  :                     __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;
; 627  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);
; 628  :                     (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, w->BLOCK);
; 629  :                     root.CheckNumber(w);
; 630  :                     CommitNumber(w);
; 631  :                     root.UnlinkNumber(w);
; 632  :                     return (w);
; 633  :                 }
; 634  :             }
; 635  :         }
; 636  :     }

  00130	56		 push	 esi
  00131	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00134	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  0013f	83 c4 04	 add	 esp, 4
  00142	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00145	56		 push	 esi
  00146	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
  0014b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00152	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00155	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0015a	8b c6		 mov	 eax, esi
  0015c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00166	59		 pop	 ecx
  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L_Imp
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?Multiply_X_X_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
tv198 = 20						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
?Multiply_X_X_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MULX_ADCX, COMDAT

; 408  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 14	 mov	 ecx, DWORD PTR _v_count$[ebp]

; 409  :         // x のワード長が y のワード長以上であるようにする
; 410  :         if (u_count < v_count)
; 411  :         {
; 412  :             __UNIT_TYPE* t_buf = u_buf;
; 413  :             u_buf = v_buf;
; 414  :             v_buf = t_buf;
; 415  :             __UNIT_TYPE t_count = u_count;
; 416  :             u_count = v_count;
; 417  :             v_count = t_count;
; 418  :         }
; 419  :         __UNIT_TYPE* up = u_buf;

  00006	8b d1		 mov	 edx, ecx
  00008	8b 45 18	 mov	 eax, DWORD PTR _w_buf$[ebp]
  0000b	53		 push	 ebx
  0000c	8b 5d 10	 mov	 ebx, DWORD PTR _v_buf$[ebp]
  0000f	56		 push	 esi
  00010	8b 75 08	 mov	 esi, DWORD PTR _u_buf$[ebp]
  00013	57		 push	 edi
  00014	8b 7d 0c	 mov	 edi, DWORD PTR _u_count$[ebp]
  00017	3b f9		 cmp	 edi, ecx
  00019	0f 43 f3	 cmovae	 esi, ebx
  0001c	0f 43 d7	 cmovae	 edx, edi
  0001f	0f 43 5d 08	 cmovae	 ebx, DWORD PTR _u_buf$[ebp]
  00023	2b c6		 sub	 eax, esi
  00025	3b f9		 cmp	 edi, ecx
  00027	89 55 14	 mov	 DWORD PTR tv198[ebp], edx
  0002a	89 45 18	 mov	 DWORD PTR _w_buf$[ebp], eax
  0002d	0f 43 f9	 cmovae	 edi, ecx
$LL4@Multiply_X:

; 420  :         __UNIT_TYPE* vp = v_buf;
; 421  :         __UNIT_TYPE* wp = w_buf;
; 422  : 
; 423  :         do
; 424  :         {
; 425  :             Multiply_WORD_using_MULX_ADCX(up, u_count, *vp, wp);

  00030	03 c6		 add	 eax, esi
  00032	50		 push	 eax
  00033	ff 36		 push	 DWORD PTR [esi]
  00035	52		 push	 edx
  00036	53		 push	 ebx
  00037	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX

; 426  :             ++vp;
; 427  :             ++wp;
; 428  :             --v_count;
; 429  :         } while (v_count != 0);

  0003c	8b 55 14	 mov	 edx, DWORD PTR tv198[ebp]
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
  00042	8b 45 18	 mov	 eax, DWORD PTR _w_buf$[ebp]
  00045	83 c6 04	 add	 esi, 4
  00048	83 ef 01	 sub	 edi, 1
  0004b	75 e3		 jne	 SHORT $LL4@Multiply_X

; 430  :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?Multiply_X_X_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MULX_ADCX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?Multiply_X_X_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
tv198 = 20						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
?Multiply_X_X_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MUL_ADC, COMDAT

; 383  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 14	 mov	 ecx, DWORD PTR _v_count$[ebp]

; 384  :         // x のワード長が y のワード長以上であるようにする
; 385  :         if (u_count < v_count)
; 386  :         {
; 387  :             __UNIT_TYPE* t_buf = u_buf;
; 388  :             u_buf = v_buf;
; 389  :             v_buf = t_buf;
; 390  :             __UNIT_TYPE t_count = u_count;
; 391  :             u_count = v_count;
; 392  :             v_count = t_count;
; 393  :         }
; 394  :         __UNIT_TYPE* up = u_buf;

  00006	8b d1		 mov	 edx, ecx
  00008	8b 45 18	 mov	 eax, DWORD PTR _w_buf$[ebp]
  0000b	53		 push	 ebx
  0000c	8b 5d 10	 mov	 ebx, DWORD PTR _v_buf$[ebp]
  0000f	56		 push	 esi
  00010	8b 75 08	 mov	 esi, DWORD PTR _u_buf$[ebp]
  00013	57		 push	 edi
  00014	8b 7d 0c	 mov	 edi, DWORD PTR _u_count$[ebp]
  00017	3b f9		 cmp	 edi, ecx
  00019	0f 43 f3	 cmovae	 esi, ebx
  0001c	0f 43 d7	 cmovae	 edx, edi
  0001f	0f 43 5d 08	 cmovae	 ebx, DWORD PTR _u_buf$[ebp]
  00023	2b c6		 sub	 eax, esi
  00025	3b f9		 cmp	 edi, ecx
  00027	89 55 14	 mov	 DWORD PTR tv198[ebp], edx
  0002a	89 45 18	 mov	 DWORD PTR _w_buf$[ebp], eax
  0002d	0f 43 f9	 cmovae	 edi, ecx
$LL4@Multiply_X:

; 395  :         __UNIT_TYPE* vp = v_buf;
; 396  :         __UNIT_TYPE* wp = w_buf;
; 397  : 
; 398  :         do
; 399  :         {
; 400  :             Multiply_WORD_using_MUL_ADC(up, u_count, *vp, wp);

  00030	03 c6		 add	 eax, esi
  00032	50		 push	 eax
  00033	ff 36		 push	 DWORD PTR [esi]
  00035	52		 push	 edx
  00036	53		 push	 ebx
  00037	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC

; 401  :             ++vp;
; 402  :             ++wp;
; 403  :             --v_count;
; 404  :         } while (v_count != 0);

  0003c	8b 55 14	 mov	 edx, DWORD PTR tv198[ebp]
  0003f	83 c4 10	 add	 esp, 16			; 00000010H
  00042	8b 45 18	 mov	 eax, DWORD PTR _w_buf$[ebp]
  00045	83 c6 04	 add	 esi, 4
  00048	83 ef 01	 sub	 edi, 1
  0004b	75 e3		 jne	 SHORT $LL4@Multiply_X

; 405  :     }

  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?Multiply_X_X_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MUL_ADC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?Multiply_X_2W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w_buf$ = 24						; size = 4
?Multiply_X_2W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MULX_ADCX, COMDAT

; 377  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 378  :         Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_lo, &w_buf[0]);

  00004	8b 7d 18	 mov	 edi, DWORD PTR _w_buf$[ebp]
  00007	57		 push	 edi
  00008	ff 75 14	 push	 DWORD PTR _v_lo$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _u_count$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _u_buf$[ebp]
  00011	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX

; 379  :         Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_hi, &w_buf[1]);

  00016	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00019	50		 push	 eax
  0001a	ff 75 10	 push	 DWORD PTR _v_hi$[ebp]
  0001d	ff 75 0c	 push	 DWORD PTR _u_count$[ebp]
  00020	ff 75 08	 push	 DWORD PTR _u_buf$[ebp]
  00023	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX
  00028	83 c4 20	 add	 esp, 32			; 00000020H
  0002b	5f		 pop	 edi

; 380  :     }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?Multiply_X_2W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MULX_ADCX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?Multiply_X_2W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w_buf$ = 24						; size = 4
?Multiply_X_2W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MUL_ADC, COMDAT

; 371  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 372  :         Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_lo, &w_buf[0]);

  00004	8b 7d 18	 mov	 edi, DWORD PTR _w_buf$[ebp]
  00007	57		 push	 edi
  00008	ff 75 14	 push	 DWORD PTR _v_lo$[ebp]
  0000b	ff 75 0c	 push	 DWORD PTR _u_count$[ebp]
  0000e	ff 75 08	 push	 DWORD PTR _u_buf$[ebp]
  00011	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC

; 373  :         Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_hi, &w_buf[1]);

  00016	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00019	50		 push	 eax
  0001a	ff 75 10	 push	 DWORD PTR _v_hi$[ebp]
  0001d	ff 75 0c	 push	 DWORD PTR _u_count$[ebp]
  00020	ff 75 08	 push	 DWORD PTR _u_buf$[ebp]
  00023	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC
  00028	83 c4 20	 add	 esp, 32			; 00000020H
  0002b	5f		 pop	 edi

; 374  :     }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?Multiply_X_2W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MUL_ADC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?Multiply_X_1W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w_buf$ = 20						; size = 4
?Multiply_X_1W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MULX_ADCX, COMDAT

; 367  :         Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v, w_buf);

  00000	e9 00 00 00 00	 jmp	 ?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX
?Multiply_X_1W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MULX_ADCX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?Multiply_X_1W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w_buf$ = 20						; size = 4
?Multiply_X_1W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MUL_ADC, COMDAT

; 362  :         Multiply_WORD_using_MUL_ADC(u_buf, u_count, v, w_buf);

  00000	e9 00 00 00 00	 jmp	 ?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC
?Multiply_X_1W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MUL_ADC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX, COMDAT

; 215  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 216  :         __UNIT_TYPE k = 0;
; 217  :         __UNIT_TYPE count = u_count >> 5;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00009	8b c8		 mov	 ecx, eax

; 219  :         while (count != 0)

  0000b	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0000e	53		 push	 ebx
  0000f	8b 5d 08	 mov	 ebx, DWORD PTR _up$[ebp]
  00012	56		 push	 esi
  00013	c1 e9 05	 shr	 ecx, 5
  00016	57		 push	 edi
  00017	33 ff		 xor	 edi, edi
  00019	89 4d fc	 mov	 DWORD PTR _count$1$[ebp], ecx
  0001c	85 c9		 test	 ecx, ecx
  0001e	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  00021	0f 84 05 04 00
	00		 je	 $LN3@Multiply_W
$LL2@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00027	8b 03		 mov	 eax, DWORD PTR [ebx]
  00029	f7 e2		 mul	 edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0002b	03 01		 add	 eax, DWORD PTR [ecx]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0002d	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0002f	ba 00 00 00 00	 mov	 edx, 0
  00034	66 0f 38 f6 f2	 adcx	 esi, edx
  00039	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0003b	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0003d	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00042	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00045	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00048	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0004b	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0004d	ba 00 00 00 00	 mov	 edx, 0
  00052	66 0f 38 f6 fa	 adcx	 edi, edx
  00057	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00059	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0005c	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00061	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00064	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00067	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0006a	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0006c	ba 00 00 00 00	 mov	 edx, 0
  00071	66 0f 38 f6 f2	 adcx	 esi, edx
  00076	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00078	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0007b	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0007e	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00083	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00086	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00089	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0008b	ba 00 00 00 00	 mov	 edx, 0
  00090	66 0f 38 f6 fa	 adcx	 edi, edx
  00095	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00097	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0009a	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0009d	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000a2	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000a5	03 41 10	 add	 eax, DWORD PTR [ecx+16]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000a8	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000aa	ba 00 00 00 00	 mov	 edx, 0
  000af	66 0f 38 f6 f2	 adcx	 esi, edx
  000b4	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  000b6	89 41 10	 mov	 DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000b9	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000bc	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000c1	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000c4	03 41 14	 add	 eax, DWORD PTR [ecx+20]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000c7	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000c9	ba 00 00 00 00	 mov	 edx, 0
  000ce	66 0f 38 f6 fa	 adcx	 edi, edx
  000d3	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  000d5	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000d8	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000db	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000e0	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000e3	03 41 18	 add	 eax, DWORD PTR [ecx+24]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000e6	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000e8	ba 00 00 00 00	 mov	 edx, 0
  000ed	66 0f 38 f6 f2	 adcx	 esi, edx
  000f2	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  000f4	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000f7	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  000fa	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000ff	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00102	03 41 1c	 add	 eax, DWORD PTR [ecx+28]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00105	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00107	ba 00 00 00 00	 mov	 edx, 0
  0010c	66 0f 38 f6 fa	 adcx	 edi, edx
  00111	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00113	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00116	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00119	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0011e	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00121	03 41 20	 add	 eax, DWORD PTR [ecx+32]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00124	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00126	ba 00 00 00 00	 mov	 edx, 0
  0012b	66 0f 38 f6 f2	 adcx	 esi, edx
  00130	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00132	89 41 20	 mov	 DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00135	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0013a	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  0013d	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00140	03 41 24	 add	 eax, DWORD PTR [ecx+36]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00143	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00145	ba 00 00 00 00	 mov	 edx, 0
  0014a	66 0f 38 f6 fa	 adcx	 edi, edx
  0014f	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00151	89 41 24	 mov	 DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00154	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00159	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  0015c	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0015f	03 41 28	 add	 eax, DWORD PTR [ecx+40]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00162	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00164	ba 00 00 00 00	 mov	 edx, 0
  00169	66 0f 38 f6 f2	 adcx	 esi, edx
  0016e	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00170	89 41 28	 mov	 DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00173	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00178	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  0017b	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0017e	03 41 2c	 add	 eax, DWORD PTR [ecx+44]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00181	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00183	ba 00 00 00 00	 mov	 edx, 0
  00188	66 0f 38 f6 fa	 adcx	 edi, edx
  0018d	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0018f	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00192	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00195	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0019a	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0019d	03 41 30	 add	 eax, DWORD PTR [ecx+48]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001a0	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001a2	ba 00 00 00 00	 mov	 edx, 0
  001a7	66 0f 38 f6 f2	 adcx	 esi, edx
  001ac	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  001ae	89 41 30	 mov	 DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001b1	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001b4	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001b9	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001bc	03 41 34	 add	 eax, DWORD PTR [ecx+52]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001bf	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001c1	ba 00 00 00 00	 mov	 edx, 0
  001c6	66 0f 38 f6 fa	 adcx	 edi, edx
  001cb	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  001cd	89 41 34	 mov	 DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001d0	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001d3	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001d8	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001db	03 41 38	 add	 eax, DWORD PTR [ecx+56]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001de	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001e0	ba 00 00 00 00	 mov	 edx, 0
  001e5	66 0f 38 f6 f2	 adcx	 esi, edx
  001ea	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  001ec	89 41 38	 mov	 DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001ef	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001f2	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001f7	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001fa	03 41 3c	 add	 eax, DWORD PTR [ecx+60]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001fd	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  001ff	ba 00 00 00 00	 mov	 edx, 0
  00204	66 0f 38 f6 fa	 adcx	 edi, edx
  00209	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0020b	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0020e	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00211	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00216	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00219	03 41 40	 add	 eax, DWORD PTR [ecx+64]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0021c	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0021e	ba 00 00 00 00	 mov	 edx, 0
  00223	66 0f 38 f6 f2	 adcx	 esi, edx
  00228	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0022a	89 41 40	 mov	 DWORD PTR [ecx+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0022d	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00230	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00235	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00238	03 41 44	 add	 eax, DWORD PTR [ecx+68]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0023b	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0023d	ba 00 00 00 00	 mov	 edx, 0
  00242	66 0f 38 f6 fa	 adcx	 edi, edx
  00247	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00249	89 41 44	 mov	 DWORD PTR [ecx+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0024c	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00251	8b 43 48	 mov	 eax, DWORD PTR [ebx+72]
  00254	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00257	03 41 48	 add	 eax, DWORD PTR [ecx+72]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0025a	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0025c	ba 00 00 00 00	 mov	 edx, 0
  00261	66 0f 38 f6 f2	 adcx	 esi, edx
  00266	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00268	89 41 48	 mov	 DWORD PTR [ecx+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0026b	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00270	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]
  00273	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00276	03 41 4c	 add	 eax, DWORD PTR [ecx+76]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00279	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0027b	ba 00 00 00 00	 mov	 edx, 0
  00280	66 0f 38 f6 fa	 adcx	 edi, edx
  00285	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00287	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0028a	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0028f	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  00292	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00295	03 41 50	 add	 eax, DWORD PTR [ecx+80]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00298	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0029a	ba 00 00 00 00	 mov	 edx, 0
  0029f	66 0f 38 f6 f2	 adcx	 esi, edx
  002a4	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  002a6	89 41 50	 mov	 DWORD PTR [ecx+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002a9	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002ac	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002b1	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002b4	03 41 54	 add	 eax, DWORD PTR [ecx+84]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002b7	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002b9	ba 00 00 00 00	 mov	 edx, 0
  002be	66 0f 38 f6 fa	 adcx	 edi, edx
  002c3	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  002c5	89 41 54	 mov	 DWORD PTR [ecx+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002c8	8b 43 58	 mov	 eax, DWORD PTR [ebx+88]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002cb	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002d0	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002d3	03 41 58	 add	 eax, DWORD PTR [ecx+88]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002d6	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002d8	ba 00 00 00 00	 mov	 edx, 0
  002dd	66 0f 38 f6 f2	 adcx	 esi, edx
  002e2	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  002e4	89 41 58	 mov	 DWORD PTR [ecx+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002e7	8b 43 5c	 mov	 eax, DWORD PTR [ebx+92]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002ea	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002ef	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002f2	03 41 5c	 add	 eax, DWORD PTR [ecx+92]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002f5	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  002f7	ba 00 00 00 00	 mov	 edx, 0
  002fc	66 0f 38 f6 fa	 adcx	 edi, edx
  00301	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00303	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00306	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00309	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0030e	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00311	03 41 60	 add	 eax, DWORD PTR [ecx+96]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00314	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00316	ba 00 00 00 00	 mov	 edx, 0
  0031b	66 0f 38 f6 f2	 adcx	 esi, edx
  00320	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00322	89 41 60	 mov	 DWORD PTR [ecx+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00325	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00328	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0032d	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00330	03 41 64	 add	 eax, DWORD PTR [ecx+100]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00333	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00335	ba 00 00 00 00	 mov	 edx, 0
  0033a	66 0f 38 f6 fa	 adcx	 edi, edx
  0033f	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00341	89 41 64	 mov	 DWORD PTR [ecx+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00344	8b 43 68	 mov	 eax, DWORD PTR [ebx+104]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00347	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0034c	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0034f	03 41 68	 add	 eax, DWORD PTR [ecx+104]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00352	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00354	ba 00 00 00 00	 mov	 edx, 0
  00359	66 0f 38 f6 f2	 adcx	 esi, edx
  0035e	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00360	89 41 68	 mov	 DWORD PTR [ecx+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00363	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00368	8b 43 6c	 mov	 eax, DWORD PTR [ebx+108]
  0036b	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0036e	03 41 6c	 add	 eax, DWORD PTR [ecx+108]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00371	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00373	ba 00 00 00 00	 mov	 edx, 0
  00378	66 0f 38 f6 fa	 adcx	 edi, edx
  0037d	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0037f	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00382	8b 43 70	 mov	 eax, DWORD PTR [ebx+112]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00385	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0038a	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0038d	03 41 70	 add	 eax, DWORD PTR [ecx+112]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00390	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00392	ba 00 00 00 00	 mov	 edx, 0
  00397	66 0f 38 f6 f2	 adcx	 esi, edx
  0039c	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0039e	89 41 70	 mov	 DWORD PTR [ecx+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003a1	8b 43 74	 mov	 eax, DWORD PTR [ebx+116]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003a4	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003a9	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003ac	03 41 74	 add	 eax, DWORD PTR [ecx+116]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003af	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003b1	ba 00 00 00 00	 mov	 edx, 0
  003b6	66 0f 38 f6 fa	 adcx	 edi, edx
  003bb	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  003bd	89 41 74	 mov	 DWORD PTR [ecx+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003c0	8b 43 78	 mov	 eax, DWORD PTR [ebx+120]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003c3	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003c8	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003cb	03 41 78	 add	 eax, DWORD PTR [ecx+120]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003ce	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003d0	ba 00 00 00 00	 mov	 edx, 0
  003d5	66 0f 38 f6 f2	 adcx	 esi, edx
  003da	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  003dc	89 41 78	 mov	 DWORD PTR [ecx+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003df	8b 43 7c	 mov	 eax, DWORD PTR [ebx+124]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003e2	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003e7	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003ea	03 41 7c	 add	 eax, DWORD PTR [ecx+124]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003ed	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  003ef	ba 00 00 00 00	 mov	 edx, 0
  003f4	66 0f 38 f6 fa	 adcx	 edi, edx
  003f9	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  003fb	be 04 00 00 00	 mov	 esi, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00400	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00403	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00408	66 0f 38 f6 fa	 adcx	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 255  :             --count;

  0040d	8b 55 fc	 mov	 edx, DWORD PTR _count$1$[ebp]
  00410	83 eb 80	 sub	 ebx, -128		; ffffff80H
  00413	4a		 dec	 edx
  00414	83 e9 80	 sub	 ecx, -128		; ffffff80H
  00417	89 55 fc	 mov	 DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0041a	f0 0f c1 06	 lock	  xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 219  :         while (count != 0)

  0041e	85 d2		 test	 edx, edx
  00420	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00423	0f 85 fe fb ff
	ff		 jne	 $LL2@Multiply_W
  00429	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
$LN3@Multiply_W:

; 256  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 257  :             if (sizeof(k) == sizeof(_UINT32_T))
; 258  :                 AddToMULTI32Counter(32);
; 259  :             else
; 260  :                 AddToMULTI64Counter(32);
; 261  : #endif
; 262  :         }
; 263  : 
; 264  :         if (u_count & 0x10)

  0042c	a8 10		 test	 al, 16			; 00000010H
  0042e	0f 84 03 02 00
	00		 je	 $LN8@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00434	8b 03		 mov	 eax, DWORD PTR [ebx]
  00436	f7 e2		 mul	 edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00438	03 01		 add	 eax, DWORD PTR [ecx]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0043a	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0043c	ba 00 00 00 00	 mov	 edx, 0
  00441	66 0f 38 f6 f2	 adcx	 esi, edx
  00446	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00448	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0044a	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0044f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00452	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00455	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00458	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0045a	ba 00 00 00 00	 mov	 edx, 0
  0045f	66 0f 38 f6 fa	 adcx	 edi, edx
  00464	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00466	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00469	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0046e	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00471	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00474	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00477	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00479	ba 00 00 00 00	 mov	 edx, 0
  0047e	66 0f 38 f6 f2	 adcx	 esi, edx
  00483	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00485	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00488	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0048b	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00490	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00493	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00496	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00498	ba 00 00 00 00	 mov	 edx, 0
  0049d	66 0f 38 f6 fa	 adcx	 edi, edx
  004a2	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  004a4	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004a7	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004aa	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004af	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004b2	03 41 10	 add	 eax, DWORD PTR [ecx+16]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004b5	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004b7	ba 00 00 00 00	 mov	 edx, 0
  004bc	66 0f 38 f6 f2	 adcx	 esi, edx
  004c1	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  004c3	89 41 10	 mov	 DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004c6	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004c9	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004ce	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004d1	03 41 14	 add	 eax, DWORD PTR [ecx+20]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004d4	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004d6	ba 00 00 00 00	 mov	 edx, 0
  004db	66 0f 38 f6 fa	 adcx	 edi, edx
  004e0	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  004e2	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004e5	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004e8	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004ed	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004f0	03 41 18	 add	 eax, DWORD PTR [ecx+24]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004f3	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  004f5	ba 00 00 00 00	 mov	 edx, 0
  004fa	66 0f 38 f6 f2	 adcx	 esi, edx
  004ff	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00501	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00504	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00507	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0050c	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0050f	03 41 1c	 add	 eax, DWORD PTR [ecx+28]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00512	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00514	ba 00 00 00 00	 mov	 edx, 0
  00519	66 0f 38 f6 fa	 adcx	 edi, edx
  0051e	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00520	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00523	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00526	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0052b	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0052e	03 41 20	 add	 eax, DWORD PTR [ecx+32]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00531	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00533	ba 00 00 00 00	 mov	 edx, 0
  00538	66 0f 38 f6 f2	 adcx	 esi, edx
  0053d	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0053f	89 41 20	 mov	 DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00542	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00547	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  0054a	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0054d	03 41 24	 add	 eax, DWORD PTR [ecx+36]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00550	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00552	ba 00 00 00 00	 mov	 edx, 0
  00557	66 0f 38 f6 fa	 adcx	 edi, edx
  0055c	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0055e	89 41 24	 mov	 DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00561	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00566	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00569	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0056c	03 41 28	 add	 eax, DWORD PTR [ecx+40]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0056f	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00571	ba 00 00 00 00	 mov	 edx, 0
  00576	66 0f 38 f6 f2	 adcx	 esi, edx
  0057b	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0057d	89 41 28	 mov	 DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00580	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00583	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00588	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0058b	03 41 2c	 add	 eax, DWORD PTR [ecx+44]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0058e	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00590	ba 00 00 00 00	 mov	 edx, 0
  00595	66 0f 38 f6 fa	 adcx	 edi, edx
  0059a	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0059c	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0059f	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005a2	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005a7	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005aa	03 41 30	 add	 eax, DWORD PTR [ecx+48]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005ad	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005af	ba 00 00 00 00	 mov	 edx, 0
  005b4	66 0f 38 f6 f2	 adcx	 esi, edx
  005b9	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  005bb	89 41 30	 mov	 DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005be	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005c1	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005c6	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005c9	03 41 34	 add	 eax, DWORD PTR [ecx+52]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005cc	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005ce	ba 00 00 00 00	 mov	 edx, 0
  005d3	66 0f 38 f6 fa	 adcx	 edi, edx
  005d8	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  005da	89 41 34	 mov	 DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005dd	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005e0	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005e5	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005e8	03 41 38	 add	 eax, DWORD PTR [ecx+56]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005eb	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005ed	ba 00 00 00 00	 mov	 edx, 0
  005f2	66 0f 38 f6 f2	 adcx	 esi, edx
  005f7	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  005f9	89 41 38	 mov	 DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005fc	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  005ff	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00604	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00607	03 41 3c	 add	 eax, DWORD PTR [ecx+60]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0060a	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0060c	ba 00 00 00 00	 mov	 edx, 0
  00611	66 0f 38 f6 fa	 adcx	 edi, edx
  00616	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00618	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0061b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00620	66 0f 38 f6 fa	 adcx	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 282  :             up += 16;

  00625	83 c3 40	 add	 ebx, 64			; 00000040H

; 283  :             wp += 16;

  00628	83 c1 40	 add	 ecx, 64			; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0062b	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  00630	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  00634	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
$LN8@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 292  :         if (u_count & 0x8)

  00637	a8 08		 test	 al, 8
  00639	0f 84 0c 01 00
	00		 je	 $LN11@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0063f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00641	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00644	03 01		 add	 eax, DWORD PTR [ecx]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00646	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00648	ba 00 00 00 00	 mov	 edx, 0
  0064d	66 0f 38 f6 f2	 adcx	 esi, edx
  00652	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00654	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00656	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0065b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0065e	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00661	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00664	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00666	ba 00 00 00 00	 mov	 edx, 0
  0066b	66 0f 38 f6 fa	 adcx	 edi, edx
  00670	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00672	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00675	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0067a	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0067d	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00680	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00683	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00685	ba 00 00 00 00	 mov	 edx, 0
  0068a	66 0f 38 f6 f2	 adcx	 esi, edx
  0068f	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00691	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00694	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00697	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0069c	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0069f	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006a2	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006a4	ba 00 00 00 00	 mov	 edx, 0
  006a9	66 0f 38 f6 fa	 adcx	 edi, edx
  006ae	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  006b0	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006b3	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006b6	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006bb	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006be	03 41 10	 add	 eax, DWORD PTR [ecx+16]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006c1	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006c3	ba 00 00 00 00	 mov	 edx, 0
  006c8	66 0f 38 f6 f2	 adcx	 esi, edx
  006cd	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  006cf	89 41 10	 mov	 DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006d2	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006d5	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006da	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006dd	03 41 14	 add	 eax, DWORD PTR [ecx+20]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006e0	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006e2	ba 00 00 00 00	 mov	 edx, 0
  006e7	66 0f 38 f6 fa	 adcx	 edi, edx
  006ec	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  006ee	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006f1	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006f4	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006f9	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  006fc	03 41 18	 add	 eax, DWORD PTR [ecx+24]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  006ff	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00701	ba 00 00 00 00	 mov	 edx, 0
  00706	66 0f 38 f6 f2	 adcx	 esi, edx
  0070b	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0070d	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00710	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00713	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00718	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0071b	03 41 1c	 add	 eax, DWORD PTR [ecx+28]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0071e	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00720	ba 00 00 00 00	 mov	 edx, 0
  00725	66 0f 38 f6 fa	 adcx	 edi, edx
  0072a	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0072c	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0072f	b8 08 00 00 00	 mov	 eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00734	66 0f 38 f6 fa	 adcx	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 302  :             up += 8;

  00739	83 c3 20	 add	 ebx, 32			; 00000020H

; 303  :             wp += 8;

  0073c	83 c1 20	 add	 ecx, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0073f	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  00744	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  00748	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
$LN11@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 312  :         if (u_count & 0x4)

  0074b	a8 04		 test	 al, 4
  0074d	0f 84 90 00 00
	00		 je	 $LN14@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00753	8b 03		 mov	 eax, DWORD PTR [ebx]
  00755	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00758	03 01		 add	 eax, DWORD PTR [ecx]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0075a	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0075c	ba 00 00 00 00	 mov	 edx, 0
  00761	66 0f 38 f6 f2	 adcx	 esi, edx
  00766	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00768	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0076a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0076d	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00772	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00775	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00778	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0077a	ba 00 00 00 00	 mov	 edx, 0
  0077f	66 0f 38 f6 fa	 adcx	 edi, edx
  00784	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00786	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00789	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0078c	66 0f 38 f6 fa	 adcx	 edi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00791	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00794	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00797	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00799	ba 00 00 00 00	 mov	 edx, 0
  0079e	66 0f 38 f6 f2	 adcx	 esi, edx
  007a3	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  007a5	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007a8	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  007ab	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007b0	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  007b3	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007b6	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  007b8	ba 00 00 00 00	 mov	 edx, 0
  007bd	66 0f 38 f6 fa	 adcx	 edi, edx
  007c2	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  007c4	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  007c7	b8 04 00 00 00	 mov	 eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  007cc	66 0f 38 f6 fa	 adcx	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 318  :             up += 4;

  007d1	83 c3 10	 add	 ebx, 16			; 00000010H

; 319  :             wp += 4;

  007d4	83 c1 10	 add	 ecx, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  007d7	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  007dc	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  007e0	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
$LN14@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 328  :         if (u_count & 0x2)

  007e3	a8 02		 test	 al, 2
  007e5	74 52		 je	 SHORT $LN17@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007e7	8b 03		 mov	 eax, DWORD PTR [ebx]
  007e9	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  007ec	03 01		 add	 eax, DWORD PTR [ecx]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007ee	8b f2		 mov	 esi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  007f0	ba 00 00 00 00	 mov	 edx, 0
  007f5	66 0f 38 f6 f2	 adcx	 esi, edx
  007fa	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  007fc	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  007fe	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00801	66 0f 38 f6 f2	 adcx	 esi, edx

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00806	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00809	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0080c	8b fa		 mov	 edi, edx

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0080e	ba 00 00 00 00	 mov	 edx, 0
  00813	66 0f 38 f6 fa	 adcx	 edi, edx
  00818	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0081a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0081d	b8 04 00 00 00	 mov	 eax, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00822	66 0f 38 f6 fa	 adcx	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 332  :             up += 2;

  00827	83 c3 08	 add	 ebx, 8

; 333  :             wp += 2;

  0082a	83 c1 08	 add	 ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0082d	ba 02 00 00 00	 mov	 edx, 2
  00832	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  00836	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
$LN17@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 342  :         if (u_count & 0x1)

  00839	a8 01		 test	 al, 1
  0083b	74 26		 je	 SHORT $LN20@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0083d	8b 03		 mov	 eax, DWORD PTR [ebx]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0083f	be 00 00 00 00	 mov	 esi, 0

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00844	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00847	03 01		 add	 eax, DWORD PTR [ecx]
  00849	66 0f 38 f6 d6	 adcx	 edx, esi
  0084e	03 c7		 add	 eax, edi
  00850	8b fa		 mov	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  00852	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00854	66 0f 38 f6 fe	 adcx	 edi, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 346  :             wp += 1;

  00859	83 c1 04	 add	 ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  0085c	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
$LN20@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 355  :         if (k != 0)

  00863	85 ff		 test	 edi, edi
  00865	74 02		 je	 SHORT $LN21@Multiply_W

; 356  :             *wp = k;

  00867	89 39		 mov	 DWORD PTR [ecx], edi
$LN21@Multiply_W:
  00869	5f		 pop	 edi

; 357  :     }

  0086a	5e		 pop	 esi
  0086b	5b		 pop	 ebx
  0086c	8b e5		 mov	 esp, ebp
  0086e	5d		 pop	 ebp
  0086f	c3		 ret	 0
?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC, COMDAT

; 70   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 71   :         __UNIT_TYPE k = 0;
; 72   :         __UNIT_TYPE count = u_count >> 5;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00009	8b c8		 mov	 ecx, eax

; 74   :         while (count != 0)

  0000b	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0000e	53		 push	 ebx
  0000f	8b 5d 08	 mov	 ebx, DWORD PTR _up$[ebp]
  00012	56		 push	 esi
  00013	c1 e9 05	 shr	 ecx, 5
  00016	57		 push	 edi
  00017	33 ff		 xor	 edi, edi
  00019	89 4d fc	 mov	 DWORD PTR _count$1$[ebp], ecx
  0001c	85 c9		 test	 ecx, ecx
  0001e	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  00021	0f 84 e5 02 00
	00		 je	 $LN3@Multiply_W
$LL2@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00027	8b 03		 mov	 eax, DWORD PTR [ebx]
  00029	f7 e2		 mul	 edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0002b	03 01		 add	 eax, DWORD PTR [ecx]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0002d	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0002f	83 d6 00	 adc	 esi, 0
  00032	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00034	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00036	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00039	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0003c	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0003f	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00042	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00044	83 d7 00	 adc	 edi, 0
  00047	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00049	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0004c	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0004f	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00052	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00055	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00058	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0005a	83 d6 00	 adc	 esi, 0
  0005d	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0005f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00062	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00065	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00068	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0006b	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0006e	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00070	83 d7 00	 adc	 edi, 0
  00073	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00075	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00078	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0007b	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0007e	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00081	03 41 10	 add	 eax, DWORD PTR [ecx+16]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00084	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00086	83 d6 00	 adc	 esi, 0
  00089	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0008b	89 41 10	 mov	 DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0008e	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00091	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00094	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00097	03 41 14	 add	 eax, DWORD PTR [ecx+20]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0009a	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0009c	83 d7 00	 adc	 edi, 0
  0009f	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  000a1	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000a4	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000a7	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000aa	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000ad	03 41 18	 add	 eax, DWORD PTR [ecx+24]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000b0	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000b2	83 d6 00	 adc	 esi, 0
  000b5	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  000b7	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000ba	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000bd	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000c0	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000c3	03 41 1c	 add	 eax, DWORD PTR [ecx+28]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000c6	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000c8	83 d7 00	 adc	 edi, 0
  000cb	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  000cd	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000d0	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000d3	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000d6	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000d9	03 41 20	 add	 eax, DWORD PTR [ecx+32]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000dc	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000de	83 d6 00	 adc	 esi, 0
  000e1	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  000e3	89 41 20	 mov	 DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000e6	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000e9	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000ec	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000ef	03 41 24	 add	 eax, DWORD PTR [ecx+36]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000f2	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000f4	83 d7 00	 adc	 edi, 0
  000f7	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  000f9	89 41 24	 mov	 DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  000fc	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  000ff	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00102	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00105	03 41 28	 add	 eax, DWORD PTR [ecx+40]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00108	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0010a	83 d6 00	 adc	 esi, 0
  0010d	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0010f	89 41 28	 mov	 DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00112	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00115	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  00118	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0011b	03 41 2c	 add	 eax, DWORD PTR [ecx+44]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0011e	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00120	83 d7 00	 adc	 edi, 0
  00123	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00125	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00128	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0012b	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
  0012e	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00131	03 41 30	 add	 eax, DWORD PTR [ecx+48]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00134	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00136	83 d6 00	 adc	 esi, 0
  00139	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0013b	89 41 30	 mov	 DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0013e	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00141	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00144	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00147	03 41 34	 add	 eax, DWORD PTR [ecx+52]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0014a	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0014c	83 d7 00	 adc	 edi, 0
  0014f	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00151	89 41 34	 mov	 DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00154	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00157	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0015a	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0015d	03 41 38	 add	 eax, DWORD PTR [ecx+56]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00160	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00162	83 d6 00	 adc	 esi, 0
  00165	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00167	89 41 38	 mov	 DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0016a	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0016d	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00170	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00173	03 41 3c	 add	 eax, DWORD PTR [ecx+60]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00176	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00178	83 d7 00	 adc	 edi, 0
  0017b	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0017d	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00180	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00183	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00186	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00189	03 41 40	 add	 eax, DWORD PTR [ecx+64]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0018c	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0018e	83 d6 00	 adc	 esi, 0
  00191	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00193	89 41 40	 mov	 DWORD PTR [ecx+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00196	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00199	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0019c	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0019f	03 41 44	 add	 eax, DWORD PTR [ecx+68]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001a2	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001a4	83 d7 00	 adc	 edi, 0
  001a7	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  001a9	89 41 44	 mov	 DWORD PTR [ecx+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001ac	8b 43 48	 mov	 eax, DWORD PTR [ebx+72]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001af	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001b2	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001b5	03 41 48	 add	 eax, DWORD PTR [ecx+72]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001b8	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001ba	83 d6 00	 adc	 esi, 0
  001bd	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  001bf	89 41 48	 mov	 DWORD PTR [ecx+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001c2	8b 43 4c	 mov	 eax, DWORD PTR [ebx+76]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001c5	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001c8	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001cb	03 41 4c	 add	 eax, DWORD PTR [ecx+76]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001ce	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001d0	83 d7 00	 adc	 edi, 0
  001d3	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  001d5	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001d8	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001db	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001de	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001e1	03 41 50	 add	 eax, DWORD PTR [ecx+80]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001e4	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001e6	83 d6 00	 adc	 esi, 0
  001e9	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  001eb	89 41 50	 mov	 DWORD PTR [ecx+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001ee	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001f1	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  001f4	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001f7	03 41 54	 add	 eax, DWORD PTR [ecx+84]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  001fa	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  001fc	83 d7 00	 adc	 edi, 0
  001ff	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00201	89 41 54	 mov	 DWORD PTR [ecx+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00204	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00207	8b 43 58	 mov	 eax, DWORD PTR [ebx+88]
  0020a	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0020d	03 41 58	 add	 eax, DWORD PTR [ecx+88]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00210	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00212	83 d6 00	 adc	 esi, 0
  00215	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00217	89 41 58	 mov	 DWORD PTR [ecx+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0021a	8b 43 5c	 mov	 eax, DWORD PTR [ebx+92]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0021d	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00220	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00223	03 41 5c	 add	 eax, DWORD PTR [ecx+92]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00226	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00228	83 d7 00	 adc	 edi, 0
  0022b	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0022d	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00230	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00233	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00236	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00239	03 41 60	 add	 eax, DWORD PTR [ecx+96]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0023c	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0023e	83 d6 00	 adc	 esi, 0
  00241	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00243	89 41 60	 mov	 DWORD PTR [ecx+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00246	8b 43 64	 mov	 eax, DWORD PTR [ebx+100]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00249	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0024c	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0024f	03 41 64	 add	 eax, DWORD PTR [ecx+100]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00252	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00254	83 d7 00	 adc	 edi, 0
  00257	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00259	89 41 64	 mov	 DWORD PTR [ecx+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0025c	8b 43 68	 mov	 eax, DWORD PTR [ebx+104]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0025f	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00262	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00265	03 41 68	 add	 eax, DWORD PTR [ecx+104]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00268	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0026a	83 d6 00	 adc	 esi, 0
  0026d	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0026f	89 41 68	 mov	 DWORD PTR [ecx+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00272	8b 43 6c	 mov	 eax, DWORD PTR [ebx+108]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00275	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00278	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0027b	03 41 6c	 add	 eax, DWORD PTR [ecx+108]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0027e	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00280	83 d7 00	 adc	 edi, 0
  00283	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00285	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00288	8b 43 70	 mov	 eax, DWORD PTR [ebx+112]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0028b	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0028e	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00291	03 41 70	 add	 eax, DWORD PTR [ecx+112]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00294	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00296	83 d6 00	 adc	 esi, 0
  00299	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0029b	89 41 70	 mov	 DWORD PTR [ecx+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0029e	8b 43 74	 mov	 eax, DWORD PTR [ebx+116]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002a1	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002a4	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002a7	03 41 74	 add	 eax, DWORD PTR [ecx+116]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002aa	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002ac	83 d7 00	 adc	 edi, 0
  002af	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  002b1	89 41 74	 mov	 DWORD PTR [ecx+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002b4	8b 43 78	 mov	 eax, DWORD PTR [ebx+120]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002b7	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002ba	f7 65 10	 mul	 DWORD PTR _v$[ebp]
  002bd	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002bf	03 41 78	 add	 eax, DWORD PTR [ecx+120]
  002c2	83 d6 00	 adc	 esi, 0
  002c5	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  002c7	89 41 78	 mov	 DWORD PTR [ecx+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002ca	8b 43 7c	 mov	 eax, DWORD PTR [ebx+124]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002cd	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002d0	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002d3	03 41 7c	 add	 eax, DWORD PTR [ecx+124]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  002d6	8b fa		 mov	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 110  :             --count;

  002d8	8b 55 fc	 mov	 edx, DWORD PTR _count$1$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002db	83 d7 00	 adc	 edi, 0
  002de	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  002e0	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  002e3	be 04 00 00 00	 mov	 esi, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  002e8	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  002eb	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 110  :             --count;

  002f0	4a		 dec	 edx
  002f1	83 eb 80	 sub	 ebx, -128		; ffffff80H
  002f4	83 e9 80	 sub	 ecx, -128		; ffffff80H
  002f7	89 55 fc	 mov	 DWORD PTR _count$1$[ebp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  002fa	f0 0f c1 06	 lock	  xadd	 DWORD PTR [esi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 74   :         while (count != 0)

  002fe	85 d2		 test	 edx, edx
  00300	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00303	0f 85 1e fd ff
	ff		 jne	 $LL2@Multiply_W
  00309	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
$LN3@Multiply_W:

; 111  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 112  :             if (sizeof(k) == sizeof(_UINT32_T))
; 113  :                 AddToMULTI32Counter(32);
; 114  :             else
; 115  :                 AddToMULTI64Counter(32);
; 116  : #endif
; 117  :         }
; 118  : 
; 119  :         if (u_count & 0x10)

  0030c	a8 10		 test	 al, 16			; 00000010H
  0030e	0f 84 73 01 00
	00		 je	 $LN8@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00314	8b 03		 mov	 eax, DWORD PTR [ebx]
  00316	f7 e2		 mul	 edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00318	03 01		 add	 eax, DWORD PTR [ecx]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0031a	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0031c	83 d6 00	 adc	 esi, 0
  0031f	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00321	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00323	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00326	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00329	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0032c	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0032f	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00331	83 d7 00	 adc	 edi, 0
  00334	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00336	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00339	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0033c	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0033f	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00342	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00345	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00347	83 d6 00	 adc	 esi, 0
  0034a	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0034c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0034f	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00352	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00355	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00358	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0035b	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0035d	83 d7 00	 adc	 edi, 0
  00360	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00362	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00365	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00368	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0036b	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0036e	03 41 10	 add	 eax, DWORD PTR [ecx+16]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00371	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00373	83 d6 00	 adc	 esi, 0
  00376	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00378	89 41 10	 mov	 DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0037b	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0037e	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00381	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00384	03 41 14	 add	 eax, DWORD PTR [ecx+20]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00387	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00389	83 d7 00	 adc	 edi, 0
  0038c	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0038e	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00391	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00394	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00397	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0039a	03 41 18	 add	 eax, DWORD PTR [ecx+24]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0039d	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0039f	83 d6 00	 adc	 esi, 0
  003a2	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  003a4	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003a7	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003aa	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003ad	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003b0	03 41 1c	 add	 eax, DWORD PTR [ecx+28]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003b3	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003b5	83 d7 00	 adc	 edi, 0
  003b8	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  003ba	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003bd	8b 43 20	 mov	 eax, DWORD PTR [ebx+32]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003c0	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003c3	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003c6	03 41 20	 add	 eax, DWORD PTR [ecx+32]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003c9	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003cb	83 d6 00	 adc	 esi, 0
  003ce	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  003d0	89 41 20	 mov	 DWORD PTR [ecx+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003d3	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003d6	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003d9	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003dc	03 41 24	 add	 eax, DWORD PTR [ecx+36]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003df	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003e1	83 d7 00	 adc	 edi, 0
  003e4	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  003e6	89 41 24	 mov	 DWORD PTR [ecx+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003e9	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003ec	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003ef	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003f2	03 41 28	 add	 eax, DWORD PTR [ecx+40]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003f5	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  003f7	83 d6 00	 adc	 esi, 0
  003fa	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  003fc	89 41 28	 mov	 DWORD PTR [ecx+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  003ff	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00402	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00405	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00408	03 41 2c	 add	 eax, DWORD PTR [ecx+44]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0040b	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0040d	83 d7 00	 adc	 edi, 0
  00410	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00412	89 41 2c	 mov	 DWORD PTR [ecx+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00415	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00418	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0041b	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0041e	03 41 30	 add	 eax, DWORD PTR [ecx+48]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00421	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00423	83 d6 00	 adc	 esi, 0
  00426	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00428	89 41 30	 mov	 DWORD PTR [ecx+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0042b	8b 43 34	 mov	 eax, DWORD PTR [ebx+52]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0042e	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00431	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00434	03 41 34	 add	 eax, DWORD PTR [ecx+52]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00437	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00439	83 d7 00	 adc	 edi, 0
  0043c	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0043e	89 41 34	 mov	 DWORD PTR [ecx+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00441	8b 43 38	 mov	 eax, DWORD PTR [ebx+56]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00444	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00447	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0044a	03 41 38	 add	 eax, DWORD PTR [ecx+56]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0044d	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0044f	83 d6 00	 adc	 esi, 0
  00452	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00454	89 41 38	 mov	 DWORD PTR [ecx+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00457	8b 43 3c	 mov	 eax, DWORD PTR [ebx+60]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0045a	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0045d	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00460	03 41 3c	 add	 eax, DWORD PTR [ecx+60]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00463	8b fa		 mov	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00465	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0046a	83 d7 00	 adc	 edi, 0
  0046d	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0046f	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00472	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00477	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 137  :             up += 16;

  0047a	83 c3 40	 add	 ebx, 64			; 00000040H

; 138  :             wp += 16;

  0047d	83 c1 40	 add	 ecx, 64			; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00480	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  00484	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
$LN8@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 147  :         if (u_count & 0x8)

  00487	a8 08		 test	 al, 8
  00489	0f 84 c4 00 00
	00		 je	 $LN11@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0048f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00491	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00494	03 01		 add	 eax, DWORD PTR [ecx]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00496	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00498	83 d6 00	 adc	 esi, 0
  0049b	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0049d	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0049f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004a2	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004a5	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004a8	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004ab	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004ad	83 d7 00	 adc	 edi, 0
  004b0	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  004b2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004b5	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004b8	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004bb	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004be	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004c1	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004c3	83 d6 00	 adc	 esi, 0
  004c6	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  004c8	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004cb	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004ce	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004d1	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004d4	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004d7	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004d9	83 d7 00	 adc	 edi, 0
  004dc	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  004de	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004e1	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004e4	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004e7	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004ea	03 41 10	 add	 eax, DWORD PTR [ecx+16]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004ed	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004ef	83 d6 00	 adc	 esi, 0
  004f2	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  004f4	89 41 10	 mov	 DWORD PTR [ecx+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004f7	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  004fa	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  004fd	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00500	03 41 14	 add	 eax, DWORD PTR [ecx+20]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00503	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00505	83 d7 00	 adc	 edi, 0
  00508	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0050a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0050d	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00510	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00513	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00516	03 41 18	 add	 eax, DWORD PTR [ecx+24]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00519	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0051b	83 d6 00	 adc	 esi, 0
  0051e	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00520	89 41 18	 mov	 DWORD PTR [ecx+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00523	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00526	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00529	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0052c	03 41 1c	 add	 eax, DWORD PTR [ecx+28]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0052f	8b fa		 mov	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00531	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00536	83 d7 00	 adc	 edi, 0
  00539	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0053b	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0053e	b8 08 00 00 00	 mov	 eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00543	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 157  :             up += 8;

  00546	83 c3 20	 add	 ebx, 32			; 00000020H

; 158  :             wp += 8;

  00549	83 c1 20	 add	 ecx, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0054c	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  00550	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
$LN11@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 167  :         if (u_count & 0x4)

  00553	a8 04		 test	 al, 4
  00555	74 6c		 je	 SHORT $LN14@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00557	8b 03		 mov	 eax, DWORD PTR [ebx]
  00559	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0055c	03 01		 add	 eax, DWORD PTR [ecx]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0055e	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00560	83 d6 00	 adc	 esi, 0
  00563	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00565	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00567	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0056a	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0056d	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00570	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00573	8b fa		 mov	 edi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00575	83 d7 00	 adc	 edi, 0
  00578	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  0057a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0057d	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00580	83 d7 00	 adc	 edi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00583	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00586	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00589	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0058b	83 d6 00	 adc	 esi, 0
  0058e	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00590	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00593	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00596	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00599	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0059c	03 41 0c	 add	 eax, DWORD PTR [ecx+12]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0059f	8b fa		 mov	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  005a1	ba 04 00 00 00	 mov	 edx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005a6	83 d7 00	 adc	 edi, 0
  005a9	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  005ab	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  005ae	b8 04 00 00 00	 mov	 eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005b3	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 173  :             up += 4;

  005b6	83 c3 10	 add	 ebx, 16			; 00000010H

; 174  :             wp += 4;

  005b9	83 c1 10	 add	 ecx, 16			; 00000010H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  005bc	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  005c0	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
$LN14@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 183  :         if (u_count & 0x2)

  005c3	a8 02		 test	 al, 2
  005c5	74 40		 je	 SHORT $LN17@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005c7	8b 03		 mov	 eax, DWORD PTR [ebx]
  005c9	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005cc	03 01		 add	 eax, DWORD PTR [ecx]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005ce	8b f2		 mov	 esi, edx

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005d0	83 d6 00	 adc	 esi, 0
  005d3	03 c7		 add	 eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  005d5	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005d7	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005da	83 d6 00	 adc	 esi, 0

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005dd	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005e0	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  005e3	8b fa		 mov	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  005e5	ba 02 00 00 00	 mov	 edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005ea	83 d7 00	 adc	 edi, 0
  005ed	03 c6		 add	 eax, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  005ef	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  005f2	b8 04 00 00 00	 mov	 eax, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  005f7	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 187  :             up += 2;

  005fa	83 c3 08	 add	 ebx, 8

; 188  :             wp += 2;

  005fd	83 c1 08	 add	 ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00600	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  00604	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
$LN17@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 197  :         if (u_count & 0x1)

  00607	a8 01		 test	 al, 1
  00609	74 1d		 je	 SHORT $LN20@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0060b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0060d	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00610	03 01		 add	 eax, DWORD PTR [ecx]
  00612	83 d2 00	 adc	 edx, 0
  00615	03 c7		 add	 eax, edi
  00617	8b fa		 mov	 edi, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00619	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0061b	83 d7 00	 adc	 edi, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 201  :             wp += 1;

  0061e	83 c1 04	 add	 ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  00621	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
$LN20@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 210  :         if (k != 0)

  00628	85 ff		 test	 edi, edi
  0062a	74 02		 je	 SHORT $LN21@Multiply_W

; 211  :             *wp = k;

  0062c	89 39		 mov	 DWORD PTR [ecx], edi
$LN21@Multiply_W:
  0062e	5f		 pop	 edi

; 212  :     }

  0062f	5e		 pop	 esi
  00630	5b		 pop	 ebx
  00631	8b e5		 mov	 esp, ebp
  00633	5d		 pop	 ebp
  00634	c3		 ret	 0
?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z
_TEXT	SEGMENT
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z PROC ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT, COMDAT

; 58   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 0c	 mov	 eax, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 62   :         _ADDX_UNIT(_ADDX_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

  00006	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  00009	56		 push	 esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0000a	be 00 00 00 00	 mov	 esi, 0

; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00014	03 01		 add	 eax, DWORD PTR [ecx]
  00016	66 0f 38 f6 d6	 adcx	 edx, esi
  0001b	03 45 08	 add	 eax, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 64   :         *wp = t_lo;

  0001e	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00020	66 0f 38 f6 d6	 adcx	 edx, esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 66   :         return (k);

  00025	8b c2		 mov	 eax, edx
  00027	5e		 pop	 esi

; 67   :     }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ENDP ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z
_TEXT	SEGMENT
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z PROC ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT, COMDAT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 0c	 mov	 eax, DWORD PTR _up$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 50   :         _ADD_UNIT(_ADD_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

  00006	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	f7 65 10	 mul	 DWORD PTR _v$[ebp]

; 178  :             return (_addcarry_u32(carry, u, v, w));

  0000e	03 01		 add	 eax, DWORD PTR [ecx]
  00010	83 d2 00	 adc	 edx, 0
  00013	03 45 08	 add	 eax, DWORD PTR _k$[ebp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 52   :         *wp = t_lo;

  00016	89 01		 mov	 DWORD PTR [ecx], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 178  :             return (_addcarry_u32(carry, u, v, w));

  00018	83 d2 00	 adc	 edx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 54   :         return (k);

  0001b	8b c2		 mov	 eax, edx

; 55   :     }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ENDP ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_UNIT
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC					; COMDAT

; 454  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 455  :             if (x == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 456  :                 return (sizeof(x) * 8);

  0000a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H

; 480  :         }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN2@LZCNT_ALT_:

; 457  : #ifdef _M_IX86
; 458  :             DWORD pos;
; 459  : #ifdef _MSC_VER
; 460  :             _BitScanReverse(&pos, x);

  00011	0f bd c8	 bsr	 ecx, eax

; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);
; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  00014	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  00019	2b c1		 sub	 eax, ecx

; 480  :         }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __LZCNT_ALT_32
_TEXT	SEGMENT
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC					; COMDAT

; 421  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 422  :             if (x == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 423  :                 return (sizeof(x) * 8);

  0000a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H

; 433  :         }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
$LN2@LZCNT_ALT_:

; 424  :             DWORD pos;
; 425  : #ifdef _MSC_VER
; 426  :             _BitScanReverse(&pos, x);

  00011	0f bd c8	 bsr	 ecx, eax

; 427  : #elif defined(__GNUC__)
; 428  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 429  : #else
; 430  : #error unknown compiler
; 431  : #endif
; 432  :             return (sizeof(x) * 8 - 1 - pos);

  00014	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  00019	2b c1		 sub	 eax, ecx

; 433  :         }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLYX_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC					; COMDAT

; 228  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  : #ifdef _MSC_VER
; 230  : #ifdef _M_IX86
; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00006	f7 65 0c	 mul	 DWORD PTR _v$[ebp]

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR _w_hi$[ebp]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 232  : #elif defined(_M_X64)
; 233  :             return (_mulx_u64(u, v, w_hi));
; 234  : #else
; 235  : #error unknown platform
; 236  : #endif
; 237  : #elif defined(__GNUC__)
; 238  : #ifdef _M_IX86
; 239  :             _UINT32_T w_lo;
; 240  :             __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 241  :             return (w_lo);
; 242  : #elif defined(_M_X64)
; 243  :             _UINT64_T w_lo;
; 244  :             __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 245  :             return (w_lo);
; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  : #else
; 250  : #error unknown compiler
; 251  : #endif
; 252  :         }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __MULTIPLY_UNIT
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC					; COMDAT

; 209  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 210  : #ifdef _M_IX86
; 211  : #ifdef _MSC_VER
; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  00003	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00006	f7 65 0c	 mul	 DWORD PTR _v$[ebp]

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  00009	8b 4d 10	 mov	 ecx, DWORD PTR _w_hi$[ebp]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 213  : #elif defined(__GNUC__)
; 214  :             _UINT32_T w_lo;
; 215  :             __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 216  :             return (w_lo);
; 217  : #else
; 218  : #error unknown compiler
; 219  : #endif
; 220  : #elif defined(_M_X64)
; 221  :             return (_umul128(u, v, w_hi));
; 222  : #else
; 223  : #error unknown platform
; 224  : #endif
; 225  :         }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADDX_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC					; COMDAT

; 187  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));

  00003	8a 45 08	 mov	 al, BYTE PTR _carry$[ebp]
  00006	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp]
  0000e	66 0f 38 f6 4d
	10		 adcx	 ecx, DWORD PTR _v$[ebp]
  00014	0f 92 c0	 setb	 al
  00017	89 0a		 mov	 DWORD PTR [edx], ecx

; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));
; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ADD_UNIT
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC						; COMDAT

; 176  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));

  00003	8a 45 08	 mov	 al, BYTE PTR _carry$[ebp]
  00006	8b 55 14	 mov	 edx, DWORD PTR _w$[ebp]
  00009	04 ff		 add	 al, 255			; 000000ffH
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp]
  0000e	13 4d 10	 adc	 ecx, DWORD PTR _v$[ebp]
  00011	0f 92 c0	 setb	 al
  00014	89 0a		 mov	 DWORD PTR [edx], ecx

; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));
; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FROMDWORDTOWORD
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC					; COMDAT

; 145  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  00003	8b 45 10	 mov	 eax, DWORD PTR _result_high$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 147  :             return ((_UINT32_T)value);

  0000b	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 148  :         }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI64Counter, COMDAT

; 344  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  00003	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A ; Palmtree::Math::Core::Internal::statistics_info
  0000b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 346  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI32Counter, COMDAT

; 338  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00003	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00006	b9 04 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  0000b	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 340  :     }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter, COMDAT

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  00000	f0 ff 05 00 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A

; 323  :     }

  00007	c3		 ret	 0
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter, COMDAT

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  00000	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4

; 317  :     }

  00007	c3		 ret	 0
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
_TEXT	SEGMENT
_root$ = -52						; size = 16
$T2 = -36						; size = 24
_root$3 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X, COMDAT

; 744  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 745  :         if (u == nullptr)

  00028	8b 5d 08	 mov	 ebx, DWORD PTR _u$[ebp]
  0002b	85 db		 test	 ebx, ebx
  0002d	0f 84 02 01 00
	00		 je	 $LN24@PMC_Multip

; 747  :         if (v == nullptr)

  00033	8b 7d 0c	 mov	 edi, DWORD PTR _v$[ebp]
  00036	85 ff		 test	 edi, edi
  00038	75 0a		 jne	 SHORT $LN3@PMC_Multip

; 748  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_13JAOPNPKD@?$AAv@
  0003f	e9 f6 00 00 00	 jmp	 $LN22@PMC_Multip
$LN3@PMC_Multip:

; 749  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 750  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 751  :         CheckNumber(nu);

  00044	53		 push	 ebx
  00045	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 752  :         CheckNumber(nv);

  0004a	57		 push	 edi
  0004b	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00050	83 c4 08	 add	 esp, 8

; 753  :         ResourceHolderUINT root;

  00053	8d 4d cc	 lea	 ecx, DWORD PTR _root$[ebp]
  00056	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 680  :         if (u->IS_ZERO)

  00062	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00065	a8 01		 test	 al, 1
  00067	74 0a		 je	 SHORT $LN7@PMC_Multip
$LN21@PMC_Multip:

; 754  :         NUMBER_HEADER* w = PMC_Multiply_X_X_Imp(nu, nv);
; 755  :         root.HookNumber(w);

  00069	be 00 00 00 00	 mov	 esi, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0006e	e9 8b 00 00 00	 jmp	 $LN16@PMC_Multip
$LN7@PMC_Multip:

; 687  :         else if (u->IS_ONE)

  00073	a8 02		 test	 al, 2
  00075	74 13		 je	 SHORT $LN9@PMC_Multip

; 688  :         {
; 689  :             // u が 1 である場合
; 690  :             if (v->IS_ZERO)

  00077	f6 47 04 01	 test	 BYTE PTR [edi+4], 1
  0007b	75 ec		 jne	 SHORT $LN21@PMC_Multip

; 691  :             {
; 692  :                 // v が 0 である場合
; 693  : 
; 694  :                 //  0  を返す。
; 695  :                 return (&number_zero);
; 696  :             }
; 697  :             else
; 698  :             {
; 699  :                 // v が 0 ではない場合
; 700  : 
; 701  :                 // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 702  :                 return (DuplicateNumber(v));

  0007d	57		 push	 edi
  0007e	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00083	83 c4 04	 add	 esp, 4
  00086	8b f0		 mov	 esi, eax
  00088	eb 74		 jmp	 SHORT $LN16@PMC_Multip
$LN9@PMC_Multip:

; 703  :             }
; 704  :         }
; 705  :         else
; 706  :         {
; 707  :             // u が 0 と 1 のどちらでもない場合
; 708  : 
; 709  :             if (v->IS_ZERO)

  0008a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0008d	a8 01		 test	 al, 1
  0008f	75 d8		 jne	 SHORT $LN21@PMC_Multip

; 710  :             {
; 711  :                 // v が 0 である場合
; 712  : 
; 713  :                 //  0  を返す。
; 714  :                 return (&number_zero);
; 715  :             }
; 716  :             else if (v->IS_ONE)

  00091	a8 02		 test	 al, 2
  00093	74 0d		 je	 SHORT $LN15@PMC_Multip

; 717  :             {
; 718  :                 // v が 1 である場合
; 719  : 
; 720  :                 // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 721  :                 return (DuplicateNumber(u));

  00095	53		 push	 ebx
  00096	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0009b	83 c4 04	 add	 esp, 4
  0009e	8b f0		 mov	 esi, eax
  000a0	eb 5c		 jmp	 SHORT $LN16@PMC_Multip
$LN15@PMC_Multip:

; 722  :             }
; 723  :             else
; 724  :             {
; 725  :                 // u と v がともに 0 、1 のどちらでもない場合
; 726  : 
; 727  :                 // u と v の積を計算する
; 728  :                 ResourceHolderUINT root;

  000a2	8d 4d e4	 lea	 ecx, DWORD PTR _root$3[ebp]
  000a5	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000aa	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 729  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;
; 730  :                 __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;
; 731  :                 __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;
; 732  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000ae	8d 4d e4	 lea	 ecx, DWORD PTR _root$3[ebp]
  000b1	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  000b4	03 43 14	 add	 eax, DWORD PTR [ebx+20]
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000bd	8b f0		 mov	 esi, eax

; 733  :                 (*fp_Multiply_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, w->BLOCK);

  000bf	ff 76 24	 push	 DWORD PTR [esi+36]
  000c2	ff 77 10	 push	 DWORD PTR [edi+16]
  000c5	ff 77 24	 push	 DWORD PTR [edi+36]
  000c8	ff 73 10	 push	 DWORD PTR [ebx+16]
  000cb	ff 73 24	 push	 DWORD PTR [ebx+36]
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_Multiply_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I0@ZA
  000d4	83 c4 14	 add	 esp, 20			; 00000014H

; 734  :                 root.CheckNumber(w);

  000d7	8d 4d e4	 lea	 ecx, DWORD PTR _root$3[ebp]
  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 735  :                 CommitNumber(w);

  000e0	56		 push	 esi
  000e1	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  000e6	83 c4 04	 add	 esp, 4

; 736  :                 root.UnlinkNumber(w);

  000e9	8d 4d e4	 lea	 ecx, DWORD PTR _root$3[ebp]
  000ec	56		 push	 esi
  000ed	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 737  :                 return (w);

  000f2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000f6	8d 4d e4	 lea	 ecx, DWORD PTR _root$3[ebp]
  000f9	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
$LN16@PMC_Multip:

; 754  :         NUMBER_HEADER* w = PMC_Multiply_X_X_Imp(nu, nv);
; 755  :         root.HookNumber(w);

  000fe	56		 push	 esi
  000ff	8d 4d cc	 lea	 ecx, DWORD PTR _root$[ebp]
  00102	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 756  : #ifdef _DEBUG
; 757  :         CheckNumber(w);
; 758  : #endif
; 759  :         root.UnlinkNumber(w);

  00107	56		 push	 esi
  00108	8d 4d cc	 lea	 ecx, DWORD PTR _root$[ebp]
  0010b	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 760  :         return ((PMC_HANDLE_UINT)w);

  00110	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00117	8d 4d cc	 lea	 ecx, DWORD PTR _root$[ebp]
  0011a	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0011f	8b c6		 mov	 eax, esi

; 761  :     }

  00121	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00124	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012b	59		 pop	 ecx
  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 08 00	 ret	 8
$LN24@PMC_Multip:

; 746  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00135	68 00 00 00 00	 push	 OFFSET ??_C@_13ICFKHAEN@?$AAu@
$LN22@PMC_Multip:

; 761  :     }

  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  0013f	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00142	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00147	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0014c	8d 45 dc	 lea	 eax, DWORD PTR $T2[ebp]
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN20@PMC_Multip:
  00155	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR _root$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L, COMDAT

; 659  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 660  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 661  :         {
; 662  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 663  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_multiply.cpp;PMC_Multiply_X_L;1");
; 664  :         }
; 665  :         if (u == nullptr)

  00026	8b 75 08	 mov	 esi, DWORD PTR _u$[ebp]
  00029	85 f6		 test	 esi, esi
  0002b	74 5e		 je	 SHORT $LN9@PMC_Multip

; 667  :         CheckNumber((NUMBER_HEADER*)u);

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00033	83 c4 04	 add	 esp, 4

; 668  :         ResourceHolderUINT root;

  00036	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00039	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 669  :         NUMBER_HEADER* w = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)u, v);

  00045	ff 75 10	 push	 DWORD PTR _v$[ebp+4]
  00048	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 ?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L_Imp
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 670  :         root.HookNumber(w);

  00054	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00057	8b f0		 mov	 esi, eax
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 671  : #ifdef _DEBUG
; 672  :         CheckNumber(w);
; 673  : #endif
; 674  :         root.UnlinkNumber(w);

  0005f	56		 push	 esi
  00060	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00063	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 675  :         return ((PMC_HANDLE_UINT)w);

  00068	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006f	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00072	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00077	8b c6		 mov	 eax, esi

; 676  :     }

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5e		 pop	 esi
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
$LN9@PMC_Multip:

; 666  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_13ICFKHAEN@?$AAu@
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00095	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00098	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009d	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a2	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@PMC_Multip:
  000ab	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I, COMDAT

; 517  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 518  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 519  :         {
; 520  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 521  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_multiply.cpp;PMC_Multiply_I_X;1");
; 522  :         }
; 523  :         if (u == nullptr)

  00026	8b 75 08	 mov	 esi, DWORD PTR _u$[ebp]
  00029	85 f6		 test	 esi, esi
  0002b	74 5b		 je	 SHORT $LN9@PMC_Multip

; 525  :         CheckNumber((NUMBER_HEADER*)u);

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00033	83 c4 04	 add	 esp, 4

; 526  :         ResourceHolderUINT root;

  00036	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00039	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 527  :         NUMBER_HEADER* w = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)u, v);

  00045	ff 75 0c	 push	 DWORD PTR _v$[ebp]
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 ?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
  0004e	83 c4 08	 add	 esp, 8

; 528  :         root.HookNumber(w);

  00051	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00054	8b f0		 mov	 esi, eax
  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 529  : #ifdef _DEBUG
; 530  :         CheckNumber(w);
; 531  : #endif
; 532  :         root.UnlinkNumber(w);

  0005c	56		 push	 esi
  0005d	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00060	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 533  :         return ((PMC_HANDLE_UINT)w);

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0006f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00074	8b c6		 mov	 eax, esi

; 534  :     }

  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5e		 pop	 esi
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN9@PMC_Multip:

; 524  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00088	68 00 00 00 00	 push	 OFFSET ??_C@_13ICFKHAEN@?$AAu@
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00092	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00095	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009a	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0009f	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@PMC_Multip:
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 8
_v$ = 16						; size = 4
?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_L_X, COMDAT

; 639  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 640  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 641  :         {
; 642  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 643  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_multiply.cpp;PMC_Multiply_L_X;1");
; 644  :         }
; 645  :         if (v == nullptr)

  00026	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00029	85 f6		 test	 esi, esi
  0002b	74 5e		 je	 SHORT $LN9@PMC_Multip

; 647  :         CheckNumber((NUMBER_HEADER*)v);

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00033	83 c4 04	 add	 esp, 4

; 648  :         ResourceHolderUINT root;

  00036	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00039	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 649  :         NUMBER_HEADER* w = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)v, u);

  00045	ff 75 0c	 push	 DWORD PTR _u$[ebp+4]
  00048	ff 75 08	 push	 DWORD PTR _u$[ebp]
  0004b	56		 push	 esi
  0004c	e8 00 00 00 00	 call	 ?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L_Imp
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 650  :         root.HookNumber(w);

  00054	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00057	8b f0		 mov	 esi, eax
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 651  : #ifdef _DEBUG
; 652  :         CheckNumber(w);
; 653  : #endif
; 654  :         root.UnlinkNumber(w);

  0005f	56		 push	 esi
  00060	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00063	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 655  :         return ((PMC_HANDLE_UINT)w);

  00068	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006f	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00072	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00077	8b c6		 mov	 eax, esi

; 656  :     }

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5e		 pop	 esi
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 0c 00	 ret	 12			; 0000000cH
$LN9@PMC_Multip:

; 646  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_13JAOPNPKD@?$AAv@
  00090	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00095	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00098	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009d	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a2	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@PMC_Multip:
  000ab	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_L_X
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 24
_root$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_I_X, COMDAT

; 497  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 498  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 499  :         {
; 500  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 501  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_multiply.cpp;PMC_Multiply_I_X;1");
; 502  :         }
; 503  :         if (v == nullptr)

  00026	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00029	85 f6		 test	 esi, esi
  0002b	74 5b		 je	 SHORT $LN9@PMC_Multip

; 505  :         CheckNumber((NUMBER_HEADER*)v);

  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00033	83 c4 04	 add	 esp, 4

; 506  :         ResourceHolderUINT root;

  00036	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00039	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 507  :         NUMBER_HEADER* w = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)v, u);

  00045	ff 75 08	 push	 DWORD PTR _u$[ebp]
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 ?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
  0004e	83 c4 08	 add	 esp, 8

; 508  :         root.HookNumber(w);

  00051	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00054	8b f0		 mov	 esi, eax
  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 509  : #ifdef _DEBUG
; 510  :         CheckNumber(w);
; 511  : #endif
; 512  :         root.UnlinkNumber(w);

  0005c	56		 push	 esi
  0005d	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00060	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 513  :         return ((PMC_HANDLE_UINT)w);

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  0006f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00074	8b c6		 mov	 eax, esi

; 514  :     }

  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5e		 pop	 esi
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN9@PMC_Multip:

; 504  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00088	68 00 00 00 00	 push	 OFFSET ??_C@_13JAOPNPKD@?$AAv@
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00092	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00095	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009a	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0009f	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@PMC_Multip:
  000a8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_I_X
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?Initialize_Multiply@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_Multiply@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Multiply, COMDAT

; 764  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _feature$[ebp]

; 765  :         if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 766  :         {
; 767  :             fp_Multiply_X_1W = Multiply_X_1W_using_MULX_ADCX;
; 768  :             fp_Multiply_X_2W = Multiply_X_2W_using_MULX_ADCX;
; 769  :             fp_Multiply_X_X = Multiply_X_X_using_MULX_ADCX;
; 770  :         }
; 771  :         else
; 772  :         {
; 773  :             fp_Multiply_X_1W = Multiply_X_1W_using_MUL_ADC;
; 774  :             fp_Multiply_X_2W = Multiply_X_2W_using_MUL_ADC;
; 775  :             fp_Multiply_X_X = Multiply_X_X_using_MUL_ADC;
; 776  :         }
; 777  :         return (PMC_STATUS_OK);

  00006	ba 00 00 00 00	 mov	 edx, OFFSET ?Multiply_X_1W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MUL_ADC
  0000b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000d	b8 00 00 00 00	 mov	 eax, OFFSET ?Multiply_X_1W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MULX_ADCX
  00012	83 e1 0a	 and	 ecx, 10			; 0000000aH
  00015	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00018	0f 45 c2	 cmovne	 eax, edx
  0001b	ba 00 00 00 00	 mov	 edx, OFFSET ?Multiply_X_2W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MUL_ADC
  00020	a3 00 00 00 00	 mov	 DWORD PTR ?fp_Multiply_X_1W@Internal@Core@Math@Palmtree@@3P6AXPAIII0@ZA, eax
  00025	b8 00 00 00 00	 mov	 eax, OFFSET ?Multiply_X_2W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MULX_ADCX
  0002a	0f 45 c2	 cmovne	 eax, edx
  0002d	ba 00 00 00 00	 mov	 edx, OFFSET ?Multiply_X_X_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MUL_ADC
  00032	a3 00 00 00 00	 mov	 DWORD PTR ?fp_Multiply_X_2W@Internal@Core@Math@Palmtree@@3P6AXPAIIII0@ZA, eax
  00037	b8 00 00 00 00	 mov	 eax, OFFSET ?Multiply_X_X_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MULX_ADCX
  0003c	0f 45 c2	 cmovne	 eax, edx
  0003f	a3 00 00 00 00	 mov	 DWORD PTR ?fp_Multiply_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I0@ZA, eax
  00044	33 c0		 xor	 eax, eax

; 778  :     }

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?Initialize_Multiply@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Multiply
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
_TEXT	SEGMENT
_root$2 = -28						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp, COMDAT

; 433  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 434  :         if (u->IS_ZERO)

  00028	8b 7d 08	 mov	 edi, DWORD PTR _u$[ebp]
  0002b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002e	a8 01		 test	 al, 1
  00030	74 17		 je	 SHORT $LN2@PMC_Multip
$LN18@PMC_Multip:

; 492  :             }
; 493  :         }
; 494  :     }

  00032	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN2@PMC_Multip:

; 435  :         {
; 436  :             // u が 0 である場合
; 437  : 
; 438  :             // v の値にかかわらず 0 を返す。
; 439  :             return (&number_zero);
; 440  :         }
; 441  :         else if (u->IS_ONE)

  00049	a8 02		 test	 al, 2
  0004b	74 22		 je	 SHORT $LN4@PMC_Multip

; 442  :         {
; 443  :             // u が 1 である場合
; 444  :             if (v == 0)

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00050	85 c0		 test	 eax, eax
  00052	74 de		 je	 SHORT $LN18@PMC_Multip

; 445  :             {
; 446  :                 // v が 0 である場合
; 447  : 
; 448  :                 //  0  を返す。
; 449  :                 return (&number_zero);
; 450  :             }
; 451  :             else
; 452  :             {
; 453  :                 // y が 0 ではない場合
; 454  : 
; 455  :                 // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 456  :                 return (From_I_Imp(v));

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z ; Palmtree::Math::Core::Internal::From_I_Imp
  0005a	83 c4 04	 add	 esp, 4

; 492  :             }
; 493  :         }
; 494  :     }

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN4@PMC_Multip:

; 457  :             }
; 458  :         }
; 459  :         else
; 460  :         {
; 461  :             // u が 0 と 1 のどちらでもない場合
; 462  : 
; 463  :             if (v == 0)

  0006f	8b 5d 0c	 mov	 ebx, DWORD PTR _v$[ebp]
  00072	85 db		 test	 ebx, ebx
  00074	74 bc		 je	 SHORT $LN18@PMC_Multip

; 464  :             {
; 465  :                 // v が 0 である場合
; 466  : 
; 467  :                 //  0  を返す。
; 468  :                 return (&number_zero);
; 469  :             }
; 470  :             else if (v == 1)

  00076	83 fb 01	 cmp	 ebx, 1
  00079	75 1b		 jne	 SHORT $LN10@PMC_Multip

; 471  :             {
; 472  :                 // v が 1 である場合
; 473  : 
; 474  :                 // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 475  :                 return (DuplicateNumber(u));

  0007b	57		 push	 edi
  0007c	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00081	83 c4 04	 add	 esp, 4

; 492  :             }
; 493  :         }
; 494  :     }

  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
$LN10@PMC_Multip:

; 476  :             }
; 477  :             else
; 478  :             {
; 479  :                 // u と v がともに 0 、1 のどちらでもない場合
; 480  : 
; 481  :                 // u と v の積を計算する
; 482  :                 ResourceHolderUINT root;

  00096	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00099	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0009e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 432  :             return (sizeof(x) * 8 - 1 - pos);

  000a5	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  000aa	0f bd c3	 bsr	 eax, ebx
  000ad	2b c8		 sub	 ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp

; 484  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

  000af	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000b4	2b c1		 sub	 eax, ecx

; 485  :                 __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;
; 486  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000b6	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000b9	03 47 14	 add	 eax, DWORD PTR [edi+20]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000c2	8b f0		 mov	 esi, eax

; 487  :                 (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, v, w->BLOCK);

  000c4	ff 76 24	 push	 DWORD PTR [esi+36]
  000c7	53		 push	 ebx
  000c8	ff 77 10	 push	 DWORD PTR [edi+16]
  000cb	ff 77 24	 push	 DWORD PTR [edi+36]
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR ?fp_Multiply_X_1W@Internal@Core@Math@Palmtree@@3P6AXPAIII0@ZA
  000d4	83 c4 10	 add	 esp, 16			; 00000010H

; 488  :                 root.CheckNumber(w);

  000d7	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 489  :                 CommitNumber(w);

  000e0	56		 push	 esi
  000e1	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  000e6	83 c4 04	 add	 esp, 4

; 490  :                 root.UnlinkNumber(w);

  000e9	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000ec	56		 push	 esi
  000ed	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 491  :                 return (w);

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  000fc	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00101	8b c6		 mov	 eax, esi

; 492  :             }
; 493  :         }
; 494  :     }

  00103	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00106	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010d	59		 pop	 ecx
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _root$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
;	COMDAT ?Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w$ = 24						; size = 4
?Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_X_Imp, COMDAT

; 42   :         (*fp_Multiply_X_X)(u, u_count, v, v_count, w);

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?fp_Multiply_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I0@ZA
?Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_X_Imp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 295  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 296  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 296  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 296  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	c7 41 0c 00 ff
	ff ff		 mov	 DWORD PTR [ecx+12], -256 ; ffffff00H
  00051	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)
; 120  :         {
; 121  :         }
; 122  : 
; 123  :         virtual ~ArgumentNullException() noexcept(true)
; 124  :         {
; 125  :         }
; 126  :     };
; 127  : 
; 128  :     class ArgumentOutOfRangeException
; 129  :         : public Exception
; 130  :     {
; 131  :     public:
; 132  :         ArgumentOutOfRangeException(const wchar_t* message) noexcept(true)
; 133  :             : Exception(PMC_STATUS_ARGUMENT_OUT_OF_RANGE_ERROR, message)
; 134  :         {
; 135  :         }
; 136  : 
; 137  :         ArgumentOutOfRangeException(const ArgumentOutOfRangeException& p) noexcept(true)
; 138  :             : Exception(p)
; 139  :         {
; 140  :         }
; 141  : 
; 142  :         virtual ~ArgumentOutOfRangeException() noexcept(true)
; 143  :         {
; 144  :         }
; 145  :     };
; 146  : 
; 147  :     class OverflowException
; 148  :         : public Exception
; 149  :     {
; 150  :     public:
; 151  :         OverflowException(const wchar_t* message) noexcept(true)
; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)
; 153  :         {
; 154  :         }
; 155  : 
; 156  :         OverflowException(const OverflowException& p) noexcept(true)
; 157  :             : Exception(p)
; 158  :         {
; 159  :         }
; 160  : 
; 161  :         virtual ~OverflowException() noexcept(true)
; 162  :         {
; 163  :         }
; 164  :     };
; 165  : 
; 166  :     class DivisionByZeroException
; 167  :         : public Exception
; 168  :     {
; 169  :     public:
; 170  :         DivisionByZeroException(const wchar_t* message) noexcept(true)
; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)
; 172  :         {
; 173  :         }
; 174  : 
; 175  :         DivisionByZeroException(const DivisionByZeroException& p) noexcept(true)
; 176  :             : Exception(p)
; 177  :         {
; 178  :         }
; 179  : 
; 180  :         virtual ~DivisionByZeroException() noexcept(true)
; 181  :         {
; 182  :         }
; 183  :     };
; 184  : 
; 185  :     class ArithmeticException
; 186  :         : public Exception
; 187  :     {
; 188  :     public:
; 189  :         ArithmeticException(const wchar_t* message) noexcept(true)
; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)
; 191  :         {
; 192  :         }
; 193  : 
; 194  :         ArithmeticException(const OverflowException& p) noexcept(true)
; 195  :             : Exception(p)
; 196  :         {
; 197  :         }
; 198  : 
; 199  :         virtual ~ArithmeticException() noexcept(true)
; 200  :         {
; 201  :         }
; 202  :     };
; 203  : 
; 204  :     class FormatException
; 205  :         : public Exception
; 206  :     {
; 207  :     public:
; 208  :         FormatException(const wchar_t* message) noexcept(true)
; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)
; 210  :         {
; 211  :         }
; 212  : 
; 213  :         FormatException(const FormatException& p) noexcept(true)
; 214  :             : Exception(p)
; 215  :         {
; 216  :         }
; 217  : 
; 218  :         virtual ~FormatException() noexcept(true)
; 219  :         {
; 220  :         }
; 221  :     };
; 222  : 
; 223  :     class InsufficientBufferException
; 224  :         : public Exception
; 225  :     {
; 226  :     public:
; 227  :         InsufficientBufferException(const wchar_t* message)
; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)
; 229  :         {
; 230  :         }
; 231  : 
; 232  :         InsufficientBufferException(const InsufficientBufferException& p) noexcept(true)
; 233  :             : Exception(p)
; 234  :         {
; 235  :         }
; 236  : 
; 237  :         virtual ~InsufficientBufferException() noexcept(true)
; 238  :         {
; 239  :         }
; 240  :     };
; 241  : 
; 242  :     class NotEnoughMemoryException
; 243  :         : public Exception
; 244  :     {
; 245  :     public:
; 246  :         NotEnoughMemoryException(const wchar_t* message) noexcept(true)
; 247  :             : Exception(PMC_STATUS_NOT_ENOUGH_MEMORY, message)
; 248  :         {
; 249  :         }
; 250  : 
; 251  :         NotEnoughMemoryException(const NotEnoughMemoryException& p) noexcept(true)
; 252  :             : Exception(p)
; 253  :         {
; 254  :         }
; 255  : 
; 256  :         virtual ~NotEnoughMemoryException() noexcept(true)
; 257  :         {
; 258  :         }
; 259  :     };
; 260  : 
; 261  :     class NotSupportedException
; 262  :         : public Exception
; 263  :     {
; 264  :     public:
; 265  :         NotSupportedException(const wchar_t* message) noexcept(true)
; 266  :             : Exception(PMC_STATUS_NOT_SUPPORTED, message)
; 267  :         {
; 268  :         }
; 269  : 
; 270  :         NotSupportedException(const NotSupportedException& p) noexcept(true)
; 271  :             : Exception(p)
; 272  :         {
; 273  :         }
; 274  : 
; 275  :         virtual ~NotSupportedException() noexcept(true)
; 276  :         {
; 277  :         }
; 278  :     };
; 279  : 
; 280  :     class InternalErrorException
; 281  :         : public Exception
; 282  :     {
; 283  :     public:
; 284  :         InternalErrorException(const wchar_t* message, const wchar_t* data) noexcept(true)
; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 286  :         {

  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b c1		 mov	 eax, ecx
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 124  :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 125  :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0003c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00043	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00046	50		 push	 eax
  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0004d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00052	83 c4 04	 add	 esp, 4
  00055	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00059	74 0b		 je	 SHORT $LN12@scalar
  0005b	6a 18		 push	 24			; 00000018H
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00066	8b c6		 mov	 eax, esi
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 125  :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1

; 70   :         {

  00033	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  00039	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00040	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00043	50		 push	 eax
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0004a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004f	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 125  :         }

  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)
; 115  :         {
; 116  :         }
; 117  : 
; 118  :         ArgumentNullException(const ArgumentNullException& p) noexcept(true)
; 119  :             : Exception(p)

  00058	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 120  :         {

  0005f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	8b c2		 mov	 eax, edx
  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;
; 57   :             _message = message;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003e	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  00044	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0004a	c7 41 0c fe ff
	ff ff		 mov	 DWORD PTR [ecx+12], -2	; fffffffeH
  00051	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }
; 60   : 
; 61   :     public:
; 62   :         Exception(const Exception& p) noexcept(true)
; 63   :         {
; 64   :             _code = p._code;
; 65   :             _message = p._message;
; 66   :             _data = p._data;
; 67   :         }
; 68   : 
; 69   :         virtual ~Exception() noexcept(true)
; 70   :         {
; 71   :         }
; 72   : 
; 73   :         PMC_STATUS_CODE GetStatusCode() const noexcept(true)
; 74   :         {
; 75   :             return (_code);
; 76   :         }
; 77   : 
; 78   :         wchar_t const* What() const noexcept(true)
; 79   :         {
; 80   :             return (_message);
; 81   :         }
; 82   : 
; 83   :         wchar_t const* Data() const noexcept(true)
; 84   :         {
; 85   :             return (_data);
; 86   :         }
; 87   : 
; 88   :     };
; 89   : 
; 90   :     class ArgumentException
; 91   :         : public Exception
; 92   :     {
; 93   :     public:
; 94   :         ArgumentException(const wchar_t* message) noexcept(true)
; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)
; 96   :         {
; 97   :         }
; 98   : 
; 99   :         ArgumentException(const ArgumentException& p) noexcept(true)
; 100  :             : Exception(p)
; 101  :         {
; 102  :         }
; 103  : 
; 104  :         virtual ~ArgumentException() noexcept(true)
; 105  :         {
; 106  :         }
; 107  :     };
; 108  : 
; 109  :     class ArgumentNullException
; 110  :         : public Exception
; 111  :     {
; 112  :     public:
; 113  :         ArgumentNullException(const wchar_t* message, const wchar_t* param_name) noexcept(true)
; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00054	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 115  :         {

  0005b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	8b c1		 mov	 eax, ecx
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 70   :         {

  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0002f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00036	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00039	50		 push	 eax
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00040	e8 00 00 00 00	 call	 ___std_exception_destroy
  00045	83 c4 04	 add	 esp, 4
  00048	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0004c	74 0b		 je	 SHORT $LN9@scalar
  0004e	6a 18		 push	 24			; 00000018H
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00059	8b c6		 mov	 eax, esi
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5e		 pop	 esi
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 71   :         }

  0002c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 86   :         __std_exception_destroy(&_Data);

  00033	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00036	50		 push	 eax
  00037	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0003d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00042	83 c4 04	 add	 esp, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 71   :         }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b d1		 mov	 edx, ecx
  00025	89 55 f0	 mov	 DWORD PTR _this$[ebp], edx
  00028	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  0002b	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7exception@std@@6B@
  00031	66 0f d6 42 04	 movq	 QWORD PTR [edx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 63   :         {
; 64   :             _code = p._code;

  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00040	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00046	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00049	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 65   :             _message = p._message;

  0004c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0004f	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 66   :             _data = p._data;

  00052	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00055	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 67   :         }

  00058	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005f	8b c2		 mov	 eax, edx
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 55   :         {
; 56   :             _code = code;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0003e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 57   :             _message = message;

  00041	8b 45 0c	 mov	 eax, DWORD PTR _message$[ebp]
  00044	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 58   :             _data = data;

  00047	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  0004a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00050	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 59   :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b c1		 mov	 eax, ecx
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_Gexception@std@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00025	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ___std_exception_destroy
  00034	83 c4 04	 add	 esp, 4
  00037	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003b	74 0b		 je	 SHORT $LN6@scalar
  0003d	6a 0c		 push	 12			; 0000000cH
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00048	8b c6		 mov	 eax, esi
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Gexception@std@@UAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_Gexception@std@@UAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 92   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 86   :         __std_exception_destroy(&_Data);

  00022	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00025	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ___std_exception_destroy
  00031	83 c4 04	 add	 esp, 4

; 87   :     }

  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 51   :     }

  0000e	8b c1		 mov	 eax, ecx
  00010	c3		 ret	 0
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
_TEXT	ENDS
END
