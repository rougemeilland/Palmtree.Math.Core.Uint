; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__89D1FFA7_pmc_to@c DB 01H
msvcjmc	ENDS
PUBLIC	Initialize_To
PUBLIC	PMC_To_X_I
PUBLIC	PMC_To_X_L
PUBLIC	__JustMyCode_Default
EXTRN	CheckNumber:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_To DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$Initialize_To
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_To_X_I DD imagerel $LN8
	DD	imagerel $LN8+193
	DD	imagerel $unwind$PMC_To_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_To_X_L DD imagerel $LN11
	DD	imagerel $LN11+320
	DD	imagerel $unwind$PMC_To_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMWORDTODWORD DD imagerel _FROMWORDTODWORD
	DD	imagerel _FROMWORDTODWORD+85
	DD	imagerel $unwind$_FROMWORDTODWORD
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMWORDTODWORD DD 025052c01H
	DD	01112316H
	DD	0700a001dH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_To_X_L DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_To_X_I DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_To DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMWORDTODWORD
_TEXT	SEGMENT
value_high$ = 224
value_low$ = 232
_FROMWORDTODWORD PROC					; COMDAT

; 171  :     {

	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR value_high$[rbp]
	shl	rax, 32					; 00000020H
	mov	ecx, DWORD PTR value_low$[rbp]
	or	rax, rcx

; 173  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_to.c
;	COMDAT PMC_To_X_L
_TEXT	SEGMENT
np$ = 8
result$ = 36
tv86 = 248
p$ = 288
o$ = 296
PMC_To_X_L PROC						; COMDAT

; 52   : {

$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__89D1FFA7_pmc_to@c
	call	__CheckForDebuggerJustMyCode

; 53   :     if (sizeof(__UNIT_TYPE) * 2 < sizeof(*o))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_To_X_L

; 54   :     {
; 55   :         // 32bit未満のCPUは未対応
; 56   :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -7
	jmp	$LN1@PMC_To_X_L
$LN2@PMC_To_X_L:

; 57   :     }
; 58   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 59   :     PMC_STATUS_CODE result;
; 60   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@PMC_To_X_L

; 61   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_To_X_L
$LN3@PMC_To_X_L:

; 62   :     if (np->UNIT_BIT_COUNT > sizeof(*o) * 8)

	mov	rax, QWORD PTR np$[rbp]
	cmp	QWORD PTR [rax+24], 64			; 00000040H
	jbe	SHORT $LN4@PMC_To_X_L

; 63   :         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	$LN1@PMC_To_X_L
$LN4@PMC_To_X_L:

; 64   :     if (np->IS_ZERO)

	mov	rax, QWORD PTR np$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@PMC_To_X_L

; 65   :     {
; 66   :         *o = 0;

	mov	rax, QWORD PTR o$[rbp]
	mov	QWORD PTR [rax], 0

; 67   :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@PMC_To_X_L
$LN5@PMC_To_X_L:

; 68   :     }
; 69   :     if (np->UNIT_BIT_COUNT <= __UNIT_TYPE_BIT_COUNT)

	mov	rax, QWORD PTR np$[rbp]
	cmp	QWORD PTR [rax+24], 64			; 00000040H
	ja	SHORT $LN6@PMC_To_X_L

; 70   :     {
; 71   :         // 値が 1 ワードで表現できる場合
; 72   :         *o = np->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR np$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rdx, QWORD PTR o$[rbp]
	mov	rax, QWORD PTR [rax+rcx]
	mov	QWORD PTR [rdx], rax

; 73   :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_To_X_L

; 74   :     }

	jmp	SHORT $LN7@PMC_To_X_L
$LN6@PMC_To_X_L:

; 75   :     else if (np->UNIT_BIT_COUNT <= __UNIT_TYPE_BIT_COUNT * 2)

	mov	rax, QWORD PTR np$[rbp]
	cmp	QWORD PTR [rax+24], 128			; 00000080H
	ja	SHORT $LN8@PMC_To_X_L

; 76   :     {
; 77   :         // 値が 2 ワードで表現できる場合
; 78   :         *o = _FROMWORDTODWORD((_UINT32_T)np->BLOCK[1], (_UINT32_T)np->BLOCK[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR np$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	QWORD PTR tv86[rbp], rdx
	mov	r8, QWORD PTR np$[rbp]
	mov	r8, QWORD PTR [r8+64]
	mov	edx, DWORD PTR [rcx+rax]
	mov	rax, QWORD PTR tv86[rbp]
	mov	ecx, DWORD PTR [r8+rax]
	call	_FROMWORDTODWORD
	mov	rcx, QWORD PTR o$[rbp]
	mov	QWORD PTR [rcx], rax

; 79   :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_To_X_L

; 80   :     }

	jmp	SHORT $LN9@PMC_To_X_L
$LN8@PMC_To_X_L:

; 81   :     else
; 82   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN9@PMC_To_X_L:
$LN7@PMC_To_X_L:
$LN1@PMC_To_X_L:

; 83   : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_To_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_to.c
;	COMDAT PMC_To_X_I
_TEXT	SEGMENT
np$ = 8
result$ = 36
p$ = 288
o$ = 296
PMC_To_X_I PROC						; COMDAT

; 32   : {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__89D1FFA7_pmc_to@c
	call	__CheckForDebuggerJustMyCode

; 33   :     if (sizeof(__UNIT_TYPE) < sizeof(*o))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_To_X_I

; 34   :     {
; 35   :         // 32bit未満のCPUは未対応
; 36   :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -7
	jmp	SHORT $LN1@PMC_To_X_I
$LN2@PMC_To_X_I:

; 37   :     }
; 38   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 39   :     PMC_STATUS_CODE result;
; 40   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@PMC_To_X_I

; 41   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_To_X_I
$LN3@PMC_To_X_I:

; 42   :     if (np->UNIT_BIT_COUNT > sizeof(*o) * 8)

	mov	rax, QWORD PTR np$[rbp]
	cmp	QWORD PTR [rax+24], 32			; 00000020H
	jbe	SHORT $LN4@PMC_To_X_I

; 43   :         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	SHORT $LN1@PMC_To_X_I
$LN4@PMC_To_X_I:

; 44   :     if (np->IS_ZERO)

	mov	rax, QWORD PTR np$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@PMC_To_X_I

; 45   :         *o = 0;

	mov	rax, QWORD PTR o$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN6@PMC_To_X_I
$LN5@PMC_To_X_I:

; 46   :     else
; 47   :         *o = (_UINT32_T)np->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR np$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rdx, QWORD PTR o$[rbp]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR [rdx], eax
$LN6@PMC_To_X_I:

; 48   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_To_X_I:

; 49   : }   

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_To_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_to.c
;	COMDAT Initialize_To
_TEXT	SEGMENT
feature$ = 224
Initialize_To PROC					; COMDAT

; 86   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__89D1FFA7_pmc_to@c
	call	__CheckForDebuggerJustMyCode

; 87   :     return (PMC_STATUS_OK);

	xor	eax, eax

; 88   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Initialize_To ENDP
_TEXT	ENDS
END
