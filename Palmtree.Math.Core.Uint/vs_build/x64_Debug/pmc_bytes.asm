; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__B1857B5F_pmc_bytes@c DB 01H
msvcjmc	ENDS
PUBLIC	PMC_FromByteArray
PUBLIC	PMC_ToByteArray
PUBLIC	__JustMyCode_Default
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_FromByteArray DD imagerel $LN9
	DD	imagerel $LN9+306
	DD	imagerel $unwind$PMC_FromByteArray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_ToByteArray DD imagerel $LN11
	DD	imagerel $LN11+317
	DD	imagerel $unwind$PMC_ToByteArray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_BYTE DD imagerel _COPY_MEMORY_BYTE
	DD	imagerel _COPY_MEMORY_BYTE+99
	DD	imagerel $unwind$_COPY_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_DIVIDE_CEILING_SIZE DD imagerel _DIVIDE_CEILING_SIZE
	DD	imagerel _DIVIDE_CEILING_SIZE+97
	DD	imagerel $unwind$_DIVIDE_CEILING_SIZE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_8 DD imagerel _LZCNT_ALT_8
	DD	imagerel _LZCNT_ALT_8+133
	DD	imagerel $unwind$_LZCNT_ALT_8
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CountActualBitsFromBuffer DD imagerel CountActualBitsFromBuffer
	DD	imagerel CountActualBitsFromBuffer+208
	DD	imagerel $unwind$CountActualBitsFromBuffer
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CountActualBitsFromBuffer DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_8 DD 025052901H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_8$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_8$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_8$rtcName$0
	ORG $+48
_LZCNT_ALT_8$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_8$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_DIVIDE_CEILING_SIZE DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_BYTE DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_ToByteArray DD 025053901H
	DD	011d2322H
	DD	070160029H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_FromByteArray DD 025053401H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_FromByteArray$rtcName$0 DB 070H
	DB	00H
	ORG $+14
PMC_FromByteArray$rtcVarDesc DD 068H
	DD	08H
	DQ	FLAT:PMC_FromByteArray$rtcName$0
	ORG $+48
PMC_FromByteArray$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_FromByteArray$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT CountActualBitsFromBuffer
_TEXT	SEGMENT
tv69 = 192
p$ = 240
count$ = 248
CountActualBitsFromBuffer PROC				; COMDAT

; 39   : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__B1857B5F_pmc_bytes@c
	call	__CheckForDebuggerJustMyCode

; 40   :     p += count;

	mov	rax, QWORD PTR count$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rbp], rax
$LN2@CountActua:

; 41   :     while (count > 0)

	cmp	QWORD PTR count$[rbp], 0
	jbe	SHORT $LN3@CountActua

; 42   :     {
; 43   :         --p;

	mov	rax, QWORD PTR p$[rbp]
	dec	rax
	mov	QWORD PTR p$[rbp], rax

; 44   :         if (*p != 0)

	mov	rax, QWORD PTR p$[rbp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN4@CountActua

; 45   :             return (count * 8 - _LZCNT_ALT_8(*p));

	mov	rax, QWORD PTR count$[rbp]
	shl	rax, 3
	mov	QWORD PTR tv69[rbp], rax
	mov	rcx, QWORD PTR p$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	call	_LZCNT_ALT_8
	cdqe
	mov	rcx, QWORD PTR tv69[rbp]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@CountActua
$LN4@CountActua:

; 46   :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 47   :     }

	jmp	SHORT $LN2@CountActua
$LN3@CountActua:

; 48   :     return (0);

	xor	eax, eax
$LN1@CountActua:

; 49   : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
CountActualBitsFromBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_8
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_8 PROC					; COMDAT

; 581  :     {

	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 582  :         if (x == 0)

	movzx	eax, BYTE PTR x$[rbp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 583  :             return (sizeof(x) * 8);

	mov	eax, 8
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 584  :         _UINT32_T pos;
; 585  : #ifdef _MSC_VER
; 586  :         _BitScanReverse(&pos, x);

	movzx	eax, BYTE PTR x$[rbp]
	bsr	eax, eax
	mov	DWORD PTR pos$[rbp], eax

; 587  : #elif defined(__GNUC__)
; 588  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"((_UINT32_T)x));
; 589  : #else
; 590  : #error unknown compiler
; 591  : #endif
; 592  :         return ((unsigned char)(sizeof(x) * 8 - 1 - pos));

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 7
	sub	rcx, rax
	mov	rax, rcx
	movzx	eax, al
$LN1@LZCNT_ALT_:

; 593  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_8$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
u$ = 224
v$ = 232
_DIVIDE_CEILING_SIZE PROC				; COMDAT

; 198  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 199  :         return ((u + v - 1) / v);

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	lea	rax, QWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	QWORD PTR v$[rbp]

; 200  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_BYTE PROC					; COMDAT

; 49   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 50   :         __movsb(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsb

; 51   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT PMC_ToByteArray
_TEXT	SEGMENT
np$ = 8
result$ = 36
expected_buffer_size$ = 72
tv76 = 280
p$ = 320
buffer$ = 328
buffer_size$ = 336
count$ = 344
PMC_ToByteArray PROC					; COMDAT

; 79   : {

$LN11:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__B1857B5F_pmc_bytes@c
	call	__CheckForDebuggerJustMyCode

; 80   :     if (p == NULL)

	cmp	QWORD PTR p$[rbp], 0
	jne	SHORT $LN2@PMC_ToByte

; 81   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_ToByte
$LN2@PMC_ToByte:

; 82   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 83   :     PMC_STATUS_CODE result;
; 84   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@PMC_ToByte

; 85   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_ToByte
$LN3@PMC_ToByte:

; 86   :     size_t expected_buffer_size = np->IS_ZERO ? 1 : _DIVIDE_CEILING_SIZE(np->UNIT_BIT_COUNT, 8);

	mov	rax, QWORD PTR np$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@PMC_ToByte
	mov	QWORD PTR tv76[rbp], 1
	jmp	SHORT $LN10@PMC_ToByte
$LN9@PMC_ToByte:
	mov	edx, 8
	mov	rax, QWORD PTR np$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	_DIVIDE_CEILING_SIZE
	mov	QWORD PTR tv76[rbp], rax
$LN10@PMC_ToByte:
	mov	rax, QWORD PTR tv76[rbp]
	mov	QWORD PTR expected_buffer_size$[rbp], rax

; 87   :     if (buffer != NULL)

	cmp	QWORD PTR buffer$[rbp], 0
	je	SHORT $LN4@PMC_ToByte

; 88   :     {
; 89   :         if (np->UNIT_BIT_COUNT > sizeof(*buffer) * 8 * buffer_size)

	mov	rax, QWORD PTR buffer_size$[rbp]
	shl	rax, 3
	mov	rcx, QWORD PTR np$[rbp]
	cmp	QWORD PTR [rcx+16], rax
	jbe	SHORT $LN5@PMC_ToByte

; 90   :             return (PMC_STATUS_INSUFFICIENT_BUFFER);

	mov	eax, -4
	jmp	SHORT $LN1@PMC_ToByte
$LN5@PMC_ToByte:

; 91   :         if (np->IS_ZERO)

	mov	rax, QWORD PTR np$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_ToByte

; 92   :             buffer[0] = 0;

	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buffer$[rbp]
	mov	BYTE PTR [rcx+rax], 0
	jmp	SHORT $LN7@PMC_ToByte
$LN6@PMC_ToByte:

; 93   :         else
; 94   :             _COPY_MEMORY_BYTE(buffer, np->BLOCK, expected_buffer_size);

	mov	r8, QWORD PTR expected_buffer_size$[rbp]
	mov	rax, QWORD PTR np$[rbp]
	mov	rdx, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR buffer$[rbp]
	call	_COPY_MEMORY_BYTE
$LN7@PMC_ToByte:
$LN4@PMC_ToByte:

; 95   :     }
; 96   :     *count = expected_buffer_size;

	mov	rax, QWORD PTR count$[rbp]
	mov	rcx, QWORD PTR expected_buffer_size$[rbp]
	mov	QWORD PTR [rax], rcx

; 97   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_ToByte:

; 98   : }

	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
PMC_ToByteArray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT PMC_FromByteArray
_TEXT	SEGMENT
result$ = 4
bit_count$ = 40
p$4 = 72
buffer$ = 320
count$ = 328
o$ = 336
PMC_FromByteArray PROC					; COMDAT

; 53   : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__B1857B5F_pmc_bytes@c
	call	__CheckForDebuggerJustMyCode

; 54   :     PMC_STATUS_CODE result;
; 55   :     if (buffer == NULL)

	cmp	QWORD PTR buffer$[rbp], 0
	jne	SHORT $LN2@PMC_FromBy

; 56   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_FromBy
$LN2@PMC_FromBy:

; 57   :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN3@PMC_FromBy

; 58   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_FromBy
$LN3@PMC_FromBy:

; 59   :     __UNIT_TYPE bit_count = CountActualBitsFromBuffer(buffer, count);

	mov	rdx, QWORD PTR count$[rbp]
	mov	rcx, QWORD PTR buffer$[rbp]
	call	CountActualBitsFromBuffer
	mov	QWORD PTR bit_count$[rbp], rax

; 60   :     if (bit_count == 0)

	cmp	QWORD PTR bit_count$[rbp], 0
	jne	SHORT $LN4@PMC_FromBy

; 61   :         *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN5@PMC_FromBy
$LN4@PMC_FromBy:

; 62   :     else
; 63   :     {
; 64   :         NUMBER_HEADER* p;
; 65   :         if ((result = AllocateNumber(&p, bit_count, NULL)) != PMC_STATUS_OK)

	xor	r8d, r8d
	mov	rdx, QWORD PTR bit_count$[rbp]
	lea	rcx, QWORD PTR p$4[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_FromBy

; 66   :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_FromBy
$LN6@PMC_FromBy:

; 67   :         _COPY_MEMORY_BYTE(p->BLOCK, buffer, _DIVIDE_CEILING_SIZE(bit_count, 8));

	mov	edx, 8
	mov	rcx, QWORD PTR bit_count$[rbp]
	call	_DIVIDE_CEILING_SIZE
	mov	r8, rax
	mov	rdx, QWORD PTR buffer$[rbp]
	mov	rax, QWORD PTR p$4[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	_COPY_MEMORY_BYTE

; 68   :         CommitNumber(p);

	mov	rcx, QWORD PTR p$4[rbp]
	call	CommitNumber

; 69   :         *o = p;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR p$4[rbp]
	mov	QWORD PTR [rax], rcx
$LN5@PMC_FromBy:

; 70   :     }
; 71   : #ifdef _DEBUG
; 72   :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_FromBy

; 73   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_FromBy
$LN7@PMC_FromBy:

; 74   : #endif
; 75   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_FromBy:

; 76   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_FromByteArray$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
PMC_FromByteArray ENDP
_TEXT	ENDS
END
