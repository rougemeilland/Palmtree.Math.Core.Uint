; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__6553949D_pmc_modpow@c DB 01H
msvcjmc	ENDS
PUBLIC	Initialize_ModPow
PUBLIC	PMC_ModPow_X_X_X
PUBLIC	__JustMyCode_Default
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	Multiply_X_X_Imp:PROC
EXTRN	DivRem_X_X:PROC
EXTRN	Compare_Imp:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	number_zero:BYTE
EXTRN	number_one:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_ModPow DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$Initialize_ModPow
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_ModPow_X_X_X DD imagerel $LN12
	DD	imagerel $LN12+318
	DD	imagerel $unwind$PMC_ModPow_X_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_UNIT DD imagerel _ZERO_MEMORY_UNIT
	DD	imagerel _ZERO_MEMORY_UNIT+88
	DD	imagerel $unwind$_ZERO_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MAXIMUM_UNIT DD imagerel _MAXIMUM_UNIT
	DD	imagerel _MAXIMUM_UNIT+122
	DD	imagerel $unwind$_MAXIMUM_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Compare_Easy DD imagerel Compare_Easy
	DD	imagerel Compare_Easy+155
	DD	imagerel $unwind$Compare_Easy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SwapPointer DD imagerel SwapPointer
	DD	imagerel SwapPointer+117
	DD	imagerel $unwind$SwapPointer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Remainder DD imagerel Remainder
	DD	imagerel Remainder+717
	DD	imagerel $unwind$Remainder
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ModulePower DD imagerel ModulePower
	DD	imagerel ModulePower+3512
	DD	imagerel $unwind$ModulePower
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_ModPow_X_X_X_Imp DD imagerel PMC_ModPow_X_X_X_Imp
	DD	imagerel PMC_ModPow_X_X_X_Imp+487
	DD	imagerel $unwind$PMC_ModPow_X_X_X_Imp
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_ModPow_X_X_X_Imp DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ModulePower DD 045053901H
	DD	011d4322H
	DD	0701600d5H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
ModulePower$rtcName$0 DB 076H
	DB	05fH
	DB	032H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+3
ModulePower$rtcName$1 DB 076H
	DB	05fH
	DB	032H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+2
ModulePower$rtcName$2 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	031H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
ModulePower$rtcName$3 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	031H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+3
ModulePower$rtcName$11 DB 075H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+6
ModulePower$rtcName$4 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	032H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
ModulePower$rtcName$5 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	032H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+3
ModulePower$rtcName$12 DB 077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+6
ModulePower$rtcName$6 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
ModulePower$rtcName$7 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+7
ModulePower$rtcName$8 DB 071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
ModulePower$rtcName$9 DB 071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+4
ModulePower$rtcName$10 DB 072H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+11
ModulePower$rtcVarDesc DD 0428H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$12
	DD	03e8H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$11
	DD	0348H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$10
	DD	02e8H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$9
	DD	02c8H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$8
	DD	0268H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$7
	DD	0248H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$6
	DD	01e8H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$5
	DD	01c8H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$4
	DD	0168H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$3
	DD	0148H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$2
	DD	0e8H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$1
	DD	0c8H
	DD	08H
	DQ	FLAT:ModulePower$rtcName$0
	ORG $+624
ModulePower$rtcFrameData DD 0dH
	DD	00H
	DQ	FLAT:ModulePower$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Remainder DD 045053401H
	DD	0118431dH
	DD	070110041H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Remainder$rtcName$0 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
Remainder$rtcName$1 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+7
Remainder$rtcName$2 DB 071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
Remainder$rtcName$3 DB 071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+4
Remainder$rtcName$4 DB 072H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+11
Remainder$rtcVarDesc DD 0128H
	DD	08H
	DQ	FLAT:Remainder$rtcName$4
	DD	0e8H
	DD	08H
	DQ	FLAT:Remainder$rtcName$3
	DD	0c8H
	DD	08H
	DQ	FLAT:Remainder$rtcName$2
	DD	088H
	DD	08H
	DQ	FLAT:Remainder$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:Remainder$rtcName$0
	ORG $+240
Remainder$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:Remainder$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SwapPointer DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Compare_Easy DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MAXIMUM_UNIT DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_UNIT DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_ModPow_X_X_X DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_ModPow DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT PMC_ModPow_X_X_X_Imp
_TEXT	SEGMENT
result$ = 4
v$ = 256
e$ = 264
m$ = 272
r$ = 280
PMC_ModPow_X_X_X_Imp PROC				; COMDAT

; 500  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__6553949D_pmc_modpow@c
	call	__CheckForDebuggerJustMyCode

; 501  :     PMC_STATUS_CODE result;
; 502  : 
; 503  :     if (m->IS_ZERO)

	mov	rax, QWORD PTR m$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_ModPow

; 504  :     {
; 505  :         // m が 0 の場合
; 506  : 
; 507  :         // 0 による除算は許されないのでエラーを通知する
; 508  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	$LN1@PMC_ModPow

; 509  :     }

	jmp	$LN3@PMC_ModPow
$LN2@PMC_ModPow:

; 510  :     else if (m->IS_ONE)

	mov	rax, QWORD PTR m$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@PMC_ModPow

; 511  :     {
; 512  :         // m が 1 の場合
; 513  :         if (v->IS_ZERO)

	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_ModPow

; 514  :         {
; 515  :             // v が 0 の場合
; 516  :             if (e->IS_ZERO)

	mov	rax, QWORD PTR e$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN8@PMC_ModPow

; 517  :             {
; 518  :                 // e が 0 の場合
; 519  : 
; 520  :                 // 0 の 0 乗となるので、エラーを返す
; 521  :                 return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_ModPow

; 522  :             }

	jmp	SHORT $LN9@PMC_ModPow
$LN8@PMC_ModPow:

; 523  :             else
; 524  :             {
; 525  :                 // e が 0 ではない場合
; 526  : 
; 527  :                 // v の e 乗がどんな値であっても 1 では必ず割り切れるので剰余は 0 となる。
; 528  :                 *r = &number_zero;

	mov	rax, QWORD PTR r$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
$LN9@PMC_ModPow:

; 529  :             }
; 530  :         }

	jmp	SHORT $LN7@PMC_ModPow
$LN6@PMC_ModPow:

; 531  :         else
; 532  :         {
; 533  :             // v が 0 ではない場合
; 534  : 
; 535  :             // v の e 乗がどんな値であっても 1 では必ず割り切れるので剰余は 0 となる。
; 536  :             *r = &number_zero;

	mov	rax, QWORD PTR r$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
$LN7@PMC_ModPow:

; 537  :         }
; 538  :     }

	jmp	$LN5@PMC_ModPow
$LN4@PMC_ModPow:

; 539  :     else
; 540  :     {
; 541  :         // m が 2 以上の場合
; 542  :         if (v->IS_ZERO)

	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@PMC_ModPow

; 543  :         {
; 544  :             // v が 0 の場合
; 545  :             if (e->IS_ZERO)

	mov	rax, QWORD PTR e$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN12@PMC_ModPow

; 546  :             {
; 547  :                 // e が 0 の場合
; 548  : 
; 549  :                 // 0 の 0 乗となるので、エラーを返す
; 550  :                 return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_ModPow

; 551  :             }

	jmp	SHORT $LN13@PMC_ModPow
$LN12@PMC_ModPow:

; 552  :             else
; 553  :             {
; 554  :                 // e が 0 ではない場合
; 555  : 
; 556  :                 *r = &number_zero;

	mov	rax, QWORD PTR r$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
$LN13@PMC_ModPow:

; 557  :             }
; 558  :         }

	jmp	$LN11@PMC_ModPow
$LN10@PMC_ModPow:

; 559  :         else if (v->IS_ONE)

	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN14@PMC_ModPow

; 560  :         {
; 561  :             // v が 1 の場合
; 562  : 
; 563  :             // 1 を何乗しても 1 であり、1 を 2 以上の数で割ればその剰余は必ず 1 となる
; 564  :             *r = &number_one;

	mov	rax, QWORD PTR r$[rbp]
	lea	rcx, OFFSET FLAT:number_one
	mov	QWORD PTR [rax], rcx

; 565  :         }

	jmp	$LN15@PMC_ModPow
$LN14@PMC_ModPow:

; 566  :         else
; 567  :         {
; 568  :             // v が 2 以上の場合
; 569  :             if (e->IS_ZERO)

	mov	rax, QWORD PTR e$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN16@PMC_ModPow

; 570  :             {
; 571  :                 // e が 0 の場合
; 572  :                 *r = &number_one;

	mov	rax, QWORD PTR r$[rbp]
	lea	rcx, OFFSET FLAT:number_one
	mov	QWORD PTR [rax], rcx

; 573  :             }

	jmp	SHORT $LN17@PMC_ModPow
$LN16@PMC_ModPow:

; 574  :             else if (e->IS_ONE)

	mov	rax, QWORD PTR e$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN18@PMC_ModPow

; 575  :             {
; 576  :                 // e が 1 の場合
; 577  : 
; 578  :                 // v % m を計算して返す
; 579  :                 if ((result = Remainder(v, m, r)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR r$[rbp]
	mov	rdx, QWORD PTR m$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	Remainder
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN20@PMC_ModPow

; 580  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_ModPow
$LN20@PMC_ModPow:

; 581  :             }

	jmp	SHORT $LN19@PMC_ModPow
$LN18@PMC_ModPow:

; 582  :             else
; 583  :             {
; 584  :                 // v、e、m がすべて 2 以上である場合
; 585  :                 // v の e 乗 の m による剰余を計算して返す
; 586  :                 if ((result = ModulePower(v, e, m, r)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR r$[rbp]
	mov	r8, QWORD PTR m$[rbp]
	mov	rdx, QWORD PTR e$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	ModulePower
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN21@PMC_ModPow

; 587  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_ModPow
$LN21@PMC_ModPow:
$LN19@PMC_ModPow:
$LN17@PMC_ModPow:
$LN15@PMC_ModPow:
$LN11@PMC_ModPow:
$LN5@PMC_ModPow:
$LN3@PMC_ModPow:

; 588  :             }
; 589  :         }
; 590  :     }
; 591  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_ModPow:

; 592  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_ModPow_X_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT ModulePower
_TEXT	SEGMENT
result$ = 4
m_buf$ = 40
m_count$ = 72
v_2_bit_count$ = 104
v_2_buf_code$ = 136
v_2_buf_words$ = 168
v_2_buf$ = 200
work_1_bit_count$ = 232
work_1_buf_code$ = 264
work_1_buf_words$ = 296
work_1_buf$ = 328
work_2_bit_count$ = 360
work_2_buf_code$ = 392
work_2_buf_words$ = 424
work_2_buf$ = 456
work_v_bit_count$ = 488
work_v_buf_code$ = 520
work_v_buf_words$ = 552
work_v_buf$ = 584
q_buf_bit_count$ = 616
q_buf_code$ = 648
q_buf_words$ = 680
q_buf$ = 712
r_bit_count$ = 744
r_check_code$ = 776
v_count$ = 808
cmp$ = 836
e_count$ = 872
e_mask$ = 904
u_ptr$ = 936
v_ptr$ = 968
w_ptr$ = 1000
u_count$ = 1032
v$ = 1664
e$ = 1672
m$ = 1680
r$ = 1688
ModulePower PROC					; COMDAT

; 155  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1704				; 000006a8H
	lea	rbp, QWORD PTR [rsp+64]
	mov	rdi, rsp
	mov	ecx, 426				; 000001aaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1736]
	lea	rcx, OFFSET FLAT:__6553949D_pmc_modpow@c
	call	__CheckForDebuggerJustMyCode

; 156  : #ifdef DO_TRACE
; 157  :     ReportIN(v, e, m);
; 158  : #endif
; 159  :     PMC_STATUS_CODE result;
; 160  :     __UNIT_TYPE* m_buf = m->BLOCK;

	mov	rax, QWORD PTR m$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR m_buf$[rbp], rax

; 161  :     __UNIT_TYPE m_count = m->UNIT_WORD_COUNT;

	mov	rax, QWORD PTR m$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR m_count$[rbp], rax

; 162  : 
; 163  :     // 作業域を獲得する
; 164  : 
; 165  :     __UNIT_TYPE v_2_bit_count = v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

	mov	rax, QWORD PTR v$[rbp]
	imul	rax, QWORD PTR [rax+8], 64		; 00000040H
	add	rax, 64					; 00000040H
	mov	QWORD PTR v_2_bit_count$[rbp], rax

; 166  :     __UNIT_TYPE v_2_buf_code;
; 167  :     __UNIT_TYPE v_2_buf_words;
; 168  :     __UNIT_TYPE* v_2_buf = AllocateBlock(v_2_bit_count, &v_2_buf_words, &v_2_buf_code);

	lea	r8, QWORD PTR v_2_buf_code$[rbp]
	lea	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_bit_count$[rbp]
	call	AllocateBlock
	mov	QWORD PTR v_2_buf$[rbp], rax

; 169  :     if (v_2_buf == NULL)

	cmp	QWORD PTR v_2_buf$[rbp], 0
	jne	SHORT $LN10@ModulePowe

; 170  :     {
; 171  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@ModulePowe
$LN10@ModulePowe:

; 172  :     }
; 173  : 
; 174  :     __UNIT_TYPE work_1_bit_count = m_count * 2 * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

	mov	rax, QWORD PTR m_count$[rbp]
	shl	rax, 1
	imul	rax, rax, 64				; 00000040H
	add	rax, 64					; 00000040H
	mov	QWORD PTR work_1_bit_count$[rbp], rax

; 175  :     __UNIT_TYPE work_1_buf_code;
; 176  :     __UNIT_TYPE work_1_buf_words;
; 177  :     __UNIT_TYPE* work_1_buf = AllocateBlock(work_1_bit_count, &work_1_buf_words, &work_1_buf_code);

	lea	r8, QWORD PTR work_1_buf_code$[rbp]
	lea	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR work_1_bit_count$[rbp]
	call	AllocateBlock
	mov	QWORD PTR work_1_buf$[rbp], rax

; 178  :     if (work_1_buf == NULL)

	cmp	QWORD PTR work_1_buf$[rbp], 0
	jne	SHORT $LN11@ModulePowe

; 179  :     {
; 180  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	DeallocateBlock

; 181  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@ModulePowe
$LN11@ModulePowe:

; 182  :     }
; 183  : 
; 184  :     __UNIT_TYPE work_2_bit_count = m_count * 2 * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

	mov	rax, QWORD PTR m_count$[rbp]
	shl	rax, 1
	imul	rax, rax, 64				; 00000040H
	add	rax, 64					; 00000040H
	mov	QWORD PTR work_2_bit_count$[rbp], rax

; 185  :     __UNIT_TYPE work_2_buf_code;
; 186  :     __UNIT_TYPE work_2_buf_words;
; 187  :     __UNIT_TYPE* work_2_buf = AllocateBlock(work_2_bit_count, &work_2_buf_words, &work_2_buf_code);

	lea	r8, QWORD PTR work_2_buf_code$[rbp]
	lea	rdx, QWORD PTR work_2_buf_words$[rbp]
	mov	rcx, QWORD PTR work_2_bit_count$[rbp]
	call	AllocateBlock
	mov	QWORD PTR work_2_buf$[rbp], rax

; 188  :     if (work_2_buf == NULL)

	cmp	QWORD PTR work_2_buf$[rbp], 0
	jne	SHORT $LN12@ModulePowe

; 189  :     {
; 190  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	DeallocateBlock

; 191  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	DeallocateBlock

; 192  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@ModulePowe
$LN12@ModulePowe:

; 193  :     }
; 194  : 
; 195  :     __UNIT_TYPE work_v_bit_count = m_count * __UNIT_TYPE_BIT_COUNT;

	imul	rax, QWORD PTR m_count$[rbp], 64	; 00000040H
	mov	QWORD PTR work_v_bit_count$[rbp], rax

; 196  :     __UNIT_TYPE work_v_buf_code;
; 197  :     __UNIT_TYPE work_v_buf_words;
; 198  :     __UNIT_TYPE* work_v_buf = AllocateBlock(work_v_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$[rbp]
	lea	rdx, QWORD PTR work_v_buf_words$[rbp]
	mov	rcx, QWORD PTR work_v_bit_count$[rbp]
	call	AllocateBlock
	mov	QWORD PTR work_v_buf$[rbp], rax

; 199  :     if (work_v_buf == NULL)

	cmp	QWORD PTR work_v_buf$[rbp], 0
	jne	SHORT $LN13@ModulePowe

; 200  :     {
; 201  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	rdx, QWORD PTR work_2_buf_words$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	DeallocateBlock

; 202  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	DeallocateBlock

; 203  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	DeallocateBlock

; 204  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@ModulePowe
$LN13@ModulePowe:

; 205  :     }
; 206  : 
; 207  :     __UNIT_TYPE q_buf_bit_count = _MAXIMUM_UNIT(v->UNIT_BIT_COUNT, m->UNIT_BIT_COUNT * 2) - m->UNIT_BIT_COUNT + 1 + __UNIT_TYPE_BIT_COUNT;

	mov	rax, QWORD PTR m$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 1
	mov	rdx, rax
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	_MAXIMUM_UNIT
	mov	rcx, QWORD PTR m$[rbp]
	sub	rax, QWORD PTR [rcx+16]
	add	rax, 65					; 00000041H
	mov	QWORD PTR q_buf_bit_count$[rbp], rax

; 208  :     __UNIT_TYPE q_buf_code;
; 209  :     __UNIT_TYPE q_buf_words;
; 210  :     __UNIT_TYPE* q_buf = AllocateBlock(q_buf_bit_count, &q_buf_words, &q_buf_code);

	lea	r8, QWORD PTR q_buf_code$[rbp]
	lea	rdx, QWORD PTR q_buf_words$[rbp]
	mov	rcx, QWORD PTR q_buf_bit_count$[rbp]
	call	AllocateBlock
	mov	QWORD PTR q_buf$[rbp], rax

; 211  :     if (q_buf == NULL)

	cmp	QWORD PTR q_buf$[rbp], 0
	jne	SHORT $LN14@ModulePowe

; 212  :     {
; 213  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	DeallocateBlock

; 214  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	rdx, QWORD PTR work_2_buf_words$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	DeallocateBlock

; 215  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	DeallocateBlock

; 216  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	DeallocateBlock

; 217  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@ModulePowe
$LN14@ModulePowe:

; 218  :     }
; 219  : 
; 220  :     __UNIT_TYPE r_bit_count = m->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR m$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR r_bit_count$[rbp], rax

; 221  :     __UNIT_TYPE r_check_code;
; 222  :     if ((result = AllocateNumber(r, r_bit_count, &r_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR r_check_code$[rbp]
	mov	rdx, QWORD PTR r_bit_count$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN15@ModulePowe

; 223  :     {
; 224  :         DeallocateBlock(q_buf, q_buf_words);

	mov	rdx, QWORD PTR q_buf_words$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	DeallocateBlock

; 225  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	DeallocateBlock

; 226  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	rdx, QWORD PTR work_2_buf_words$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	DeallocateBlock

; 227  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	DeallocateBlock

; 228  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	DeallocateBlock

; 229  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@ModulePowe
$LN15@ModulePowe:

; 230  :     }
; 231  : 
; 232  :     __UNIT_TYPE v_count;
; 233  :     int cmp = Compare_Easy(v->BLOCK, v->UNIT_WORD_COUNT, m_buf, m_count);

	mov	r9, QWORD PTR m_count$[rbp]
	mov	r8, QWORD PTR m_buf$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Compare_Easy
	mov	DWORD PTR cmp$[rbp], eax

; 234  :     if (cmp == 0)

	cmp	DWORD PTR cmp$[rbp], 0
	jne	$LN16@ModulePowe

; 235  :     {
; 236  :         // v == m である場合
; 237  : 
; 238  :         // v を何乗してもその剰余は 0 であるため、0 を返す。
; 239  : 
; 240  :         DeallocateNumber(*r);

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 241  :         DeallocateBlock(q_buf, q_buf_words);

	mov	rdx, QWORD PTR q_buf_words$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	DeallocateBlock

; 242  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	DeallocateBlock

; 243  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	rdx, QWORD PTR work_2_buf_words$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	DeallocateBlock

; 244  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	DeallocateBlock

; 245  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	DeallocateBlock

; 246  :         *r = &number_zero;

	mov	rax, QWORD PTR r$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 247  : #ifdef DO_TRACE
; 248  :         ReportOUT(*r);
; 249  : #endif
; 250  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@ModulePowe

; 251  :     }

	jmp	$LN17@ModulePowe
$LN16@ModulePowe:

; 252  :     else if (cmp > 0)

	cmp	DWORD PTR cmp$[rbp], 0
	jle	$LN18@ModulePowe

; 253  :     {
; 254  :         // v > m である場合
; 255  : 
; 256  :         // v2 を v % m に設定する。
; 257  : 
; 258  :         DivRem_X_X(v->BLOCK, v->UNIT_WORD_COUNT, m_buf, m_count, work_v_buf, q_buf, v_2_buf);

	mov	rax, QWORD PTR v_2_buf$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR q_buf$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR work_v_buf$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR m_count$[rbp]
	mov	r8, QWORD PTR m_buf$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	DivRem_X_X

; 259  :         if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN20@ModulePowe

; 260  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN20@ModulePowe:

; 261  :         if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR q_buf_code$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN21@ModulePowe

; 262  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN21@ModulePowe:

; 263  :         if ((result = CheckBlockLight(v_2_buf, v_2_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR v_2_buf_code$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN22@ModulePowe

; 264  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN22@ModulePowe:

; 265  :         v_count = m_count;

	mov	rax, QWORD PTR m_count$[rbp]
	mov	QWORD PTR v_count$[rbp], rax
$LN2@ModulePowe:

; 266  :         while (v_count > 0 && v_2_buf[v_count - 1] == 0)

	cmp	QWORD PTR v_count$[rbp], 0
	jbe	SHORT $LN3@ModulePowe
	mov	rax, QWORD PTR v_2_buf$[rbp]
	mov	rcx, QWORD PTR v_count$[rbp]
	cmp	QWORD PTR [rax+rcx*8-8], 0
	jne	SHORT $LN3@ModulePowe

; 267  :             --v_count;

	mov	rax, QWORD PTR v_count$[rbp]
	dec	rax
	mov	QWORD PTR v_count$[rbp], rax
	jmp	SHORT $LN2@ModulePowe
$LN3@ModulePowe:

; 268  : 
; 269  :         if (v_count <= 0)

	cmp	QWORD PTR v_count$[rbp], 0
	ja	$LN23@ModulePowe

; 270  :         {
; 271  :             // v2 が 0 になってしまった場合はべき乗を繰り返しても 0 になることが確定なので 0 を返す
; 272  :             DeallocateNumber(*r);

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 273  :             DeallocateBlock(q_buf, q_buf_words);

	mov	rdx, QWORD PTR q_buf_words$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	DeallocateBlock

; 274  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	DeallocateBlock

; 275  :             DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	rdx, QWORD PTR work_2_buf_words$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	DeallocateBlock

; 276  :             DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	DeallocateBlock

; 277  :             DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	DeallocateBlock

; 278  :             *r = &number_zero;

	mov	rax, QWORD PTR r$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 279  : #ifdef DO_TRACE
; 280  :             ReportOUT(*r);
; 281  : #endif
; 282  :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@ModulePowe
$LN23@ModulePowe:

; 283  :         }
; 284  :     }

	jmp	SHORT $LN19@ModulePowe
$LN18@ModulePowe:

; 285  :     else
; 286  :     {
; 287  :         // v2 を v に設定する。
; 288  : 
; 289  :         _COPY_MEMORY_UNIT(v_2_buf, v->BLOCK, v->UNIT_WORD_COUNT);

	mov	rax, QWORD PTR v$[rbp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	_COPY_MEMORY_UNIT

; 290  :         v_count = v->UNIT_WORD_COUNT;

	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR v_count$[rbp], rax
$LN19@ModulePowe:
$LN17@ModulePowe:

; 291  :     }
; 292  : 
; 293  : #ifdef DO_TRACE
; 294  :     ReportLabel("vの初期化");
; 295  :     ReportDump("v", v_2_buf, v_count);
; 296  : #endif
; 297  :     __UNIT_TYPE e_count = e->UNIT_WORD_COUNT;

	mov	rax, QWORD PTR e$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR e_count$[rbp], rax

; 298  :     __UNIT_TYPE e_mask = ~((__UNIT_TYPE)-1 >> 1);

	mov	rax, -9223372036854775808		; 8000000000000000H
	mov	QWORD PTR e_mask$[rbp], rax

; 299  :     e_mask = e_mask >> _LZCNT_ALT_UNIT(e->BLOCK[e_count - 1]);

	mov	rax, QWORD PTR e$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR e_count$[rbp]
	mov	rcx, QWORD PTR [rax+rcx*8-8]
	call	_LZCNT_ALT_UNIT
	movzx	ecx, al
	mov	rax, QWORD PTR e_mask$[rbp]
	shr	rax, cl
	mov	QWORD PTR e_mask$[rbp], rax

; 300  :     // e_mask は e の最上位 bit を示しているはず
; 301  :     // かつ、e は 2以上であるので、同時に最下位 bit であることはあり得ない
; 302  :     _COPY_MEMORY_UNIT(work_1_buf, v_2_buf, m_count);

	mov	r8, QWORD PTR m_count$[rbp]
	mov	rdx, QWORD PTR v_2_buf$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	_COPY_MEMORY_UNIT

; 303  : 
; 304  : #ifdef _DEBUG
; 305  :     if ((e_mask & e->BLOCK[e_count - 1]) == 0)

	mov	rax, QWORD PTR e$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR e_count$[rbp]
	mov	rax, QWORD PTR [rax+rcx*8-8]
	mov	rcx, QWORD PTR e_mask$[rbp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN24@ModulePowe

; 306  :         *((int*)0) = 0;

	mov	DWORD PTR ds:0, 0
$LN24@ModulePowe:

; 307  : #endif
; 308  : 
; 309  :     __UNIT_TYPE* u_ptr = work_1_buf;

	mov	rax, QWORD PTR work_1_buf$[rbp]
	mov	QWORD PTR u_ptr$[rbp], rax

; 310  :     __UNIT_TYPE* v_ptr = v_2_buf;

	mov	rax, QWORD PTR v_2_buf$[rbp]
	mov	QWORD PTR v_ptr$[rbp], rax

; 311  :     __UNIT_TYPE* w_ptr = work_2_buf;

	mov	rax, QWORD PTR work_2_buf$[rbp]
	mov	QWORD PTR w_ptr$[rbp], rax

; 312  :     __UNIT_TYPE u_count = v_count;

	mov	rax, QWORD PTR v_count$[rbp]
	mov	QWORD PTR u_count$[rbp], rax
$LN4@ModulePowe:

; 313  : 
; 314  :     while (e_count > 0)

	cmp	QWORD PTR e_count$[rbp], 0
	jbe	$LN5@ModulePowe

; 315  :     {
; 316  : #ifdef DO_TRACE
; 317  :         ReportLabel("ループ開始");
; 318  :         ReportVar("e_count", e_count);
; 319  :         ReportVar("e_mask", e_mask);
; 320  : #endif
; 321  : 
; 322  :         // 次の桁の準備をする
; 323  :         e_mask >>= 1;

	mov	rax, QWORD PTR e_mask$[rbp]
	shr	rax, 1
	mov	QWORD PTR e_mask$[rbp], rax

; 324  :         if (e_mask == 0)

	cmp	QWORD PTR e_mask$[rbp], 0
	jne	SHORT $LN25@ModulePowe

; 325  :         {
; 326  :             e_mask = ~((__UNIT_TYPE)-1 >> 1);

	mov	rax, -9223372036854775808		; 8000000000000000H
	mov	QWORD PTR e_mask$[rbp], rax

; 327  :             --e_count;

	mov	rax, QWORD PTR e_count$[rbp]
	dec	rax
	mov	QWORD PTR e_count$[rbp], rax
$LN25@ModulePowe:

; 328  :         }
; 329  : 
; 330  :         if (e_count <= 0)

	cmp	QWORD PTR e_count$[rbp], 0
	ja	SHORT $LN26@ModulePowe

; 331  :             break;

	jmp	$LN5@ModulePowe
$LN26@ModulePowe:

; 332  : 
; 333  : #ifdef DO_TRACE
; 334  :         ReportLabel("e の更新");
; 335  :         ReportVar("e_count", e_count);
; 336  :         ReportVar("e_mask", e_mask);
; 337  : #endif
; 338  : 
; 339  :         // w := u * u を計算する
; 340  : #ifdef DO_TRACE
; 341  :         ReportLabel("w := u * u");
; 342  :         ReportDump("u", u_ptr, u_count);
; 343  : #endif
; 344  :         _ZERO_MEMORY_UNIT(w_ptr, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR w_ptr$[rbp]
	call	_ZERO_MEMORY_UNIT

; 345  :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	mov	rax, QWORD PTR w_ptr$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR u_count$[rbp]
	mov	r8, QWORD PTR u_ptr$[rbp]
	mov	rdx, QWORD PTR u_count$[rbp]
	mov	rcx, QWORD PTR u_ptr$[rbp]
	call	Multiply_X_X_Imp

; 346  :         if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_1_buf_code$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN27@ModulePowe

; 347  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN27@ModulePowe:

; 348  :         if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_2_buf_code$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN28@ModulePowe

; 349  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN28@ModulePowe:

; 350  :         SwapPointer(&u_ptr, &w_ptr);

	lea	rdx, QWORD PTR w_ptr$[rbp]
	lea	rcx, QWORD PTR u_ptr$[rbp]
	call	SwapPointer

; 351  :         u_count *= 2;

	mov	rax, QWORD PTR u_count$[rbp]
	add	rax, rax
	mov	QWORD PTR u_count$[rbp], rax

; 352  :         if (u_ptr[u_count - 1] == 0)

	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	rcx, QWORD PTR u_count$[rbp]
	cmp	QWORD PTR [rax+rcx*8-8], 0
	jne	SHORT $LN29@ModulePowe

; 353  :             --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax
$LN29@ModulePowe:

; 354  : #ifdef DO_TRACE
; 355  :         ReportDump("w", u_ptr, u_count);
; 356  : #endif
; 357  : 
; 358  :         // w := u % m を計算する
; 359  : #ifdef DO_TRACE
; 360  :         ReportLabel("w := u % m");
; 361  :         ReportDump("u", u_ptr, u_count);
; 362  :         ReportDump("m", m_buf, m_count);
; 363  : #endif
; 364  :         if (u_count >= m_count)

	mov	rax, QWORD PTR m_count$[rbp]
	cmp	QWORD PTR u_count$[rbp], rax
	jb	$LN30@ModulePowe

; 365  :         {
; 366  :             _ZERO_MEMORY_UNIT(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	_ZERO_MEMORY_UNIT

; 367  :             _ZERO_MEMORY_UNIT(q_buf, q_buf_words);

	mov	rdx, QWORD PTR q_buf_words$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	_ZERO_MEMORY_UNIT

; 368  :             _ZERO_MEMORY_UNIT(w_ptr, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR w_ptr$[rbp]
	call	_ZERO_MEMORY_UNIT

; 369  :             DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, q_buf, w_ptr);

	mov	rax, QWORD PTR w_ptr$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR q_buf$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR work_v_buf$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR m_count$[rbp]
	mov	r8, QWORD PTR m_buf$[rbp]
	mov	rdx, QWORD PTR u_count$[rbp]
	mov	rcx, QWORD PTR u_ptr$[rbp]
	call	DivRem_X_X

; 370  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN31@ModulePowe

; 371  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN31@ModulePowe:

; 372  :             if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR q_buf_code$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN32@ModulePowe

; 373  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN32@ModulePowe:

; 374  :             if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_1_buf_code$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN33@ModulePowe

; 375  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN33@ModulePowe:

; 376  :             if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_2_buf_code$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN34@ModulePowe

; 377  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN34@ModulePowe:

; 378  :             SwapPointer(&u_ptr, &w_ptr);

	lea	rdx, QWORD PTR w_ptr$[rbp]
	lea	rcx, QWORD PTR u_ptr$[rbp]
	call	SwapPointer

; 379  :             u_count = m_count;

	mov	rax, QWORD PTR m_count$[rbp]
	mov	QWORD PTR u_count$[rbp], rax
$LN6@ModulePowe:

; 380  :             while (u_count > 0 && u_ptr[u_count - 1] == 0)

	cmp	QWORD PTR u_count$[rbp], 0
	jbe	SHORT $LN7@ModulePowe
	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	rcx, QWORD PTR u_count$[rbp]
	cmp	QWORD PTR [rax+rcx*8-8], 0
	jne	SHORT $LN7@ModulePowe

; 381  :                 --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax
	jmp	SHORT $LN6@ModulePowe
$LN7@ModulePowe:

; 382  : 
; 383  :             if (u_count <= 0)

	cmp	QWORD PTR u_count$[rbp], 0
	ja	$LN35@ModulePowe

; 384  :             {
; 385  :                 // 剰余が 0 になった場合はこれ以上続行しても解が 0 以外にはならないので、処理を中断して 0 を返す
; 386  :                 DeallocateNumber(*r);

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 387  :                 DeallocateBlock(q_buf, q_buf_words);

	mov	rdx, QWORD PTR q_buf_words$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	DeallocateBlock

; 388  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	DeallocateBlock

; 389  :                 DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	rdx, QWORD PTR work_2_buf_words$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	DeallocateBlock

; 390  :                 DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	DeallocateBlock

; 391  :                 DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	DeallocateBlock

; 392  :                 *r = &number_zero;

	mov	rax, QWORD PTR r$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 393  : #ifdef DO_TRACE
; 394  :                 ReportOUT(*r);
; 395  : #endif
; 396  :                 return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@ModulePowe
$LN35@ModulePowe:
$LN30@ModulePowe:

; 397  :             }
; 398  :         }
; 399  : #ifdef DO_TRACE
; 400  :         ReportDump("w", u_ptr, u_count);
; 401  : #endif
; 402  : 
; 403  : #ifdef DO_TRACE
; 404  :         ReportLabel("e のビット検査");
; 405  :         ReportDump("e", e->BLOCK, e->UNIT_WORD_COUNT);
; 406  :         ReportVar("e_count", e_count);
; 407  :         ReportVar("e_mask", e_mask);
; 408  :         ReportVar("e_mask & e->BLOCK[e_count - 1]", e_mask & e->BLOCK[e_count - 1]);
; 409  : #endif
; 410  :         if (e_mask & e->BLOCK[e_count - 1])

	mov	rax, QWORD PTR e$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR e_count$[rbp]
	mov	rax, QWORD PTR [rax+rcx*8-8]
	mov	rcx, QWORD PTR e_mask$[rbp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	$LN36@ModulePowe

; 411  :         {
; 412  :             // e の当該桁のビットが立っている場合
; 413  : 
; 414  : #ifdef DO_TRACE
; 415  :             ReportLabel("w := u * v");
; 416  :             ReportDump("u", u_ptr, u_count);
; 417  :             ReportDump("v", v_ptr, v_count);
; 418  : #endif
; 419  : 
; 420  :             // w := u * v を計算する
; 421  :             _ZERO_MEMORY_UNIT(w_ptr, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR w_ptr$[rbp]
	call	_ZERO_MEMORY_UNIT

; 422  :             Multiply_X_X_Imp(u_ptr, u_count, v_ptr, v_count, w_ptr);

	mov	rax, QWORD PTR w_ptr$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR v_count$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_count$[rbp]
	mov	rcx, QWORD PTR u_ptr$[rbp]
	call	Multiply_X_X_Imp

; 423  :             if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_1_buf_code$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN37@ModulePowe

; 424  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN37@ModulePowe:

; 425  :             if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_2_buf_code$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN38@ModulePowe

; 426  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN38@ModulePowe:

; 427  :             SwapPointer(&u_ptr, &w_ptr);

	lea	rdx, QWORD PTR w_ptr$[rbp]
	lea	rcx, QWORD PTR u_ptr$[rbp]
	call	SwapPointer

; 428  :             u_count += v_count;

	mov	rax, QWORD PTR v_count$[rbp]
	mov	rcx, QWORD PTR u_count$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_count$[rbp], rax

; 429  :             if (u_ptr[u_count - 1] == 0)

	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	rcx, QWORD PTR u_count$[rbp]
	cmp	QWORD PTR [rax+rcx*8-8], 0
	jne	SHORT $LN39@ModulePowe

; 430  :                 --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax
$LN39@ModulePowe:

; 431  : #ifdef DO_TRACE
; 432  :             ReportDump("w", u_ptr, u_count);
; 433  : #endif
; 434  : 
; 435  :             // w := u % m を計算する
; 436  : 
; 437  : #ifdef DO_TRACE
; 438  :             ReportLabel("w := u % m");
; 439  :             ReportDump("u", u_ptr, u_count);
; 440  :             ReportDump("m", m_buf, m_count);
; 441  : #endif
; 442  :             if (u_count >= m_count)

	mov	rax, QWORD PTR m_count$[rbp]
	cmp	QWORD PTR u_count$[rbp], rax
	jb	$LN40@ModulePowe

; 443  :             {
; 444  :                 _ZERO_MEMORY_UNIT(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	_ZERO_MEMORY_UNIT

; 445  :                 _ZERO_MEMORY_UNIT(q_buf, q_buf_words);

	mov	rdx, QWORD PTR q_buf_words$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	_ZERO_MEMORY_UNIT

; 446  :                 _ZERO_MEMORY_UNIT(w_ptr, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR w_ptr$[rbp]
	call	_ZERO_MEMORY_UNIT

; 447  :                 DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, q_buf, w_ptr);

	mov	rax, QWORD PTR w_ptr$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR q_buf$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR work_v_buf$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR m_count$[rbp]
	mov	r8, QWORD PTR m_buf$[rbp]
	mov	rdx, QWORD PTR u_count$[rbp]
	mov	rcx, QWORD PTR u_ptr$[rbp]
	call	DivRem_X_X

; 448  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN41@ModulePowe

; 449  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN41@ModulePowe:

; 450  :                 if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR q_buf_code$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN42@ModulePowe

; 451  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN42@ModulePowe:

; 452  :                 if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_1_buf_code$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN43@ModulePowe

; 453  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN43@ModulePowe:

; 454  :                 if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_2_buf_code$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN44@ModulePowe

; 455  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@ModulePowe
$LN44@ModulePowe:

; 456  :                 SwapPointer(&u_ptr, &w_ptr);

	lea	rdx, QWORD PTR w_ptr$[rbp]
	lea	rcx, QWORD PTR u_ptr$[rbp]
	call	SwapPointer

; 457  :                 u_count = m_count;

	mov	rax, QWORD PTR m_count$[rbp]
	mov	QWORD PTR u_count$[rbp], rax
$LN8@ModulePowe:

; 458  :                 while (u_count > 0 && u_ptr[u_count - 1] == 0)

	cmp	QWORD PTR u_count$[rbp], 0
	jbe	SHORT $LN9@ModulePowe
	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	rcx, QWORD PTR u_count$[rbp]
	cmp	QWORD PTR [rax+rcx*8-8], 0
	jne	SHORT $LN9@ModulePowe

; 459  :                     --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax
	jmp	SHORT $LN8@ModulePowe
$LN9@ModulePowe:

; 460  : 
; 461  :                 if (u_count <= 0)

	cmp	QWORD PTR u_count$[rbp], 0
	ja	$LN45@ModulePowe

; 462  :                 {
; 463  :                     // 剰余が 0 になった場合はこれ以上続行しても解が 0 以外にはならないので、処理を中断して 0 を返す
; 464  :                     DeallocateNumber(*r);

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 465  :                     DeallocateBlock(q_buf, q_buf_words);

	mov	rdx, QWORD PTR q_buf_words$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	DeallocateBlock

; 466  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	DeallocateBlock

; 467  :                     DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	rdx, QWORD PTR work_2_buf_words$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	DeallocateBlock

; 468  :                     DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	DeallocateBlock

; 469  :                     DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	DeallocateBlock

; 470  :                     *r = &number_zero;

	mov	rax, QWORD PTR r$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 471  : #ifdef DO_TRACE
; 472  :                     ReportOUT(*r);
; 473  : #endif
; 474  :                     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@ModulePowe
$LN45@ModulePowe:
$LN40@ModulePowe:
$LN36@ModulePowe:

; 475  :                 }
; 476  :             }
; 477  : #ifdef DO_TRACE
; 478  :             ReportDump("w", u_ptr, u_count);
; 479  : #endif
; 480  :         }
; 481  :     }

	jmp	$LN4@ModulePowe
$LN5@ModulePowe:

; 482  : 
; 483  :     // 最下位桁まで達したので u_ptr と u_count を解として帰る
; 484  :     _COPY_MEMORY_UNIT((*r)->BLOCK, u_ptr, u_count);

	mov	rax, QWORD PTR r$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR u_count$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	_COPY_MEMORY_UNIT

; 485  :     if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR r$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR r_check_code$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN46@ModulePowe

; 486  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@ModulePowe
$LN46@ModulePowe:

; 487  :     CommitNumber(*r);

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber

; 488  :     DeallocateBlock(q_buf, q_buf_words);

	mov	rdx, QWORD PTR q_buf_words$[rbp]
	mov	rcx, QWORD PTR q_buf$[rbp]
	call	DeallocateBlock

; 489  :     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	DeallocateBlock

; 490  :     DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	rdx, QWORD PTR work_2_buf_words$[rbp]
	mov	rcx, QWORD PTR work_2_buf$[rbp]
	call	DeallocateBlock

; 491  :     DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	rdx, QWORD PTR work_1_buf_words$[rbp]
	mov	rcx, QWORD PTR work_1_buf$[rbp]
	call	DeallocateBlock

; 492  :     DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	rdx, QWORD PTR v_2_buf_words$[rbp]
	mov	rcx, QWORD PTR v_2_buf$[rbp]
	call	DeallocateBlock

; 493  : #ifdef DO_TRACE
; 494  :     ReportOUT(*r);
; 495  : #endif
; 496  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@ModulePowe:

; 497  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:ModulePower$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+1640]
	pop	rdi
	pop	rbp
	ret	0
ModulePower ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT Remainder
_TEXT	SEGMENT
result$ = 4
work_v_buf_code$8 = 40
work_v_buf_words$9 = 72
work_v_buf$10 = 104
q_buf_code$11 = 136
q_buf_words$12 = 168
q_buf$13 = 200
r_check_code$14 = 232
u$ = 480
v$ = 488
r$ = 496
Remainder PROC						; COMDAT

; 98   : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 520				; 00000208H
	lea	rbp, QWORD PTR [rsp+64]
	mov	rdi, rsp
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+552]
	lea	rcx, OFFSET FLAT:__6553949D_pmc_modpow@c
	call	__CheckForDebuggerJustMyCode

; 99   :     PMC_STATUS_CODE result;
; 100  : 
; 101  :     if (u->UNIT_BIT_COUNT < v->UNIT_BIT_COUNT)

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jae	SHORT $LN2@Remainder

; 102  :     {
; 103  :         if ((result = DuplicateNumber(u, r)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@Remainder

; 104  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@Remainder
$LN4@Remainder:

; 105  :     }

	jmp	$LN3@Remainder
$LN2@Remainder:

; 106  :     else
; 107  :     {
; 108  :         __UNIT_TYPE work_v_buf_code;
; 109  :         __UNIT_TYPE work_v_buf_words;
; 110  :         __UNIT_TYPE* work_v_buf = AllocateBlock(v->UNIT_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$8[rbp]
	lea	rdx, QWORD PTR work_v_buf_words$9[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	AllocateBlock
	mov	QWORD PTR work_v_buf$10[rbp], rax

; 111  :         if (work_v_buf == NULL)

	cmp	QWORD PTR work_v_buf$10[rbp], 0
	jne	SHORT $LN5@Remainder

; 112  :         {
; 113  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@Remainder
$LN5@Remainder:

; 114  :         }
; 115  :         __UNIT_TYPE q_buf_code;
; 116  :         __UNIT_TYPE q_buf_words;
; 117  :         __UNIT_TYPE* q_buf = AllocateBlock(u->UNIT_BIT_COUNT - v->UNIT_BIT_COUNT + 1 + __UNIT_TYPE_BIT_COUNT, &q_buf_words, &q_buf_code);

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	add	rax, 65					; 00000041H
	lea	r8, QWORD PTR q_buf_code$11[rbp]
	lea	rdx, QWORD PTR q_buf_words$12[rbp]
	mov	rcx, rax
	call	AllocateBlock
	mov	QWORD PTR q_buf$13[rbp], rax

; 118  :         if (q_buf == NULL)

	cmp	QWORD PTR q_buf$13[rbp], 0
	jne	SHORT $LN6@Remainder

; 119  :         {
; 120  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$9[rbp]
	mov	rcx, QWORD PTR work_v_buf$10[rbp]
	call	DeallocateBlock

; 121  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@Remainder
$LN6@Remainder:

; 122  :         }
; 123  :         __UNIT_TYPE r_check_code;
; 124  :         if ((result = AllocateNumber(r, u->UNIT_BIT_COUNT + __UNIT_TYPE_BIT_COUNT, &r_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 64					; 00000040H
	lea	r8, QWORD PTR r_check_code$14[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR r$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@Remainder

; 125  :         {
; 126  :             DeallocateBlock(q_buf, q_buf_words);

	mov	rdx, QWORD PTR q_buf_words$12[rbp]
	mov	rcx, QWORD PTR q_buf$13[rbp]
	call	DeallocateBlock

; 127  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$9[rbp]
	mov	rcx, QWORD PTR work_v_buf$10[rbp]
	call	DeallocateBlock

; 128  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@Remainder
$LN7@Remainder:

; 129  :         }
; 130  : 
; 131  :         if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax+8], rcx
	jae	SHORT $LN8@Remainder

; 132  :         {
; 133  :             q_buf[0] = 0;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q_buf$13[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 134  :             _COPY_MEMORY_UNIT((*r)->BLOCK, u->BLOCK, u->UNIT_WORD_COUNT);

	mov	rax, QWORD PTR r$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR u$[rbp]
	mov	r8, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rcx+56]
	mov	rcx, QWORD PTR [rax+56]
	call	_COPY_MEMORY_UNIT

; 135  :         }

	jmp	$LN9@Remainder
$LN8@Remainder:

; 136  :         else
; 137  :         {
; 138  :             DivRem_X_X(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, q_buf, (*r)->BLOCK);

	mov	rax, QWORD PTR r$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR q_buf$13[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR work_v_buf$10[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR v$[rbp]
	mov	r9, QWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rbp]
	mov	r8, QWORD PTR [rax+56]
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	DivRem_X_X

; 139  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$8[rbp]
	mov	rcx, QWORD PTR work_v_buf$10[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN10@Remainder

; 140  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@Remainder
$LN10@Remainder:

; 141  :             if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR q_buf_code$11[rbp]
	mov	rcx, QWORD PTR q_buf$13[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@Remainder

; 142  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@Remainder
$LN11@Remainder:

; 143  :             if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR r$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR r_check_code$14[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN12@Remainder

; 144  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@Remainder
$LN12@Remainder:
$LN9@Remainder:

; 145  :         }
; 146  : 
; 147  :         DeallocateBlock(q_buf, q_buf_words);

	mov	rdx, QWORD PTR q_buf_words$12[rbp]
	mov	rcx, QWORD PTR q_buf$13[rbp]
	call	DeallocateBlock

; 148  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$9[rbp]
	mov	rcx, QWORD PTR work_v_buf$10[rbp]
	call	DeallocateBlock

; 149  :         CommitNumber(*r);

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber
$LN3@Remainder:

; 150  :     }
; 151  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Remainder:

; 152  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:Remainder$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
Remainder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT SwapPointer
_TEXT	SEGMENT
t$ = 8
u$ = 256
v$ = 264
SwapPointer PROC					; COMDAT

; 91   : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__6553949D_pmc_modpow@c
	call	__CheckForDebuggerJustMyCode

; 92   :     __UNIT_TYPE* t = *u;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR t$[rbp], rax

; 93   :     *u = *v;

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 94   :     *v = t;

	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR t$[rbp]
	mov	QWORD PTR [rax], rcx

; 95   : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
SwapPointer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT Compare_Easy
_TEXT	SEGMENT
u$ = 224
u_count$ = 232
v$ = 240
v_count$ = 248
Compare_Easy PROC					; COMDAT

; 81   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__6553949D_pmc_modpow@c
	call	__CheckForDebuggerJustMyCode

; 82   :     if (u_count > v_count)

	mov	rax, QWORD PTR v_count$[rbp]
	cmp	QWORD PTR u_count$[rbp], rax
	jbe	SHORT $LN2@Compare_Ea

; 83   :         return (1);

	mov	eax, 1
	jmp	SHORT $LN1@Compare_Ea
	jmp	SHORT $LN3@Compare_Ea
$LN2@Compare_Ea:

; 84   :     else if (u_count < v_count)

	mov	rax, QWORD PTR v_count$[rbp]
	cmp	QWORD PTR u_count$[rbp], rax
	jae	SHORT $LN4@Compare_Ea

; 85   :         return (-1);

	mov	eax, -1
	jmp	SHORT $LN1@Compare_Ea
	jmp	SHORT $LN5@Compare_Ea
$LN4@Compare_Ea:

; 86   :     else
; 87   :         return (Compare_Imp(u, v, u_count));

	mov	r8, QWORD PTR u_count$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	Compare_Imp
$LN5@Compare_Ea:
$LN3@Compare_Ea:
$LN1@Compare_Ea:

; 88   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Compare_Easy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :     {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 624  :         if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);
; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);

	mov	rax, QWORD PTR x$[rbp]
	bsr	rax, rax
	mov	DWORD PTR pos$[rbp], eax

; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 63					; 0000003fH
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 649  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MAXIMUM_UNIT
_TEXT	SEGMENT
tv65 = 192
x$ = 240
y$ = 248
_MAXIMUM_UNIT PROC					; COMDAT

; 197  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 198  :         return (x >= y ? x : y);

	mov	rax, QWORD PTR y$[rbp]
	cmp	QWORD PTR x$[rbp], rax
	jb	SHORT $LN3@MAXIMUM_UN
	mov	rax, QWORD PTR x$[rbp]
	mov	QWORD PTR tv65[rbp], rax
	jmp	SHORT $LN4@MAXIMUM_UN
$LN3@MAXIMUM_UN:
	mov	rax, QWORD PTR y$[rbp]
	mov	QWORD PTR tv65[rbp], rax
$LN4@MAXIMUM_UN:
	mov	rax, QWORD PTR tv65[rbp]

; 199  :     }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
_MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_UNIT PROC					; COMDAT

; 110  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 111  : #ifdef _M_IX86
; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);
; 113  : #elif defined(_M_X64)
; 114  :         __stosq(d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosq

; 115  : #else
; 116  : #error unknown platform
; 117  : #endif
; 118  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsq

; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT PMC_ModPow_X_X_X
_TEXT	SEGMENT
result$ = 4
v$ = 256
e$ = 264
m$ = 272
r$ = 280
PMC_ModPow_X_X_X PROC					; COMDAT

; 595  : {

$LN12:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__6553949D_pmc_modpow@c
	call	__CheckForDebuggerJustMyCode

; 596  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN2@PMC_ModPow

; 597  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_ModPow
$LN2@PMC_ModPow:

; 598  :     if (e == NULL)

	cmp	QWORD PTR e$[rbp], 0
	jne	SHORT $LN3@PMC_ModPow

; 599  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_ModPow
$LN3@PMC_ModPow:

; 600  :     if (m == NULL)

	cmp	QWORD PTR m$[rbp], 0
	jne	SHORT $LN4@PMC_ModPow

; 601  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_ModPow
$LN4@PMC_ModPow:

; 602  :     if (r == NULL)

	cmp	QWORD PTR r$[rbp], 0
	jne	SHORT $LN5@PMC_ModPow

; 603  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_ModPow
$LN5@PMC_ModPow:

; 604  :     PMC_STATUS_CODE result;
; 605  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR v$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_ModPow

; 606  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_ModPow
$LN6@PMC_ModPow:

; 607  :     if ((result = CheckNumber((NUMBER_HEADER*)e)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR e$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_ModPow

; 608  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_ModPow
$LN7@PMC_ModPow:

; 609  :     if ((result = CheckNumber((NUMBER_HEADER*)m)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR m$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN8@PMC_ModPow

; 610  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_ModPow
$LN8@PMC_ModPow:

; 611  :     if ((result = PMC_ModPow_X_X_X_Imp((NUMBER_HEADER*)v, (NUMBER_HEADER*)e, (NUMBER_HEADER*)m, (NUMBER_HEADER**)r)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR r$[rbp]
	mov	r8, QWORD PTR m$[rbp]
	mov	rdx, QWORD PTR e$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	PMC_ModPow_X_X_X_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN9@PMC_ModPow

; 612  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_ModPow
$LN9@PMC_ModPow:

; 613  : #ifdef _DEBUG
; 614  :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN10@PMC_ModPow

; 615  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_ModPow
$LN10@PMC_ModPow:

; 616  : #endif
; 617  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_ModPow:

; 618  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_ModPow_X_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
;	COMDAT Initialize_ModPow
_TEXT	SEGMENT
feature$ = 224
Initialize_ModPow PROC					; COMDAT

; 621  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__6553949D_pmc_modpow@c
	call	__CheckForDebuggerJustMyCode

; 622  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 623  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Initialize_ModPow ENDP
_TEXT	ENDS
END
