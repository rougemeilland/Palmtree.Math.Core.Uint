; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__630249ED_pmc_uint_debug@h DB 01H
__92A13453_test_op_from_to@c DB 01H
msvcjmc	ENDS
PUBLIC	TEST_PMC_From_I
PUBLIC	TEST_PMC_From_L
PUBLIC	TEST_PMC_To_X_I
PUBLIC	TEST_PMC_To_X_L
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1DM@GJNNLKAB@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1EG@MCOLJMDD@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy@ ; `string'
PUBLIC	??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ ; `string'
PUBLIC	??_C@_1DM@CBJBCHJE@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@ ; `string'
PUBLIC	??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1DM@DINGNHGO@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_From_I DD imagerel $LN10
	DD	imagerel $LN10+546
	DD	imagerel $unwind$TEST_PMC_From_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_From_L DD imagerel $LN10
	DD	imagerel $LN10+547
	DD	imagerel $unwind$TEST_PMC_From_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_To_X_I DD imagerel $LN11
	DD	imagerel $LN11+479
	DD	imagerel $unwind$TEST_PMC_To_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_PMC_To_X_L DD imagerel $LN11
	DD	imagerel $LN11+481
	DD	imagerel $unwind$TEST_PMC_To_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_EQUALS_MEMORY DD imagerel _EQUALS_MEMORY
	DD	imagerel _EQUALS_MEMORY+198
	DD	imagerel $unwind$_EQUALS_MEMORY
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@DINGNHGO@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@DINGNHGO@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@
CONST	SEGMENT
??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r'
	DB	00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@CBJBCHJE@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@CBJBCHJE@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, '_', 00H, 'L', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
CONST	SEGMENT
??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ DB 0c7H
	DB	'0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H, 'N', 0f4H
	DB	081H, 'W0j0D0', 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@MCOLJMDD@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy@
CONST	SEGMENT
??_C@_1EG@MCOLJMDD@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H, 'B', 00H
	DB	'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r', 00H, 'a'
	DB	00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0'
	DB	'L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@GJNNLKAB@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@GJNNLKAB@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_EQUALS_MEMORY DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_To_X_L DD 025053901H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_PMC_To_X_L$rtcName$0 DB 078H
	DB	00H
	ORG $+2
TEST_PMC_To_X_L$rtcName$1 DB 072H
	DB	076H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	00H
	ORG $+5
TEST_PMC_To_X_L$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:TEST_PMC_To_X_L$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_PMC_To_X_L$rtcName$0
	ORG $+96
TEST_PMC_To_X_L$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:TEST_PMC_To_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_To_X_I DD 025053901H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_PMC_To_X_I$rtcName$0 DB 078H
	DB	00H
	ORG $+2
TEST_PMC_To_X_I$rtcName$1 DB 072H
	DB	076H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	00H
	ORG $+5
TEST_PMC_To_X_I$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:TEST_PMC_To_X_I$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_PMC_To_X_I$rtcName$0
	ORG $+96
TEST_PMC_To_X_I$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:TEST_PMC_To_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_From_L DD 025054a19H
	DD	011d2322H
	DD	070160053H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0280H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_PMC_From_L$rtcName$0 DB 078H
	DB	00H
	ORG $+6
TEST_PMC_From_L$rtcName$1 DB 072H
	DB	062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
TEST_PMC_From_L$rtcName$2 DB 072H
	DB	06cH
	DB	065H
	DB	06eH
	DB	067H
	DB	074H
	DB	068H
	DB	00H
	ORG $+8
TEST_PMC_From_L$rtcVarDesc DD 0168H
	DD	08H
	DQ	FLAT:TEST_PMC_From_L$rtcName$2
	DD	050H
	DD	0100H
	DQ	FLAT:TEST_PMC_From_L$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_PMC_From_L$rtcName$0
	ORG $+144
TEST_PMC_From_L$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TEST_PMC_From_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_PMC_From_I DD 025054a19H
	DD	011d2322H
	DD	070160053H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0280H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_PMC_From_I$rtcName$0 DB 078H
	DB	00H
	ORG $+6
TEST_PMC_From_I$rtcName$1 DB 072H
	DB	062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
TEST_PMC_From_I$rtcName$2 DB 072H
	DB	06cH
	DB	065H
	DB	06eH
	DB	067H
	DB	074H
	DB	068H
	DB	00H
	ORG $+8
TEST_PMC_From_I$rtcVarDesc DD 0168H
	DD	08H
	DQ	FLAT:TEST_PMC_From_I$rtcName$2
	DD	050H
	DD	0100H
	DQ	FLAT:TEST_PMC_From_I$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_PMC_From_I$rtcName$0
	ORG $+144
TEST_PMC_From_I$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TEST_PMC_From_I$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_debug.h
;	COMDAT _EQUALS_MEMORY
_TEXT	SEGMENT
buffer1$ = 224
count1$ = 232
buffer2$ = 240
count2$ = 248
_EQUALS_MEMORY PROC					; COMDAT

; 147  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__630249ED_pmc_uint_debug@h
	call	__CheckForDebuggerJustMyCode

; 148  :     if (count1 != count2)

	mov	rax, QWORD PTR count2$[rbp]
	cmp	QWORD PTR count1$[rbp], rax
	je	SHORT $LN4@EQUALS_MEM

; 149  :         return (-1);

	mov	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN4@EQUALS_MEM:
$LN2@EQUALS_MEM:

; 150  :     while (count1 > 0)

	cmp	QWORD PTR count1$[rbp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 151  :     {
; 152  :         if (*buffer1 != *buffer2)

	mov	rax, QWORD PTR buffer1$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR buffer2$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN5@EQUALS_MEM

; 153  :             return (-1);

	mov	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 154  :         ++buffer1;

	mov	rax, QWORD PTR buffer1$[rbp]
	inc	rax
	mov	QWORD PTR buffer1$[rbp], rax

; 155  :         ++buffer2;

	mov	rax, QWORD PTR buffer2$[rbp]
	inc	rax
	mov	QWORD PTR buffer2$[rbp], rax

; 156  :         --count1;

	mov	rax, QWORD PTR count1$[rbp]
	dec	rax
	mov	QWORD PTR count1$[rbp], rax

; 157  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 158  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 159  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_from_to.c
;	COMDAT TEST_PMC_To_X_L
_TEXT	SEGMENT
x$ = 8
rvalue$ = 40
result$ = 68
x_result$ = 100
tv134 = 308
tv91 = 308
tv74 = 308
tv82 = 312
tv64 = 312
env$ = 352
ep$ = 360
no$ = 368
buf$ = 376
buf_size$ = 384
desired_result_code$ = 392
desired_rvalue$ = 400
TEST_PMC_To_X_L PROC					; COMDAT

; 75   : {

$LN11:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	lea	rcx, OFFSET FLAT:__92A13453_test_op_from_to@c
	call	__CheckForDebuggerJustMyCode

; 76   :     PMC_HANDLE_UINT x;
; 77   :     unsigned __int64 rvalue;
; 78   :     PMC_STATUS_CODE result;
; 79   :     PMC_STATUS_CODE x_result;
; 80   :     TEST_Assert(env, FormatTestLabel(L"PMC_To_X_L (%d.%d)", no, 1), (x_result = ep->FromByteArray(buf, buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	lea	r8, QWORD PTR x$[rbp]
	mov	rdx, QWORD PTR buf_size$[rbp]
	mov	rcx, QWORD PTR buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+56]
	mov	DWORD PTR x_result$[rbp], eax
	cmp	DWORD PTR x_result$[rbp], 0
	jne	SHORT $LN5@TEST_PMC_T
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_PMC_T
$LN5@TEST_PMC_T:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_PMC_T:
	mov	edx, DWORD PTR x_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 81   :     TEST_Assert(env, FormatTestLabel(L"PMC_To_X_L (%d.%d)", no, 2), (result = ep->To_X_L(x, &rvalue)) == desired_result_code, FormatTestMesssage(L"PMC_To_X_Iの復帰コードが期待通りではない(%d)", result));

	lea	rdx, QWORD PTR rvalue$[rbp]
	mov	rcx, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+104]
	mov	DWORD PTR result$[rbp], eax
	mov	eax, DWORD PTR desired_result_code$[rbp]
	cmp	DWORD PTR result$[rbp], eax
	jne	SHORT $LN7@TEST_PMC_T
	mov	DWORD PTR tv91[rbp], 1
	jmp	SHORT $LN8@TEST_PMC_T
$LN7@TEST_PMC_T:
	mov	DWORD PTR tv91[rbp], 0
$LN8@TEST_PMC_T:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DM@DINGNHGO@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv91[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 82   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR desired_result_code$[rbp], 0
	jne	SHORT $LN2@TEST_PMC_T

; 83   :         TEST_Assert(env, FormatTestLabel(L"PMC_To_X_L (%d.%d)", no, 3), rvalue == desired_rvalue, L"データの内容が一致しない");

	mov	rax, QWORD PTR desired_rvalue$[rbp]
	cmp	QWORD PTR rvalue$[rbp], rax
	jne	SHORT $LN9@TEST_PMC_T
	mov	DWORD PTR tv134[rbp], 1
	jmp	SHORT $LN10@TEST_PMC_T
$LN9@TEST_PMC_T:
	mov	DWORD PTR tv134[rbp], 0
$LN10@TEST_PMC_T:
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv134[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert
$LN2@TEST_PMC_T:

; 84   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR x_result$[rbp], 0
	jne	SHORT $LN3@TEST_PMC_T

; 85   :         ep->Dispose(x);

	mov	rcx, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN3@TEST_PMC_T:

; 86   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_PMC_To_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
TEST_PMC_To_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_from_to.c
;	COMDAT TEST_PMC_To_X_I
_TEXT	SEGMENT
x$ = 8
rvalue$ = 36
result$ = 68
x_result$ = 100
tv134 = 308
tv91 = 308
tv74 = 308
tv82 = 312
tv64 = 312
env$ = 352
ep$ = 360
no$ = 368
buf$ = 376
buf_size$ = 384
desired_result_code$ = 392
desired_rvalue$ = 400
TEST_PMC_To_X_I PROC					; COMDAT

; 61   : {

$LN11:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	lea	rcx, OFFSET FLAT:__92A13453_test_op_from_to@c
	call	__CheckForDebuggerJustMyCode

; 62   :     PMC_HANDLE_UINT x;
; 63   :     unsigned __int32 rvalue;
; 64   :     PMC_STATUS_CODE result;
; 65   :     PMC_STATUS_CODE x_result;
; 66   :     TEST_Assert(env, FormatTestLabel(L"PMC_To_X_I (%d.%d)", no, 1), (x_result = ep->FromByteArray(buf, buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	lea	r8, QWORD PTR x$[rbp]
	mov	rdx, QWORD PTR buf_size$[rbp]
	mov	rcx, QWORD PTR buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+56]
	mov	DWORD PTR x_result$[rbp], eax
	cmp	DWORD PTR x_result$[rbp], 0
	jne	SHORT $LN5@TEST_PMC_T
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_PMC_T
$LN5@TEST_PMC_T:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_PMC_T:
	mov	edx, DWORD PTR x_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 67   :     TEST_Assert(env, FormatTestLabel(L"PMC_To_X_I (%d.%d)", no, 2), (result = ep->To_X_I(x, &rvalue)) == desired_result_code, FormatTestMesssage(L"PMC_To_X_Iの復帰コードが期待通りではない(%d)", result));

	lea	rdx, QWORD PTR rvalue$[rbp]
	mov	rcx, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+96]
	mov	DWORD PTR result$[rbp], eax
	mov	eax, DWORD PTR desired_result_code$[rbp]
	cmp	DWORD PTR result$[rbp], eax
	jne	SHORT $LN7@TEST_PMC_T
	mov	DWORD PTR tv91[rbp], 1
	jmp	SHORT $LN8@TEST_PMC_T
$LN7@TEST_PMC_T:
	mov	DWORD PTR tv91[rbp], 0
$LN8@TEST_PMC_T:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DM@DINGNHGO@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv91[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 68   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR desired_result_code$[rbp], 0
	jne	SHORT $LN2@TEST_PMC_T

; 69   :         TEST_Assert(env, FormatTestLabel(L"PMC_To_X_I (%d.%d)", no, 3), rvalue == desired_rvalue, L"データの内容が一致しない");

	mov	eax, DWORD PTR desired_rvalue$[rbp]
	cmp	DWORD PTR rvalue$[rbp], eax
	jne	SHORT $LN9@TEST_PMC_T
	mov	DWORD PTR tv134[rbp], 1
	jmp	SHORT $LN10@TEST_PMC_T
$LN9@TEST_PMC_T:
	mov	DWORD PTR tv134[rbp], 0
$LN10@TEST_PMC_T:
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv134[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert
$LN2@TEST_PMC_T:

; 70   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR x_result$[rbp], 0
	jne	SHORT $LN3@TEST_PMC_T

; 71   :         ep->Dispose(x);

	mov	rcx, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN3@TEST_PMC_T:

; 72   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_PMC_To_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
TEST_PMC_To_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_from_to.c
;	COMDAT TEST_PMC_From_L
_TEXT	SEGMENT
x$ = 8
rbuffer$ = 48
rlength$ = 328
result$ = 356
x_result$ = 388
tv139 = 596
tv92 = 596
tv73 = 596
tv81 = 600
tv64 = 600
__$ArrayPad$ = 608
env$ = 656
ep$ = 664
no$ = 672
v$ = 680
buf$ = 688
buf_size$ = 696
TEST_PMC_From_L PROC					; COMDAT

; 47   : {

$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 664				; 00000298H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 166				; 000000a6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+696]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__92A13453_test_op_from_to@c
	call	__CheckForDebuggerJustMyCode

; 48   :     PMC_HANDLE_UINT x;
; 49   :     unsigned char rbuffer[256];
; 50   :     size_t rlength;
; 51   :     PMC_STATUS_CODE result;
; 52   :     PMC_STATUS_CODE x_result;
; 53   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_L (%d.%d)", no, 1), (x_result = ep->From_L(v, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_From_Lの復帰コードが期待通りではない(%d)", x_result));

	lea	rdx, QWORD PTR x$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+24]
	mov	DWORD PTR x_result$[rbp], eax
	cmp	DWORD PTR x_result$[rbp], 0
	jne	SHORT $LN4@TEST_PMC_F
	mov	DWORD PTR tv73[rbp], 1
	jmp	SHORT $LN5@TEST_PMC_F
$LN4@TEST_PMC_F:
	mov	DWORD PTR tv73[rbp], 0
$LN5@TEST_PMC_F:
	mov	edx, DWORD PTR x_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DM@CBJBCHJE@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv73[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 54   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_L (%d.%d)", no, 2), (result = ep->ToByteArray(x, rbuffer, sizeof(rbuffer), &rlength)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR rlength$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR rbuffer$[rbp]
	mov	rcx, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+64]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN6@TEST_PMC_F
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN7@TEST_PMC_F
$LN6@TEST_PMC_F:
	mov	DWORD PTR tv92[rbp], 0
$LN7@TEST_PMC_F:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EG@MCOLJMDD@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy@
	call	FormatTestMesssage
	mov	QWORD PTR tv81[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv81[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 55   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_L (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, L"データの内容が一致しない");

	mov	r9, QWORD PTR buf_size$[rbp]
	mov	r8, QWORD PTR buf$[rbp]
	mov	rdx, QWORD PTR rlength$[rbp]
	lea	rcx, QWORD PTR rbuffer$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN8@TEST_PMC_F
	mov	DWORD PTR tv139[rbp], 1
	jmp	SHORT $LN9@TEST_PMC_F
$LN8@TEST_PMC_F:
	mov	DWORD PTR tv139[rbp], 0
$LN9@TEST_PMC_F:
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv139[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 56   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR x_result$[rbp], 0
	jne	SHORT $LN2@TEST_PMC_F

; 57   :         ep->Dispose(x);

	mov	rcx, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN2@TEST_PMC_F:

; 58   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_PMC_From_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+632]
	pop	rdi
	pop	rbp
	ret	0
TEST_PMC_From_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_from_to.c
;	COMDAT TEST_PMC_From_I
_TEXT	SEGMENT
x$ = 8
rbuffer$ = 48
rlength$ = 328
result$ = 356
x_result$ = 388
tv139 = 596
tv92 = 596
tv73 = 596
tv81 = 600
tv64 = 600
__$ArrayPad$ = 608
env$ = 656
ep$ = 664
no$ = 672
v$ = 680
buf$ = 688
buf_size$ = 696
TEST_PMC_From_I PROC					; COMDAT

; 33   : {

$LN10:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 664				; 00000298H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 166				; 000000a6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+696]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__92A13453_test_op_from_to@c
	call	__CheckForDebuggerJustMyCode

; 34   :     PMC_HANDLE_UINT x;
; 35   :     unsigned char rbuffer[256];
; 36   :     size_t rlength;
; 37   :     PMC_STATUS_CODE result;
; 38   :     PMC_STATUS_CODE x_result;
; 39   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_I (%d.%d)", no, 1), (x_result = ep->From_I(v, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_From_Iの復帰コードが期待通りではない(%d)", x_result));

	lea	rdx, QWORD PTR x$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR x_result$[rbp], eax
	cmp	DWORD PTR x_result$[rbp], 0
	jne	SHORT $LN4@TEST_PMC_F
	mov	DWORD PTR tv73[rbp], 1
	jmp	SHORT $LN5@TEST_PMC_F
$LN4@TEST_PMC_F:
	mov	DWORD PTR tv73[rbp], 0
$LN5@TEST_PMC_F:
	mov	edx, DWORD PTR x_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DM@GJNNLKAB@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv73[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 40   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_I (%d.%d)", no, 2), (result = ep->ToByteArray(x, rbuffer, sizeof(rbuffer), &rlength)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR rlength$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR rbuffer$[rbp]
	mov	rcx, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+64]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN6@TEST_PMC_F
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN7@TEST_PMC_F
$LN6@TEST_PMC_F:
	mov	DWORD PTR tv92[rbp], 0
$LN7@TEST_PMC_F:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EG@MCOLJMDD@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy@
	call	FormatTestMesssage
	mov	QWORD PTR tv81[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv81[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 41   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_I (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, L"データの内容が一致しない");

	mov	r9, QWORD PTR buf_size$[rbp]
	mov	r8, QWORD PTR buf$[rbp]
	mov	rdx, QWORD PTR rlength$[rbp]
	lea	rcx, QWORD PTR rbuffer$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN8@TEST_PMC_F
	mov	DWORD PTR tv139[rbp], 1
	jmp	SHORT $LN9@TEST_PMC_F
$LN8@TEST_PMC_F:
	mov	DWORD PTR tv139[rbp], 0
$LN9@TEST_PMC_F:
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv139[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 42   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR x_result$[rbp], 0
	jne	SHORT $LN2@TEST_PMC_F

; 43   :         ep->Dispose(x);

	mov	rcx, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN2@TEST_PMC_F:

; 44   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_PMC_From_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+632]
	pop	rdi
	pop	rbp
	ret	0
TEST_PMC_From_I ENDP
_TEXT	ENDS
END
