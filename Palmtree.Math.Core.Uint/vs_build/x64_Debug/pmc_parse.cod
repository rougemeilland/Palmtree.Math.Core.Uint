; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__80E6779E_pmc_stringio@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__F159A697_pmc_parse@cpp DB 01H
msvcjmc	ENDS
PUBLIC	??0exception@std@@QEAA@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
PUBLIC	??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
PUBLIC	??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException
PUBLIC	??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
PUBLIC	??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StringReader
PUBLIC	?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ ; Palmtree::Math::Core::Internal::StringReader::PeekChar
PUBLIC	?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ ; Palmtree::Math::Core::Internal::StringReader::Progress
PUBLIC	?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
PUBLIC	?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
PUBLIC	?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z ; Palmtree::Math::Core::Internal::StringReader::SkipString
PUBLIC	?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
PUBLIC	??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
PUBLIC	??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ ; Palmtree::Math::Core::Internal::StringWriter::GetString
PUBLIC	?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Parse
PUBLIC	?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse
PUBLIC	?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
PUBLIC	??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState
PUBLIC	??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
PUBLIC	?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
PUBLIC	?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString
PUBLIC	?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
PUBLIC	?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	??_7StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
PUBLIC	_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ ; `string'
PUBLIC	??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
PUBLIC	_TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ ; `string'
PUBLIC	??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_13JDNADJOG@?$PP?$KA@			; `string'
PUBLIC	??_C@_13HOIJIPNN@?$AA?5@			; `string'
PUBLIC	??_C@_13LLDNKHDC@?$AA?$CI@			; `string'
PUBLIC	??_C@_13DIBMAFH@?$AA?$CJ@			; `string'
PUBLIC	??_C@_1DG@OHPDJC@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@ ; `string'
PUBLIC	??_C@_1DG@BCFCFMHM@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@ ; `string'
PUBLIC	??_C@_1DG@KKOODLBJ@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@ ; `string'
PUBLIC	_TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@ ; `string'
PUBLIC	_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@ ; `string'
PUBLIC	??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ ; `string'
PUBLIC	??_C@_13LNPOMHLG@?$AAo@				; `string'
PUBLIC	??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@ ; `string'
PUBLIC	??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
PUBLIC	??_R3StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
PUBLIC	??_R3StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp_lstrcmpW:PROC
EXTRN	__imp_lstrcpyW:PROC
EXTRN	__imp_lstrlenW:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentException::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPEAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z:PROC ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
EXTRN	?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
EXTRN	?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
EXTRN	?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_W_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
EXTRN	?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString
EXTRN	?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A DB 01e4H DUP (?) ; Palmtree::Math::Core::Internal::default_number_format_option
	ALIGN	8

?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APEA_KPEA_K_K1@ZEA DQ 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_MultiplyAndAdd
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0exception@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA DD imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+179
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+182
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+130
	DD	imagerel $unwind$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA DD imagerel ?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
	DD	imagerel ?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+129
	DD	imagerel $unwind$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA DD imagerel ?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
	DD	imagerel ?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+153
	DD	imagerel $unwind$?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ DD imagerel $LN10
	DD	imagerel $LN10+147
	DD	imagerel $unwind$?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+215
	DD	imagerel $unwind$?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z DD imagerel $LN6
	DD	imagerel $LN6+154
	DD	imagerel $unwind$?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z DD imagerel $LN5
	DD	imagerel $LN5+241
	DD	imagerel $unwind$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z DD imagerel $LN5
	DD	imagerel $LN5+147
	DD	imagerel $unwind$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z DD imagerel $LN5
	DD	imagerel $LN5+145
	DD	imagerel $unwind$?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel $LN11
	DD	imagerel $LN11+500
	DD	imagerel $unwind$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA DD imagerel ?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel $LN8
	DD	imagerel $LN8+398
	DD	imagerel $unwind$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ DD imagerel ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ
	DD	imagerel ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ+62
	DD	imagerel $unwind$?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ DD imagerel ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ
	DD	imagerel ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ+62
	DD	imagerel $unwind$?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD imagerel ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
	DD	imagerel ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z+78
	DD	imagerel $unwind$?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD imagerel ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
	DD	imagerel ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z+78
	DD	imagerel $unwind$?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_DIVIDE_CEILING_UNIT DD imagerel _DIVIDE_CEILING_UNIT
	DD	imagerel _DIVIDE_CEILING_UNIT+97
	DD	imagerel $unwind$_DIVIDE_CEILING_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_DIVIDE_CEILING_SIZE DD imagerel _DIVIDE_CEILING_SIZE
	DD	imagerel _DIVIDE_CEILING_SIZE+97
	DD	imagerel $unwind$_DIVIDE_CEILING_SIZE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_UNIT DD imagerel _ADD_UNIT
	DD	imagerel _ADD_UNIT+118
	DD	imagerel $unwind$_ADD_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADDX_UNIT DD imagerel _ADDX_UNIT
	DD	imagerel _ADDX_UNIT+121
	DD	imagerel $unwind$_ADDX_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLY_UNIT DD imagerel _MULTIPLY_UNIT
	DD	imagerel _MULTIPLY_UNIT+118
	DD	imagerel $unwind$_MULTIPLY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLYX_UNIT DD imagerel _MULTIPLYX_UNIT
	DD	imagerel _MULTIPLYX_UNIT+103
	DD	imagerel $unwind$_MULTIPLYX_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z DD imagerel ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z
	DD	imagerel ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z+105
	DD	imagerel $unwind$?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z DD imagerel ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z
	DD	imagerel ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z+177
	DD	imagerel $unwind$?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD imagerel $LN14
	DD	imagerel $LN14+1155
	DD	imagerel $unwind$??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ DD imagerel $LN115
	DD	imagerel $LN115+11204
	DD	imagerel $unwind$?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ DD imagerel $LN6
	DD	imagerel $LN6+192
	DD	imagerel $unwind$?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+667
	DD	imagerel $unwind$?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ DD imagerel $LN10
	DD	imagerel $LN10+351
	DD	imagerel $unwind$?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD imagerel ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
	DD	imagerel ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z+262
	DD	imagerel $unwind$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z@4HA DD imagerel ?dtor$0@?0??ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z@4HA
	DD	imagerel ?dtor$0@?0??ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z DD imagerel ?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z
	DD	imagerel ?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z+174
	DD	imagerel $unwind$?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z DD imagerel ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z
	DD	imagerel ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z+1313
	DD	imagerel $unwind$?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z DD imagerel ?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z
	DD	imagerel ?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z+347
	DD	imagerel $unwind$?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z DD imagerel ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z
	DD	imagerel ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z+212
	DD	imagerel $unwind$?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z DD imagerel ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z
	DD	imagerel ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z+212
	DD	imagerel $unwind$?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z DD imagerel ?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
	DD	imagerel ?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z+4203
	DD	imagerel $unwind$?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z DD imagerel ?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
	DD	imagerel ?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z+4203
	DD	imagerel $unwind$?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z DD imagerel ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
	DD	imagerel ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z+381
	DD	imagerel $unwind$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA DD imagerel ?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA
	DD	imagerel ?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+2057
	DD	imagerel $unwind$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA DD imagerel ?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
	DD	imagerel ?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z DD imagerel ?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z
	DD	imagerel ?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z+222
	DD	imagerel $unwind$?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z DD imagerel ?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z
	DD	imagerel ?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z+1121
	DD	imagerel $unwind$?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z DD imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
	DD	imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z+332
	DD	imagerel $unwind$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z DD imagerel ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z
	DD	imagerel ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z+253
	DD	imagerel $unwind$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z@4HA DD imagerel ?dtor$0@?0??ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z@4HA
	DD	imagerel ?dtor$0@?0??ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1001
	DD	imagerel $unwind$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA DD imagerel ?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
	DD	imagerel ?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+537
	DD	imagerel $unwind$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA DD imagerel ?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringWriter@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringWriter@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVStringWriter@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3StringWriter@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringReader@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringReader@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVStringReader@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringReader@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3StringReader@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4StringReader@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 01H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@
CONST	SEGMENT
??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@ DB 'o', 00H, '_', 00H, 'a', 00H
	DB	'b', 00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@
CONST	SEGMENT
??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@ DB 'o', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13LNPOMHLG@?$AAo@
CONST	SEGMENT
??_C@_13LNPOMHLG@?$AAo@ DB 'o', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
CONST	SEGMENT
??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ DB 015H
	DB	'_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@
CONST	SEGMENT
??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@ DB 's', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@
CONST	SEGMENT
??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@ DB 015H
	DB	'_pen', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'y', 00H, 'l', 00H, 'e', 00H, 's', 00H
	DB	'k01', 08aH, 0efH, 'SU0', 08cH, '0f0D0j0D0D}', 07fH, '0', 08H, 'T'
	DB	08fH, '0[0n0', 0d5H, '0', 0e9H, '0', 0b0H, '0L0', 07H, 'c', 09aH
	DB	'[U0', 08cH, '0~0W0_0', 02H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVArgumentException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVArgumentException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1DG@KKOODLBJ@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@
CONST	SEGMENT
??_C@_1DG@KKOODLBJ@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';'
	DB	00H, 'T', 00H, 'r', 00H, 'y', 00H, 'P', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, 'D', 00H, 'N', 00H, ';', 00H, '3', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@BCFCFMHM@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@
CONST	SEGMENT
??_C@_1DG@BCFCFMHM@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';'
	DB	00H, 'T', 00H, 'r', 00H, 'y', 00H, 'P', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, 'D', 00H, 'N', 00H, ';', 00H, '2', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@OHPDJC@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@
CONST	SEGMENT
??_C@_1DG@OHPDJC@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';'
	DB	00H, 'T', 00H, 'r', 00H, 'y', 00H, 'P', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, 'D', 00H, 'N', 00H, ';', 00H, '1', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_13DIBMAFH@?$AA?$CJ@
CONST	SEGMENT
??_C@_13DIBMAFH@?$AA?$CJ@ DB ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13LLDNKHDC@?$AA?$CI@
CONST	SEGMENT
??_C@_13LLDNKHDC@?$AA?$CI@ DB '(', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5@ DB ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13JDNADJOG@?$PP?$KA@
CONST	SEGMENT
??_C@_13JDNADJOG@?$PP?$KA@ DB 0a0H, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '7', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '6', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '5', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '4', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '3', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '2', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '1', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
CONST	SEGMENT
??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ DB 0f8H
	DB	'fM0', 0bcH, 08fH, 07fH, '0HQ', 0d0H, '0', 0c3H, '0', 0d5H, '0'
	DB	0a1H, '0n0', 0b5H, '0', 0a4H, '0', 0baH, '0L0', 0dH, 'N', 0b3H
	DB	08dH, 'W0f0D0~0Y0', 02H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVInsufficientBufferException@Internal@Core@Math@Palmt'
	DB	'ree@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
	DQ	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
	DQ	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z
	DQ	FLAT:?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ
CONST	ENDS
;	COMDAT ??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'S', 00H, 'k', 00H, 'i', 00H, 'p', 00H
	DB	'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ';'
	DB	00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
CONST	SEGMENT
??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ DB 085H
	DB	'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv', 01fH, 'u'
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ';', 00H, '1', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT _CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringReader@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringReader@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
	DQ	FLAT:?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ
	DQ	FLAT:?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ
	DQ	FLAT:?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z
	DQ	FLAT:?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
CONST	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DQ	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
	DQ	FLAT:??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DQ	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`vftable'
	DQ	FLAT:??_EArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DQ	FLAT:??_EException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+89
	DD	00H
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+258
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+278
	DD	00H
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+397
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+414
	DD	00H
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+490
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 035054311H
	DD	011c3321H
	DD	07015004dH
	DD	05014H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcVarDesc DD 038H ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
	DD	020H
	DQ	FLAT:?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcName$0
	ORG $+48
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
	DD	00H
	DQ	FLAT:?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcVarDesc
$cppxdata$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	0248H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	0ffffffffH
	DD	imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+89
	DD	00H
	DD	imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+279
	DD	0ffffffffH
	DD	imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+299
	DD	00H
	DD	imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+309
	DD	0ffffffffH
	DD	imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+329
	DD	00H
	DD	imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+954
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 035054311H
	DD	011c3321H
	DD	070150077H
	DD	05014H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::TryParseX
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcVarDesc DD 038H ; Palmtree::Math::Core::Internal::TryParseX
	DD	020H
	DQ	FLAT:?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcName$0
	ORG $+48
?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::TryParseX
	DD	00H
	DQ	FLAT:?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcVarDesc
$cppxdata$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	0398H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z DD imagerel ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z
	DD	0ffffffffH
	DD	imagerel ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z+178
	DD	00H
	DD	imagerel ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z+193
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z DD 055055419H
	DD	011c5321H
	DD	07015005bH
	DD	05014H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z
	DD	02caH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z$rtcName$0 DB 064H ; Palmtree::Math::Core::Internal::ParseAsHexNumberString
	DB	075H
	DB	06dH
	DB	06dH
	DB	079H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+1
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z$rtcName$1 DB 073H ; Palmtree::Math::Core::Internal::ParseAsHexNumberString
	DB	074H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+14
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z$rtcVarDesc DD 080H ; Palmtree::Math::Core::Internal::ParseAsHexNumberString
	DD	0140H
	DQ	FLAT:?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z$rtcName$1
	DD	054H
	DD	01H
	DQ	FLAT:?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z$rtcName$0
	ORG $+96
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::ParseAsHexNumberString
	DD	00H
	DQ	FLAT:?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z$rtcVarDesc
$cppxdata$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z
	DD	02b8H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+96
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+383
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+403
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+413
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+433
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+572
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+592
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+602
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+622
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+713
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+733
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+743
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+763
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1150
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1170
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1180
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1200
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1348
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1368
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1378
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1398
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+2010
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 045054311H
	DD	011c4321H
	DD	0701500dbH
	DD	05014H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::TryParseDN
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcName$1 DB 062H ; Palmtree::Math::Core::Internal::TryParseDN
	DB	069H
	DB	06eH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+10
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcVarDesc DD 01e8H ; Palmtree::Math::Core::Internal::TryParseDN
	DD	08H
	DQ	FLAT:?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcName$1
	DD	068H
	DD	020H
	DQ	FLAT:?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcName$0
	ORG $+96
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::TryParseDN
	DD	00H
	DQ	FLAT:?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcVarDesc
$cppxdata$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	00H
	DD	00H
	DD	017H
	DD	imagerel $ip2state$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	06b8H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z DD imagerel ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
	DD	0ffffffffH
	DD	imagerel ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z+85
	DD	00H
	DD	imagerel ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z+346
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z DD 025053f11H
	DD	0118231dH
	DD	070110035H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::ConvertCardinalNumber
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z$rtcVarDesc DD 028H ; Palmtree::Math::Core::Internal::ConvertCardinalNumber
	DD	020H
	DQ	FLAT:?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z$rtcName$0
	ORG $+48
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::ConvertCardinalNumber
	DD	00H
	DQ	FLAT:?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z$rtcVarDesc
$cppxdata$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
	DD	0188H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z DD 025053401H
	DD	0118231dH
	DD	07011002bH
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcName$0 DB 074H ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+11
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcVarDesc DD 048H ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
	DD	08H
	DQ	FLAT:?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcName$0
	ORG $+48
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
	DD	00H
	DQ	FLAT:?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z DD 025053401H
	DD	0118231dH
	DD	07011002bH
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcName$0 DB 074H ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+11
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcVarDesc DD 048H ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
	DD	08H
	DQ	FLAT:?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcName$0
	ORG $+48
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
	DD	00H
	DQ	FLAT:?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z DD 025053401H
	DD	0118231dH
	DD	070110031H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD imagerel ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
	DD	0ffffffffH
	DD	imagerel ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z+187
	DD	00H
	DD	imagerel ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z+202
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD 055055419H
	DD	011c5321H
	DD	070150057H
	DD	05014H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
	DD	02aaH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z$rtcName$0 DB 073H ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString
	DB	074H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+10
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z$rtcVarDesc DD 060H ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString
	DD	0140H
	DQ	FLAT:?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z$rtcName$0
	ORG $+48
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString
	DD	00H
	DQ	FLAT:?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z$rtcVarDesc
$cppxdata$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
	DD	0298H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070023H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070023H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ DD imagerel ??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD 025053901H
	DD	011d2322H
	DD	07016007bH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLYX_UNIT DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLY_UNIT DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADDX_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_DIVIDE_CEILING_SIZE DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_DIVIDE_CEILING_UNIT DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 035053801H
	DD	011c3321H
	DD	070150045H
	DD	05014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcName$0 DB 06eH ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
	DB	06fH
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
	ORG $+9
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcVarDesc DD 038H ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
	DD	08H
	DQ	FLAT:?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcName$0
	ORG $+48
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
	DD	00H
	DQ	FLAT:?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+223
	DD	00H
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+325
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+342
	DD	00H
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+386
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+403
	DD	00H
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+453
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 035054311H
	DD	011c3321H
	DD	070150057H
	DD	05014H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_TryParse
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcName$1 DB 06fH ; Palmtree::Math::Core::Internal::PMC_TryParse
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+1
?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcName$2 DB 06fH ; Palmtree::Math::Core::Internal::PMC_TryParse
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
	ORG $+2
?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcFrameData DD 03H ; Palmtree::Math::Core::Internal::PMC_TryParse
	DD	00H
	DQ	FLAT:?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcVarDesc
$cppxdata$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
	DD	0298H
	DD	00H
	DD	00H
?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcVarDesc DD 098H ; Palmtree::Math::Core::Internal::PMC_TryParse
	DD	08H
	DQ	FLAT:?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcName$2
	DD	074H
	DD	01H
	DQ	FLAT:?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z DD 025052f01H
	DD	01132318H
	DD	0700c0027H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z DD 025052f01H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+108
	DD	00H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+125
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	0ffffffffH
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+95
	DD	00H
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+112
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	0e8H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+108
	DD	00H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+125
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+96
	DD	00H
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+113
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+84
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+165
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z+93
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z+162
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 025054319H
	DD	011c2321H
	DD	070150021H
	DD	05014H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z+88
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z+154
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD 025053e19H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1exception@std@@UEAA@XZ DD imagerel ??1exception@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1exception@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1exception@std@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1exception@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0exception@std@@QEAA@XZ DD imagerel ??0exception@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0exception@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0exception@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0exception@std@@QEAA@XZ
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
_TEXT	SEGMENT
root$ = 8
mask$4 = 68
err$5 = 100
err$6 = 132
$T7 = 360
$T8 = 436
$T9 = 468
$T10 = 500
$T11 = 536
source$ = 592
number_styles$ = 600
format_option$ = 608
o_sign$ = 616
o_abs$ = 624
result$ = 632
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp, COMDAT

; 1271 :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 9a 00 00 00	 mov	 ecx, 154		; 0000009aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR [rsp+648]
  00038	48 c7 85 18 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T11[rbp], -2
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0004a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1272 :         ResourceHolderUINT root;

  0004f	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00053	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00058	90		 npad	 1

; 1273 :         if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

  00059	8b 85 58 02 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  0005f	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00064	85 c0		 test	 eax, eax
  00066	0f 84 c2 00 00
	00		 je	 $LN2@PMC_TryPar

; 1274 :         {
; 1275 :             // 16進数の場合
; 1276 : 
; 1277 :             // 許可されている組み合わせのフラグ
; 1278 :             _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE | PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING | PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER;

  0006c	c7 45 44 03 02
	00 03		 mov	 DWORD PTR mask$4[rbp], 50332163 ; 03000203H

; 1279 : 
; 1280 :             // 許可されていないフラグが指定されていればエラー
; 1281 :             if (number_styles & ~mask)

  00073	8b 45 44	 mov	 eax, DWORD PTR mask$4[rbp]
  00076	f7 d0		 not	 eax
  00078	8b 8d 58 02 00
	00		 mov	 ecx, DWORD PTR number_styles$[rbp]
  0007e	23 c8		 and	 ecx, eax
  00080	8b c1		 mov	 eax, ecx
  00082	85 c0		 test	 eax, eax
  00084	74 26		 je	 SHORT $LN4@PMC_TryPar

; 1282 :                 throw ArgumentException(L"引数number_stylesに許可されていない組み合わせのフラグが指定されました。");

  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@
  0008d	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00094	e8 00 00 00 00	 call	 ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
  000a0	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000a7	e8 00 00 00 00	 call	 _CxxThrowException
$LN4@PMC_TryPar:

; 1283 : 
; 1284 :             PMC_STATUS_CODE err = TryParseX(source, number_styles, format_option, o_sign, o_abs, result);

  000ac	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  000b3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000b8	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  000bf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c4	4c 8b 8d 68 02
	00 00		 mov	 r9, QWORD PTR o_sign$[rbp]
  000cb	4c 8b 85 60 02
	00 00		 mov	 r8, QWORD PTR format_option$[rbp]
  000d2	8b 95 58 02 00
	00		 mov	 edx, DWORD PTR number_styles$[rbp]
  000d8	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  000df	e8 00 00 00 00	 call	 ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ; Palmtree::Math::Core::Internal::TryParseX
  000e4	89 45 64	 mov	 DWORD PTR err$5[rbp], eax

; 1285 :             if (err != PMC_STATUS_OK || !*result)

  000e7	83 7d 64 00	 cmp	 DWORD PTR err$5[rbp], 0
  000eb	75 0c		 jne	 SHORT $LN6@PMC_TryPar
  000ed	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  000f4	83 38 00	 cmp	 DWORD PTR [rax], 0
  000f7	75 1d		 jne	 SHORT $LN5@PMC_TryPar
$LN6@PMC_TryPar:

; 1286 :                 return (err);

  000f9	8b 45 64	 mov	 eax, DWORD PTR err$5[rbp]
  000fc	89 85 b4 01 00
	00		 mov	 DWORD PTR $T8[rbp], eax
  00102	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00106	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0010b	8b 85 b4 01 00
	00		 mov	 eax, DWORD PTR $T8[rbp]
  00111	e9 e3 00 00 00	 jmp	 $LN9@PMC_TryPar
$LN5@PMC_TryPar:

; 1287 :             root.HookNumber(*o_abs);

  00116	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  0011d	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00120	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00124	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 1288 :         }
; 1289 :         else

  00129	e9 83 00 00 00	 jmp	 $LN3@PMC_TryPar
$LN2@PMC_TryPar:

; 1290 :         {
; 1291 :             // 10進数の場合
; 1292 :             PMC_STATUS_CODE err = TryParseDN(source, number_styles, format_option, o_sign, o_abs, result);

  0012e	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00135	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0013a	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00141	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00146	4c 8b 8d 68 02
	00 00		 mov	 r9, QWORD PTR o_sign$[rbp]
  0014d	4c 8b 85 60 02
	00 00		 mov	 r8, QWORD PTR format_option$[rbp]
  00154	8b 95 58 02 00
	00		 mov	 edx, DWORD PTR number_styles$[rbp]
  0015a	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00161	e8 00 00 00 00	 call	 ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ; Palmtree::Math::Core::Internal::TryParseDN
  00166	89 85 84 00 00
	00		 mov	 DWORD PTR err$6[rbp], eax

; 1293 :             if (err != PMC_STATUS_OK || !*result)

  0016c	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR err$6[rbp], 0
  00173	75 0c		 jne	 SHORT $LN8@PMC_TryPar
  00175	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  0017c	83 38 00	 cmp	 DWORD PTR [rax], 0
  0017f	75 1d		 jne	 SHORT $LN7@PMC_TryPar
$LN8@PMC_TryPar:

; 1294 :                 return (err);

  00181	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR err$6[rbp]
  00187	89 85 d4 01 00
	00		 mov	 DWORD PTR $T9[rbp], eax
  0018d	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00191	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00196	8b 85 d4 01 00
	00		 mov	 eax, DWORD PTR $T9[rbp]
  0019c	eb 5b		 jmp	 SHORT $LN9@PMC_TryPar
$LN7@PMC_TryPar:

; 1295 :             root.HookNumber(*o_abs);

  0019e	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  001a5	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001a8	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  001ac	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
$LN3@PMC_TryPar:

; 1296 :         }
; 1297 : #ifdef _DEBUG
; 1298 :         CheckNumber(*o_abs);

  001b1	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  001b8	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001bb	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 1299 : #endif
; 1300 :         root.UnlinkNumber(*o_abs);

  001c0	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  001c7	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001ca	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  001ce	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1301 :         *result = 1;

  001d3	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  001da	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1302 :         return (PMC_STATUS_OK);

  001e0	c7 85 f4 01 00
	00 00 00 00 00	 mov	 DWORD PTR $T10[rbp], 0
  001ea	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  001ee	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001f3	8b 85 f4 01 00
	00		 mov	 eax, DWORD PTR $T10[rbp]
$LN9@PMC_TryPar:

; 1303 :     }

  001f9	48 8b f8	 mov	 rdi, rax
  001fc	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00200	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcFrameData
  00207	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0020c	48 8b c7	 mov	 rax, rdi
  0020f	48 8d a5 38 02
	00 00		 lea	 rsp, QWORD PTR [rbp+568]
  00216	5f		 pop	 rdi
  00217	5d		 pop	 rbp
  00218	c3		 ret	 0
$LN11@PMC_TryPar:
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
mask$4 = 68
err$5 = 100
err$6 = 132
$T7 = 360
$T8 = 436
$T9 = 468
$T10 = 500
$T11 = 536
source$ = 592
number_styles$ = 600
format_option$ = 608
o_sign$ = 616
o_abs$ = 624
result$ = 632
?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_TryParse_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_TryParse_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
mask$4 = 68
err$5 = 100
err$6 = 132
$T7 = 360
$T8 = 436
$T9 = 468
$T10 = 500
$T11 = 536
source$ = 592
number_styles$ = 600
format_option$ = 608
o_sign$ = 616
o_abs$ = 624
result$ = 632
?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_TryParse_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_TryParse_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
_TEXT	SEGMENT
root$ = 8
source_len$ = 72
int_part_buf_size$ = 104
int_part_buf$ = 136
result_parsing$ = 164
o_bit_count$ = 200
lzcnt$4 = 228
padding$5 = 264
carry$6 = 292
p$7 = 328
count$8 = 360
$T9 = 772
$T10 = 804
$T11 = 836
$T12 = 872
tv231 = 888
source$ = 928
number_styles$ = 936
format_option$ = 944
o_sign$ = 952
o_abs$ = 960
result$ = 968
?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::TryParseX, COMDAT

; 1190 :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec b8 03
	00 00		 sub	 rsp, 952		; 000003b8H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 ee 00 00 00	 mov	 ecx, 238		; 000000eeH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 d8
	03 00 00	 mov	 rcx, QWORD PTR [rsp+984]
  00038	48 c7 85 68 03
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T12[rbp], -2
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0004a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1191 :         ResourceHolderUINT root;

  0004f	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00053	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00058	90		 npad	 1

; 1192 :         __UNIT_TYPE source_len = lstrlenW(source);

  00059	48 8b 8d a0 03
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  00066	48 98		 cdqe
  00068	48 89 45 48	 mov	 QWORD PTR source_len$[rbp], rax

; 1193 :         size_t int_part_buf_size = source_len + 1;

  0006c	48 8b 45 48	 mov	 rax, QWORD PTR source_len$[rbp]
  00070	48 ff c0	 inc	 rax
  00073	48 89 45 68	 mov	 QWORD PTR int_part_buf_size$[rbp], rax

; 1194 :         wchar_t* int_part_buf = root.AllocateString(source_len + 1);

  00077	48 8b 45 48	 mov	 rax, QWORD PTR source_len$[rbp]
  0007b	48 ff c0	 inc	 rax
  0007e	48 8b d0	 mov	 rdx, rax
  00081	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00085	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_W_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  0008a	48 89 85 88 00
	00 00		 mov	 QWORD PTR int_part_buf$[rbp], rax

; 1195 :         int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf, int_part_buf_size);

  00091	48 8b 45 68	 mov	 rax, QWORD PTR int_part_buf_size$[rbp]
  00095	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009a	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR int_part_buf$[rbp]
  000a1	4c 8b 85 b0 03
	00 00		 mov	 r8, QWORD PTR format_option$[rbp]
  000a8	8b 95 a8 03 00
	00		 mov	 edx, DWORD PTR number_styles$[rbp]
  000ae	48 8b 8d a0 03
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  000b5	e8 00 00 00 00	 call	 ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z ; Palmtree::Math::Core::Internal::ParseAsHexNumberString
  000ba	89 85 a4 00 00
	00		 mov	 DWORD PTR result_parsing$[rbp], eax

; 1196 :         root.CheckString(int_part_buf);

  000c0	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR int_part_buf$[rbp]
  000c7	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000cb	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 1197 :         if (!result_parsing || int_part_buf[0] == L'\0')

  000d0	83 bd a4 00 00
	00 00		 cmp	 DWORD PTR result_parsing$[rbp], 0
  000d7	74 18		 je	 SHORT $LN5@TryParseX
  000d9	b8 02 00 00 00	 mov	 eax, 2
  000de	48 6b c0 00	 imul	 rax, rax, 0
  000e2	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR int_part_buf$[rbp]
  000e9	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  000ed	85 c0		 test	 eax, eax
  000ef	75 58		 jne	 SHORT $LN4@TryParseX
$LN5@TryParseX:

; 1198 :         {
; 1199 :             *result = 0;

  000f1	48 8b 85 c8 03
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  000f8	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1200 :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  000fe	8b 85 a8 03 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  00104	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00109	85 c0		 test	 eax, eax
  0010b	74 1e		 je	 SHORT $LN6@TryParseX

; 1201 :                 return (PMC_STATUS_FORMAT_ERROR);

  0010d	c7 85 04 03 00
	00 f9 ff ff ff	 mov	 DWORD PTR $T9[rbp], -7
  00117	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0011b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00120	8b 85 04 03 00
	00		 mov	 eax, DWORD PTR $T9[rbp]
  00126	e9 9e 02 00 00	 jmp	 $LN1@TryParseX
$LN6@TryParseX:

; 1202 :             return (PMC_STATUS_OK);

  0012b	c7 85 24 03 00
	00 00 00 00 00	 mov	 DWORD PTR $T10[rbp], 0
  00135	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00139	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0013e	8b 85 24 03 00
	00		 mov	 eax, DWORD PTR $T10[rbp]
  00144	e9 80 02 00 00	 jmp	 $LN1@TryParseX
$LN4@TryParseX:

; 1203 :         }
; 1204 : 
; 1205 :         // 先頭 1 文字が 8～F であれば負数とみなす
; 1206 :         if (ParseHexDigit(int_part_buf[0]) >= 8)

  00149	b8 02 00 00 00	 mov	 eax, 2
  0014e	48 6b c0 00	 imul	 rax, rax, 0
  00152	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR int_part_buf$[rbp]
  00159	0f b7 0c 01	 movzx	 ecx, WORD PTR [rcx+rax]
  0015d	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00162	83 f8 08	 cmp	 eax, 8
  00165	7c 27		 jl	 SHORT $LN7@TryParseX

; 1207 :         {
; 1208 :             // 先頭 1 文字が 8～F であれば負数とみなす
; 1209 :             if (!(number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER))

  00167	8b 85 a8 03 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  0016d	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00172	85 c0		 test	 eax, eax
  00174	75 0c		 jne	 SHORT $LN9@TryParseX

; 1210 :             {
; 1211 :                 // 負数が許可されていないにもかかわらず先頭文字が'8'～'F'である場合
; 1212 : 
; 1213 :                 // そのまま正数として扱う
; 1214 :                 *o_sign = 1;

  00176	48 8b 85 b8 03
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  0017d	c6 00 01	 mov	 BYTE PTR [rax], 1

; 1215 :             }
; 1216 :             else

  00180	eb 0a		 jmp	 SHORT $LN10@TryParseX
$LN9@TryParseX:

; 1217 :             {
; 1218 :                 // 負数が許可されていて先頭文字が'8'～'F'である場合
; 1219 : 
; 1220 :                 // 負数として扱う
; 1221 :                 *o_sign = -1;

  00182	48 8b 85 b8 03
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  00189	c6 00 ff	 mov	 BYTE PTR [rax], -1
$LN10@TryParseX:

; 1222 :             }
; 1223 :         }
; 1224 :         else

  0018c	eb 0a		 jmp	 SHORT $LN8@TryParseX
$LN7@TryParseX:

; 1225 :         {
; 1226 :             // 先頭 1 文字が 0～7 であれば正数とみなす
; 1227 :             *o_sign = 1;

  0018e	48 8b 85 b8 03
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  00195	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN8@TryParseX:

; 1228 :         }
; 1229 : 
; 1230 :         __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

  00198	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR int_part_buf$[rbp]
  0019f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  001a5	c1 e0 02	 shl	 eax, 2
  001a8	48 98		 cdqe
  001aa	48 89 85 c8 00
	00 00		 mov	 QWORD PTR o_bit_count$[rbp], rax

; 1231 :         *o_abs = root.AllocateNumber(o_bit_count);

  001b1	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR o_bit_count$[rbp]
  001b8	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  001bc	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  001c1	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR o_abs$[rbp]
  001c8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1232 :         BuildBinaryFromHexString(int_part_buf, (*o_abs)->BLOCK);

  001cb	48 8b 85 c0 03
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  001d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001d5	48 8b 50 40	 mov	 rdx, QWORD PTR [rax+64]
  001d9	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR int_part_buf$[rbp]
  001e0	e8 00 00 00 00	 call	 ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString

; 1233 :         root.CheckNumber(*o_abs);

  001e5	48 8b 85 c0 03
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  001ec	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001ef	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  001f3	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1234 :         root.DeallocateString(int_part_buf);

  001f8	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR int_part_buf$[rbp]
  001ff	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00203	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1235 :         if (*o_sign < 0)

  00208	48 8b 85 b8 03
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  0020f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00212	85 c0		 test	 eax, eax
  00214	0f 8d 23 01 00
	00		 jge	 $LN11@TryParseX

; 1236 :         {
; 1237 :             // 負数の場合
; 1238 : 
; 1239 :             int lzcnt = o_bit_count % __UNIT_TYPE_BIT_COUNT;

  0021a	33 d2		 xor	 edx, edx
  0021c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR o_bit_count$[rbp]
  00223	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00228	48 f7 f1	 div	 rcx
  0022b	48 8b c2	 mov	 rax, rdx
  0022e	89 85 e4 00 00
	00		 mov	 DWORD PTR lzcnt$4[rbp], eax

; 1240 :             if (lzcnt != 0)

  00234	83 bd e4 00 00
	00 00		 cmp	 DWORD PTR lzcnt$4[rbp], 0
  0023b	74 74		 je	 SHORT $LN12@TryParseX

; 1241 :             {
; 1242 :                 __UNIT_TYPE padding = (__UNIT_TYPE)-1 << lzcnt;

  0023d	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR lzcnt$4[rbp]
  00243	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  0024a	48 89 8d 78 03
	00 00		 mov	 QWORD PTR tv231[rbp], rcx
  00251	0f b6 c8	 movzx	 ecx, al
  00254	48 8b 85 78 03
	00 00		 mov	 rax, QWORD PTR tv231[rbp]
  0025b	48 d3 e0	 shl	 rax, cl
  0025e	48 89 85 08 01
	00 00		 mov	 QWORD PTR padding$5[rbp], rax

; 1243 :                 (*o_abs)->BLOCK[(*o_abs)->BLOCK_COUNT - 1] |= padding;

  00265	48 8b 85 c0 03
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  0026c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0026f	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR o_abs$[rbp]
  00276	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00279	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0027d	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00281	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR padding$5[rbp]
  00288	48 8b 44 c8 f8	 mov	 rax, QWORD PTR [rax+rcx*8-8]
  0028d	48 0b c2	 or	 rax, rdx
  00290	48 8b 8d c0 03
	00 00		 mov	 rcx, QWORD PTR o_abs$[rbp]
  00297	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0029a	48 8b 95 c0 03
	00 00		 mov	 rdx, QWORD PTR o_abs$[rbp]
  002a1	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  002a4	48 8b 52 38	 mov	 rdx, QWORD PTR [rdx+56]
  002a8	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  002ac	48 89 44 d1 f8	 mov	 QWORD PTR [rcx+rdx*8-8], rax
$LN12@TryParseX:

; 1244 :             }
; 1245 : 
; 1246 :             // 配列 (*o_abs)->BLOCK の内容をビット反転してインクリメントする
; 1247 :             char carry = 1;

  002b1	c6 85 24 01 00
	00 01		 mov	 BYTE PTR carry$6[rbp], 1

; 1248 :             __UNIT_TYPE* p = (*o_abs)->BLOCK;

  002b8	48 8b 85 c0 03
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  002bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002c2	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  002c6	48 89 85 48 01
	00 00		 mov	 QWORD PTR p$7[rbp], rax

; 1249 :             __UNIT_TYPE count = (*o_abs)->BLOCK_COUNT;

  002cd	48 8b 85 c0 03
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  002d4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002d7	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  002db	48 89 85 68 01
	00 00		 mov	 QWORD PTR count$8[rbp], rax
$LN2@TryParseX:

; 1250 :             while (count > 0)

  002e2	48 83 bd 68 01
	00 00 00	 cmp	 QWORD PTR count$8[rbp], 0
  002ea	76 51		 jbe	 SHORT $LN11@TryParseX

; 1251 :             {
; 1252 :                 carry = _ADD_UNIT(carry, ~*p, 0, p);

  002ec	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR p$7[rbp]
  002f3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f6	48 f7 d0	 not	 rax
  002f9	4c 8b 8d 48 01
	00 00		 mov	 r9, QWORD PTR p$7[rbp]
  00300	45 33 c0	 xor	 r8d, r8d
  00303	48 8b d0	 mov	 rdx, rax
  00306	0f b6 8d 24 01
	00 00		 movzx	 ecx, BYTE PTR carry$6[rbp]
  0030d	e8 00 00 00 00	 call	 _ADD_UNIT
  00312	88 85 24 01 00
	00		 mov	 BYTE PTR carry$6[rbp], al

; 1253 :                 ++p;

  00318	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR p$7[rbp]
  0031f	48 83 c0 08	 add	 rax, 8
  00323	48 89 85 48 01
	00 00		 mov	 QWORD PTR p$7[rbp], rax

; 1254 :                 --count;

  0032a	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR count$8[rbp]
  00331	48 ff c8	 dec	 rax
  00334	48 89 85 68 01
	00 00		 mov	 QWORD PTR count$8[rbp], rax

; 1255 :             }

  0033b	eb a5		 jmp	 SHORT $LN2@TryParseX
$LN11@TryParseX:

; 1256 :         }
; 1257 :         CommitNumber(*o_abs);

  0033d	48 8b 85 c0 03
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00344	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00347	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1258 :         if ((*o_abs)->IS_ZERO)

  0034c	48 8b 85 c0 03
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00353	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00356	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00359	83 e0 01	 and	 eax, 1
  0035c	85 c0		 test	 eax, eax
  0035e	74 30		 je	 SHORT $LN13@TryParseX

; 1259 :         {
; 1260 :             root.DeallocateNumber(*o_abs);

  00360	48 8b 85 c0 03
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00367	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0036a	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0036e	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1261 :             *o_sign = 0;

  00373	48 8b 85 b8 03
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  0037a	c6 00 00	 mov	 BYTE PTR [rax], 0

; 1262 :             *o_abs = &number_zero;

  0037d	48 8b 85 c0 03
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00384	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0038b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1263 :         }
; 1264 :         else

  0038e	eb 13		 jmp	 SHORT $LN14@TryParseX
$LN13@TryParseX:

; 1265 :             root.UnlinkNumber(*o_abs);

  00390	48 8b 85 c0 03
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00397	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0039a	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0039e	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN14@TryParseX:

; 1266 :         *result = 1;

  003a3	48 8b 85 c8 03
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  003aa	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1267 :         return (PMC_STATUS_OK);

  003b0	c7 85 44 03 00
	00 00 00 00 00	 mov	 DWORD PTR $T11[rbp], 0
  003ba	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  003be	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  003c3	8b 85 44 03 00
	00		 mov	 eax, DWORD PTR $T11[rbp]
$LN1@TryParseX:

; 1268 :     }

  003c9	48 8b f8	 mov	 rdi, rax
  003cc	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  003d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcFrameData
  003d7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003dc	48 8b c7	 mov	 rax, rdi
  003df	48 8d a5 88 03
	00 00		 lea	 rsp, QWORD PTR [rbp+904]
  003e6	5f		 pop	 rdi
  003e7	5d		 pop	 rbp
  003e8	c3		 ret	 0
?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::TryParseX
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
source_len$ = 72
int_part_buf_size$ = 104
int_part_buf$ = 136
result_parsing$ = 164
o_bit_count$ = 200
lzcnt$4 = 228
padding$5 = 264
carry$6 = 292
p$7 = 328
count$8 = 360
$T9 = 772
$T10 = 804
$T11 = 836
$T12 = 872
tv231 = 888
source$ = 928
number_styles$ = 936
format_option$ = 944
o_sign$ = 952
o_abs$ = 960
result$ = 968
?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::TryParseX'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::TryParseX'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
source_len$ = 72
int_part_buf_size$ = 104
int_part_buf$ = 136
result_parsing$ = 164
o_bit_count$ = 200
lzcnt$4 = 228
padding$5 = 264
carry$6 = 292
p$7 = 328
count$8 = 360
$T9 = 772
$T10 = 804
$T11 = 836
$T12 = 872
tv231 = 888
source$ = 928
number_styles$ = 936
format_option$ = 944
o_sign$ = 952
o_abs$ = 960
result$ = 968
?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::TryParseX'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::TryParseX'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z
_TEXT	SEGMENT
dummy_sign$ = 4
state$ = 48
$T5 = 580
$T6 = 616
__$ArrayPad$ = 632
in_ptr$ = 672
number_styles$ = 680
format_option$ = 688
int_part_buf$ = 696
int_part_buf_size$ = 704
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z PROC ; Palmtree::Math::Core::Internal::ParseAsHexNumberString, COMDAT

; 1183 :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec d8 02
	00 00		 sub	 rsp, 728		; 000002d8H
  0001c	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 b6 00 00 00	 mov	 ecx, 182		; 000000b6H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+760]
  00038	48 c7 85 68 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T6[rbp], -2
  00043	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0004a	48 33 c5	 xor	 rax, rbp
  0004d	48 89 85 78 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0005b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1184 :         char dummy_sign;
; 1185 :         ParserState state(in_ptr, number_styles, format_option, &dummy_sign, int_part_buf, int_part_buf_size, nullptr, 0);

  00060	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  00069	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  00072	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR int_part_buf_size$[rbp]
  00079	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0007e	48 8b 85 b8 02
	00 00		 mov	 rax, QWORD PTR int_part_buf$[rbp]
  00085	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0008a	48 8d 45 04	 lea	 rax, QWORD PTR dummy_sign$[rbp]
  0008e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00093	4c 8b 8d b0 02
	00 00		 mov	 r9, QWORD PTR format_option$[rbp]
  0009a	44 8b 85 a8 02
	00 00		 mov	 r8d, DWORD PTR number_styles$[rbp]
  000a1	48 8b 95 a0 02
	00 00		 mov	 rdx, QWORD PTR in_ptr$[rbp]
  000a8	48 8d 4d 30	 lea	 rcx, QWORD PTR state$[rbp]
  000ac	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState
  000b1	90		 npad	 1

; 1186 :         return (state.ParseAsHexNumberString());

  000b2	48 8d 4d 30	 lea	 rcx, QWORD PTR state$[rbp]
  000b6	e8 00 00 00 00	 call	 ?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString
  000bb	89 85 44 02 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  000c1	48 8d 4d 30	 lea	 rcx, QWORD PTR state$[rbp]
  000c5	e8 00 00 00 00	 call	 ??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
  000ca	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR $T5[rbp]

; 1187 :     }

  000d0	8b f8		 mov	 edi, eax
  000d2	48 8d 4d b0	 lea	 rcx, QWORD PTR [rbp-80]
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z$rtcFrameData
  000dd	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e2	8b c7		 mov	 eax, edi
  000e4	48 8b 8d 78 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000eb	48 33 cd	 xor	 rcx, rbp
  000ee	e8 00 00 00 00	 call	 __security_check_cookie
  000f3	48 8d a5 88 02
	00 00		 lea	 rsp, QWORD PTR [rbp+648]
  000fa	5f		 pop	 rdi
  000fb	5d		 pop	 rbp
  000fc	c3		 ret	 0
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z ENDP ; Palmtree::Math::Core::Internal::ParseAsHexNumberString
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
dummy_sign$ = 4
state$ = 48
$T5 = 580
$T6 = 616
__$ArrayPad$ = 632
in_ptr$ = 672
number_styles$ = 680
format_option$ = 688
int_part_buf$ = 696
int_part_buf_size$ = 704
?dtor$0@?0??ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ParseAsHexNumberString'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 50	 lea	 rbp, QWORD PTR [rdx+80]
  00014	48 8d 4d 30	 lea	 rcx, QWORD PTR state$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ParseAsHexNumberString'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
dummy_sign$ = 4
state$ = 48
$T5 = 580
$T6 = 616
__$ArrayPad$ = 632
in_ptr$ = 672
number_styles$ = 680
format_option$ = 688
int_part_buf$ = 696
int_part_buf_size$ = 704
?dtor$0@?0??ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ParseAsHexNumberString'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 50	 lea	 rbp, QWORD PTR [rdx+80]
  00014	48 8d 4d 30	 lea	 rcx, QWORD PTR state$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ParseAsHexNumberString'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
_TEXT	SEGMENT
word_digit_count$ = 4
source_count$ = 40
in_ptr$ = 72
out_ptr$ = 104
r$ = 132
tv74 = 344
source$ = 384
out_buf$ = 392
?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z PROC ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString, COMDAT

; 1162 :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1163 :         int word_digit_count = __UNIT_TYPE_BIT_COUNT / 4;

  0003b	c7 45 04 10 00
	00 00		 mov	 DWORD PTR word_digit_count$[rbp], 16

; 1164 :         __UNIT_TYPE source_count = lstrlenW(source);

  00042	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0004f	48 98		 cdqe
  00051	48 89 45 28	 mov	 QWORD PTR source_count$[rbp], rax

; 1165 :         wchar_t* in_ptr = source;

  00055	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR source$[rbp]
  0005c	48 89 45 48	 mov	 QWORD PTR in_ptr$[rbp], rax

; 1166 :         __UNIT_TYPE* out_ptr = out_buf + _DIVIDE_CEILING_UNIT(source_count, word_digit_count) - 1;

  00060	48 63 45 04	 movsxd	 rax, DWORD PTR word_digit_count$[rbp]
  00064	48 8b d0	 mov	 rdx, rax
  00067	48 8b 4d 28	 mov	 rcx, QWORD PTR source_count$[rbp]
  0006b	e8 00 00 00 00	 call	 _DIVIDE_CEILING_UNIT
  00070	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR out_buf$[rbp]
  00077	48 8d 44 c1 f8	 lea	 rax, QWORD PTR [rcx+rax*8-8]
  0007c	48 89 45 68	 mov	 QWORD PTR out_ptr$[rbp], rax

; 1167 :         int r = source_count % word_digit_count;

  00080	48 63 45 04	 movsxd	 rax, DWORD PTR word_digit_count$[rbp]
  00084	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv74[rbp], rax
  0008b	33 d2		 xor	 edx, edx
  0008d	48 8b 45 28	 mov	 rax, QWORD PTR source_count$[rbp]
  00091	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR tv74[rbp]
  00098	48 f7 f1	 div	 rcx
  0009b	48 8b c2	 mov	 rax, rdx
  0009e	89 85 84 00 00
	00		 mov	 DWORD PTR r$[rbp], eax

; 1168 :         if (r > 0)

  000a4	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR r$[rbp], 0
  000ab	7e 4e		 jle	 SHORT $LN4@BuildBinar

; 1169 :         {
; 1170 :             *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

  000ad	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR r$[rbp]
  000b4	48 8b d0	 mov	 rdx, rax
  000b7	48 8b 4d 48	 mov	 rcx, QWORD PTR in_ptr$[rbp]
  000bb	e8 00 00 00 00	 call	 ?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z ; Palmtree::Math::Core::Internal::BuildLeading1WordFromHexString
  000c0	48 8b 4d 68	 mov	 rcx, QWORD PTR out_ptr$[rbp]
  000c4	48 89 01	 mov	 QWORD PTR [rcx], rax
  000c7	48 8b 45 68	 mov	 rax, QWORD PTR out_ptr$[rbp]
  000cb	48 83 e8 08	 sub	 rax, 8
  000cf	48 89 45 68	 mov	 QWORD PTR out_ptr$[rbp], rax

; 1171 :             in_ptr += r;

  000d3	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR r$[rbp]
  000da	48 8b 4d 48	 mov	 rcx, QWORD PTR in_ptr$[rbp]
  000de	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  000e2	48 89 45 48	 mov	 QWORD PTR in_ptr$[rbp], rax

; 1172 :             source_count -= r;

  000e6	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR r$[rbp]
  000ed	48 8b 4d 28	 mov	 rcx, QWORD PTR source_count$[rbp]
  000f1	48 2b c8	 sub	 rcx, rax
  000f4	48 8b c1	 mov	 rax, rcx
  000f7	48 89 45 28	 mov	 QWORD PTR source_count$[rbp], rax
$LN4@BuildBinar:
$LN2@BuildBinar:

; 1173 :         }
; 1174 :         while (source_count > 0)

  000fb	48 83 7d 28 00	 cmp	 QWORD PTR source_count$[rbp], 0
  00100	76 40		 jbe	 SHORT $LN3@BuildBinar

; 1175 :         {
; 1176 :             *out_ptr-- = Build1WordFromHexString(in_ptr);

  00102	48 8b 4d 48	 mov	 rcx, QWORD PTR in_ptr$[rbp]
  00106	e8 00 00 00 00	 call	 ?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromHexString
  0010b	48 8b 4d 68	 mov	 rcx, QWORD PTR out_ptr$[rbp]
  0010f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00112	48 8b 45 68	 mov	 rax, QWORD PTR out_ptr$[rbp]
  00116	48 83 e8 08	 sub	 rax, 8
  0011a	48 89 45 68	 mov	 QWORD PTR out_ptr$[rbp], rax

; 1177 :             in_ptr += word_digit_count;

  0011e	48 63 45 04	 movsxd	 rax, DWORD PTR word_digit_count$[rbp]
  00122	48 8b 4d 48	 mov	 rcx, QWORD PTR in_ptr$[rbp]
  00126	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0012a	48 89 45 48	 mov	 QWORD PTR in_ptr$[rbp], rax

; 1178 :             source_count -= word_digit_count;

  0012e	48 63 45 04	 movsxd	 rax, DWORD PTR word_digit_count$[rbp]
  00132	48 8b 4d 28	 mov	 rcx, QWORD PTR source_count$[rbp]
  00136	48 2b c8	 sub	 rcx, rax
  00139	48 8b c1	 mov	 rax, rcx
  0013c	48 89 45 28	 mov	 QWORD PTR source_count$[rbp], rax

; 1179 :         }

  00140	eb b9		 jmp	 SHORT $LN2@BuildBinar
$LN3@BuildBinar:

; 1180 :     }

  00142	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00149	5f		 pop	 rdi
  0014a	5d		 pop	 rbp
  0014b	c3		 ret	 0
?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z ENDP ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z
_TEXT	SEGMENT
x$ = 8
tv206 = 212
tv198 = 212
tv191 = 212
tv183 = 212
tv176 = 212
tv169 = 212
tv162 = 212
tv154 = 212
tv147 = 212
tv140 = 212
tv133 = 212
tv94 = 212
tv87 = 212
tv80 = 212
tv73 = 212
tv66 = 212
in_ptr$ = 256
?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z PROC ; Palmtree::Math::Core::Internal::Build1WordFromHexString, COMDAT

; 1129 :     {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1130 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr++);

  00036	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0003d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00040	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv66[rbp], ax
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0004e	48 83 c0 02	 add	 rax, 2
  00052	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00059	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv66[rbp]
  00060	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00065	48 98		 cdqe
  00067	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1131 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

  0006b	33 c0		 xor	 eax, eax
  0006d	83 f8 01	 cmp	 eax, 1
  00070	0f 84 00 02 00
	00		 je	 $LN2@Build1Word

; 1132 :         {
; 1133 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00076	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0007d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00080	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv73[rbp], ax
  00087	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0008e	48 83 c0 02	 add	 rax, 2
  00092	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00099	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv73[rbp]
  000a0	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  000a5	48 98		 cdqe
  000a7	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  000ac	48 03 c8	 add	 rcx, rax
  000af	48 8b c1	 mov	 rax, rcx
  000b2	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1134 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  000b6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  000bd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  000c0	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv80[rbp], ax
  000c7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  000ce	48 83 c0 02	 add	 rax, 2
  000d2	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  000d9	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv80[rbp]
  000e0	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  000e5	48 98		 cdqe
  000e7	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  000ec	48 03 c8	 add	 rcx, rax
  000ef	48 8b c1	 mov	 rax, rcx
  000f2	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1135 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  000f6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  000fd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00100	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv87[rbp], ax
  00107	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0010e	48 83 c0 02	 add	 rax, 2
  00112	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00119	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv87[rbp]
  00120	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00125	48 98		 cdqe
  00127	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  0012c	48 03 c8	 add	 rcx, rax
  0012f	48 8b c1	 mov	 rax, rcx
  00132	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1136 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00136	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0013d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00140	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv94[rbp], ax
  00147	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0014e	48 83 c0 02	 add	 rax, 2
  00152	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00159	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv94[rbp]
  00160	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00165	48 98		 cdqe
  00167	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  0016c	48 03 c8	 add	 rcx, rax
  0016f	48 8b c1	 mov	 rax, rcx
  00172	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1137 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00176	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0017d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00180	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv133[rbp], ax
  00187	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0018e	48 83 c0 02	 add	 rax, 2
  00192	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00199	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv133[rbp]
  001a0	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  001a5	48 98		 cdqe
  001a7	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  001ac	48 03 c8	 add	 rcx, rax
  001af	48 8b c1	 mov	 rax, rcx
  001b2	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1138 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  001b6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  001bd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  001c0	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv140[rbp], ax
  001c7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  001ce	48 83 c0 02	 add	 rax, 2
  001d2	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  001d9	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv140[rbp]
  001e0	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  001e5	48 98		 cdqe
  001e7	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  001ec	48 03 c8	 add	 rcx, rax
  001ef	48 8b c1	 mov	 rax, rcx
  001f2	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1139 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  001f6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  001fd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00200	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv147[rbp], ax
  00207	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0020e	48 83 c0 02	 add	 rax, 2
  00212	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00219	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv147[rbp]
  00220	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00225	48 98		 cdqe
  00227	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  0022c	48 03 c8	 add	 rcx, rax
  0022f	48 8b c1	 mov	 rax, rcx
  00232	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1140 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00236	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0023d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00240	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv154[rbp], ax
  00247	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0024e	48 83 c0 02	 add	 rax, 2
  00252	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00259	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv154[rbp]
  00260	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00265	48 98		 cdqe
  00267	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  0026c	48 03 c8	 add	 rcx, rax
  0026f	48 8b c1	 mov	 rax, rcx
  00272	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax
$LN2@Build1Word:

; 1141 :         }
; 1142 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

  00276	33 c0		 xor	 eax, eax
  00278	83 f8 01	 cmp	 eax, 1
  0027b	0f 84 00 01 00
	00		 je	 $LN3@Build1Word

; 1143 :         {
; 1144 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00281	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00288	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0028b	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv162[rbp], ax
  00292	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00299	48 83 c0 02	 add	 rax, 2
  0029d	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  002a4	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv162[rbp]
  002ab	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  002b0	48 98		 cdqe
  002b2	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  002b7	48 03 c8	 add	 rcx, rax
  002ba	48 8b c1	 mov	 rax, rcx
  002bd	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1145 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  002c1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  002c8	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002cb	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv169[rbp], ax
  002d2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  002d9	48 83 c0 02	 add	 rax, 2
  002dd	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  002e4	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv169[rbp]
  002eb	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  002f0	48 98		 cdqe
  002f2	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  002f7	48 03 c8	 add	 rcx, rax
  002fa	48 8b c1	 mov	 rax, rcx
  002fd	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1146 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00301	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00308	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0030b	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv176[rbp], ax
  00312	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00319	48 83 c0 02	 add	 rax, 2
  0031d	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00324	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv176[rbp]
  0032b	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00330	48 98		 cdqe
  00332	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  00337	48 03 c8	 add	 rcx, rax
  0033a	48 8b c1	 mov	 rax, rcx
  0033d	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1147 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00341	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00348	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0034b	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv183[rbp], ax
  00352	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00359	48 83 c0 02	 add	 rax, 2
  0035d	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00364	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv183[rbp]
  0036b	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00370	48 98		 cdqe
  00372	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  00377	48 03 c8	 add	 rcx, rax
  0037a	48 8b c1	 mov	 rax, rcx
  0037d	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax
$LN3@Build1Word:

; 1148 :         }
; 1149 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

  00381	33 c0		 xor	 eax, eax
  00383	83 f8 01	 cmp	 eax, 1
  00386	0f 84 80 00 00
	00		 je	 $LN4@Build1Word

; 1150 :         {
; 1151 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0038c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00393	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00396	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv191[rbp], ax
  0039d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  003a4	48 83 c0 02	 add	 rax, 2
  003a8	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  003af	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv191[rbp]
  003b6	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  003bb	48 98		 cdqe
  003bd	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  003c2	48 03 c8	 add	 rcx, rax
  003c5	48 8b c1	 mov	 rax, rcx
  003c8	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1152 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  003cc	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  003d3	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003d6	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv198[rbp], ax
  003dd	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  003e4	48 83 c0 02	 add	 rax, 2
  003e8	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  003ef	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv198[rbp]
  003f6	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  003fb	48 98		 cdqe
  003fd	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  00402	48 03 c8	 add	 rcx, rax
  00405	48 8b c1	 mov	 rax, rcx
  00408	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax
$LN4@Build1Word:

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

  0040c	33 c0		 xor	 eax, eax
  0040e	83 f8 01	 cmp	 eax, 1
  00411	74 40		 je	 SHORT $LN5@Build1Word

; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00413	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0041a	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0041d	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv206[rbp], ax
  00424	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0042b	48 83 c0 02	 add	 rax, 2
  0042f	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00436	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv206[rbp]
  0043d	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00442	48 98		 cdqe
  00444	48 6b 4d 08 10	 imul	 rcx, QWORD PTR x$[rbp], 16
  00449	48 03 c8	 add	 rcx, rax
  0044c	48 8b c1	 mov	 rax, rcx
  0044f	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax
$LN5@Build1Word:

; 1157 :         }
; 1158 :         return (x);

  00453	48 8b 45 08	 mov	 rax, QWORD PTR x$[rbp]

; 1159 :     }

  00457	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0045e	5f		 pop	 rdi
  0045f	5d		 pop	 rbp
  00460	c3		 ret	 0
?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z ENDP ; Palmtree::Math::Core::Internal::Build1WordFromHexString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z
_TEXT	SEGMENT
x$ = 8
tv70 = 216
in_ptr$ = 256
count$ = 264
?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z PROC ; Palmtree::Math::Core::Internal::BuildLeading1WordFromHexString, COMDAT

; 1115 :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1116 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr);

  0003b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00042	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  00045	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  0004a	48 98		 cdqe
  0004c	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1117 :         ++in_ptr;

  00050	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00057	48 83 c0 02	 add	 rax, 2
  0005b	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax

; 1118 :         --count;

  00062	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  00069	48 ff c8	 dec	 rax
  0006c	48 89 85 08 01
	00 00		 mov	 QWORD PTR count$[rbp], rax
$LN2@BuildLeadi:

; 1119 :         while (count > 0)

  00073	48 83 bd 08 01
	00 00 00	 cmp	 QWORD PTR count$[rbp], 0
  0007b	76 53		 jbe	 SHORT $LN3@BuildLeadi

; 1120 :         {
; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  0007d	48 6b 45 08 10	 imul	 rax, QWORD PTR x$[rbp], 16
  00082	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  00089	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR in_ptr$[rbp]
  00090	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00093	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00098	48 98		 cdqe
  0009a	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv70[rbp]
  000a1	48 03 c8	 add	 rcx, rax
  000a4	48 8b c1	 mov	 rax, rcx
  000a7	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 1122 :             ++in_ptr;

  000ab	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  000b2	48 83 c0 02	 add	 rax, 2
  000b6	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax

; 1123 :             --count;

  000bd	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  000c4	48 ff c8	 dec	 rax
  000c7	48 89 85 08 01
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 1124 :         }

  000ce	eb a3		 jmp	 SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 1125 :         return (x);

  000d0	48 8b 45 08	 mov	 rax, QWORD PTR x$[rbp]

; 1126 :     }

  000d4	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000db	5f		 pop	 rdi
  000dc	5d		 pop	 rbp
  000dd	c3		 ret	 0
?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z ENDP ; Palmtree::Math::Core::Internal::BuildLeading1WordFromHexString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
_TEXT	SEGMENT
word_digit_count$ = 4
root$ = 40
source_len$ = 104
int_part_buf_count$ = 136
int_part_buf$ = 168
frac_part_buf_count$ = 200
frac_part_buf$ = 232
result_parsing$ = 260
s_ptr$5 = 296
d_ptr$6 = 328
frac_ptr$ = 360
bin_buf$ = 392
bin_buf_count$ = 424
o_bit_count$ = 456
$T7 = 1060
$T8 = 1092
$T9 = 1124
$T10 = 1156
$T11 = 1188
$T12 = 1220
$T13 = 1252
$T14 = 1284
$T15 = 1316
$T16 = 1348
$T17 = 1384
$T18 = 1464
$T19 = 1544
$T20 = 1620
$T21 = 1656
tv88 = 1668
tv212 = 1672
source$ = 1712
number_styles$ = 1720
format_option$ = 1728
o_sign$ = 1736
o_abs$ = 1744
result$ = 1752
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::TryParseDN, COMDAT

; 967  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec d8 06
	00 00		 sub	 rsp, 1752		; 000006d8H
  0001c	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 b6 01 00 00	 mov	 ecx, 438		; 000001b6H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 f8
	06 00 00	 mov	 rcx, QWORD PTR [rsp+1784]
  00038	48 c7 85 78 06
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T21[rbp], -2
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0004a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 968  : #ifdef _M_IX86
; 969  :         int word_digit_count = 9;
; 970  : #elif defined(_M_X64)
; 971  :         int word_digit_count = 19;

  0004f	c7 45 04 13 00
	00 00		 mov	 DWORD PTR word_digit_count$[rbp], 19

; 972  : #else
; 973  : #error unknown platform
; 974  : #endif
; 975  : 
; 976  :         ResourceHolderUINT root;

  00056	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0005a	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0005f	90		 npad	 1

; 977  : 
; 978  :         __UNIT_TYPE source_len = lstrlenW(source);

  00060	48 8b 8d b0 06
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0006d	48 98		 cdqe
  0006f	48 89 45 68	 mov	 QWORD PTR source_len$[rbp], rax

; 979  : 
; 980  :         size_t int_part_buf_count = source_len + 1;

  00073	48 8b 45 68	 mov	 rax, QWORD PTR source_len$[rbp]
  00077	48 ff c0	 inc	 rax
  0007a	48 89 85 88 00
	00 00		 mov	 QWORD PTR int_part_buf_count$[rbp], rax

; 981  :         wchar_t* int_part_buf = root.AllocateString(int_part_buf_count);

  00081	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR int_part_buf_count$[rbp]
  00088	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0008c	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_W_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  00091	48 89 85 a8 00
	00 00		 mov	 QWORD PTR int_part_buf$[rbp], rax

; 982  :         size_t frac_part_buf_count = source_len + 1;

  00098	48 8b 45 68	 mov	 rax, QWORD PTR source_len$[rbp]
  0009c	48 ff c0	 inc	 rax
  0009f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR frac_part_buf_count$[rbp], rax

; 983  :         wchar_t* frac_part_buf = root.AllocateString(frac_part_buf_count);

  000a6	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR frac_part_buf_count$[rbp]
  000ad	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  000b1	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_W_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  000b6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR frac_part_buf$[rbp], rax

; 984  :         bool result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, o_sign, int_part_buf, int_part_buf_count, frac_part_buf, frac_part_buf_count);

  000bd	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR frac_part_buf_count$[rbp]
  000c4	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000c9	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR frac_part_buf$[rbp]
  000d0	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000d5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR int_part_buf_count$[rbp]
  000dc	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e1	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR int_part_buf$[rbp]
  000e8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ed	4c 8b 8d c8 06
	00 00		 mov	 r9, QWORD PTR o_sign$[rbp]
  000f4	4c 8b 85 c0 06
	00 00		 mov	 r8, QWORD PTR format_option$[rbp]
  000fb	8b 95 b8 06 00
	00		 mov	 edx, DWORD PTR number_styles$[rbp]
  00101	48 8b 8d b0 06
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00108	e8 00 00 00 00	 call	 ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString
  0010d	85 c0		 test	 eax, eax
  0010f	74 09		 je	 SHORT $LN32@TryParseDN
  00111	c6 85 84 06 00
	00 01		 mov	 BYTE PTR tv88[rbp], 1
  00118	eb 07		 jmp	 SHORT $LN33@TryParseDN
$LN32@TryParseDN:
  0011a	c6 85 84 06 00
	00 00		 mov	 BYTE PTR tv88[rbp], 0
$LN33@TryParseDN:
  00121	0f b6 85 84 06
	00 00		 movzx	 eax, BYTE PTR tv88[rbp]
  00128	88 85 04 01 00
	00		 mov	 BYTE PTR result_parsing$[rbp], al

; 985  :         root.CheckString(int_part_buf);

  0012e	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR int_part_buf$[rbp]
  00135	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00139	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 986  :         root.CheckString(frac_part_buf);

  0013e	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR frac_part_buf$[rbp]
  00145	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00149	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 987  :         if (!result_parsing)

  0014e	0f b6 85 04 01
	00 00		 movzx	 eax, BYTE PTR result_parsing$[rbp]
  00155	85 c0		 test	 eax, eax
  00157	75 58		 jne	 SHORT $LN9@TryParseDN

; 988  :         {
; 989  :             *result = 0;

  00159	48 8b 85 d8 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00160	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 990  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  00166	8b 85 b8 06 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  0016c	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00171	85 c0		 test	 eax, eax
  00173	74 1e		 je	 SHORT $LN10@TryParseDN

; 991  :                 return (PMC_STATUS_FORMAT_ERROR);

  00175	c7 85 24 04 00
	00 f9 ff ff ff	 mov	 DWORD PTR $T7[rbp], -7
  0017f	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00183	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00188	8b 85 24 04 00
	00		 mov	 eax, DWORD PTR $T7[rbp]
  0018e	e9 56 06 00 00	 jmp	 $LN31@TryParseDN
$LN10@TryParseDN:

; 992  :             return (PMC_STATUS_OK);

  00193	c7 85 44 04 00
	00 00 00 00 00	 mov	 DWORD PTR $T8[rbp], 0
  0019d	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  001a1	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001a6	8b 85 44 04 00
	00		 mov	 eax, DWORD PTR $T8[rbp]
  001ac	e9 38 06 00 00	 jmp	 $LN31@TryParseDN
$LN9@TryParseDN:

; 993  :         }
; 994  :         if (int_part_buf[0] == L'\0' && (frac_part_buf[0] == L'\0' || frac_part_buf[0] == L'.' && frac_part_buf[1] == L'\0'))

  001b1	b8 02 00 00 00	 mov	 eax, 2
  001b6	48 6b c0 00	 imul	 rax, rax, 0
  001ba	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR int_part_buf$[rbp]
  001c1	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  001c5	85 c0		 test	 eax, eax
  001c7	0f 85 a1 00 00
	00		 jne	 $LN11@TryParseDN
  001cd	b8 02 00 00 00	 mov	 eax, 2
  001d2	48 6b c0 00	 imul	 rax, rax, 0
  001d6	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR frac_part_buf$[rbp]
  001dd	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  001e1	85 c0		 test	 eax, eax
  001e3	74 31		 je	 SHORT $LN12@TryParseDN
  001e5	b8 02 00 00 00	 mov	 eax, 2
  001ea	48 6b c0 00	 imul	 rax, rax, 0
  001ee	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR frac_part_buf$[rbp]
  001f5	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  001f9	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  001fc	75 70		 jne	 SHORT $LN11@TryParseDN
  001fe	b8 02 00 00 00	 mov	 eax, 2
  00203	48 6b c0 01	 imul	 rax, rax, 1
  00207	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR frac_part_buf$[rbp]
  0020e	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  00212	85 c0		 test	 eax, eax
  00214	75 58		 jne	 SHORT $LN11@TryParseDN
$LN12@TryParseDN:

; 995  :         {
; 996  :             // 整数部と小数部がともに空ならばエラーとする
; 997  :             *result = 0;

  00216	48 8b 85 d8 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  0021d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 998  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  00223	8b 85 b8 06 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  00229	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0022e	85 c0		 test	 eax, eax
  00230	74 1e		 je	 SHORT $LN13@TryParseDN

; 999  :                 return (PMC_STATUS_FORMAT_ERROR);

  00232	c7 85 64 04 00
	00 f9 ff ff ff	 mov	 DWORD PTR $T9[rbp], -7
  0023c	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00240	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00245	8b 85 64 04 00
	00		 mov	 eax, DWORD PTR $T9[rbp]
  0024b	e9 99 05 00 00	 jmp	 $LN31@TryParseDN
$LN13@TryParseDN:

; 1000 :             return (PMC_STATUS_OK);

  00250	c7 85 84 04 00
	00 00 00 00 00	 mov	 DWORD PTR $T10[rbp], 0
  0025a	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0025e	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00263	8b 85 84 04 00
	00		 mov	 eax, DWORD PTR $T10[rbp]
  00269	e9 7b 05 00 00	 jmp	 $LN31@TryParseDN
$LN11@TryParseDN:

; 1001 :         }
; 1002 : 
; 1003 :         if (*o_sign < 0 && frac_part_buf[0] != L'\0')

  0026e	48 8b 85 c8 06
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  00275	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00278	85 c0		 test	 eax, eax
  0027a	7d 7f		 jge	 SHORT $LN14@TryParseDN
  0027c	b8 02 00 00 00	 mov	 eax, 2
  00281	48 6b c0 00	 imul	 rax, rax, 0
  00285	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR frac_part_buf$[rbp]
  0028c	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  00290	85 c0		 test	 eax, eax
  00292	74 67		 je	 SHORT $LN14@TryParseDN

; 1004 :         {
; 1005 :             // 負の符号が含まれていて、かつ小数部が存在する場合はエラー (OverflowException) とする。(小数点のみや小数部が '0' の連続のみでも存在するうちに入る)
; 1006 :             // ※エラーの条件がそうなっている根拠は不明だが実際問題として uint.Parse などではそうなっているため、それに合わせる。
; 1007 : 
; 1008 :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) == 0)

  00294	8b 85 b8 06 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  0029a	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0029f	85 c0		 test	 eax, eax
  002a1	75 58		 jne	 SHORT $LN14@TryParseDN

; 1009 :             {
; 1010 :                 // 負数が許可されていない場合
; 1011 : 
; 1012 :                 *result = 0;

  002a3	48 8b 85 d8 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  002aa	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1013 :                 if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  002b0	8b 85 b8 06 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  002b6	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002bb	85 c0		 test	 eax, eax
  002bd	74 1e		 je	 SHORT $LN16@TryParseDN

; 1014 :                     return (PMC_STATUS_OVERFLOW);

  002bf	c7 85 a4 04 00
	00 fc ff ff ff	 mov	 DWORD PTR $T11[rbp], -4
  002c9	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  002cd	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  002d2	8b 85 a4 04 00
	00		 mov	 eax, DWORD PTR $T11[rbp]
  002d8	e9 0c 05 00 00	 jmp	 $LN31@TryParseDN
$LN16@TryParseDN:

; 1015 :                 return (PMC_STATUS_OK);

  002dd	c7 85 c4 04 00
	00 00 00 00 00	 mov	 DWORD PTR $T12[rbp], 0
  002e7	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  002eb	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  002f0	8b 85 c4 04 00
	00		 mov	 eax, DWORD PTR $T12[rbp]
  002f6	e9 ee 04 00 00	 jmp	 $LN31@TryParseDN
$LN14@TryParseDN:

; 1016 :             }
; 1017 :         }
; 1018 : 
; 1019 :         if (int_part_buf[0] == L'0')

  002fb	b8 02 00 00 00	 mov	 eax, 2
  00300	48 6b c0 00	 imul	 rax, rax, 0
  00304	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR int_part_buf$[rbp]
  0030b	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  0030f	83 f8 30	 cmp	 eax, 48			; 00000030H
  00312	0f 85 89 00 00
	00		 jne	 $LN17@TryParseDN

; 1020 :         {
; 1021 :             // 整数部の先行する 0 を削除する
; 1022 :             wchar_t* s_ptr = int_part_buf;

  00318	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR int_part_buf$[rbp]
  0031f	48 89 85 28 01
	00 00		 mov	 QWORD PTR s_ptr$5[rbp], rax

; 1023 :             wchar_t* d_ptr = int_part_buf;

  00326	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR int_part_buf$[rbp]
  0032d	48 89 85 48 01
	00 00		 mov	 QWORD PTR d_ptr$6[rbp], rax
$LN2@TryParseDN:

; 1024 :             while (*s_ptr == L'0')

  00334	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR s_ptr$5[rbp]
  0033b	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0033e	83 f8 30	 cmp	 eax, 48			; 00000030H
  00341	75 14		 jne	 SHORT $LN4@TryParseDN

; 1025 :                 ++s_ptr;

  00343	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR s_ptr$5[rbp]
  0034a	48 83 c0 02	 add	 rax, 2
  0034e	48 89 85 28 01
	00 00		 mov	 QWORD PTR s_ptr$5[rbp], rax
  00355	eb dd		 jmp	 SHORT $LN2@TryParseDN
$LN4@TryParseDN:

; 1026 :             for (;;)
; 1027 :             {
; 1028 :                 *d_ptr = *s_ptr;

  00357	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR d_ptr$6[rbp]
  0035e	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR s_ptr$5[rbp]
  00365	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  00368	66 89 08	 mov	 WORD PTR [rax], cx

; 1029 :                 if (*s_ptr == L'\0')

  0036b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR s_ptr$5[rbp]
  00372	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00375	85 c0		 test	 eax, eax
  00377	75 02		 jne	 SHORT $LN18@TryParseDN

; 1030 :                     break;

  00379	eb 26		 jmp	 SHORT $LN17@TryParseDN
$LN18@TryParseDN:

; 1031 :                 ++s_ptr;

  0037b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR s_ptr$5[rbp]
  00382	48 83 c0 02	 add	 rax, 2
  00386	48 89 85 28 01
	00 00		 mov	 QWORD PTR s_ptr$5[rbp], rax

; 1032 :                 ++d_ptr;

  0038d	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR d_ptr$6[rbp]
  00394	48 83 c0 02	 add	 rax, 2
  00398	48 89 85 48 01
	00 00		 mov	 QWORD PTR d_ptr$6[rbp], rax

; 1033 :             }

  0039f	eb b6		 jmp	 SHORT $LN4@TryParseDN
$LN17@TryParseDN:

; 1034 :         }
; 1035 : 
; 1036 :         // 小数部の末尾の 0 を削除する
; 1037 :         wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

  003a1	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR frac_part_buf$[rbp]
  003a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  003ae	48 98		 cdqe
  003b0	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR frac_part_buf$[rbp]
  003b7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  003bb	48 89 85 68 01
	00 00		 mov	 QWORD PTR frac_ptr$[rbp], rax
$LN7@TryParseDN:

; 1038 :         while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

  003c2	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR frac_part_buf$[rbp]
  003c9	48 39 85 68 01
	00 00		 cmp	 QWORD PTR frac_ptr$[rbp], rax
  003d0	76 2d		 jbe	 SHORT $LN8@TryParseDN
  003d2	b8 02 00 00 00	 mov	 eax, 2
  003d7	48 6b c0 ff	 imul	 rax, rax, -1
  003db	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR frac_ptr$[rbp]
  003e2	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  003e6	83 f8 30	 cmp	 eax, 48			; 00000030H
  003e9	75 14		 jne	 SHORT $LN8@TryParseDN

; 1039 :             --frac_ptr;

  003eb	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR frac_ptr$[rbp]
  003f2	48 83 e8 02	 sub	 rax, 2
  003f6	48 89 85 68 01
	00 00		 mov	 QWORD PTR frac_ptr$[rbp], rax
  003fd	eb c3		 jmp	 SHORT $LN7@TryParseDN
$LN8@TryParseDN:

; 1040 :         *frac_ptr = L'\0';

  003ff	33 c0		 xor	 eax, eax
  00401	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR frac_ptr$[rbp]
  00408	66 89 01	 mov	 WORD PTR [rcx], ax

; 1041 : 
; 1042 :         // 小数部が 0 ではない場合、エラーとする
; 1043 :         if (!(frac_part_buf[0] == L'\0' || frac_part_buf[0] == L'.' && frac_part_buf[1] == L'\0'))

  0040b	b8 02 00 00 00	 mov	 eax, 2
  00410	48 6b c0 00	 imul	 rax, rax, 0
  00414	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR frac_part_buf$[rbp]
  0041b	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  0041f	85 c0		 test	 eax, eax
  00421	0f 84 89 00 00
	00		 je	 $LN19@TryParseDN
  00427	b8 02 00 00 00	 mov	 eax, 2
  0042c	48 6b c0 00	 imul	 rax, rax, 0
  00430	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR frac_part_buf$[rbp]
  00437	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  0043b	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0043e	75 18		 jne	 SHORT $LN20@TryParseDN
  00440	b8 02 00 00 00	 mov	 eax, 2
  00445	48 6b c0 01	 imul	 rax, rax, 1
  00449	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR frac_part_buf$[rbp]
  00450	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  00454	85 c0		 test	 eax, eax
  00456	74 58		 je	 SHORT $LN19@TryParseDN
$LN20@TryParseDN:

; 1044 :         {
; 1045 :             *result = 0;

  00458	48 8b 85 d8 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  0045f	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1046 :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  00465	8b 85 b8 06 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  0046b	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00470	85 c0		 test	 eax, eax
  00472	74 1e		 je	 SHORT $LN21@TryParseDN

; 1047 :                 return (PMC_STATUS_OVERFLOW);

  00474	c7 85 e4 04 00
	00 fc ff ff ff	 mov	 DWORD PTR $T13[rbp], -4
  0047e	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00482	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00487	8b 85 e4 04 00
	00		 mov	 eax, DWORD PTR $T13[rbp]
  0048d	e9 57 03 00 00	 jmp	 $LN31@TryParseDN
$LN21@TryParseDN:

; 1048 :             return (PMC_STATUS_OK);

  00492	c7 85 04 05 00
	00 00 00 00 00	 mov	 DWORD PTR $T14[rbp], 0
  0049c	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  004a0	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  004a5	8b 85 04 05 00
	00		 mov	 eax, DWORD PTR $T14[rbp]
  004ab	e9 39 03 00 00	 jmp	 $LN31@TryParseDN
$LN19@TryParseDN:

; 1049 :         }
; 1050 : 
; 1051 :         if (int_part_buf[0] == L'\0')

  004b0	b8 02 00 00 00	 mov	 eax, 2
  004b5	48 6b c0 00	 imul	 rax, rax, 0
  004b9	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR int_part_buf$[rbp]
  004c0	0f b7 04 01	 movzx	 eax, WORD PTR [rcx+rax]
  004c4	85 c0		 test	 eax, eax
  004c6	75 39		 jne	 SHORT $LN22@TryParseDN

; 1052 :         {
; 1053 :             // 整数部が空である場合
; 1054 : 
; 1055 :             // 符号を 0 に 修正する
; 1056 :             *o_sign = 0;

  004c8	48 8b 85 c8 06
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  004cf	c6 00 00	 mov	 BYTE PTR [rax], 0

; 1057 : 
; 1058 :             // 整数部に 0 を設定する
; 1059 :             int_part_buf[0] = L'0';

  004d2	b8 02 00 00 00	 mov	 eax, 2
  004d7	48 6b c0 00	 imul	 rax, rax, 0
  004db	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  004e0	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR int_part_buf$[rbp]
  004e7	66 89 0c 02	 mov	 WORD PTR [rdx+rax], cx

; 1060 :             int_part_buf[1] = L'\0';

  004eb	b8 02 00 00 00	 mov	 eax, 2
  004f0	48 6b c0 01	 imul	 rax, rax, 1
  004f4	33 c9		 xor	 ecx, ecx
  004f6	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR int_part_buf$[rbp]
  004fd	66 89 0c 02	 mov	 WORD PTR [rdx+rax], cx
$LN22@TryParseDN:

; 1061 :         }
; 1062 : 
; 1063 :         if (*o_sign < 0)

  00501	48 8b 85 c8 06
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  00508	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0050b	85 c0		 test	 eax, eax
  0050d	7d 67		 jge	 SHORT $LN23@TryParseDN

; 1064 :         {
; 1065 :             // 数値が負である場合
; 1066 : 
; 1067 :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) == 0)

  0050f	8b 85 b8 06 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  00515	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0051a	85 c0		 test	 eax, eax
  0051c	75 58		 jne	 SHORT $LN23@TryParseDN

; 1068 :             {
; 1069 :                 // 負数が許可されていない場合
; 1070 : 
; 1071 :                 *result = 0;

  0051e	48 8b 85 d8 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00525	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1072 :                 if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  0052b	8b 85 b8 06 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  00531	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00536	85 c0		 test	 eax, eax
  00538	74 1e		 je	 SHORT $LN25@TryParseDN

; 1073 :                     return (PMC_STATUS_OVERFLOW);

  0053a	c7 85 24 05 00
	00 fc ff ff ff	 mov	 DWORD PTR $T15[rbp], -4
  00544	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00548	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0054d	8b 85 24 05 00
	00		 mov	 eax, DWORD PTR $T15[rbp]
  00553	e9 91 02 00 00	 jmp	 $LN31@TryParseDN
$LN25@TryParseDN:

; 1074 :                 return (PMC_STATUS_OK);

  00558	c7 85 44 05 00
	00 00 00 00 00	 mov	 DWORD PTR $T16[rbp], 0
  00562	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00566	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0056b	8b 85 44 05 00
	00		 mov	 eax, DWORD PTR $T16[rbp]
  00571	e9 73 02 00 00	 jmp	 $LN31@TryParseDN
$LN23@TryParseDN:

; 1075 :             }
; 1076 :         }
; 1077 : 
; 1078 :         // 小数部は捨てる
; 1079 :         root.DeallocateString(frac_part_buf);

  00576	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR frac_part_buf$[rbp]
  0057d	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00581	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1080 : 
; 1081 :         // 整数部を 10^word_digit_count を基数としたバイト列に変換する
; 1082 :         __UNIT_TYPE* bin_buf = root.AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT);

  00586	48 63 45 04	 movsxd	 rax, DWORD PTR word_digit_count$[rbp]
  0058a	48 89 85 88 06
	00 00		 mov	 QWORD PTR tv212[rbp], rax
  00591	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR int_part_buf$[rbp]
  00598	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0059e	48 98		 cdqe
  005a0	48 8b 8d 88 06
	00 00		 mov	 rcx, QWORD PTR tv212[rbp]
  005a7	48 8b d1	 mov	 rdx, rcx
  005aa	48 8b c8	 mov	 rcx, rax
  005ad	e8 00 00 00 00	 call	 _DIVIDE_CEILING_SIZE
  005b2	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  005b6	48 8b d0	 mov	 rdx, rax
  005b9	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  005bd	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  005c2	48 89 85 88 01
	00 00		 mov	 QWORD PTR bin_buf$[rbp], rax

; 1083 :         __UNIT_TYPE bin_buf_count;
; 1084 :         BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);

  005c9	4c 8d 85 a8 01
	00 00		 lea	 r8, QWORD PTR bin_buf_count$[rbp]
  005d0	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR bin_buf$[rbp]
  005d7	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR int_part_buf$[rbp]
  005de	e8 00 00 00 00	 call	 ?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z ; Palmtree::Math::Core::Internal::BuildBinaryFromDecimalString

; 1085 :         root.CheckBlock(bin_buf);

  005e3	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR bin_buf$[rbp]
  005ea	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  005ee	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 1086 :         root.DeallocateString(int_part_buf);

  005f3	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR int_part_buf$[rbp]
  005fa	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  005fe	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1087 : 
; 1088 :         // 10^word_digit_count を基数としたバイト列を 10 を基数としたバイト列に変換する
; 1089 :         __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;

  00603	48 6b 85 a8 01
	00 00 40	 imul	 rax, QWORD PTR bin_buf_count$[rbp], 64 ; 00000040H
  0060b	48 89 85 c8 01
	00 00		 mov	 QWORD PTR o_bit_count$[rbp], rax

; 1090 :         *o_abs = root.AllocateNumber(o_bit_count);

  00612	48 8b 95 c8 01
	00 00		 mov	 rdx, QWORD PTR o_bit_count$[rbp]
  00619	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0061d	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00622	48 8b 8d d0 06
	00 00		 mov	 rcx, QWORD PTR o_abs$[rbp]
  00629	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1091 :         ConvertCardinalNumber(bin_buf, bin_buf_count, (*o_abs)->BLOCK);

  0062c	48 8b 85 d0 06
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00633	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00636	4c 8b 40 40	 mov	 r8, QWORD PTR [rax+64]
  0063a	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR bin_buf_count$[rbp]
  00641	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR bin_buf$[rbp]
  00648	e8 00 00 00 00	 call	 ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z ; Palmtree::Math::Core::Internal::ConvertCardinalNumber

; 1092 :         root.CheckNumber(*o_abs);

  0064d	48 8b 85 d0 06
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00654	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00657	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0065b	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1093 :         root.DeallocateBlock(bin_buf);

  00660	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR bin_buf$[rbp]
  00667	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0066b	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 1094 :         CommitNumber(*o_abs);

  00670	48 8b 85 d0 06
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00677	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0067a	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1095 :         if ((*o_abs)->IS_ZERO)

  0067f	48 8b 85 d0 06
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00686	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00689	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0068c	83 e0 01	 and	 eax, 1
  0068f	85 c0		 test	 eax, eax
  00691	74 26		 je	 SHORT $LN26@TryParseDN

; 1096 :         {
; 1097 :             root.DeallocateNumber(*o_abs);

  00693	48 8b 85 d0 06
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  0069a	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0069d	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  006a1	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1098 :             *o_abs = &number_zero;

  006a6	48 8b 85 d0 06
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  006ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  006b4	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1099 :         }
; 1100 :         else

  006b7	eb 13		 jmp	 SHORT $LN27@TryParseDN
$LN26@TryParseDN:

; 1101 :             root.UnlinkNumber(*o_abs);

  006b9	48 8b 85 d0 06
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  006c0	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  006c3	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  006c7	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN27@TryParseDN:

; 1102 : #ifdef _DEBUG
; 1103 :         if (*o_sign != 0 && *o_sign != 1 && *o_sign != -1)

  006cc	48 8b 85 c8 06
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  006d3	0f be 00	 movsx	 eax, BYTE PTR [rax]
  006d6	85 c0		 test	 eax, eax
  006d8	74 4b		 je	 SHORT $LN28@TryParseDN
  006da	48 8b 85 c8 06
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  006e1	0f be 00	 movsx	 eax, BYTE PTR [rax]
  006e4	83 f8 01	 cmp	 eax, 1
  006e7	74 3c		 je	 SHORT $LN28@TryParseDN
  006e9	48 8b 85 c8 06
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  006f0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  006f3	83 f8 ff	 cmp	 eax, -1
  006f6	74 2d		 je	 SHORT $LN28@TryParseDN

; 1104 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;1");

  006f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1DG@OHPDJC@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@
  006ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00706	48 8d 8d 68 05
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  0070d	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00712	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00719	48 8d 8d 68 05
	00 00		 lea	 rcx, QWORD PTR $T17[rbp]
  00720	e8 00 00 00 00	 call	 _CxxThrowException
$LN28@TryParseDN:

; 1105 :         if (*o_sign == 0 && !(*o_abs)->IS_ZERO)

  00725	48 8b 85 c8 06
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  0072c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0072f	85 c0		 test	 eax, eax
  00731	75 41		 jne	 SHORT $LN29@TryParseDN
  00733	48 8b 85 d0 06
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  0073a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0073d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00740	83 e0 01	 and	 eax, 1
  00743	85 c0		 test	 eax, eax
  00745	75 2d		 jne	 SHORT $LN29@TryParseDN

; 1106 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;2");

  00747	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1DG@BCFCFMHM@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@
  0074e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00755	48 8d 8d b8 05
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  0075c	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00761	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00768	48 8d 8d b8 05
	00 00		 lea	 rcx, QWORD PTR $T18[rbp]
  0076f	e8 00 00 00 00	 call	 _CxxThrowException
$LN29@TryParseDN:

; 1107 :         if (*o_sign != 0 && (*o_abs)->IS_ZERO)

  00774	48 8b 85 c8 06
	00 00		 mov	 rax, QWORD PTR o_sign$[rbp]
  0077b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0077e	85 c0		 test	 eax, eax
  00780	74 41		 je	 SHORT $LN30@TryParseDN
  00782	48 8b 85 d0 06
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00789	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0078c	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0078f	83 e0 01	 and	 eax, 1
  00792	85 c0		 test	 eax, eax
  00794	74 2d		 je	 SHORT $LN30@TryParseDN

; 1108 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;3");

  00796	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1DG@KKOODLBJ@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAT@
  0079d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  007a4	48 8d 8d 08 06
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  007ab	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  007b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  007b7	48 8d 8d 08 06
	00 00		 lea	 rcx, QWORD PTR $T19[rbp]
  007be	e8 00 00 00 00	 call	 _CxxThrowException
$LN30@TryParseDN:

; 1109 : #endif
; 1110 :         *result = 1;

  007c3	48 8b 85 d8 06
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  007ca	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1111 :         return (PMC_STATUS_OK);

  007d0	c7 85 54 06 00
	00 00 00 00 00	 mov	 DWORD PTR $T20[rbp], 0
  007da	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  007de	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  007e3	8b 85 54 06 00
	00		 mov	 eax, DWORD PTR $T20[rbp]
$LN31@TryParseDN:

; 1112 :     }

  007e9	48 8b f8	 mov	 rdi, rax
  007ec	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  007f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z$rtcFrameData
  007f7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007fc	48 8b c7	 mov	 rax, rdi
  007ff	48 8d a5 98 06
	00 00		 lea	 rsp, QWORD PTR [rbp+1688]
  00806	5f		 pop	 rdi
  00807	5d		 pop	 rbp
  00808	c3		 ret	 0
$LN35@TryParseDN:
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::TryParseDN
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
word_digit_count$ = 4
root$ = 40
source_len$ = 104
int_part_buf_count$ = 136
int_part_buf$ = 168
frac_part_buf_count$ = 200
frac_part_buf$ = 232
result_parsing$ = 260
s_ptr$5 = 296
d_ptr$6 = 328
frac_ptr$ = 360
bin_buf$ = 392
bin_buf_count$ = 424
o_bit_count$ = 456
$T7 = 1060
$T8 = 1092
$T9 = 1124
$T10 = 1156
$T11 = 1188
$T12 = 1220
$T13 = 1252
$T14 = 1284
$T15 = 1316
$T16 = 1348
$T17 = 1384
$T18 = 1464
$T19 = 1544
$T20 = 1620
$T21 = 1656
tv88 = 1668
tv212 = 1672
source$ = 1712
number_styles$ = 1720
format_option$ = 1728
o_sign$ = 1736
o_abs$ = 1744
result$ = 1752
?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
word_digit_count$ = 4
root$ = 40
source_len$ = 104
int_part_buf_count$ = 136
int_part_buf$ = 168
frac_part_buf_count$ = 200
frac_part_buf$ = 232
result_parsing$ = 260
s_ptr$5 = 296
d_ptr$6 = 328
frac_ptr$ = 360
bin_buf$ = 392
bin_buf_count$ = 424
o_bit_count$ = 456
$T7 = 1060
$T8 = 1092
$T9 = 1124
$T10 = 1156
$T11 = 1188
$T12 = 1220
$T13 = 1252
$T14 = 1284
$T15 = 1316
$T16 = 1348
$T17 = 1384
$T18 = 1464
$T19 = 1544
$T20 = 1620
$T21 = 1656
tv88 = 1668
tv212 = 1672
source$ = 1712
number_styles$ = 1720
format_option$ = 1728
o_sign$ = 1736
o_abs$ = 1744
result$ = 1752
?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
_TEXT	SEGMENT
root$ = 8
work_buf$ = 72
work_buf_count$ = 104
w_tail$4 = 136
$T5 = 360
tv84 = 376
in_buf$ = 416
in_buf_count$ = 424
out_buf$ = 432
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z PROC ; Palmtree::Math::Core::Internal::ConvertCardinalNumber, COMDAT

; 948  :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  00034	48 c7 85 68 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T5[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 949  :         ResourceHolderUINT root;

  0004b	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0004f	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00054	90		 npad	 1

; 950  :         __UNIT_TYPE* work_buf = root.AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1));

  00055	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR in_buf_count$[rbp]
  0005c	48 ff c0	 inc	 rax
  0005f	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0006a	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0006f	48 89 45 48	 mov	 QWORD PTR work_buf$[rbp], rax

; 951  :         __UNIT_TYPE work_buf_count = 1;

  00073	48 c7 45 68 01
	00 00 00	 mov	 QWORD PTR work_buf_count$[rbp], 1

; 952  :         work_buf[0] = in_buf[0];

  0007b	b8 08 00 00 00	 mov	 eax, 8
  00080	48 6b c0 00	 imul	 rax, rax, 0
  00084	b9 08 00 00 00	 mov	 ecx, 8
  00089	48 6b c9 00	 imul	 rcx, rcx, 0
  0008d	48 8b 55 48	 mov	 rdx, QWORD PTR work_buf$[rbp]
  00091	4c 8b 85 a0 01
	00 00		 mov	 r8, QWORD PTR in_buf$[rbp]
  00098	49 8b 04 00	 mov	 rax, QWORD PTR [r8+rax]
  0009c	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 953  :         ++in_buf;

  000a0	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR in_buf$[rbp]
  000a7	48 83 c0 08	 add	 rax, 8
  000ab	48 89 85 a0 01
	00 00		 mov	 QWORD PTR in_buf$[rbp], rax

; 954  :         --in_buf_count;

  000b2	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR in_buf_count$[rbp]
  000b9	48 ff c8	 dec	 rax
  000bc	48 89 85 a8 01
	00 00		 mov	 QWORD PTR in_buf_count$[rbp], rax
$LN2@ConvertCar:

; 955  :         while (in_buf_count > 0)

  000c3	48 83 bd a8 01
	00 00 00	 cmp	 QWORD PTR in_buf_count$[rbp], 0
  000cb	76 6b		 jbe	 SHORT $LN3@ConvertCar

; 956  :         {
; 957  :             __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

  000cd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APEA_KPEA_K_K1@ZEA
  000d4	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv84[rbp], rax
  000db	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR in_buf$[rbp]
  000e2	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  000e5	48 8b 55 68	 mov	 rdx, QWORD PTR work_buf_count$[rbp]
  000e9	48 8b 4d 48	 mov	 rcx, QWORD PTR work_buf$[rbp]
  000ed	ff 95 78 01 00
	00		 call	 QWORD PTR tv84[rbp]
  000f3	48 89 85 88 00
	00 00		 mov	 QWORD PTR w_tail$4[rbp], rax

; 958  :             work_buf_count = w_tail - work_buf;

  000fa	48 8b 45 48	 mov	 rax, QWORD PTR work_buf$[rbp]
  000fe	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR w_tail$4[rbp]
  00105	48 2b c8	 sub	 rcx, rax
  00108	48 8b c1	 mov	 rax, rcx
  0010b	48 c1 f8 03	 sar	 rax, 3
  0010f	48 89 45 68	 mov	 QWORD PTR work_buf_count$[rbp], rax

; 959  :             ++in_buf;

  00113	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR in_buf$[rbp]
  0011a	48 83 c0 08	 add	 rax, 8
  0011e	48 89 85 a0 01
	00 00		 mov	 QWORD PTR in_buf$[rbp], rax

; 960  :             --in_buf_count;

  00125	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR in_buf_count$[rbp]
  0012c	48 ff c8	 dec	 rax
  0012f	48 89 85 a8 01
	00 00		 mov	 QWORD PTR in_buf_count$[rbp], rax

; 961  :         }

  00136	eb 8b		 jmp	 SHORT $LN2@ConvertCar
$LN3@ConvertCar:

; 962  :         root.CheckBlock(work_buf);

  00138	48 8b 55 48	 mov	 rdx, QWORD PTR work_buf$[rbp]
  0013c	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00140	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 963  :         _COPY_MEMORY_UNIT(out_buf, work_buf, work_buf_count);

  00145	4c 8b 45 68	 mov	 r8, QWORD PTR work_buf_count$[rbp]
  00149	48 8b 55 48	 mov	 rdx, QWORD PTR work_buf$[rbp]
  0014d	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR out_buf$[rbp]
  00154	e8 00 00 00 00	 call	 _COPY_MEMORY_UNIT
  00159	90		 npad	 1

; 964  :     }

  0015a	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0015e	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00163	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00167	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z$rtcFrameData
  0016e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00173	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  0017a	5f		 pop	 rdi
  0017b	5d		 pop	 rbp
  0017c	c3		 ret	 0
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z ENDP ; Palmtree::Math::Core::Internal::ConvertCardinalNumber
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
work_buf$ = 72
work_buf_count$ = 104
w_tail$4 = 136
$T5 = 360
tv84 = 376
in_buf$ = 416
in_buf_count$ = 424
out_buf$ = 432
?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ConvertCardinalNumber'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ConvertCardinalNumber'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
work_buf$ = 72
work_buf_count$ = 104
w_tail$4 = 136
$T5 = 360
tv84 = 376
in_buf$ = 416
in_buf_count$ = 424
out_buf$ = 432
?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ConvertCardinalNumber'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ConvertCardinalNumber'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
_TEXT	SEGMENT
k$ = 8
count$ = 40
u_buf$ = 288
u_count$ = 296
x$ = 304
?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX, COMDAT

; 805  :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 806  :         __UNIT_TYPE k = x;

  00040	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR x$[rbp]
  00047	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 807  :         __UNIT_TYPE count = u_count >> 5;

  0004b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00052	48 c1 e8 05	 shr	 rax, 5
  00056	48 89 45 28	 mov	 QWORD PTR count$[rbp], rax
$LN2@MultiplyAn:

; 808  :         while (count > 0)

  0005a	48 83 7d 28 00	 cmp	 QWORD PTR count$[rbp], 0
  0005f	0f 86 80 07 00
	00		 jbe	 $LN3@MultiplyAn

; 809  :         {
; 810  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  00065	b8 08 00 00 00	 mov	 eax, 8
  0006a	48 6b c0 00	 imul	 rax, rax, 0
  0006e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00075	48 03 c8	 add	 rcx, rax
  00078	48 8b c1	 mov	 rax, rcx
  0007b	b9 08 00 00 00	 mov	 ecx, 8
  00080	48 6b c9 00	 imul	 rcx, rcx, 0
  00084	4c 8b c0	 mov	 r8, rax
  00087	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0008e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00092	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00096	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0009b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 811  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  0009f	b8 08 00 00 00	 mov	 eax, 8
  000a4	48 6b c0 01	 imul	 rax, rax, 1
  000a8	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  000af	48 03 c8	 add	 rcx, rax
  000b2	48 8b c1	 mov	 rax, rcx
  000b5	b9 08 00 00 00	 mov	 ecx, 8
  000ba	48 6b c9 01	 imul	 rcx, rcx, 1
  000be	4c 8b c0	 mov	 r8, rax
  000c1	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  000c8	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  000cc	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  000d0	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  000d5	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 812  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  000d9	b8 08 00 00 00	 mov	 eax, 8
  000de	48 6b c0 02	 imul	 rax, rax, 2
  000e2	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  000e9	48 03 c8	 add	 rcx, rax
  000ec	48 8b c1	 mov	 rax, rcx
  000ef	b9 08 00 00 00	 mov	 ecx, 8
  000f4	48 6b c9 02	 imul	 rcx, rcx, 2
  000f8	4c 8b c0	 mov	 r8, rax
  000fb	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00102	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00106	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0010a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0010f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 813  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  00113	b8 08 00 00 00	 mov	 eax, 8
  00118	48 6b c0 03	 imul	 rax, rax, 3
  0011c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00123	48 03 c8	 add	 rcx, rax
  00126	48 8b c1	 mov	 rax, rcx
  00129	b9 08 00 00 00	 mov	 ecx, 8
  0012e	48 6b c9 03	 imul	 rcx, rcx, 3
  00132	4c 8b c0	 mov	 r8, rax
  00135	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0013c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00140	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00144	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00149	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 814  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

  0014d	b8 08 00 00 00	 mov	 eax, 8
  00152	48 6b c0 04	 imul	 rax, rax, 4
  00156	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0015d	48 03 c8	 add	 rcx, rax
  00160	48 8b c1	 mov	 rax, rcx
  00163	b9 08 00 00 00	 mov	 ecx, 8
  00168	48 6b c9 04	 imul	 rcx, rcx, 4
  0016c	4c 8b c0	 mov	 r8, rax
  0016f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00176	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0017a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0017e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00183	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 815  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

  00187	b8 08 00 00 00	 mov	 eax, 8
  0018c	48 6b c0 05	 imul	 rax, rax, 5
  00190	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00197	48 03 c8	 add	 rcx, rax
  0019a	48 8b c1	 mov	 rax, rcx
  0019d	b9 08 00 00 00	 mov	 ecx, 8
  001a2	48 6b c9 05	 imul	 rcx, rcx, 5
  001a6	4c 8b c0	 mov	 r8, rax
  001a9	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  001b0	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  001b4	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  001b8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  001bd	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 816  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

  001c1	b8 08 00 00 00	 mov	 eax, 8
  001c6	48 6b c0 06	 imul	 rax, rax, 6
  001ca	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  001d1	48 03 c8	 add	 rcx, rax
  001d4	48 8b c1	 mov	 rax, rcx
  001d7	b9 08 00 00 00	 mov	 ecx, 8
  001dc	48 6b c9 06	 imul	 rcx, rcx, 6
  001e0	4c 8b c0	 mov	 r8, rax
  001e3	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  001ea	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  001ee	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  001f2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  001f7	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 817  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

  001fb	b8 08 00 00 00	 mov	 eax, 8
  00200	48 6b c0 07	 imul	 rax, rax, 7
  00204	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0020b	48 03 c8	 add	 rcx, rax
  0020e	48 8b c1	 mov	 rax, rcx
  00211	b9 08 00 00 00	 mov	 ecx, 8
  00216	48 6b c9 07	 imul	 rcx, rcx, 7
  0021a	4c 8b c0	 mov	 r8, rax
  0021d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00224	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00228	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0022c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00231	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 818  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

  00235	b8 08 00 00 00	 mov	 eax, 8
  0023a	48 6b c0 08	 imul	 rax, rax, 8
  0023e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00245	48 03 c8	 add	 rcx, rax
  00248	48 8b c1	 mov	 rax, rcx
  0024b	b9 08 00 00 00	 mov	 ecx, 8
  00250	48 6b c9 08	 imul	 rcx, rcx, 8
  00254	4c 8b c0	 mov	 r8, rax
  00257	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0025e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00262	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00266	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0026b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 819  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

  0026f	b8 08 00 00 00	 mov	 eax, 8
  00274	48 6b c0 09	 imul	 rax, rax, 9
  00278	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0027f	48 03 c8	 add	 rcx, rax
  00282	48 8b c1	 mov	 rax, rcx
  00285	b9 08 00 00 00	 mov	 ecx, 8
  0028a	48 6b c9 09	 imul	 rcx, rcx, 9
  0028e	4c 8b c0	 mov	 r8, rax
  00291	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00298	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0029c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  002a0	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  002a5	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 820  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

  002a9	b8 08 00 00 00	 mov	 eax, 8
  002ae	48 6b c0 0a	 imul	 rax, rax, 10
  002b2	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  002b9	48 03 c8	 add	 rcx, rax
  002bc	48 8b c1	 mov	 rax, rcx
  002bf	b9 08 00 00 00	 mov	 ecx, 8
  002c4	48 6b c9 0a	 imul	 rcx, rcx, 10
  002c8	4c 8b c0	 mov	 r8, rax
  002cb	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  002d2	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  002d6	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  002da	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  002df	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 821  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

  002e3	b8 08 00 00 00	 mov	 eax, 8
  002e8	48 6b c0 0b	 imul	 rax, rax, 11
  002ec	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  002f3	48 03 c8	 add	 rcx, rax
  002f6	48 8b c1	 mov	 rax, rcx
  002f9	b9 08 00 00 00	 mov	 ecx, 8
  002fe	48 6b c9 0b	 imul	 rcx, rcx, 11
  00302	4c 8b c0	 mov	 r8, rax
  00305	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0030c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00310	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00314	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00319	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 822  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

  0031d	b8 08 00 00 00	 mov	 eax, 8
  00322	48 6b c0 0c	 imul	 rax, rax, 12
  00326	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0032d	48 03 c8	 add	 rcx, rax
  00330	48 8b c1	 mov	 rax, rcx
  00333	b9 08 00 00 00	 mov	 ecx, 8
  00338	48 6b c9 0c	 imul	 rcx, rcx, 12
  0033c	4c 8b c0	 mov	 r8, rax
  0033f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00346	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0034a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0034e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00353	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 823  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

  00357	b8 08 00 00 00	 mov	 eax, 8
  0035c	48 6b c0 0d	 imul	 rax, rax, 13
  00360	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00367	48 03 c8	 add	 rcx, rax
  0036a	48 8b c1	 mov	 rax, rcx
  0036d	b9 08 00 00 00	 mov	 ecx, 8
  00372	48 6b c9 0d	 imul	 rcx, rcx, 13
  00376	4c 8b c0	 mov	 r8, rax
  00379	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00380	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00384	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00388	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0038d	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 824  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

  00391	b8 08 00 00 00	 mov	 eax, 8
  00396	48 6b c0 0e	 imul	 rax, rax, 14
  0039a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  003a1	48 03 c8	 add	 rcx, rax
  003a4	48 8b c1	 mov	 rax, rcx
  003a7	b9 08 00 00 00	 mov	 ecx, 8
  003ac	48 6b c9 0e	 imul	 rcx, rcx, 14
  003b0	4c 8b c0	 mov	 r8, rax
  003b3	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  003ba	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  003be	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  003c2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  003c7	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 825  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

  003cb	b8 08 00 00 00	 mov	 eax, 8
  003d0	48 6b c0 0f	 imul	 rax, rax, 15
  003d4	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  003db	48 03 c8	 add	 rcx, rax
  003de	48 8b c1	 mov	 rax, rcx
  003e1	b9 08 00 00 00	 mov	 ecx, 8
  003e6	48 6b c9 0f	 imul	 rcx, rcx, 15
  003ea	4c 8b c0	 mov	 r8, rax
  003ed	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  003f4	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  003f8	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  003fc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00401	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 826  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[16], &u_buf[16]);

  00405	b8 08 00 00 00	 mov	 eax, 8
  0040a	48 6b c0 10	 imul	 rax, rax, 16
  0040e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00415	48 03 c8	 add	 rcx, rax
  00418	48 8b c1	 mov	 rax, rcx
  0041b	b9 08 00 00 00	 mov	 ecx, 8
  00420	48 6b c9 10	 imul	 rcx, rcx, 16
  00424	4c 8b c0	 mov	 r8, rax
  00427	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0042e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00432	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00436	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0043b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 827  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[17], &u_buf[17]);

  0043f	b8 08 00 00 00	 mov	 eax, 8
  00444	48 6b c0 11	 imul	 rax, rax, 17
  00448	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0044f	48 03 c8	 add	 rcx, rax
  00452	48 8b c1	 mov	 rax, rcx
  00455	b9 08 00 00 00	 mov	 ecx, 8
  0045a	48 6b c9 11	 imul	 rcx, rcx, 17
  0045e	4c 8b c0	 mov	 r8, rax
  00461	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00468	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0046c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00470	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00475	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 828  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[18], &u_buf[18]);

  00479	b8 08 00 00 00	 mov	 eax, 8
  0047e	48 6b c0 12	 imul	 rax, rax, 18
  00482	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00489	48 03 c8	 add	 rcx, rax
  0048c	48 8b c1	 mov	 rax, rcx
  0048f	b9 08 00 00 00	 mov	 ecx, 8
  00494	48 6b c9 12	 imul	 rcx, rcx, 18
  00498	4c 8b c0	 mov	 r8, rax
  0049b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  004a2	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  004a6	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  004aa	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  004af	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 829  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[19], &u_buf[19]);

  004b3	b8 08 00 00 00	 mov	 eax, 8
  004b8	48 6b c0 13	 imul	 rax, rax, 19
  004bc	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  004c3	48 03 c8	 add	 rcx, rax
  004c6	48 8b c1	 mov	 rax, rcx
  004c9	b9 08 00 00 00	 mov	 ecx, 8
  004ce	48 6b c9 13	 imul	 rcx, rcx, 19
  004d2	4c 8b c0	 mov	 r8, rax
  004d5	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  004dc	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  004e0	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  004e4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  004e9	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 830  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[20], &u_buf[20]);

  004ed	b8 08 00 00 00	 mov	 eax, 8
  004f2	48 6b c0 14	 imul	 rax, rax, 20
  004f6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  004fd	48 03 c8	 add	 rcx, rax
  00500	48 8b c1	 mov	 rax, rcx
  00503	b9 08 00 00 00	 mov	 ecx, 8
  00508	48 6b c9 14	 imul	 rcx, rcx, 20
  0050c	4c 8b c0	 mov	 r8, rax
  0050f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00516	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0051a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0051e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00523	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 831  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[21], &u_buf[21]);

  00527	b8 08 00 00 00	 mov	 eax, 8
  0052c	48 6b c0 15	 imul	 rax, rax, 21
  00530	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00537	48 03 c8	 add	 rcx, rax
  0053a	48 8b c1	 mov	 rax, rcx
  0053d	b9 08 00 00 00	 mov	 ecx, 8
  00542	48 6b c9 15	 imul	 rcx, rcx, 21
  00546	4c 8b c0	 mov	 r8, rax
  00549	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00550	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00554	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00558	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0055d	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 832  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[22], &u_buf[22]);

  00561	b8 08 00 00 00	 mov	 eax, 8
  00566	48 6b c0 16	 imul	 rax, rax, 22
  0056a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00571	48 03 c8	 add	 rcx, rax
  00574	48 8b c1	 mov	 rax, rcx
  00577	b9 08 00 00 00	 mov	 ecx, 8
  0057c	48 6b c9 16	 imul	 rcx, rcx, 22
  00580	4c 8b c0	 mov	 r8, rax
  00583	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0058a	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0058e	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00592	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00597	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 833  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[23], &u_buf[23]);

  0059b	b8 08 00 00 00	 mov	 eax, 8
  005a0	48 6b c0 17	 imul	 rax, rax, 23
  005a4	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  005ab	48 03 c8	 add	 rcx, rax
  005ae	48 8b c1	 mov	 rax, rcx
  005b1	b9 08 00 00 00	 mov	 ecx, 8
  005b6	48 6b c9 17	 imul	 rcx, rcx, 23
  005ba	4c 8b c0	 mov	 r8, rax
  005bd	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  005c4	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  005c8	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  005cc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  005d1	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 834  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[24], &u_buf[24]);

  005d5	b8 08 00 00 00	 mov	 eax, 8
  005da	48 6b c0 18	 imul	 rax, rax, 24
  005de	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  005e5	48 03 c8	 add	 rcx, rax
  005e8	48 8b c1	 mov	 rax, rcx
  005eb	b9 08 00 00 00	 mov	 ecx, 8
  005f0	48 6b c9 18	 imul	 rcx, rcx, 24
  005f4	4c 8b c0	 mov	 r8, rax
  005f7	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  005fe	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00602	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00606	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0060b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 835  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[25], &u_buf[25]);

  0060f	b8 08 00 00 00	 mov	 eax, 8
  00614	48 6b c0 19	 imul	 rax, rax, 25
  00618	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0061f	48 03 c8	 add	 rcx, rax
  00622	48 8b c1	 mov	 rax, rcx
  00625	b9 08 00 00 00	 mov	 ecx, 8
  0062a	48 6b c9 19	 imul	 rcx, rcx, 25
  0062e	4c 8b c0	 mov	 r8, rax
  00631	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00638	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0063c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00640	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00645	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 836  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[26], &u_buf[26]);

  00649	b8 08 00 00 00	 mov	 eax, 8
  0064e	48 6b c0 1a	 imul	 rax, rax, 26
  00652	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00659	48 03 c8	 add	 rcx, rax
  0065c	48 8b c1	 mov	 rax, rcx
  0065f	b9 08 00 00 00	 mov	 ecx, 8
  00664	48 6b c9 1a	 imul	 rcx, rcx, 26
  00668	4c 8b c0	 mov	 r8, rax
  0066b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00672	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00676	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0067a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0067f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 837  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[27], &u_buf[27]);

  00683	b8 08 00 00 00	 mov	 eax, 8
  00688	48 6b c0 1b	 imul	 rax, rax, 27
  0068c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00693	48 03 c8	 add	 rcx, rax
  00696	48 8b c1	 mov	 rax, rcx
  00699	b9 08 00 00 00	 mov	 ecx, 8
  0069e	48 6b c9 1b	 imul	 rcx, rcx, 27
  006a2	4c 8b c0	 mov	 r8, rax
  006a5	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  006ac	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  006b0	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  006b4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  006b9	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 838  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[28], &u_buf[28]);

  006bd	b8 08 00 00 00	 mov	 eax, 8
  006c2	48 6b c0 1c	 imul	 rax, rax, 28
  006c6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  006cd	48 03 c8	 add	 rcx, rax
  006d0	48 8b c1	 mov	 rax, rcx
  006d3	b9 08 00 00 00	 mov	 ecx, 8
  006d8	48 6b c9 1c	 imul	 rcx, rcx, 28
  006dc	4c 8b c0	 mov	 r8, rax
  006df	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  006e6	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  006ea	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  006ee	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  006f3	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 839  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[29], &u_buf[29]);

  006f7	b8 08 00 00 00	 mov	 eax, 8
  006fc	48 6b c0 1d	 imul	 rax, rax, 29
  00700	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00707	48 03 c8	 add	 rcx, rax
  0070a	48 8b c1	 mov	 rax, rcx
  0070d	b9 08 00 00 00	 mov	 ecx, 8
  00712	48 6b c9 1d	 imul	 rcx, rcx, 29
  00716	4c 8b c0	 mov	 r8, rax
  00719	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00720	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00724	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00728	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0072d	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 840  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[30], &u_buf[30]);

  00731	b8 08 00 00 00	 mov	 eax, 8
  00736	48 6b c0 1e	 imul	 rax, rax, 30
  0073a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00741	48 03 c8	 add	 rcx, rax
  00744	48 8b c1	 mov	 rax, rcx
  00747	b9 08 00 00 00	 mov	 ecx, 8
  0074c	48 6b c9 1e	 imul	 rcx, rcx, 30
  00750	4c 8b c0	 mov	 r8, rax
  00753	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0075a	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0075e	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00762	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00767	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 841  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[31], &u_buf[31]);

  0076b	b8 08 00 00 00	 mov	 eax, 8
  00770	48 6b c0 1f	 imul	 rax, rax, 31
  00774	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0077b	48 03 c8	 add	 rcx, rax
  0077e	48 8b c1	 mov	 rax, rcx
  00781	b9 08 00 00 00	 mov	 ecx, 8
  00786	48 6b c9 1f	 imul	 rcx, rcx, 31
  0078a	4c 8b c0	 mov	 r8, rax
  0078d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00794	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00798	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0079c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  007a1	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 842  :             u_buf += 32;

  007a5	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  007ac	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  007b2	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 843  :             --count;

  007b9	48 8b 45 28	 mov	 rax, QWORD PTR count$[rbp]
  007bd	48 ff c8	 dec	 rax
  007c0	48 89 45 28	 mov	 QWORD PTR count$[rbp], rax

; 844  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 845  :             if (sizeof(k) == sizeof(_UINT32_T))

  007c4	33 c0		 xor	 eax, eax
  007c6	85 c0		 test	 eax, eax
  007c8	74 0c		 je	 SHORT $LN4@MultiplyAn

; 846  :                 AddToMULTI32Counter(32);

  007ca	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  007cf	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 847  :             else

  007d4	eb 0a		 jmp	 SHORT $LN5@MultiplyAn
$LN4@MultiplyAn:

; 848  :                 AddToMULTI64Counter(32);

  007d6	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  007db	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
$LN5@MultiplyAn:

; 849  : #endif
; 850  :         }

  007e0	e9 75 f8 ff ff	 jmp	 $LN2@MultiplyAn
$LN3@MultiplyAn:

; 851  : 
; 852  :         if (u_count & 0x10)

  007e5	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  007ec	48 83 e0 10	 and	 rax, 16
  007f0	48 85 c0	 test	 rax, rax
  007f3	0f 84 d0 03 00
	00		 je	 $LN6@MultiplyAn

; 853  :         {
; 854  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  007f9	b8 08 00 00 00	 mov	 eax, 8
  007fe	48 6b c0 00	 imul	 rax, rax, 0
  00802	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00809	48 03 c8	 add	 rcx, rax
  0080c	48 8b c1	 mov	 rax, rcx
  0080f	b9 08 00 00 00	 mov	 ecx, 8
  00814	48 6b c9 00	 imul	 rcx, rcx, 0
  00818	4c 8b c0	 mov	 r8, rax
  0081b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00822	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00826	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0082a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0082f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 855  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  00833	b8 08 00 00 00	 mov	 eax, 8
  00838	48 6b c0 01	 imul	 rax, rax, 1
  0083c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00843	48 03 c8	 add	 rcx, rax
  00846	48 8b c1	 mov	 rax, rcx
  00849	b9 08 00 00 00	 mov	 ecx, 8
  0084e	48 6b c9 01	 imul	 rcx, rcx, 1
  00852	4c 8b c0	 mov	 r8, rax
  00855	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0085c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00860	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00864	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00869	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 856  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  0086d	b8 08 00 00 00	 mov	 eax, 8
  00872	48 6b c0 02	 imul	 rax, rax, 2
  00876	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0087d	48 03 c8	 add	 rcx, rax
  00880	48 8b c1	 mov	 rax, rcx
  00883	b9 08 00 00 00	 mov	 ecx, 8
  00888	48 6b c9 02	 imul	 rcx, rcx, 2
  0088c	4c 8b c0	 mov	 r8, rax
  0088f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00896	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0089a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0089e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  008a3	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 857  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  008a7	b8 08 00 00 00	 mov	 eax, 8
  008ac	48 6b c0 03	 imul	 rax, rax, 3
  008b0	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  008b7	48 03 c8	 add	 rcx, rax
  008ba	48 8b c1	 mov	 rax, rcx
  008bd	b9 08 00 00 00	 mov	 ecx, 8
  008c2	48 6b c9 03	 imul	 rcx, rcx, 3
  008c6	4c 8b c0	 mov	 r8, rax
  008c9	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  008d0	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  008d4	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  008d8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  008dd	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 858  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

  008e1	b8 08 00 00 00	 mov	 eax, 8
  008e6	48 6b c0 04	 imul	 rax, rax, 4
  008ea	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  008f1	48 03 c8	 add	 rcx, rax
  008f4	48 8b c1	 mov	 rax, rcx
  008f7	b9 08 00 00 00	 mov	 ecx, 8
  008fc	48 6b c9 04	 imul	 rcx, rcx, 4
  00900	4c 8b c0	 mov	 r8, rax
  00903	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0090a	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0090e	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00912	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00917	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 859  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

  0091b	b8 08 00 00 00	 mov	 eax, 8
  00920	48 6b c0 05	 imul	 rax, rax, 5
  00924	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0092b	48 03 c8	 add	 rcx, rax
  0092e	48 8b c1	 mov	 rax, rcx
  00931	b9 08 00 00 00	 mov	 ecx, 8
  00936	48 6b c9 05	 imul	 rcx, rcx, 5
  0093a	4c 8b c0	 mov	 r8, rax
  0093d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00944	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00948	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0094c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00951	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 860  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

  00955	b8 08 00 00 00	 mov	 eax, 8
  0095a	48 6b c0 06	 imul	 rax, rax, 6
  0095e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00965	48 03 c8	 add	 rcx, rax
  00968	48 8b c1	 mov	 rax, rcx
  0096b	b9 08 00 00 00	 mov	 ecx, 8
  00970	48 6b c9 06	 imul	 rcx, rcx, 6
  00974	4c 8b c0	 mov	 r8, rax
  00977	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0097e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00982	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00986	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0098b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 861  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

  0098f	b8 08 00 00 00	 mov	 eax, 8
  00994	48 6b c0 07	 imul	 rax, rax, 7
  00998	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0099f	48 03 c8	 add	 rcx, rax
  009a2	48 8b c1	 mov	 rax, rcx
  009a5	b9 08 00 00 00	 mov	 ecx, 8
  009aa	48 6b c9 07	 imul	 rcx, rcx, 7
  009ae	4c 8b c0	 mov	 r8, rax
  009b1	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  009b8	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  009bc	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  009c0	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  009c5	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 862  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

  009c9	b8 08 00 00 00	 mov	 eax, 8
  009ce	48 6b c0 08	 imul	 rax, rax, 8
  009d2	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  009d9	48 03 c8	 add	 rcx, rax
  009dc	48 8b c1	 mov	 rax, rcx
  009df	b9 08 00 00 00	 mov	 ecx, 8
  009e4	48 6b c9 08	 imul	 rcx, rcx, 8
  009e8	4c 8b c0	 mov	 r8, rax
  009eb	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  009f2	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  009f6	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  009fa	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  009ff	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 863  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

  00a03	b8 08 00 00 00	 mov	 eax, 8
  00a08	48 6b c0 09	 imul	 rax, rax, 9
  00a0c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00a13	48 03 c8	 add	 rcx, rax
  00a16	48 8b c1	 mov	 rax, rcx
  00a19	b9 08 00 00 00	 mov	 ecx, 8
  00a1e	48 6b c9 09	 imul	 rcx, rcx, 9
  00a22	4c 8b c0	 mov	 r8, rax
  00a25	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00a2c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00a30	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00a34	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00a39	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 864  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

  00a3d	b8 08 00 00 00	 mov	 eax, 8
  00a42	48 6b c0 0a	 imul	 rax, rax, 10
  00a46	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00a4d	48 03 c8	 add	 rcx, rax
  00a50	48 8b c1	 mov	 rax, rcx
  00a53	b9 08 00 00 00	 mov	 ecx, 8
  00a58	48 6b c9 0a	 imul	 rcx, rcx, 10
  00a5c	4c 8b c0	 mov	 r8, rax
  00a5f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00a66	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00a6a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00a6e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00a73	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 865  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

  00a77	b8 08 00 00 00	 mov	 eax, 8
  00a7c	48 6b c0 0b	 imul	 rax, rax, 11
  00a80	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00a87	48 03 c8	 add	 rcx, rax
  00a8a	48 8b c1	 mov	 rax, rcx
  00a8d	b9 08 00 00 00	 mov	 ecx, 8
  00a92	48 6b c9 0b	 imul	 rcx, rcx, 11
  00a96	4c 8b c0	 mov	 r8, rax
  00a99	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00aa0	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00aa4	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00aa8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00aad	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 866  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

  00ab1	b8 08 00 00 00	 mov	 eax, 8
  00ab6	48 6b c0 0c	 imul	 rax, rax, 12
  00aba	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00ac1	48 03 c8	 add	 rcx, rax
  00ac4	48 8b c1	 mov	 rax, rcx
  00ac7	b9 08 00 00 00	 mov	 ecx, 8
  00acc	48 6b c9 0c	 imul	 rcx, rcx, 12
  00ad0	4c 8b c0	 mov	 r8, rax
  00ad3	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00ada	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00ade	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00ae2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00ae7	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 867  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

  00aeb	b8 08 00 00 00	 mov	 eax, 8
  00af0	48 6b c0 0d	 imul	 rax, rax, 13
  00af4	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00afb	48 03 c8	 add	 rcx, rax
  00afe	48 8b c1	 mov	 rax, rcx
  00b01	b9 08 00 00 00	 mov	 ecx, 8
  00b06	48 6b c9 0d	 imul	 rcx, rcx, 13
  00b0a	4c 8b c0	 mov	 r8, rax
  00b0d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00b14	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00b18	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00b1c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00b21	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 868  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

  00b25	b8 08 00 00 00	 mov	 eax, 8
  00b2a	48 6b c0 0e	 imul	 rax, rax, 14
  00b2e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00b35	48 03 c8	 add	 rcx, rax
  00b38	48 8b c1	 mov	 rax, rcx
  00b3b	b9 08 00 00 00	 mov	 ecx, 8
  00b40	48 6b c9 0e	 imul	 rcx, rcx, 14
  00b44	4c 8b c0	 mov	 r8, rax
  00b47	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00b4e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00b52	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00b56	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00b5b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 869  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

  00b5f	b8 08 00 00 00	 mov	 eax, 8
  00b64	48 6b c0 0f	 imul	 rax, rax, 15
  00b68	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00b6f	48 03 c8	 add	 rcx, rax
  00b72	48 8b c1	 mov	 rax, rcx
  00b75	b9 08 00 00 00	 mov	 ecx, 8
  00b7a	48 6b c9 0f	 imul	 rcx, rcx, 15
  00b7e	4c 8b c0	 mov	 r8, rax
  00b81	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00b88	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00b8c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00b90	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00b95	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 870  :             u_buf += 16;

  00b99	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00ba0	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00ba6	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 871  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 872  :             if (sizeof(k) == sizeof(_UINT32_T))

  00bad	33 c0		 xor	 eax, eax
  00baf	85 c0		 test	 eax, eax
  00bb1	74 0c		 je	 SHORT $LN7@MultiplyAn

; 873  :                 AddToMULTI32Counter(16);

  00bb3	b9 10 00 00 00	 mov	 ecx, 16
  00bb8	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 874  :             else

  00bbd	eb 0a		 jmp	 SHORT $LN8@MultiplyAn
$LN7@MultiplyAn:

; 875  :                 AddToMULTI64Counter(16);

  00bbf	b9 10 00 00 00	 mov	 ecx, 16
  00bc4	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
$LN8@MultiplyAn:
$LN6@MultiplyAn:

; 876  : #endif
; 877  :         }
; 878  : 
; 879  :         if (u_count & 0x8)

  00bc9	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00bd0	48 83 e0 08	 and	 rax, 8
  00bd4	48 85 c0	 test	 rax, rax
  00bd7	0f 84 fe 01 00
	00		 je	 $LN9@MultiplyAn

; 880  :         {
; 881  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  00bdd	b8 08 00 00 00	 mov	 eax, 8
  00be2	48 6b c0 00	 imul	 rax, rax, 0
  00be6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00bed	48 03 c8	 add	 rcx, rax
  00bf0	48 8b c1	 mov	 rax, rcx
  00bf3	b9 08 00 00 00	 mov	 ecx, 8
  00bf8	48 6b c9 00	 imul	 rcx, rcx, 0
  00bfc	4c 8b c0	 mov	 r8, rax
  00bff	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00c06	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00c0a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00c0e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00c13	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 882  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  00c17	b8 08 00 00 00	 mov	 eax, 8
  00c1c	48 6b c0 01	 imul	 rax, rax, 1
  00c20	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00c27	48 03 c8	 add	 rcx, rax
  00c2a	48 8b c1	 mov	 rax, rcx
  00c2d	b9 08 00 00 00	 mov	 ecx, 8
  00c32	48 6b c9 01	 imul	 rcx, rcx, 1
  00c36	4c 8b c0	 mov	 r8, rax
  00c39	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00c40	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00c44	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00c48	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00c4d	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 883  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  00c51	b8 08 00 00 00	 mov	 eax, 8
  00c56	48 6b c0 02	 imul	 rax, rax, 2
  00c5a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00c61	48 03 c8	 add	 rcx, rax
  00c64	48 8b c1	 mov	 rax, rcx
  00c67	b9 08 00 00 00	 mov	 ecx, 8
  00c6c	48 6b c9 02	 imul	 rcx, rcx, 2
  00c70	4c 8b c0	 mov	 r8, rax
  00c73	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00c7a	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00c7e	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00c82	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00c87	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 884  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  00c8b	b8 08 00 00 00	 mov	 eax, 8
  00c90	48 6b c0 03	 imul	 rax, rax, 3
  00c94	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00c9b	48 03 c8	 add	 rcx, rax
  00c9e	48 8b c1	 mov	 rax, rcx
  00ca1	b9 08 00 00 00	 mov	 ecx, 8
  00ca6	48 6b c9 03	 imul	 rcx, rcx, 3
  00caa	4c 8b c0	 mov	 r8, rax
  00cad	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00cb4	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00cb8	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00cbc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00cc1	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 885  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

  00cc5	b8 08 00 00 00	 mov	 eax, 8
  00cca	48 6b c0 04	 imul	 rax, rax, 4
  00cce	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00cd5	48 03 c8	 add	 rcx, rax
  00cd8	48 8b c1	 mov	 rax, rcx
  00cdb	b9 08 00 00 00	 mov	 ecx, 8
  00ce0	48 6b c9 04	 imul	 rcx, rcx, 4
  00ce4	4c 8b c0	 mov	 r8, rax
  00ce7	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00cee	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00cf2	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00cf6	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00cfb	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 886  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

  00cff	b8 08 00 00 00	 mov	 eax, 8
  00d04	48 6b c0 05	 imul	 rax, rax, 5
  00d08	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00d0f	48 03 c8	 add	 rcx, rax
  00d12	48 8b c1	 mov	 rax, rcx
  00d15	b9 08 00 00 00	 mov	 ecx, 8
  00d1a	48 6b c9 05	 imul	 rcx, rcx, 5
  00d1e	4c 8b c0	 mov	 r8, rax
  00d21	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00d28	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00d2c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00d30	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00d35	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 887  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

  00d39	b8 08 00 00 00	 mov	 eax, 8
  00d3e	48 6b c0 06	 imul	 rax, rax, 6
  00d42	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00d49	48 03 c8	 add	 rcx, rax
  00d4c	48 8b c1	 mov	 rax, rcx
  00d4f	b9 08 00 00 00	 mov	 ecx, 8
  00d54	48 6b c9 06	 imul	 rcx, rcx, 6
  00d58	4c 8b c0	 mov	 r8, rax
  00d5b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00d62	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00d66	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00d6a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00d6f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 888  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

  00d73	b8 08 00 00 00	 mov	 eax, 8
  00d78	48 6b c0 07	 imul	 rax, rax, 7
  00d7c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00d83	48 03 c8	 add	 rcx, rax
  00d86	48 8b c1	 mov	 rax, rcx
  00d89	b9 08 00 00 00	 mov	 ecx, 8
  00d8e	48 6b c9 07	 imul	 rcx, rcx, 7
  00d92	4c 8b c0	 mov	 r8, rax
  00d95	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00d9c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00da0	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00da4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00da9	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 889  :             u_buf += 8;

  00dad	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00db4	48 83 c0 40	 add	 rax, 64			; 00000040H
  00db8	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 890  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 891  :             if (sizeof(k) == sizeof(_UINT32_T))

  00dbf	33 c0		 xor	 eax, eax
  00dc1	85 c0		 test	 eax, eax
  00dc3	74 0c		 je	 SHORT $LN10@MultiplyAn

; 892  :                 AddToMULTI32Counter(8);

  00dc5	b9 08 00 00 00	 mov	 ecx, 8
  00dca	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 893  :             else

  00dcf	eb 0a		 jmp	 SHORT $LN11@MultiplyAn
$LN10@MultiplyAn:

; 894  :                 AddToMULTI64Counter(8);

  00dd1	b9 08 00 00 00	 mov	 ecx, 8
  00dd6	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
$LN11@MultiplyAn:
$LN9@MultiplyAn:

; 895  : #endif
; 896  :         }
; 897  : 
; 898  :         if (u_count & 0x4)

  00ddb	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00de2	48 83 e0 04	 and	 rax, 4
  00de6	48 85 c0	 test	 rax, rax
  00de9	0f 84 16 01 00
	00		 je	 $LN12@MultiplyAn

; 899  :         {
; 900  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  00def	b8 08 00 00 00	 mov	 eax, 8
  00df4	48 6b c0 00	 imul	 rax, rax, 0
  00df8	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00dff	48 03 c8	 add	 rcx, rax
  00e02	48 8b c1	 mov	 rax, rcx
  00e05	b9 08 00 00 00	 mov	 ecx, 8
  00e0a	48 6b c9 00	 imul	 rcx, rcx, 0
  00e0e	4c 8b c0	 mov	 r8, rax
  00e11	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00e18	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00e1c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00e20	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00e25	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 901  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  00e29	b8 08 00 00 00	 mov	 eax, 8
  00e2e	48 6b c0 01	 imul	 rax, rax, 1
  00e32	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00e39	48 03 c8	 add	 rcx, rax
  00e3c	48 8b c1	 mov	 rax, rcx
  00e3f	b9 08 00 00 00	 mov	 ecx, 8
  00e44	48 6b c9 01	 imul	 rcx, rcx, 1
  00e48	4c 8b c0	 mov	 r8, rax
  00e4b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00e52	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00e56	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00e5a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00e5f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 902  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  00e63	b8 08 00 00 00	 mov	 eax, 8
  00e68	48 6b c0 02	 imul	 rax, rax, 2
  00e6c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00e73	48 03 c8	 add	 rcx, rax
  00e76	48 8b c1	 mov	 rax, rcx
  00e79	b9 08 00 00 00	 mov	 ecx, 8
  00e7e	48 6b c9 02	 imul	 rcx, rcx, 2
  00e82	4c 8b c0	 mov	 r8, rax
  00e85	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00e8c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00e90	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00e94	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00e99	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 903  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  00e9d	b8 08 00 00 00	 mov	 eax, 8
  00ea2	48 6b c0 03	 imul	 rax, rax, 3
  00ea6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00ead	48 03 c8	 add	 rcx, rax
  00eb0	48 8b c1	 mov	 rax, rcx
  00eb3	b9 08 00 00 00	 mov	 ecx, 8
  00eb8	48 6b c9 03	 imul	 rcx, rcx, 3
  00ebc	4c 8b c0	 mov	 r8, rax
  00ebf	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00ec6	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00eca	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00ece	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00ed3	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 904  :             u_buf += 4;

  00ed7	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00ede	48 83 c0 20	 add	 rax, 32			; 00000020H
  00ee2	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 905  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 906  :             if (sizeof(k) == sizeof(_UINT32_T))

  00ee9	33 c0		 xor	 eax, eax
  00eeb	85 c0		 test	 eax, eax
  00eed	74 0c		 je	 SHORT $LN13@MultiplyAn

; 907  :                 AddToMULTI32Counter(4);

  00eef	b9 04 00 00 00	 mov	 ecx, 4
  00ef4	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 908  :             else

  00ef9	eb 0a		 jmp	 SHORT $LN14@MultiplyAn
$LN13@MultiplyAn:

; 909  :                 AddToMULTI64Counter(4);

  00efb	b9 04 00 00 00	 mov	 ecx, 4
  00f00	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
$LN14@MultiplyAn:
$LN12@MultiplyAn:

; 910  : #endif
; 911  :         }
; 912  : 
; 913  :         if (u_count & 0x2)

  00f05	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00f0c	48 83 e0 02	 and	 rax, 2
  00f10	48 85 c0	 test	 rax, rax
  00f13	0f 84 a2 00 00
	00		 je	 $LN15@MultiplyAn

; 914  :         {
; 915  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  00f19	b8 08 00 00 00	 mov	 eax, 8
  00f1e	48 6b c0 00	 imul	 rax, rax, 0
  00f22	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00f29	48 03 c8	 add	 rcx, rax
  00f2c	48 8b c1	 mov	 rax, rcx
  00f2f	b9 08 00 00 00	 mov	 ecx, 8
  00f34	48 6b c9 00	 imul	 rcx, rcx, 0
  00f38	4c 8b c0	 mov	 r8, rax
  00f3b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00f42	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00f46	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00f4a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00f4f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 916  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  00f53	b8 08 00 00 00	 mov	 eax, 8
  00f58	48 6b c0 01	 imul	 rax, rax, 1
  00f5c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00f63	48 03 c8	 add	 rcx, rax
  00f66	48 8b c1	 mov	 rax, rcx
  00f69	b9 08 00 00 00	 mov	 ecx, 8
  00f6e	48 6b c9 01	 imul	 rcx, rcx, 1
  00f72	4c 8b c0	 mov	 r8, rax
  00f75	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00f7c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00f80	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00f84	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00f89	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 917  :             u_buf += 2;

  00f8d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00f94	48 83 c0 10	 add	 rax, 16
  00f98	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 918  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 919  :             if (sizeof(k) == sizeof(_UINT32_T))

  00f9f	33 c0		 xor	 eax, eax
  00fa1	85 c0		 test	 eax, eax
  00fa3	74 0c		 je	 SHORT $LN16@MultiplyAn

; 920  :                 AddToMULTI32Counter(2);

  00fa5	b9 02 00 00 00	 mov	 ecx, 2
  00faa	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 921  :             else

  00faf	eb 0a		 jmp	 SHORT $LN17@MultiplyAn
$LN16@MultiplyAn:

; 922  :                 AddToMULTI64Counter(2);

  00fb1	b9 02 00 00 00	 mov	 ecx, 2
  00fb6	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
$LN17@MultiplyAn:
$LN15@MultiplyAn:

; 923  : #endif
; 924  :         }
; 925  : 
; 926  :         if (u_count & 0x1)

  00fbb	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00fc2	48 83 e0 01	 and	 rax, 1
  00fc6	48 85 c0	 test	 rax, rax
  00fc9	74 5e		 je	 SHORT $LN18@MultiplyAn

; 927  :         {
; 928  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  00fcb	b8 08 00 00 00	 mov	 eax, 8
  00fd0	48 6b c0 00	 imul	 rax, rax, 0
  00fd4	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00fdb	48 03 c8	 add	 rcx, rax
  00fde	48 8b c1	 mov	 rax, rcx
  00fe1	b9 08 00 00 00	 mov	 ecx, 8
  00fe6	48 6b c9 00	 imul	 rcx, rcx, 0
  00fea	4c 8b c0	 mov	 r8, rax
  00fed	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00ff4	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00ff8	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00ffc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  01001	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 929  :             u_buf += 1;

  01005	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0100c	48 83 c0 08	 add	 rax, 8
  01010	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 930  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 931  :             if (sizeof(k) == sizeof(_UINT32_T))

  01017	33 c0		 xor	 eax, eax
  01019	85 c0		 test	 eax, eax
  0101b	74 07		 je	 SHORT $LN19@MultiplyAn

; 932  :                 IncrementMULTI32Counter();

  0101d	e8 00 00 00 00	 call	 ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter

; 933  :             else

  01022	eb 05		 jmp	 SHORT $LN20@MultiplyAn
$LN19@MultiplyAn:

; 934  :                 IncrementMULTI64Counter();

  01024	e8 00 00 00 00	 call	 ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
$LN20@MultiplyAn:
$LN18@MultiplyAn:

; 935  : #endif
; 936  :         }
; 937  : 
; 938  :         if (k > 0)

  01029	48 83 7d 08 00	 cmp	 QWORD PTR k$[rbp], 0
  0102e	76 2a		 jbe	 SHORT $LN21@MultiplyAn

; 939  :         {
; 940  :             u_buf[0] = k;

  01030	b8 08 00 00 00	 mov	 eax, 8
  01035	48 6b c0 00	 imul	 rax, rax, 0
  01039	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  01040	48 8b 55 08	 mov	 rdx, QWORD PTR k$[rbp]
  01044	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 941  :             u_buf += 1;

  01048	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0104f	48 83 c0 08	 add	 rax, 8
  01053	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax
$LN21@MultiplyAn:

; 942  :         }
; 943  : 
; 944  :         return (u_buf);

  0105a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]

; 945  :     }

  01061	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  01068	5f		 pop	 rdi
  01069	5d		 pop	 rbp
  0106a	c3		 ret	 0
?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
_TEXT	SEGMENT
k$ = 8
count$ = 40
u_buf$ = 288
u_count$ = 296
x$ = 304
?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL, COMDAT

; 662  :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 663  :         __UNIT_TYPE k = x;

  00040	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR x$[rbp]
  00047	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 664  :         __UNIT_TYPE count = u_count >> 5;

  0004b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00052	48 c1 e8 05	 shr	 rax, 5
  00056	48 89 45 28	 mov	 QWORD PTR count$[rbp], rax
$LN2@MultiplyAn:

; 665  :         while (count > 0)

  0005a	48 83 7d 28 00	 cmp	 QWORD PTR count$[rbp], 0
  0005f	0f 86 80 07 00
	00		 jbe	 $LN3@MultiplyAn

; 666  :         {
; 667  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  00065	b8 08 00 00 00	 mov	 eax, 8
  0006a	48 6b c0 00	 imul	 rax, rax, 0
  0006e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00075	48 03 c8	 add	 rcx, rax
  00078	48 8b c1	 mov	 rax, rcx
  0007b	b9 08 00 00 00	 mov	 ecx, 8
  00080	48 6b c9 00	 imul	 rcx, rcx, 0
  00084	4c 8b c0	 mov	 r8, rax
  00087	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0008e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00092	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00096	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0009b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 668  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

  0009f	b8 08 00 00 00	 mov	 eax, 8
  000a4	48 6b c0 01	 imul	 rax, rax, 1
  000a8	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  000af	48 03 c8	 add	 rcx, rax
  000b2	48 8b c1	 mov	 rax, rcx
  000b5	b9 08 00 00 00	 mov	 ecx, 8
  000ba	48 6b c9 01	 imul	 rcx, rcx, 1
  000be	4c 8b c0	 mov	 r8, rax
  000c1	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  000c8	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  000cc	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  000d0	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  000d5	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 669  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

  000d9	b8 08 00 00 00	 mov	 eax, 8
  000de	48 6b c0 02	 imul	 rax, rax, 2
  000e2	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  000e9	48 03 c8	 add	 rcx, rax
  000ec	48 8b c1	 mov	 rax, rcx
  000ef	b9 08 00 00 00	 mov	 ecx, 8
  000f4	48 6b c9 02	 imul	 rcx, rcx, 2
  000f8	4c 8b c0	 mov	 r8, rax
  000fb	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00102	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00106	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0010a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0010f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 670  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

  00113	b8 08 00 00 00	 mov	 eax, 8
  00118	48 6b c0 03	 imul	 rax, rax, 3
  0011c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00123	48 03 c8	 add	 rcx, rax
  00126	48 8b c1	 mov	 rax, rcx
  00129	b9 08 00 00 00	 mov	 ecx, 8
  0012e	48 6b c9 03	 imul	 rcx, rcx, 3
  00132	4c 8b c0	 mov	 r8, rax
  00135	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0013c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00140	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00144	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00149	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 671  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

  0014d	b8 08 00 00 00	 mov	 eax, 8
  00152	48 6b c0 04	 imul	 rax, rax, 4
  00156	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0015d	48 03 c8	 add	 rcx, rax
  00160	48 8b c1	 mov	 rax, rcx
  00163	b9 08 00 00 00	 mov	 ecx, 8
  00168	48 6b c9 04	 imul	 rcx, rcx, 4
  0016c	4c 8b c0	 mov	 r8, rax
  0016f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00176	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0017a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0017e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00183	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 672  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

  00187	b8 08 00 00 00	 mov	 eax, 8
  0018c	48 6b c0 05	 imul	 rax, rax, 5
  00190	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00197	48 03 c8	 add	 rcx, rax
  0019a	48 8b c1	 mov	 rax, rcx
  0019d	b9 08 00 00 00	 mov	 ecx, 8
  001a2	48 6b c9 05	 imul	 rcx, rcx, 5
  001a6	4c 8b c0	 mov	 r8, rax
  001a9	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  001b0	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  001b4	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  001b8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  001bd	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 673  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

  001c1	b8 08 00 00 00	 mov	 eax, 8
  001c6	48 6b c0 06	 imul	 rax, rax, 6
  001ca	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  001d1	48 03 c8	 add	 rcx, rax
  001d4	48 8b c1	 mov	 rax, rcx
  001d7	b9 08 00 00 00	 mov	 ecx, 8
  001dc	48 6b c9 06	 imul	 rcx, rcx, 6
  001e0	4c 8b c0	 mov	 r8, rax
  001e3	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  001ea	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  001ee	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  001f2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  001f7	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 674  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

  001fb	b8 08 00 00 00	 mov	 eax, 8
  00200	48 6b c0 07	 imul	 rax, rax, 7
  00204	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0020b	48 03 c8	 add	 rcx, rax
  0020e	48 8b c1	 mov	 rax, rcx
  00211	b9 08 00 00 00	 mov	 ecx, 8
  00216	48 6b c9 07	 imul	 rcx, rcx, 7
  0021a	4c 8b c0	 mov	 r8, rax
  0021d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00224	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00228	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0022c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00231	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 675  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

  00235	b8 08 00 00 00	 mov	 eax, 8
  0023a	48 6b c0 08	 imul	 rax, rax, 8
  0023e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00245	48 03 c8	 add	 rcx, rax
  00248	48 8b c1	 mov	 rax, rcx
  0024b	b9 08 00 00 00	 mov	 ecx, 8
  00250	48 6b c9 08	 imul	 rcx, rcx, 8
  00254	4c 8b c0	 mov	 r8, rax
  00257	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0025e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00262	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00266	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0026b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 676  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

  0026f	b8 08 00 00 00	 mov	 eax, 8
  00274	48 6b c0 09	 imul	 rax, rax, 9
  00278	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0027f	48 03 c8	 add	 rcx, rax
  00282	48 8b c1	 mov	 rax, rcx
  00285	b9 08 00 00 00	 mov	 ecx, 8
  0028a	48 6b c9 09	 imul	 rcx, rcx, 9
  0028e	4c 8b c0	 mov	 r8, rax
  00291	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00298	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0029c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  002a0	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  002a5	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 677  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

  002a9	b8 08 00 00 00	 mov	 eax, 8
  002ae	48 6b c0 0a	 imul	 rax, rax, 10
  002b2	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  002b9	48 03 c8	 add	 rcx, rax
  002bc	48 8b c1	 mov	 rax, rcx
  002bf	b9 08 00 00 00	 mov	 ecx, 8
  002c4	48 6b c9 0a	 imul	 rcx, rcx, 10
  002c8	4c 8b c0	 mov	 r8, rax
  002cb	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  002d2	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  002d6	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  002da	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  002df	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 678  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

  002e3	b8 08 00 00 00	 mov	 eax, 8
  002e8	48 6b c0 0b	 imul	 rax, rax, 11
  002ec	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  002f3	48 03 c8	 add	 rcx, rax
  002f6	48 8b c1	 mov	 rax, rcx
  002f9	b9 08 00 00 00	 mov	 ecx, 8
  002fe	48 6b c9 0b	 imul	 rcx, rcx, 11
  00302	4c 8b c0	 mov	 r8, rax
  00305	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0030c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00310	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00314	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00319	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 679  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

  0031d	b8 08 00 00 00	 mov	 eax, 8
  00322	48 6b c0 0c	 imul	 rax, rax, 12
  00326	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0032d	48 03 c8	 add	 rcx, rax
  00330	48 8b c1	 mov	 rax, rcx
  00333	b9 08 00 00 00	 mov	 ecx, 8
  00338	48 6b c9 0c	 imul	 rcx, rcx, 12
  0033c	4c 8b c0	 mov	 r8, rax
  0033f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00346	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0034a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0034e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00353	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 680  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

  00357	b8 08 00 00 00	 mov	 eax, 8
  0035c	48 6b c0 0d	 imul	 rax, rax, 13
  00360	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00367	48 03 c8	 add	 rcx, rax
  0036a	48 8b c1	 mov	 rax, rcx
  0036d	b9 08 00 00 00	 mov	 ecx, 8
  00372	48 6b c9 0d	 imul	 rcx, rcx, 13
  00376	4c 8b c0	 mov	 r8, rax
  00379	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00380	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00384	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00388	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0038d	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 681  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

  00391	b8 08 00 00 00	 mov	 eax, 8
  00396	48 6b c0 0e	 imul	 rax, rax, 14
  0039a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  003a1	48 03 c8	 add	 rcx, rax
  003a4	48 8b c1	 mov	 rax, rcx
  003a7	b9 08 00 00 00	 mov	 ecx, 8
  003ac	48 6b c9 0e	 imul	 rcx, rcx, 14
  003b0	4c 8b c0	 mov	 r8, rax
  003b3	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  003ba	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  003be	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  003c2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  003c7	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 682  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

  003cb	b8 08 00 00 00	 mov	 eax, 8
  003d0	48 6b c0 0f	 imul	 rax, rax, 15
  003d4	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  003db	48 03 c8	 add	 rcx, rax
  003de	48 8b c1	 mov	 rax, rcx
  003e1	b9 08 00 00 00	 mov	 ecx, 8
  003e6	48 6b c9 0f	 imul	 rcx, rcx, 15
  003ea	4c 8b c0	 mov	 r8, rax
  003ed	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  003f4	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  003f8	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  003fc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00401	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 683  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[16], &u_buf[16]);

  00405	b8 08 00 00 00	 mov	 eax, 8
  0040a	48 6b c0 10	 imul	 rax, rax, 16
  0040e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00415	48 03 c8	 add	 rcx, rax
  00418	48 8b c1	 mov	 rax, rcx
  0041b	b9 08 00 00 00	 mov	 ecx, 8
  00420	48 6b c9 10	 imul	 rcx, rcx, 16
  00424	4c 8b c0	 mov	 r8, rax
  00427	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0042e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00432	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00436	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0043b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 684  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[17], &u_buf[17]);

  0043f	b8 08 00 00 00	 mov	 eax, 8
  00444	48 6b c0 11	 imul	 rax, rax, 17
  00448	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0044f	48 03 c8	 add	 rcx, rax
  00452	48 8b c1	 mov	 rax, rcx
  00455	b9 08 00 00 00	 mov	 ecx, 8
  0045a	48 6b c9 11	 imul	 rcx, rcx, 17
  0045e	4c 8b c0	 mov	 r8, rax
  00461	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00468	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0046c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00470	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00475	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 685  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[18], &u_buf[18]);

  00479	b8 08 00 00 00	 mov	 eax, 8
  0047e	48 6b c0 12	 imul	 rax, rax, 18
  00482	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00489	48 03 c8	 add	 rcx, rax
  0048c	48 8b c1	 mov	 rax, rcx
  0048f	b9 08 00 00 00	 mov	 ecx, 8
  00494	48 6b c9 12	 imul	 rcx, rcx, 18
  00498	4c 8b c0	 mov	 r8, rax
  0049b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  004a2	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  004a6	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  004aa	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  004af	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 686  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[19], &u_buf[19]);

  004b3	b8 08 00 00 00	 mov	 eax, 8
  004b8	48 6b c0 13	 imul	 rax, rax, 19
  004bc	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  004c3	48 03 c8	 add	 rcx, rax
  004c6	48 8b c1	 mov	 rax, rcx
  004c9	b9 08 00 00 00	 mov	 ecx, 8
  004ce	48 6b c9 13	 imul	 rcx, rcx, 19
  004d2	4c 8b c0	 mov	 r8, rax
  004d5	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  004dc	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  004e0	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  004e4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  004e9	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 687  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[20], &u_buf[20]);

  004ed	b8 08 00 00 00	 mov	 eax, 8
  004f2	48 6b c0 14	 imul	 rax, rax, 20
  004f6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  004fd	48 03 c8	 add	 rcx, rax
  00500	48 8b c1	 mov	 rax, rcx
  00503	b9 08 00 00 00	 mov	 ecx, 8
  00508	48 6b c9 14	 imul	 rcx, rcx, 20
  0050c	4c 8b c0	 mov	 r8, rax
  0050f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00516	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0051a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0051e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00523	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 688  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[21], &u_buf[21]);

  00527	b8 08 00 00 00	 mov	 eax, 8
  0052c	48 6b c0 15	 imul	 rax, rax, 21
  00530	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00537	48 03 c8	 add	 rcx, rax
  0053a	48 8b c1	 mov	 rax, rcx
  0053d	b9 08 00 00 00	 mov	 ecx, 8
  00542	48 6b c9 15	 imul	 rcx, rcx, 21
  00546	4c 8b c0	 mov	 r8, rax
  00549	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00550	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00554	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00558	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0055d	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 689  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[22], &u_buf[22]);

  00561	b8 08 00 00 00	 mov	 eax, 8
  00566	48 6b c0 16	 imul	 rax, rax, 22
  0056a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00571	48 03 c8	 add	 rcx, rax
  00574	48 8b c1	 mov	 rax, rcx
  00577	b9 08 00 00 00	 mov	 ecx, 8
  0057c	48 6b c9 16	 imul	 rcx, rcx, 22
  00580	4c 8b c0	 mov	 r8, rax
  00583	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0058a	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0058e	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00592	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00597	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 690  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[23], &u_buf[23]);

  0059b	b8 08 00 00 00	 mov	 eax, 8
  005a0	48 6b c0 17	 imul	 rax, rax, 23
  005a4	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  005ab	48 03 c8	 add	 rcx, rax
  005ae	48 8b c1	 mov	 rax, rcx
  005b1	b9 08 00 00 00	 mov	 ecx, 8
  005b6	48 6b c9 17	 imul	 rcx, rcx, 23
  005ba	4c 8b c0	 mov	 r8, rax
  005bd	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  005c4	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  005c8	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  005cc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  005d1	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 691  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[24], &u_buf[24]);

  005d5	b8 08 00 00 00	 mov	 eax, 8
  005da	48 6b c0 18	 imul	 rax, rax, 24
  005de	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  005e5	48 03 c8	 add	 rcx, rax
  005e8	48 8b c1	 mov	 rax, rcx
  005eb	b9 08 00 00 00	 mov	 ecx, 8
  005f0	48 6b c9 18	 imul	 rcx, rcx, 24
  005f4	4c 8b c0	 mov	 r8, rax
  005f7	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  005fe	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00602	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00606	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0060b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 692  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[25], &u_buf[25]);

  0060f	b8 08 00 00 00	 mov	 eax, 8
  00614	48 6b c0 19	 imul	 rax, rax, 25
  00618	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0061f	48 03 c8	 add	 rcx, rax
  00622	48 8b c1	 mov	 rax, rcx
  00625	b9 08 00 00 00	 mov	 ecx, 8
  0062a	48 6b c9 19	 imul	 rcx, rcx, 25
  0062e	4c 8b c0	 mov	 r8, rax
  00631	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00638	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0063c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00640	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00645	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 693  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[26], &u_buf[26]);

  00649	b8 08 00 00 00	 mov	 eax, 8
  0064e	48 6b c0 1a	 imul	 rax, rax, 26
  00652	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00659	48 03 c8	 add	 rcx, rax
  0065c	48 8b c1	 mov	 rax, rcx
  0065f	b9 08 00 00 00	 mov	 ecx, 8
  00664	48 6b c9 1a	 imul	 rcx, rcx, 26
  00668	4c 8b c0	 mov	 r8, rax
  0066b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00672	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00676	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0067a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0067f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 694  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[27], &u_buf[27]);

  00683	b8 08 00 00 00	 mov	 eax, 8
  00688	48 6b c0 1b	 imul	 rax, rax, 27
  0068c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00693	48 03 c8	 add	 rcx, rax
  00696	48 8b c1	 mov	 rax, rcx
  00699	b9 08 00 00 00	 mov	 ecx, 8
  0069e	48 6b c9 1b	 imul	 rcx, rcx, 27
  006a2	4c 8b c0	 mov	 r8, rax
  006a5	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  006ac	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  006b0	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  006b4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  006b9	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 695  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[28], &u_buf[28]);

  006bd	b8 08 00 00 00	 mov	 eax, 8
  006c2	48 6b c0 1c	 imul	 rax, rax, 28
  006c6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  006cd	48 03 c8	 add	 rcx, rax
  006d0	48 8b c1	 mov	 rax, rcx
  006d3	b9 08 00 00 00	 mov	 ecx, 8
  006d8	48 6b c9 1c	 imul	 rcx, rcx, 28
  006dc	4c 8b c0	 mov	 r8, rax
  006df	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  006e6	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  006ea	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  006ee	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  006f3	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 696  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[29], &u_buf[29]);

  006f7	b8 08 00 00 00	 mov	 eax, 8
  006fc	48 6b c0 1d	 imul	 rax, rax, 29
  00700	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00707	48 03 c8	 add	 rcx, rax
  0070a	48 8b c1	 mov	 rax, rcx
  0070d	b9 08 00 00 00	 mov	 ecx, 8
  00712	48 6b c9 1d	 imul	 rcx, rcx, 29
  00716	4c 8b c0	 mov	 r8, rax
  00719	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00720	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00724	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00728	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0072d	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 697  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[30], &u_buf[30]);

  00731	b8 08 00 00 00	 mov	 eax, 8
  00736	48 6b c0 1e	 imul	 rax, rax, 30
  0073a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00741	48 03 c8	 add	 rcx, rax
  00744	48 8b c1	 mov	 rax, rcx
  00747	b9 08 00 00 00	 mov	 ecx, 8
  0074c	48 6b c9 1e	 imul	 rcx, rcx, 30
  00750	4c 8b c0	 mov	 r8, rax
  00753	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0075a	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0075e	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00762	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00767	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 698  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[31], &u_buf[31]);

  0076b	b8 08 00 00 00	 mov	 eax, 8
  00770	48 6b c0 1f	 imul	 rax, rax, 31
  00774	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0077b	48 03 c8	 add	 rcx, rax
  0077e	48 8b c1	 mov	 rax, rcx
  00781	b9 08 00 00 00	 mov	 ecx, 8
  00786	48 6b c9 1f	 imul	 rcx, rcx, 31
  0078a	4c 8b c0	 mov	 r8, rax
  0078d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00794	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00798	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0079c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  007a1	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 699  :             u_buf += 32;

  007a5	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  007ac	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  007b2	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 700  :             --count;

  007b9	48 8b 45 28	 mov	 rax, QWORD PTR count$[rbp]
  007bd	48 ff c8	 dec	 rax
  007c0	48 89 45 28	 mov	 QWORD PTR count$[rbp], rax

; 701  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 702  :             if (sizeof(k) == sizeof(_UINT32_T))

  007c4	33 c0		 xor	 eax, eax
  007c6	85 c0		 test	 eax, eax
  007c8	74 0c		 je	 SHORT $LN4@MultiplyAn

; 703  :                 AddToMULTI32Counter(32);

  007ca	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  007cf	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 704  :             else

  007d4	eb 0a		 jmp	 SHORT $LN5@MultiplyAn
$LN4@MultiplyAn:

; 705  :                 AddToMULTI64Counter(32);

  007d6	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  007db	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
$LN5@MultiplyAn:

; 706  : #endif
; 707  :         }

  007e0	e9 75 f8 ff ff	 jmp	 $LN2@MultiplyAn
$LN3@MultiplyAn:

; 708  : 
; 709  :         if (u_count & 0x10)

  007e5	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  007ec	48 83 e0 10	 and	 rax, 16
  007f0	48 85 c0	 test	 rax, rax
  007f3	0f 84 d0 03 00
	00		 je	 $LN6@MultiplyAn

; 710  :         {
; 711  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  007f9	b8 08 00 00 00	 mov	 eax, 8
  007fe	48 6b c0 00	 imul	 rax, rax, 0
  00802	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00809	48 03 c8	 add	 rcx, rax
  0080c	48 8b c1	 mov	 rax, rcx
  0080f	b9 08 00 00 00	 mov	 ecx, 8
  00814	48 6b c9 00	 imul	 rcx, rcx, 0
  00818	4c 8b c0	 mov	 r8, rax
  0081b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00822	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00826	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0082a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0082f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 712  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

  00833	b8 08 00 00 00	 mov	 eax, 8
  00838	48 6b c0 01	 imul	 rax, rax, 1
  0083c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00843	48 03 c8	 add	 rcx, rax
  00846	48 8b c1	 mov	 rax, rcx
  00849	b9 08 00 00 00	 mov	 ecx, 8
  0084e	48 6b c9 01	 imul	 rcx, rcx, 1
  00852	4c 8b c0	 mov	 r8, rax
  00855	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0085c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00860	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00864	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00869	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 713  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

  0086d	b8 08 00 00 00	 mov	 eax, 8
  00872	48 6b c0 02	 imul	 rax, rax, 2
  00876	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0087d	48 03 c8	 add	 rcx, rax
  00880	48 8b c1	 mov	 rax, rcx
  00883	b9 08 00 00 00	 mov	 ecx, 8
  00888	48 6b c9 02	 imul	 rcx, rcx, 2
  0088c	4c 8b c0	 mov	 r8, rax
  0088f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00896	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0089a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0089e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  008a3	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 714  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

  008a7	b8 08 00 00 00	 mov	 eax, 8
  008ac	48 6b c0 03	 imul	 rax, rax, 3
  008b0	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  008b7	48 03 c8	 add	 rcx, rax
  008ba	48 8b c1	 mov	 rax, rcx
  008bd	b9 08 00 00 00	 mov	 ecx, 8
  008c2	48 6b c9 03	 imul	 rcx, rcx, 3
  008c6	4c 8b c0	 mov	 r8, rax
  008c9	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  008d0	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  008d4	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  008d8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  008dd	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 715  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

  008e1	b8 08 00 00 00	 mov	 eax, 8
  008e6	48 6b c0 04	 imul	 rax, rax, 4
  008ea	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  008f1	48 03 c8	 add	 rcx, rax
  008f4	48 8b c1	 mov	 rax, rcx
  008f7	b9 08 00 00 00	 mov	 ecx, 8
  008fc	48 6b c9 04	 imul	 rcx, rcx, 4
  00900	4c 8b c0	 mov	 r8, rax
  00903	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0090a	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0090e	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00912	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00917	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 716  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

  0091b	b8 08 00 00 00	 mov	 eax, 8
  00920	48 6b c0 05	 imul	 rax, rax, 5
  00924	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0092b	48 03 c8	 add	 rcx, rax
  0092e	48 8b c1	 mov	 rax, rcx
  00931	b9 08 00 00 00	 mov	 ecx, 8
  00936	48 6b c9 05	 imul	 rcx, rcx, 5
  0093a	4c 8b c0	 mov	 r8, rax
  0093d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00944	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00948	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  0094c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00951	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 717  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

  00955	b8 08 00 00 00	 mov	 eax, 8
  0095a	48 6b c0 06	 imul	 rax, rax, 6
  0095e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00965	48 03 c8	 add	 rcx, rax
  00968	48 8b c1	 mov	 rax, rcx
  0096b	b9 08 00 00 00	 mov	 ecx, 8
  00970	48 6b c9 06	 imul	 rcx, rcx, 6
  00974	4c 8b c0	 mov	 r8, rax
  00977	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0097e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00982	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00986	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0098b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 718  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

  0098f	b8 08 00 00 00	 mov	 eax, 8
  00994	48 6b c0 07	 imul	 rax, rax, 7
  00998	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0099f	48 03 c8	 add	 rcx, rax
  009a2	48 8b c1	 mov	 rax, rcx
  009a5	b9 08 00 00 00	 mov	 ecx, 8
  009aa	48 6b c9 07	 imul	 rcx, rcx, 7
  009ae	4c 8b c0	 mov	 r8, rax
  009b1	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  009b8	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  009bc	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  009c0	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  009c5	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 719  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

  009c9	b8 08 00 00 00	 mov	 eax, 8
  009ce	48 6b c0 08	 imul	 rax, rax, 8
  009d2	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  009d9	48 03 c8	 add	 rcx, rax
  009dc	48 8b c1	 mov	 rax, rcx
  009df	b9 08 00 00 00	 mov	 ecx, 8
  009e4	48 6b c9 08	 imul	 rcx, rcx, 8
  009e8	4c 8b c0	 mov	 r8, rax
  009eb	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  009f2	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  009f6	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  009fa	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  009ff	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 720  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

  00a03	b8 08 00 00 00	 mov	 eax, 8
  00a08	48 6b c0 09	 imul	 rax, rax, 9
  00a0c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00a13	48 03 c8	 add	 rcx, rax
  00a16	48 8b c1	 mov	 rax, rcx
  00a19	b9 08 00 00 00	 mov	 ecx, 8
  00a1e	48 6b c9 09	 imul	 rcx, rcx, 9
  00a22	4c 8b c0	 mov	 r8, rax
  00a25	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00a2c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00a30	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00a34	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00a39	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 721  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

  00a3d	b8 08 00 00 00	 mov	 eax, 8
  00a42	48 6b c0 0a	 imul	 rax, rax, 10
  00a46	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00a4d	48 03 c8	 add	 rcx, rax
  00a50	48 8b c1	 mov	 rax, rcx
  00a53	b9 08 00 00 00	 mov	 ecx, 8
  00a58	48 6b c9 0a	 imul	 rcx, rcx, 10
  00a5c	4c 8b c0	 mov	 r8, rax
  00a5f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00a66	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00a6a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00a6e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00a73	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 722  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

  00a77	b8 08 00 00 00	 mov	 eax, 8
  00a7c	48 6b c0 0b	 imul	 rax, rax, 11
  00a80	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00a87	48 03 c8	 add	 rcx, rax
  00a8a	48 8b c1	 mov	 rax, rcx
  00a8d	b9 08 00 00 00	 mov	 ecx, 8
  00a92	48 6b c9 0b	 imul	 rcx, rcx, 11
  00a96	4c 8b c0	 mov	 r8, rax
  00a99	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00aa0	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00aa4	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00aa8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00aad	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 723  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

  00ab1	b8 08 00 00 00	 mov	 eax, 8
  00ab6	48 6b c0 0c	 imul	 rax, rax, 12
  00aba	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00ac1	48 03 c8	 add	 rcx, rax
  00ac4	48 8b c1	 mov	 rax, rcx
  00ac7	b9 08 00 00 00	 mov	 ecx, 8
  00acc	48 6b c9 0c	 imul	 rcx, rcx, 12
  00ad0	4c 8b c0	 mov	 r8, rax
  00ad3	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00ada	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00ade	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00ae2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00ae7	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 724  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

  00aeb	b8 08 00 00 00	 mov	 eax, 8
  00af0	48 6b c0 0d	 imul	 rax, rax, 13
  00af4	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00afb	48 03 c8	 add	 rcx, rax
  00afe	48 8b c1	 mov	 rax, rcx
  00b01	b9 08 00 00 00	 mov	 ecx, 8
  00b06	48 6b c9 0d	 imul	 rcx, rcx, 13
  00b0a	4c 8b c0	 mov	 r8, rax
  00b0d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00b14	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00b18	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00b1c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00b21	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 725  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

  00b25	b8 08 00 00 00	 mov	 eax, 8
  00b2a	48 6b c0 0e	 imul	 rax, rax, 14
  00b2e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00b35	48 03 c8	 add	 rcx, rax
  00b38	48 8b c1	 mov	 rax, rcx
  00b3b	b9 08 00 00 00	 mov	 ecx, 8
  00b40	48 6b c9 0e	 imul	 rcx, rcx, 14
  00b44	4c 8b c0	 mov	 r8, rax
  00b47	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00b4e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00b52	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00b56	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00b5b	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 726  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

  00b5f	b8 08 00 00 00	 mov	 eax, 8
  00b64	48 6b c0 0f	 imul	 rax, rax, 15
  00b68	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00b6f	48 03 c8	 add	 rcx, rax
  00b72	48 8b c1	 mov	 rax, rcx
  00b75	b9 08 00 00 00	 mov	 ecx, 8
  00b7a	48 6b c9 0f	 imul	 rcx, rcx, 15
  00b7e	4c 8b c0	 mov	 r8, rax
  00b81	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00b88	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00b8c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00b90	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00b95	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 727  :             u_buf += 16;

  00b99	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00ba0	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00ba6	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 728  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 729  :             if (sizeof(k) == sizeof(_UINT32_T))

  00bad	33 c0		 xor	 eax, eax
  00baf	85 c0		 test	 eax, eax
  00bb1	74 0c		 je	 SHORT $LN7@MultiplyAn

; 730  :                 AddToMULTI32Counter(16);

  00bb3	b9 10 00 00 00	 mov	 ecx, 16
  00bb8	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 731  :             else

  00bbd	eb 0a		 jmp	 SHORT $LN8@MultiplyAn
$LN7@MultiplyAn:

; 732  :                 AddToMULTI64Counter(16);

  00bbf	b9 10 00 00 00	 mov	 ecx, 16
  00bc4	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
$LN8@MultiplyAn:
$LN6@MultiplyAn:

; 733  : #endif
; 734  :         }
; 735  : 
; 736  :         if (u_count & 0x8)

  00bc9	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00bd0	48 83 e0 08	 and	 rax, 8
  00bd4	48 85 c0	 test	 rax, rax
  00bd7	0f 84 fe 01 00
	00		 je	 $LN9@MultiplyAn

; 737  :         {
; 738  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  00bdd	b8 08 00 00 00	 mov	 eax, 8
  00be2	48 6b c0 00	 imul	 rax, rax, 0
  00be6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00bed	48 03 c8	 add	 rcx, rax
  00bf0	48 8b c1	 mov	 rax, rcx
  00bf3	b9 08 00 00 00	 mov	 ecx, 8
  00bf8	48 6b c9 00	 imul	 rcx, rcx, 0
  00bfc	4c 8b c0	 mov	 r8, rax
  00bff	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00c06	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00c0a	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00c0e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00c13	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 739  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

  00c17	b8 08 00 00 00	 mov	 eax, 8
  00c1c	48 6b c0 01	 imul	 rax, rax, 1
  00c20	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00c27	48 03 c8	 add	 rcx, rax
  00c2a	48 8b c1	 mov	 rax, rcx
  00c2d	b9 08 00 00 00	 mov	 ecx, 8
  00c32	48 6b c9 01	 imul	 rcx, rcx, 1
  00c36	4c 8b c0	 mov	 r8, rax
  00c39	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00c40	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00c44	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00c48	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00c4d	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 740  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

  00c51	b8 08 00 00 00	 mov	 eax, 8
  00c56	48 6b c0 02	 imul	 rax, rax, 2
  00c5a	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00c61	48 03 c8	 add	 rcx, rax
  00c64	48 8b c1	 mov	 rax, rcx
  00c67	b9 08 00 00 00	 mov	 ecx, 8
  00c6c	48 6b c9 02	 imul	 rcx, rcx, 2
  00c70	4c 8b c0	 mov	 r8, rax
  00c73	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00c7a	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00c7e	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00c82	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00c87	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 741  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

  00c8b	b8 08 00 00 00	 mov	 eax, 8
  00c90	48 6b c0 03	 imul	 rax, rax, 3
  00c94	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00c9b	48 03 c8	 add	 rcx, rax
  00c9e	48 8b c1	 mov	 rax, rcx
  00ca1	b9 08 00 00 00	 mov	 ecx, 8
  00ca6	48 6b c9 03	 imul	 rcx, rcx, 3
  00caa	4c 8b c0	 mov	 r8, rax
  00cad	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00cb4	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00cb8	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00cbc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00cc1	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 742  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

  00cc5	b8 08 00 00 00	 mov	 eax, 8
  00cca	48 6b c0 04	 imul	 rax, rax, 4
  00cce	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00cd5	48 03 c8	 add	 rcx, rax
  00cd8	48 8b c1	 mov	 rax, rcx
  00cdb	b9 08 00 00 00	 mov	 ecx, 8
  00ce0	48 6b c9 04	 imul	 rcx, rcx, 4
  00ce4	4c 8b c0	 mov	 r8, rax
  00ce7	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00cee	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00cf2	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00cf6	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00cfb	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 743  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

  00cff	b8 08 00 00 00	 mov	 eax, 8
  00d04	48 6b c0 05	 imul	 rax, rax, 5
  00d08	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00d0f	48 03 c8	 add	 rcx, rax
  00d12	48 8b c1	 mov	 rax, rcx
  00d15	b9 08 00 00 00	 mov	 ecx, 8
  00d1a	48 6b c9 05	 imul	 rcx, rcx, 5
  00d1e	4c 8b c0	 mov	 r8, rax
  00d21	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00d28	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00d2c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00d30	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00d35	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 744  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

  00d39	b8 08 00 00 00	 mov	 eax, 8
  00d3e	48 6b c0 06	 imul	 rax, rax, 6
  00d42	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00d49	48 03 c8	 add	 rcx, rax
  00d4c	48 8b c1	 mov	 rax, rcx
  00d4f	b9 08 00 00 00	 mov	 ecx, 8
  00d54	48 6b c9 06	 imul	 rcx, rcx, 6
  00d58	4c 8b c0	 mov	 r8, rax
  00d5b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00d62	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00d66	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00d6a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00d6f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 745  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

  00d73	b8 08 00 00 00	 mov	 eax, 8
  00d78	48 6b c0 07	 imul	 rax, rax, 7
  00d7c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00d83	48 03 c8	 add	 rcx, rax
  00d86	48 8b c1	 mov	 rax, rcx
  00d89	b9 08 00 00 00	 mov	 ecx, 8
  00d8e	48 6b c9 07	 imul	 rcx, rcx, 7
  00d92	4c 8b c0	 mov	 r8, rax
  00d95	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00d9c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00da0	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00da4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00da9	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 746  :             u_buf += 8;

  00dad	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00db4	48 83 c0 40	 add	 rax, 64			; 00000040H
  00db8	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 747  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 748  :             if (sizeof(k) == sizeof(_UINT32_T))

  00dbf	33 c0		 xor	 eax, eax
  00dc1	85 c0		 test	 eax, eax
  00dc3	74 0c		 je	 SHORT $LN10@MultiplyAn

; 749  :                 AddToMULTI32Counter(8);

  00dc5	b9 08 00 00 00	 mov	 ecx, 8
  00dca	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 750  :             else

  00dcf	eb 0a		 jmp	 SHORT $LN11@MultiplyAn
$LN10@MultiplyAn:

; 751  :                 AddToMULTI64Counter(8);

  00dd1	b9 08 00 00 00	 mov	 ecx, 8
  00dd6	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
$LN11@MultiplyAn:
$LN9@MultiplyAn:

; 752  : #endif
; 753  :         }
; 754  : 
; 755  :         if (u_count & 0x4)

  00ddb	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00de2	48 83 e0 04	 and	 rax, 4
  00de6	48 85 c0	 test	 rax, rax
  00de9	0f 84 16 01 00
	00		 je	 $LN12@MultiplyAn

; 756  :         {
; 757  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  00def	b8 08 00 00 00	 mov	 eax, 8
  00df4	48 6b c0 00	 imul	 rax, rax, 0
  00df8	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00dff	48 03 c8	 add	 rcx, rax
  00e02	48 8b c1	 mov	 rax, rcx
  00e05	b9 08 00 00 00	 mov	 ecx, 8
  00e0a	48 6b c9 00	 imul	 rcx, rcx, 0
  00e0e	4c 8b c0	 mov	 r8, rax
  00e11	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00e18	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00e1c	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00e20	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00e25	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 758  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

  00e29	b8 08 00 00 00	 mov	 eax, 8
  00e2e	48 6b c0 01	 imul	 rax, rax, 1
  00e32	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00e39	48 03 c8	 add	 rcx, rax
  00e3c	48 8b c1	 mov	 rax, rcx
  00e3f	b9 08 00 00 00	 mov	 ecx, 8
  00e44	48 6b c9 01	 imul	 rcx, rcx, 1
  00e48	4c 8b c0	 mov	 r8, rax
  00e4b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00e52	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00e56	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00e5a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00e5f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 759  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

  00e63	b8 08 00 00 00	 mov	 eax, 8
  00e68	48 6b c0 02	 imul	 rax, rax, 2
  00e6c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00e73	48 03 c8	 add	 rcx, rax
  00e76	48 8b c1	 mov	 rax, rcx
  00e79	b9 08 00 00 00	 mov	 ecx, 8
  00e7e	48 6b c9 02	 imul	 rcx, rcx, 2
  00e82	4c 8b c0	 mov	 r8, rax
  00e85	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00e8c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00e90	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00e94	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00e99	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 760  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

  00e9d	b8 08 00 00 00	 mov	 eax, 8
  00ea2	48 6b c0 03	 imul	 rax, rax, 3
  00ea6	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00ead	48 03 c8	 add	 rcx, rax
  00eb0	48 8b c1	 mov	 rax, rcx
  00eb3	b9 08 00 00 00	 mov	 ecx, 8
  00eb8	48 6b c9 03	 imul	 rcx, rcx, 3
  00ebc	4c 8b c0	 mov	 r8, rax
  00ebf	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00ec6	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00eca	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00ece	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00ed3	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 761  :             u_buf += 4;

  00ed7	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00ede	48 83 c0 20	 add	 rax, 32			; 00000020H
  00ee2	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 762  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 763  :             if (sizeof(k) == sizeof(_UINT32_T))

  00ee9	33 c0		 xor	 eax, eax
  00eeb	85 c0		 test	 eax, eax
  00eed	74 0c		 je	 SHORT $LN13@MultiplyAn

; 764  :                 AddToMULTI32Counter(4);

  00eef	b9 04 00 00 00	 mov	 ecx, 4
  00ef4	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 765  :             else

  00ef9	eb 0a		 jmp	 SHORT $LN14@MultiplyAn
$LN13@MultiplyAn:

; 766  :                 AddToMULTI64Counter(4);

  00efb	b9 04 00 00 00	 mov	 ecx, 4
  00f00	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
$LN14@MultiplyAn:
$LN12@MultiplyAn:

; 767  : #endif
; 768  :         }
; 769  : 
; 770  :         if (u_count & 0x2)

  00f05	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00f0c	48 83 e0 02	 and	 rax, 2
  00f10	48 85 c0	 test	 rax, rax
  00f13	0f 84 a2 00 00
	00		 je	 $LN15@MultiplyAn

; 771  :         {
; 772  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  00f19	b8 08 00 00 00	 mov	 eax, 8
  00f1e	48 6b c0 00	 imul	 rax, rax, 0
  00f22	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00f29	48 03 c8	 add	 rcx, rax
  00f2c	48 8b c1	 mov	 rax, rcx
  00f2f	b9 08 00 00 00	 mov	 ecx, 8
  00f34	48 6b c9 00	 imul	 rcx, rcx, 0
  00f38	4c 8b c0	 mov	 r8, rax
  00f3b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00f42	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00f46	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00f4a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00f4f	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 773  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

  00f53	b8 08 00 00 00	 mov	 eax, 8
  00f58	48 6b c0 01	 imul	 rax, rax, 1
  00f5c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00f63	48 03 c8	 add	 rcx, rax
  00f66	48 8b c1	 mov	 rax, rcx
  00f69	b9 08 00 00 00	 mov	 ecx, 8
  00f6e	48 6b c9 01	 imul	 rcx, rcx, 1
  00f72	4c 8b c0	 mov	 r8, rax
  00f75	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00f7c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00f80	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00f84	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00f89	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 774  :             u_buf += 2;

  00f8d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00f94	48 83 c0 10	 add	 rax, 16
  00f98	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 775  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 776  :             if (sizeof(k) == sizeof(_UINT32_T))

  00f9f	33 c0		 xor	 eax, eax
  00fa1	85 c0		 test	 eax, eax
  00fa3	74 0c		 je	 SHORT $LN16@MultiplyAn

; 777  :                 AddToMULTI32Counter(2);

  00fa5	b9 02 00 00 00	 mov	 ecx, 2
  00faa	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 778  :             else

  00faf	eb 0a		 jmp	 SHORT $LN17@MultiplyAn
$LN16@MultiplyAn:

; 779  :                 AddToMULTI64Counter(2);

  00fb1	b9 02 00 00 00	 mov	 ecx, 2
  00fb6	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
$LN17@MultiplyAn:
$LN15@MultiplyAn:

; 780  : #endif
; 781  :         }
; 782  : 
; 783  :         if (u_count & 0x1)

  00fbb	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00fc2	48 83 e0 01	 and	 rax, 1
  00fc6	48 85 c0	 test	 rax, rax
  00fc9	74 5e		 je	 SHORT $LN18@MultiplyAn

; 784  :         {
; 785  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  00fcb	b8 08 00 00 00	 mov	 eax, 8
  00fd0	48 6b c0 00	 imul	 rax, rax, 0
  00fd4	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  00fdb	48 03 c8	 add	 rcx, rax
  00fde	48 8b c1	 mov	 rax, rcx
  00fe1	b9 08 00 00 00	 mov	 ecx, 8
  00fe6	48 6b c9 00	 imul	 rcx, rcx, 0
  00fea	4c 8b c0	 mov	 r8, rax
  00fed	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00ff4	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00ff8	48 8b 4d 08	 mov	 rcx, QWORD PTR k$[rbp]
  00ffc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  01001	48 89 45 08	 mov	 QWORD PTR k$[rbp], rax

; 786  :             u_buf += 1;

  01005	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0100c	48 83 c0 08	 add	 rax, 8
  01010	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 787  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 788  :             if (sizeof(k) == sizeof(_UINT32_T))

  01017	33 c0		 xor	 eax, eax
  01019	85 c0		 test	 eax, eax
  0101b	74 07		 je	 SHORT $LN19@MultiplyAn

; 789  :                 IncrementMULTI32Counter();

  0101d	e8 00 00 00 00	 call	 ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter

; 790  :             else

  01022	eb 05		 jmp	 SHORT $LN20@MultiplyAn
$LN19@MultiplyAn:

; 791  :                 IncrementMULTI64Counter();

  01024	e8 00 00 00 00	 call	 ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
$LN20@MultiplyAn:
$LN18@MultiplyAn:

; 792  : #endif
; 793  :         }
; 794  : 
; 795  :         if (k > 0)

  01029	48 83 7d 08 00	 cmp	 QWORD PTR k$[rbp], 0
  0102e	76 2a		 jbe	 SHORT $LN21@MultiplyAn

; 796  :         {
; 797  :             u_buf[0] = k;

  01030	b8 08 00 00 00	 mov	 eax, 8
  01035	48 6b c0 00	 imul	 rax, rax, 0
  01039	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  01040	48 8b 55 08	 mov	 rdx, QWORD PTR k$[rbp]
  01044	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 798  :             u_buf += 1;

  01048	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0104f	48 83 c0 08	 add	 rax, 8
  01053	48 89 85 20 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax
$LN21@MultiplyAn:

; 799  :         }
; 800  : 
; 801  :         return (u_buf);

  0105a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]

; 802  :     }

  01061	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  01068	5f		 pop	 rdi
  01069	5d		 pop	 rbp
  0106a	c3		 ret	 0
?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z
_TEXT	SEGMENT
base_value$ = 8
t_hi$ = 40
t_lo$ = 72
tv81 = 280
tv79 = 288
k$ = 336
u$ = 344
w_buf$ = 352
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX, COMDAT

; 647  :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 648  : #ifdef _M_IX86
; 649  :         __UNIT_TYPE base_value = 1000000000U; // 10^9
; 650  : #elif defined(_M_X64)
; 651  :         __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19

  00040	48 b8 00 00 e8
	89 04 23 c7 8a	 mov	 rax, -8446744073709551616 ; 8ac7230489e80000H
  0004a	48 89 45 08	 mov	 QWORD PTR base_value$[rbp], rax

; 652  : #else
; 653  : #error unknown platform
; 654  : #endif
; 655  :         __UNIT_TYPE t_hi;
; 656  :         __UNIT_TYPE t_lo = _MULTIPLYX_UNIT(u, base_value, &t_hi);

  0004e	4c 8d 45 28	 lea	 r8, QWORD PTR t_hi$[rbp]
  00052	48 8b 55 08	 mov	 rdx, QWORD PTR base_value$[rbp]
  00056	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  0005d	e8 00 00 00 00	 call	 _MULTIPLYX_UNIT
  00062	48 89 45 48	 mov	 QWORD PTR t_lo$[rbp], rax

; 657  :         _ADDX_UNIT(_ADDX_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

  00066	48 8b 45 28	 mov	 rax, QWORD PTR t_hi$[rbp]
  0006a	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  00071	4c 8b 8d 60 01
	00 00		 mov	 r9, QWORD PTR w_buf$[rbp]
  00078	4c 8b 85 50 01
	00 00		 mov	 r8, QWORD PTR k$[rbp]
  0007f	48 8b 55 48	 mov	 rdx, QWORD PTR t_lo$[rbp]
  00083	33 c9		 xor	 ecx, ecx
  00085	e8 00 00 00 00	 call	 _ADDX_UNIT
  0008a	88 85 20 01 00
	00		 mov	 BYTE PTR tv79[rbp], al
  00090	4c 8d 8d 50 01
	00 00		 lea	 r9, QWORD PTR k$[rbp]
  00097	45 33 c0	 xor	 r8d, r8d
  0009a	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR tv81[rbp]
  000a1	0f b6 8d 20 01
	00 00		 movzx	 ecx, BYTE PTR tv79[rbp]
  000a8	e8 00 00 00 00	 call	 _ADDX_UNIT

; 658  :         return (k);

  000ad	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR k$[rbp]

; 659  :     }

  000b4	48 8b f8	 mov	 rdi, rax
  000b7	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcFrameData
  000c2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c7	48 8b c7	 mov	 rax, rdi
  000ca	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  000d1	5f		 pop	 rdi
  000d2	5d		 pop	 rbp
  000d3	c3		 ret	 0
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z
_TEXT	SEGMENT
base_value$ = 8
t_hi$ = 40
t_lo$ = 72
tv81 = 280
tv79 = 288
k$ = 336
u$ = 344
w_buf$ = 352
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL, COMDAT

; 632  :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 633  : #ifdef _M_IX86
; 634  :         __UNIT_TYPE base_value = 1000000000U; // 10^9
; 635  : #elif defined(_M_X64)
; 636  :         __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19

  00040	48 b8 00 00 e8
	89 04 23 c7 8a	 mov	 rax, -8446744073709551616 ; 8ac7230489e80000H
  0004a	48 89 45 08	 mov	 QWORD PTR base_value$[rbp], rax

; 637  : #else
; 638  : #error unknown platform
; 639  : #endif
; 640  :         __UNIT_TYPE t_hi;
; 641  :         __UNIT_TYPE t_lo = _MULTIPLY_UNIT(u, base_value, &t_hi);

  0004e	4c 8d 45 28	 lea	 r8, QWORD PTR t_hi$[rbp]
  00052	48 8b 55 08	 mov	 rdx, QWORD PTR base_value$[rbp]
  00056	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  0005d	e8 00 00 00 00	 call	 _MULTIPLY_UNIT
  00062	48 89 45 48	 mov	 QWORD PTR t_lo$[rbp], rax

; 642  :         _ADD_UNIT(_ADD_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

  00066	48 8b 45 28	 mov	 rax, QWORD PTR t_hi$[rbp]
  0006a	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  00071	4c 8b 8d 60 01
	00 00		 mov	 r9, QWORD PTR w_buf$[rbp]
  00078	4c 8b 85 50 01
	00 00		 mov	 r8, QWORD PTR k$[rbp]
  0007f	48 8b 55 48	 mov	 rdx, QWORD PTR t_lo$[rbp]
  00083	33 c9		 xor	 ecx, ecx
  00085	e8 00 00 00 00	 call	 _ADD_UNIT
  0008a	88 85 20 01 00
	00		 mov	 BYTE PTR tv79[rbp], al
  00090	4c 8d 8d 50 01
	00 00		 lea	 r9, QWORD PTR k$[rbp]
  00097	45 33 c0	 xor	 r8d, r8d
  0009a	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR tv81[rbp]
  000a1	0f b6 8d 20 01
	00 00		 movzx	 ecx, BYTE PTR tv79[rbp]
  000a8	e8 00 00 00 00	 call	 _ADD_UNIT

; 643  :         return (k);

  000ad	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR k$[rbp]

; 644  :     }

  000b4	48 8b f8	 mov	 rdi, rax
  000b7	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z$rtcFrameData
  000c2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c7	48 8b c7	 mov	 rax, rdi
  000ca	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  000d1	5f		 pop	 rdi
  000d2	5d		 pop	 rbp
  000d3	c3		 ret	 0
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z
_TEXT	SEGMENT
word_digit_count$ = 4
in_ptr$ = 40
out_ptr$ = 72
source_count$ = 104
r$ = 132
tv67 = 344
source$ = 384
out_buf$ = 392
out_buf_count$ = 400
?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z PROC ; Palmtree::Math::Core::Internal::BuildBinaryFromDecimalString, COMDAT

; 604  :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 605  : #ifdef _M_IX86
; 606  :         int word_digit_count = 9;
; 607  : #elif defined(_M_X64)
; 608  :         int word_digit_count = 19;

  00040	c7 45 04 13 00
	00 00		 mov	 DWORD PTR word_digit_count$[rbp], 19

; 609  : #else
; 610  : #error unknown platform
; 611  : #endif
; 612  :         wchar_t* in_ptr = source;

  00047	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR source$[rbp]
  0004e	48 89 45 28	 mov	 QWORD PTR in_ptr$[rbp], rax

; 613  :         __UNIT_TYPE* out_ptr = out_buf;

  00052	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR out_buf$[rbp]
  00059	48 89 45 48	 mov	 QWORD PTR out_ptr$[rbp], rax

; 614  :         __UNIT_TYPE source_count = lstrlenW(source);

  0005d	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0006a	48 98		 cdqe
  0006c	48 89 45 68	 mov	 QWORD PTR source_count$[rbp], rax

; 615  :         int r = source_count % word_digit_count;

  00070	48 63 45 04	 movsxd	 rax, DWORD PTR word_digit_count$[rbp]
  00074	48 89 85 58 01
	00 00		 mov	 QWORD PTR tv67[rbp], rax
  0007b	33 d2		 xor	 edx, edx
  0007d	48 8b 45 68	 mov	 rax, QWORD PTR source_count$[rbp]
  00081	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR tv67[rbp]
  00088	48 f7 f1	 div	 rcx
  0008b	48 8b c2	 mov	 rax, rdx
  0008e	89 85 84 00 00
	00		 mov	 DWORD PTR r$[rbp], eax

; 616  :         if (r > 0)

  00094	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR r$[rbp], 0
  0009b	7e 4e		 jle	 SHORT $LN4@BuildBinar

; 617  :         {
; 618  :             *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

  0009d	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR r$[rbp]
  000a4	48 8b d0	 mov	 rdx, rax
  000a7	48 8b 4d 28	 mov	 rcx, QWORD PTR in_ptr$[rbp]
  000ab	e8 00 00 00 00	 call	 ?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z ; Palmtree::Math::Core::Internal::BuildLeading1WordFromDecimalString
  000b0	48 8b 4d 48	 mov	 rcx, QWORD PTR out_ptr$[rbp]
  000b4	48 89 01	 mov	 QWORD PTR [rcx], rax
  000b7	48 8b 45 48	 mov	 rax, QWORD PTR out_ptr$[rbp]
  000bb	48 83 c0 08	 add	 rax, 8
  000bf	48 89 45 48	 mov	 QWORD PTR out_ptr$[rbp], rax

; 619  :             in_ptr += r;

  000c3	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR r$[rbp]
  000ca	48 8b 4d 28	 mov	 rcx, QWORD PTR in_ptr$[rbp]
  000ce	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  000d2	48 89 45 28	 mov	 QWORD PTR in_ptr$[rbp], rax

; 620  :             source_count -= r;

  000d6	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR r$[rbp]
  000dd	48 8b 4d 68	 mov	 rcx, QWORD PTR source_count$[rbp]
  000e1	48 2b c8	 sub	 rcx, rax
  000e4	48 8b c1	 mov	 rax, rcx
  000e7	48 89 45 68	 mov	 QWORD PTR source_count$[rbp], rax
$LN4@BuildBinar:
$LN2@BuildBinar:

; 621  :         }
; 622  :         while (source_count > 0)

  000eb	48 83 7d 68 00	 cmp	 QWORD PTR source_count$[rbp], 0
  000f0	76 40		 jbe	 SHORT $LN3@BuildBinar

; 623  :         {
; 624  :             *out_ptr++ = Build1WordFromDecimalString(in_ptr);

  000f2	48 8b 4d 28	 mov	 rcx, QWORD PTR in_ptr$[rbp]
  000f6	e8 00 00 00 00	 call	 ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString
  000fb	48 8b 4d 48	 mov	 rcx, QWORD PTR out_ptr$[rbp]
  000ff	48 89 01	 mov	 QWORD PTR [rcx], rax
  00102	48 8b 45 48	 mov	 rax, QWORD PTR out_ptr$[rbp]
  00106	48 83 c0 08	 add	 rax, 8
  0010a	48 89 45 48	 mov	 QWORD PTR out_ptr$[rbp], rax

; 625  :             in_ptr += word_digit_count;

  0010e	48 63 45 04	 movsxd	 rax, DWORD PTR word_digit_count$[rbp]
  00112	48 8b 4d 28	 mov	 rcx, QWORD PTR in_ptr$[rbp]
  00116	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0011a	48 89 45 28	 mov	 QWORD PTR in_ptr$[rbp], rax

; 626  :             source_count -= word_digit_count;

  0011e	48 63 45 04	 movsxd	 rax, DWORD PTR word_digit_count$[rbp]
  00122	48 8b 4d 68	 mov	 rcx, QWORD PTR source_count$[rbp]
  00126	48 2b c8	 sub	 rcx, rax
  00129	48 8b c1	 mov	 rax, rcx
  0012c	48 89 45 68	 mov	 QWORD PTR source_count$[rbp], rax

; 627  :         }

  00130	eb b9		 jmp	 SHORT $LN2@BuildBinar
$LN3@BuildBinar:

; 628  :         *out_buf_count = out_ptr - out_buf;

  00132	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR out_buf$[rbp]
  00139	48 8b 4d 48	 mov	 rcx, QWORD PTR out_ptr$[rbp]
  0013d	48 2b c8	 sub	 rcx, rax
  00140	48 8b c1	 mov	 rax, rcx
  00143	48 c1 f8 03	 sar	 rax, 3
  00147	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR out_buf_count$[rbp]
  0014e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 629  :     }

  00151	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00158	5f		 pop	 rdi
  00159	5d		 pop	 rbp
  0015a	c3		 ret	 0
?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z ENDP ; Palmtree::Math::Core::Internal::BuildBinaryFromDecimalString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z
_TEXT	SEGMENT
x$ = 8
tv227 = 212
tv219 = 212
tv212 = 212
tv204 = 212
tv197 = 212
tv190 = 212
tv183 = 212
tv176 = 212
tv168 = 212
tv161 = 212
tv154 = 212
tv147 = 212
tv140 = 212
tv133 = 212
tv94 = 212
tv87 = 212
tv80 = 212
tv73 = 212
tv66 = 212
in_ptr$ = 256
?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z PROC ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString, COMDAT

; 566  :     {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 567  :         __UNIT_TYPE x = ParseDecimalDigit(*in_ptr++);

  00036	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0003d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00040	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv66[rbp], ax
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0004e	48 83 c0 02	 add	 rax, 2
  00052	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00059	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv66[rbp]
  00060	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00065	48 98		 cdqe
  00067	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 568  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

  0006b	33 c0		 xor	 eax, eax
  0006d	83 f8 01	 cmp	 eax, 1
  00070	0f 84 80 02 00
	00		 je	 $LN2@Build1Word

; 569  :         {
; 570  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00076	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0007d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00080	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv73[rbp], ax
  00087	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0008e	48 83 c0 02	 add	 rax, 2
  00092	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00099	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv73[rbp]
  000a0	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  000a5	48 98		 cdqe
  000a7	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  000ac	48 03 c8	 add	 rcx, rax
  000af	48 8b c1	 mov	 rax, rcx
  000b2	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 571  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000b6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  000bd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  000c0	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv80[rbp], ax
  000c7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  000ce	48 83 c0 02	 add	 rax, 2
  000d2	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  000d9	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv80[rbp]
  000e0	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  000e5	48 98		 cdqe
  000e7	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  000ec	48 03 c8	 add	 rcx, rax
  000ef	48 8b c1	 mov	 rax, rcx
  000f2	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 572  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000f6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  000fd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00100	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv87[rbp], ax
  00107	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0010e	48 83 c0 02	 add	 rax, 2
  00112	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00119	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv87[rbp]
  00120	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00125	48 98		 cdqe
  00127	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  0012c	48 03 c8	 add	 rcx, rax
  0012f	48 8b c1	 mov	 rax, rcx
  00132	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 573  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00136	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0013d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00140	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv94[rbp], ax
  00147	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0014e	48 83 c0 02	 add	 rax, 2
  00152	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00159	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv94[rbp]
  00160	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00165	48 98		 cdqe
  00167	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  0016c	48 03 c8	 add	 rcx, rax
  0016f	48 8b c1	 mov	 rax, rcx
  00172	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 574  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00176	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0017d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00180	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv133[rbp], ax
  00187	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0018e	48 83 c0 02	 add	 rax, 2
  00192	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00199	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv133[rbp]
  001a0	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  001a5	48 98		 cdqe
  001a7	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  001ac	48 03 c8	 add	 rcx, rax
  001af	48 8b c1	 mov	 rax, rcx
  001b2	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 575  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  001b6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  001bd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  001c0	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv140[rbp], ax
  001c7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  001ce	48 83 c0 02	 add	 rax, 2
  001d2	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  001d9	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv140[rbp]
  001e0	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  001e5	48 98		 cdqe
  001e7	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  001ec	48 03 c8	 add	 rcx, rax
  001ef	48 8b c1	 mov	 rax, rcx
  001f2	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 576  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  001f6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  001fd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00200	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv147[rbp], ax
  00207	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0020e	48 83 c0 02	 add	 rax, 2
  00212	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00219	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv147[rbp]
  00220	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00225	48 98		 cdqe
  00227	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  0022c	48 03 c8	 add	 rcx, rax
  0022f	48 8b c1	 mov	 rax, rcx
  00232	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 577  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00236	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0023d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00240	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv154[rbp], ax
  00247	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0024e	48 83 c0 02	 add	 rax, 2
  00252	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00259	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv154[rbp]
  00260	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00265	48 98		 cdqe
  00267	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  0026c	48 03 c8	 add	 rcx, rax
  0026f	48 8b c1	 mov	 rax, rcx
  00272	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 578  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00276	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0027d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00280	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv161[rbp], ax
  00287	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  0028e	48 83 c0 02	 add	 rax, 2
  00292	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00299	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv161[rbp]
  002a0	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  002a5	48 98		 cdqe
  002a7	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  002ac	48 03 c8	 add	 rcx, rax
  002af	48 8b c1	 mov	 rax, rcx
  002b2	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 579  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  002b6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  002bd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002c0	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv168[rbp], ax
  002c7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  002ce	48 83 c0 02	 add	 rax, 2
  002d2	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  002d9	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv168[rbp]
  002e0	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  002e5	48 98		 cdqe
  002e7	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  002ec	48 03 c8	 add	 rcx, rax
  002ef	48 8b c1	 mov	 rax, rcx
  002f2	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax
$LN2@Build1Word:

; 580  :         }
; 581  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

  002f6	33 c0		 xor	 eax, eax
  002f8	83 f8 01	 cmp	 eax, 1
  002fb	0f 84 40 01 00
	00		 je	 $LN3@Build1Word

; 582  :         {
; 583  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00301	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00308	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0030b	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv176[rbp], ax
  00312	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00319	48 83 c0 02	 add	 rax, 2
  0031d	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00324	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv176[rbp]
  0032b	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00330	48 98		 cdqe
  00332	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  00337	48 03 c8	 add	 rcx, rax
  0033a	48 8b c1	 mov	 rax, rcx
  0033d	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 584  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00341	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00348	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0034b	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv183[rbp], ax
  00352	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00359	48 83 c0 02	 add	 rax, 2
  0035d	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00364	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv183[rbp]
  0036b	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00370	48 98		 cdqe
  00372	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  00377	48 03 c8	 add	 rcx, rax
  0037a	48 8b c1	 mov	 rax, rcx
  0037d	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 585  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00381	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00388	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0038b	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv190[rbp], ax
  00392	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00399	48 83 c0 02	 add	 rax, 2
  0039d	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  003a4	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv190[rbp]
  003ab	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  003b0	48 98		 cdqe
  003b2	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  003b7	48 03 c8	 add	 rcx, rax
  003ba	48 8b c1	 mov	 rax, rcx
  003bd	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 586  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  003c1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  003c8	0f b7 00	 movzx	 eax, WORD PTR [rax]
  003cb	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv197[rbp], ax
  003d2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  003d9	48 83 c0 02	 add	 rax, 2
  003dd	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  003e4	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv197[rbp]
  003eb	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  003f0	48 98		 cdqe
  003f2	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  003f7	48 03 c8	 add	 rcx, rax
  003fa	48 8b c1	 mov	 rax, rcx
  003fd	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 587  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00401	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00408	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0040b	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv204[rbp], ax
  00412	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00419	48 83 c0 02	 add	 rax, 2
  0041d	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00424	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv204[rbp]
  0042b	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00430	48 98		 cdqe
  00432	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  00437	48 03 c8	 add	 rcx, rax
  0043a	48 8b c1	 mov	 rax, rcx
  0043d	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax
$LN3@Build1Word:

; 588  :         }
; 589  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

  00441	33 c0		 xor	 eax, eax
  00443	83 f8 01	 cmp	 eax, 1
  00446	0f 84 80 00 00
	00		 je	 $LN4@Build1Word

; 590  :         {
; 591  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0044c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00453	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00456	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv212[rbp], ax
  0045d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00464	48 83 c0 02	 add	 rax, 2
  00468	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  0046f	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv212[rbp]
  00476	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0047b	48 98		 cdqe
  0047d	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  00482	48 03 c8	 add	 rcx, rax
  00485	48 8b c1	 mov	 rax, rcx
  00488	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 592  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0048c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00493	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00496	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv219[rbp], ax
  0049d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  004a4	48 83 c0 02	 add	 rax, 2
  004a8	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  004af	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv219[rbp]
  004b6	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  004bb	48 98		 cdqe
  004bd	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  004c2	48 03 c8	 add	 rcx, rax
  004c5	48 8b c1	 mov	 rax, rcx
  004c8	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax
$LN4@Build1Word:

; 593  :         }
; 594  :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

  004cc	33 c0		 xor	 eax, eax
  004ce	83 f8 01	 cmp	 eax, 1
  004d1	74 40		 je	 SHORT $LN5@Build1Word

; 595  :         {
; 596  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  004d3	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  004da	0f b7 00	 movzx	 eax, WORD PTR [rax]
  004dd	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv227[rbp], ax
  004e4	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  004eb	48 83 c0 02	 add	 rax, 2
  004ef	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  004f6	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv227[rbp]
  004fd	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00502	48 98		 cdqe
  00504	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  00509	48 03 c8	 add	 rcx, rax
  0050c	48 8b c1	 mov	 rax, rcx
  0050f	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax
$LN5@Build1Word:

; 597  :         }
; 598  :         return (x);

  00513	48 8b 45 08	 mov	 rax, QWORD PTR x$[rbp]

; 599  :     }

  00517	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0051e	5f		 pop	 rdi
  0051f	5d		 pop	 rbp
  00520	c3		 ret	 0
?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z ENDP ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z
_TEXT	SEGMENT
x$ = 8
tv68 = 212
in_ptr$ = 256
count$ = 264
?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z PROC ; Palmtree::Math::Core::Internal::BuildLeading1WordFromDecimalString, COMDAT

; 555  :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 556  :         __UNIT_TYPE x = 0;

  0003b	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR x$[rbp], 0
$LN2@BuildLeadi:

; 557  :         while (count > 0)

  00043	48 83 bd 08 01
	00 00 00	 cmp	 QWORD PTR count$[rbp], 0
  0004b	76 53		 jbe	 SHORT $LN3@BuildLeadi

; 558  :         {
; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0004d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00054	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00057	66 89 85 d4 00
	00 00		 mov	 WORD PTR tv68[rbp], ax
  0005e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR in_ptr$[rbp]
  00065	48 83 c0 02	 add	 rax, 2
  00069	48 89 85 00 01
	00 00		 mov	 QWORD PTR in_ptr$[rbp], rax
  00070	0f b7 8d d4 00
	00 00		 movzx	 ecx, WORD PTR tv68[rbp]
  00077	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0007c	48 98		 cdqe
  0007e	48 6b 4d 08 0a	 imul	 rcx, QWORD PTR x$[rbp], 10
  00083	48 03 c8	 add	 rcx, rax
  00086	48 8b c1	 mov	 rax, rcx
  00089	48 89 45 08	 mov	 QWORD PTR x$[rbp], rax

; 560  :             --count;

  0008d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  00094	48 ff c8	 dec	 rax
  00097	48 89 85 08 01
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 561  :         }

  0009e	eb a3		 jmp	 SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 562  :         return (x);

  000a0	48 8b 45 08	 mov	 rax, QWORD PTR x$[rbp]

; 563  :     }

  000a4	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000ab	5f		 pop	 rdi
  000ac	5d		 pop	 rbp
  000ad	c3		 ret	 0
?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z ENDP ; Palmtree::Math::Core::Internal::BuildLeading1WordFromDecimalString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
_TEXT	SEGMENT
state$ = 16
$T4 = 548
$T5 = 584
__$ArrayPad$ = 600
in_ptr$ = 640
number_styles$ = 648
format_option$ = 656
sign$ = 664
int_part_buf$ = 672
int_part_buf_size$ = 680
frac_part_buf$ = 688
frac_part_buf_size$ = 696
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z PROC ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString, COMDAT

; 549  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec b8 02
	00 00		 sub	 rsp, 696		; 000002b8H
  0001c	48 8d 6c 24 50	 lea	 rbp, QWORD PTR [rsp+80]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 ae 00 00 00	 mov	 ecx, 174		; 000000aeH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+728]
  00038	48 c7 85 48 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T5[rbp], -2
  00043	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0004a	48 33 c5	 xor	 rax, rbp
  0004d	48 89 85 58 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0005b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 550  :         ParserState state(in_ptr, number_styles, format_option, sign, int_part_buf, int_part_buf_size, frac_part_buf, frac_part_buf_size);

  00060	48 8b 85 b8 02
	00 00		 mov	 rax, QWORD PTR frac_part_buf_size$[rbp]
  00067	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0006c	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR frac_part_buf$[rbp]
  00073	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00078	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR int_part_buf_size$[rbp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00084	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR int_part_buf$[rbp]
  0008b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00090	48 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR sign$[rbp]
  00097	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009c	4c 8b 8d 90 02
	00 00		 mov	 r9, QWORD PTR format_option$[rbp]
  000a3	44 8b 85 88 02
	00 00		 mov	 r8d, DWORD PTR number_styles$[rbp]
  000aa	48 8b 95 80 02
	00 00		 mov	 rdx, QWORD PTR in_ptr$[rbp]
  000b1	48 8d 4d 10	 lea	 rcx, QWORD PTR state$[rbp]
  000b5	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState
  000ba	90		 npad	 1

; 551  :         return (state.ParseAsDecimalNumberString());

  000bb	48 8d 4d 10	 lea	 rcx, QWORD PTR state$[rbp]
  000bf	e8 00 00 00 00	 call	 ?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
  000c4	89 85 24 02 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  000ca	48 8d 4d 10	 lea	 rcx, QWORD PTR state$[rbp]
  000ce	e8 00 00 00 00	 call	 ??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
  000d3	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR $T4[rbp]

; 552  :     }

  000d9	8b f8		 mov	 edi, eax
  000db	48 8d 4d b0	 lea	 rcx, QWORD PTR [rbp-80]
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z$rtcFrameData
  000e6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000eb	8b c7		 mov	 eax, edi
  000ed	48 8b 8d 58 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000f4	48 33 cd	 xor	 rcx, rbp
  000f7	e8 00 00 00 00	 call	 __security_check_cookie
  000fc	48 8d a5 68 02
	00 00		 lea	 rsp, QWORD PTR [rbp+616]
  00103	5f		 pop	 rdi
  00104	5d		 pop	 rbp
  00105	c3		 ret	 0
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ENDP ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
state$ = 16
$T4 = 548
$T5 = 584
__$ArrayPad$ = 600
in_ptr$ = 640
number_styles$ = 648
format_option$ = 656
sign$ = 664
int_part_buf$ = 672
int_part_buf_size$ = 680
frac_part_buf$ = 688
frac_part_buf_size$ = 696
?dtor$0@?0??ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ParseAsDecimalNumberString'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 50	 lea	 rbp, QWORD PTR [rdx+80]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR state$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ParseAsDecimalNumberString'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
state$ = 16
$T4 = 548
$T5 = 584
__$ArrayPad$ = 600
in_ptr$ = 640
number_styles$ = 648
format_option$ = 656
sign$ = 664
int_part_buf$ = 672
int_part_buf_size$ = 680
frac_part_buf$ = 688
frac_part_buf_size$ = 696
?dtor$0@?0??ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ParseAsDecimalNumberString'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 50	 lea	 rbp, QWORD PTR [rdx+80]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR state$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ParseAsDecimalNumberString'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ
_TEXT	SEGMENT
c$1 = 4
tv144 = 216
tv142 = 216
tv133 = 216
tv80 = 216
tv67 = 216
tv135 = 224
tv82 = 224
this$ = 272
?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence, COMDAT

; 527  :         {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@ParseAsFra:

; 528  :             for (;;)
; 529  :             {
; 530  :                 wchar_t c = _source.PeekChar();

  00036	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00044	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00047	48 89 8d d8 00
	00 00		 mov	 QWORD PTR tv67[rbp], rcx
  0004e	48 8b c8	 mov	 rcx, rax
  00051	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv67[rbp]
  00058	ff 10		 call	 QWORD PTR [rax]
  0005a	66 89 45 04	 mov	 WORD PTR c$1[rbp], ax

; 531  :                 if (ParseDecimalDigit(c) >= 0)

  0005e	0f b7 4d 04	 movzx	 ecx, WORD PTR c$1[rbp]
  00062	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00067	85 c0		 test	 eax, eax
  00069	7c 63		 jl	 SHORT $LN5@ParseAsFra

; 532  :                 {
; 533  :                     _frac_part.Write(c);

  0006b	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 83 c0 38	 add	 rax, 56			; 00000038H
  00076	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  0007d	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00088	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008c	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv82[rbp], rax
  00093	0f b7 55 04	 movzx	 edx, WORD PTR c$1[rbp]
  00097	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv80[rbp]
  0009e	ff 95 e0 00 00
	00		 call	 QWORD PTR tv82[rbp]

; 534  :                     _source.Progress();

  000a4	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ab	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b5	48 89 8d d8 00
	00 00		 mov	 QWORD PTR tv144[rbp], rcx
  000bc	48 8b c8	 mov	 rcx, rax
  000bf	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv144[rbp]
  000c6	ff 50 08	 call	 QWORD PTR [rax+8]
  000c9	e9 82 00 00 00	 jmp	 $LN6@ParseAsFra
$LN5@ParseAsFra:

; 535  :                 }
; 536  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  000ce	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d5	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  000d8	25 00 02 00 00	 and	 eax, 512		; 00000200H
  000dd	85 c0		 test	 eax, eax
  000df	74 6d		 je	 SHORT $LN7@ParseAsFra
  000e1	0f b7 4d 04	 movzx	 ecx, WORD PTR c$1[rbp]
  000e5	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  000ea	85 c0		 test	 eax, eax
  000ec	7c 60		 jl	 SHORT $LN7@ParseAsFra

; 537  :                 {
; 538  :                     _frac_part.Write(c);

  000ee	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f5	48 83 c0 38	 add	 rax, 56			; 00000038H
  000f9	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv133[rbp], rax
  00100	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00107	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0010b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0010f	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv135[rbp], rax
  00116	0f b7 55 04	 movzx	 edx, WORD PTR c$1[rbp]
  0011a	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv133[rbp]
  00121	ff 95 e0 00 00
	00		 call	 QWORD PTR tv135[rbp]

; 539  :                     _source.Progress();

  00127	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0012e	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00135	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00138	48 89 8d d8 00
	00 00		 mov	 QWORD PTR tv142[rbp], rcx
  0013f	48 8b c8	 mov	 rcx, rax
  00142	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv142[rbp]
  00149	ff 50 08	 call	 QWORD PTR [rax+8]

; 540  :                 }
; 541  :                 else

  0014c	eb 02		 jmp	 SHORT $LN8@ParseAsFra
$LN7@ParseAsFra:

; 542  :                     break;

  0014e	eb 05		 jmp	 SHORT $LN3@ParseAsFra
$LN8@ParseAsFra:
$LN6@ParseAsFra:

; 543  :             }

  00150	e9 e1 fe ff ff	 jmp	 $LN2@ParseAsFra
$LN3@ParseAsFra:

; 544  :         }

  00155	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  0015c	5f		 pop	 rdi
  0015d	5d		 pop	 rbp
  0015e	c3		 ret	 0
?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ
_TEXT	SEGMENT
c$1 = 4
tv202 = 216
tv200 = 216
tv192 = 216
tv180 = 216
tv165 = 216
tv153 = 216
tv133 = 216
tv80 = 216
tv67 = 216
tv194 = 224
tv182 = 224
tv167 = 224
tv155 = 224
tv135 = 224
tv82 = 224
this$ = 272
?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence, COMDAT

; 503  :         {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@ParseAsInt:

; 504  :             for (;;)
; 505  :             {
; 506  :                 wchar_t c = _source.PeekChar();

  00036	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00044	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00047	48 89 8d d8 00
	00 00		 mov	 QWORD PTR tv67[rbp], rcx
  0004e	48 8b c8	 mov	 rcx, rax
  00051	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv67[rbp]
  00058	ff 10		 call	 QWORD PTR [rax]
  0005a	66 89 45 04	 mov	 WORD PTR c$1[rbp], ax

; 507  :                 if (ParseDecimalDigit(c) >= 0)

  0005e	0f b7 4d 04	 movzx	 ecx, WORD PTR c$1[rbp]
  00062	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00067	85 c0		 test	 eax, eax
  00069	7c 63		 jl	 SHORT $LN5@ParseAsInt

; 508  :                 {
; 509  :                     _int_part.Write(c);

  0006b	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00072	48 83 c0 10	 add	 rax, 16
  00076	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv80[rbp], rax
  0007d	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00088	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008c	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv82[rbp], rax
  00093	0f b7 55 04	 movzx	 edx, WORD PTR c$1[rbp]
  00097	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv80[rbp]
  0009e	ff 95 e0 00 00
	00		 call	 QWORD PTR tv82[rbp]

; 510  :                     _source.Progress();

  000a4	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ab	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b5	48 89 8d d8 00
	00 00		 mov	 QWORD PTR tv202[rbp], rcx
  000bc	48 8b c8	 mov	 rcx, rax
  000bf	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv202[rbp]
  000c6	ff 50 08	 call	 QWORD PTR [rax+8]
  000c9	e9 be 01 00 00	 jmp	 $LN6@ParseAsInt
$LN5@ParseAsInt:

; 511  :                 }
; 512  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  000ce	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d5	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  000d8	25 00 02 00 00	 and	 eax, 512		; 00000200H
  000dd	85 c0		 test	 eax, eax
  000df	74 70		 je	 SHORT $LN7@ParseAsInt
  000e1	0f b7 4d 04	 movzx	 ecx, WORD PTR c$1[rbp]
  000e5	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  000ea	85 c0		 test	 eax, eax
  000ec	7c 63		 jl	 SHORT $LN7@ParseAsInt

; 513  :                 {
; 514  :                     _int_part.Write(c);

  000ee	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f5	48 83 c0 10	 add	 rax, 16
  000f9	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv133[rbp], rax
  00100	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00107	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0010b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0010f	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv135[rbp], rax
  00116	0f b7 55 04	 movzx	 edx, WORD PTR c$1[rbp]
  0011a	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv133[rbp]
  00121	ff 95 e0 00 00
	00		 call	 QWORD PTR tv135[rbp]

; 515  :                     _source.Progress();

  00127	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0012e	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00135	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00138	48 89 8d d8 00
	00 00		 mov	 QWORD PTR tv200[rbp], rcx
  0013f	48 8b c8	 mov	 rcx, rax
  00142	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv200[rbp]
  00149	ff 50 08	 call	 QWORD PTR [rax+8]
  0014c	e9 3b 01 00 00	 jmp	 $LN8@ParseAsInt
$LN7@ParseAsInt:

; 516  :                 }
; 517  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_THOUSANDS) && _source.StartsWith(_group_separator))

  00151	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00158	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0015b	83 e0 40	 and	 eax, 64			; 00000040H
  0015e	85 c0		 test	 eax, eax
  00160	0f 84 89 00 00
	00		 je	 $LN9@ParseAsInt
  00166	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0016d	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv153[rbp], rax
  00174	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0017b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0017e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00182	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv155[rbp], rax
  00189	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00190	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  00196	48 8b d0	 mov	 rdx, rax
  00199	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv153[rbp]
  001a0	ff 95 e0 00 00
	00		 call	 QWORD PTR tv155[rbp]
  001a6	85 c0		 test	 eax, eax
  001a8	74 45		 je	 SHORT $LN9@ParseAsInt

; 518  :                     _source.SkipString(_group_separator);

  001aa	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001b1	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv165[rbp], rax
  001b8	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c2	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  001c6	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv167[rbp], rax
  001cd	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d4	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  001da	48 8b d0	 mov	 rdx, rax
  001dd	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv165[rbp]
  001e4	ff 95 e0 00 00
	00		 call	 QWORD PTR tv167[rbp]
  001ea	e9 9d 00 00 00	 jmp	 $LN10@ParseAsInt
$LN9@ParseAsInt:

; 519  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_THOUSANDS) && _source.StartsWith(_secondary_group_separator))

  001ef	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001f6	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  001f9	83 e0 40	 and	 eax, 64			; 00000040H
  001fc	85 c0		 test	 eax, eax
  001fe	0f 84 86 00 00
	00		 je	 $LN11@ParseAsInt
  00204	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0020b	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv180[rbp], rax
  00212	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00219	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0021c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00220	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv182[rbp], rax
  00227	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0022e	48 05 1a 01 00
	00		 add	 rax, 282		; 0000011aH
  00234	48 8b d0	 mov	 rdx, rax
  00237	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv180[rbp]
  0023e	ff 95 e0 00 00
	00		 call	 QWORD PTR tv182[rbp]
  00244	85 c0		 test	 eax, eax
  00246	74 42		 je	 SHORT $LN11@ParseAsInt

; 520  :                     _source.SkipString(_secondary_group_separator);

  00248	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0024f	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv192[rbp], rax
  00256	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0025d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00260	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00264	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv194[rbp], rax
  0026b	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00272	48 05 1a 01 00
	00		 add	 rax, 282		; 0000011aH
  00278	48 8b d0	 mov	 rdx, rax
  0027b	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv192[rbp]
  00282	ff 95 e0 00 00
	00		 call	 QWORD PTR tv194[rbp]

; 521  :                 else

  00288	eb 02		 jmp	 SHORT $LN12@ParseAsInt
$LN11@ParseAsInt:

; 522  :                     break;

  0028a	eb 05		 jmp	 SHORT $LN3@ParseAsInt
$LN12@ParseAsInt:
$LN10@ParseAsInt:
$LN8@ParseAsInt:
$LN6@ParseAsInt:

; 523  :             }

  0028c	e9 a5 fd ff ff	 jmp	 $LN2@ParseAsInt
$LN3@ParseAsInt:

; 524  :         }

  00291	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00298	5f		 pop	 rdi
  00299	5d		 pop	 rbp
  0029a	c3		 ret	 0
?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ
_TEXT	SEGMENT
tv78 = 192
this$ = 240
?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString, COMDAT

; 479  :         {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 480  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 0f		 je	 SHORT $LN2@ParseAsHex

; 481  :                 _source.SkipSpace();

  00047	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN2@ParseAsHex:

; 482  :             ParseAsIntegerPartNumberSequence();

  00056	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005d	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 483  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00062	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00069	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0006c	83 e0 02	 and	 eax, 2
  0006f	85 c0		 test	 eax, eax
  00071	74 0f		 je	 SHORT $LN3@ParseAsHex

; 484  :                 _source.SkipSpace();

  00073	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN3@ParseAsHex:

; 485  :             if (_source.PeekChar() != L'\0')

  00082	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00089	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00090	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00093	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv78[rbp], rcx
  0009a	48 8b c8	 mov	 rcx, rax
  0009d	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv78[rbp]
  000a4	ff 10		 call	 QWORD PTR [rax]
  000a6	0f b7 c0	 movzx	 eax, ax
  000a9	85 c0		 test	 eax, eax
  000ab	74 04		 je	 SHORT $LN4@ParseAsHex

; 486  :                 return (0);

  000ad	33 c0		 xor	 eax, eax
  000af	eb 05		 jmp	 SHORT $LN1@ParseAsHex
$LN4@ParseAsHex:

; 487  :             return (1);

  000b1	b8 01 00 00 00	 mov	 eax, 1
$LN1@ParseAsHex:

; 488  :         }

  000b6	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000bd	5f		 pop	 rdi
  000be	5d		 pop	 rbp
  000bf	c3		 ret	 0
?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ
_TEXT	SEGMENT
tv1998 = 192
tv1987 = 192
tv1975 = 192
tv1960 = 192
tv1946 = 192
tv1931 = 192
tv1919 = 192
tv1904 = 192
tv1890 = 192
tv1875 = 192
tv1861 = 192
tv1846 = 192
tv1832 = 192
tv1817 = 192
tv1805 = 192
tv1790 = 192
tv1776 = 192
tv1761 = 192
tv1747 = 192
tv1732 = 192
tv1718 = 192
tv1703 = 192
tv1689 = 192
tv1674 = 192
tv1662 = 192
tv1647 = 192
tv1636 = 192
tv1621 = 192
tv1611 = 192
tv1599 = 192
tv1584 = 192
tv1572 = 192
tv1557 = 192
tv1543 = 192
tv1528 = 192
tv1516 = 192
tv1501 = 192
tv1487 = 192
tv1472 = 192
tv1458 = 192
tv1443 = 192
tv1429 = 192
tv1414 = 192
tv1402 = 192
tv1387 = 192
tv1373 = 192
tv1358 = 192
tv1344 = 192
tv1329 = 192
tv1315 = 192
tv1300 = 192
tv1286 = 192
tv1271 = 192
tv1259 = 192
tv1244 = 192
tv1233 = 192
tv1218 = 192
tv1208 = 192
tv1196 = 192
tv1178 = 192
tv1171 = 192
tv1159 = 192
tv1144 = 192
tv1132 = 192
tv1117 = 192
tv1106 = 192
tv1091 = 192
tv1081 = 192
tv1069 = 192
tv1051 = 192
tv1043 = 192
tv1033 = 192
tv1021 = 192
tv1003 = 192
tv996 = 192
tv985 = 192
tv971 = 192
tv959 = 192
tv944 = 192
tv930 = 192
tv915 = 192
tv903 = 192
tv888 = 192
tv876 = 192
tv861 = 192
tv850 = 192
tv835 = 192
tv825 = 192
tv813 = 192
tv795 = 192
tv787 = 192
tv777 = 192
tv765 = 192
tv747 = 192
tv740 = 192
tv729 = 192
tv715 = 192
tv703 = 192
tv688 = 192
tv674 = 192
tv659 = 192
tv648 = 192
tv637 = 192
tv625 = 192
tv610 = 192
tv599 = 192
tv584 = 192
tv574 = 192
tv562 = 192
tv544 = 192
tv536 = 192
tv526 = 192
tv514 = 192
tv496 = 192
tv489 = 192
tv478 = 192
tv464 = 192
tv452 = 192
tv437 = 192
tv424 = 192
tv410 = 192
tv396 = 192
tv381 = 192
tv367 = 192
tv351 = 192
tv341 = 192
tv329 = 192
tv311 = 192
tv303 = 192
tv293 = 192
tv281 = 192
tv263 = 192
tv256 = 192
tv242 = 192
tv226 = 192
tv216 = 192
tv204 = 192
tv186 = 192
tv179 = 192
tv165 = 192
tv150 = 192
tv139 = 192
tv93 = 192
tv81 = 192
tv1989 = 200
tv1977 = 200
tv1962 = 200
tv1948 = 200
tv1933 = 200
tv1921 = 200
tv1906 = 200
tv1892 = 200
tv1877 = 200
tv1863 = 200
tv1848 = 200
tv1834 = 200
tv1819 = 200
tv1807 = 200
tv1792 = 200
tv1778 = 200
tv1763 = 200
tv1749 = 200
tv1734 = 200
tv1720 = 200
tv1705 = 200
tv1691 = 200
tv1676 = 200
tv1664 = 200
tv1649 = 200
tv1638 = 200
tv1623 = 200
tv1613 = 200
tv1601 = 200
tv1586 = 200
tv1574 = 200
tv1559 = 200
tv1545 = 200
tv1530 = 200
tv1518 = 200
tv1503 = 200
tv1489 = 200
tv1474 = 200
tv1460 = 200
tv1445 = 200
tv1431 = 200
tv1416 = 200
tv1404 = 200
tv1389 = 200
tv1375 = 200
tv1360 = 200
tv1346 = 200
tv1331 = 200
tv1317 = 200
tv1302 = 200
tv1288 = 200
tv1273 = 200
tv1261 = 200
tv1246 = 200
tv1235 = 200
tv1220 = 200
tv1210 = 200
tv1198 = 200
tv1173 = 200
tv1161 = 200
tv1146 = 200
tv1134 = 200
tv1119 = 200
tv1108 = 200
tv1093 = 200
tv1083 = 200
tv1071 = 200
tv1045 = 200
tv1035 = 200
tv1023 = 200
tv998 = 200
tv987 = 200
tv973 = 200
tv961 = 200
tv946 = 200
tv932 = 200
tv917 = 200
tv905 = 200
tv890 = 200
tv878 = 200
tv863 = 200
tv852 = 200
tv837 = 200
tv827 = 200
tv815 = 200
tv789 = 200
tv779 = 200
tv767 = 200
tv742 = 200
tv731 = 200
tv717 = 200
tv705 = 200
tv690 = 200
tv676 = 200
tv661 = 200
tv650 = 200
tv639 = 200
tv627 = 200
tv612 = 200
tv601 = 200
tv586 = 200
tv576 = 200
tv564 = 200
tv538 = 200
tv528 = 200
tv516 = 200
tv491 = 200
tv480 = 200
tv466 = 200
tv454 = 200
tv439 = 200
tv426 = 200
tv412 = 200
tv398 = 200
tv383 = 200
tv369 = 200
tv353 = 200
tv343 = 200
tv331 = 200
tv305 = 200
tv295 = 200
tv283 = 200
tv258 = 200
tv244 = 200
tv228 = 200
tv218 = 200
tv206 = 200
tv181 = 200
tv167 = 200
tv152 = 200
tv141 = 200
tv95 = 200
tv83 = 200
this$ = 240
?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString, COMDAT

; 130  :         {

$LN115:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 131  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 0f		 je	 SHORT $LN2@ParseAsDec

; 132  :                 _source.SkipSpace();

  00047	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN2@ParseAsDec:

; 133  :             if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00056	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005d	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00060	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00065	85 c0		 test	 eax, eax
  00067	0f 84 14 07 00
	00		 je	 $LN3@ParseAsDec
  0006d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00074	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  0007b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00082	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00085	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00089	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  00090	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00097	48 83 c0 70	 add	 rax, 112		; 00000070H
  0009b	48 8b d0	 mov	 rdx, rax
  0009e	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv81[rbp]
  000a5	ff 95 c8 00 00
	00		 call	 QWORD PTR tv83[rbp]
  000ab	85 c0		 test	 eax, eax
  000ad	0f 84 ce 06 00
	00		 je	 $LN3@ParseAsDec

; 134  :             {
; 135  :                 _source.SkipString(_currency_symbol);

  000b3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ba	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  000c1	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cb	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000cf	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv95[rbp], rax
  000d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000dd	48 83 c0 70	 add	 rax, 112		; 00000070H
  000e1	48 8b d0	 mov	 rdx, rax
  000e4	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  000eb	ff 95 c8 00 00
	00		 call	 QWORD PTR tv95[rbp]

; 136  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  000f1	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f8	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  000fb	83 e0 01	 and	 eax, 1
  000fe	85 c0		 test	 eax, eax
  00100	74 72		 je	 SHORT $LN5@ParseAsDec
  00102	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00109	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv139[rbp], rax
  00110	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00117	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0011a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0011e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv141[rbp], rax
  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  0012c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv139[rbp]
  00133	ff 95 c8 00 00
	00		 call	 QWORD PTR tv141[rbp]
  00139	85 c0		 test	 eax, eax
  0013b	74 37		 je	 SHORT $LN5@ParseAsDec

; 137  :                     _source.SkipString(L" ");

  0013d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00144	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv150[rbp], rax
  0014b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00152	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00155	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00159	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv152[rbp], rax
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  00167	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv150[rbp]
  0016e	ff 95 c8 00 00
	00		 call	 QWORD PTR tv152[rbp]
$LN5@ParseAsDec:

; 138  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_positive_sign))

  00174	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0017b	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0017e	83 e0 04	 and	 eax, 4
  00181	85 c0		 test	 eax, eax
  00183	0f 84 b9 01 00
	00		 je	 $LN6@ParseAsDec
  00189	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00190	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv165[rbp], rax
  00197	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0019e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a1	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001a5	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv167[rbp], rax
  001ac	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001b3	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  001b9	48 8b d0	 mov	 rdx, rax
  001bc	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv165[rbp]
  001c3	ff 95 c8 00 00
	00		 call	 QWORD PTR tv167[rbp]
  001c9	85 c0		 test	 eax, eax
  001cb	0f 84 71 01 00
	00		 je	 $LN6@ParseAsDec

; 139  :                 {
; 140  :                     *_sign = 1;

  001d1	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001d8	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001dc	c6 00 01	 mov	 BYTE PTR [rax], 1

; 141  :                     _source.SkipString(_positive_sign);

  001df	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001e6	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv179[rbp], rax
  001ed	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001f4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001f7	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  001fb	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv181[rbp], rax
  00202	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00209	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  0020f	48 8b d0	 mov	 rdx, rax
  00212	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv179[rbp]
  00219	ff 95 c8 00 00
	00		 call	 QWORD PTR tv181[rbp]

; 142  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  0021f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00226	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0022d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00230	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv186[rbp], rcx
  00237	48 8b c8	 mov	 rcx, rax
  0023a	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv186[rbp]
  00241	ff 10		 call	 QWORD PTR [rax]
  00243	0f b7 c8	 movzx	 ecx, ax
  00246	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0024b	85 c0		 test	 eax, eax
  0024d	7c 0c		 jl	 SHORT $LN8@ParseAsDec

; 143  :                         ParseAsIntegerPartNumberSequence();

  0024f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00256	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN8@ParseAsDec:

; 144  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  0025b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00262	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00265	83 e0 20	 and	 eax, 32			; 00000020H
  00268	85 c0		 test	 eax, eax
  0026a	0f 84 cd 00 00
	00		 je	 $LN9@ParseAsDec
  00270	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00277	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv204[rbp], rax
  0027e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00285	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00288	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0028c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv206[rbp], rax
  00293	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0029a	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  002a0	48 8b d0	 mov	 rdx, rax
  002a3	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv204[rbp]
  002aa	ff 95 c8 00 00
	00		 call	 QWORD PTR tv206[rbp]
  002b0	85 c0		 test	 eax, eax
  002b2	0f 84 85 00 00
	00		 je	 $LN9@ParseAsDec

; 145  :                     {
; 146  :                         _source.SkipString(_decimal_separator);

  002b8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002bf	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv216[rbp], rax
  002c6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002cd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002d0	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  002d4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv218[rbp], rax
  002db	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002e2	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  002e8	48 8b d0	 mov	 rdx, rax
  002eb	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv216[rbp]
  002f2	ff 95 c8 00 00
	00		 call	 QWORD PTR tv218[rbp]

; 147  :                         _frac_part.Write(L'.');

  002f8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002ff	48 83 c0 38	 add	 rax, 56			; 00000038H
  00303	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv226[rbp], rax
  0030a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00311	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00315	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00319	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv228[rbp], rax
  00320	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  00324	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv226[rbp]
  0032b	ff 95 c8 00 00
	00		 call	 QWORD PTR tv228[rbp]

; 148  :                         ParseAsFractionPartNumberSequence();

  00331	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00338	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN9@ParseAsDec:

; 149  :                     }
; 150  :                 }

  0033d	e9 3a 04 00 00	 jmp	 $LN7@ParseAsDec
$LN6@ParseAsDec:

; 151  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  00342	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00349	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0034c	83 e0 04	 and	 eax, 4
  0034f	85 c0		 test	 eax, eax
  00351	0f 84 b9 01 00
	00		 je	 $LN10@ParseAsDec
  00357	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0035e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv242[rbp], rax
  00365	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0036c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0036f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00373	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv244[rbp], rax
  0037a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00381	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  00387	48 8b d0	 mov	 rdx, rax
  0038a	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv242[rbp]
  00391	ff 95 c8 00 00
	00		 call	 QWORD PTR tv244[rbp]
  00397	85 c0		 test	 eax, eax
  00399	0f 84 71 01 00
	00		 je	 $LN10@ParseAsDec

; 152  :                 {
; 153  :                     *_sign = -1;

  0039f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003a6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  003aa	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 154  :                     _source.SkipString(_negative_sign);

  003ad	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003b4	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv256[rbp], rax
  003bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003c5	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  003c9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv258[rbp], rax
  003d0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003d7	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  003dd	48 8b d0	 mov	 rdx, rax
  003e0	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv256[rbp]
  003e7	ff 95 c8 00 00
	00		 call	 QWORD PTR tv258[rbp]

; 155  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  003ed	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  003f4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003fb	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003fe	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv263[rbp], rcx
  00405	48 8b c8	 mov	 rcx, rax
  00408	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv263[rbp]
  0040f	ff 10		 call	 QWORD PTR [rax]
  00411	0f b7 c8	 movzx	 ecx, ax
  00414	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00419	85 c0		 test	 eax, eax
  0041b	7c 0c		 jl	 SHORT $LN12@ParseAsDec

; 156  :                         ParseAsIntegerPartNumberSequence();

  0041d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00424	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN12@ParseAsDec:

; 157  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00429	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00430	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00433	83 e0 20	 and	 eax, 32			; 00000020H
  00436	85 c0		 test	 eax, eax
  00438	0f 84 cd 00 00
	00		 je	 $LN13@ParseAsDec
  0043e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00445	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv281[rbp], rax
  0044c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00453	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00456	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0045a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv283[rbp], rax
  00461	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00468	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  0046e	48 8b d0	 mov	 rdx, rax
  00471	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv281[rbp]
  00478	ff 95 c8 00 00
	00		 call	 QWORD PTR tv283[rbp]
  0047e	85 c0		 test	 eax, eax
  00480	0f 84 85 00 00
	00		 je	 $LN13@ParseAsDec

; 158  :                     {
; 159  :                         _source.SkipString(_decimal_separator);

  00486	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0048d	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv293[rbp], rax
  00494	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0049b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0049e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  004a2	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv295[rbp], rax
  004a9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004b0	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  004b6	48 8b d0	 mov	 rdx, rax
  004b9	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv293[rbp]
  004c0	ff 95 c8 00 00
	00		 call	 QWORD PTR tv295[rbp]

; 160  :                         _frac_part.Write(L'.');

  004c6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004cd	48 83 c0 38	 add	 rax, 56			; 00000038H
  004d1	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv303[rbp], rax
  004d8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  004df	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  004e3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  004e7	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv305[rbp], rax
  004ee	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  004f2	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv303[rbp]
  004f9	ff 95 c8 00 00
	00		 call	 QWORD PTR tv305[rbp]

; 161  :                         ParseAsFractionPartNumberSequence();

  004ff	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00506	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN13@ParseAsDec:

; 162  :                     }
; 163  :                 }
; 164  :                 else

  0050b	e9 6c 02 00 00	 jmp	 $LN11@ParseAsDec
$LN10@ParseAsDec:

; 165  :                 {
; 166  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00510	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00517	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0051e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00521	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv311[rbp], rcx
  00528	48 8b c8	 mov	 rcx, rax
  0052b	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv311[rbp]
  00532	ff 10		 call	 QWORD PTR [rax]
  00534	0f b7 c8	 movzx	 ecx, ax
  00537	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0053c	85 c0		 test	 eax, eax
  0053e	7c 0c		 jl	 SHORT $LN14@ParseAsDec

; 167  :                         ParseAsIntegerPartNumberSequence();

  00540	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00547	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN14@ParseAsDec:

; 168  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  0054c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00553	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00556	83 e0 20	 and	 eax, 32			; 00000020H
  00559	85 c0		 test	 eax, eax
  0055b	0f 84 cd 00 00
	00		 je	 $LN15@ParseAsDec
  00561	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00568	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv329[rbp], rax
  0056f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00576	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00579	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0057d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv331[rbp], rax
  00584	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0058b	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  00591	48 8b d0	 mov	 rdx, rax
  00594	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv329[rbp]
  0059b	ff 95 c8 00 00
	00		 call	 QWORD PTR tv331[rbp]
  005a1	85 c0		 test	 eax, eax
  005a3	0f 84 85 00 00
	00		 je	 $LN15@ParseAsDec

; 169  :                     {
; 170  :                         _source.SkipString(_decimal_separator);

  005a9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  005b0	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv341[rbp], rax
  005b7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  005be	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005c1	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  005c5	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv343[rbp], rax
  005cc	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  005d3	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  005d9	48 8b d0	 mov	 rdx, rax
  005dc	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv341[rbp]
  005e3	ff 95 c8 00 00
	00		 call	 QWORD PTR tv343[rbp]

; 171  :                         _frac_part.Write(L'.');

  005e9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  005f0	48 83 c0 38	 add	 rax, 56			; 00000038H
  005f4	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv351[rbp], rax
  005fb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00602	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00606	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0060a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv353[rbp], rax
  00611	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  00615	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv351[rbp]
  0061c	ff 95 c8 00 00
	00		 call	 QWORD PTR tv353[rbp]

; 172  :                         ParseAsFractionPartNumberSequence();

  00622	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00629	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN15@ParseAsDec:

; 173  :                     }
; 174  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  0062e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00635	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00638	83 e0 08	 and	 eax, 8
  0063b	85 c0		 test	 eax, eax
  0063d	0f 84 92 00 00
	00		 je	 $LN16@ParseAsDec
  00643	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0064a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv367[rbp], rax
  00651	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00658	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0065b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0065f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv369[rbp], rax
  00666	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0066d	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  00673	48 8b d0	 mov	 rdx, rax
  00676	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv367[rbp]
  0067d	ff 95 c8 00 00
	00		 call	 QWORD PTR tv369[rbp]
  00683	85 c0		 test	 eax, eax
  00685	74 4e		 je	 SHORT $LN16@ParseAsDec

; 175  :                     {
; 176  :                         *_sign = 1;

  00687	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0068e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00692	c6 00 01	 mov	 BYTE PTR [rax], 1

; 177  :                         _source.SkipString(_positive_sign);

  00695	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0069c	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv381[rbp], rax
  006a3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  006aa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006ad	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  006b1	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv383[rbp], rax
  006b8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  006bf	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  006c5	48 8b d0	 mov	 rdx, rax
  006c8	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv381[rbp]
  006cf	ff 95 c8 00 00
	00		 call	 QWORD PTR tv383[rbp]
$LN16@ParseAsDec:

; 178  :                     }
; 179  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  006d5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  006dc	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  006df	83 e0 08	 and	 eax, 8
  006e2	85 c0		 test	 eax, eax
  006e4	0f 84 92 00 00
	00		 je	 $LN17@ParseAsDec
  006ea	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  006f1	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv396[rbp], rax
  006f8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  006ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00702	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00706	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv398[rbp], rax
  0070d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00714	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  0071a	48 8b d0	 mov	 rdx, rax
  0071d	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv396[rbp]
  00724	ff 95 c8 00 00
	00		 call	 QWORD PTR tv398[rbp]
  0072a	85 c0		 test	 eax, eax
  0072c	74 4e		 je	 SHORT $LN17@ParseAsDec

; 180  :                     {
; 181  :                         *_sign = -1;

  0072e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00735	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00739	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 182  :                         _source.SkipString(_negative_sign);

  0073c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00743	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv410[rbp], rax
  0074a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00751	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00754	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00758	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv412[rbp], rax
  0075f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00766	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  0076c	48 8b d0	 mov	 rdx, rax
  0076f	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv410[rbp]
  00776	ff 95 c8 00 00
	00		 call	 QWORD PTR tv412[rbp]
$LN17@ParseAsDec:
$LN11@ParseAsDec:
$LN7@ParseAsDec:

; 183  :                     }
; 184  :                     else
; 185  :                     {
; 186  :                     }
; 187  :                 }

  0077c	e9 e5 23 00 00	 jmp	 $LN4@ParseAsDec
$LN3@ParseAsDec:

; 188  :             }
; 189  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && _source.StartsWith(L"(") /*&& 負数のエラーチェック()*/)

  00781	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00788	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0078b	83 e0 10	 and	 eax, 16
  0078e	85 c0		 test	 eax, eax
  00790	0f 84 83 05 00
	00		 je	 $LN19@ParseAsDec
  00796	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0079d	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv424[rbp], rax
  007a4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  007ab	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  007b2	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv426[rbp], rax
  007b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13LLDNKHDC@?$AA?$CI@
  007c0	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv424[rbp]
  007c7	ff 95 c8 00 00
	00		 call	 QWORD PTR tv426[rbp]
  007cd	85 c0		 test	 eax, eax
  007cf	0f 84 44 05 00
	00		 je	 $LN19@ParseAsDec

; 190  :             {
; 191  :                 *_sign = -1;

  007d5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  007dc	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  007e0	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 192  :                 _source.SkipString(L"(");

  007e3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  007ea	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv437[rbp], rax
  007f1	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  007f8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007fb	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  007ff	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv439[rbp], rax
  00806	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13LLDNKHDC@?$AA?$CI@
  0080d	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv437[rbp]
  00814	ff 95 c8 00 00
	00		 call	 QWORD PTR tv439[rbp]

; 193  : 
; 194  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  0081a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00821	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00824	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00829	85 c0		 test	 eax, eax
  0082b	0f 84 2a 02 00
	00		 je	 $LN21@ParseAsDec
  00831	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00838	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv452[rbp], rax
  0083f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00846	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00849	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0084d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv454[rbp], rax
  00854	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0085b	48 83 c0 70	 add	 rax, 112		; 00000070H
  0085f	48 8b d0	 mov	 rdx, rax
  00862	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv452[rbp]
  00869	ff 95 c8 00 00
	00		 call	 QWORD PTR tv454[rbp]
  0086f	85 c0		 test	 eax, eax
  00871	0f 84 e4 01 00
	00		 je	 $LN21@ParseAsDec

; 195  :                 {
; 196  :                     _source.SkipString(_currency_symbol);

  00877	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0087e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv464[rbp], rax
  00885	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0088c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0088f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00893	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv466[rbp], rax
  0089a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  008a1	48 83 c0 70	 add	 rax, 112		; 00000070H
  008a5	48 8b d0	 mov	 rdx, rax
  008a8	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv464[rbp]
  008af	ff 95 c8 00 00
	00		 call	 QWORD PTR tv466[rbp]

; 197  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  008b5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  008bc	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  008bf	83 e0 01	 and	 eax, 1
  008c2	85 c0		 test	 eax, eax
  008c4	74 72		 je	 SHORT $LN23@ParseAsDec
  008c6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  008cd	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv478[rbp], rax
  008d4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  008db	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008de	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  008e2	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv480[rbp], rax
  008e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  008f0	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv478[rbp]
  008f7	ff 95 c8 00 00
	00		 call	 QWORD PTR tv480[rbp]
  008fd	85 c0		 test	 eax, eax
  008ff	74 37		 je	 SHORT $LN23@ParseAsDec

; 198  :                         _source.SkipString(L" ");

  00901	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00908	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv489[rbp], rax
  0090f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00916	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00919	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0091d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv491[rbp], rax
  00924	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  0092b	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv489[rbp]
  00932	ff 95 c8 00 00
	00		 call	 QWORD PTR tv491[rbp]
$LN23@ParseAsDec:

; 199  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00938	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0093f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00946	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00949	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv496[rbp], rcx
  00950	48 8b c8	 mov	 rcx, rax
  00953	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv496[rbp]
  0095a	ff 10		 call	 QWORD PTR [rax]
  0095c	0f b7 c8	 movzx	 ecx, ax
  0095f	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00964	85 c0		 test	 eax, eax
  00966	7c 0c		 jl	 SHORT $LN24@ParseAsDec

; 200  :                         ParseAsIntegerPartNumberSequence();

  00968	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0096f	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN24@ParseAsDec:

; 201  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00974	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0097b	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0097e	83 e0 20	 and	 eax, 32			; 00000020H
  00981	85 c0		 test	 eax, eax
  00983	0f 84 cd 00 00
	00		 je	 $LN25@ParseAsDec
  00989	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00990	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv514[rbp], rax
  00997	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0099e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009a1	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  009a5	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv516[rbp], rax
  009ac	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  009b3	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  009b9	48 8b d0	 mov	 rdx, rax
  009bc	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv514[rbp]
  009c3	ff 95 c8 00 00
	00		 call	 QWORD PTR tv516[rbp]
  009c9	85 c0		 test	 eax, eax
  009cb	0f 84 85 00 00
	00		 je	 $LN25@ParseAsDec

; 202  :                     {
; 203  :                         _source.SkipString(_decimal_separator);

  009d1	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  009d8	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv526[rbp], rax
  009df	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  009e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009e9	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  009ed	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv528[rbp], rax
  009f4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  009fb	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  00a01	48 8b d0	 mov	 rdx, rax
  00a04	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv526[rbp]
  00a0b	ff 95 c8 00 00
	00		 call	 QWORD PTR tv528[rbp]

; 204  :                         _frac_part.Write(L'.');

  00a11	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00a18	48 83 c0 38	 add	 rax, 56			; 00000038H
  00a1c	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv536[rbp], rax
  00a23	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00a2a	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00a2e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00a32	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv538[rbp], rax
  00a39	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  00a3d	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv536[rbp]
  00a44	ff 95 c8 00 00
	00		 call	 QWORD PTR tv538[rbp]

; 205  :                         ParseAsFractionPartNumberSequence();

  00a4a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a51	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN25@ParseAsDec:

; 206  :                     }
; 207  :                 }
; 208  :                 else

  00a56	e9 40 02 00 00	 jmp	 $LN22@ParseAsDec
$LN21@ParseAsDec:

; 209  :                 {
; 210  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00a5b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00a62	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a69	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00a6c	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv544[rbp], rcx
  00a73	48 8b c8	 mov	 rcx, rax
  00a76	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv544[rbp]
  00a7d	ff 10		 call	 QWORD PTR [rax]
  00a7f	0f b7 c8	 movzx	 ecx, ax
  00a82	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00a87	85 c0		 test	 eax, eax
  00a89	7c 0c		 jl	 SHORT $LN26@ParseAsDec

; 211  :                         ParseAsIntegerPartNumberSequence();

  00a8b	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00a92	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN26@ParseAsDec:

; 212  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00a97	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00a9e	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00aa1	83 e0 20	 and	 eax, 32			; 00000020H
  00aa4	85 c0		 test	 eax, eax
  00aa6	0f 84 cd 00 00
	00		 je	 $LN27@ParseAsDec
  00aac	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00ab3	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv562[rbp], rax
  00aba	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00ac1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ac4	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00ac8	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv564[rbp], rax
  00acf	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00ad6	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  00adc	48 8b d0	 mov	 rdx, rax
  00adf	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv562[rbp]
  00ae6	ff 95 c8 00 00
	00		 call	 QWORD PTR tv564[rbp]
  00aec	85 c0		 test	 eax, eax
  00aee	0f 84 85 00 00
	00		 je	 $LN27@ParseAsDec

; 213  :                     {
; 214  :                         _source.SkipString(_decimal_separator);

  00af4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00afb	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv574[rbp], rax
  00b02	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b09	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b0c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00b10	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv576[rbp], rax
  00b17	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b1e	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  00b24	48 8b d0	 mov	 rdx, rax
  00b27	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv574[rbp]
  00b2e	ff 95 c8 00 00
	00		 call	 QWORD PTR tv576[rbp]

; 215  :                         _frac_part.Write(L'.');

  00b34	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b3b	48 83 c0 38	 add	 rax, 56			; 00000038H
  00b3f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv584[rbp], rax
  00b46	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b4d	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00b51	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00b55	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv586[rbp], rax
  00b5c	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  00b60	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv584[rbp]
  00b67	ff 95 c8 00 00
	00		 call	 QWORD PTR tv586[rbp]

; 216  :                         ParseAsFractionPartNumberSequence();

  00b6d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00b74	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN27@ParseAsDec:

; 217  :                     }
; 218  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  00b79	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b80	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00b83	83 e0 02	 and	 eax, 2
  00b86	85 c0		 test	 eax, eax
  00b88	0f 84 0d 01 00
	00		 je	 $LN28@ParseAsDec
  00b8e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00b95	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv599[rbp], rax
  00b9c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00ba3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ba6	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00baa	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv601[rbp], rax
  00bb1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  00bb8	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv599[rbp]
  00bbf	ff 95 c8 00 00
	00		 call	 QWORD PTR tv601[rbp]
  00bc5	85 c0		 test	 eax, eax
  00bc7	0f 84 ce 00 00
	00		 je	 $LN28@ParseAsDec

; 219  :                     {
; 220  :                         _source.SkipString(L" ");

  00bcd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00bd4	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv610[rbp], rax
  00bdb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00be2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00be5	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00be9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv612[rbp], rax
  00bf0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  00bf7	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv610[rbp]
  00bfe	ff 95 c8 00 00
	00		 call	 QWORD PTR tv612[rbp]

; 221  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00c04	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00c0b	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00c0e	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00c13	85 c0		 test	 eax, eax
  00c15	0f 84 80 00 00
	00		 je	 $LN29@ParseAsDec
  00c1b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00c22	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv625[rbp], rax
  00c29	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00c30	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c33	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00c37	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv627[rbp], rax
  00c3e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00c45	48 83 c0 70	 add	 rax, 112		; 00000070H
  00c49	48 8b d0	 mov	 rdx, rax
  00c4c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv625[rbp]
  00c53	ff 95 c8 00 00
	00		 call	 QWORD PTR tv627[rbp]
  00c59	85 c0		 test	 eax, eax
  00c5b	74 3e		 je	 SHORT $LN29@ParseAsDec

; 222  :                             _source.SkipString(_currency_symbol);

  00c5d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00c64	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv637[rbp], rax
  00c6b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00c72	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c75	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00c79	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv639[rbp], rax
  00c80	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00c87	48 83 c0 70	 add	 rax, 112		; 00000070H
  00c8b	48 8b d0	 mov	 rdx, rax
  00c8e	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv637[rbp]
  00c95	ff 95 c8 00 00
	00		 call	 QWORD PTR tv639[rbp]
$LN29@ParseAsDec:
$LN28@ParseAsDec:
$LN22@ParseAsDec:

; 223  :                     }
; 224  :                 }
; 225  :                 if (!_source.StartsWith(L")"))

  00c9b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00ca2	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv648[rbp], rax
  00ca9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00cb0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00cb3	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00cb7	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv650[rbp], rax
  00cbe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13DIBMAFH@?$AA?$CJ@
  00cc5	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv648[rbp]
  00ccc	ff 95 c8 00 00
	00		 call	 QWORD PTR tv650[rbp]
  00cd2	85 c0		 test	 eax, eax
  00cd4	75 07		 jne	 SHORT $LN30@ParseAsDec

; 226  :                     return (0);

  00cd6	33 c0		 xor	 eax, eax
  00cd8	e9 dd 1e 00 00	 jmp	 $LN1@ParseAsDec
$LN30@ParseAsDec:

; 227  :                 _source.SkipString(L")");

  00cdd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00ce4	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv659[rbp], rax
  00ceb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00cf2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00cf5	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00cf9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv661[rbp], rax
  00d00	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13DIBMAFH@?$AA?$CJ@
  00d07	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv659[rbp]
  00d0e	ff 95 c8 00 00
	00		 call	 QWORD PTR tv661[rbp]
  00d14	e9 4d 1e 00 00	 jmp	 $LN20@ParseAsDec
$LN19@ParseAsDec:

; 228  :             }
; 229  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_positive_sign))

  00d19	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d20	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00d23	83 e0 04	 and	 eax, 4
  00d26	85 c0		 test	 eax, eax
  00d28	0f 84 b8 05 00
	00		 je	 $LN31@ParseAsDec
  00d2e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d35	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv674[rbp], rax
  00d3c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d43	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d46	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00d4a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv676[rbp], rax
  00d51	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d58	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  00d5e	48 8b d0	 mov	 rdx, rax
  00d61	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv674[rbp]
  00d68	ff 95 c8 00 00
	00		 call	 QWORD PTR tv676[rbp]
  00d6e	85 c0		 test	 eax, eax
  00d70	0f 84 70 05 00
	00		 je	 $LN31@ParseAsDec

; 230  :             {
; 231  :                 *_sign = 1;

  00d76	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d7d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00d81	c6 00 01	 mov	 BYTE PTR [rax], 1

; 232  :                 _source.SkipString(_positive_sign);

  00d84	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d8b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv688[rbp], rax
  00d92	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00d99	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d9c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00da0	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv690[rbp], rax
  00da7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00dae	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  00db4	48 8b d0	 mov	 rdx, rax
  00db7	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv688[rbp]
  00dbe	ff 95 c8 00 00
	00		 call	 QWORD PTR tv690[rbp]

; 233  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00dc4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00dcb	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00dce	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00dd3	85 c0		 test	 eax, eax
  00dd5	0f 84 2a 02 00
	00		 je	 $LN33@ParseAsDec
  00ddb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00de2	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv703[rbp], rax
  00de9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00df0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00df3	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00df7	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv705[rbp], rax
  00dfe	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00e05	48 83 c0 70	 add	 rax, 112		; 00000070H
  00e09	48 8b d0	 mov	 rdx, rax
  00e0c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv703[rbp]
  00e13	ff 95 c8 00 00
	00		 call	 QWORD PTR tv705[rbp]
  00e19	85 c0		 test	 eax, eax
  00e1b	0f 84 e4 01 00
	00		 je	 $LN33@ParseAsDec

; 234  :                 {
; 235  :                     _source.SkipString(_currency_symbol);

  00e21	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00e28	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv715[rbp], rax
  00e2f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00e36	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00e39	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00e3d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv717[rbp], rax
  00e44	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00e4b	48 83 c0 70	 add	 rax, 112		; 00000070H
  00e4f	48 8b d0	 mov	 rdx, rax
  00e52	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv715[rbp]
  00e59	ff 95 c8 00 00
	00		 call	 QWORD PTR tv717[rbp]

; 236  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  00e5f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00e66	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00e69	83 e0 01	 and	 eax, 1
  00e6c	85 c0		 test	 eax, eax
  00e6e	74 72		 je	 SHORT $LN35@ParseAsDec
  00e70	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00e77	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv729[rbp], rax
  00e7e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00e85	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00e88	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00e8c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv731[rbp], rax
  00e93	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  00e9a	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv729[rbp]
  00ea1	ff 95 c8 00 00
	00		 call	 QWORD PTR tv731[rbp]
  00ea7	85 c0		 test	 eax, eax
  00ea9	74 37		 je	 SHORT $LN35@ParseAsDec

; 237  :                         _source.SkipString(L" ");

  00eab	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00eb2	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv740[rbp], rax
  00eb9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00ec0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ec3	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00ec7	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv742[rbp], rax
  00ece	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  00ed5	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv740[rbp]
  00edc	ff 95 c8 00 00
	00		 call	 QWORD PTR tv742[rbp]
$LN35@ParseAsDec:

; 238  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00ee2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00ee9	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ef0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00ef3	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv747[rbp], rcx
  00efa	48 8b c8	 mov	 rcx, rax
  00efd	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv747[rbp]
  00f04	ff 10		 call	 QWORD PTR [rax]
  00f06	0f b7 c8	 movzx	 ecx, ax
  00f09	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00f0e	85 c0		 test	 eax, eax
  00f10	7c 0c		 jl	 SHORT $LN36@ParseAsDec

; 239  :                         ParseAsIntegerPartNumberSequence();

  00f12	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00f19	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN36@ParseAsDec:

; 240  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00f1e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00f25	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00f28	83 e0 20	 and	 eax, 32			; 00000020H
  00f2b	85 c0		 test	 eax, eax
  00f2d	0f 84 cd 00 00
	00		 je	 $LN37@ParseAsDec
  00f33	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00f3a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv765[rbp], rax
  00f41	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00f48	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00f4b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00f4f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv767[rbp], rax
  00f56	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00f5d	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  00f63	48 8b d0	 mov	 rdx, rax
  00f66	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv765[rbp]
  00f6d	ff 95 c8 00 00
	00		 call	 QWORD PTR tv767[rbp]
  00f73	85 c0		 test	 eax, eax
  00f75	0f 84 85 00 00
	00		 je	 $LN37@ParseAsDec

; 241  :                     {
; 242  :                         _source.SkipString(_decimal_separator);

  00f7b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00f82	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv777[rbp], rax
  00f89	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00f90	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00f93	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00f97	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv779[rbp], rax
  00f9e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00fa5	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  00fab	48 8b d0	 mov	 rdx, rax
  00fae	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv777[rbp]
  00fb5	ff 95 c8 00 00
	00		 call	 QWORD PTR tv779[rbp]

; 243  :                         _frac_part.Write(L'.');

  00fbb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00fc2	48 83 c0 38	 add	 rax, 56			; 00000038H
  00fc6	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv787[rbp], rax
  00fcd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00fd4	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00fd8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00fdc	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv789[rbp], rax
  00fe3	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  00fe7	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv787[rbp]
  00fee	ff 95 c8 00 00
	00		 call	 QWORD PTR tv789[rbp]

; 244  :                         ParseAsFractionPartNumberSequence();

  00ff4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00ffb	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN37@ParseAsDec:

; 245  :                     }
; 246  :                 }
; 247  :                 else

  01000	e9 dc 02 00 00	 jmp	 $LN34@ParseAsDec
$LN33@ParseAsDec:

; 248  :                 {
; 249  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  01005	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0100c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01013	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  01016	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv795[rbp], rcx
  0101d	48 8b c8	 mov	 rcx, rax
  01020	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv795[rbp]
  01027	ff 10		 call	 QWORD PTR [rax]
  01029	0f b7 c8	 movzx	 ecx, ax
  0102c	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  01031	85 c0		 test	 eax, eax
  01033	7c 0c		 jl	 SHORT $LN38@ParseAsDec

; 250  :                         ParseAsIntegerPartNumberSequence();

  01035	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0103c	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN38@ParseAsDec:

; 251  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  01041	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01048	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0104b	83 e0 20	 and	 eax, 32			; 00000020H
  0104e	85 c0		 test	 eax, eax
  01050	0f 84 cd 00 00
	00		 je	 $LN39@ParseAsDec
  01056	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0105d	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv813[rbp], rax
  01064	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0106b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0106e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01072	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv815[rbp], rax
  01079	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01080	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  01086	48 8b d0	 mov	 rdx, rax
  01089	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv813[rbp]
  01090	ff 95 c8 00 00
	00		 call	 QWORD PTR tv815[rbp]
  01096	85 c0		 test	 eax, eax
  01098	0f 84 85 00 00
	00		 je	 $LN39@ParseAsDec

; 252  :                     {
; 253  :                         _source.SkipString(_decimal_separator);

  0109e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  010a5	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv825[rbp], rax
  010ac	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  010b3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  010b6	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  010ba	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv827[rbp], rax
  010c1	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  010c8	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  010ce	48 8b d0	 mov	 rdx, rax
  010d1	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv825[rbp]
  010d8	ff 95 c8 00 00
	00		 call	 QWORD PTR tv827[rbp]

; 254  :                         _frac_part.Write(L'.');

  010de	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  010e5	48 83 c0 38	 add	 rax, 56			; 00000038H
  010e9	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv835[rbp], rax
  010f0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  010f7	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  010fb	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  010ff	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv837[rbp], rax
  01106	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  0110a	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv835[rbp]
  01111	ff 95 c8 00 00
	00		 call	 QWORD PTR tv837[rbp]

; 255  :                         ParseAsFractionPartNumberSequence();

  01117	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0111e	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN39@ParseAsDec:

; 256  :                     }
; 257  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  01123	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0112a	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0112d	83 e0 02	 and	 eax, 2
  01130	85 c0		 test	 eax, eax
  01132	0f 84 12 01 00
	00		 je	 $LN40@ParseAsDec
  01138	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0113f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv850[rbp], rax
  01146	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0114d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01150	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01154	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv852[rbp], rax
  0115b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  01162	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv850[rbp]
  01169	ff 95 c8 00 00
	00		 call	 QWORD PTR tv852[rbp]
  0116f	85 c0		 test	 eax, eax
  01171	0f 84 d3 00 00
	00		 je	 $LN40@ParseAsDec

; 258  :                     {
; 259  :                         _source.SkipString(L" ");

  01177	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0117e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv861[rbp], rax
  01185	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0118c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0118f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01193	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv863[rbp], rax
  0119a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  011a1	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv861[rbp]
  011a8	ff 95 c8 00 00
	00		 call	 QWORD PTR tv863[rbp]

; 260  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  011ae	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  011b5	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  011b8	25 00 01 00 00	 and	 eax, 256		; 00000100H
  011bd	85 c0		 test	 eax, eax
  011bf	0f 84 80 00 00
	00		 je	 $LN42@ParseAsDec
  011c5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  011cc	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv876[rbp], rax
  011d3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  011da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  011dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  011e1	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv878[rbp], rax
  011e8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  011ef	48 83 c0 70	 add	 rax, 112		; 00000070H
  011f3	48 8b d0	 mov	 rdx, rax
  011f6	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv876[rbp]
  011fd	ff 95 c8 00 00
	00		 call	 QWORD PTR tv878[rbp]
  01203	85 c0		 test	 eax, eax
  01205	74 3e		 je	 SHORT $LN42@ParseAsDec

; 261  :                             _source.SkipString(_currency_symbol);

  01207	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0120e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv888[rbp], rax
  01215	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0121c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0121f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01223	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv890[rbp], rax
  0122a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01231	48 83 c0 70	 add	 rax, 112		; 00000070H
  01235	48 8b d0	 mov	 rdx, rax
  01238	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv888[rbp]
  0123f	ff 95 c8 00 00
	00		 call	 QWORD PTR tv890[rbp]
$LN42@ParseAsDec:

; 262  :                     }

  01245	e9 97 00 00 00	 jmp	 $LN41@ParseAsDec
$LN40@ParseAsDec:

; 263  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  0124a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01251	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01254	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01259	85 c0		 test	 eax, eax
  0125b	0f 84 80 00 00
	00		 je	 $LN43@ParseAsDec
  01261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01268	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv903[rbp], rax
  0126f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01276	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01279	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0127d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv905[rbp], rax
  01284	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0128b	48 83 c0 70	 add	 rax, 112		; 00000070H
  0128f	48 8b d0	 mov	 rdx, rax
  01292	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv903[rbp]
  01299	ff 95 c8 00 00
	00		 call	 QWORD PTR tv905[rbp]
  0129f	85 c0		 test	 eax, eax
  012a1	74 3e		 je	 SHORT $LN43@ParseAsDec

; 264  :                         _source.SkipString(_currency_symbol);

  012a3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  012aa	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv915[rbp], rax
  012b1	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  012b8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  012bb	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  012bf	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv917[rbp], rax
  012c6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  012cd	48 83 c0 70	 add	 rax, 112		; 00000070H
  012d1	48 8b d0	 mov	 rdx, rax
  012d4	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv915[rbp]
  012db	ff 95 c8 00 00
	00		 call	 QWORD PTR tv917[rbp]
$LN43@ParseAsDec:
$LN41@ParseAsDec:
$LN34@ParseAsDec:

; 265  :                     else
; 266  :                     {
; 267  :                     }
; 268  :                 }

  012e1	e9 80 18 00 00	 jmp	 $LN32@ParseAsDec
$LN31@ParseAsDec:

; 269  :             }
; 270  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  012e6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  012ed	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  012f0	83 e0 04	 and	 eax, 4
  012f3	85 c0		 test	 eax, eax
  012f5	0f 84 b8 05 00
	00		 je	 $LN45@ParseAsDec
  012fb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01302	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv930[rbp], rax
  01309	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01310	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01313	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01317	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv932[rbp], rax
  0131e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01325	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  0132b	48 8b d0	 mov	 rdx, rax
  0132e	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv930[rbp]
  01335	ff 95 c8 00 00
	00		 call	 QWORD PTR tv932[rbp]
  0133b	85 c0		 test	 eax, eax
  0133d	0f 84 70 05 00
	00		 je	 $LN45@ParseAsDec

; 271  :             {
; 272  :                 *_sign = -1;

  01343	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0134a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0134e	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 273  :                 _source.SkipString(_negative_sign);

  01351	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01358	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv944[rbp], rax
  0135f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01366	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01369	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0136d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv946[rbp], rax
  01374	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0137b	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  01381	48 8b d0	 mov	 rdx, rax
  01384	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv944[rbp]
  0138b	ff 95 c8 00 00
	00		 call	 QWORD PTR tv946[rbp]

; 274  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  01391	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01398	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0139b	25 00 01 00 00	 and	 eax, 256		; 00000100H
  013a0	85 c0		 test	 eax, eax
  013a2	0f 84 2a 02 00
	00		 je	 $LN47@ParseAsDec
  013a8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  013af	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv959[rbp], rax
  013b6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  013bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  013c0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  013c4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv961[rbp], rax
  013cb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  013d2	48 83 c0 70	 add	 rax, 112		; 00000070H
  013d6	48 8b d0	 mov	 rdx, rax
  013d9	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv959[rbp]
  013e0	ff 95 c8 00 00
	00		 call	 QWORD PTR tv961[rbp]
  013e6	85 c0		 test	 eax, eax
  013e8	0f 84 e4 01 00
	00		 je	 $LN47@ParseAsDec

; 275  :                 {
; 276  :                     _source.SkipString(_currency_symbol);

  013ee	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  013f5	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv971[rbp], rax
  013fc	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01403	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01406	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0140a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv973[rbp], rax
  01411	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01418	48 83 c0 70	 add	 rax, 112		; 00000070H
  0141c	48 8b d0	 mov	 rdx, rax
  0141f	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv971[rbp]
  01426	ff 95 c8 00 00
	00		 call	 QWORD PTR tv973[rbp]

; 277  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  0142c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01433	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01436	83 e0 01	 and	 eax, 1
  01439	85 c0		 test	 eax, eax
  0143b	74 72		 je	 SHORT $LN49@ParseAsDec
  0143d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01444	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv985[rbp], rax
  0144b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01452	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01455	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01459	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv987[rbp], rax
  01460	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  01467	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv985[rbp]
  0146e	ff 95 c8 00 00
	00		 call	 QWORD PTR tv987[rbp]
  01474	85 c0		 test	 eax, eax
  01476	74 37		 je	 SHORT $LN49@ParseAsDec

; 278  :                         _source.SkipString(L" ");

  01478	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0147f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv996[rbp], rax
  01486	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0148d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01490	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01494	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv998[rbp], rax
  0149b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  014a2	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv996[rbp]
  014a9	ff 95 c8 00 00
	00		 call	 QWORD PTR tv998[rbp]
$LN49@ParseAsDec:

; 279  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  014af	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  014b6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  014bd	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  014c0	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv1003[rbp], rcx
  014c7	48 8b c8	 mov	 rcx, rax
  014ca	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv1003[rbp]
  014d1	ff 10		 call	 QWORD PTR [rax]
  014d3	0f b7 c8	 movzx	 ecx, ax
  014d6	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  014db	85 c0		 test	 eax, eax
  014dd	7c 0c		 jl	 SHORT $LN50@ParseAsDec

; 280  :                         ParseAsIntegerPartNumberSequence();

  014df	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  014e6	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN50@ParseAsDec:

; 281  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  014eb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  014f2	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  014f5	83 e0 20	 and	 eax, 32			; 00000020H
  014f8	85 c0		 test	 eax, eax
  014fa	0f 84 cd 00 00
	00		 je	 $LN51@ParseAsDec
  01500	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01507	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1021[rbp], rax
  0150e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01515	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01518	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0151c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1023[rbp], rax
  01523	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0152a	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  01530	48 8b d0	 mov	 rdx, rax
  01533	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1021[rbp]
  0153a	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1023[rbp]
  01540	85 c0		 test	 eax, eax
  01542	0f 84 85 00 00
	00		 je	 $LN51@ParseAsDec

; 282  :                     {
; 283  :                         _source.SkipString(_decimal_separator);

  01548	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0154f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1033[rbp], rax
  01556	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0155d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01560	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01564	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1035[rbp], rax
  0156b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01572	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  01578	48 8b d0	 mov	 rdx, rax
  0157b	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1033[rbp]
  01582	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1035[rbp]

; 284  :                         _frac_part.Write(L'.');

  01588	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0158f	48 83 c0 38	 add	 rax, 56			; 00000038H
  01593	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1043[rbp], rax
  0159a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  015a1	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  015a5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  015a9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1045[rbp], rax
  015b0	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  015b4	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1043[rbp]
  015bb	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1045[rbp]

; 285  :                         ParseAsFractionPartNumberSequence();

  015c1	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  015c8	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN51@ParseAsDec:

; 286  :                     }
; 287  :                 }
; 288  :                 else

  015cd	e9 dc 02 00 00	 jmp	 $LN48@ParseAsDec
$LN47@ParseAsDec:

; 289  :                 {
; 290  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  015d2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  015d9	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  015e0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  015e3	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv1051[rbp], rcx
  015ea	48 8b c8	 mov	 rcx, rax
  015ed	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv1051[rbp]
  015f4	ff 10		 call	 QWORD PTR [rax]
  015f6	0f b7 c8	 movzx	 ecx, ax
  015f9	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  015fe	85 c0		 test	 eax, eax
  01600	7c 0c		 jl	 SHORT $LN52@ParseAsDec

; 291  :                         ParseAsIntegerPartNumberSequence();

  01602	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  01609	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN52@ParseAsDec:

; 292  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  0160e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01615	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01618	83 e0 20	 and	 eax, 32			; 00000020H
  0161b	85 c0		 test	 eax, eax
  0161d	0f 84 cd 00 00
	00		 je	 $LN53@ParseAsDec
  01623	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0162a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1069[rbp], rax
  01631	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01638	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0163b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0163f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1071[rbp], rax
  01646	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0164d	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  01653	48 8b d0	 mov	 rdx, rax
  01656	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1069[rbp]
  0165d	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1071[rbp]
  01663	85 c0		 test	 eax, eax
  01665	0f 84 85 00 00
	00		 je	 $LN53@ParseAsDec

; 293  :                     {
; 294  :                         _source.SkipString(_decimal_separator);

  0166b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01672	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1081[rbp], rax
  01679	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01680	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01683	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01687	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1083[rbp], rax
  0168e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01695	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  0169b	48 8b d0	 mov	 rdx, rax
  0169e	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1081[rbp]
  016a5	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1083[rbp]

; 295  :                         _frac_part.Write(L'.');

  016ab	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  016b2	48 83 c0 38	 add	 rax, 56			; 00000038H
  016b6	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1091[rbp], rax
  016bd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  016c4	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  016c8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  016cc	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1093[rbp], rax
  016d3	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  016d7	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1091[rbp]
  016de	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1093[rbp]

; 296  :                         ParseAsFractionPartNumberSequence();

  016e4	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  016eb	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN53@ParseAsDec:

; 297  :                     }
; 298  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  016f0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  016f7	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  016fa	83 e0 02	 and	 eax, 2
  016fd	85 c0		 test	 eax, eax
  016ff	0f 84 12 01 00
	00		 je	 $LN54@ParseAsDec
  01705	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0170c	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1106[rbp], rax
  01713	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0171a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0171d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01721	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1108[rbp], rax
  01728	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  0172f	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1106[rbp]
  01736	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1108[rbp]
  0173c	85 c0		 test	 eax, eax
  0173e	0f 84 d3 00 00
	00		 je	 $LN54@ParseAsDec

; 299  :                     {
; 300  :                         _source.SkipString(L" ");

  01744	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0174b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1117[rbp], rax
  01752	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01759	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0175c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01760	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1119[rbp], rax
  01767	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  0176e	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1117[rbp]
  01775	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1119[rbp]

; 301  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  0177b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01782	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01785	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0178a	85 c0		 test	 eax, eax
  0178c	0f 84 80 00 00
	00		 je	 $LN56@ParseAsDec
  01792	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01799	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1132[rbp], rax
  017a0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  017a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  017aa	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  017ae	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1134[rbp], rax
  017b5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  017bc	48 83 c0 70	 add	 rax, 112		; 00000070H
  017c0	48 8b d0	 mov	 rdx, rax
  017c3	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1132[rbp]
  017ca	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1134[rbp]
  017d0	85 c0		 test	 eax, eax
  017d2	74 3e		 je	 SHORT $LN56@ParseAsDec

; 302  :                             _source.SkipString(_currency_symbol);

  017d4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  017db	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1144[rbp], rax
  017e2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  017e9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  017ec	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  017f0	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1146[rbp], rax
  017f7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  017fe	48 83 c0 70	 add	 rax, 112		; 00000070H
  01802	48 8b d0	 mov	 rdx, rax
  01805	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1144[rbp]
  0180c	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1146[rbp]
$LN56@ParseAsDec:

; 303  :                     }

  01812	e9 97 00 00 00	 jmp	 $LN55@ParseAsDec
$LN54@ParseAsDec:

; 304  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  01817	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0181e	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01821	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01826	85 c0		 test	 eax, eax
  01828	0f 84 80 00 00
	00		 je	 $LN57@ParseAsDec
  0182e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01835	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1159[rbp], rax
  0183c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01843	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01846	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0184a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1161[rbp], rax
  01851	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01858	48 83 c0 70	 add	 rax, 112		; 00000070H
  0185c	48 8b d0	 mov	 rdx, rax
  0185f	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1159[rbp]
  01866	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1161[rbp]
  0186c	85 c0		 test	 eax, eax
  0186e	74 3e		 je	 SHORT $LN57@ParseAsDec

; 305  :                         _source.SkipString(_currency_symbol);

  01870	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01877	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1171[rbp], rax
  0187e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01885	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01888	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0188c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1173[rbp], rax
  01893	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0189a	48 83 c0 70	 add	 rax, 112		; 00000070H
  0189e	48 8b d0	 mov	 rdx, rax
  018a1	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1171[rbp]
  018a8	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1173[rbp]
$LN57@ParseAsDec:
$LN55@ParseAsDec:
$LN48@ParseAsDec:

; 306  :                     else
; 307  :                     {
; 308  :                     }
; 309  :                 }

  018ae	e9 b3 12 00 00	 jmp	 $LN46@ParseAsDec
$LN45@ParseAsDec:

; 310  :             }
; 311  :             else if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  018b3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  018ba	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  018c1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  018c4	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv1178[rbp], rcx
  018cb	48 8b c8	 mov	 rcx, rax
  018ce	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv1178[rbp]
  018d5	ff 10		 call	 QWORD PTR [rax]
  018d7	0f b7 c8	 movzx	 ecx, ax
  018da	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  018df	85 c0		 test	 eax, eax
  018e1	0f 8c 45 09 00
	00		 jl	 $LN59@ParseAsDec

; 312  :             {
; 313  :                 ParseAsIntegerPartNumberSequence();

  018e7	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  018ee	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 314  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  018f3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  018fa	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  018fd	83 e0 20	 and	 eax, 32			; 00000020H
  01900	85 c0		 test	 eax, eax
  01902	0f 84 cd 00 00
	00		 je	 $LN61@ParseAsDec
  01908	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0190f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1196[rbp], rax
  01916	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0191d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01920	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01924	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1198[rbp], rax
  0192b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01932	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  01938	48 8b d0	 mov	 rdx, rax
  0193b	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1196[rbp]
  01942	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1198[rbp]
  01948	85 c0		 test	 eax, eax
  0194a	0f 84 85 00 00
	00		 je	 $LN61@ParseAsDec

; 315  :                 {
; 316  :                     _source.SkipString(_decimal_separator);

  01950	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01957	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1208[rbp], rax
  0195e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01965	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01968	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0196c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1210[rbp], rax
  01973	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0197a	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  01980	48 8b d0	 mov	 rdx, rax
  01983	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1208[rbp]
  0198a	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1210[rbp]

; 317  :                     _frac_part.Write(L'.');

  01990	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01997	48 83 c0 38	 add	 rax, 56			; 00000038H
  0199b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1218[rbp], rax
  019a2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  019a9	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  019ad	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  019b1	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1220[rbp], rax
  019b8	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  019bc	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1218[rbp]
  019c3	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1220[rbp]

; 318  :                     ParseAsFractionPartNumberSequence();

  019c9	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  019d0	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN61@ParseAsDec:

; 319  :                 }
; 320  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  019d5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  019dc	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  019df	83 e0 02	 and	 eax, 2
  019e2	85 c0		 test	 eax, eax
  019e4	0f 84 c1 03 00
	00		 je	 $LN62@ParseAsDec
  019ea	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  019f1	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1233[rbp], rax
  019f8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  019ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01a02	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01a06	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1235[rbp], rax
  01a0d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  01a14	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1233[rbp]
  01a1b	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1235[rbp]
  01a21	85 c0		 test	 eax, eax
  01a23	0f 84 82 03 00
	00		 je	 $LN62@ParseAsDec

; 321  :                 {
; 322  :                     _source.SkipString(L" ");

  01a29	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01a30	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1244[rbp], rax
  01a37	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01a3e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01a41	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01a45	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1246[rbp], rax
  01a4c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  01a53	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1244[rbp]
  01a5a	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1246[rbp]

; 323  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  01a60	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01a67	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01a6a	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01a6f	85 c0		 test	 eax, eax
  01a71	0f 84 dc 01 00
	00		 je	 $LN64@ParseAsDec
  01a77	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01a7e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1259[rbp], rax
  01a85	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01a8c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01a8f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01a93	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1261[rbp], rax
  01a9a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01aa1	48 83 c0 70	 add	 rax, 112		; 00000070H
  01aa5	48 8b d0	 mov	 rdx, rax
  01aa8	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1259[rbp]
  01aaf	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1261[rbp]
  01ab5	85 c0		 test	 eax, eax
  01ab7	0f 84 96 01 00
	00		 je	 $LN64@ParseAsDec

; 324  :                     {
; 325  :                         _source.SkipString(_currency_symbol);

  01abd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01ac4	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1271[rbp], rax
  01acb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01ad2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01ad5	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01ad9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1273[rbp], rax
  01ae0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01ae7	48 83 c0 70	 add	 rax, 112		; 00000070H
  01aeb	48 8b d0	 mov	 rdx, rax
  01aee	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1271[rbp]
  01af5	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1273[rbp]

; 326  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  01afb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01b02	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01b05	83 e0 08	 and	 eax, 8
  01b08	85 c0		 test	 eax, eax
  01b0a	0f 84 97 00 00
	00		 je	 $LN66@ParseAsDec
  01b10	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01b17	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1286[rbp], rax
  01b1e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01b25	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01b28	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01b2c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1288[rbp], rax
  01b33	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01b3a	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  01b40	48 8b d0	 mov	 rdx, rax
  01b43	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1286[rbp]
  01b4a	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1288[rbp]
  01b50	85 c0		 test	 eax, eax
  01b52	74 53		 je	 SHORT $LN66@ParseAsDec

; 327  :                         {
; 328  :                             *_sign = 1;

  01b54	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01b5b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  01b5f	c6 00 01	 mov	 BYTE PTR [rax], 1

; 329  :                             _source.SkipString(_positive_sign);

  01b62	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01b69	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1300[rbp], rax
  01b70	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01b77	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01b7a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01b7e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1302[rbp], rax
  01b85	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01b8c	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  01b92	48 8b d0	 mov	 rdx, rax
  01b95	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1300[rbp]
  01b9c	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1302[rbp]
  01ba2	e9 a7 00 00 00	 jmp	 $LN67@ParseAsDec
$LN66@ParseAsDec:

; 330  :                         }
; 331  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  01ba7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01bae	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01bb1	83 e0 08	 and	 eax, 8
  01bb4	85 c0		 test	 eax, eax
  01bb6	0f 84 92 00 00
	00		 je	 $LN68@ParseAsDec
  01bbc	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01bc3	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1315[rbp], rax
  01bca	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01bd1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01bd4	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01bd8	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1317[rbp], rax
  01bdf	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01be6	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  01bec	48 8b d0	 mov	 rdx, rax
  01bef	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1315[rbp]
  01bf6	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1317[rbp]
  01bfc	85 c0		 test	 eax, eax
  01bfe	74 4e		 je	 SHORT $LN68@ParseAsDec

; 332  :                         {
; 333  :                             *_sign = -1;

  01c00	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01c07	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  01c0b	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 334  :                             _source.SkipString(_negative_sign);

  01c0e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01c15	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1329[rbp], rax
  01c1c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01c23	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01c26	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01c2a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1331[rbp], rax
  01c31	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01c38	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  01c3e	48 8b d0	 mov	 rdx, rax
  01c41	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1329[rbp]
  01c48	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1331[rbp]
$LN68@ParseAsDec:
$LN67@ParseAsDec:

; 335  :                         }
; 336  :                         else
; 337  :                         {
; 338  :                         }
; 339  :                     }
; 340  :                     else

  01c4e	e9 53 01 00 00	 jmp	 $LN65@ParseAsDec
$LN64@ParseAsDec:

; 341  :                     {
; 342  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  01c53	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01c5a	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01c5d	83 e0 08	 and	 eax, 8
  01c60	85 c0		 test	 eax, eax
  01c62	0f 84 97 00 00
	00		 je	 $LN70@ParseAsDec
  01c68	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01c6f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1344[rbp], rax
  01c76	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01c7d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01c80	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01c84	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1346[rbp], rax
  01c8b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01c92	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  01c98	48 8b d0	 mov	 rdx, rax
  01c9b	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1344[rbp]
  01ca2	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1346[rbp]
  01ca8	85 c0		 test	 eax, eax
  01caa	74 53		 je	 SHORT $LN70@ParseAsDec

; 343  :                         {
; 344  :                             *_sign = 1;

  01cac	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01cb3	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  01cb7	c6 00 01	 mov	 BYTE PTR [rax], 1

; 345  :                             _source.SkipString(_positive_sign);

  01cba	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01cc1	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1358[rbp], rax
  01cc8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01ccf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01cd2	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01cd6	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1360[rbp], rax
  01cdd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01ce4	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  01cea	48 8b d0	 mov	 rdx, rax
  01ced	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1358[rbp]
  01cf4	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1360[rbp]
  01cfa	e9 a7 00 00 00	 jmp	 $LN71@ParseAsDec
$LN70@ParseAsDec:

; 346  :                         }
; 347  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  01cff	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01d06	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01d09	83 e0 08	 and	 eax, 8
  01d0c	85 c0		 test	 eax, eax
  01d0e	0f 84 92 00 00
	00		 je	 $LN72@ParseAsDec
  01d14	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01d1b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1373[rbp], rax
  01d22	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01d29	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01d2c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01d30	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1375[rbp], rax
  01d37	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01d3e	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  01d44	48 8b d0	 mov	 rdx, rax
  01d47	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1373[rbp]
  01d4e	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1375[rbp]
  01d54	85 c0		 test	 eax, eax
  01d56	74 4e		 je	 SHORT $LN72@ParseAsDec

; 348  :                         {
; 349  :                             *_sign = -1;

  01d58	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01d5f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  01d63	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 350  :                             _source.SkipString(_negative_sign);

  01d66	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01d6d	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1387[rbp], rax
  01d74	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01d7b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01d7e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01d82	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1389[rbp], rax
  01d89	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01d90	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  01d96	48 8b d0	 mov	 rdx, rax
  01d99	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1387[rbp]
  01da0	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1389[rbp]
$LN72@ParseAsDec:
$LN71@ParseAsDec:
$LN65@ParseAsDec:

; 351  :                         }
; 352  :                         else
; 353  :                         {
; 354  :                         }
; 355  :                     }

  01da6	e9 7c 04 00 00	 jmp	 $LN63@ParseAsDec
$LN62@ParseAsDec:

; 356  :                 }
; 357  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  01dab	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01db2	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01db5	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01dba	85 c0		 test	 eax, eax
  01dbc	0f 84 dc 01 00
	00		 je	 $LN74@ParseAsDec
  01dc2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01dc9	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1402[rbp], rax
  01dd0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01dd7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01dda	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01dde	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1404[rbp], rax
  01de5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01dec	48 83 c0 70	 add	 rax, 112		; 00000070H
  01df0	48 8b d0	 mov	 rdx, rax
  01df3	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1402[rbp]
  01dfa	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1404[rbp]
  01e00	85 c0		 test	 eax, eax
  01e02	0f 84 96 01 00
	00		 je	 $LN74@ParseAsDec

; 358  :                 {
; 359  :                     _source.SkipString(_currency_symbol);

  01e08	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01e0f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1414[rbp], rax
  01e16	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01e1d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01e20	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01e24	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1416[rbp], rax
  01e2b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01e32	48 83 c0 70	 add	 rax, 112		; 00000070H
  01e36	48 8b d0	 mov	 rdx, rax
  01e39	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1414[rbp]
  01e40	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1416[rbp]

; 360  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  01e46	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01e4d	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01e50	83 e0 08	 and	 eax, 8
  01e53	85 c0		 test	 eax, eax
  01e55	0f 84 97 00 00
	00		 je	 $LN76@ParseAsDec
  01e5b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01e62	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1429[rbp], rax
  01e69	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01e70	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01e73	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01e77	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1431[rbp], rax
  01e7e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01e85	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  01e8b	48 8b d0	 mov	 rdx, rax
  01e8e	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1429[rbp]
  01e95	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1431[rbp]
  01e9b	85 c0		 test	 eax, eax
  01e9d	74 53		 je	 SHORT $LN76@ParseAsDec

; 361  :                     {
; 362  :                         *_sign = 1;

  01e9f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01ea6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  01eaa	c6 00 01	 mov	 BYTE PTR [rax], 1

; 363  :                         _source.SkipString(_positive_sign);

  01ead	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01eb4	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1443[rbp], rax
  01ebb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01ec2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01ec5	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01ec9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1445[rbp], rax
  01ed0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01ed7	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  01edd	48 8b d0	 mov	 rdx, rax
  01ee0	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1443[rbp]
  01ee7	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1445[rbp]
  01eed	e9 a7 00 00 00	 jmp	 $LN77@ParseAsDec
$LN76@ParseAsDec:

; 364  :                     }
; 365  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  01ef2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01ef9	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01efc	83 e0 08	 and	 eax, 8
  01eff	85 c0		 test	 eax, eax
  01f01	0f 84 92 00 00
	00		 je	 $LN78@ParseAsDec
  01f07	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01f0e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1458[rbp], rax
  01f15	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01f1c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01f1f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01f23	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1460[rbp], rax
  01f2a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01f31	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  01f37	48 8b d0	 mov	 rdx, rax
  01f3a	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1458[rbp]
  01f41	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1460[rbp]
  01f47	85 c0		 test	 eax, eax
  01f49	74 4e		 je	 SHORT $LN78@ParseAsDec

; 366  :                     {
; 367  :                         *_sign = -1;

  01f4b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01f52	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  01f56	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 368  :                         _source.SkipString(_negative_sign);

  01f59	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01f60	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1472[rbp], rax
  01f67	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01f6e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01f71	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01f75	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1474[rbp], rax
  01f7c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01f83	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  01f89	48 8b d0	 mov	 rdx, rax
  01f8c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1472[rbp]
  01f93	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1474[rbp]
$LN78@ParseAsDec:
$LN77@ParseAsDec:

; 369  :                     }
; 370  :                     else
; 371  :                     {
; 372  :                     }

  01f99	e9 89 02 00 00	 jmp	 $LN75@ParseAsDec
$LN74@ParseAsDec:

; 373  :                 }
; 374  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  01f9e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01fa5	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  01fa8	83 e0 08	 and	 eax, 8
  01fab	85 c0		 test	 eax, eax
  01fad	0f 84 32 01 00
	00		 je	 $LN80@ParseAsDec
  01fb3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01fba	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1487[rbp], rax
  01fc1	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01fc8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01fcb	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01fcf	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1489[rbp], rax
  01fd6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  01fdd	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  01fe3	48 8b d0	 mov	 rdx, rax
  01fe6	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1487[rbp]
  01fed	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1489[rbp]
  01ff3	85 c0		 test	 eax, eax
  01ff5	0f 84 ea 00 00
	00		 je	 $LN80@ParseAsDec

; 375  :                 {
; 376  :                     *_sign = 1;

  01ffb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02002	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  02006	c6 00 01	 mov	 BYTE PTR [rax], 1

; 377  :                     _source.SkipString(_positive_sign);

  02009	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02010	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1501[rbp], rax
  02017	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0201e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02021	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  02025	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1503[rbp], rax
  0202c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02033	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  02039	48 8b d0	 mov	 rdx, rax
  0203c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1501[rbp]
  02043	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1503[rbp]

; 378  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  02049	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02050	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  02053	25 00 01 00 00	 and	 eax, 256		; 00000100H
  02058	85 c0		 test	 eax, eax
  0205a	0f 84 80 00 00
	00		 je	 $LN82@ParseAsDec
  02060	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02067	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1516[rbp], rax
  0206e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02075	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02078	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0207c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1518[rbp], rax
  02083	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0208a	48 83 c0 70	 add	 rax, 112		; 00000070H
  0208e	48 8b d0	 mov	 rdx, rax
  02091	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1516[rbp]
  02098	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1518[rbp]
  0209e	85 c0		 test	 eax, eax
  020a0	74 3e		 je	 SHORT $LN82@ParseAsDec

; 379  :                         _source.SkipString(_currency_symbol);

  020a2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  020a9	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1528[rbp], rax
  020b0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  020b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  020ba	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  020be	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1530[rbp], rax
  020c5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  020cc	48 83 c0 70	 add	 rax, 112		; 00000070H
  020d0	48 8b d0	 mov	 rdx, rax
  020d3	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1528[rbp]
  020da	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1530[rbp]
$LN82@ParseAsDec:

; 380  :                 }

  020e0	e9 42 01 00 00	 jmp	 $LN81@ParseAsDec
$LN80@ParseAsDec:

; 381  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  020e5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  020ec	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  020ef	83 e0 08	 and	 eax, 8
  020f2	85 c0		 test	 eax, eax
  020f4	0f 84 2d 01 00
	00		 je	 $LN83@ParseAsDec
  020fa	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02101	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1543[rbp], rax
  02108	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0210f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02112	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  02116	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1545[rbp], rax
  0211d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02124	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  0212a	48 8b d0	 mov	 rdx, rax
  0212d	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1543[rbp]
  02134	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1545[rbp]
  0213a	85 c0		 test	 eax, eax
  0213c	0f 84 e5 00 00
	00		 je	 $LN83@ParseAsDec

; 382  :                 {
; 383  :                     *_sign = -1;

  02142	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02149	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0214d	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 384  :                     _source.SkipString(_negative_sign);

  02150	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02157	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1557[rbp], rax
  0215e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02165	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02168	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0216c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1559[rbp], rax
  02173	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0217a	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  02180	48 8b d0	 mov	 rdx, rax
  02183	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1557[rbp]
  0218a	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1559[rbp]

; 385  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  02190	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02197	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0219a	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0219f	85 c0		 test	 eax, eax
  021a1	0f 84 80 00 00
	00		 je	 $LN85@ParseAsDec
  021a7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  021ae	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1572[rbp], rax
  021b5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  021bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  021bf	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  021c3	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1574[rbp], rax
  021ca	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  021d1	48 83 c0 70	 add	 rax, 112		; 00000070H
  021d5	48 8b d0	 mov	 rdx, rax
  021d8	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1572[rbp]
  021df	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1574[rbp]
  021e5	85 c0		 test	 eax, eax
  021e7	74 3e		 je	 SHORT $LN85@ParseAsDec

; 386  :                         _source.SkipString(_currency_symbol);

  021e9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  021f0	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1584[rbp], rax
  021f7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  021fe	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02201	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  02205	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1586[rbp], rax
  0220c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02213	48 83 c0 70	 add	 rax, 112		; 00000070H
  02217	48 8b d0	 mov	 rdx, rax
  0221a	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1584[rbp]
  02221	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1586[rbp]
$LN85@ParseAsDec:
$LN83@ParseAsDec:
$LN81@ParseAsDec:
$LN75@ParseAsDec:
$LN63@ParseAsDec:

; 387  :                 }
; 388  :                 else
; 389  :                 {
; 390  :                 }

  02227	e9 3a 09 00 00	 jmp	 $LN60@ParseAsDec
$LN59@ParseAsDec:

; 391  :             }
; 392  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  0222c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02233	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  02236	83 e0 20	 and	 eax, 32			; 00000020H
  02239	85 c0		 test	 eax, eax
  0223b	0f 84 21 09 00
	00		 je	 $LN86@ParseAsDec
  02241	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02248	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1599[rbp], rax
  0224f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02256	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02259	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0225d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1601[rbp], rax
  02264	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0226b	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  02271	48 8b d0	 mov	 rdx, rax
  02274	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1599[rbp]
  0227b	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1601[rbp]
  02281	85 c0		 test	 eax, eax
  02283	0f 84 d9 08 00
	00		 je	 $LN86@ParseAsDec

; 393  :             {
; 394  :                 _source.SkipString(_decimal_separator);

  02289	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02290	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1611[rbp], rax
  02297	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0229e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  022a1	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  022a5	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1613[rbp], rax
  022ac	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  022b3	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  022b9	48 8b d0	 mov	 rdx, rax
  022bc	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1611[rbp]
  022c3	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1613[rbp]

; 395  :                 _frac_part.Write(L'.');

  022c9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  022d0	48 83 c0 38	 add	 rax, 56			; 00000038H
  022d4	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1621[rbp], rax
  022db	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  022e2	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  022e6	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  022ea	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1623[rbp], rax
  022f1	66 ba 2e 00	 mov	 dx, 46			; 0000002eH
  022f5	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1621[rbp]
  022fc	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1623[rbp]

; 396  :                 ParseAsFractionPartNumberSequence();

  02302	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  02309	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence

; 397  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  0230e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02315	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  02318	83 e0 02	 and	 eax, 2
  0231b	85 c0		 test	 eax, eax
  0231d	0f 84 c1 03 00
	00		 je	 $LN88@ParseAsDec
  02323	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0232a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1636[rbp], rax
  02331	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02338	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0233b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0233f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1638[rbp], rax
  02346	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  0234d	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1636[rbp]
  02354	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1638[rbp]
  0235a	85 c0		 test	 eax, eax
  0235c	0f 84 82 03 00
	00		 je	 $LN88@ParseAsDec

; 398  :                 {
; 399  :                     _source.SkipString(L" ");

  02362	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02369	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1647[rbp], rax
  02370	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02377	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0237a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0237e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1649[rbp], rax
  02385	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  0238c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1647[rbp]
  02393	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1649[rbp]

; 400  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  02399	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  023a0	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  023a3	25 00 01 00 00	 and	 eax, 256		; 00000100H
  023a8	85 c0		 test	 eax, eax
  023aa	0f 84 dc 01 00
	00		 je	 $LN90@ParseAsDec
  023b0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  023b7	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1662[rbp], rax
  023be	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  023c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  023c8	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  023cc	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1664[rbp], rax
  023d3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  023da	48 83 c0 70	 add	 rax, 112		; 00000070H
  023de	48 8b d0	 mov	 rdx, rax
  023e1	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1662[rbp]
  023e8	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1664[rbp]
  023ee	85 c0		 test	 eax, eax
  023f0	0f 84 96 01 00
	00		 je	 $LN90@ParseAsDec

; 401  :                     {
; 402  :                         _source.SkipString(_currency_symbol);

  023f6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  023fd	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1674[rbp], rax
  02404	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0240b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0240e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  02412	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1676[rbp], rax
  02419	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02420	48 83 c0 70	 add	 rax, 112		; 00000070H
  02424	48 8b d0	 mov	 rdx, rax
  02427	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1674[rbp]
  0242e	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1676[rbp]

; 403  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  02434	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0243b	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0243e	83 e0 08	 and	 eax, 8
  02441	85 c0		 test	 eax, eax
  02443	0f 84 97 00 00
	00		 je	 $LN92@ParseAsDec
  02449	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02450	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1689[rbp], rax
  02457	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0245e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02461	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  02465	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1691[rbp], rax
  0246c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02473	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  02479	48 8b d0	 mov	 rdx, rax
  0247c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1689[rbp]
  02483	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1691[rbp]
  02489	85 c0		 test	 eax, eax
  0248b	74 53		 je	 SHORT $LN92@ParseAsDec

; 404  :                         {
; 405  :                             *_sign = 1;

  0248d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02494	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  02498	c6 00 01	 mov	 BYTE PTR [rax], 1

; 406  :                             _source.SkipString(_positive_sign);

  0249b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  024a2	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1703[rbp], rax
  024a9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  024b0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  024b3	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  024b7	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1705[rbp], rax
  024be	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  024c5	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  024cb	48 8b d0	 mov	 rdx, rax
  024ce	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1703[rbp]
  024d5	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1705[rbp]
  024db	e9 a7 00 00 00	 jmp	 $LN93@ParseAsDec
$LN92@ParseAsDec:

; 407  :                         }
; 408  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  024e0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  024e7	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  024ea	83 e0 08	 and	 eax, 8
  024ed	85 c0		 test	 eax, eax
  024ef	0f 84 92 00 00
	00		 je	 $LN94@ParseAsDec
  024f5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  024fc	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1718[rbp], rax
  02503	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0250a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0250d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  02511	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1720[rbp], rax
  02518	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0251f	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  02525	48 8b d0	 mov	 rdx, rax
  02528	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1718[rbp]
  0252f	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1720[rbp]
  02535	85 c0		 test	 eax, eax
  02537	74 4e		 je	 SHORT $LN94@ParseAsDec

; 409  :                         {
; 410  :                             *_sign = -1;

  02539	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02540	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  02544	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 411  :                             _source.SkipString(_negative_sign);

  02547	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0254e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1732[rbp], rax
  02555	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0255c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0255f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  02563	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1734[rbp], rax
  0256a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02571	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  02577	48 8b d0	 mov	 rdx, rax
  0257a	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1732[rbp]
  02581	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1734[rbp]
$LN94@ParseAsDec:
$LN93@ParseAsDec:

; 412  :                         }
; 413  :                         else
; 414  :                         {
; 415  :                         }
; 416  :                     }
; 417  :                     else

  02587	e9 53 01 00 00	 jmp	 $LN91@ParseAsDec
$LN90@ParseAsDec:

; 418  :                     {
; 419  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  0258c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02593	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  02596	83 e0 08	 and	 eax, 8
  02599	85 c0		 test	 eax, eax
  0259b	0f 84 97 00 00
	00		 je	 $LN96@ParseAsDec
  025a1	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  025a8	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1747[rbp], rax
  025af	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  025b6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  025b9	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  025bd	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1749[rbp], rax
  025c4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  025cb	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  025d1	48 8b d0	 mov	 rdx, rax
  025d4	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1747[rbp]
  025db	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1749[rbp]
  025e1	85 c0		 test	 eax, eax
  025e3	74 53		 je	 SHORT $LN96@ParseAsDec

; 420  :                         {
; 421  :                             *_sign = 1;

  025e5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  025ec	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  025f0	c6 00 01	 mov	 BYTE PTR [rax], 1

; 422  :                             _source.SkipString(_positive_sign);

  025f3	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  025fa	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1761[rbp], rax
  02601	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02608	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0260b	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0260f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1763[rbp], rax
  02616	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0261d	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  02623	48 8b d0	 mov	 rdx, rax
  02626	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1761[rbp]
  0262d	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1763[rbp]
  02633	e9 a7 00 00 00	 jmp	 $LN97@ParseAsDec
$LN96@ParseAsDec:

; 423  :                         }
; 424  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  02638	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0263f	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  02642	83 e0 08	 and	 eax, 8
  02645	85 c0		 test	 eax, eax
  02647	0f 84 92 00 00
	00		 je	 $LN98@ParseAsDec
  0264d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02654	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1776[rbp], rax
  0265b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02662	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02665	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  02669	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1778[rbp], rax
  02670	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02677	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  0267d	48 8b d0	 mov	 rdx, rax
  02680	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1776[rbp]
  02687	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1778[rbp]
  0268d	85 c0		 test	 eax, eax
  0268f	74 4e		 je	 SHORT $LN98@ParseAsDec

; 425  :                         {
; 426  :                             *_sign = -1;

  02691	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02698	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0269c	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 427  :                             _source.SkipString(_negative_sign);

  0269f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  026a6	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1790[rbp], rax
  026ad	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  026b4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  026b7	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  026bb	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1792[rbp], rax
  026c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  026c9	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  026cf	48 8b d0	 mov	 rdx, rax
  026d2	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1790[rbp]
  026d9	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1792[rbp]
$LN98@ParseAsDec:
$LN97@ParseAsDec:
$LN91@ParseAsDec:

; 428  :                         }
; 429  :                         else
; 430  :                         {
; 431  :                         }
; 432  :                     }

  026df	e9 7c 04 00 00	 jmp	 $LN89@ParseAsDec
$LN88@ParseAsDec:

; 433  :                 }
; 434  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  026e4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  026eb	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  026ee	25 00 01 00 00	 and	 eax, 256		; 00000100H
  026f3	85 c0		 test	 eax, eax
  026f5	0f 84 dc 01 00
	00		 je	 $LN100@ParseAsDec
  026fb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02702	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1805[rbp], rax
  02709	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02710	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02713	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  02717	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1807[rbp], rax
  0271e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02725	48 83 c0 70	 add	 rax, 112		; 00000070H
  02729	48 8b d0	 mov	 rdx, rax
  0272c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1805[rbp]
  02733	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1807[rbp]
  02739	85 c0		 test	 eax, eax
  0273b	0f 84 96 01 00
	00		 je	 $LN100@ParseAsDec

; 435  :                 {
; 436  :                     _source.SkipString(_currency_symbol);

  02741	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02748	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1817[rbp], rax
  0274f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02756	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02759	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0275d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1819[rbp], rax
  02764	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0276b	48 83 c0 70	 add	 rax, 112		; 00000070H
  0276f	48 8b d0	 mov	 rdx, rax
  02772	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1817[rbp]
  02779	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1819[rbp]

; 437  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  0277f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02786	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  02789	83 e0 08	 and	 eax, 8
  0278c	85 c0		 test	 eax, eax
  0278e	0f 84 97 00 00
	00		 je	 $LN102@ParseAsDec
  02794	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0279b	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1832[rbp], rax
  027a2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  027a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  027ac	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  027b0	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1834[rbp], rax
  027b7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  027be	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  027c4	48 8b d0	 mov	 rdx, rax
  027c7	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1832[rbp]
  027ce	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1834[rbp]
  027d4	85 c0		 test	 eax, eax
  027d6	74 53		 je	 SHORT $LN102@ParseAsDec

; 438  :                     {
; 439  :                         *_sign = 1;

  027d8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  027df	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  027e3	c6 00 01	 mov	 BYTE PTR [rax], 1

; 440  :                         _source.SkipString(_positive_sign);

  027e6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  027ed	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1846[rbp], rax
  027f4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  027fb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  027fe	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  02802	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1848[rbp], rax
  02809	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02810	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  02816	48 8b d0	 mov	 rdx, rax
  02819	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1846[rbp]
  02820	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1848[rbp]
  02826	e9 a7 00 00 00	 jmp	 $LN103@ParseAsDec
$LN102@ParseAsDec:

; 441  :                     }
; 442  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  0282b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02832	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  02835	83 e0 08	 and	 eax, 8
  02838	85 c0		 test	 eax, eax
  0283a	0f 84 92 00 00
	00		 je	 $LN104@ParseAsDec
  02840	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02847	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1861[rbp], rax
  0284e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02855	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02858	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0285c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1863[rbp], rax
  02863	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0286a	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  02870	48 8b d0	 mov	 rdx, rax
  02873	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1861[rbp]
  0287a	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1863[rbp]
  02880	85 c0		 test	 eax, eax
  02882	74 4e		 je	 SHORT $LN104@ParseAsDec

; 443  :                     {
; 444  :                         *_sign = -1;

  02884	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0288b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0288f	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 445  :                         _source.SkipString(_negative_sign);

  02892	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02899	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1875[rbp], rax
  028a0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  028a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  028aa	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  028ae	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1877[rbp], rax
  028b5	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  028bc	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  028c2	48 8b d0	 mov	 rdx, rax
  028c5	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1875[rbp]
  028cc	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1877[rbp]
$LN104@ParseAsDec:
$LN103@ParseAsDec:

; 446  :                     }
; 447  :                     else
; 448  :                     {
; 449  :                     }

  028d2	e9 89 02 00 00	 jmp	 $LN101@ParseAsDec
$LN100@ParseAsDec:

; 450  :                 }
; 451  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  028d7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  028de	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  028e1	83 e0 08	 and	 eax, 8
  028e4	85 c0		 test	 eax, eax
  028e6	0f 84 32 01 00
	00		 je	 $LN106@ParseAsDec
  028ec	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  028f3	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1890[rbp], rax
  028fa	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02901	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02904	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  02908	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1892[rbp], rax
  0290f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02916	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  0291c	48 8b d0	 mov	 rdx, rax
  0291f	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1890[rbp]
  02926	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1892[rbp]
  0292c	85 c0		 test	 eax, eax
  0292e	0f 84 ea 00 00
	00		 je	 $LN106@ParseAsDec

; 452  :                 {
; 453  :                     *_sign = 1;

  02934	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0293b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0293f	c6 00 01	 mov	 BYTE PTR [rax], 1

; 454  :                     _source.SkipString(_positive_sign);

  02942	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02949	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1904[rbp], rax
  02950	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02957	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0295a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0295e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1906[rbp], rax
  02965	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0296c	48 05 92 00 00
	00		 add	 rax, 146		; 00000092H
  02972	48 8b d0	 mov	 rdx, rax
  02975	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1904[rbp]
  0297c	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1906[rbp]

; 455  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  02982	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02989	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0298c	25 00 01 00 00	 and	 eax, 256		; 00000100H
  02991	85 c0		 test	 eax, eax
  02993	0f 84 80 00 00
	00		 je	 $LN108@ParseAsDec
  02999	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  029a0	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1919[rbp], rax
  029a7	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  029ae	48 8b 00	 mov	 rax, QWORD PTR [rax]
  029b1	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  029b5	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1921[rbp], rax
  029bc	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  029c3	48 83 c0 70	 add	 rax, 112		; 00000070H
  029c7	48 8b d0	 mov	 rdx, rax
  029ca	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1919[rbp]
  029d1	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1921[rbp]
  029d7	85 c0		 test	 eax, eax
  029d9	74 3e		 je	 SHORT $LN108@ParseAsDec

; 456  :                         _source.SkipString(_currency_symbol);

  029db	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  029e2	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1931[rbp], rax
  029e9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  029f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  029f3	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  029f7	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1933[rbp], rax
  029fe	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02a05	48 83 c0 70	 add	 rax, 112		; 00000070H
  02a09	48 8b d0	 mov	 rdx, rax
  02a0c	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1931[rbp]
  02a13	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1933[rbp]
$LN108@ParseAsDec:

; 457  :                 }

  02a19	e9 42 01 00 00	 jmp	 $LN107@ParseAsDec
$LN106@ParseAsDec:

; 458  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  02a1e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02a25	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  02a28	83 e0 08	 and	 eax, 8
  02a2b	85 c0		 test	 eax, eax
  02a2d	0f 84 2d 01 00
	00		 je	 $LN109@ParseAsDec
  02a33	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02a3a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1946[rbp], rax
  02a41	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02a48	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02a4b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  02a4f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1948[rbp], rax
  02a56	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02a5d	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  02a63	48 8b d0	 mov	 rdx, rax
  02a66	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1946[rbp]
  02a6d	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1948[rbp]
  02a73	85 c0		 test	 eax, eax
  02a75	0f 84 e5 00 00
	00		 je	 $LN109@ParseAsDec

; 459  :                 {
; 460  :                     *_sign = -1;

  02a7b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02a82	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  02a86	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 461  :                     _source.SkipString(_negative_sign);

  02a89	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02a90	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1960[rbp], rax
  02a97	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02a9e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02aa1	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  02aa5	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1962[rbp], rax
  02aac	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02ab3	48 05 b4 00 00
	00		 add	 rax, 180		; 000000b4H
  02ab9	48 8b d0	 mov	 rdx, rax
  02abc	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1960[rbp]
  02ac3	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1962[rbp]

; 462  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  02ac9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02ad0	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  02ad3	25 00 01 00 00	 and	 eax, 256		; 00000100H
  02ad8	85 c0		 test	 eax, eax
  02ada	0f 84 80 00 00
	00		 je	 $LN111@ParseAsDec
  02ae0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02ae7	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1975[rbp], rax
  02aee	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02af5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02af8	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  02afc	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1977[rbp], rax
  02b03	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02b0a	48 83 c0 70	 add	 rax, 112		; 00000070H
  02b0e	48 8b d0	 mov	 rdx, rax
  02b11	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1975[rbp]
  02b18	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1977[rbp]
  02b1e	85 c0		 test	 eax, eax
  02b20	74 3e		 je	 SHORT $LN111@ParseAsDec

; 463  :                         _source.SkipString(_currency_symbol);

  02b22	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02b29	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv1987[rbp], rax
  02b30	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02b37	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02b3a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  02b3e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv1989[rbp], rax
  02b45	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02b4c	48 83 c0 70	 add	 rax, 112		; 00000070H
  02b50	48 8b d0	 mov	 rdx, rax
  02b53	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv1987[rbp]
  02b5a	ff 95 c8 00 00
	00		 call	 QWORD PTR tv1989[rbp]
$LN111@ParseAsDec:
$LN109@ParseAsDec:
$LN107@ParseAsDec:
$LN101@ParseAsDec:
$LN89@ParseAsDec:

; 464  :                 }
; 465  :                 else
; 466  :                 {
; 467  :                 }
; 468  :             }
; 469  :             else

  02b60	eb 04		 jmp	 SHORT $LN87@ParseAsDec
$LN86@ParseAsDec:

; 470  :                 return (0);

  02b62	33 c0		 xor	 eax, eax
  02b64	eb 54		 jmp	 SHORT $LN1@ParseAsDec
$LN87@ParseAsDec:
$LN60@ParseAsDec:
$LN46@ParseAsDec:
$LN32@ParseAsDec:
$LN20@ParseAsDec:
$LN4@ParseAsDec:

; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  02b66	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02b6d	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  02b70	83 e0 02	 and	 eax, 2
  02b73	85 c0		 test	 eax, eax
  02b75	74 0f		 je	 SHORT $LN112@ParseAsDec

; 472  :                 _source.SkipSpace();

  02b77	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02b7e	48 8b c8	 mov	 rcx, rax
  02b81	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN112@ParseAsDec:

; 473  :             if (_source.PeekChar() != L'\0')

  02b86	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  02b8d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  02b94	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  02b97	48 89 8d c0 00
	00 00		 mov	 QWORD PTR tv1998[rbp], rcx
  02b9e	48 8b c8	 mov	 rcx, rax
  02ba1	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv1998[rbp]
  02ba8	ff 10		 call	 QWORD PTR [rax]
  02baa	0f b7 c0	 movzx	 eax, ax
  02bad	85 c0		 test	 eax, eax
  02baf	74 04		 je	 SHORT $LN113@ParseAsDec

; 474  :                 return (0);

  02bb1	33 c0		 xor	 eax, eax
  02bb3	eb 05		 jmp	 SHORT $LN1@ParseAsDec
$LN113@ParseAsDec:

; 475  :             return (1);

  02bb5	b8 01 00 00 00	 mov	 eax, 1
$LN1@ParseAsDec:

; 476  :         }

  02bba	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  02bc1	5f		 pop	 rdi
  02bc2	5d		 pop	 rbp
  02bc3	c3		 ret	 0
?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ PROC ; Palmtree::Math::Core::Internal::ParserState::~ParserState, COMDAT

; 126  :         {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1

; 127  :         }

  00042	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ ENDP ; Palmtree::Math::Core::Internal::ParserState::~ParserState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
_TEXT	SEGMENT
$T1 = 392
$T2 = 472
$T3 = 552
$T4 = 632
$T5 = 712
$T6 = 792
$T7 = 872
tv81 = 936
tv75 = 936
tv69 = 936
this$ = 976
in_ptr$ = 984
number_styles$ = 992
format_option$ = 1000
sign$ = 1008
int_part_buf$ = 1016
int_part_buf_size$ = 1024
frac_part_buf$ = 1032
frac_part_buf_size$ = 1040
??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z PROC ; Palmtree::Math::Core::Internal::ParserState::ParserState, COMDAT

; 80   :         {

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec d8 03
	00 00		 sub	 rsp, 984		; 000003d8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 f6 00 00 00	 mov	 ecx, 246		; 000000f6H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 f8
	03 00 00	 mov	 rcx, QWORD PTR [rsp+1016]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 79   :             : _source(in_ptr), _int_part(int_part_buf, int_part_buf_size), _frac_part(frac_part_buf, frac_part_buf_size)

  00045	48 8b 85 d0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 89 85 a8 03
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  00053	48 8b 95 d8 03
	00 00		 mov	 rdx, QWORD PTR in_ptr$[rbp]
  0005a	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR tv69[rbp]
  00061	e8 00 00 00 00	 call	 ??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StringReader
  00066	48 8b 85 d0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006d	48 83 c0 10	 add	 rax, 16
  00071	48 89 85 a8 03
	00 00		 mov	 QWORD PTR tv75[rbp], rax
  00078	4c 8b 85 00 04
	00 00		 mov	 r8, QWORD PTR int_part_buf_size$[rbp]
  0007f	48 8b 95 f8 03
	00 00		 mov	 rdx, QWORD PTR int_part_buf$[rbp]
  00086	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR tv75[rbp]
  0008d	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
  00092	48 8b 85 d0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00099	48 83 c0 38	 add	 rax, 56			; 00000038H
  0009d	48 89 85 a8 03
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  000a4	4c 8b 85 10 04
	00 00		 mov	 r8, QWORD PTR frac_part_buf_size$[rbp]
  000ab	48 8b 95 08 04
	00 00		 mov	 rdx, QWORD PTR frac_part_buf$[rbp]
  000b2	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR tv81[rbp]
  000b9	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 81   :             _sign = sign;

  000be	48 8b 85 d0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c5	48 8b 8d f0 03
	00 00		 mov	 rcx, QWORD PTR sign$[rbp]
  000cc	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 82   :             _number_styles = number_styles;

  000d0	48 8b 85 d0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d7	8b 8d e0 03 00
	00		 mov	 ecx, DWORD PTR number_styles$[rbp]
  000dd	89 48 60	 mov	 DWORD PTR [rax+96], ecx

; 83   :             //_エラーを例外で通知する = (_number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING) != 0;
; 84   :             //_負数を許可する = (_number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) != 0;
; 85   :             *_sign = 1;

  000e0	48 8b 85 d0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e7	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000eb	c6 00 01	 mov	 BYTE PTR [rax], 1

; 86   : 
; 87   :             // 通貨単位の設定
; 88   :             if (countof(_currency_symbol) < lstrlenW(format_option->CurrencySymbol) + 1)

  000ee	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  000f5	48 05 38 01 00
	00		 add	 rax, 312		; 00000138H
  000fb	48 8b c8	 mov	 rcx, rax
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  00104	ff c0		 inc	 eax
  00106	48 98		 cdqe
  00108	48 83 f8 11	 cmp	 rax, 17
  0010c	76 2d		 jbe	 SHORT $LN2@ParserStat

; 89   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;1");

  0010e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0011c	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00123	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0012f	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00136	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@ParserStat:

; 90   :             lstrcpyW(_currency_symbol, format_option->CurrencySymbol);

  0013b	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  00142	48 05 38 01 00
	00		 add	 rax, 312		; 00000138H
  00148	48 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0014f	48 83 c1 70	 add	 rcx, 112		; 00000070H
  00153	48 8b d0	 mov	 rdx, rax
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 91   : 
; 92   :             // 符号文字の設定
; 93   :             if (countof(_positive_sign) < lstrlenW(format_option->PositiveSign) + 1)

  0015c	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  00163	48 05 7c 01 00
	00		 add	 rax, 380		; 0000017cH
  00169	48 8b c8	 mov	 rcx, rax
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  00172	ff c0		 inc	 eax
  00174	48 98		 cdqe
  00176	48 83 f8 11	 cmp	 rax, 17
  0017a	76 2d		 jbe	 SHORT $LN3@ParserStat

; 94   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;2");

  0017c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0018a	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00191	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0019d	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  001a4	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@ParserStat:

; 95   :             lstrcpyW(_positive_sign, format_option->PositiveSign);

  001a9	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  001b0	48 05 7c 01 00
	00		 add	 rax, 380		; 0000017cH
  001b6	48 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001bd	48 81 c1 92 00
	00 00		 add	 rcx, 146		; 00000092H
  001c4	48 8b d0	 mov	 rdx, rax
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 96   :             if (countof(_negative_sign) < lstrlenW(format_option->NegativeSign) + 1)

  001cd	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  001d4	48 05 5a 01 00
	00		 add	 rax, 346		; 0000015aH
  001da	48 8b c8	 mov	 rcx, rax
  001dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  001e3	ff c0		 inc	 eax
  001e5	48 98		 cdqe
  001e7	48 83 f8 11	 cmp	 rax, 17
  001eb	76 2d		 jbe	 SHORT $LN4@ParserStat

; 97   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;3");

  001ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  001f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  001fb	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00202	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00207	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0020e	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00215	e8 00 00 00 00	 call	 _CxxThrowException
$LN4@ParserStat:

; 98   :             lstrcpyW(_negative_sign, format_option->NegativeSign);

  0021a	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  00221	48 05 5a 01 00
	00		 add	 rax, 346		; 0000015aH
  00227	48 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0022e	48 81 c1 b4 00
	00 00		 add	 rcx, 180		; 000000b4H
  00235	48 8b d0	 mov	 rdx, rax
  00238	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 99   : 
; 100  :             // 小数点/3桁区切り文字の設定
; 101  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL)

  0023e	8b 85 e0 03 00
	00		 mov	 eax, DWORD PTR number_styles$[rbp]
  00244	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00249	85 c0		 test	 eax, eax
  0024b	0f 84 df 00 00
	00		 je	 $LN5@ParserStat

; 102  :             {
; 103  :                 if (countof(_decimal_separator) < lstrlenW(format_option->Currency.DecimalSeparator) + 1)

  00251	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  00258	48 83 c0 04	 add	 rax, 4
  0025c	48 8b c8	 mov	 rcx, rax
  0025f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  00265	ff c0		 inc	 eax
  00267	48 98		 cdqe
  00269	48 83 f8 11	 cmp	 rax, 17
  0026d	76 2d		 jbe	 SHORT $LN7@ParserStat

; 104  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;4");

  0026f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00276	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0027d	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00284	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00289	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00290	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00297	e8 00 00 00 00	 call	 _CxxThrowException
$LN7@ParserStat:

; 105  :                 lstrcpyW(_decimal_separator, format_option->Currency.DecimalSeparator);

  0029c	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  002a3	48 83 c0 04	 add	 rax, 4
  002a7	48 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002ae	48 81 c1 d6 00
	00 00		 add	 rcx, 214		; 000000d6H
  002b5	48 8b d0	 mov	 rdx, rax
  002b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 106  :                 if (countof(_group_separator) < lstrlenW(format_option->Currency.GroupSeparator) + 1)

  002be	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  002c5	48 83 c0 26	 add	 rax, 38			; 00000026H
  002c9	48 8b c8	 mov	 rcx, rax
  002cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  002d2	ff c0		 inc	 eax
  002d4	48 98		 cdqe
  002d6	48 83 f8 11	 cmp	 rax, 17
  002da	76 2d		 jbe	 SHORT $LN8@ParserStat

; 107  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;5");

  002dc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  002e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  002ea	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  002f1	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  002f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  002fd	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00304	e8 00 00 00 00	 call	 _CxxThrowException
$LN8@ParserStat:

; 108  :                 lstrcpyW(_group_separator, format_option->Currency.GroupSeparator);

  00309	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  00310	48 83 c0 26	 add	 rax, 38			; 00000026H
  00314	48 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0031b	48 81 c1 f8 00
	00 00		 add	 rcx, 248		; 000000f8H
  00322	48 8b d0	 mov	 rdx, rax
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 109  :             }
; 110  :             else

  0032b	e9 de 00 00 00	 jmp	 $LN6@ParserStat
$LN5@ParserStat:

; 111  :             {
; 112  :                 if (countof(_decimal_separator) < lstrlenW(format_option->Number.DecimalSeparator) + 1)

  00330	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  00337	48 83 c0 6c	 add	 rax, 108		; 0000006cH
  0033b	48 8b c8	 mov	 rcx, rax
  0033e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  00344	ff c0		 inc	 eax
  00346	48 98		 cdqe
  00348	48 83 f8 11	 cmp	 rax, 17
  0034c	76 2d		 jbe	 SHORT $LN9@ParserStat

; 113  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;6");

  0034e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00355	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0035c	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00363	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00368	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0036f	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00376	e8 00 00 00 00	 call	 _CxxThrowException
$LN9@ParserStat:

; 114  :                 lstrcpyW(_decimal_separator, format_option->Number.DecimalSeparator);

  0037b	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  00382	48 83 c0 6c	 add	 rax, 108		; 0000006cH
  00386	48 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0038d	48 81 c1 d6 00
	00 00		 add	 rcx, 214		; 000000d6H
  00394	48 8b d0	 mov	 rdx, rax
  00397	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 115  :                 if (countof(_group_separator) < lstrlenW(format_option->Number.GroupSeparator) + 1)

  0039d	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  003a4	48 05 8e 00 00
	00		 add	 rax, 142		; 0000008eH
  003aa	48 8b c8	 mov	 rcx, rax
  003ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  003b3	ff c0		 inc	 eax
  003b5	48 98		 cdqe
  003b7	48 83 f8 11	 cmp	 rax, 17
  003bb	76 2d		 jbe	 SHORT $LN10@ParserStat

; 116  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;7");

  003bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  003c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  003cb	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  003d2	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  003d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  003de	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  003e5	e8 00 00 00 00	 call	 _CxxThrowException
$LN10@ParserStat:

; 117  :                 lstrcpyW(_group_separator, format_option->Number.GroupSeparator);

  003ea	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR format_option$[rbp]
  003f1	48 05 8e 00 00
	00		 add	 rax, 142		; 0000008eH
  003f7	48 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003fe	48 81 c1 f8 00
	00 00		 add	 rcx, 248		; 000000f8H
  00405	48 8b d0	 mov	 rdx, rax
  00408	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW
$LN6@ParserStat:

; 118  :             }
; 119  :             if (lstrcmpW(_group_separator, L"\xa0") == 0)

  0040e	48 8b 85 d0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00415	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  0041b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13JDNADJOG@?$PP?$KA@
  00422	48 8b c8	 mov	 rcx, rax
  00425	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcmpW
  0042b	85 c0		 test	 eax, eax
  0042d	75 1f		 jne	 SHORT $LN11@ParserStat

; 120  :                 lstrcpyW(_secondary_group_separator, L"\x20");

  0042f	48 8b 85 d0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00436	48 05 1a 01 00
	00		 add	 rax, 282		; 0000011aH
  0043c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  00443	48 8b c8	 mov	 rcx, rax
  00446	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 121  :             else

  0044c	eb 24		 jmp	 SHORT $LN12@ParserStat
$LN11@ParserStat:

; 122  :                 lstrcpyW(_secondary_group_separator, _group_separator);

  0044e	48 8b 85 d0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00455	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  0045b	48 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00462	48 81 c1 1a 01
	00 00		 add	 rcx, 282		; 0000011aH
  00469	48 8b d0	 mov	 rdx, rax
  0046c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW
$LN12@ParserStat:

; 123  :         }

  00472	48 8b 85 d0 03
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN13@ParserStat:
  00479	48 8d a5 b8 03
	00 00		 lea	 rsp, QWORD PTR [rbp+952]
  00480	5f		 pop	 rdi
  00481	5d		 pop	 rbp
  00482	c3		 ret	 0
??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ENDP ; Palmtree::Math::Core::Internal::ParserState::ParserState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z
_TEXT	SEGMENT
c$ = 224
?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z PROC ; Palmtree::Math::Core::Internal::ParseHexDigit, COMDAT

; 48   :     {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	0f b7 8c 24 08
	01 00 00	 movzx	 ecx, WORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 49   :         if (c >= L'0' && c <= L'9')

  00036	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  0003d	83 f8 30	 cmp	 eax, 48			; 00000030H
  00040	7c 18		 jl	 SHORT $LN2@ParseHexDi
  00042	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00049	83 f8 39	 cmp	 eax, 57			; 00000039H
  0004c	7f 0c		 jg	 SHORT $LN2@ParseHexDi

; 50   :             return (c - L'0');

  0004e	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00055	83 e8 30	 sub	 eax, 48			; 00000030H
  00058	eb 4d		 jmp	 SHORT $LN1@ParseHexDi
$LN2@ParseHexDi:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  0005a	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00061	83 f8 61	 cmp	 eax, 97			; 00000061H
  00064	7c 18		 jl	 SHORT $LN3@ParseHexDi
  00066	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  0006d	83 f8 66	 cmp	 eax, 102		; 00000066H
  00070	7f 0c		 jg	 SHORT $LN3@ParseHexDi

; 53   :             return (c - L'a' + 10);

  00072	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00079	83 e8 57	 sub	 eax, 87			; 00000057H
  0007c	eb 29		 jmp	 SHORT $LN1@ParseHexDi
$LN3@ParseHexDi:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0007e	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00085	83 f8 41	 cmp	 eax, 65			; 00000041H
  00088	7c 18		 jl	 SHORT $LN4@ParseHexDi
  0008a	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00091	83 f8 46	 cmp	 eax, 70			; 00000046H
  00094	7f 0c		 jg	 SHORT $LN4@ParseHexDi

; 56   :             return (c - L'A' + 10);

  00096	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  0009d	83 e8 37	 sub	 eax, 55			; 00000037H
  000a0	eb 05		 jmp	 SHORT $LN1@ParseHexDi
$LN4@ParseHexDi:

; 57   :         return (-1);

  000a2	b8 ff ff ff ff	 mov	 eax, -1
$LN1@ParseHexDi:

; 58   :     }

  000a7	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000ae	5f		 pop	 rdi
  000af	5d		 pop	 rbp
  000b0	c3		 ret	 0
?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP ; Palmtree::Math::Core::Internal::ParseHexDigit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z
_TEXT	SEGMENT
c$ = 224
?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z PROC ; Palmtree::Math::Core::Internal::ParseDecimalDigit, COMDAT

; 41   :     {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	0f b7 8c 24 08
	01 00 00	 movzx	 ecx, WORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 42   :         if (c >= L'0' && c <= L'9')

  00036	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  0003d	83 f8 30	 cmp	 eax, 48			; 00000030H
  00040	7c 18		 jl	 SHORT $LN2@ParseDecim
  00042	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00049	83 f8 39	 cmp	 eax, 57			; 00000039H
  0004c	7f 0c		 jg	 SHORT $LN2@ParseDecim

; 43   :             return (c - L'0');

  0004e	0f b7 85 e0 00
	00 00		 movzx	 eax, WORD PTR c$[rbp]
  00055	83 e8 30	 sub	 eax, 48			; 00000030H
  00058	eb 05		 jmp	 SHORT $LN1@ParseDecim
$LN2@ParseDecim:

; 44   :         return (-1);

  0005a	b8 ff ff ff ff	 mov	 eax, -1
$LN1@ParseDecim:

; 45   :     }

  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP ; Palmtree::Math::Core::Internal::ParseDecimalDigit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLYX_UNIT
_TEXT	SEGMENT
u$ = 224
v$ = 232
w_hi$ = 240
_MULTIPLYX_UNIT PROC					; COMDAT

; 228  :         {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 229  : #ifdef _MSC_VER
; 230  : #ifdef _M_IX86
; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 232  : #elif defined(_M_X64)
; 233  :             return (_mulx_u64(u, v, w_hi));

  00040	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00047	c4 e2 f3 f6 85
	e0 00 00 00	 mulx	 rax, rcx, QWORD PTR u$[rbp]
  00050	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR w_hi$[rbp]
  00057	48 89 02	 mov	 QWORD PTR [rdx], rax
  0005a	48 8b c1	 mov	 rax, rcx

; 234  : #else
; 235  : #error unknown platform
; 236  : #endif
; 237  : #elif defined(__GNUC__)
; 238  : #ifdef _M_IX86
; 239  :             _UINT32_T w_lo;
; 240  :             __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 241  :             return (w_lo);
; 242  : #elif defined(_M_X64)
; 243  :             _UINT64_T w_lo;
; 244  :             __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 245  :             return (w_lo);
; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  : #else
; 250  : #error unknown compiler
; 251  : #endif
; 252  :         }

  0005d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
_MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLY_UNIT
_TEXT	SEGMENT
tv69 = 192
u$ = 240
v$ = 248
w_hi$ = 256
_MULTIPLY_UNIT PROC					; COMDAT

; 209  :         {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 210  : #ifdef _M_IX86
; 211  : #ifdef _MSC_VER
; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 213  : #elif defined(__GNUC__)
; 214  :             _UINT32_T w_lo;
; 215  :             __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 216  :             return (w_lo);
; 217  : #else
; 218  : #error unknown compiler
; 219  : #endif
; 220  : #elif defined(_M_X64)
; 221  :             return (_umul128(u, v, w_hi));

  00040	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00047	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  0004e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  00055	48 8b c1	 mov	 rax, rcx
  00058	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv69[rbp]
  0005f	48 f7 e1	 mul	 rcx
  00062	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR w_hi$[rbp]
  00069	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 222  : #else
; 223  : #error unknown platform
; 224  : #endif
; 225  :         }

  0006c	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
_MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADDX_UNIT PROC						; COMDAT

; 187  :         {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));
; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00044	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR carry$[rbp]
  00052	80 c1 ff	 add	 cl, -1
  00055	66 48 0f 38 f6
	85 f0 00 00 00	 adcx	 rax, QWORD PTR v$[rbp]
  0005f	0f 92 c1	 setb	 cl
  00062	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00069	48 89 02	 mov	 QWORD PTR [rdx], rax
  0006c	0f b6 c1	 movzx	 eax, cl

; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADD_UNIT PROC						; COMDAT

; 176  :         {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));
; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));

  00044	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR carry$[rbp]
  00052	80 c1 ff	 add	 cl, -1
  00055	48 13 85 f0 00
	00 00		 adc	 rax, QWORD PTR v$[rbp]
  0005c	0f 92 c1	 setb	 cl
  0005f	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00066	48 89 02	 mov	 QWORD PTR [rdx], rax
  00069	0f b6 c1	 movzx	 eax, cl

; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  0006c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
u$ = 224
v$ = 232
_DIVIDE_CEILING_SIZE PROC				; COMDAT

; 161  :         {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 162  :             return ((u + v - 1) / v);

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00042	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  00049	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  0004e	33 d2		 xor	 edx, edx
  00050	48 f7 b5 e8 00
	00 00		 div	 QWORD PTR v$[rbp]

; 163  :         }

  00057	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
_DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 224
v$ = 232
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 156  :         {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 157  :             return ((u + v - 1) / v);

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00042	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  00049	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  0004e	33 d2		 xor	 edx, edx
  00050	48 f7 b5 e8 00
	00 00		 div	 QWORD PTR v$[rbp]

; 158  :         }

  00057	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT PROC					; COMDAT

; 63   :         {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);

  00041	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR d$[rbp]
  00048	48 8b b5 e8 00
	00 00		 mov	 rsi, QWORD PTR s$[rbp]
  0004f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR count$[rbp]
  00056	f3 48 a5	 rep movsq

; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  00059	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  00060	5f		 pop	 rdi
  00061	5e		 pop	 rsi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
value$ = 224
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI64Counter, COMDAT

; 359  :     {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A ; Palmtree::Math::Core::Internal::statistics_info
  0003b	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR value$[rbp]
  00041	f0 01 08	 lock add DWORD PTR [rax], ecx

; 361  :     }

  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
value$ = 224
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI32Counter, COMDAT

; 353  :     {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00034	48 8d 05 04 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  0003b	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR value$[rbp]
  00041	f0 01 08	 lock add DWORD PTR [rax], ecx

; 355  :     }

  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter, COMDAT

; 336  :     {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 337  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A ; Palmtree::Math::Core::Internal::statistics_info
  00031	f0 ff 00	 lock inc DWORD PTR [rax]

; 338  :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter, COMDAT

; 330  :     {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  0002a	48 8d 05 04 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  00031	f0 ff 00	 lock inc DWORD PTR [rax]

; 332  :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
_TEXT	SEGMENT
no_abs$ = 8
err$ = 36
$T4 = 264
$T5 = 344
$T6 = 424
source$ = 528
number_styles$ = 536
format_option$ = 544
o_sign$ = 552
o_abs$ = 560
result$ = 568
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT, COMDAT

; 1336 :     {

$LN8:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1337 :         if (source == nullptr)

  00044	48 83 bd 10 02
	00 00 00	 cmp	 QWORD PTR source$[rbp], 0
  0004c	75 2d		 jne	 SHORT $LN2@PMC_TryPar

; 1338 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"source");

  0004e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  0005c	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00063	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0006f	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00076	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_TryPar:

; 1339 :         if (o_sign == nullptr)

  0007b	48 83 bd 28 02
	00 00 00	 cmp	 QWORD PTR o_sign$[rbp], 0
  00083	75 2d		 jne	 SHORT $LN3@PMC_TryPar

; 1340 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o_sign");

  00085	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00093	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0009a	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a6	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000ad	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_TryPar:

; 1341 :         if (o_abs == nullptr)

  000b2	48 83 bd 30 02
	00 00 00	 cmp	 QWORD PTR o_abs$[rbp], 0
  000ba	75 2d		 jne	 SHORT $LN4@PMC_TryPar

; 1342 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o_abs");

  000bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  000ca	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000d1	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000dd	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000e4	e8 00 00 00 00	 call	 _CxxThrowException
$LN4@PMC_TryPar:

; 1343 :         if (format_option == nullptr)

  000e9	48 83 bd 20 02
	00 00 00	 cmp	 QWORD PTR format_option$[rbp], 0
  000f1	75 0e		 jne	 SHORT $LN5@PMC_TryPar

; 1344 :             format_option = &default_number_format_option;

  000f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  000fa	48 89 85 20 02
	00 00		 mov	 QWORD PTR format_option$[rbp], rax
$LN5@PMC_TryPar:

; 1345 :         NUMBER_HEADER* no_abs;
; 1346 :         PMC_STATUS_CODE err = PMC_TryParse_Imp(source, number_styles, format_option, o_sign, &no_abs, result);

  00101	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00108	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0010d	48 8d 45 08	 lea	 rax, QWORD PTR no_abs$[rbp]
  00111	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00116	4c 8b 8d 28 02
	00 00		 mov	 r9, QWORD PTR o_sign$[rbp]
  0011d	4c 8b 85 20 02
	00 00		 mov	 r8, QWORD PTR format_option$[rbp]
  00124	8b 95 18 02 00
	00		 mov	 edx, DWORD PTR number_styles$[rbp]
  0012a	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  00131	e8 00 00 00 00	 call	 ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
  00136	89 45 24	 mov	 DWORD PTR err$[rbp], eax

; 1347 :         if (err != PMC_STATUS_OK)

  00139	83 7d 24 00	 cmp	 DWORD PTR err$[rbp], 0
  0013d	74 12		 je	 SHORT $LN6@PMC_TryPar

; 1348 :         {
; 1349 :             *result = 0;

  0013f	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00146	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1350 :             return (err);

  0014c	8b 45 24	 mov	 eax, DWORD PTR err$[rbp]
  0014f	eb 1d		 jmp	 SHORT $LN1@PMC_TryPar
$LN6@PMC_TryPar:

; 1351 :         }
; 1352 :         *o_abs = (PMC_HANDLE_UINT)no_abs;

  00151	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR o_abs$[rbp]
  00158	48 8b 4d 08	 mov	 rcx, QWORD PTR no_abs$[rbp]
  0015c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1353 :         *result = 1;

  0015f	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00166	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1354 :         return (PMC_STATUS_OK);

  0016c	33 c0		 xor	 eax, eax
$LN1@PMC_TryPar:
$LN7@PMC_TryPar:

; 1355 :     }

  0016e	48 8b f8	 mov	 rdi, rax
  00171	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00175	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcFrameData
  0017c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00181	48 8b c7	 mov	 rax, rdi
  00184	48 8d a5 f8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+504]
  0018b	5f		 pop	 rdi
  0018c	5d		 pop	 rbp
  0018d	c3		 ret	 0
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
_TEXT	SEGMENT
root$ = 8
o_sign$ = 68
o_abs$ = 104
err$ = 132
$T6 = 360
$T7 = 440
$T8 = 516
$T9 = 548
$T10 = 580
$T11 = 616
source$ = 672
number_styles$ = 680
format_option$ = 688
o$ = 696
result$ = 704
?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParse, COMDAT

; 1306 :     {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec b8 02
	00 00		 sub	 rsp, 696		; 000002b8H
  0001c	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 ae 00 00 00	 mov	 ecx, 174		; 000000aeH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+728]
  00038	48 c7 85 68 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T11[rbp], -2
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  0004a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1307 :         if (source == nullptr)

  0004f	48 83 bd a0 02
	00 00 00	 cmp	 QWORD PTR source$[rbp], 0
  00057	75 2d		 jne	 SHORT $LN2@PMC_TryPar

; 1308 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"source");

  00059	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00067	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  0006e	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0007a	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00081	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_TryPar:

; 1309 :         if (o == nullptr)

  00086	48 83 bd b8 02
	00 00 00	 cmp	 QWORD PTR o$[rbp], 0
  0008e	75 2d		 jne	 SHORT $LN3@PMC_TryPar

; 1310 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o");

  00090	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13LNPOMHLG@?$AAo@
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  0009e	48 8d 8d b8 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000a5	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000b1	48 8d 8d b8 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000b8	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_TryPar:

; 1311 :         if (format_option == nullptr)

  000bd	48 83 bd b0 02
	00 00 00	 cmp	 QWORD PTR format_option$[rbp], 0
  000c5	75 0e		 jne	 SHORT $LN4@PMC_TryPar

; 1312 :             format_option = &default_number_format_option;

  000c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  000ce	48 89 85 b0 02
	00 00		 mov	 QWORD PTR format_option$[rbp], rax
$LN4@PMC_TryPar:

; 1313 :         ResourceHolderUINT root;

  000d5	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000d9	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000de	90		 npad	 1

; 1314 :         char o_sign;
; 1315 :         NUMBER_HEADER* o_abs;
; 1316 :         PMC_STATUS_CODE err = PMC_TryParse_Imp(source, number_styles, format_option, &o_sign, &o_abs, result);

  000df	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  000e6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000eb	48 8d 45 68	 lea	 rax, QWORD PTR o_abs$[rbp]
  000ef	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f4	4c 8d 4d 44	 lea	 r9, QWORD PTR o_sign$[rbp]
  000f8	4c 8b 85 b0 02
	00 00		 mov	 r8, QWORD PTR format_option$[rbp]
  000ff	8b 95 a8 02 00
	00		 mov	 edx, DWORD PTR number_styles$[rbp]
  00105	48 8b 8d a0 02
	00 00		 mov	 rcx, QWORD PTR source$[rbp]
  0010c	e8 00 00 00 00	 call	 ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
  00111	89 85 84 00 00
	00		 mov	 DWORD PTR err$[rbp], eax

; 1317 :         if (err != PMC_STATUS_OK || !*result)

  00117	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR err$[rbp], 0
  0011e	75 0c		 jne	 SHORT $LN6@PMC_TryPar
  00120	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00127	83 38 00	 cmp	 DWORD PTR [rax], 0
  0012a	75 2a		 jne	 SHORT $LN5@PMC_TryPar
$LN6@PMC_TryPar:

; 1318 :         {
; 1319 :             *result = 0;

  0012c	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00133	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1320 :             return (err);

  00139	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR err$[rbp]
  0013f	89 85 04 02 00
	00		 mov	 DWORD PTR $T8[rbp], eax
  00145	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00149	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0014e	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR $T8[rbp]
  00154	eb 7e		 jmp	 SHORT $LN8@PMC_TryPar
$LN5@PMC_TryPar:

; 1321 :         }
; 1322 :         root.HookNumber(o_abs);

  00156	48 8b 55 68	 mov	 rdx, QWORD PTR o_abs$[rbp]
  0015a	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0015e	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 1323 :         if (o_sign < 0)

  00163	0f be 45 44	 movsx	 eax, BYTE PTR o_sign$[rbp]
  00167	85 c0		 test	 eax, eax
  00169	7d 28		 jge	 SHORT $LN7@PMC_TryPar

; 1324 :         {
; 1325 :             // 負数は表現できないのでエラーとする
; 1326 :             *result = 0;

  0016b	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  00172	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1327 :             return (PMC_STATUS_OVERFLOW);

  00178	c7 85 24 02 00
	00 fc ff ff ff	 mov	 DWORD PTR $T9[rbp], -4
  00182	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00186	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0018b	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR $T9[rbp]
  00191	eb 41		 jmp	 SHORT $LN8@PMC_TryPar
$LN7@PMC_TryPar:

; 1328 :         }
; 1329 :         *o = (PMC_HANDLE_UINT)o_abs;

  00193	48 8b 85 b8 02
	00 00		 mov	 rax, QWORD PTR o$[rbp]
  0019a	48 8b 4d 68	 mov	 rcx, QWORD PTR o_abs$[rbp]
  0019e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1330 :         root.UnlinkNumber(o_abs);

  001a1	48 8b 55 68	 mov	 rdx, QWORD PTR o_abs$[rbp]
  001a5	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  001a9	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1331 :         *result = 1;

  001ae	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR result$[rbp]
  001b5	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 1332 :         return (PMC_STATUS_OK);

  001bb	c7 85 44 02 00
	00 00 00 00 00	 mov	 DWORD PTR $T10[rbp], 0
  001c5	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  001c9	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001ce	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR $T10[rbp]
$LN8@PMC_TryPar:

; 1333 :     }

  001d4	48 8b f8	 mov	 rdi, rax
  001d7	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcFrameData
  001e2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001e7	48 8b c7	 mov	 rax, rdi
  001ea	48 8d a5 88 02
	00 00		 lea	 rsp, QWORD PTR [rbp+648]
  001f1	5f		 pop	 rdi
  001f2	5d		 pop	 rbp
  001f3	c3		 ret	 0
$LN10@PMC_TryPar:
?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParse
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
o_sign$ = 68
o_abs$ = 104
err$ = 132
$T6 = 360
$T7 = 440
$T8 = 516
$T9 = 548
$T10 = 580
$T11 = 616
source$ = 672
number_styles$ = 680
format_option$ = 688
o$ = 696
result$ = 704
?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_TryParse'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_TryParse'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
o_sign$ = 68
o_abs$ = 104
err$ = 132
$T6 = 360
$T7 = 440
$T8 = 516
$T9 = 548
$T10 = 580
$T11 = 616
source$ = 672
number_styles$ = 680
format_option$ = 688
o$ = 696
result$ = 704
?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_TryParse'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_TryParse'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
feature$ = 224
?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Parse, COMDAT

; 1358 :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F159A697_pmc_parse@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1359 :         InitializeNumberFormatoInfo(&default_number_format_option);

  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  0003d	e8 00 00 00 00	 call	 ?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPEAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo

; 1360 : 
; 1361 :         if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)

  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR feature$[rbp]
  00049	8b 00		 mov	 eax, DWORD PTR [rax]
  0004b	d1 e8		 shr	 eax, 1
  0004d	83 e0 01	 and	 eax, 1
  00050	85 c0		 test	 eax, eax
  00052	74 23		 je	 SHORT $LN2@Initialize
  00054	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR feature$[rbp]
  0005b	8b 00		 mov	 eax, DWORD PTR [rax]
  0005d	c1 e8 03	 shr	 eax, 3
  00060	83 e0 01	 and	 eax, 1
  00063	85 c0		 test	 eax, eax
  00065	74 10		 je	 SHORT $LN2@Initialize

; 1362 :             fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;

  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX
  0006e	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APEA_KPEA_K_K1@ZEA, rax

; 1363 :         else

  00075	eb 0e		 jmp	 SHORT $LN3@Initialize
$LN2@Initialize:

; 1364 :             fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;

  00077	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL
  0007e	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APEA_KPEA_K_K1@ZEA, rax
$LN3@Initialize:

; 1365 : 
; 1366 :         return (PMC_STATUS_OK);

  00085	33 c0		 xor	 eax, eax

; 1367 :     }

  00087	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Parse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ
_TEXT	SEGMENT
this$ = 224
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ PROC ; Palmtree::Math::Core::Internal::StringWriter::GetString, COMDAT

; 244  :         {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 245  :             return (_sob);

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 246  :         }

  00041	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ ENDP ; Palmtree::Math::Core::Internal::StringWriter::GetString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
_TEXT	SEGMENT
tv71 = 192
this$ = 240
str$ = 248
?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT

; 235  :         {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@Write:

; 236  :             while (*str != L'\0')

  0003b	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR str$[rbp]
  00042	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00045	85 c0		 test	 eax, eax
  00047	74 40		 je	 SHORT $LN3@Write

; 237  :             {
; 238  :                 Write(*str);

  00049	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00050	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00053	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00057	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  0005e	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR str$[rbp]
  00065	0f b7 10	 movzx	 edx, WORD PTR [rax]
  00068	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006f	ff 95 c0 00 00
	00		 call	 QWORD PTR tv71[rbp]

; 239  :                 ++str;

  00075	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR str$[rbp]
  0007c	48 83 c0 02	 add	 rax, 2
  00080	48 89 85 f8 00
	00 00		 mov	 QWORD PTR str$[rbp], rax

; 240  :             }

  00087	eb b2		 jmp	 SHORT $LN2@Write
$LN3@Write:

; 241  :         }

  00089	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00090	5f		 pop	 rdi
  00091	5d		 pop	 rbp
  00092	c3		 ret	 0
?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 304
c$ = 312
?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT

; 214  :         {

$LN5:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 215  :             if (_p != nullptr)

  0003b	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00047	0f 84 81 00 00
	00		 je	 $LN2@Write

; 216  :             {
; 217  :                 if (_p + 1 >= _eob)

  0004d	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00058	48 83 c0 02	 add	 rax, 2
  0005c	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	48 3b 41 18	 cmp	 rax, QWORD PTR [rcx+24]
  00067	72 26		 jb	 SHORT $LN3@Write

; 218  :                     throw InsufficientBufferException(L"書き込み先バッファのサイズが不足しています。");

  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
  00070	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00077	e8 00 00 00 00	 call	 ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
  00083	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0008a	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@Write:

; 219  :                 *_p++ = c;

  0008f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00096	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0009a	0f b7 8d 38 01
	00 00		 movzx	 ecx, WORD PTR c$[rbp]
  000a1	66 89 08	 mov	 WORD PTR [rax], cx
  000a4	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ab	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000af	48 83 c0 02	 add	 rax, 2
  000b3	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ba	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 220  :                 *_p = L'\0';

  000be	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c9	33 c9		 xor	 ecx, ecx
  000cb	66 89 08	 mov	 WORD PTR [rax], cx
$LN2@Write:

; 221  :             }
; 222  :             ++_written;

  000ce	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d5	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000d9	48 ff c0	 inc	 rax
  000dc	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e3	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN4@Write:

; 223  :         }

  000e7	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  000ee	5f		 pop	 rdi
  000ef	5d		 pop	 rbp
  000f0	c3		 ret	 0
?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z
_TEXT	SEGMENT
tv69 = 192
this$ = 240
buffer$ = 248
size$ = 256
??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT

; 210  :         {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00040	48 83 bd f8 00
	00 00 00	 cmp	 QWORD PTR buffer$[rbp], 0
  00048	74 1b		 je	 SHORT $LN3@StringWrit
  0004a	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR buffer$[rbp]
  00051	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR size$[rbp]
  00058	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0005c	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  00063	eb 0b		 jmp	 SHORT $LN4@StringWrit
$LN3@StringWrit:
  00065	48 c7 85 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv69[rbp], 0
$LN4@StringWrit:
  00070	4c 8b 8d c0 00
	00 00		 mov	 r9, QWORD PTR tv69[rbp]
  00077	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR buffer$[rbp]
  0007e	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR buffer$[rbp]
  00085	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008c	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 210  :         {

  00091	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
  0009f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 211  :         }

  000a2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000b0	5f		 pop	 rdi
  000b1	5d		 pop	 rbp
  000b2	c3		 ret	 0
??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z
_TEXT	SEGMENT
this$ = 224
p$ = 232
sob$ = 240
eob$ = 248
??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT

; 199  :         StringWriter(wchar_t* p, wchar_t* sob, wchar_t* eob)

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
  00053	48 89 08	 mov	 QWORD PTR [rax], rcx

; 200  :         {
; 201  :             _p = p;

  00056	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005d	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00064	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 202  :             _sob = sob;

  00068	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR sob$[rbp]
  00076	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 203  :             _eob = eob;

  0007a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00081	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR eob$[rbp]
  00088	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 204  :             _written = 0;

  0008c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00093	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 205  :         }

  0009b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a2	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000a9	5f		 pop	 rdi
  000aa	5d		 pop	 rbp
  000ab	c3		 ret	 0
??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT

; 120  :         {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@StartsWith:

; 121  :             while (*b != L'\0')

  0003b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00042	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00045	85 c0		 test	 eax, eax
  00047	74 42		 je	 SHORT $LN3@StartsWith

; 122  :             {
; 123  :                 if (*a != *b)

  00049	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00050	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00053	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR b$[rbp]
  0005a	0f b7 09	 movzx	 ecx, WORD PTR [rcx]
  0005d	3b c1		 cmp	 eax, ecx
  0005f	74 04		 je	 SHORT $LN4@StartsWith

; 124  :                     return (0);

  00061	33 c0		 xor	 eax, eax
  00063	eb 2b		 jmp	 SHORT $LN1@StartsWith
$LN4@StartsWith:

; 125  :                 ++a;

  00065	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  0006c	48 83 c0 02	 add	 rax, 2
  00070	48 89 85 e0 00
	00 00		 mov	 QWORD PTR a$[rbp], rax

; 126  :                 ++b;

  00077	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  0007e	48 83 c0 02	 add	 rax, 2
  00082	48 89 85 e8 00
	00 00		 mov	 QWORD PTR b$[rbp], rax

; 127  :             }

  00089	eb b0		 jmp	 SHORT $LN2@StartsWith
$LN3@StartsWith:

; 128  :             return (1);

  0008b	b8 01 00 00 00	 mov	 eax, 1
$LN1@StartsWith:

; 129  :         }

  00090	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00097	5f		 pop	 rdi
  00098	5d		 pop	 rbp
  00099	c3		 ret	 0
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
_TEXT	SEGMENT
$T1 = 200
tv83 = 264
tv81 = 272
this$ = 320
str$ = 328
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::SkipString, COMDAT

; 109  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 110  :             if (!StartsWith(_p, str))

  0003b	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR str$[rbp]
  00042	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004d	e8 00 00 00 00	 call	 ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
  00052	85 c0		 test	 eax, eax
  00054	75 2d		 jne	 SHORT $LN2@SkipString

; 111  :             {
; 112  :                 // str で始まっていないにもかかわらず、strをスキップしようとした。
; 113  :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::SkipString;1");

  00056	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00064	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0006b	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00077	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0007e	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@SkipString:

; 114  :             }
; 115  :             _p += lstrlenW(str);

  00083	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR str$[rbp]
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  00090	48 98		 cdqe
  00092	48 d1 e0	 shl	 rax, 1
  00095	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  0009c	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a7	48 89 85 10 01
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  000ae	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR tv83[rbp]
  000b5	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR tv81[rbp]
  000bc	48 03 c8	 add	 rcx, rax
  000bf	48 8b c1	 mov	 rax, rcx
  000c2	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c9	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN3@SkipString:

; 116  :         }

  000cd	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000d4	5f		 pop	 rdi
  000d5	5d		 pop	 rbp
  000d6	c3		 ret	 0
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::SkipString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ PROC ; Palmtree::Math::Core::Internal::StringReader::SkipSpace, COMDAT

; 89   :         {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@SkipSpace:

; 90   :             for (;;)
; 91   :             {
; 92   :                 switch (PeekChar())

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00047	ff 10		 call	 QWORD PTR [rax]
  00049	0f b7 c0	 movzx	 eax, ax
  0004c	89 85 c0 00 00
	00		 mov	 DWORD PTR tv69[rbp], eax
  00052	83 bd c0 00 00
	00 09		 cmp	 DWORD PTR tv69[rbp], 9
  00059	7c 16		 jl	 SHORT $LN8@SkipSpace
  0005b	83 bd c0 00 00
	00 0d		 cmp	 DWORD PTR tv69[rbp], 13
  00062	7e 0b		 jle	 SHORT $LN7@SkipSpace
  00064	83 bd c0 00 00
	00 20		 cmp	 DWORD PTR tv69[rbp], 32	; 00000020H
  0006b	74 02		 je	 SHORT $LN7@SkipSpace
  0006d	eb 02		 jmp	 SHORT $LN8@SkipSpace
$LN7@SkipSpace:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;

  0006f	eb 02		 jmp	 SHORT $LN5@SkipSpace
$LN8@SkipSpace:

; 101  :                 default:
; 102  :                     return;

  00071	eb 16		 jmp	 SHORT $LN1@SkipSpace
$LN5@SkipSpace:

; 103  :                 }
; 104  :                 Progress();

  00073	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00084	ff 50 08	 call	 QWORD PTR [rax+8]

; 105  :             }

  00087	eb ad		 jmp	 SHORT $LN2@SkipSpace
$LN1@SkipSpace:

; 106  :         }

  00089	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00090	5f		 pop	 rdi
  00091	5d		 pop	 rbp
  00092	c3		 ret	 0
?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z
_TEXT	SEGMENT
this$ = 224
str$ = 232
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT

; 84   :         {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 85   :             return (StartsWith(_p, str));

  0003b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR str$[rbp]
  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004d	e8 00 00 00 00	 call	 ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith

; 86   :         }

  00052	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ
_TEXT	SEGMENT
$T1 = 200
this$ = 304
?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ PROC ; Palmtree::Math::Core::Internal::StringReader::Progress, COMDAT

; 77   :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 78   :             if (*_p == L'\0')

  00036	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00041	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00044	85 c0		 test	 eax, eax
  00046	75 2d		 jne	 SHORT $LN2@Progress

; 79   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::Progress;1");

  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00056	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0005d	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00069	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00070	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Progress:

; 80   :             ++_p;

  00075	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00080	48 83 c0 02	 add	 rax, 2
  00084	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008b	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN3@Progress:

; 81   :         }

  0008f	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  00096	5f		 pop	 rdi
  00097	5d		 pop	 rbp
  00098	c3		 ret	 0
?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::Progress
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ
_TEXT	SEGMENT
this$ = 224
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ PROC ; Palmtree::Math::Core::Internal::StringReader::PeekChar, COMDAT

; 72   :         {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 73   :             return (*_p);

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00041	0f b7 00	 movzx	 eax, WORD PTR [rax]

; 74   :         }

  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::PeekChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
_TEXT	SEGMENT
this$ = 224
p$ = 232
??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StringReader, COMDAT

; 50   :         StringReader(const wchar_t* p)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__80E6779E_pmc_stringio@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7StringReader@Internal@Core@Math@Palmtree@@6B@
  00049	48 89 08	 mov	 QWORD PTR [rax], rcx

; 51   :         {
; 52   :             _p = p;

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0005a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 53   :         }

  0005e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00065	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StringReader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT

; 295  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 296  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT

; 291  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 290  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 291  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 292  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT

; 286  :         {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  0004c	4c 8b 8d 10 01
	00 00		 mov	 r9, QWORD PTR data$[rbp]
  00053	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0005a	ba 00 ff ff ff	 mov	 edx, -256		; ffffffffffffff00H
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0006b	90		 npad	 1

; 286  :         {

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 287  :         }

  0007d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException, COMDAT

; 238  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 239  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT

; 234  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 233  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 234  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 235  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT

; 229  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)

  00046	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0004d	ba f8 ff ff ff	 mov	 edx, -8
  00052	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00059	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005e	90		 npad	 1

; 229  :         {

  0005f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
  0006d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 230  :         }

  00070	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007e	5f		 pop	 rdi
  0007f	5d		 pop	 rbp
  00080	c3		 ret	 0
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT

; 124  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 125  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT

; 120  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 119  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 120  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 121  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT

; 115  :         {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  0004c	4c 8b 8d 10 01
	00 00		 mov	 r9, QWORD PTR param_name$[rbp]
  00053	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0005a	ba fe ff ff ff	 mov	 edx, -2
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0006b	90		 npad	 1

; 115  :         {

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 116  :         }

  0007d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException, COMDAT

; 105  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 106  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException, COMDAT

; 101  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 100  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 101  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 102  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException, COMDAT

; 96   :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)

  00047	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0004e	ba ff ff ff ff	 mov	 edx, -1
  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005f	90		 npad	 1

; 96   :         {

  00060	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
  0006e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 97   :         }

  00071	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00078	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007f	5f		 pop	 rdi
  00080	5d		 pop	 rbp
  00081	c3		 ret	 0
??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT

; 70   :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 62   :         Exception(const Exception& p) noexcept(true)

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@XZ ; std::exception::exception
  00053	90		 npad	 1
  00054	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00062	48 89 08	 mov	 QWORD PTR [rax], rcx

; 63   :         {
; 64   :             _code = p._code;

  00065	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00073	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00076	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 65   :             _message = p._message;

  00079	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00087	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0008b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 66   :             _data = p._data;

  0008f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00096	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0009d	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  000a1	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 67   :         }

  000a5	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ac	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b3	5f		 pop	 rdi
  000b4	5d		 pop	 rbp
  000b5	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00038	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0004a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004f	90		 npad	 1
  00050	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00057	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@XZ ; std::exception::exception
  0005c	90		 npad	 1
  0005d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0006b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 55   :         {
; 56   :             _code = code;

  0006e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00075	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR code$[rbp]
  0007b	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 57   :             _message = message;

  0007e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0008c	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 58   :             _data = data;

  00090	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00097	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0009e	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 59   :         }

  000a2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b0	5f		 pop	 rdi
  000b1	5d		 pop	 rbp
  000b2	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00033	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00045	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004a	90		 npad	 1
  0004b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@XZ ; std::exception::exception
  00057	90		 npad	 1
  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00066	48 89 08	 mov	 QWORD PTR [rax], rcx

; 48   :         {
; 49   :             _code = code;

  00069	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00070	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR code$[rbp]
  00076	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 50   :             _message = message;

  00079	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00087	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 51   :             _data = nullptr;

  0008b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00092	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 52   :         }

  0009a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a8	5f		 pop	 rdi
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 18 00 00 00	 mov	 edx, 24
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 90   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00042	74 14		 je	 SHORT $LN3@what
  00044	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  00056	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  0005f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  00066	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 92   :     }

  0006d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 85   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 86   :         __std_exception_destroy(&_Data);

  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 c0 08	 add	 rax, 8
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 __std_exception_destroy
  00066	90		 npad	 1

; 87   :     }

  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0exception@std@@QEAA@XZ PROC				; std::exception::exception, COMDAT

; 50   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 49   :         : _Data()

  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 c0 08	 add	 rax, 8
  0005e	48 8b f8	 mov	 rdi, rax
  00061	33 c0		 xor	 eax, eax
  00063	b9 10 00 00 00	 mov	 ecx, 16
  00068	f3 aa		 rep stosb

; 51   :     }

  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??0exception@std@@QEAA@XZ ENDP				; std::exception::exception
_TEXT	ENDS
END
