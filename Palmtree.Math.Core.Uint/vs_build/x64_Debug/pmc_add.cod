; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E05E7037_autogenerated_inline_func@h DB 01H
__AF70AA4D_pmc_add@cpp DB 01H
msvcjmc	ENDS
PUBLIC	??0exception@std@@QEAA@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
PUBLIC	?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Add
PUBLIC	?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Add_I_X
PUBLIC	?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Add_L_X
PUBLIC	?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_I
PUBLIC	?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_L
PUBLIC	?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@ ; `string'
PUBLIC	??_C@_1CM@CADFJOJJ@?$AAp?$AAc?$AAm?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAD?$AAo?$AAC@ ; `string'
PUBLIC	??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ ; `string'
PUBLIC	??_C@_1DE@FNNDGJIA@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@ ; `string'
PUBLIC	_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_13JAOPNPKD@?$AAv@				; `string'
PUBLIC	??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ ; `string'
PUBLIC	??_C@_1DE@HKHPPJKG@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@ ; `string'
PUBLIC	??_C@_13ICFKHAEN@?$AAu@				; `string'
PUBLIC	??_C@_1DE@MFHABOJA@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@ ; `string'
PUBLIC	??_C@_1DE@DCJPPHMC@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	?From_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@I@Z:PROC ; Palmtree::Math::Core::Internal::From_I_Imp
EXTRN	?From_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@_K@Z:PROC ; Palmtree::Math::Core::Internal::From_L_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
_BSS	SEGMENT
?fp_Add_Imp@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K0101@ZEA DQ 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_Add_Imp
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0exception@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+179
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+182
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z DD imagerel $LN10
	DD	imagerel $LN10+467
	DD	imagerel $unwind$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z@4HA DD imagerel ?dtor$0@?0??PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z DD imagerel $LN5
	DD	imagerel $LN5+128
	DD	imagerel $unwind$?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z DD imagerel $LN7
	DD	imagerel $LN7+312
	DD	imagerel $unwind$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z@4HA DD imagerel ?dtor$0@?0??PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z DD imagerel $LN7
	DD	imagerel $LN7+315
	DD	imagerel $unwind$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z@4HA DD imagerel ?dtor$0@?0??PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z DD imagerel $LN7
	DD	imagerel $LN7+313
	DD	imagerel $unwind$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z@4HA DD imagerel ?dtor$0@?0??PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z DD imagerel $LN7
	DD	imagerel $LN7+315
	DD	imagerel $unwind$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z@4HA DD imagerel ?dtor$0@?0??PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z DD imagerel $LN7
	DD	imagerel $LN7+331
	DD	imagerel $unwind$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z@4HA DD imagerel ?dtor$0@?0??PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMDWORDTOWORD DD imagerel _FROMDWORDTOWORD
	DD	imagerel _FROMDWORDTOWORD+95
	DD	imagerel $unwind$_FROMDWORDTOWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MAXIMUM_UNIT DD imagerel _MAXIMUM_UNIT
	DD	imagerel _MAXIMUM_UNIT+122
	DD	imagerel $unwind$_MAXIMUM_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_UNIT DD imagerel _ADD_UNIT
	DD	imagerel _ADD_UNIT+118
	DD	imagerel $unwind$_ADD_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADDX_UNIT DD imagerel _ADDX_UNIT
	DD	imagerel _ADDX_UNIT+121
	DD	imagerel $unwind$_ADDX_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_32 DD imagerel _LZCNT_ALT_32
	DD	imagerel _LZCNT_ALT_32+126
	DD	imagerel $unwind$_LZCNT_ALT_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_32WORDS_ADC DD imagerel _ADD_32WORDS_ADC
	DD	imagerel _ADD_32WORDS_ADC+2741
	DD	imagerel $unwind$_ADD_32WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_32WORDS_ADCX DD imagerel _ADD_32WORDS_ADCX
	DD	imagerel _ADD_32WORDS_ADCX+2741
	DD	imagerel $unwind$_ADD_32WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_16WORDS_ADC DD imagerel _ADD_16WORDS_ADC
	DD	imagerel _ADD_16WORDS_ADC+1413
	DD	imagerel $unwind$_ADD_16WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_16WORDS_ADCX DD imagerel _ADD_16WORDS_ADCX
	DD	imagerel _ADD_16WORDS_ADCX+1413
	DD	imagerel $unwind$_ADD_16WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_8WORDS_ADC DD imagerel _ADD_8WORDS_ADC
	DD	imagerel _ADD_8WORDS_ADC+749
	DD	imagerel $unwind$_ADD_8WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_8WORDS_ADCX DD imagerel _ADD_8WORDS_ADCX
	DD	imagerel _ADD_8WORDS_ADCX+749
	DD	imagerel $unwind$_ADD_8WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_4WORDS_ADC DD imagerel _ADD_4WORDS_ADC
	DD	imagerel _ADD_4WORDS_ADC+417
	DD	imagerel $unwind$_ADD_4WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_4WORDS_ADCX DD imagerel _ADD_4WORDS_ADCX
	DD	imagerel _ADD_4WORDS_ADCX+417
	DD	imagerel $unwind$_ADD_4WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_2WORDS_ADC DD imagerel _ADD_2WORDS_ADC
	DD	imagerel _ADD_2WORDS_ADC+251
	DD	imagerel $unwind$_ADD_2WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_2WORDS_ADCX DD imagerel _ADD_2WORDS_ADCX
	DD	imagerel _ADD_2WORDS_ADCX+251
	DD	imagerel $unwind$_ADD_2WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z DD imagerel ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z
	DD	imagerel ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z+454
	DD	imagerel $unwind$?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z DD imagerel ?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z
	DD	imagerel ?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z+253
	DD	imagerel $unwind$?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPEA_K_K1101@Z DD imagerel ?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPEA_K_K1101@Z
	DD	imagerel ?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPEA_K_K1101@Z+487
	DD	imagerel $unwind$?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPEA_K_K1101@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z DD imagerel ?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z
	DD	imagerel ?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z+918
	DD	imagerel $unwind$?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z DD imagerel ?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z
	DD	imagerel ?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z+918
	DD	imagerel $unwind$?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD imagerel ?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	imagerel ?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z+429
	DD	imagerel $unwind$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA DD imagerel ?dtor$0@?0??PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z DD imagerel ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z
	DD	imagerel ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z+1001
	DD	imagerel $unwind$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA DD imagerel ?dtor$0@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA DD imagerel ?dtor$1@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA
	DD	imagerel ?dtor$1@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA DD imagerel ?dtor$2@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA
	DD	imagerel ?dtor$2@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 01H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1DE@DCJPPHMC@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@
CONST	SEGMENT
??_C@_1DE@DCJPPHMC@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'a', 00H, 'd', 00H, 'd', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M'
	DB	00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H, 'd', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'L', 00H, ';', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@MFHABOJA@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@
CONST	SEGMENT
??_C@_1DE@MFHABOJA@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'a', 00H, 'd', 00H, 'd', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M'
	DB	00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H, 'd', 00H, '_', 00H
	DB	'L', 00H, '_', 00H, 'X', 00H, ';', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13ICFKHAEN@?$AAu@
CONST	SEGMENT
??_C@_13ICFKHAEN@?$AAu@ DB 'u', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@HKHPPJKG@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@
CONST	SEGMENT
??_C@_1DE@HKHPPJKG@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'a', 00H, 'd', 00H, 'd', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M'
	DB	00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H, 'd', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'I', 00H, ';', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
CONST	SEGMENT
??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ DB 015H
	DB	'_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13JAOPNPKD@?$AAv@
CONST	SEGMENT
??_C@_13JAOPNPKD@?$AAv@ DB 'v', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1DE@FNNDGJIA@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@
CONST	SEGMENT
??_C@_1DE@FNNDGJIA@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'a', 00H, 'd', 00H, 'd', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M'
	DB	00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H, 'd', 00H, '_', 00H
	DB	'I', 00H, '_', 00H, 'X', 00H, ';', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
CONST	SEGMENT
??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ DB 085H
	DB	'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv', 01fH, 'u'
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@CADFJOJJ@?$AAp?$AAc?$AAm?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAD?$AAo?$AAC@
CONST	SEGMENT
??_C@_1CM@CADFJOJJ@?$AAp?$AAc?$AAm?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAD?$AAo?$AAC@ DB 'p'
	DB	00H, 'c', 00H, 'm', 00H, '_', 00H, 'a', 00H, 'd', 00H, 'd', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'D', 00H, 'o'
	DB	00H, 'C', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'y', 00H, ';', 00H
	DB	'1', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
CONST	SEGMENT
??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@ DB 088H
	DB	'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H, '0k00RT', 090H
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT _CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DQ	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DQ	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DQ	FLAT:??_EException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z DD imagerel ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z+229
	DD	00H
	DD	imagerel ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z+424
	DD	0ffffffffH
	DD	imagerel ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z+463
	DD	01H
	DD	imagerel ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z+678
	DD	0ffffffffH
	DD	imagerel ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z+720
	DD	02H
	DD	imagerel ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z+950
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$2@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z DD 035053a11H
	DD	01133318H
	DD	0700c0093H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcName$0 DB 076H ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcName$1 DB 072H ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcName$2 DB 072H ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcName$3 DB 072H ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcVarDesc DD 01d8H ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
	DD	020H
	DQ	FLAT:?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcName$3
	DD	0138H
	DD	020H
	DQ	FLAT:?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcName$2
	DD	098H
	DD	020H
	DQ	FLAT:?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcName$0
	ORG $+192
?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcFrameData DD 04H ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
	DD	00H
	DQ	FLAT:?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcVarDesc
$cppxdata$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z
	DD	0478H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD imagerel ?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z+171
	DD	00H
	DD	imagerel ?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z+381
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD 035053911H
	DD	01123317H
	DD	0700b003fH
	DD	0500aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcVarDesc DD 038H ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp
	DD	020H
	DQ	FLAT:?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcName$0
	ORG $+48
?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp
	DD	00H
	DQ	FLAT:?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcVarDesc
$cppxdata$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	01d8H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z DD 035053901H
	DD	011d3322H
	DD	07016003dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z DD 035053901H
	DD	011d3322H
	DD	07016003dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPEA_K_K1101@Z DD 035053901H
	DD	011d3322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z DD 035053901H
	DD	011d3322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z DD 025053801H
	DD	011c2321H
	DD	070150029H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_2WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_2WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_4WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_4WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_8WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_8WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_16WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_16WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_32WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_32WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_32 DD 025052801H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_32$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_32$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_32$rtcName$0
	ORG $+48
_LZCNT_ALT_32$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_32$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADDX_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MAXIMUM_UNIT DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMDWORDTOWORD DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z DD imagerel ?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z+214
	DD	00H
	DD	imagerel ?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z+283
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z DD 025053a11H
	DD	01132318H
	DD	0700c0045H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_Add_X_X
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z$rtcVarDesc DD 028H ; Palmtree::Math::Core::Internal::PMC_Add_X_X
	DD	020H
	DQ	FLAT:?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z$rtcName$0
	ORG $+48
?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_Add_X_X
	DD	00H
	DQ	FLAT:?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z$rtcVarDesc
$cppxdata$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z
	DD	0208H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z DD imagerel ?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z+198
	DD	00H
	DD	imagerel ?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z+267
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z DD 025053a11H
	DD	01132318H
	DD	0700c0045H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_Add_X_L
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z$rtcVarDesc DD 028H ; Palmtree::Math::Core::Internal::PMC_Add_X_L
	DD	020H
	DQ	FLAT:?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z$rtcName$0
	ORG $+48
?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_Add_X_L
	DD	00H
	DQ	FLAT:?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z$rtcVarDesc
$cppxdata$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z
	DD	0208H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z DD imagerel ?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z+197
	DD	00H
	DD	imagerel ?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z+265
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z DD 025053911H
	DD	01122317H
	DD	0700b0045H
	DD	0500aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_Add_X_I
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z$rtcVarDesc DD 028H ; Palmtree::Math::Core::Internal::PMC_Add_X_I
	DD	020H
	DQ	FLAT:?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z$rtcName$0
	ORG $+48
?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_Add_X_I
	DD	00H
	DQ	FLAT:?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z$rtcVarDesc
$cppxdata$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z
	DD	0208H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z DD imagerel ?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z+198
	DD	00H
	DD	imagerel ?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z+267
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z DD 025053a11H
	DD	01132318H
	DD	0700c0045H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_Add_L_X
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z$rtcVarDesc DD 028H ; Palmtree::Math::Core::Internal::PMC_Add_L_X
	DD	020H
	DQ	FLAT:?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z$rtcName$0
	ORG $+48
?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_Add_L_X
	DD	00H
	DQ	FLAT:?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z$rtcVarDesc
$cppxdata$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z
	DD	0208H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z DD imagerel ?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z+196
	DD	00H
	DD	imagerel ?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z+264
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z DD 025053811H
	DD	01122317H
	DD	0700b0045H
	DD	0500aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_Add_I_X
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z$rtcVarDesc DD 028H ; Palmtree::Math::Core::Internal::PMC_Add_I_X
	DD	020H
	DQ	FLAT:?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z$rtcName$0
	ORG $+48
?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_Add_I_X
	DD	00H
	DQ	FLAT:?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z$rtcVarDesc
$cppxdata$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z
	DD	0208H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z DD imagerel ?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z+189
	DD	00H
	DD	imagerel ?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z+419
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z DD 035053a11H
	DD	01133318H
	DD	0700c003fH
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z$rtcVarDesc DD 038H ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
	DD	020H
	DQ	FLAT:?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z$rtcName$0
	ORG $+48
?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
	DD	00H
	DQ	FLAT:?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z$rtcVarDesc
$cppxdata$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z
	DD	01d8H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+108
	DD	00H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+125
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+108
	DD	00H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+125
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+84
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+165
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z+93
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z+162
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 025054319H
	DD	011c2321H
	DD	070150021H
	DD	05014H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1exception@std@@UEAA@XZ DD imagerel ??1exception@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1exception@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1exception@std@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1exception@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0exception@std@@QEAA@XZ DD imagerel ??0exception@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0exception@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0exception@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0exception@std@@QEAA@XZ
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z
_TEXT	SEGMENT
u_bit_count$7 = 8
v_hi$8 = 36
v_lo$9 = 68
root$10 = 104
v_bit_count$11 = 168
w_bit_count$12 = 200
w$13 = 232
root$14 = 264
v_bit_count$15 = 328
w_bit_count$16 = 360
w$17 = 392
root$18 = 424
u_bit_count$19 = 488
v_bit_count$20 = 520
w_bit_count$21 = 552
w$22 = 584
$T23 = 1000
$T24 = 1032
$T25 = 1064
$T26 = 1096
u$ = 1152
v$ = 1160
?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp, COMDAT

; 390  :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 98 04
	00 00		 sub	 rsp, 1176		; 00000498H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 26 01 00 00	 mov	 ecx, 294		; 00000126H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1208]
  0002f	48 c7 85 48 04
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T26[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 391  :         if (u->IS_ZERO)

  00046	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00050	83 e0 01	 and	 eax, 1
  00053	85 c0		 test	 eax, eax
  00055	74 2e		 je	 SHORT $LN2@PMC_Add_X_

; 392  :         {
; 393  :             // u が 0 である場合
; 394  : 
; 395  :             if (v == 0)

  00057	48 83 bd 88 04
	00 00 00	 cmp	 QWORD PTR v$[rbp], 0
  0005f	75 0e		 jne	 SHORT $LN4@PMC_Add_X_

; 396  :             {
; 397  :                 // v が 0 である場合
; 398  : 
; 399  :                 // u と v がともに 0 であるので、加算結果の 0 を呼び出し元に返す。
; 400  :                 return (&number_zero);

  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00068	e9 5c 03 00 00	 jmp	 $LN1@PMC_Add_X_

; 401  :             }
; 402  :             else

  0006d	eb 11		 jmp	 SHORT $LN5@PMC_Add_X_
$LN4@PMC_Add_X_:

; 403  :             {
; 404  :                 // v が 0 ではない場合
; 405  : 
; 406  :                 // 加算結果となる v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 407  :                 return (From_L_Imp(v));

  0006f	48 8b 8d 88 04
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  00076	e8 00 00 00 00	 call	 ?From_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@_K@Z ; Palmtree::Math::Core::Internal::From_L_Imp
  0007b	e9 49 03 00 00	 jmp	 $LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 408  :             }
; 409  :         }
; 410  :         else

  00080	e9 44 03 00 00	 jmp	 $LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 411  :         {
; 412  :             // u が 0 ではない場合
; 413  : 
; 414  :             if (v == 0)

  00085	48 83 bd 88 04
	00 00 00	 cmp	 QWORD PTR v$[rbp], 0
  0008d	75 16		 jne	 SHORT $LN6@PMC_Add_X_

; 415  :             {
; 416  :                 // v が 0 である場合
; 417  : 
; 418  :                 // 加算結果となる u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 419  :                 return (DuplicateNumber(u));

  0008f	48 8b 8d 80 04
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  00096	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0009b	e9 29 03 00 00	 jmp	 $LN1@PMC_Add_X_

; 420  :             }
; 421  :             else

  000a0	e9 24 03 00 00	 jmp	 $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 422  :             {
; 423  :                 // u と v がともに 0 ではない場合
; 424  : 
; 425  :                 // u と v の和を計算する
; 426  :                 if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  000a5	33 c0		 xor	 eax, eax
  000a7	85 c0		 test	 eax, eax
  000a9	0f 84 14 02 00
	00		 je	 $LN8@PMC_Add_X_

; 427  :                 {
; 428  :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 429  : 
; 430  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000af	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000b6	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ba	48 89 45 08	 mov	 QWORD PTR u_bit_count$7[rbp], rax

; 431  :                     _UINT32_T v_hi;
; 432  :                     _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

  000be	48 8d 55 24	 lea	 rdx, QWORD PTR v_hi$8[rbp]
  000c2	48 8b 8d 88 04
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  000c9	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  000ce	89 45 44	 mov	 DWORD PTR v_lo$9[rbp], eax

; 433  :                     if (v_hi == 0)

  000d1	83 7d 24 00	 cmp	 DWORD PTR v_hi$8[rbp], 0
  000d5	0f 85 e7 00 00
	00		 jne	 $LN10@PMC_Add_X_

; 434  :                     {
; 435  :                         // y の値が 32bit で表現可能な場合
; 436  : 
; 437  :                         ResourceHolderUINT root;

  000db	48 8d 4d 68	 lea	 rcx, QWORD PTR root$10[rbp]
  000df	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000e4	90		 npad	 1

; 438  :                         __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

  000e5	8b 4d 44	 mov	 ecx, DWORD PTR v_lo$9[rbp]
  000e8	e8 00 00 00 00	 call	 _LZCNT_ALT_32
  000ed	48 98		 cdqe
  000ef	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000f4	48 2b c8	 sub	 rcx, rax
  000f7	48 8b c1	 mov	 rax, rcx
  000fa	48 89 85 a8 00
	00 00		 mov	 QWORD PTR v_bit_count$11[rbp], rax

; 439  :                         __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  00101	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR v_bit_count$11[rbp]
  00108	48 8b 4d 08	 mov	 rcx, QWORD PTR u_bit_count$7[rbp]
  0010c	e8 00 00 00 00	 call	 _MAXIMUM_UNIT
  00111	48 ff c0	 inc	 rax
  00114	48 89 85 c8 00
	00 00		 mov	 QWORD PTR w_bit_count$12[rbp], rax

; 440  :                         NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  0011b	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR w_bit_count$12[rbp]
  00122	48 8d 4d 68	 lea	 rcx, QWORD PTR root$10[rbp]
  00126	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0012b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR w$13[rbp], rax

; 441  :                         Add_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, w->BLOCK, w->BLOCK_COUNT);

  00132	8b 45 44	 mov	 eax, DWORD PTR v_lo$9[rbp]
  00135	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR w$13[rbp]
  0013c	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00140	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00145	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR w$13[rbp]
  0014c	4c 8b 49 40	 mov	 r9, QWORD PTR [rcx+64]
  00150	44 8b c0	 mov	 r8d, eax
  00153	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0015a	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  0015e	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00165	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00169	e8 00 00 00 00	 call	 ?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z ; Palmtree::Math::Core::Internal::Add_X_1W

; 442  :                         root.CheckNumber(w);

  0016e	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR w$13[rbp]
  00175	48 8d 4d 68	 lea	 rcx, QWORD PTR root$10[rbp]
  00179	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 443  :                         CommitNumber(w);

  0017e	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR w$13[rbp]
  00185	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 444  :                         root.UnlinkNumber(w);

  0018a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR w$13[rbp]
  00191	48 8d 4d 68	 lea	 rcx, QWORD PTR root$10[rbp]
  00195	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 445  :                         return (w);

  0019a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR w$13[rbp]
  001a1	48 89 85 e8 03
	00 00		 mov	 QWORD PTR $T23[rbp], rax
  001a8	48 8d 4d 68	 lea	 rcx, QWORD PTR root$10[rbp]
  001ac	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001b1	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR $T23[rbp]
  001b8	e9 0c 02 00 00	 jmp	 $LN1@PMC_Add_X_

; 446  :                     }
; 447  :                     else

  001bd	e9 fc 00 00 00	 jmp	 $LN11@PMC_Add_X_
$LN10@PMC_Add_X_:

; 448  :                     {
; 449  :                         // y の値が 32bit では表現できない場合
; 450  : 
; 451  :                         ResourceHolderUINT root;

  001c2	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR root$14[rbp]
  001c9	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  001ce	90		 npad	 1

; 452  :                         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

  001cf	8b 4d 24	 mov	 ecx, DWORD PTR v_hi$8[rbp]
  001d2	e8 00 00 00 00	 call	 _LZCNT_ALT_32
  001d7	48 98		 cdqe
  001d9	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001de	48 2b c8	 sub	 rcx, rax
  001e1	48 8b c1	 mov	 rax, rcx
  001e4	48 89 85 48 01
	00 00		 mov	 QWORD PTR v_bit_count$15[rbp], rax

; 453  :                         __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  001eb	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR v_bit_count$15[rbp]
  001f2	48 8b 4d 08	 mov	 rcx, QWORD PTR u_bit_count$7[rbp]
  001f6	e8 00 00 00 00	 call	 _MAXIMUM_UNIT
  001fb	48 ff c0	 inc	 rax
  001fe	48 89 85 68 01
	00 00		 mov	 QWORD PTR w_bit_count$16[rbp], rax

; 454  :                         NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  00205	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR w_bit_count$16[rbp]
  0020c	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR root$14[rbp]
  00213	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00218	48 89 85 88 01
	00 00		 mov	 QWORD PTR w$17[rbp], rax

; 455  :                         Add_X_2W(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, w->BLOCK, w->BLOCK_COUNT);

  0021f	8b 45 44	 mov	 eax, DWORD PTR v_lo$9[rbp]
  00222	8b 4d 24	 mov	 ecx, DWORD PTR v_hi$8[rbp]
  00225	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR w$17[rbp]
  0022c	48 8b 52 38	 mov	 rdx, QWORD PTR [rdx+56]
  00230	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00235	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR w$17[rbp]
  0023c	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  00240	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00245	44 8b c8	 mov	 r9d, eax
  00248	44 8b c1	 mov	 r8d, ecx
  0024b	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00252	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00256	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0025d	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00261	e8 00 00 00 00	 call	 ?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPEA_K_K1101@Z ; Palmtree::Math::Core::Internal::Add_X_2W

; 456  :                         root.CheckNumber(w);

  00266	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR w$17[rbp]
  0026d	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR root$14[rbp]
  00274	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 457  :                         CommitNumber(w);

  00279	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR w$17[rbp]
  00280	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 458  :                         root.UnlinkNumber(w);

  00285	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR w$17[rbp]
  0028c	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR root$14[rbp]
  00293	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 459  :                         return (w);

  00298	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR w$17[rbp]
  0029f	48 89 85 08 04
	00 00		 mov	 QWORD PTR $T24[rbp], rax
  002a6	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR root$14[rbp]
  002ad	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  002b2	48 8b 85 08 04
	00 00		 mov	 rax, QWORD PTR $T24[rbp]
  002b9	e9 0b 01 00 00	 jmp	 $LN1@PMC_Add_X_
$LN11@PMC_Add_X_:

; 460  :                     }
; 461  :                 }
; 462  :                 else

  002be	e9 06 01 00 00	 jmp	 $LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 463  :                 {
; 464  :                     // _UINT64_T が 1 ワードで表現できる場合
; 465  : 
; 466  :                     ResourceHolderUINT root;

  002c3	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  002ca	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  002cf	90		 npad	 1

; 467  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  002d0	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  002d7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  002db	48 89 85 e8 01
	00 00		 mov	 QWORD PTR u_bit_count$19[rbp], rax

; 468  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

  002e2	48 8b 8d 88 04
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  002e9	e8 00 00 00 00	 call	 _LZCNT_ALT_UNIT
  002ee	48 98		 cdqe
  002f0	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002f5	48 2b c8	 sub	 rcx, rax
  002f8	48 8b c1	 mov	 rax, rcx
  002fb	48 89 85 08 02
	00 00		 mov	 QWORD PTR v_bit_count$20[rbp], rax

; 469  :                     __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  00302	48 8b 95 08 02
	00 00		 mov	 rdx, QWORD PTR v_bit_count$20[rbp]
  00309	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR u_bit_count$19[rbp]
  00310	e8 00 00 00 00	 call	 _MAXIMUM_UNIT
  00315	48 ff c0	 inc	 rax
  00318	48 89 85 28 02
	00 00		 mov	 QWORD PTR w_bit_count$21[rbp], rax

; 470  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  0031f	48 8b 95 28 02
	00 00		 mov	 rdx, QWORD PTR w_bit_count$21[rbp]
  00326	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  0032d	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00332	48 89 85 48 02
	00 00		 mov	 QWORD PTR w$22[rbp], rax

; 471  :                     Add_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, w->BLOCK, w->BLOCK_COUNT);

  00339	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR w$22[rbp]
  00340	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00344	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00349	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR w$22[rbp]
  00350	4c 8b 48 40	 mov	 r9, QWORD PTR [rax+64]
  00354	4c 8b 85 88 04
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0035b	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00362	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00366	48 8b 85 80 04
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0036d	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00371	e8 00 00 00 00	 call	 ?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z ; Palmtree::Math::Core::Internal::Add_X_1W

; 472  :                     root.CheckNumber(w);

  00376	48 8b 95 48 02
	00 00		 mov	 rdx, QWORD PTR w$22[rbp]
  0037d	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  00384	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 473  :                     CommitNumber(w);

  00389	48 8b 8d 48 02
	00 00		 mov	 rcx, QWORD PTR w$22[rbp]
  00390	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 474  :                     root.UnlinkNumber(w);

  00395	48 8b 95 48 02
	00 00		 mov	 rdx, QWORD PTR w$22[rbp]
  0039c	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  003a3	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 475  :                     return (w);

  003a8	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR w$22[rbp]
  003af	48 89 85 28 04
	00 00		 mov	 QWORD PTR $T25[rbp], rax
  003b6	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  003bd	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  003c2	48 8b 85 28 04
	00 00		 mov	 rax, QWORD PTR $T25[rbp]
$LN1@PMC_Add_X_:

; 476  :                 }
; 477  :             }
; 478  :         }
; 479  :     }

  003c9	48 8b f8	 mov	 rdi, rax
  003cc	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  003d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z$rtcFrameData
  003d7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003dc	48 8b c7	 mov	 rax, rdi
  003df	48 8d a5 68 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1128]
  003e6	5f		 pop	 rdi
  003e7	5d		 pop	 rbp
  003e8	c3		 ret	 0
?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_hi$8 = 36
v_lo$9 = 68
root$10 = 104
v_bit_count$11 = 168
w_bit_count$12 = 200
w$13 = 232
root$14 = 264
v_bit_count$15 = 328
w_bit_count$16 = 360
w$17 = 392
root$18 = 424
u_bit_count$19 = 488
v_bit_count$20 = 520
w_bit_count$21 = 552
w$22 = 584
$T23 = 1000
$T24 = 1032
$T25 = 1064
$T26 = 1096
u$ = 1152
v$ = 1160
?dtor$0@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR root$10[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_hi$8 = 36
v_lo$9 = 68
root$10 = 104
v_bit_count$11 = 168
w_bit_count$12 = 200
w$13 = 232
root$14 = 264
v_bit_count$15 = 328
w_bit_count$16 = 360
w$17 = 392
root$18 = 424
u_bit_count$19 = 488
v_bit_count$20 = 520
w_bit_count$21 = 552
w$22 = 584
$T23 = 1000
$T24 = 1032
$T25 = 1064
$T26 = 1096
u$ = 1152
v$ = 1160
?dtor$1@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR root$14[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_hi$8 = 36
v_lo$9 = 68
root$10 = 104
v_bit_count$11 = 168
w_bit_count$12 = 200
w$13 = 232
root$14 = 264
v_bit_count$15 = 328
w_bit_count$16 = 360
w$17 = 392
root$18 = 424
u_bit_count$19 = 488
v_bit_count$20 = 520
w_bit_count$21 = 552
w$22 = 584
$T23 = 1000
$T24 = 1032
$T25 = 1064
$T26 = 1096
u$ = 1152
v$ = 1160
?dtor$2@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_hi$8 = 36
v_lo$9 = 68
root$10 = 104
v_bit_count$11 = 168
w_bit_count$12 = 200
w$13 = 232
root$14 = 264
v_bit_count$15 = 328
w_bit_count$16 = 360
w$17 = 392
root$18 = 424
u_bit_count$19 = 488
v_bit_count$20 = 520
w_bit_count$21 = 552
w$22 = 584
$T23 = 1000
$T24 = 1032
$T25 = 1064
$T26 = 1096
u$ = 1152
v$ = 1160
?dtor$0@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR root$10[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_hi$8 = 36
v_lo$9 = 68
root$10 = 104
v_bit_count$11 = 168
w_bit_count$12 = 200
w$13 = 232
root$14 = 264
v_bit_count$15 = 328
w_bit_count$16 = 360
w$17 = 392
root$18 = 424
u_bit_count$19 = 488
v_bit_count$20 = 520
w_bit_count$21 = 552
w$22 = 584
$T23 = 1000
$T24 = 1032
$T25 = 1064
$T26 = 1096
u$ = 1152
v$ = 1160
?dtor$1@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR root$14[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_hi$8 = 36
v_lo$9 = 68
root$10 = 104
v_bit_count$11 = 168
w_bit_count$12 = 200
w$13 = 232
root$14 = 264
v_bit_count$15 = 328
w_bit_count$16 = 360
w$17 = 392
root$18 = 424
u_bit_count$19 = 488
v_bit_count$20 = 520
w_bit_count$21 = 552
w$22 = 584
$T23 = 1000
$T24 = 1032
$T25 = 1064
$T26 = 1096
u$ = 1152
v$ = 1160
?dtor$2@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0??PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
_TEXT	SEGMENT
root$4 = 8
u_bit_count$5 = 72
v_bit_count$6 = 104
w_bit_count$7 = 136
nw$8 = 168
$T9 = 392
$T10 = 424
nu$ = 480
v$ = 488
?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp, COMDAT

; 299  :     {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  00012	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR [rsp+536]
  0002e	48 c7 85 a8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T10[rbp], -2
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 300  :         if (nu->IS_ZERO)

  00045	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR nu$[rbp]
  0004c	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0004f	83 e0 01	 and	 eax, 1
  00052	85 c0		 test	 eax, eax
  00054	74 2c		 je	 SHORT $LN2@PMC_Add_X_

; 301  :         {
; 302  :             // x が 0 である場合
; 303  : 
; 304  :             if (v == 0)

  00056	83 bd e8 01 00
	00 00		 cmp	 DWORD PTR v$[rbp], 0
  0005d	75 0e		 jne	 SHORT $LN4@PMC_Add_X_

; 305  :             {
; 306  :                 // y が 0 である場合
; 307  : 
; 308  :                 // x と y がともに 0 であるので、加算結果の 0 を呼び出し元に返す。
; 309  :                 return (&number_zero);

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00066	e9 22 01 00 00	 jmp	 $LN1@PMC_Add_X_

; 310  :             }
; 311  :             else

  0006b	eb 10		 jmp	 SHORT $LN5@PMC_Add_X_
$LN4@PMC_Add_X_:

; 312  :             {
; 313  :                 // y が 0 ではない場合
; 314  : 
; 315  :                 // 加算結果となる y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 316  :                 return (From_I_Imp(v));

  0006d	8b 8d e8 01 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  00073	e8 00 00 00 00	 call	 ?From_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@I@Z ; Palmtree::Math::Core::Internal::From_I_Imp
  00078	e9 10 01 00 00	 jmp	 $LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 317  :             }
; 318  :         }
; 319  :         else

  0007d	e9 0b 01 00 00	 jmp	 $LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 320  :         {
; 321  :             // x が 0 ではない場合
; 322  : 
; 323  :             if (v == 0)

  00082	83 bd e8 01 00
	00 00		 cmp	 DWORD PTR v$[rbp], 0
  00089	75 16		 jne	 SHORT $LN6@PMC_Add_X_

; 324  :             {
; 325  :                 // y が 0 である場合
; 326  : 
; 327  :                 // 加算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 328  :                 return (DuplicateNumber(nu));

  0008b	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR nu$[rbp]
  00092	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00097	e9 f1 00 00 00	 jmp	 $LN1@PMC_Add_X_

; 329  :             }
; 330  :             else

  0009c	e9 ec 00 00 00	 jmp	 $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 331  :             {
; 332  :                 // x と y がともに 0 ではない場合
; 333  : 
; 334  :                 // x と y の和を計算する
; 335  :                 ResourceHolderUINT root;

  000a1	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  000a5	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000aa	90		 npad	 1

; 336  :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

  000ab	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR nu$[rbp]
  000b2	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b6	48 89 45 48	 mov	 QWORD PTR u_bit_count$5[rbp], rax

; 337  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

  000ba	8b 8d e8 01 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  000c0	e8 00 00 00 00	 call	 _LZCNT_ALT_32
  000c5	48 98		 cdqe
  000c7	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000cc	48 2b c8	 sub	 rcx, rax
  000cf	48 8b c1	 mov	 rax, rcx
  000d2	48 89 45 68	 mov	 QWORD PTR v_bit_count$6[rbp], rax

; 338  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  000d6	48 8b 55 68	 mov	 rdx, QWORD PTR v_bit_count$6[rbp]
  000da	48 8b 4d 48	 mov	 rcx, QWORD PTR u_bit_count$5[rbp]
  000de	e8 00 00 00 00	 call	 _MAXIMUM_UNIT
  000e3	48 ff c0	 inc	 rax
  000e6	48 89 85 88 00
	00 00		 mov	 QWORD PTR w_bit_count$7[rbp], rax

; 339  :                 NUMBER_HEADER* nw = root.AllocateNumber(w_bit_count);

  000ed	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR w_bit_count$7[rbp]
  000f4	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  000f8	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000fd	48 89 85 a8 00
	00 00		 mov	 QWORD PTR nw$8[rbp], rax

; 340  :                 Add_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, v, nw->BLOCK, nw->BLOCK_COUNT);

  00104	8b 85 e8 01 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  0010a	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR nw$8[rbp]
  00111	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00115	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0011a	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR nw$8[rbp]
  00121	4c 8b 49 40	 mov	 r9, QWORD PTR [rcx+64]
  00125	44 8b c0	 mov	 r8d, eax
  00128	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR nu$[rbp]
  0012f	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00133	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR nu$[rbp]
  0013a	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  0013e	e8 00 00 00 00	 call	 ?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z ; Palmtree::Math::Core::Internal::Add_X_1W

; 341  :                 root.CheckNumber(nw);

  00143	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR nw$8[rbp]
  0014a	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  0014e	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 342  :                 CommitNumber(nw);

  00153	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR nw$8[rbp]
  0015a	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 343  :                 root.UnlinkNumber(nw);

  0015f	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR nw$8[rbp]
  00166	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  0016a	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 344  :                 return (nw);

  0016f	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR nw$8[rbp]
  00176	48 89 85 88 01
	00 00		 mov	 QWORD PTR $T9[rbp], rax
  0017d	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00181	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00186	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR $T9[rbp]
$LN1@PMC_Add_X_:

; 345  :             }
; 346  :         }
; 347  :     }

  0018d	48 8b f8	 mov	 rdi, rax
  00190	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00194	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcFrameData
  0019b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001a0	48 8b c7	 mov	 rax, rdi
  001a3	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  001aa	5f		 pop	 rdi
  001ab	5d		 pop	 rbp
  001ac	c3		 ret	 0
?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$4 = 8
u_bit_count$5 = 72
v_bit_count$6 = 104
w_bit_count$7 = 136
nw$8 = 168
$T9 = 392
$T10 = 424
nu$ = 480
v$ = 488
?dtor$0@?0??PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$4 = 8
u_bit_count$5 = 72
v_bit_count$6 = 104
w_bit_count$7 = 136
nw$8 = 168
$T9 = 392
$T10 = 424
nu$ = 480
v$ = 488
?dtor$0@?0??PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z
_TEXT	SEGMENT
t_buf$1 = 8
t_count$2 = 40
up$ = 72
vp$ = 104
wp$ = 136
c$ = 164
count$ = 200
tv152 = 408
tv155 = 416
tv158 = 424
u_buf$ = 464
u_count$ = 472
v_buf$ = 480
v_count$ = 488
w_buf$ = 496
w_count$ = 504
?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z PROC ; Palmtree::Math::Core::Internal::Add_Imp_using_ADCX, COMDAT

; 222  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR [rsp+520]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 223  :         // x のワード長が y のワード長以上であるようにする
; 224  :         if (u_count < v_count)

  00045	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0004c	48 39 85 d8 01
	00 00		 cmp	 QWORD PTR u_count$[rbp], rax
  00053	73 48		 jae	 SHORT $LN4@Add_Imp_us

; 225  :         {
; 226  :             __UNIT_TYPE* t_buf = u_buf;

  00055	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0005c	48 89 45 08	 mov	 QWORD PTR t_buf$1[rbp], rax

; 227  :             u_buf = v_buf;

  00060	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  00067	48 89 85 d0 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 228  :             v_buf = t_buf;

  0006e	48 8b 45 08	 mov	 rax, QWORD PTR t_buf$1[rbp]
  00072	48 89 85 e0 01
	00 00		 mov	 QWORD PTR v_buf$[rbp], rax

; 229  :             __UNIT_TYPE t_count = u_count;

  00079	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00080	48 89 45 28	 mov	 QWORD PTR t_count$2[rbp], rax

; 230  :             u_count = v_count;

  00084	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0008b	48 89 85 d8 01
	00 00		 mov	 QWORD PTR u_count$[rbp], rax

; 231  :             v_count = t_count;

  00092	48 8b 45 28	 mov	 rax, QWORD PTR t_count$2[rbp]
  00096	48 89 85 e8 01
	00 00		 mov	 QWORD PTR v_count$[rbp], rax
$LN4@Add_Imp_us:

; 232  :         }
; 233  :         __UNIT_TYPE* up = u_buf;

  0009d	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  000a4	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 234  :         __UNIT_TYPE* vp = v_buf;

  000a8	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  000af	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 235  :         __UNIT_TYPE* wp = w_buf;

  000b3	48 8b 85 f0 01
	00 00		 mov	 rax, QWORD PTR w_buf$[rbp]
  000ba	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax

; 236  :         char c = 0;

  000c1	c6 85 a4 00 00
	00 00		 mov	 BYTE PTR c$[rbp], 0

; 237  : 
; 238  :         // まず 32 ワードずつ加算をする。
; 239  :         __UNIT_TYPE count = v_count >> 5;

  000c8	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  000cf	48 c1 e8 05	 shr	 rax, 5
  000d3	48 89 85 c8 00
	00 00		 mov	 QWORD PTR count$[rbp], rax
$LN2@Add_Imp_us:

; 240  :         while (count != 0)

  000da	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR count$[rbp], 0
  000e2	74 64		 je	 SHORT $LN3@Add_Imp_us

; 241  :         {
; 242  :             c = _ADD_32WORDS_ADCX(c, up, vp, wp);

  000e4	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  000eb	4c 8b 45 68	 mov	 r8, QWORD PTR vp$[rbp]
  000ef	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  000f3	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000fa	e8 00 00 00 00	 call	 _ADD_32WORDS_ADCX
  000ff	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 243  :             up += 32;

  00105	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  00109	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0010f	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 244  :             vp += 32;

  00113	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  00117	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0011d	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 245  :             wp += 32;

  00121	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  00128	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0012e	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax

; 246  :             --count;

  00135	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  0013c	48 ff c8	 dec	 rax
  0013f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 247  :         }

  00146	eb 92		 jmp	 SHORT $LN2@Add_Imp_us
$LN3@Add_Imp_us:

; 248  :         // この時点で未処理の桁は 32 ワード未満のはず
; 249  : 
; 250  :         // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 251  :         if (v_count & 0x10)

  00148	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0014f	48 83 e0 10	 and	 rax, 16
  00153	48 85 c0	 test	 rax, rax
  00156	74 51		 je	 SHORT $LN5@Add_Imp_us

; 252  :         {
; 253  :             c = _ADD_16WORDS_ADCX(c, up, vp, wp);

  00158	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  0015f	4c 8b 45 68	 mov	 r8, QWORD PTR vp$[rbp]
  00163	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  00167	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0016e	e8 00 00 00 00	 call	 _ADD_16WORDS_ADCX
  00173	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 254  :             up += 16;

  00179	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  0017d	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00183	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 255  :             vp += 16;

  00187	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  0018b	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00191	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 256  :             wp += 16;

  00195	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  0019c	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  001a2	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax
$LN5@Add_Imp_us:

; 257  :         }
; 258  :         // この時点で未処理の桁は 16 ワード未満のはず
; 259  : 
; 260  :         // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 261  :         if (v_count & 0x8)

  001a9	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  001b0	48 83 e0 08	 and	 rax, 8
  001b4	48 85 c0	 test	 rax, rax
  001b7	74 4b		 je	 SHORT $LN6@Add_Imp_us

; 262  :         {
; 263  :             c = _ADD_8WORDS_ADCX(c, up, vp, wp);

  001b9	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  001c0	4c 8b 45 68	 mov	 r8, QWORD PTR vp$[rbp]
  001c4	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  001c8	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001cf	e8 00 00 00 00	 call	 _ADD_8WORDS_ADCX
  001d4	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 264  :             up += 8;

  001da	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  001de	48 83 c0 40	 add	 rax, 64			; 00000040H
  001e2	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 265  :             vp += 8;

  001e6	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  001ea	48 83 c0 40	 add	 rax, 64			; 00000040H
  001ee	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 266  :             wp += 8;

  001f2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  001f9	48 83 c0 40	 add	 rax, 64			; 00000040H
  001fd	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax
$LN6@Add_Imp_us:

; 267  :         }
; 268  :         // この時点で未処理の桁は 8 ワード未満のはず
; 269  : 
; 270  :         // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 271  :         if (v_count & 0x4)

  00204	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0020b	48 83 e0 04	 and	 rax, 4
  0020f	48 85 c0	 test	 rax, rax
  00212	74 4b		 je	 SHORT $LN7@Add_Imp_us

; 272  :         {
; 273  :             c = _ADD_4WORDS_ADCX(c, up, vp, wp);

  00214	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  0021b	4c 8b 45 68	 mov	 r8, QWORD PTR vp$[rbp]
  0021f	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  00223	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022a	e8 00 00 00 00	 call	 _ADD_4WORDS_ADCX
  0022f	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 274  :             up += 4;

  00235	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  00239	48 83 c0 20	 add	 rax, 32			; 00000020H
  0023d	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 275  :             vp += 4;

  00241	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  00245	48 83 c0 20	 add	 rax, 32			; 00000020H
  00249	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 276  :             wp += 4;

  0024d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  00254	48 83 c0 20	 add	 rax, 32			; 00000020H
  00258	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax
$LN7@Add_Imp_us:

; 277  :         }
; 278  :         // この時点で未処理の桁は 4 ワード未満のはず
; 279  : 
; 280  :         // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 281  :         if (v_count & 0x2)

  0025f	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  00266	48 83 e0 02	 and	 rax, 2
  0026a	48 85 c0	 test	 rax, rax
  0026d	74 4b		 je	 SHORT $LN8@Add_Imp_us

; 282  :         {
; 283  :             c = _ADD_2WORDS_ADCX(c, up, vp, wp);

  0026f	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  00276	4c 8b 45 68	 mov	 r8, QWORD PTR vp$[rbp]
  0027a	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  0027e	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00285	e8 00 00 00 00	 call	 _ADD_2WORDS_ADCX
  0028a	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 284  :             up += 2;

  00290	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  00294	48 83 c0 10	 add	 rax, 16
  00298	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 285  :             vp += 2;

  0029c	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  002a0	48 83 c0 10	 add	 rax, 16
  002a4	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 286  :             wp += 2;

  002a8	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  002af	48 83 c0 10	 add	 rax, 16
  002b3	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax
$LN8@Add_Imp_us:

; 287  :         }
; 288  :         // この時点で未処理の桁は 2 ワード未満のはず
; 289  : 
; 290  :         // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 291  :         if (v_count & 0x1)

  002ba	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  002c1	48 83 e0 01	 and	 rax, 1
  002c5	48 85 c0	 test	 rax, rax
  002c8	74 7b		 je	 SHORT $LN9@Add_Imp_us

; 292  :             c = _ADDX_UNIT(c, *up++, *vp++, wp++);

  002ca	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  002d1	48 89 85 98 01
	00 00		 mov	 QWORD PTR tv152[rbp], rax
  002d8	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  002df	48 83 c0 08	 add	 rax, 8
  002e3	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax
  002ea	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  002ee	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f1	48 89 85 a0 01
	00 00		 mov	 QWORD PTR tv155[rbp], rax
  002f8	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  002fc	48 83 c0 08	 add	 rax, 8
  00300	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax
  00304	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  00308	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0030b	48 89 85 a8 01
	00 00		 mov	 QWORD PTR tv158[rbp], rax
  00312	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  00316	48 83 c0 08	 add	 rax, 8
  0031a	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax
  0031e	4c 8b 8d 98 01
	00 00		 mov	 r9, QWORD PTR tv152[rbp]
  00325	4c 8b 85 a0 01
	00 00		 mov	 r8, QWORD PTR tv155[rbp]
  0032c	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR tv158[rbp]
  00333	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0033a	e8 00 00 00 00	 call	 _ADDX_UNIT
  0033f	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al
$LN9@Add_Imp_us:

; 293  : 
; 294  :         // 残りの桁の繰り上がりを計算し、復帰する。
; 295  :         DoCarry(c, up, u_count - v_count, wp, w_count - v_count);

  00345	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0034c	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR w_count$[rbp]
  00353	48 2b c8	 sub	 rcx, rax
  00356	48 8b c1	 mov	 rax, rcx
  00359	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR v_count$[rbp]
  00360	48 8b 95 d8 01
	00 00		 mov	 rdx, QWORD PTR u_count$[rbp]
  00367	48 2b d1	 sub	 rdx, rcx
  0036a	48 8b ca	 mov	 rcx, rdx
  0036d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00372	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  00379	4c 8b c1	 mov	 r8, rcx
  0037c	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  00380	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00387	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z ; Palmtree::Math::Core::Internal::DoCarry

; 296  :     }

  0038c	48 8d a5 b8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+440]
  00393	5f		 pop	 rdi
  00394	5d		 pop	 rbp
  00395	c3		 ret	 0
?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z ENDP ; Palmtree::Math::Core::Internal::Add_Imp_using_ADCX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z
_TEXT	SEGMENT
t_buf$1 = 8
t_count$2 = 40
up$ = 72
vp$ = 104
wp$ = 136
c$ = 164
count$ = 200
tv152 = 408
tv155 = 416
tv158 = 424
u_buf$ = 464
u_count$ = 472
v_buf$ = 480
v_count$ = 488
w_buf$ = 496
w_count$ = 504
?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z PROC ; Palmtree::Math::Core::Internal::Add_Imp_using_ADC, COMDAT

; 145  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR [rsp+520]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 146  :         // x のワード長が y のワード長以上であるようにする
; 147  :         if (u_count < v_count)

  00045	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0004c	48 39 85 d8 01
	00 00		 cmp	 QWORD PTR u_count$[rbp], rax
  00053	73 48		 jae	 SHORT $LN4@Add_Imp_us

; 148  :         {
; 149  :             __UNIT_TYPE* t_buf = u_buf;

  00055	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0005c	48 89 45 08	 mov	 QWORD PTR t_buf$1[rbp], rax

; 150  :             u_buf = v_buf;

  00060	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  00067	48 89 85 d0 01
	00 00		 mov	 QWORD PTR u_buf$[rbp], rax

; 151  :             v_buf = t_buf;

  0006e	48 8b 45 08	 mov	 rax, QWORD PTR t_buf$1[rbp]
  00072	48 89 85 e0 01
	00 00		 mov	 QWORD PTR v_buf$[rbp], rax

; 152  :             __UNIT_TYPE t_count = u_count;

  00079	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00080	48 89 45 28	 mov	 QWORD PTR t_count$2[rbp], rax

; 153  :             u_count = v_count;

  00084	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0008b	48 89 85 d8 01
	00 00		 mov	 QWORD PTR u_count$[rbp], rax

; 154  :             v_count = t_count;

  00092	48 8b 45 28	 mov	 rax, QWORD PTR t_count$2[rbp]
  00096	48 89 85 e8 01
	00 00		 mov	 QWORD PTR v_count$[rbp], rax
$LN4@Add_Imp_us:

; 155  :         }
; 156  :         __UNIT_TYPE* up = u_buf;

  0009d	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  000a4	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 157  :         __UNIT_TYPE* vp = v_buf;

  000a8	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  000af	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 158  :         __UNIT_TYPE* wp = w_buf;

  000b3	48 8b 85 f0 01
	00 00		 mov	 rax, QWORD PTR w_buf$[rbp]
  000ba	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax

; 159  :         char c = 0;

  000c1	c6 85 a4 00 00
	00 00		 mov	 BYTE PTR c$[rbp], 0

; 160  : 
; 161  :         // まず 32 ワードずつ加算をする。
; 162  :         __UNIT_TYPE count = v_count >> 5;

  000c8	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  000cf	48 c1 e8 05	 shr	 rax, 5
  000d3	48 89 85 c8 00
	00 00		 mov	 QWORD PTR count$[rbp], rax
$LN2@Add_Imp_us:

; 163  :         while (count != 0)

  000da	48 83 bd c8 00
	00 00 00	 cmp	 QWORD PTR count$[rbp], 0
  000e2	74 64		 je	 SHORT $LN3@Add_Imp_us

; 164  :         {
; 165  :             c = _ADD_32WORDS_ADC(c, up, vp, wp);

  000e4	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  000eb	4c 8b 45 68	 mov	 r8, QWORD PTR vp$[rbp]
  000ef	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  000f3	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000fa	e8 00 00 00 00	 call	 _ADD_32WORDS_ADC
  000ff	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 166  :             up += 32;

  00105	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  00109	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0010f	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 167  :             vp += 32;

  00113	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  00117	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0011d	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 168  :             wp += 32;

  00121	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  00128	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0012e	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax

; 169  :             --count;

  00135	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  0013c	48 ff c8	 dec	 rax
  0013f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 170  :         }

  00146	eb 92		 jmp	 SHORT $LN2@Add_Imp_us
$LN3@Add_Imp_us:

; 171  :         // この時点で未処理の桁は 32 ワード未満のはず
; 172  : 
; 173  :         // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 174  :         if (v_count & 0x10)

  00148	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0014f	48 83 e0 10	 and	 rax, 16
  00153	48 85 c0	 test	 rax, rax
  00156	74 51		 je	 SHORT $LN5@Add_Imp_us

; 175  :         {
; 176  :             c = _ADD_16WORDS_ADC(c, up, vp, wp);

  00158	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  0015f	4c 8b 45 68	 mov	 r8, QWORD PTR vp$[rbp]
  00163	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  00167	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0016e	e8 00 00 00 00	 call	 _ADD_16WORDS_ADC
  00173	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 177  :             up += 16;

  00179	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  0017d	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00183	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 178  :             vp += 16;

  00187	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  0018b	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00191	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 179  :             wp += 16;

  00195	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  0019c	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  001a2	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax
$LN5@Add_Imp_us:

; 180  :         }
; 181  :         // この時点で未処理の桁は 16 ワード未満のはず
; 182  : 
; 183  :         // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 184  :         if (v_count & 0x8)

  001a9	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  001b0	48 83 e0 08	 and	 rax, 8
  001b4	48 85 c0	 test	 rax, rax
  001b7	74 4b		 je	 SHORT $LN6@Add_Imp_us

; 185  :         {
; 186  :             c = _ADD_8WORDS_ADC(c, up, vp, wp);

  001b9	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  001c0	4c 8b 45 68	 mov	 r8, QWORD PTR vp$[rbp]
  001c4	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  001c8	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001cf	e8 00 00 00 00	 call	 _ADD_8WORDS_ADC
  001d4	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 187  :             up += 8;

  001da	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  001de	48 83 c0 40	 add	 rax, 64			; 00000040H
  001e2	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 188  :             vp += 8;

  001e6	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  001ea	48 83 c0 40	 add	 rax, 64			; 00000040H
  001ee	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 189  :             wp += 8;

  001f2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  001f9	48 83 c0 40	 add	 rax, 64			; 00000040H
  001fd	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax
$LN6@Add_Imp_us:

; 190  :         }
; 191  :         // この時点で未処理の桁は 8 ワード未満のはず
; 192  : 
; 193  :         // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 194  :         if (v_count & 0x4)

  00204	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0020b	48 83 e0 04	 and	 rax, 4
  0020f	48 85 c0	 test	 rax, rax
  00212	74 4b		 je	 SHORT $LN7@Add_Imp_us

; 195  :         {
; 196  :             c = _ADD_4WORDS_ADC(c, up, vp, wp);

  00214	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  0021b	4c 8b 45 68	 mov	 r8, QWORD PTR vp$[rbp]
  0021f	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  00223	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022a	e8 00 00 00 00	 call	 _ADD_4WORDS_ADC
  0022f	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 197  :             up += 4;

  00235	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  00239	48 83 c0 20	 add	 rax, 32			; 00000020H
  0023d	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 198  :             vp += 4;

  00241	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  00245	48 83 c0 20	 add	 rax, 32			; 00000020H
  00249	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 199  :             wp += 4;

  0024d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  00254	48 83 c0 20	 add	 rax, 32			; 00000020H
  00258	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax
$LN7@Add_Imp_us:

; 200  :         }
; 201  :         // この時点で未処理の桁は 4 ワード未満のはず
; 202  : 
; 203  :         // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 204  :         if (v_count & 0x2)

  0025f	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  00266	48 83 e0 02	 and	 rax, 2
  0026a	48 85 c0	 test	 rax, rax
  0026d	74 4b		 je	 SHORT $LN8@Add_Imp_us

; 205  :         {
; 206  :             c = _ADD_2WORDS_ADC(c, up, vp, wp);

  0026f	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  00276	4c 8b 45 68	 mov	 r8, QWORD PTR vp$[rbp]
  0027a	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  0027e	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00285	e8 00 00 00 00	 call	 _ADD_2WORDS_ADC
  0028a	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 207  :             up += 2;

  00290	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  00294	48 83 c0 10	 add	 rax, 16
  00298	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax

; 208  :             vp += 2;

  0029c	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  002a0	48 83 c0 10	 add	 rax, 16
  002a4	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax

; 209  :             wp += 2;

  002a8	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  002af	48 83 c0 10	 add	 rax, 16
  002b3	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax
$LN8@Add_Imp_us:

; 210  :         }
; 211  :         // この時点で未処理の桁は 2 ワード未満のはず
; 212  : 
; 213  :         // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 214  :         if (v_count & 0x1)

  002ba	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  002c1	48 83 e0 01	 and	 rax, 1
  002c5	48 85 c0	 test	 rax, rax
  002c8	74 7b		 je	 SHORT $LN9@Add_Imp_us

; 215  :             c = _ADD_UNIT(c, *up++, *vp++, wp++);

  002ca	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  002d1	48 89 85 98 01
	00 00		 mov	 QWORD PTR tv152[rbp], rax
  002d8	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR wp$[rbp]
  002df	48 83 c0 08	 add	 rax, 8
  002e3	48 89 85 88 00
	00 00		 mov	 QWORD PTR wp$[rbp], rax
  002ea	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  002ee	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f1	48 89 85 a0 01
	00 00		 mov	 QWORD PTR tv155[rbp], rax
  002f8	48 8b 45 68	 mov	 rax, QWORD PTR vp$[rbp]
  002fc	48 83 c0 08	 add	 rax, 8
  00300	48 89 45 68	 mov	 QWORD PTR vp$[rbp], rax
  00304	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  00308	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0030b	48 89 85 a8 01
	00 00		 mov	 QWORD PTR tv158[rbp], rax
  00312	48 8b 45 48	 mov	 rax, QWORD PTR up$[rbp]
  00316	48 83 c0 08	 add	 rax, 8
  0031a	48 89 45 48	 mov	 QWORD PTR up$[rbp], rax
  0031e	4c 8b 8d 98 01
	00 00		 mov	 r9, QWORD PTR tv152[rbp]
  00325	4c 8b 85 a0 01
	00 00		 mov	 r8, QWORD PTR tv155[rbp]
  0032c	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR tv158[rbp]
  00333	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0033a	e8 00 00 00 00	 call	 _ADD_UNIT
  0033f	88 85 a4 00 00
	00		 mov	 BYTE PTR c$[rbp], al
$LN9@Add_Imp_us:

; 216  : 
; 217  :         // 残りの桁の繰り上がりを計算し、復帰する。
; 218  :         DoCarry(c, up, u_count - v_count, wp, w_count - v_count);

  00345	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0034c	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR w_count$[rbp]
  00353	48 2b c8	 sub	 rcx, rax
  00356	48 8b c1	 mov	 rax, rcx
  00359	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR v_count$[rbp]
  00360	48 8b 95 d8 01
	00 00		 mov	 rdx, QWORD PTR u_count$[rbp]
  00367	48 2b d1	 sub	 rdx, rcx
  0036a	48 8b ca	 mov	 rcx, rdx
  0036d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00372	4c 8b 8d 88 00
	00 00		 mov	 r9, QWORD PTR wp$[rbp]
  00379	4c 8b c1	 mov	 r8, rcx
  0037c	48 8b 55 48	 mov	 rdx, QWORD PTR up$[rbp]
  00380	0f b6 8d a4 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00387	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z ; Palmtree::Math::Core::Internal::DoCarry

; 219  :     }

  0038c	48 8d a5 b8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+440]
  00393	5f		 pop	 rdi
  00394	5d		 pop	 rbp
  00395	c3		 ret	 0
?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z ENDP ; Palmtree::Math::Core::Internal::Add_Imp_using_ADC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPEA_K_K1101@Z
_TEXT	SEGMENT
up$ = 8
wp$ = 40
c$ = 68
tv128 = 280
tv87 = 280
tv132 = 288
tv91 = 288
u_buf$ = 336
u_count$ = 344
v_hi$ = 352
v_lo$ = 360
w_buf$ = 368
w_count$ = 376
?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPEA_K_K1101@Z PROC ; Palmtree::Math::Core::Internal::Add_X_2W, COMDAT

; 104  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 105  :         __UNIT_TYPE* up = u_buf;

  00045	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0004c	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 106  :         __UNIT_TYPE* wp = w_buf;

  00050	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR w_buf$[rbp]
  00057	48 89 45 28	 mov	 QWORD PTR wp$[rbp], rax

; 107  :         char c;
; 108  : 
; 109  :         if (u_count < 2)

  0005b	48 83 bd 58 01
	00 00 02	 cmp	 QWORD PTR u_count$[rbp], 2
  00063	0f 83 8a 00 00
	00		 jae	 $LN2@Add_X_2W

; 110  :         {
; 111  :             // x が 1 ワードしかなかった場合
; 112  : 
; 113  :             // 最下位ワードの加算を行う
; 114  :             c = _ADD_UNIT(0, up[0], v_lo, &wp[0]);

  00069	b8 08 00 00 00	 mov	 eax, 8
  0006e	48 6b c0 00	 imul	 rax, rax, 0
  00072	48 8b 4d 28	 mov	 rcx, QWORD PTR wp$[rbp]
  00076	48 03 c8	 add	 rcx, rax
  00079	48 8b c1	 mov	 rax, rcx
  0007c	b9 08 00 00 00	 mov	 ecx, 8
  00081	48 6b c9 00	 imul	 rcx, rcx, 0
  00085	4c 8b c8	 mov	 r9, rax
  00088	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR v_lo$[rbp]
  0008f	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00093	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00097	33 c9		 xor	 ecx, ecx
  00099	e8 00 00 00 00	 call	 _ADD_UNIT
  0009e	88 45 44	 mov	 BYTE PTR c$[rbp], al

; 115  : 
; 116  :             // 最下位から 2 番目のワードの加算を行う
; 117  :             c = _ADD_UNIT(c, 0, v_hi, &wp[1]);

  000a1	b8 08 00 00 00	 mov	 eax, 8
  000a6	48 6b c0 01	 imul	 rax, rax, 1
  000aa	48 8b 4d 28	 mov	 rcx, QWORD PTR wp$[rbp]
  000ae	48 03 c8	 add	 rcx, rax
  000b1	48 8b c1	 mov	 rax, rcx
  000b4	4c 8b c8	 mov	 r9, rax
  000b7	4c 8b 85 60 01
	00 00		 mov	 r8, QWORD PTR v_hi$[rbp]
  000be	33 d2		 xor	 edx, edx
  000c0	0f b6 4d 44	 movzx	 ecx, BYTE PTR c$[rbp]
  000c4	e8 00 00 00 00	 call	 _ADD_UNIT
  000c9	88 45 44	 mov	 BYTE PTR c$[rbp], al

; 118  : 
; 119  :             // 桁上りが発生したら 3 番目のワードに 1 を設定する。
; 120  :             if (c)

  000cc	0f be 45 44	 movsx	 eax, BYTE PTR c$[rbp]
  000d0	85 c0		 test	 eax, eax
  000d2	74 15		 je	 SHORT $LN4@Add_X_2W

; 121  :                 wp[2] = 1;

  000d4	b8 08 00 00 00	 mov	 eax, 8
  000d9	48 6b c0 02	 imul	 rax, rax, 2
  000dd	48 8b 4d 28	 mov	 rcx, QWORD PTR wp$[rbp]
  000e1	48 c7 04 01 01
	00 00 00	 mov	 QWORD PTR [rcx+rax], 1
$LN4@Add_X_2W:

; 122  : 
; 123  :             // 正常復帰する。
; 124  :             return;

  000e9	e9 ef 00 00 00	 jmp	 $LN1@Add_X_2W

; 125  :         }
; 126  :         else

  000ee	e9 ea 00 00 00	 jmp	 $LN3@Add_X_2W
$LN2@Add_X_2W:

; 127  :         {
; 128  :             // x が 2 ワード以上あった場合
; 129  : 
; 130  :             // 最下位のワードの加算をする
; 131  :             c = _ADD_UNIT(0, *up++, v_lo, wp++);

  000f3	48 8b 45 28	 mov	 rax, QWORD PTR wp$[rbp]
  000f7	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv87[rbp], rax
  000fe	48 8b 45 28	 mov	 rax, QWORD PTR wp$[rbp]
  00102	48 83 c0 08	 add	 rax, 8
  00106	48 89 45 28	 mov	 QWORD PTR wp$[rbp], rax
  0010a	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0010e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00111	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  00118	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0011c	48 83 c0 08	 add	 rax, 8
  00120	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax
  00124	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR tv87[rbp]
  0012b	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR v_lo$[rbp]
  00132	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR tv91[rbp]
  00139	33 c9		 xor	 ecx, ecx
  0013b	e8 00 00 00 00	 call	 _ADD_UNIT
  00140	88 45 44	 mov	 BYTE PTR c$[rbp], al

; 132  : 
; 133  :             // 最下位から 2 番目のワードの加算をする。
; 134  :             c = _ADD_UNIT(c, *up++, v_hi, wp++);

  00143	48 8b 45 28	 mov	 rax, QWORD PTR wp$[rbp]
  00147	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv128[rbp], rax
  0014e	48 8b 45 28	 mov	 rax, QWORD PTR wp$[rbp]
  00152	48 83 c0 08	 add	 rax, 8
  00156	48 89 45 28	 mov	 QWORD PTR wp$[rbp], rax
  0015a	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0015e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00161	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv132[rbp], rax
  00168	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0016c	48 83 c0 08	 add	 rax, 8
  00170	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax
  00174	4c 8b 8d 18 01
	00 00		 mov	 r9, QWORD PTR tv128[rbp]
  0017b	4c 8b 85 60 01
	00 00		 mov	 r8, QWORD PTR v_hi$[rbp]
  00182	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR tv132[rbp]
  00189	0f b6 4d 44	 movzx	 ecx, BYTE PTR c$[rbp]
  0018d	e8 00 00 00 00	 call	 _ADD_UNIT
  00192	88 45 44	 mov	 BYTE PTR c$[rbp], al

; 135  :             u_count -= 2;

  00195	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  0019c	48 83 e8 02	 sub	 rax, 2
  001a0	48 89 85 58 01
	00 00		 mov	 QWORD PTR u_count$[rbp], rax

; 136  :             w_count -= 2;

  001a7	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR w_count$[rbp]
  001ae	48 83 e8 02	 sub	 rax, 2
  001b2	48 89 85 78 01
	00 00		 mov	 QWORD PTR w_count$[rbp], rax

; 137  : 
; 138  :             // 残りの桁の繰り上がりを計算し、復帰する。
; 139  :             DoCarry(c, up, u_count, wp, w_count);

  001b9	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR w_count$[rbp]
  001c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c5	4c 8b 4d 28	 mov	 r9, QWORD PTR wp$[rbp]
  001c9	4c 8b 85 58 01
	00 00		 mov	 r8, QWORD PTR u_count$[rbp]
  001d0	48 8b 55 08	 mov	 rdx, QWORD PTR up$[rbp]
  001d4	0f b6 4d 44	 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z ; Palmtree::Math::Core::Internal::DoCarry
$LN3@Add_X_2W:
$LN1@Add_X_2W:

; 140  :         }
; 141  :     }

  001dd	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  001e4	5f		 pop	 rdi
  001e5	5d		 pop	 rbp
  001e6	c3		 ret	 0
?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPEA_K_K1101@Z ENDP ; Palmtree::Math::Core::Internal::Add_X_2W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z
_TEXT	SEGMENT
c$ = 4
tv66 = 216
tv70 = 224
u_ptr$ = 272
u_count$ = 280
v$ = 288
w_ptr$ = 296
w_count$ = 304
?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z PROC ; Palmtree::Math::Core::Internal::Add_X_1W, COMDAT

; 91   :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 92   :         char c;
; 93   : 
; 94   :         // 最下桁の加算を行う
; 95   :         c = _ADD_UNIT(0, *u_ptr++, v, w_ptr++);

  00045	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR w_ptr$[rbp]
  0004c	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00053	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR w_ptr$[rbp]
  0005a	48 83 c0 08	 add	 rax, 8
  0005e	48 89 85 28 01
	00 00		 mov	 QWORD PTR w_ptr$[rbp], rax
  00065	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR u_ptr$[rbp]
  0006c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006f	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  00076	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR u_ptr$[rbp]
  0007d	48 83 c0 08	 add	 rax, 8
  00081	48 89 85 10 01
	00 00		 mov	 QWORD PTR u_ptr$[rbp], rax
  00088	4c 8b 8d d8 00
	00 00		 mov	 r9, QWORD PTR tv66[rbp]
  0008f	4c 8b 85 20 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00096	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR tv70[rbp]
  0009d	33 c9		 xor	 ecx, ecx
  0009f	e8 00 00 00 00	 call	 _ADD_UNIT
  000a4	88 45 04	 mov	 BYTE PTR c$[rbp], al

; 96   :         --u_count;

  000a7	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  000ae	48 ff c8	 dec	 rax
  000b1	48 89 85 18 01
	00 00		 mov	 QWORD PTR u_count$[rbp], rax

; 97   :         --w_count;

  000b8	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR w_count$[rbp]
  000bf	48 ff c8	 dec	 rax
  000c2	48 89 85 30 01
	00 00		 mov	 QWORD PTR w_count$[rbp], rax

; 98   : 
; 99   :         // 残りの桁の繰上りを行い復帰する。
; 100  :         DoCarry(c, u_ptr, u_count, w_ptr, w_count);

  000c9	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR w_count$[rbp]
  000d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d5	4c 8b 8d 28 01
	00 00		 mov	 r9, QWORD PTR w_ptr$[rbp]
  000dc	4c 8b 85 18 01
	00 00		 mov	 r8, QWORD PTR u_count$[rbp]
  000e3	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR u_ptr$[rbp]
  000ea	0f b6 4d 04	 movzx	 ecx, BYTE PTR c$[rbp]
  000ee	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z ; Palmtree::Math::Core::Internal::DoCarry

; 101  :     }

  000f3	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  000fa	5f		 pop	 rdi
  000fb	5d		 pop	 rbp
  000fc	c3		 ret	 0
?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K101@Z ENDP ; Palmtree::Math::Core::Internal::Add_X_1W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z
_TEXT	SEGMENT
$T1 = 200
tv90 = 264
tv77 = 264
tv81 = 272
c$ = 320
u_ptr$ = 328
u_count$ = 336
w_ptr$ = 344
w_count$ = 352
?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z PROC ; Palmtree::Math::Core::Internal::DoCarry, COMDAT

; 39   :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 68
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+360]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@DoCarry:

; 40   :         // 繰り上がりを続く限り行う
; 41   :         for (;;)
; 42   :         {
; 43   :             if (u_count <= 0)

  00044	48 83 bd 50 01
	00 00 00	 cmp	 QWORD PTR u_count$[rbp], 0
  0004c	77 5a		 ja	 SHORT $LN7@DoCarry

; 44   :             {
; 45   :                 // u の最上位まで達してしまった場合
; 46   : 
; 47   :                 if (c)

  0004e	0f be 85 40 01
	00 00		 movsx	 eax, BYTE PTR c$[rbp]
  00055	85 c0		 test	 eax, eax
  00057	74 45		 je	 SHORT $LN9@DoCarry

; 48   :                 {
; 49   :                     // かつそれでも繰り上がりを行う必要がある場合
; 50   :                     if (w_count <= 0)

  00059	48 83 bd 60 01
	00 00 00	 cmp	 QWORD PTR w_count$[rbp], 0
  00061	77 2d		 ja	 SHORT $LN10@DoCarry

; 51   :                     {
; 52   :                         // しかし w がもう終端に達してしまった場合
; 53   : 
; 54   :                         // w のバッファはこの余裕を見込んでいるのでこのルートには到達しないはず。
; 55   :                         throw InternalErrorException(L"内部エラーが発生しました。", L"pcm_add.cpp;DoCarry;1");

  00063	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1CM@CADFJOJJ@?$AAp?$AAc?$AAm?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAD?$AAo?$AAC@
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00071	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00078	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00084	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0008b	e8 00 00 00 00	 call	 _CxxThrowException
$LN10@DoCarry:

; 56   :                     }
; 57   :                     *w_ptr = 1;

  00090	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR w_ptr$[rbp]
  00097	48 c7 00 01 00
	00 00		 mov	 QWORD PTR [rax], 1
$LN9@DoCarry:

; 58   :                 }
; 59   : 
; 60   :                 // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 61   : 
; 62   :                 return;

  0009e	e9 19 01 00 00	 jmp	 $LN1@DoCarry
  000a3	e9 0f 01 00 00	 jmp	 $LN8@DoCarry
$LN7@DoCarry:

; 63   :             }
; 64   :             else if (c)

  000a8	0f be 85 40 01
	00 00		 movsx	 eax, BYTE PTR c$[rbp]
  000af	85 c0		 test	 eax, eax
  000b1	0f 84 8a 00 00
	00		 je	 $LN11@DoCarry

; 65   :             {
; 66   :                 // u の最上位に達しておらず、かつキャリーが立っている場合
; 67   : 
; 68   :                 // 繰り上がりを継続する
; 69   :                 c = _ADD_UNIT(c, *u_ptr++, 0, w_ptr++);

  000b7	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR w_ptr$[rbp]
  000be	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv77[rbp], rax
  000c5	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR w_ptr$[rbp]
  000cc	48 83 c0 08	 add	 rax, 8
  000d0	48 89 85 58 01
	00 00		 mov	 QWORD PTR w_ptr$[rbp], rax
  000d7	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR u_ptr$[rbp]
  000de	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e1	48 89 85 10 01
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  000e8	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR u_ptr$[rbp]
  000ef	48 83 c0 08	 add	 rax, 8
  000f3	48 89 85 48 01
	00 00		 mov	 QWORD PTR u_ptr$[rbp], rax
  000fa	4c 8b 8d 08 01
	00 00		 mov	 r9, QWORD PTR tv77[rbp]
  00101	45 33 c0	 xor	 r8d, r8d
  00104	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR tv81[rbp]
  0010b	0f b6 8d 40 01
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00112	e8 00 00 00 00	 call	 _ADD_UNIT
  00117	88 85 40 01 00
	00		 mov	 BYTE PTR c$[rbp], al

; 70   :                 --u_count;

  0011d	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00124	48 ff c8	 dec	 rax
  00127	48 89 85 50 01
	00 00		 mov	 QWORD PTR u_count$[rbp], rax

; 71   :                 --w_count;

  0012e	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR w_count$[rbp]
  00135	48 ff c8	 dec	 rax
  00138	48 89 85 60 01
	00 00		 mov	 QWORD PTR w_count$[rbp], rax

; 72   :             }
; 73   :             else

  0013f	eb 76		 jmp	 SHORT $LN12@DoCarry
$LN11@DoCarry:
$LN5@DoCarry:

; 74   :             {
; 75   :                 // u の最上位に達しておらず、かつキャリーが立っていない場合
; 76   : 
; 77   :                 // 繰り上がりを中断し、u の残りのデータをzにそのまま複写し、正常復帰する。
; 78   :                 while (u_count > 0)

  00141	48 83 bd 50 01
	00 00 00	 cmp	 QWORD PTR u_count$[rbp], 0
  00149	76 6a		 jbe	 SHORT $LN6@DoCarry

; 79   :                 {
; 80   :                     *w_ptr++ = *u_ptr++;

  0014b	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR u_ptr$[rbp]
  00152	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00155	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv90[rbp], rax
  0015c	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR u_ptr$[rbp]
  00163	48 83 c0 08	 add	 rax, 8
  00167	48 89 85 48 01
	00 00		 mov	 QWORD PTR u_ptr$[rbp], rax
  0016e	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR w_ptr$[rbp]
  00175	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv90[rbp]
  0017c	48 89 08	 mov	 QWORD PTR [rax], rcx
  0017f	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR w_ptr$[rbp]
  00186	48 83 c0 08	 add	 rax, 8
  0018a	48 89 85 58 01
	00 00		 mov	 QWORD PTR w_ptr$[rbp], rax

; 81   :                     --u_count;

  00191	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00198	48 ff c8	 dec	 rax
  0019b	48 89 85 50 01
	00 00		 mov	 QWORD PTR u_count$[rbp], rax

; 82   :                     --w_count;

  001a2	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR w_count$[rbp]
  001a9	48 ff c8	 dec	 rax
  001ac	48 89 85 60 01
	00 00		 mov	 QWORD PTR w_count$[rbp], rax

; 83   :                 }

  001b3	eb 8c		 jmp	 SHORT $LN5@DoCarry
$LN6@DoCarry:

; 84   :                 return;

  001b5	eb 05		 jmp	 SHORT $LN1@DoCarry
$LN12@DoCarry:
$LN8@DoCarry:

; 85   :             }
; 86   :         }

  001b7	e9 88 fe ff ff	 jmp	 $LN2@DoCarry
$LN1@DoCarry:
$LN13@DoCarry:

; 87   :     }

  001bc	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  001c3	5f		 pop	 rdi
  001c4	5d		 pop	 rbp
  001c5	c3		 ret	 0
?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K01@Z ENDP ; Palmtree::Math::Core::Internal::DoCarry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_2WORDS_ADCX PROC					; COMDAT

; 2228 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2229 : #ifdef _MSC_VER
; 2230 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADDX_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2231 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADDX_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2232 : #elif defined(__GNUC__)
; 2233 : #ifdef _M_IX86
; 2234 :     __asm__ volatile (
; 2235 :         "addb\t$-1, %0\n\t"
; 2236 :         "movl\t(%1), %%ecx\n\t"
; 2237 :         "adcxl\t(%2), %%ecx\n\t"
; 2238 :         "movl\t%%ecx, (%3)\n\t"
; 2239 :         "movl\t4(%1), %%ecx\n\t"
; 2240 :         "adcxl\t4(%2), %%ecx\n\t"
; 2241 :         "movl\t%%ecx, 4(%3)\n\t"
; 2242 :         "setc\t%0"
; 2243 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2244 :         :
; 2245 :         : "cc", "memory", "%ecx"
; 2246 : );
; 2247 : #elif defined(_M_X64)
; 2248 :     __asm__ volatile (
; 2249 :         "addb\t$-1, %0\n\t"
; 2250 :         "movq\t(%1), %%rcx\n\t"
; 2251 :         "adcxq\t(%2), %%rcx\n\t"
; 2252 :         "movq\t%%rcx, (%3)\n\t"
; 2253 :         "movq\t8(%1), %%rcx\n\t"
; 2254 :         "adcxq\t8(%2), %%rcx\n\t"
; 2255 :         "movq\t%%rcx, 8(%3)\n\t"
; 2256 :         "setc\t%0"
; 2257 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2258 :         :
; 2259 :         : "cc", "memory", "%rcx"
; 2260 : );
; 2261 : #else
; 2262 : #error unknown platform
; 2263 : #endif
; 2264 : #else
; 2265 : #error unknown compiler
; 2266 : #endif
; 2267 :     return (c);

  000ea	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 2268 : }

  000f1	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000f8	5f		 pop	 rdi
  000f9	5d		 pop	 rbp
  000fa	c3		 ret	 0
_ADD_2WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_2WORDS_ADC PROC					; COMDAT

; 2185 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2186 : #ifdef _MSC_VER
; 2187 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADD_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2188 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADD_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2189 : #elif defined(__GNUC__)
; 2190 : #ifdef _M_IX86
; 2191 :     __asm__ volatile (
; 2192 :         "addb\t$-1, %0\n\t"
; 2193 :         "movl\t(%1), %%ecx\n\t"
; 2194 :         "adcl\t(%2), %%ecx\n\t"
; 2195 :         "movl\t%%ecx, (%3)\n\t"
; 2196 :         "movl\t4(%1), %%ecx\n\t"
; 2197 :         "adcl\t4(%2), %%ecx\n\t"
; 2198 :         "movl\t%%ecx, 4(%3)\n\t"
; 2199 :         "setc\t%0"
; 2200 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2201 :         :
; 2202 :         : "cc", "memory", "%ecx"
; 2203 : );
; 2204 : #elif defined(_M_X64)
; 2205 :     __asm__ volatile (
; 2206 :         "addb\t$-1, %0\n\t"
; 2207 :         "movq\t(%1), %%rcx\n\t"
; 2208 :         "adcq\t(%2), %%rcx\n\t"
; 2209 :         "movq\t%%rcx, (%3)\n\t"
; 2210 :         "movq\t8(%1), %%rcx\n\t"
; 2211 :         "adcq\t8(%2), %%rcx\n\t"
; 2212 :         "movq\t%%rcx, 8(%3)\n\t"
; 2213 :         "setc\t%0"
; 2214 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2215 :         :
; 2216 :         : "cc", "memory", "%rcx"
; 2217 : );
; 2218 : #else
; 2219 : #error unknown platform
; 2220 : #endif
; 2221 : #else
; 2222 : #error unknown compiler
; 2223 : #endif
; 2224 :     return (c);

  000ea	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 2225 : }

  000f1	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000f8	5f		 pop	 rdi
  000f9	5d		 pop	 rbp
  000fa	c3		 ret	 0
_ADD_2WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_4WORDS_ADCX PROC					; COMDAT

; 2014 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2015 : #ifdef _MSC_VER
; 2016 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADDX_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2017 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADDX_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2018 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADDX_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2019 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADDX_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2020 : #elif defined(__GNUC__)
; 2021 : #ifdef _M_IX86
; 2022 :     __asm__ volatile (
; 2023 :         "addb\t$-1, %0\n\t"
; 2024 :         "movl\t(%1), %%ecx\n\t"
; 2025 :         "adcxl\t(%2), %%ecx\n\t"
; 2026 :         "movl\t%%ecx, (%3)\n\t"
; 2027 :         "movl\t4(%1), %%ecx\n\t"
; 2028 :         "adcxl\t4(%2), %%ecx\n\t"
; 2029 :         "movl\t%%ecx, 4(%3)\n\t"
; 2030 :         "movl\t8(%1), %%ecx\n\t"
; 2031 :         "adcxl\t8(%2), %%ecx\n\t"
; 2032 :         "movl\t%%ecx, 8(%3)\n\t"
; 2033 :         "movl\t12(%1), %%ecx\n\t"
; 2034 :         "adcxl\t12(%2), %%ecx\n\t"
; 2035 :         "movl\t%%ecx, 12(%3)\n\t"
; 2036 :         "setc\t%0"
; 2037 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2038 :         :
; 2039 :         : "cc", "memory", "%ecx"
; 2040 : );
; 2041 : #elif defined(_M_X64)
; 2042 :     __asm__ volatile (
; 2043 :         "addb\t$-1, %0\n\t"
; 2044 :         "movq\t(%1), %%rcx\n\t"
; 2045 :         "adcxq\t(%2), %%rcx\n\t"
; 2046 :         "movq\t%%rcx, (%3)\n\t"
; 2047 :         "movq\t8(%1), %%rcx\n\t"
; 2048 :         "adcxq\t8(%2), %%rcx\n\t"
; 2049 :         "movq\t%%rcx, 8(%3)\n\t"
; 2050 :         "movq\t16(%1), %%rcx\n\t"
; 2051 :         "adcxq\t16(%2), %%rcx\n\t"
; 2052 :         "movq\t%%rcx, 16(%3)\n\t"
; 2053 :         "movq\t24(%1), %%rcx\n\t"
; 2054 :         "adcxq\t24(%2), %%rcx\n\t"
; 2055 :         "movq\t%%rcx, 24(%3)\n\t"
; 2056 :         "setc\t%0"
; 2057 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2058 :         :
; 2059 :         : "cc", "memory", "%rcx"
; 2060 : );
; 2061 : #else
; 2062 : #error unknown platform
; 2063 : #endif
; 2064 : #else
; 2065 : #error unknown compiler
; 2066 : #endif
; 2067 :     return (c);

  00190	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 2068 : }

  00197	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0019e	5f		 pop	 rdi
  0019f	5d		 pop	 rbp
  001a0	c3		 ret	 0
_ADD_4WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_4WORDS_ADC PROC					; COMDAT

; 1957 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1958 : #ifdef _MSC_VER
; 1959 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADD_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1960 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADD_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1961 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADD_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1962 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADD_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1963 : #elif defined(__GNUC__)
; 1964 : #ifdef _M_IX86
; 1965 :     __asm__ volatile (
; 1966 :         "addb\t$-1, %0\n\t"
; 1967 :         "movl\t(%1), %%ecx\n\t"
; 1968 :         "adcl\t(%2), %%ecx\n\t"
; 1969 :         "movl\t%%ecx, (%3)\n\t"
; 1970 :         "movl\t4(%1), %%ecx\n\t"
; 1971 :         "adcl\t4(%2), %%ecx\n\t"
; 1972 :         "movl\t%%ecx, 4(%3)\n\t"
; 1973 :         "movl\t8(%1), %%ecx\n\t"
; 1974 :         "adcl\t8(%2), %%ecx\n\t"
; 1975 :         "movl\t%%ecx, 8(%3)\n\t"
; 1976 :         "movl\t12(%1), %%ecx\n\t"
; 1977 :         "adcl\t12(%2), %%ecx\n\t"
; 1978 :         "movl\t%%ecx, 12(%3)\n\t"
; 1979 :         "setc\t%0"
; 1980 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1981 :         :
; 1982 :         : "cc", "memory", "%ecx"
; 1983 : );
; 1984 : #elif defined(_M_X64)
; 1985 :     __asm__ volatile (
; 1986 :         "addb\t$-1, %0\n\t"
; 1987 :         "movq\t(%1), %%rcx\n\t"
; 1988 :         "adcq\t(%2), %%rcx\n\t"
; 1989 :         "movq\t%%rcx, (%3)\n\t"
; 1990 :         "movq\t8(%1), %%rcx\n\t"
; 1991 :         "adcq\t8(%2), %%rcx\n\t"
; 1992 :         "movq\t%%rcx, 8(%3)\n\t"
; 1993 :         "movq\t16(%1), %%rcx\n\t"
; 1994 :         "adcq\t16(%2), %%rcx\n\t"
; 1995 :         "movq\t%%rcx, 16(%3)\n\t"
; 1996 :         "movq\t24(%1), %%rcx\n\t"
; 1997 :         "adcq\t24(%2), %%rcx\n\t"
; 1998 :         "movq\t%%rcx, 24(%3)\n\t"
; 1999 :         "setc\t%0"
; 2000 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2001 :         :
; 2002 :         : "cc", "memory", "%rcx"
; 2003 : );
; 2004 : #else
; 2005 : #error unknown platform
; 2006 : #endif
; 2007 : #else
; 2008 : #error unknown compiler
; 2009 : #endif
; 2010 :     return (c);

  00190	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 2011 : }

  00197	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0019e	5f		 pop	 rdi
  0019f	5d		 pop	 rbp
  001a0	c3		 ret	 0
_ADD_4WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_8WORDS_ADCX PROC					; COMDAT

; 1702 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1703 : #ifdef _MSC_VER
; 1704 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADDX_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1705 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADDX_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1706 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADDX_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1707 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADDX_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1708 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADDX_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1709 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADDX_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1710 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADDX_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1711 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADDX_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1712 : #elif defined(__GNUC__)
; 1713 : #ifdef _M_IX86
; 1714 :     __asm__ volatile (
; 1715 :         "addb\t$-1, %0\n\t"
; 1716 :         "movl\t(%1), %%ecx\n\t"
; 1717 :         "adcxl\t(%2), %%ecx\n\t"
; 1718 :         "movl\t%%ecx, (%3)\n\t"
; 1719 :         "movl\t4(%1), %%ecx\n\t"
; 1720 :         "adcxl\t4(%2), %%ecx\n\t"
; 1721 :         "movl\t%%ecx, 4(%3)\n\t"
; 1722 :         "movl\t8(%1), %%ecx\n\t"
; 1723 :         "adcxl\t8(%2), %%ecx\n\t"
; 1724 :         "movl\t%%ecx, 8(%3)\n\t"
; 1725 :         "movl\t12(%1), %%ecx\n\t"
; 1726 :         "adcxl\t12(%2), %%ecx\n\t"
; 1727 :         "movl\t%%ecx, 12(%3)\n\t"
; 1728 :         "movl\t16(%1), %%ecx\n\t"
; 1729 :         "adcxl\t16(%2), %%ecx\n\t"
; 1730 :         "movl\t%%ecx, 16(%3)\n\t"
; 1731 :         "movl\t20(%1), %%ecx\n\t"
; 1732 :         "adcxl\t20(%2), %%ecx\n\t"
; 1733 :         "movl\t%%ecx, 20(%3)\n\t"
; 1734 :         "movl\t24(%1), %%ecx\n\t"
; 1735 :         "adcxl\t24(%2), %%ecx\n\t"
; 1736 :         "movl\t%%ecx, 24(%3)\n\t"
; 1737 :         "movl\t28(%1), %%ecx\n\t"
; 1738 :         "adcxl\t28(%2), %%ecx\n\t"
; 1739 :         "movl\t%%ecx, 28(%3)\n\t"
; 1740 :         "setc\t%0"
; 1741 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1742 :         :
; 1743 :         : "cc", "memory", "%ecx"
; 1744 : );
; 1745 : #elif defined(_M_X64)
; 1746 :     __asm__ volatile (
; 1747 :         "addb\t$-1, %0\n\t"
; 1748 :         "movq\t(%1), %%rcx\n\t"
; 1749 :         "adcxq\t(%2), %%rcx\n\t"
; 1750 :         "movq\t%%rcx, (%3)\n\t"
; 1751 :         "movq\t8(%1), %%rcx\n\t"
; 1752 :         "adcxq\t8(%2), %%rcx\n\t"
; 1753 :         "movq\t%%rcx, 8(%3)\n\t"
; 1754 :         "movq\t16(%1), %%rcx\n\t"
; 1755 :         "adcxq\t16(%2), %%rcx\n\t"
; 1756 :         "movq\t%%rcx, 16(%3)\n\t"
; 1757 :         "movq\t24(%1), %%rcx\n\t"
; 1758 :         "adcxq\t24(%2), %%rcx\n\t"
; 1759 :         "movq\t%%rcx, 24(%3)\n\t"
; 1760 :         "movq\t32(%1), %%rcx\n\t"
; 1761 :         "adcxq\t32(%2), %%rcx\n\t"
; 1762 :         "movq\t%%rcx, 32(%3)\n\t"
; 1763 :         "movq\t40(%1), %%rcx\n\t"
; 1764 :         "adcxq\t40(%2), %%rcx\n\t"
; 1765 :         "movq\t%%rcx, 40(%3)\n\t"
; 1766 :         "movq\t48(%1), %%rcx\n\t"
; 1767 :         "adcxq\t48(%2), %%rcx\n\t"
; 1768 :         "movq\t%%rcx, 48(%3)\n\t"
; 1769 :         "movq\t56(%1), %%rcx\n\t"
; 1770 :         "adcxq\t56(%2), %%rcx\n\t"
; 1771 :         "movq\t%%rcx, 56(%3)\n\t"
; 1772 :         "setc\t%0"
; 1773 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1774 :         :
; 1775 :         : "cc", "memory", "%rcx"
; 1776 : );
; 1777 : #else
; 1778 : #error unknown platform
; 1779 : #endif
; 1780 : #else
; 1781 : #error unknown compiler
; 1782 : #endif
; 1783 :     return (c);

  002dc	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 1784 : }

  002e3	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  002ea	5f		 pop	 rdi
  002eb	5d		 pop	 rbp
  002ec	c3		 ret	 0
_ADD_8WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_8WORDS_ADC PROC					; COMDAT

; 1617 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1618 : #ifdef _MSC_VER
; 1619 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADD_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1620 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADD_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1621 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADD_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1622 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADD_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1623 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADD_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1624 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADD_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1625 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADD_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1626 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADD_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1627 : #elif defined(__GNUC__)
; 1628 : #ifdef _M_IX86
; 1629 :     __asm__ volatile (
; 1630 :         "addb\t$-1, %0\n\t"
; 1631 :         "movl\t(%1), %%ecx\n\t"
; 1632 :         "adcl\t(%2), %%ecx\n\t"
; 1633 :         "movl\t%%ecx, (%3)\n\t"
; 1634 :         "movl\t4(%1), %%ecx\n\t"
; 1635 :         "adcl\t4(%2), %%ecx\n\t"
; 1636 :         "movl\t%%ecx, 4(%3)\n\t"
; 1637 :         "movl\t8(%1), %%ecx\n\t"
; 1638 :         "adcl\t8(%2), %%ecx\n\t"
; 1639 :         "movl\t%%ecx, 8(%3)\n\t"
; 1640 :         "movl\t12(%1), %%ecx\n\t"
; 1641 :         "adcl\t12(%2), %%ecx\n\t"
; 1642 :         "movl\t%%ecx, 12(%3)\n\t"
; 1643 :         "movl\t16(%1), %%ecx\n\t"
; 1644 :         "adcl\t16(%2), %%ecx\n\t"
; 1645 :         "movl\t%%ecx, 16(%3)\n\t"
; 1646 :         "movl\t20(%1), %%ecx\n\t"
; 1647 :         "adcl\t20(%2), %%ecx\n\t"
; 1648 :         "movl\t%%ecx, 20(%3)\n\t"
; 1649 :         "movl\t24(%1), %%ecx\n\t"
; 1650 :         "adcl\t24(%2), %%ecx\n\t"
; 1651 :         "movl\t%%ecx, 24(%3)\n\t"
; 1652 :         "movl\t28(%1), %%ecx\n\t"
; 1653 :         "adcl\t28(%2), %%ecx\n\t"
; 1654 :         "movl\t%%ecx, 28(%3)\n\t"
; 1655 :         "setc\t%0"
; 1656 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1657 :         :
; 1658 :         : "cc", "memory", "%ecx"
; 1659 : );
; 1660 : #elif defined(_M_X64)
; 1661 :     __asm__ volatile (
; 1662 :         "addb\t$-1, %0\n\t"
; 1663 :         "movq\t(%1), %%rcx\n\t"
; 1664 :         "adcq\t(%2), %%rcx\n\t"
; 1665 :         "movq\t%%rcx, (%3)\n\t"
; 1666 :         "movq\t8(%1), %%rcx\n\t"
; 1667 :         "adcq\t8(%2), %%rcx\n\t"
; 1668 :         "movq\t%%rcx, 8(%3)\n\t"
; 1669 :         "movq\t16(%1), %%rcx\n\t"
; 1670 :         "adcq\t16(%2), %%rcx\n\t"
; 1671 :         "movq\t%%rcx, 16(%3)\n\t"
; 1672 :         "movq\t24(%1), %%rcx\n\t"
; 1673 :         "adcq\t24(%2), %%rcx\n\t"
; 1674 :         "movq\t%%rcx, 24(%3)\n\t"
; 1675 :         "movq\t32(%1), %%rcx\n\t"
; 1676 :         "adcq\t32(%2), %%rcx\n\t"
; 1677 :         "movq\t%%rcx, 32(%3)\n\t"
; 1678 :         "movq\t40(%1), %%rcx\n\t"
; 1679 :         "adcq\t40(%2), %%rcx\n\t"
; 1680 :         "movq\t%%rcx, 40(%3)\n\t"
; 1681 :         "movq\t48(%1), %%rcx\n\t"
; 1682 :         "adcq\t48(%2), %%rcx\n\t"
; 1683 :         "movq\t%%rcx, 48(%3)\n\t"
; 1684 :         "movq\t56(%1), %%rcx\n\t"
; 1685 :         "adcq\t56(%2), %%rcx\n\t"
; 1686 :         "movq\t%%rcx, 56(%3)\n\t"
; 1687 :         "setc\t%0"
; 1688 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1689 :         :
; 1690 :         : "cc", "memory", "%rcx"
; 1691 : );
; 1692 : #else
; 1693 : #error unknown platform
; 1694 : #endif
; 1695 : #else
; 1696 : #error unknown compiler
; 1697 : #endif
; 1698 :     return (c);

  002dc	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 1699 : }

  002e3	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  002ea	5f		 pop	 rdi
  002eb	5d		 pop	 rbp
  002ec	c3		 ret	 0
_ADD_8WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_16WORDS_ADCX PROC					; COMDAT

; 1194 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1195 : #ifdef _MSC_VER
; 1196 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADDX_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1197 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADDX_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1198 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADDX_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1199 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADDX_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1200 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADDX_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1201 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADDX_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1202 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADDX_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1203 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADDX_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1204 :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  002dc	b8 08 00 00 00	 mov	 eax, 8
  002e1	48 6b c0 08	 imul	 rax, rax, 8
  002e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  002ec	48 03 c8	 add	 rcx, rax
  002ef	48 8b c1	 mov	 rax, rcx
  002f2	b9 08 00 00 00	 mov	 ecx, 8
  002f7	48 6b c9 08	 imul	 rcx, rcx, 8
  002fb	ba 08 00 00 00	 mov	 edx, 8
  00300	48 6b d2 08	 imul	 rdx, rdx, 8
  00304	4c 8b c8	 mov	 r9, rax
  00307	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0030e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00312	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00319	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0031d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00324	e8 00 00 00 00	 call	 _ADDX_UNIT
  00329	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1205 :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  0032f	b8 08 00 00 00	 mov	 eax, 8
  00334	48 6b c0 09	 imul	 rax, rax, 9
  00338	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0033f	48 03 c8	 add	 rcx, rax
  00342	48 8b c1	 mov	 rax, rcx
  00345	b9 08 00 00 00	 mov	 ecx, 8
  0034a	48 6b c9 09	 imul	 rcx, rcx, 9
  0034e	ba 08 00 00 00	 mov	 edx, 8
  00353	48 6b d2 09	 imul	 rdx, rdx, 9
  00357	4c 8b c8	 mov	 r9, rax
  0035a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00361	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00365	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0036c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00370	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00377	e8 00 00 00 00	 call	 _ADDX_UNIT
  0037c	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1206 :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  00382	b8 08 00 00 00	 mov	 eax, 8
  00387	48 6b c0 0a	 imul	 rax, rax, 10
  0038b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00392	48 03 c8	 add	 rcx, rax
  00395	48 8b c1	 mov	 rax, rcx
  00398	b9 08 00 00 00	 mov	 ecx, 8
  0039d	48 6b c9 0a	 imul	 rcx, rcx, 10
  003a1	ba 08 00 00 00	 mov	 edx, 8
  003a6	48 6b d2 0a	 imul	 rdx, rdx, 10
  003aa	4c 8b c8	 mov	 r9, rax
  003ad	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  003b4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  003b8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  003bf	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  003c3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  003ca	e8 00 00 00 00	 call	 _ADDX_UNIT
  003cf	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1207 :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  003d5	b8 08 00 00 00	 mov	 eax, 8
  003da	48 6b c0 0b	 imul	 rax, rax, 11
  003de	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  003e5	48 03 c8	 add	 rcx, rax
  003e8	48 8b c1	 mov	 rax, rcx
  003eb	b9 08 00 00 00	 mov	 ecx, 8
  003f0	48 6b c9 0b	 imul	 rcx, rcx, 11
  003f4	ba 08 00 00 00	 mov	 edx, 8
  003f9	48 6b d2 0b	 imul	 rdx, rdx, 11
  003fd	4c 8b c8	 mov	 r9, rax
  00400	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00407	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0040b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00412	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00416	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0041d	e8 00 00 00 00	 call	 _ADDX_UNIT
  00422	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1208 :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  00428	b8 08 00 00 00	 mov	 eax, 8
  0042d	48 6b c0 0c	 imul	 rax, rax, 12
  00431	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00438	48 03 c8	 add	 rcx, rax
  0043b	48 8b c1	 mov	 rax, rcx
  0043e	b9 08 00 00 00	 mov	 ecx, 8
  00443	48 6b c9 0c	 imul	 rcx, rcx, 12
  00447	ba 08 00 00 00	 mov	 edx, 8
  0044c	48 6b d2 0c	 imul	 rdx, rdx, 12
  00450	4c 8b c8	 mov	 r9, rax
  00453	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0045a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0045e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00465	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00469	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00470	e8 00 00 00 00	 call	 _ADDX_UNIT
  00475	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1209 :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 0d	 imul	 rax, rax, 13
  00484	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0048b	48 03 c8	 add	 rcx, rax
  0048e	48 8b c1	 mov	 rax, rcx
  00491	b9 08 00 00 00	 mov	 ecx, 8
  00496	48 6b c9 0d	 imul	 rcx, rcx, 13
  0049a	ba 08 00 00 00	 mov	 edx, 8
  0049f	48 6b d2 0d	 imul	 rdx, rdx, 13
  004a3	4c 8b c8	 mov	 r9, rax
  004a6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  004ad	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  004b1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  004b8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  004bc	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  004c3	e8 00 00 00 00	 call	 _ADDX_UNIT
  004c8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1210 :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  004ce	b8 08 00 00 00	 mov	 eax, 8
  004d3	48 6b c0 0e	 imul	 rax, rax, 14
  004d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  004de	48 03 c8	 add	 rcx, rax
  004e1	48 8b c1	 mov	 rax, rcx
  004e4	b9 08 00 00 00	 mov	 ecx, 8
  004e9	48 6b c9 0e	 imul	 rcx, rcx, 14
  004ed	ba 08 00 00 00	 mov	 edx, 8
  004f2	48 6b d2 0e	 imul	 rdx, rdx, 14
  004f6	4c 8b c8	 mov	 r9, rax
  004f9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00500	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00504	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0050b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0050f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00516	e8 00 00 00 00	 call	 _ADDX_UNIT
  0051b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1211 :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  00521	b8 08 00 00 00	 mov	 eax, 8
  00526	48 6b c0 0f	 imul	 rax, rax, 15
  0052a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00531	48 03 c8	 add	 rcx, rax
  00534	48 8b c1	 mov	 rax, rcx
  00537	b9 08 00 00 00	 mov	 ecx, 8
  0053c	48 6b c9 0f	 imul	 rcx, rcx, 15
  00540	ba 08 00 00 00	 mov	 edx, 8
  00545	48 6b d2 0f	 imul	 rdx, rdx, 15
  00549	4c 8b c8	 mov	 r9, rax
  0054c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00553	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00557	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0055e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00562	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00569	e8 00 00 00 00	 call	 _ADDX_UNIT
  0056e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1212 : #elif defined(__GNUC__)
; 1213 : #ifdef _M_IX86
; 1214 :     __asm__ volatile (
; 1215 :         "addb\t$-1, %0\n\t"
; 1216 :         "movl\t(%1), %%ecx\n\t"
; 1217 :         "adcxl\t(%2), %%ecx\n\t"
; 1218 :         "movl\t%%ecx, (%3)\n\t"
; 1219 :         "movl\t4(%1), %%ecx\n\t"
; 1220 :         "adcxl\t4(%2), %%ecx\n\t"
; 1221 :         "movl\t%%ecx, 4(%3)\n\t"
; 1222 :         "movl\t8(%1), %%ecx\n\t"
; 1223 :         "adcxl\t8(%2), %%ecx\n\t"
; 1224 :         "movl\t%%ecx, 8(%3)\n\t"
; 1225 :         "movl\t12(%1), %%ecx\n\t"
; 1226 :         "adcxl\t12(%2), %%ecx\n\t"
; 1227 :         "movl\t%%ecx, 12(%3)\n\t"
; 1228 :         "movl\t16(%1), %%ecx\n\t"
; 1229 :         "adcxl\t16(%2), %%ecx\n\t"
; 1230 :         "movl\t%%ecx, 16(%3)\n\t"
; 1231 :         "movl\t20(%1), %%ecx\n\t"
; 1232 :         "adcxl\t20(%2), %%ecx\n\t"
; 1233 :         "movl\t%%ecx, 20(%3)\n\t"
; 1234 :         "movl\t24(%1), %%ecx\n\t"
; 1235 :         "adcxl\t24(%2), %%ecx\n\t"
; 1236 :         "movl\t%%ecx, 24(%3)\n\t"
; 1237 :         "movl\t28(%1), %%ecx\n\t"
; 1238 :         "adcxl\t28(%2), %%ecx\n\t"
; 1239 :         "movl\t%%ecx, 28(%3)\n\t"
; 1240 :         "movl\t32(%1), %%ecx\n\t"
; 1241 :         "adcxl\t32(%2), %%ecx\n\t"
; 1242 :         "movl\t%%ecx, 32(%3)\n\t"
; 1243 :         "movl\t36(%1), %%ecx\n\t"
; 1244 :         "adcxl\t36(%2), %%ecx\n\t"
; 1245 :         "movl\t%%ecx, 36(%3)\n\t"
; 1246 :         "movl\t40(%1), %%ecx\n\t"
; 1247 :         "adcxl\t40(%2), %%ecx\n\t"
; 1248 :         "movl\t%%ecx, 40(%3)\n\t"
; 1249 :         "movl\t44(%1), %%ecx\n\t"
; 1250 :         "adcxl\t44(%2), %%ecx\n\t"
; 1251 :         "movl\t%%ecx, 44(%3)\n\t"
; 1252 :         "movl\t48(%1), %%ecx\n\t"
; 1253 :         "adcxl\t48(%2), %%ecx\n\t"
; 1254 :         "movl\t%%ecx, 48(%3)\n\t"
; 1255 :         "movl\t52(%1), %%ecx\n\t"
; 1256 :         "adcxl\t52(%2), %%ecx\n\t"
; 1257 :         "movl\t%%ecx, 52(%3)\n\t"
; 1258 :         "movl\t56(%1), %%ecx\n\t"
; 1259 :         "adcxl\t56(%2), %%ecx\n\t"
; 1260 :         "movl\t%%ecx, 56(%3)\n\t"
; 1261 :         "movl\t60(%1), %%ecx\n\t"
; 1262 :         "adcxl\t60(%2), %%ecx\n\t"
; 1263 :         "movl\t%%ecx, 60(%3)\n\t"
; 1264 :         "setc\t%0"
; 1265 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1266 :         :
; 1267 :         : "cc", "memory", "%ecx"
; 1268 : );
; 1269 : #elif defined(_M_X64)
; 1270 :     __asm__ volatile (
; 1271 :         "addb\t$-1, %0\n\t"
; 1272 :         "movq\t(%1), %%rcx\n\t"
; 1273 :         "adcxq\t(%2), %%rcx\n\t"
; 1274 :         "movq\t%%rcx, (%3)\n\t"
; 1275 :         "movq\t8(%1), %%rcx\n\t"
; 1276 :         "adcxq\t8(%2), %%rcx\n\t"
; 1277 :         "movq\t%%rcx, 8(%3)\n\t"
; 1278 :         "movq\t16(%1), %%rcx\n\t"
; 1279 :         "adcxq\t16(%2), %%rcx\n\t"
; 1280 :         "movq\t%%rcx, 16(%3)\n\t"
; 1281 :         "movq\t24(%1), %%rcx\n\t"
; 1282 :         "adcxq\t24(%2), %%rcx\n\t"
; 1283 :         "movq\t%%rcx, 24(%3)\n\t"
; 1284 :         "movq\t32(%1), %%rcx\n\t"
; 1285 :         "adcxq\t32(%2), %%rcx\n\t"
; 1286 :         "movq\t%%rcx, 32(%3)\n\t"
; 1287 :         "movq\t40(%1), %%rcx\n\t"
; 1288 :         "adcxq\t40(%2), %%rcx\n\t"
; 1289 :         "movq\t%%rcx, 40(%3)\n\t"
; 1290 :         "movq\t48(%1), %%rcx\n\t"
; 1291 :         "adcxq\t48(%2), %%rcx\n\t"
; 1292 :         "movq\t%%rcx, 48(%3)\n\t"
; 1293 :         "movq\t56(%1), %%rcx\n\t"
; 1294 :         "adcxq\t56(%2), %%rcx\n\t"
; 1295 :         "movq\t%%rcx, 56(%3)\n\t"
; 1296 :         "movq\t64(%1), %%rcx\n\t"
; 1297 :         "adcxq\t64(%2), %%rcx\n\t"
; 1298 :         "movq\t%%rcx, 64(%3)\n\t"
; 1299 :         "movq\t72(%1), %%rcx\n\t"
; 1300 :         "adcxq\t72(%2), %%rcx\n\t"
; 1301 :         "movq\t%%rcx, 72(%3)\n\t"
; 1302 :         "movq\t80(%1), %%rcx\n\t"
; 1303 :         "adcxq\t80(%2), %%rcx\n\t"
; 1304 :         "movq\t%%rcx, 80(%3)\n\t"
; 1305 :         "movq\t88(%1), %%rcx\n\t"
; 1306 :         "adcxq\t88(%2), %%rcx\n\t"
; 1307 :         "movq\t%%rcx, 88(%3)\n\t"
; 1308 :         "movq\t96(%1), %%rcx\n\t"
; 1309 :         "adcxq\t96(%2), %%rcx\n\t"
; 1310 :         "movq\t%%rcx, 96(%3)\n\t"
; 1311 :         "movq\t104(%1), %%rcx\n\t"
; 1312 :         "adcxq\t104(%2), %%rcx\n\t"
; 1313 :         "movq\t%%rcx, 104(%3)\n\t"
; 1314 :         "movq\t112(%1), %%rcx\n\t"
; 1315 :         "adcxq\t112(%2), %%rcx\n\t"
; 1316 :         "movq\t%%rcx, 112(%3)\n\t"
; 1317 :         "movq\t120(%1), %%rcx\n\t"
; 1318 :         "adcxq\t120(%2), %%rcx\n\t"
; 1319 :         "movq\t%%rcx, 120(%3)\n\t"
; 1320 :         "setc\t%0"
; 1321 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1322 :         :
; 1323 :         : "cc", "memory", "%rcx"
; 1324 : );
; 1325 : #else
; 1326 : #error unknown platform
; 1327 : #endif
; 1328 : #else
; 1329 : #error unknown compiler
; 1330 : #endif
; 1331 :     return (c);

  00574	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 1332 : }

  0057b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00582	5f		 pop	 rdi
  00583	5d		 pop	 rbp
  00584	c3		 ret	 0
_ADD_16WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_16WORDS_ADC PROC					; COMDAT

; 1053 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1054 : #ifdef _MSC_VER
; 1055 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADD_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1056 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADD_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1057 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADD_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1058 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADD_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1059 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADD_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1060 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADD_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1061 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADD_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1062 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADD_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1063 :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  002dc	b8 08 00 00 00	 mov	 eax, 8
  002e1	48 6b c0 08	 imul	 rax, rax, 8
  002e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  002ec	48 03 c8	 add	 rcx, rax
  002ef	48 8b c1	 mov	 rax, rcx
  002f2	b9 08 00 00 00	 mov	 ecx, 8
  002f7	48 6b c9 08	 imul	 rcx, rcx, 8
  002fb	ba 08 00 00 00	 mov	 edx, 8
  00300	48 6b d2 08	 imul	 rdx, rdx, 8
  00304	4c 8b c8	 mov	 r9, rax
  00307	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0030e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00312	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00319	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0031d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00324	e8 00 00 00 00	 call	 _ADD_UNIT
  00329	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1064 :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  0032f	b8 08 00 00 00	 mov	 eax, 8
  00334	48 6b c0 09	 imul	 rax, rax, 9
  00338	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0033f	48 03 c8	 add	 rcx, rax
  00342	48 8b c1	 mov	 rax, rcx
  00345	b9 08 00 00 00	 mov	 ecx, 8
  0034a	48 6b c9 09	 imul	 rcx, rcx, 9
  0034e	ba 08 00 00 00	 mov	 edx, 8
  00353	48 6b d2 09	 imul	 rdx, rdx, 9
  00357	4c 8b c8	 mov	 r9, rax
  0035a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00361	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00365	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0036c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00370	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00377	e8 00 00 00 00	 call	 _ADD_UNIT
  0037c	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1065 :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  00382	b8 08 00 00 00	 mov	 eax, 8
  00387	48 6b c0 0a	 imul	 rax, rax, 10
  0038b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00392	48 03 c8	 add	 rcx, rax
  00395	48 8b c1	 mov	 rax, rcx
  00398	b9 08 00 00 00	 mov	 ecx, 8
  0039d	48 6b c9 0a	 imul	 rcx, rcx, 10
  003a1	ba 08 00 00 00	 mov	 edx, 8
  003a6	48 6b d2 0a	 imul	 rdx, rdx, 10
  003aa	4c 8b c8	 mov	 r9, rax
  003ad	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  003b4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  003b8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  003bf	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  003c3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  003ca	e8 00 00 00 00	 call	 _ADD_UNIT
  003cf	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1066 :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  003d5	b8 08 00 00 00	 mov	 eax, 8
  003da	48 6b c0 0b	 imul	 rax, rax, 11
  003de	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  003e5	48 03 c8	 add	 rcx, rax
  003e8	48 8b c1	 mov	 rax, rcx
  003eb	b9 08 00 00 00	 mov	 ecx, 8
  003f0	48 6b c9 0b	 imul	 rcx, rcx, 11
  003f4	ba 08 00 00 00	 mov	 edx, 8
  003f9	48 6b d2 0b	 imul	 rdx, rdx, 11
  003fd	4c 8b c8	 mov	 r9, rax
  00400	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00407	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0040b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00412	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00416	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0041d	e8 00 00 00 00	 call	 _ADD_UNIT
  00422	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1067 :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  00428	b8 08 00 00 00	 mov	 eax, 8
  0042d	48 6b c0 0c	 imul	 rax, rax, 12
  00431	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00438	48 03 c8	 add	 rcx, rax
  0043b	48 8b c1	 mov	 rax, rcx
  0043e	b9 08 00 00 00	 mov	 ecx, 8
  00443	48 6b c9 0c	 imul	 rcx, rcx, 12
  00447	ba 08 00 00 00	 mov	 edx, 8
  0044c	48 6b d2 0c	 imul	 rdx, rdx, 12
  00450	4c 8b c8	 mov	 r9, rax
  00453	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0045a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0045e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00465	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00469	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00470	e8 00 00 00 00	 call	 _ADD_UNIT
  00475	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1068 :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 0d	 imul	 rax, rax, 13
  00484	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0048b	48 03 c8	 add	 rcx, rax
  0048e	48 8b c1	 mov	 rax, rcx
  00491	b9 08 00 00 00	 mov	 ecx, 8
  00496	48 6b c9 0d	 imul	 rcx, rcx, 13
  0049a	ba 08 00 00 00	 mov	 edx, 8
  0049f	48 6b d2 0d	 imul	 rdx, rdx, 13
  004a3	4c 8b c8	 mov	 r9, rax
  004a6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  004ad	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  004b1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  004b8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  004bc	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  004c3	e8 00 00 00 00	 call	 _ADD_UNIT
  004c8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1069 :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  004ce	b8 08 00 00 00	 mov	 eax, 8
  004d3	48 6b c0 0e	 imul	 rax, rax, 14
  004d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  004de	48 03 c8	 add	 rcx, rax
  004e1	48 8b c1	 mov	 rax, rcx
  004e4	b9 08 00 00 00	 mov	 ecx, 8
  004e9	48 6b c9 0e	 imul	 rcx, rcx, 14
  004ed	ba 08 00 00 00	 mov	 edx, 8
  004f2	48 6b d2 0e	 imul	 rdx, rdx, 14
  004f6	4c 8b c8	 mov	 r9, rax
  004f9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00500	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00504	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0050b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0050f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00516	e8 00 00 00 00	 call	 _ADD_UNIT
  0051b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1070 :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  00521	b8 08 00 00 00	 mov	 eax, 8
  00526	48 6b c0 0f	 imul	 rax, rax, 15
  0052a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00531	48 03 c8	 add	 rcx, rax
  00534	48 8b c1	 mov	 rax, rcx
  00537	b9 08 00 00 00	 mov	 ecx, 8
  0053c	48 6b c9 0f	 imul	 rcx, rcx, 15
  00540	ba 08 00 00 00	 mov	 edx, 8
  00545	48 6b d2 0f	 imul	 rdx, rdx, 15
  00549	4c 8b c8	 mov	 r9, rax
  0054c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00553	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00557	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0055e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00562	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00569	e8 00 00 00 00	 call	 _ADD_UNIT
  0056e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1071 : #elif defined(__GNUC__)
; 1072 : #ifdef _M_IX86
; 1073 :     __asm__ volatile (
; 1074 :         "addb\t$-1, %0\n\t"
; 1075 :         "movl\t(%1), %%ecx\n\t"
; 1076 :         "adcl\t(%2), %%ecx\n\t"
; 1077 :         "movl\t%%ecx, (%3)\n\t"
; 1078 :         "movl\t4(%1), %%ecx\n\t"
; 1079 :         "adcl\t4(%2), %%ecx\n\t"
; 1080 :         "movl\t%%ecx, 4(%3)\n\t"
; 1081 :         "movl\t8(%1), %%ecx\n\t"
; 1082 :         "adcl\t8(%2), %%ecx\n\t"
; 1083 :         "movl\t%%ecx, 8(%3)\n\t"
; 1084 :         "movl\t12(%1), %%ecx\n\t"
; 1085 :         "adcl\t12(%2), %%ecx\n\t"
; 1086 :         "movl\t%%ecx, 12(%3)\n\t"
; 1087 :         "movl\t16(%1), %%ecx\n\t"
; 1088 :         "adcl\t16(%2), %%ecx\n\t"
; 1089 :         "movl\t%%ecx, 16(%3)\n\t"
; 1090 :         "movl\t20(%1), %%ecx\n\t"
; 1091 :         "adcl\t20(%2), %%ecx\n\t"
; 1092 :         "movl\t%%ecx, 20(%3)\n\t"
; 1093 :         "movl\t24(%1), %%ecx\n\t"
; 1094 :         "adcl\t24(%2), %%ecx\n\t"
; 1095 :         "movl\t%%ecx, 24(%3)\n\t"
; 1096 :         "movl\t28(%1), %%ecx\n\t"
; 1097 :         "adcl\t28(%2), %%ecx\n\t"
; 1098 :         "movl\t%%ecx, 28(%3)\n\t"
; 1099 :         "movl\t32(%1), %%ecx\n\t"
; 1100 :         "adcl\t32(%2), %%ecx\n\t"
; 1101 :         "movl\t%%ecx, 32(%3)\n\t"
; 1102 :         "movl\t36(%1), %%ecx\n\t"
; 1103 :         "adcl\t36(%2), %%ecx\n\t"
; 1104 :         "movl\t%%ecx, 36(%3)\n\t"
; 1105 :         "movl\t40(%1), %%ecx\n\t"
; 1106 :         "adcl\t40(%2), %%ecx\n\t"
; 1107 :         "movl\t%%ecx, 40(%3)\n\t"
; 1108 :         "movl\t44(%1), %%ecx\n\t"
; 1109 :         "adcl\t44(%2), %%ecx\n\t"
; 1110 :         "movl\t%%ecx, 44(%3)\n\t"
; 1111 :         "movl\t48(%1), %%ecx\n\t"
; 1112 :         "adcl\t48(%2), %%ecx\n\t"
; 1113 :         "movl\t%%ecx, 48(%3)\n\t"
; 1114 :         "movl\t52(%1), %%ecx\n\t"
; 1115 :         "adcl\t52(%2), %%ecx\n\t"
; 1116 :         "movl\t%%ecx, 52(%3)\n\t"
; 1117 :         "movl\t56(%1), %%ecx\n\t"
; 1118 :         "adcl\t56(%2), %%ecx\n\t"
; 1119 :         "movl\t%%ecx, 56(%3)\n\t"
; 1120 :         "movl\t60(%1), %%ecx\n\t"
; 1121 :         "adcl\t60(%2), %%ecx\n\t"
; 1122 :         "movl\t%%ecx, 60(%3)\n\t"
; 1123 :         "setc\t%0"
; 1124 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1125 :         :
; 1126 :         : "cc", "memory", "%ecx"
; 1127 : );
; 1128 : #elif defined(_M_X64)
; 1129 :     __asm__ volatile (
; 1130 :         "addb\t$-1, %0\n\t"
; 1131 :         "movq\t(%1), %%rcx\n\t"
; 1132 :         "adcq\t(%2), %%rcx\n\t"
; 1133 :         "movq\t%%rcx, (%3)\n\t"
; 1134 :         "movq\t8(%1), %%rcx\n\t"
; 1135 :         "adcq\t8(%2), %%rcx\n\t"
; 1136 :         "movq\t%%rcx, 8(%3)\n\t"
; 1137 :         "movq\t16(%1), %%rcx\n\t"
; 1138 :         "adcq\t16(%2), %%rcx\n\t"
; 1139 :         "movq\t%%rcx, 16(%3)\n\t"
; 1140 :         "movq\t24(%1), %%rcx\n\t"
; 1141 :         "adcq\t24(%2), %%rcx\n\t"
; 1142 :         "movq\t%%rcx, 24(%3)\n\t"
; 1143 :         "movq\t32(%1), %%rcx\n\t"
; 1144 :         "adcq\t32(%2), %%rcx\n\t"
; 1145 :         "movq\t%%rcx, 32(%3)\n\t"
; 1146 :         "movq\t40(%1), %%rcx\n\t"
; 1147 :         "adcq\t40(%2), %%rcx\n\t"
; 1148 :         "movq\t%%rcx, 40(%3)\n\t"
; 1149 :         "movq\t48(%1), %%rcx\n\t"
; 1150 :         "adcq\t48(%2), %%rcx\n\t"
; 1151 :         "movq\t%%rcx, 48(%3)\n\t"
; 1152 :         "movq\t56(%1), %%rcx\n\t"
; 1153 :         "adcq\t56(%2), %%rcx\n\t"
; 1154 :         "movq\t%%rcx, 56(%3)\n\t"
; 1155 :         "movq\t64(%1), %%rcx\n\t"
; 1156 :         "adcq\t64(%2), %%rcx\n\t"
; 1157 :         "movq\t%%rcx, 64(%3)\n\t"
; 1158 :         "movq\t72(%1), %%rcx\n\t"
; 1159 :         "adcq\t72(%2), %%rcx\n\t"
; 1160 :         "movq\t%%rcx, 72(%3)\n\t"
; 1161 :         "movq\t80(%1), %%rcx\n\t"
; 1162 :         "adcq\t80(%2), %%rcx\n\t"
; 1163 :         "movq\t%%rcx, 80(%3)\n\t"
; 1164 :         "movq\t88(%1), %%rcx\n\t"
; 1165 :         "adcq\t88(%2), %%rcx\n\t"
; 1166 :         "movq\t%%rcx, 88(%3)\n\t"
; 1167 :         "movq\t96(%1), %%rcx\n\t"
; 1168 :         "adcq\t96(%2), %%rcx\n\t"
; 1169 :         "movq\t%%rcx, 96(%3)\n\t"
; 1170 :         "movq\t104(%1), %%rcx\n\t"
; 1171 :         "adcq\t104(%2), %%rcx\n\t"
; 1172 :         "movq\t%%rcx, 104(%3)\n\t"
; 1173 :         "movq\t112(%1), %%rcx\n\t"
; 1174 :         "adcq\t112(%2), %%rcx\n\t"
; 1175 :         "movq\t%%rcx, 112(%3)\n\t"
; 1176 :         "movq\t120(%1), %%rcx\n\t"
; 1177 :         "adcq\t120(%2), %%rcx\n\t"
; 1178 :         "movq\t%%rcx, 120(%3)\n\t"
; 1179 :         "setc\t%0"
; 1180 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1181 :         :
; 1182 :         : "cc", "memory", "%rcx"
; 1183 : );
; 1184 : #else
; 1185 : #error unknown platform
; 1186 : #endif
; 1187 : #else
; 1188 : #error unknown compiler
; 1189 : #endif
; 1190 :     return (c);

  00574	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 1191 : }

  0057b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00582	5f		 pop	 rdi
  00583	5d		 pop	 rbp
  00584	c3		 ret	 0
_ADD_16WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_32WORDS_ADCX PROC					; COMDAT

; 294  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 295  : #ifdef _MSC_VER
; 296  :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADDX_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 297  :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADDX_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 298  :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADDX_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 299  :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADDX_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 300  :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADDX_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 301  :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADDX_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 302  :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADDX_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 303  :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADDX_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 304  :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  002dc	b8 08 00 00 00	 mov	 eax, 8
  002e1	48 6b c0 08	 imul	 rax, rax, 8
  002e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  002ec	48 03 c8	 add	 rcx, rax
  002ef	48 8b c1	 mov	 rax, rcx
  002f2	b9 08 00 00 00	 mov	 ecx, 8
  002f7	48 6b c9 08	 imul	 rcx, rcx, 8
  002fb	ba 08 00 00 00	 mov	 edx, 8
  00300	48 6b d2 08	 imul	 rdx, rdx, 8
  00304	4c 8b c8	 mov	 r9, rax
  00307	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0030e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00312	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00319	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0031d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00324	e8 00 00 00 00	 call	 _ADDX_UNIT
  00329	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 305  :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  0032f	b8 08 00 00 00	 mov	 eax, 8
  00334	48 6b c0 09	 imul	 rax, rax, 9
  00338	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0033f	48 03 c8	 add	 rcx, rax
  00342	48 8b c1	 mov	 rax, rcx
  00345	b9 08 00 00 00	 mov	 ecx, 8
  0034a	48 6b c9 09	 imul	 rcx, rcx, 9
  0034e	ba 08 00 00 00	 mov	 edx, 8
  00353	48 6b d2 09	 imul	 rdx, rdx, 9
  00357	4c 8b c8	 mov	 r9, rax
  0035a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00361	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00365	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0036c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00370	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00377	e8 00 00 00 00	 call	 _ADDX_UNIT
  0037c	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 306  :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  00382	b8 08 00 00 00	 mov	 eax, 8
  00387	48 6b c0 0a	 imul	 rax, rax, 10
  0038b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00392	48 03 c8	 add	 rcx, rax
  00395	48 8b c1	 mov	 rax, rcx
  00398	b9 08 00 00 00	 mov	 ecx, 8
  0039d	48 6b c9 0a	 imul	 rcx, rcx, 10
  003a1	ba 08 00 00 00	 mov	 edx, 8
  003a6	48 6b d2 0a	 imul	 rdx, rdx, 10
  003aa	4c 8b c8	 mov	 r9, rax
  003ad	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  003b4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  003b8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  003bf	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  003c3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  003ca	e8 00 00 00 00	 call	 _ADDX_UNIT
  003cf	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 307  :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  003d5	b8 08 00 00 00	 mov	 eax, 8
  003da	48 6b c0 0b	 imul	 rax, rax, 11
  003de	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  003e5	48 03 c8	 add	 rcx, rax
  003e8	48 8b c1	 mov	 rax, rcx
  003eb	b9 08 00 00 00	 mov	 ecx, 8
  003f0	48 6b c9 0b	 imul	 rcx, rcx, 11
  003f4	ba 08 00 00 00	 mov	 edx, 8
  003f9	48 6b d2 0b	 imul	 rdx, rdx, 11
  003fd	4c 8b c8	 mov	 r9, rax
  00400	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00407	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0040b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00412	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00416	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0041d	e8 00 00 00 00	 call	 _ADDX_UNIT
  00422	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 308  :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  00428	b8 08 00 00 00	 mov	 eax, 8
  0042d	48 6b c0 0c	 imul	 rax, rax, 12
  00431	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00438	48 03 c8	 add	 rcx, rax
  0043b	48 8b c1	 mov	 rax, rcx
  0043e	b9 08 00 00 00	 mov	 ecx, 8
  00443	48 6b c9 0c	 imul	 rcx, rcx, 12
  00447	ba 08 00 00 00	 mov	 edx, 8
  0044c	48 6b d2 0c	 imul	 rdx, rdx, 12
  00450	4c 8b c8	 mov	 r9, rax
  00453	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0045a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0045e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00465	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00469	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00470	e8 00 00 00 00	 call	 _ADDX_UNIT
  00475	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 309  :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 0d	 imul	 rax, rax, 13
  00484	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0048b	48 03 c8	 add	 rcx, rax
  0048e	48 8b c1	 mov	 rax, rcx
  00491	b9 08 00 00 00	 mov	 ecx, 8
  00496	48 6b c9 0d	 imul	 rcx, rcx, 13
  0049a	ba 08 00 00 00	 mov	 edx, 8
  0049f	48 6b d2 0d	 imul	 rdx, rdx, 13
  004a3	4c 8b c8	 mov	 r9, rax
  004a6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  004ad	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  004b1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  004b8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  004bc	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  004c3	e8 00 00 00 00	 call	 _ADDX_UNIT
  004c8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 310  :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  004ce	b8 08 00 00 00	 mov	 eax, 8
  004d3	48 6b c0 0e	 imul	 rax, rax, 14
  004d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  004de	48 03 c8	 add	 rcx, rax
  004e1	48 8b c1	 mov	 rax, rcx
  004e4	b9 08 00 00 00	 mov	 ecx, 8
  004e9	48 6b c9 0e	 imul	 rcx, rcx, 14
  004ed	ba 08 00 00 00	 mov	 edx, 8
  004f2	48 6b d2 0e	 imul	 rdx, rdx, 14
  004f6	4c 8b c8	 mov	 r9, rax
  004f9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00500	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00504	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0050b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0050f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00516	e8 00 00 00 00	 call	 _ADDX_UNIT
  0051b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 311  :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  00521	b8 08 00 00 00	 mov	 eax, 8
  00526	48 6b c0 0f	 imul	 rax, rax, 15
  0052a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00531	48 03 c8	 add	 rcx, rax
  00534	48 8b c1	 mov	 rax, rcx
  00537	b9 08 00 00 00	 mov	 ecx, 8
  0053c	48 6b c9 0f	 imul	 rcx, rcx, 15
  00540	ba 08 00 00 00	 mov	 edx, 8
  00545	48 6b d2 0f	 imul	 rdx, rdx, 15
  00549	4c 8b c8	 mov	 r9, rax
  0054c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00553	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00557	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0055e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00562	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00569	e8 00 00 00 00	 call	 _ADDX_UNIT
  0056e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 312  :     c = _ADDX_UNIT(c, xp[16], yp[16], &zp[16]);

  00574	b8 08 00 00 00	 mov	 eax, 8
  00579	48 6b c0 10	 imul	 rax, rax, 16
  0057d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00584	48 03 c8	 add	 rcx, rax
  00587	48 8b c1	 mov	 rax, rcx
  0058a	b9 08 00 00 00	 mov	 ecx, 8
  0058f	48 6b c9 10	 imul	 rcx, rcx, 16
  00593	ba 08 00 00 00	 mov	 edx, 8
  00598	48 6b d2 10	 imul	 rdx, rdx, 16
  0059c	4c 8b c8	 mov	 r9, rax
  0059f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  005a6	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  005aa	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  005b1	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  005b5	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  005bc	e8 00 00 00 00	 call	 _ADDX_UNIT
  005c1	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 313  :     c = _ADDX_UNIT(c, xp[17], yp[17], &zp[17]);

  005c7	b8 08 00 00 00	 mov	 eax, 8
  005cc	48 6b c0 11	 imul	 rax, rax, 17
  005d0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  005d7	48 03 c8	 add	 rcx, rax
  005da	48 8b c1	 mov	 rax, rcx
  005dd	b9 08 00 00 00	 mov	 ecx, 8
  005e2	48 6b c9 11	 imul	 rcx, rcx, 17
  005e6	ba 08 00 00 00	 mov	 edx, 8
  005eb	48 6b d2 11	 imul	 rdx, rdx, 17
  005ef	4c 8b c8	 mov	 r9, rax
  005f2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  005f9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  005fd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00604	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00608	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0060f	e8 00 00 00 00	 call	 _ADDX_UNIT
  00614	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 314  :     c = _ADDX_UNIT(c, xp[18], yp[18], &zp[18]);

  0061a	b8 08 00 00 00	 mov	 eax, 8
  0061f	48 6b c0 12	 imul	 rax, rax, 18
  00623	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0062a	48 03 c8	 add	 rcx, rax
  0062d	48 8b c1	 mov	 rax, rcx
  00630	b9 08 00 00 00	 mov	 ecx, 8
  00635	48 6b c9 12	 imul	 rcx, rcx, 18
  00639	ba 08 00 00 00	 mov	 edx, 8
  0063e	48 6b d2 12	 imul	 rdx, rdx, 18
  00642	4c 8b c8	 mov	 r9, rax
  00645	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0064c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00650	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00657	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0065b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00662	e8 00 00 00 00	 call	 _ADDX_UNIT
  00667	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 315  :     c = _ADDX_UNIT(c, xp[19], yp[19], &zp[19]);

  0066d	b8 08 00 00 00	 mov	 eax, 8
  00672	48 6b c0 13	 imul	 rax, rax, 19
  00676	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0067d	48 03 c8	 add	 rcx, rax
  00680	48 8b c1	 mov	 rax, rcx
  00683	b9 08 00 00 00	 mov	 ecx, 8
  00688	48 6b c9 13	 imul	 rcx, rcx, 19
  0068c	ba 08 00 00 00	 mov	 edx, 8
  00691	48 6b d2 13	 imul	 rdx, rdx, 19
  00695	4c 8b c8	 mov	 r9, rax
  00698	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0069f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  006a3	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  006aa	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  006ae	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  006b5	e8 00 00 00 00	 call	 _ADDX_UNIT
  006ba	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 316  :     c = _ADDX_UNIT(c, xp[20], yp[20], &zp[20]);

  006c0	b8 08 00 00 00	 mov	 eax, 8
  006c5	48 6b c0 14	 imul	 rax, rax, 20
  006c9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  006d0	48 03 c8	 add	 rcx, rax
  006d3	48 8b c1	 mov	 rax, rcx
  006d6	b9 08 00 00 00	 mov	 ecx, 8
  006db	48 6b c9 14	 imul	 rcx, rcx, 20
  006df	ba 08 00 00 00	 mov	 edx, 8
  006e4	48 6b d2 14	 imul	 rdx, rdx, 20
  006e8	4c 8b c8	 mov	 r9, rax
  006eb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  006f2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  006f6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  006fd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00701	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00708	e8 00 00 00 00	 call	 _ADDX_UNIT
  0070d	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 317  :     c = _ADDX_UNIT(c, xp[21], yp[21], &zp[21]);

  00713	b8 08 00 00 00	 mov	 eax, 8
  00718	48 6b c0 15	 imul	 rax, rax, 21
  0071c	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00723	48 03 c8	 add	 rcx, rax
  00726	48 8b c1	 mov	 rax, rcx
  00729	b9 08 00 00 00	 mov	 ecx, 8
  0072e	48 6b c9 15	 imul	 rcx, rcx, 21
  00732	ba 08 00 00 00	 mov	 edx, 8
  00737	48 6b d2 15	 imul	 rdx, rdx, 21
  0073b	4c 8b c8	 mov	 r9, rax
  0073e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00745	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00749	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00750	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00754	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0075b	e8 00 00 00 00	 call	 _ADDX_UNIT
  00760	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 318  :     c = _ADDX_UNIT(c, xp[22], yp[22], &zp[22]);

  00766	b8 08 00 00 00	 mov	 eax, 8
  0076b	48 6b c0 16	 imul	 rax, rax, 22
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00776	48 03 c8	 add	 rcx, rax
  00779	48 8b c1	 mov	 rax, rcx
  0077c	b9 08 00 00 00	 mov	 ecx, 8
  00781	48 6b c9 16	 imul	 rcx, rcx, 22
  00785	ba 08 00 00 00	 mov	 edx, 8
  0078a	48 6b d2 16	 imul	 rdx, rdx, 22
  0078e	4c 8b c8	 mov	 r9, rax
  00791	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00798	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0079c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  007a3	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  007a7	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  007ae	e8 00 00 00 00	 call	 _ADDX_UNIT
  007b3	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 319  :     c = _ADDX_UNIT(c, xp[23], yp[23], &zp[23]);

  007b9	b8 08 00 00 00	 mov	 eax, 8
  007be	48 6b c0 17	 imul	 rax, rax, 23
  007c2	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  007c9	48 03 c8	 add	 rcx, rax
  007cc	48 8b c1	 mov	 rax, rcx
  007cf	b9 08 00 00 00	 mov	 ecx, 8
  007d4	48 6b c9 17	 imul	 rcx, rcx, 23
  007d8	ba 08 00 00 00	 mov	 edx, 8
  007dd	48 6b d2 17	 imul	 rdx, rdx, 23
  007e1	4c 8b c8	 mov	 r9, rax
  007e4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  007eb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  007ef	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  007f6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  007fa	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00801	e8 00 00 00 00	 call	 _ADDX_UNIT
  00806	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 320  :     c = _ADDX_UNIT(c, xp[24], yp[24], &zp[24]);

  0080c	b8 08 00 00 00	 mov	 eax, 8
  00811	48 6b c0 18	 imul	 rax, rax, 24
  00815	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0081c	48 03 c8	 add	 rcx, rax
  0081f	48 8b c1	 mov	 rax, rcx
  00822	b9 08 00 00 00	 mov	 ecx, 8
  00827	48 6b c9 18	 imul	 rcx, rcx, 24
  0082b	ba 08 00 00 00	 mov	 edx, 8
  00830	48 6b d2 18	 imul	 rdx, rdx, 24
  00834	4c 8b c8	 mov	 r9, rax
  00837	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0083e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00842	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00849	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0084d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00854	e8 00 00 00 00	 call	 _ADDX_UNIT
  00859	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 321  :     c = _ADDX_UNIT(c, xp[25], yp[25], &zp[25]);

  0085f	b8 08 00 00 00	 mov	 eax, 8
  00864	48 6b c0 19	 imul	 rax, rax, 25
  00868	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0086f	48 03 c8	 add	 rcx, rax
  00872	48 8b c1	 mov	 rax, rcx
  00875	b9 08 00 00 00	 mov	 ecx, 8
  0087a	48 6b c9 19	 imul	 rcx, rcx, 25
  0087e	ba 08 00 00 00	 mov	 edx, 8
  00883	48 6b d2 19	 imul	 rdx, rdx, 25
  00887	4c 8b c8	 mov	 r9, rax
  0088a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00891	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00895	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0089c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  008a0	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  008a7	e8 00 00 00 00	 call	 _ADDX_UNIT
  008ac	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 322  :     c = _ADDX_UNIT(c, xp[26], yp[26], &zp[26]);

  008b2	b8 08 00 00 00	 mov	 eax, 8
  008b7	48 6b c0 1a	 imul	 rax, rax, 26
  008bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  008c2	48 03 c8	 add	 rcx, rax
  008c5	48 8b c1	 mov	 rax, rcx
  008c8	b9 08 00 00 00	 mov	 ecx, 8
  008cd	48 6b c9 1a	 imul	 rcx, rcx, 26
  008d1	ba 08 00 00 00	 mov	 edx, 8
  008d6	48 6b d2 1a	 imul	 rdx, rdx, 26
  008da	4c 8b c8	 mov	 r9, rax
  008dd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  008e4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  008e8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  008ef	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  008f3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  008fa	e8 00 00 00 00	 call	 _ADDX_UNIT
  008ff	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 323  :     c = _ADDX_UNIT(c, xp[27], yp[27], &zp[27]);

  00905	b8 08 00 00 00	 mov	 eax, 8
  0090a	48 6b c0 1b	 imul	 rax, rax, 27
  0090e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00915	48 03 c8	 add	 rcx, rax
  00918	48 8b c1	 mov	 rax, rcx
  0091b	b9 08 00 00 00	 mov	 ecx, 8
  00920	48 6b c9 1b	 imul	 rcx, rcx, 27
  00924	ba 08 00 00 00	 mov	 edx, 8
  00929	48 6b d2 1b	 imul	 rdx, rdx, 27
  0092d	4c 8b c8	 mov	 r9, rax
  00930	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00937	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0093b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00942	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00946	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0094d	e8 00 00 00 00	 call	 _ADDX_UNIT
  00952	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 324  :     c = _ADDX_UNIT(c, xp[28], yp[28], &zp[28]);

  00958	b8 08 00 00 00	 mov	 eax, 8
  0095d	48 6b c0 1c	 imul	 rax, rax, 28
  00961	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00968	48 03 c8	 add	 rcx, rax
  0096b	48 8b c1	 mov	 rax, rcx
  0096e	b9 08 00 00 00	 mov	 ecx, 8
  00973	48 6b c9 1c	 imul	 rcx, rcx, 28
  00977	ba 08 00 00 00	 mov	 edx, 8
  0097c	48 6b d2 1c	 imul	 rdx, rdx, 28
  00980	4c 8b c8	 mov	 r9, rax
  00983	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0098a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0098e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00995	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00999	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  009a0	e8 00 00 00 00	 call	 _ADDX_UNIT
  009a5	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 325  :     c = _ADDX_UNIT(c, xp[29], yp[29], &zp[29]);

  009ab	b8 08 00 00 00	 mov	 eax, 8
  009b0	48 6b c0 1d	 imul	 rax, rax, 29
  009b4	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  009bb	48 03 c8	 add	 rcx, rax
  009be	48 8b c1	 mov	 rax, rcx
  009c1	b9 08 00 00 00	 mov	 ecx, 8
  009c6	48 6b c9 1d	 imul	 rcx, rcx, 29
  009ca	ba 08 00 00 00	 mov	 edx, 8
  009cf	48 6b d2 1d	 imul	 rdx, rdx, 29
  009d3	4c 8b c8	 mov	 r9, rax
  009d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  009dd	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  009e1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  009e8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  009ec	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  009f3	e8 00 00 00 00	 call	 _ADDX_UNIT
  009f8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 326  :     c = _ADDX_UNIT(c, xp[30], yp[30], &zp[30]);

  009fe	b8 08 00 00 00	 mov	 eax, 8
  00a03	48 6b c0 1e	 imul	 rax, rax, 30
  00a07	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00a0e	48 03 c8	 add	 rcx, rax
  00a11	48 8b c1	 mov	 rax, rcx
  00a14	b9 08 00 00 00	 mov	 ecx, 8
  00a19	48 6b c9 1e	 imul	 rcx, rcx, 30
  00a1d	ba 08 00 00 00	 mov	 edx, 8
  00a22	48 6b d2 1e	 imul	 rdx, rdx, 30
  00a26	4c 8b c8	 mov	 r9, rax
  00a29	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00a30	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00a34	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00a3b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00a3f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00a46	e8 00 00 00 00	 call	 _ADDX_UNIT
  00a4b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 327  :     c = _ADDX_UNIT(c, xp[31], yp[31], &zp[31]);

  00a51	b8 08 00 00 00	 mov	 eax, 8
  00a56	48 6b c0 1f	 imul	 rax, rax, 31
  00a5a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00a61	48 03 c8	 add	 rcx, rax
  00a64	48 8b c1	 mov	 rax, rcx
  00a67	b9 08 00 00 00	 mov	 ecx, 8
  00a6c	48 6b c9 1f	 imul	 rcx, rcx, 31
  00a70	ba 08 00 00 00	 mov	 edx, 8
  00a75	48 6b d2 1f	 imul	 rdx, rdx, 31
  00a79	4c 8b c8	 mov	 r9, rax
  00a7c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00a83	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00a87	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00a8e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00a92	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00a99	e8 00 00 00 00	 call	 _ADDX_UNIT
  00a9e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 328  : #elif defined(__GNUC__)
; 329  : #ifdef _M_IX86
; 330  :     __asm__ volatile (
; 331  :         "addb\t$-1, %0\n\t"
; 332  :         "movl\t(%1), %%ecx\n\t"
; 333  :         "adcxl\t(%2), %%ecx\n\t"
; 334  :         "movl\t%%ecx, (%3)\n\t"
; 335  :         "movl\t4(%1), %%ecx\n\t"
; 336  :         "adcxl\t4(%2), %%ecx\n\t"
; 337  :         "movl\t%%ecx, 4(%3)\n\t"
; 338  :         "movl\t8(%1), %%ecx\n\t"
; 339  :         "adcxl\t8(%2), %%ecx\n\t"
; 340  :         "movl\t%%ecx, 8(%3)\n\t"
; 341  :         "movl\t12(%1), %%ecx\n\t"
; 342  :         "adcxl\t12(%2), %%ecx\n\t"
; 343  :         "movl\t%%ecx, 12(%3)\n\t"
; 344  :         "movl\t16(%1), %%ecx\n\t"
; 345  :         "adcxl\t16(%2), %%ecx\n\t"
; 346  :         "movl\t%%ecx, 16(%3)\n\t"
; 347  :         "movl\t20(%1), %%ecx\n\t"
; 348  :         "adcxl\t20(%2), %%ecx\n\t"
; 349  :         "movl\t%%ecx, 20(%3)\n\t"
; 350  :         "movl\t24(%1), %%ecx\n\t"
; 351  :         "adcxl\t24(%2), %%ecx\n\t"
; 352  :         "movl\t%%ecx, 24(%3)\n\t"
; 353  :         "movl\t28(%1), %%ecx\n\t"
; 354  :         "adcxl\t28(%2), %%ecx\n\t"
; 355  :         "movl\t%%ecx, 28(%3)\n\t"
; 356  :         "movl\t32(%1), %%ecx\n\t"
; 357  :         "adcxl\t32(%2), %%ecx\n\t"
; 358  :         "movl\t%%ecx, 32(%3)\n\t"
; 359  :         "movl\t36(%1), %%ecx\n\t"
; 360  :         "adcxl\t36(%2), %%ecx\n\t"
; 361  :         "movl\t%%ecx, 36(%3)\n\t"
; 362  :         "movl\t40(%1), %%ecx\n\t"
; 363  :         "adcxl\t40(%2), %%ecx\n\t"
; 364  :         "movl\t%%ecx, 40(%3)\n\t"
; 365  :         "movl\t44(%1), %%ecx\n\t"
; 366  :         "adcxl\t44(%2), %%ecx\n\t"
; 367  :         "movl\t%%ecx, 44(%3)\n\t"
; 368  :         "movl\t48(%1), %%ecx\n\t"
; 369  :         "adcxl\t48(%2), %%ecx\n\t"
; 370  :         "movl\t%%ecx, 48(%3)\n\t"
; 371  :         "movl\t52(%1), %%ecx\n\t"
; 372  :         "adcxl\t52(%2), %%ecx\n\t"
; 373  :         "movl\t%%ecx, 52(%3)\n\t"
; 374  :         "movl\t56(%1), %%ecx\n\t"
; 375  :         "adcxl\t56(%2), %%ecx\n\t"
; 376  :         "movl\t%%ecx, 56(%3)\n\t"
; 377  :         "movl\t60(%1), %%ecx\n\t"
; 378  :         "adcxl\t60(%2), %%ecx\n\t"
; 379  :         "movl\t%%ecx, 60(%3)\n\t"
; 380  :         "movl\t64(%1), %%ecx\n\t"
; 381  :         "adcxl\t64(%2), %%ecx\n\t"
; 382  :         "movl\t%%ecx, 64(%3)\n\t"
; 383  :         "movl\t68(%1), %%ecx\n\t"
; 384  :         "adcxl\t68(%2), %%ecx\n\t"
; 385  :         "movl\t%%ecx, 68(%3)\n\t"
; 386  :         "movl\t72(%1), %%ecx\n\t"
; 387  :         "adcxl\t72(%2), %%ecx\n\t"
; 388  :         "movl\t%%ecx, 72(%3)\n\t"
; 389  :         "movl\t76(%1), %%ecx\n\t"
; 390  :         "adcxl\t76(%2), %%ecx\n\t"
; 391  :         "movl\t%%ecx, 76(%3)\n\t"
; 392  :         "movl\t80(%1), %%ecx\n\t"
; 393  :         "adcxl\t80(%2), %%ecx\n\t"
; 394  :         "movl\t%%ecx, 80(%3)\n\t"
; 395  :         "movl\t84(%1), %%ecx\n\t"
; 396  :         "adcxl\t84(%2), %%ecx\n\t"
; 397  :         "movl\t%%ecx, 84(%3)\n\t"
; 398  :         "movl\t88(%1), %%ecx\n\t"
; 399  :         "adcxl\t88(%2), %%ecx\n\t"
; 400  :         "movl\t%%ecx, 88(%3)\n\t"
; 401  :         "movl\t92(%1), %%ecx\n\t"
; 402  :         "adcxl\t92(%2), %%ecx\n\t"
; 403  :         "movl\t%%ecx, 92(%3)\n\t"
; 404  :         "movl\t96(%1), %%ecx\n\t"
; 405  :         "adcxl\t96(%2), %%ecx\n\t"
; 406  :         "movl\t%%ecx, 96(%3)\n\t"
; 407  :         "movl\t100(%1), %%ecx\n\t"
; 408  :         "adcxl\t100(%2), %%ecx\n\t"
; 409  :         "movl\t%%ecx, 100(%3)\n\t"
; 410  :         "movl\t104(%1), %%ecx\n\t"
; 411  :         "adcxl\t104(%2), %%ecx\n\t"
; 412  :         "movl\t%%ecx, 104(%3)\n\t"
; 413  :         "movl\t108(%1), %%ecx\n\t"
; 414  :         "adcxl\t108(%2), %%ecx\n\t"
; 415  :         "movl\t%%ecx, 108(%3)\n\t"
; 416  :         "movl\t112(%1), %%ecx\n\t"
; 417  :         "adcxl\t112(%2), %%ecx\n\t"
; 418  :         "movl\t%%ecx, 112(%3)\n\t"
; 419  :         "movl\t116(%1), %%ecx\n\t"
; 420  :         "adcxl\t116(%2), %%ecx\n\t"
; 421  :         "movl\t%%ecx, 116(%3)\n\t"
; 422  :         "movl\t120(%1), %%ecx\n\t"
; 423  :         "adcxl\t120(%2), %%ecx\n\t"
; 424  :         "movl\t%%ecx, 120(%3)\n\t"
; 425  :         "movl\t124(%1), %%ecx\n\t"
; 426  :         "adcxl\t124(%2), %%ecx\n\t"
; 427  :         "movl\t%%ecx, 124(%3)\n\t"
; 428  :         "setc\t%0"
; 429  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 430  :         :
; 431  :         : "cc", "memory", "%ecx"
; 432  : );
; 433  : #elif defined(_M_X64)
; 434  :     __asm__ volatile (
; 435  :         "addb\t$-1, %0\n\t"
; 436  :         "movq\t(%1), %%rcx\n\t"
; 437  :         "adcxq\t(%2), %%rcx\n\t"
; 438  :         "movq\t%%rcx, (%3)\n\t"
; 439  :         "movq\t8(%1), %%rcx\n\t"
; 440  :         "adcxq\t8(%2), %%rcx\n\t"
; 441  :         "movq\t%%rcx, 8(%3)\n\t"
; 442  :         "movq\t16(%1), %%rcx\n\t"
; 443  :         "adcxq\t16(%2), %%rcx\n\t"
; 444  :         "movq\t%%rcx, 16(%3)\n\t"
; 445  :         "movq\t24(%1), %%rcx\n\t"
; 446  :         "adcxq\t24(%2), %%rcx\n\t"
; 447  :         "movq\t%%rcx, 24(%3)\n\t"
; 448  :         "movq\t32(%1), %%rcx\n\t"
; 449  :         "adcxq\t32(%2), %%rcx\n\t"
; 450  :         "movq\t%%rcx, 32(%3)\n\t"
; 451  :         "movq\t40(%1), %%rcx\n\t"
; 452  :         "adcxq\t40(%2), %%rcx\n\t"
; 453  :         "movq\t%%rcx, 40(%3)\n\t"
; 454  :         "movq\t48(%1), %%rcx\n\t"
; 455  :         "adcxq\t48(%2), %%rcx\n\t"
; 456  :         "movq\t%%rcx, 48(%3)\n\t"
; 457  :         "movq\t56(%1), %%rcx\n\t"
; 458  :         "adcxq\t56(%2), %%rcx\n\t"
; 459  :         "movq\t%%rcx, 56(%3)\n\t"
; 460  :         "movq\t64(%1), %%rcx\n\t"
; 461  :         "adcxq\t64(%2), %%rcx\n\t"
; 462  :         "movq\t%%rcx, 64(%3)\n\t"
; 463  :         "movq\t72(%1), %%rcx\n\t"
; 464  :         "adcxq\t72(%2), %%rcx\n\t"
; 465  :         "movq\t%%rcx, 72(%3)\n\t"
; 466  :         "movq\t80(%1), %%rcx\n\t"
; 467  :         "adcxq\t80(%2), %%rcx\n\t"
; 468  :         "movq\t%%rcx, 80(%3)\n\t"
; 469  :         "movq\t88(%1), %%rcx\n\t"
; 470  :         "adcxq\t88(%2), %%rcx\n\t"
; 471  :         "movq\t%%rcx, 88(%3)\n\t"
; 472  :         "movq\t96(%1), %%rcx\n\t"
; 473  :         "adcxq\t96(%2), %%rcx\n\t"
; 474  :         "movq\t%%rcx, 96(%3)\n\t"
; 475  :         "movq\t104(%1), %%rcx\n\t"
; 476  :         "adcxq\t104(%2), %%rcx\n\t"
; 477  :         "movq\t%%rcx, 104(%3)\n\t"
; 478  :         "movq\t112(%1), %%rcx\n\t"
; 479  :         "adcxq\t112(%2), %%rcx\n\t"
; 480  :         "movq\t%%rcx, 112(%3)\n\t"
; 481  :         "movq\t120(%1), %%rcx\n\t"
; 482  :         "adcxq\t120(%2), %%rcx\n\t"
; 483  :         "movq\t%%rcx, 120(%3)\n\t"
; 484  :         "movq\t128(%1), %%rcx\n\t"
; 485  :         "adcxq\t128(%2), %%rcx\n\t"
; 486  :         "movq\t%%rcx, 128(%3)\n\t"
; 487  :         "movq\t136(%1), %%rcx\n\t"
; 488  :         "adcxq\t136(%2), %%rcx\n\t"
; 489  :         "movq\t%%rcx, 136(%3)\n\t"
; 490  :         "movq\t144(%1), %%rcx\n\t"
; 491  :         "adcxq\t144(%2), %%rcx\n\t"
; 492  :         "movq\t%%rcx, 144(%3)\n\t"
; 493  :         "movq\t152(%1), %%rcx\n\t"
; 494  :         "adcxq\t152(%2), %%rcx\n\t"
; 495  :         "movq\t%%rcx, 152(%3)\n\t"
; 496  :         "movq\t160(%1), %%rcx\n\t"
; 497  :         "adcxq\t160(%2), %%rcx\n\t"
; 498  :         "movq\t%%rcx, 160(%3)\n\t"
; 499  :         "movq\t168(%1), %%rcx\n\t"
; 500  :         "adcxq\t168(%2), %%rcx\n\t"
; 501  :         "movq\t%%rcx, 168(%3)\n\t"
; 502  :         "movq\t176(%1), %%rcx\n\t"
; 503  :         "adcxq\t176(%2), %%rcx\n\t"
; 504  :         "movq\t%%rcx, 176(%3)\n\t"
; 505  :         "movq\t184(%1), %%rcx\n\t"
; 506  :         "adcxq\t184(%2), %%rcx\n\t"
; 507  :         "movq\t%%rcx, 184(%3)\n\t"
; 508  :         "movq\t192(%1), %%rcx\n\t"
; 509  :         "adcxq\t192(%2), %%rcx\n\t"
; 510  :         "movq\t%%rcx, 192(%3)\n\t"
; 511  :         "movq\t200(%1), %%rcx\n\t"
; 512  :         "adcxq\t200(%2), %%rcx\n\t"
; 513  :         "movq\t%%rcx, 200(%3)\n\t"
; 514  :         "movq\t208(%1), %%rcx\n\t"
; 515  :         "adcxq\t208(%2), %%rcx\n\t"
; 516  :         "movq\t%%rcx, 208(%3)\n\t"
; 517  :         "movq\t216(%1), %%rcx\n\t"
; 518  :         "adcxq\t216(%2), %%rcx\n\t"
; 519  :         "movq\t%%rcx, 216(%3)\n\t"
; 520  :         "movq\t224(%1), %%rcx\n\t"
; 521  :         "adcxq\t224(%2), %%rcx\n\t"
; 522  :         "movq\t%%rcx, 224(%3)\n\t"
; 523  :         "movq\t232(%1), %%rcx\n\t"
; 524  :         "adcxq\t232(%2), %%rcx\n\t"
; 525  :         "movq\t%%rcx, 232(%3)\n\t"
; 526  :         "movq\t240(%1), %%rcx\n\t"
; 527  :         "adcxq\t240(%2), %%rcx\n\t"
; 528  :         "movq\t%%rcx, 240(%3)\n\t"
; 529  :         "movq\t248(%1), %%rcx\n\t"
; 530  :         "adcxq\t248(%2), %%rcx\n\t"
; 531  :         "movq\t%%rcx, 248(%3)\n\t"
; 532  :         "setc\t%0"
; 533  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 534  :         :
; 535  :         : "cc", "memory", "%rcx"
; 536  : );
; 537  : #else
; 538  : #error unknown platform
; 539  : #endif
; 540  : #else
; 541  : #error unknown compiler
; 542  : #endif
; 543  :     return (c);

  00aa4	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 544  : }

  00aab	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00ab2	5f		 pop	 rdi
  00ab3	5d		 pop	 rbp
  00ab4	c3		 ret	 0
_ADD_32WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_32WORDS_ADC PROC					; COMDAT

; 41   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 42   : #ifdef _MSC_VER
; 43   :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADD_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 44   :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADD_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 45   :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADD_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 46   :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADD_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 47   :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADD_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 48   :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADD_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 49   :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADD_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 50   :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADD_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 51   :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  002dc	b8 08 00 00 00	 mov	 eax, 8
  002e1	48 6b c0 08	 imul	 rax, rax, 8
  002e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  002ec	48 03 c8	 add	 rcx, rax
  002ef	48 8b c1	 mov	 rax, rcx
  002f2	b9 08 00 00 00	 mov	 ecx, 8
  002f7	48 6b c9 08	 imul	 rcx, rcx, 8
  002fb	ba 08 00 00 00	 mov	 edx, 8
  00300	48 6b d2 08	 imul	 rdx, rdx, 8
  00304	4c 8b c8	 mov	 r9, rax
  00307	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0030e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00312	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00319	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0031d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00324	e8 00 00 00 00	 call	 _ADD_UNIT
  00329	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 52   :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  0032f	b8 08 00 00 00	 mov	 eax, 8
  00334	48 6b c0 09	 imul	 rax, rax, 9
  00338	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0033f	48 03 c8	 add	 rcx, rax
  00342	48 8b c1	 mov	 rax, rcx
  00345	b9 08 00 00 00	 mov	 ecx, 8
  0034a	48 6b c9 09	 imul	 rcx, rcx, 9
  0034e	ba 08 00 00 00	 mov	 edx, 8
  00353	48 6b d2 09	 imul	 rdx, rdx, 9
  00357	4c 8b c8	 mov	 r9, rax
  0035a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00361	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00365	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0036c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00370	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00377	e8 00 00 00 00	 call	 _ADD_UNIT
  0037c	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 53   :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  00382	b8 08 00 00 00	 mov	 eax, 8
  00387	48 6b c0 0a	 imul	 rax, rax, 10
  0038b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00392	48 03 c8	 add	 rcx, rax
  00395	48 8b c1	 mov	 rax, rcx
  00398	b9 08 00 00 00	 mov	 ecx, 8
  0039d	48 6b c9 0a	 imul	 rcx, rcx, 10
  003a1	ba 08 00 00 00	 mov	 edx, 8
  003a6	48 6b d2 0a	 imul	 rdx, rdx, 10
  003aa	4c 8b c8	 mov	 r9, rax
  003ad	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  003b4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  003b8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  003bf	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  003c3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  003ca	e8 00 00 00 00	 call	 _ADD_UNIT
  003cf	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 54   :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  003d5	b8 08 00 00 00	 mov	 eax, 8
  003da	48 6b c0 0b	 imul	 rax, rax, 11
  003de	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  003e5	48 03 c8	 add	 rcx, rax
  003e8	48 8b c1	 mov	 rax, rcx
  003eb	b9 08 00 00 00	 mov	 ecx, 8
  003f0	48 6b c9 0b	 imul	 rcx, rcx, 11
  003f4	ba 08 00 00 00	 mov	 edx, 8
  003f9	48 6b d2 0b	 imul	 rdx, rdx, 11
  003fd	4c 8b c8	 mov	 r9, rax
  00400	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00407	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0040b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00412	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00416	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0041d	e8 00 00 00 00	 call	 _ADD_UNIT
  00422	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 55   :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  00428	b8 08 00 00 00	 mov	 eax, 8
  0042d	48 6b c0 0c	 imul	 rax, rax, 12
  00431	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00438	48 03 c8	 add	 rcx, rax
  0043b	48 8b c1	 mov	 rax, rcx
  0043e	b9 08 00 00 00	 mov	 ecx, 8
  00443	48 6b c9 0c	 imul	 rcx, rcx, 12
  00447	ba 08 00 00 00	 mov	 edx, 8
  0044c	48 6b d2 0c	 imul	 rdx, rdx, 12
  00450	4c 8b c8	 mov	 r9, rax
  00453	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0045a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0045e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00465	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00469	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00470	e8 00 00 00 00	 call	 _ADD_UNIT
  00475	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 56   :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 0d	 imul	 rax, rax, 13
  00484	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0048b	48 03 c8	 add	 rcx, rax
  0048e	48 8b c1	 mov	 rax, rcx
  00491	b9 08 00 00 00	 mov	 ecx, 8
  00496	48 6b c9 0d	 imul	 rcx, rcx, 13
  0049a	ba 08 00 00 00	 mov	 edx, 8
  0049f	48 6b d2 0d	 imul	 rdx, rdx, 13
  004a3	4c 8b c8	 mov	 r9, rax
  004a6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  004ad	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  004b1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  004b8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  004bc	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  004c3	e8 00 00 00 00	 call	 _ADD_UNIT
  004c8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 57   :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  004ce	b8 08 00 00 00	 mov	 eax, 8
  004d3	48 6b c0 0e	 imul	 rax, rax, 14
  004d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  004de	48 03 c8	 add	 rcx, rax
  004e1	48 8b c1	 mov	 rax, rcx
  004e4	b9 08 00 00 00	 mov	 ecx, 8
  004e9	48 6b c9 0e	 imul	 rcx, rcx, 14
  004ed	ba 08 00 00 00	 mov	 edx, 8
  004f2	48 6b d2 0e	 imul	 rdx, rdx, 14
  004f6	4c 8b c8	 mov	 r9, rax
  004f9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00500	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00504	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0050b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0050f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00516	e8 00 00 00 00	 call	 _ADD_UNIT
  0051b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 58   :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  00521	b8 08 00 00 00	 mov	 eax, 8
  00526	48 6b c0 0f	 imul	 rax, rax, 15
  0052a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00531	48 03 c8	 add	 rcx, rax
  00534	48 8b c1	 mov	 rax, rcx
  00537	b9 08 00 00 00	 mov	 ecx, 8
  0053c	48 6b c9 0f	 imul	 rcx, rcx, 15
  00540	ba 08 00 00 00	 mov	 edx, 8
  00545	48 6b d2 0f	 imul	 rdx, rdx, 15
  00549	4c 8b c8	 mov	 r9, rax
  0054c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00553	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00557	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0055e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00562	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00569	e8 00 00 00 00	 call	 _ADD_UNIT
  0056e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 59   :     c = _ADD_UNIT(c, xp[16], yp[16], &zp[16]);

  00574	b8 08 00 00 00	 mov	 eax, 8
  00579	48 6b c0 10	 imul	 rax, rax, 16
  0057d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00584	48 03 c8	 add	 rcx, rax
  00587	48 8b c1	 mov	 rax, rcx
  0058a	b9 08 00 00 00	 mov	 ecx, 8
  0058f	48 6b c9 10	 imul	 rcx, rcx, 16
  00593	ba 08 00 00 00	 mov	 edx, 8
  00598	48 6b d2 10	 imul	 rdx, rdx, 16
  0059c	4c 8b c8	 mov	 r9, rax
  0059f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  005a6	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  005aa	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  005b1	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  005b5	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  005bc	e8 00 00 00 00	 call	 _ADD_UNIT
  005c1	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 60   :     c = _ADD_UNIT(c, xp[17], yp[17], &zp[17]);

  005c7	b8 08 00 00 00	 mov	 eax, 8
  005cc	48 6b c0 11	 imul	 rax, rax, 17
  005d0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  005d7	48 03 c8	 add	 rcx, rax
  005da	48 8b c1	 mov	 rax, rcx
  005dd	b9 08 00 00 00	 mov	 ecx, 8
  005e2	48 6b c9 11	 imul	 rcx, rcx, 17
  005e6	ba 08 00 00 00	 mov	 edx, 8
  005eb	48 6b d2 11	 imul	 rdx, rdx, 17
  005ef	4c 8b c8	 mov	 r9, rax
  005f2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  005f9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  005fd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00604	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00608	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0060f	e8 00 00 00 00	 call	 _ADD_UNIT
  00614	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 61   :     c = _ADD_UNIT(c, xp[18], yp[18], &zp[18]);

  0061a	b8 08 00 00 00	 mov	 eax, 8
  0061f	48 6b c0 12	 imul	 rax, rax, 18
  00623	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0062a	48 03 c8	 add	 rcx, rax
  0062d	48 8b c1	 mov	 rax, rcx
  00630	b9 08 00 00 00	 mov	 ecx, 8
  00635	48 6b c9 12	 imul	 rcx, rcx, 18
  00639	ba 08 00 00 00	 mov	 edx, 8
  0063e	48 6b d2 12	 imul	 rdx, rdx, 18
  00642	4c 8b c8	 mov	 r9, rax
  00645	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0064c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00650	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00657	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0065b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00662	e8 00 00 00 00	 call	 _ADD_UNIT
  00667	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 62   :     c = _ADD_UNIT(c, xp[19], yp[19], &zp[19]);

  0066d	b8 08 00 00 00	 mov	 eax, 8
  00672	48 6b c0 13	 imul	 rax, rax, 19
  00676	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0067d	48 03 c8	 add	 rcx, rax
  00680	48 8b c1	 mov	 rax, rcx
  00683	b9 08 00 00 00	 mov	 ecx, 8
  00688	48 6b c9 13	 imul	 rcx, rcx, 19
  0068c	ba 08 00 00 00	 mov	 edx, 8
  00691	48 6b d2 13	 imul	 rdx, rdx, 19
  00695	4c 8b c8	 mov	 r9, rax
  00698	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0069f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  006a3	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  006aa	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  006ae	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  006b5	e8 00 00 00 00	 call	 _ADD_UNIT
  006ba	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 63   :     c = _ADD_UNIT(c, xp[20], yp[20], &zp[20]);

  006c0	b8 08 00 00 00	 mov	 eax, 8
  006c5	48 6b c0 14	 imul	 rax, rax, 20
  006c9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  006d0	48 03 c8	 add	 rcx, rax
  006d3	48 8b c1	 mov	 rax, rcx
  006d6	b9 08 00 00 00	 mov	 ecx, 8
  006db	48 6b c9 14	 imul	 rcx, rcx, 20
  006df	ba 08 00 00 00	 mov	 edx, 8
  006e4	48 6b d2 14	 imul	 rdx, rdx, 20
  006e8	4c 8b c8	 mov	 r9, rax
  006eb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  006f2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  006f6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  006fd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00701	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00708	e8 00 00 00 00	 call	 _ADD_UNIT
  0070d	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 64   :     c = _ADD_UNIT(c, xp[21], yp[21], &zp[21]);

  00713	b8 08 00 00 00	 mov	 eax, 8
  00718	48 6b c0 15	 imul	 rax, rax, 21
  0071c	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00723	48 03 c8	 add	 rcx, rax
  00726	48 8b c1	 mov	 rax, rcx
  00729	b9 08 00 00 00	 mov	 ecx, 8
  0072e	48 6b c9 15	 imul	 rcx, rcx, 21
  00732	ba 08 00 00 00	 mov	 edx, 8
  00737	48 6b d2 15	 imul	 rdx, rdx, 21
  0073b	4c 8b c8	 mov	 r9, rax
  0073e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00745	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00749	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00750	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00754	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0075b	e8 00 00 00 00	 call	 _ADD_UNIT
  00760	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 65   :     c = _ADD_UNIT(c, xp[22], yp[22], &zp[22]);

  00766	b8 08 00 00 00	 mov	 eax, 8
  0076b	48 6b c0 16	 imul	 rax, rax, 22
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00776	48 03 c8	 add	 rcx, rax
  00779	48 8b c1	 mov	 rax, rcx
  0077c	b9 08 00 00 00	 mov	 ecx, 8
  00781	48 6b c9 16	 imul	 rcx, rcx, 22
  00785	ba 08 00 00 00	 mov	 edx, 8
  0078a	48 6b d2 16	 imul	 rdx, rdx, 22
  0078e	4c 8b c8	 mov	 r9, rax
  00791	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00798	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0079c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  007a3	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  007a7	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  007ae	e8 00 00 00 00	 call	 _ADD_UNIT
  007b3	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 66   :     c = _ADD_UNIT(c, xp[23], yp[23], &zp[23]);

  007b9	b8 08 00 00 00	 mov	 eax, 8
  007be	48 6b c0 17	 imul	 rax, rax, 23
  007c2	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  007c9	48 03 c8	 add	 rcx, rax
  007cc	48 8b c1	 mov	 rax, rcx
  007cf	b9 08 00 00 00	 mov	 ecx, 8
  007d4	48 6b c9 17	 imul	 rcx, rcx, 23
  007d8	ba 08 00 00 00	 mov	 edx, 8
  007dd	48 6b d2 17	 imul	 rdx, rdx, 23
  007e1	4c 8b c8	 mov	 r9, rax
  007e4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  007eb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  007ef	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  007f6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  007fa	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00801	e8 00 00 00 00	 call	 _ADD_UNIT
  00806	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 67   :     c = _ADD_UNIT(c, xp[24], yp[24], &zp[24]);

  0080c	b8 08 00 00 00	 mov	 eax, 8
  00811	48 6b c0 18	 imul	 rax, rax, 24
  00815	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0081c	48 03 c8	 add	 rcx, rax
  0081f	48 8b c1	 mov	 rax, rcx
  00822	b9 08 00 00 00	 mov	 ecx, 8
  00827	48 6b c9 18	 imul	 rcx, rcx, 24
  0082b	ba 08 00 00 00	 mov	 edx, 8
  00830	48 6b d2 18	 imul	 rdx, rdx, 24
  00834	4c 8b c8	 mov	 r9, rax
  00837	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0083e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00842	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00849	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0084d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00854	e8 00 00 00 00	 call	 _ADD_UNIT
  00859	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 68   :     c = _ADD_UNIT(c, xp[25], yp[25], &zp[25]);

  0085f	b8 08 00 00 00	 mov	 eax, 8
  00864	48 6b c0 19	 imul	 rax, rax, 25
  00868	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0086f	48 03 c8	 add	 rcx, rax
  00872	48 8b c1	 mov	 rax, rcx
  00875	b9 08 00 00 00	 mov	 ecx, 8
  0087a	48 6b c9 19	 imul	 rcx, rcx, 25
  0087e	ba 08 00 00 00	 mov	 edx, 8
  00883	48 6b d2 19	 imul	 rdx, rdx, 25
  00887	4c 8b c8	 mov	 r9, rax
  0088a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00891	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00895	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0089c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  008a0	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  008a7	e8 00 00 00 00	 call	 _ADD_UNIT
  008ac	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 69   :     c = _ADD_UNIT(c, xp[26], yp[26], &zp[26]);

  008b2	b8 08 00 00 00	 mov	 eax, 8
  008b7	48 6b c0 1a	 imul	 rax, rax, 26
  008bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  008c2	48 03 c8	 add	 rcx, rax
  008c5	48 8b c1	 mov	 rax, rcx
  008c8	b9 08 00 00 00	 mov	 ecx, 8
  008cd	48 6b c9 1a	 imul	 rcx, rcx, 26
  008d1	ba 08 00 00 00	 mov	 edx, 8
  008d6	48 6b d2 1a	 imul	 rdx, rdx, 26
  008da	4c 8b c8	 mov	 r9, rax
  008dd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  008e4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  008e8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  008ef	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  008f3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  008fa	e8 00 00 00 00	 call	 _ADD_UNIT
  008ff	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 70   :     c = _ADD_UNIT(c, xp[27], yp[27], &zp[27]);

  00905	b8 08 00 00 00	 mov	 eax, 8
  0090a	48 6b c0 1b	 imul	 rax, rax, 27
  0090e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00915	48 03 c8	 add	 rcx, rax
  00918	48 8b c1	 mov	 rax, rcx
  0091b	b9 08 00 00 00	 mov	 ecx, 8
  00920	48 6b c9 1b	 imul	 rcx, rcx, 27
  00924	ba 08 00 00 00	 mov	 edx, 8
  00929	48 6b d2 1b	 imul	 rdx, rdx, 27
  0092d	4c 8b c8	 mov	 r9, rax
  00930	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00937	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0093b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00942	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00946	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0094d	e8 00 00 00 00	 call	 _ADD_UNIT
  00952	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 71   :     c = _ADD_UNIT(c, xp[28], yp[28], &zp[28]);

  00958	b8 08 00 00 00	 mov	 eax, 8
  0095d	48 6b c0 1c	 imul	 rax, rax, 28
  00961	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00968	48 03 c8	 add	 rcx, rax
  0096b	48 8b c1	 mov	 rax, rcx
  0096e	b9 08 00 00 00	 mov	 ecx, 8
  00973	48 6b c9 1c	 imul	 rcx, rcx, 28
  00977	ba 08 00 00 00	 mov	 edx, 8
  0097c	48 6b d2 1c	 imul	 rdx, rdx, 28
  00980	4c 8b c8	 mov	 r9, rax
  00983	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0098a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0098e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00995	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00999	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  009a0	e8 00 00 00 00	 call	 _ADD_UNIT
  009a5	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 72   :     c = _ADD_UNIT(c, xp[29], yp[29], &zp[29]);

  009ab	b8 08 00 00 00	 mov	 eax, 8
  009b0	48 6b c0 1d	 imul	 rax, rax, 29
  009b4	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  009bb	48 03 c8	 add	 rcx, rax
  009be	48 8b c1	 mov	 rax, rcx
  009c1	b9 08 00 00 00	 mov	 ecx, 8
  009c6	48 6b c9 1d	 imul	 rcx, rcx, 29
  009ca	ba 08 00 00 00	 mov	 edx, 8
  009cf	48 6b d2 1d	 imul	 rdx, rdx, 29
  009d3	4c 8b c8	 mov	 r9, rax
  009d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  009dd	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  009e1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  009e8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  009ec	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  009f3	e8 00 00 00 00	 call	 _ADD_UNIT
  009f8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 73   :     c = _ADD_UNIT(c, xp[30], yp[30], &zp[30]);

  009fe	b8 08 00 00 00	 mov	 eax, 8
  00a03	48 6b c0 1e	 imul	 rax, rax, 30
  00a07	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00a0e	48 03 c8	 add	 rcx, rax
  00a11	48 8b c1	 mov	 rax, rcx
  00a14	b9 08 00 00 00	 mov	 ecx, 8
  00a19	48 6b c9 1e	 imul	 rcx, rcx, 30
  00a1d	ba 08 00 00 00	 mov	 edx, 8
  00a22	48 6b d2 1e	 imul	 rdx, rdx, 30
  00a26	4c 8b c8	 mov	 r9, rax
  00a29	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00a30	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00a34	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00a3b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00a3f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00a46	e8 00 00 00 00	 call	 _ADD_UNIT
  00a4b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 74   :     c = _ADD_UNIT(c, xp[31], yp[31], &zp[31]);

  00a51	b8 08 00 00 00	 mov	 eax, 8
  00a56	48 6b c0 1f	 imul	 rax, rax, 31
  00a5a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00a61	48 03 c8	 add	 rcx, rax
  00a64	48 8b c1	 mov	 rax, rcx
  00a67	b9 08 00 00 00	 mov	 ecx, 8
  00a6c	48 6b c9 1f	 imul	 rcx, rcx, 31
  00a70	ba 08 00 00 00	 mov	 edx, 8
  00a75	48 6b d2 1f	 imul	 rdx, rdx, 31
  00a79	4c 8b c8	 mov	 r9, rax
  00a7c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00a83	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00a87	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00a8e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00a92	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00a99	e8 00 00 00 00	 call	 _ADD_UNIT
  00a9e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 75   : #elif defined(__GNUC__)
; 76   : #ifdef _M_IX86
; 77   :     __asm__ volatile (
; 78   :         "addb\t$-1, %0\n\t"
; 79   :         "movl\t(%1), %%ecx\n\t"
; 80   :         "adcl\t(%2), %%ecx\n\t"
; 81   :         "movl\t%%ecx, (%3)\n\t"
; 82   :         "movl\t4(%1), %%ecx\n\t"
; 83   :         "adcl\t4(%2), %%ecx\n\t"
; 84   :         "movl\t%%ecx, 4(%3)\n\t"
; 85   :         "movl\t8(%1), %%ecx\n\t"
; 86   :         "adcl\t8(%2), %%ecx\n\t"
; 87   :         "movl\t%%ecx, 8(%3)\n\t"
; 88   :         "movl\t12(%1), %%ecx\n\t"
; 89   :         "adcl\t12(%2), %%ecx\n\t"
; 90   :         "movl\t%%ecx, 12(%3)\n\t"
; 91   :         "movl\t16(%1), %%ecx\n\t"
; 92   :         "adcl\t16(%2), %%ecx\n\t"
; 93   :         "movl\t%%ecx, 16(%3)\n\t"
; 94   :         "movl\t20(%1), %%ecx\n\t"
; 95   :         "adcl\t20(%2), %%ecx\n\t"
; 96   :         "movl\t%%ecx, 20(%3)\n\t"
; 97   :         "movl\t24(%1), %%ecx\n\t"
; 98   :         "adcl\t24(%2), %%ecx\n\t"
; 99   :         "movl\t%%ecx, 24(%3)\n\t"
; 100  :         "movl\t28(%1), %%ecx\n\t"
; 101  :         "adcl\t28(%2), %%ecx\n\t"
; 102  :         "movl\t%%ecx, 28(%3)\n\t"
; 103  :         "movl\t32(%1), %%ecx\n\t"
; 104  :         "adcl\t32(%2), %%ecx\n\t"
; 105  :         "movl\t%%ecx, 32(%3)\n\t"
; 106  :         "movl\t36(%1), %%ecx\n\t"
; 107  :         "adcl\t36(%2), %%ecx\n\t"
; 108  :         "movl\t%%ecx, 36(%3)\n\t"
; 109  :         "movl\t40(%1), %%ecx\n\t"
; 110  :         "adcl\t40(%2), %%ecx\n\t"
; 111  :         "movl\t%%ecx, 40(%3)\n\t"
; 112  :         "movl\t44(%1), %%ecx\n\t"
; 113  :         "adcl\t44(%2), %%ecx\n\t"
; 114  :         "movl\t%%ecx, 44(%3)\n\t"
; 115  :         "movl\t48(%1), %%ecx\n\t"
; 116  :         "adcl\t48(%2), %%ecx\n\t"
; 117  :         "movl\t%%ecx, 48(%3)\n\t"
; 118  :         "movl\t52(%1), %%ecx\n\t"
; 119  :         "adcl\t52(%2), %%ecx\n\t"
; 120  :         "movl\t%%ecx, 52(%3)\n\t"
; 121  :         "movl\t56(%1), %%ecx\n\t"
; 122  :         "adcl\t56(%2), %%ecx\n\t"
; 123  :         "movl\t%%ecx, 56(%3)\n\t"
; 124  :         "movl\t60(%1), %%ecx\n\t"
; 125  :         "adcl\t60(%2), %%ecx\n\t"
; 126  :         "movl\t%%ecx, 60(%3)\n\t"
; 127  :         "movl\t64(%1), %%ecx\n\t"
; 128  :         "adcl\t64(%2), %%ecx\n\t"
; 129  :         "movl\t%%ecx, 64(%3)\n\t"
; 130  :         "movl\t68(%1), %%ecx\n\t"
; 131  :         "adcl\t68(%2), %%ecx\n\t"
; 132  :         "movl\t%%ecx, 68(%3)\n\t"
; 133  :         "movl\t72(%1), %%ecx\n\t"
; 134  :         "adcl\t72(%2), %%ecx\n\t"
; 135  :         "movl\t%%ecx, 72(%3)\n\t"
; 136  :         "movl\t76(%1), %%ecx\n\t"
; 137  :         "adcl\t76(%2), %%ecx\n\t"
; 138  :         "movl\t%%ecx, 76(%3)\n\t"
; 139  :         "movl\t80(%1), %%ecx\n\t"
; 140  :         "adcl\t80(%2), %%ecx\n\t"
; 141  :         "movl\t%%ecx, 80(%3)\n\t"
; 142  :         "movl\t84(%1), %%ecx\n\t"
; 143  :         "adcl\t84(%2), %%ecx\n\t"
; 144  :         "movl\t%%ecx, 84(%3)\n\t"
; 145  :         "movl\t88(%1), %%ecx\n\t"
; 146  :         "adcl\t88(%2), %%ecx\n\t"
; 147  :         "movl\t%%ecx, 88(%3)\n\t"
; 148  :         "movl\t92(%1), %%ecx\n\t"
; 149  :         "adcl\t92(%2), %%ecx\n\t"
; 150  :         "movl\t%%ecx, 92(%3)\n\t"
; 151  :         "movl\t96(%1), %%ecx\n\t"
; 152  :         "adcl\t96(%2), %%ecx\n\t"
; 153  :         "movl\t%%ecx, 96(%3)\n\t"
; 154  :         "movl\t100(%1), %%ecx\n\t"
; 155  :         "adcl\t100(%2), %%ecx\n\t"
; 156  :         "movl\t%%ecx, 100(%3)\n\t"
; 157  :         "movl\t104(%1), %%ecx\n\t"
; 158  :         "adcl\t104(%2), %%ecx\n\t"
; 159  :         "movl\t%%ecx, 104(%3)\n\t"
; 160  :         "movl\t108(%1), %%ecx\n\t"
; 161  :         "adcl\t108(%2), %%ecx\n\t"
; 162  :         "movl\t%%ecx, 108(%3)\n\t"
; 163  :         "movl\t112(%1), %%ecx\n\t"
; 164  :         "adcl\t112(%2), %%ecx\n\t"
; 165  :         "movl\t%%ecx, 112(%3)\n\t"
; 166  :         "movl\t116(%1), %%ecx\n\t"
; 167  :         "adcl\t116(%2), %%ecx\n\t"
; 168  :         "movl\t%%ecx, 116(%3)\n\t"
; 169  :         "movl\t120(%1), %%ecx\n\t"
; 170  :         "adcl\t120(%2), %%ecx\n\t"
; 171  :         "movl\t%%ecx, 120(%3)\n\t"
; 172  :         "movl\t124(%1), %%ecx\n\t"
; 173  :         "adcl\t124(%2), %%ecx\n\t"
; 174  :         "movl\t%%ecx, 124(%3)\n\t"
; 175  :         "setc\t%0"
; 176  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 177  :         :
; 178  :         : "cc", "memory", "%ecx"
; 179  : );
; 180  : #elif defined(_M_X64)
; 181  :     __asm__ volatile (
; 182  :         "addb\t$-1, %0\n\t"
; 183  :         "movq\t(%1), %%rcx\n\t"
; 184  :         "adcq\t(%2), %%rcx\n\t"
; 185  :         "movq\t%%rcx, (%3)\n\t"
; 186  :         "movq\t8(%1), %%rcx\n\t"
; 187  :         "adcq\t8(%2), %%rcx\n\t"
; 188  :         "movq\t%%rcx, 8(%3)\n\t"
; 189  :         "movq\t16(%1), %%rcx\n\t"
; 190  :         "adcq\t16(%2), %%rcx\n\t"
; 191  :         "movq\t%%rcx, 16(%3)\n\t"
; 192  :         "movq\t24(%1), %%rcx\n\t"
; 193  :         "adcq\t24(%2), %%rcx\n\t"
; 194  :         "movq\t%%rcx, 24(%3)\n\t"
; 195  :         "movq\t32(%1), %%rcx\n\t"
; 196  :         "adcq\t32(%2), %%rcx\n\t"
; 197  :         "movq\t%%rcx, 32(%3)\n\t"
; 198  :         "movq\t40(%1), %%rcx\n\t"
; 199  :         "adcq\t40(%2), %%rcx\n\t"
; 200  :         "movq\t%%rcx, 40(%3)\n\t"
; 201  :         "movq\t48(%1), %%rcx\n\t"
; 202  :         "adcq\t48(%2), %%rcx\n\t"
; 203  :         "movq\t%%rcx, 48(%3)\n\t"
; 204  :         "movq\t56(%1), %%rcx\n\t"
; 205  :         "adcq\t56(%2), %%rcx\n\t"
; 206  :         "movq\t%%rcx, 56(%3)\n\t"
; 207  :         "movq\t64(%1), %%rcx\n\t"
; 208  :         "adcq\t64(%2), %%rcx\n\t"
; 209  :         "movq\t%%rcx, 64(%3)\n\t"
; 210  :         "movq\t72(%1), %%rcx\n\t"
; 211  :         "adcq\t72(%2), %%rcx\n\t"
; 212  :         "movq\t%%rcx, 72(%3)\n\t"
; 213  :         "movq\t80(%1), %%rcx\n\t"
; 214  :         "adcq\t80(%2), %%rcx\n\t"
; 215  :         "movq\t%%rcx, 80(%3)\n\t"
; 216  :         "movq\t88(%1), %%rcx\n\t"
; 217  :         "adcq\t88(%2), %%rcx\n\t"
; 218  :         "movq\t%%rcx, 88(%3)\n\t"
; 219  :         "movq\t96(%1), %%rcx\n\t"
; 220  :         "adcq\t96(%2), %%rcx\n\t"
; 221  :         "movq\t%%rcx, 96(%3)\n\t"
; 222  :         "movq\t104(%1), %%rcx\n\t"
; 223  :         "adcq\t104(%2), %%rcx\n\t"
; 224  :         "movq\t%%rcx, 104(%3)\n\t"
; 225  :         "movq\t112(%1), %%rcx\n\t"
; 226  :         "adcq\t112(%2), %%rcx\n\t"
; 227  :         "movq\t%%rcx, 112(%3)\n\t"
; 228  :         "movq\t120(%1), %%rcx\n\t"
; 229  :         "adcq\t120(%2), %%rcx\n\t"
; 230  :         "movq\t%%rcx, 120(%3)\n\t"
; 231  :         "movq\t128(%1), %%rcx\n\t"
; 232  :         "adcq\t128(%2), %%rcx\n\t"
; 233  :         "movq\t%%rcx, 128(%3)\n\t"
; 234  :         "movq\t136(%1), %%rcx\n\t"
; 235  :         "adcq\t136(%2), %%rcx\n\t"
; 236  :         "movq\t%%rcx, 136(%3)\n\t"
; 237  :         "movq\t144(%1), %%rcx\n\t"
; 238  :         "adcq\t144(%2), %%rcx\n\t"
; 239  :         "movq\t%%rcx, 144(%3)\n\t"
; 240  :         "movq\t152(%1), %%rcx\n\t"
; 241  :         "adcq\t152(%2), %%rcx\n\t"
; 242  :         "movq\t%%rcx, 152(%3)\n\t"
; 243  :         "movq\t160(%1), %%rcx\n\t"
; 244  :         "adcq\t160(%2), %%rcx\n\t"
; 245  :         "movq\t%%rcx, 160(%3)\n\t"
; 246  :         "movq\t168(%1), %%rcx\n\t"
; 247  :         "adcq\t168(%2), %%rcx\n\t"
; 248  :         "movq\t%%rcx, 168(%3)\n\t"
; 249  :         "movq\t176(%1), %%rcx\n\t"
; 250  :         "adcq\t176(%2), %%rcx\n\t"
; 251  :         "movq\t%%rcx, 176(%3)\n\t"
; 252  :         "movq\t184(%1), %%rcx\n\t"
; 253  :         "adcq\t184(%2), %%rcx\n\t"
; 254  :         "movq\t%%rcx, 184(%3)\n\t"
; 255  :         "movq\t192(%1), %%rcx\n\t"
; 256  :         "adcq\t192(%2), %%rcx\n\t"
; 257  :         "movq\t%%rcx, 192(%3)\n\t"
; 258  :         "movq\t200(%1), %%rcx\n\t"
; 259  :         "adcq\t200(%2), %%rcx\n\t"
; 260  :         "movq\t%%rcx, 200(%3)\n\t"
; 261  :         "movq\t208(%1), %%rcx\n\t"
; 262  :         "adcq\t208(%2), %%rcx\n\t"
; 263  :         "movq\t%%rcx, 208(%3)\n\t"
; 264  :         "movq\t216(%1), %%rcx\n\t"
; 265  :         "adcq\t216(%2), %%rcx\n\t"
; 266  :         "movq\t%%rcx, 216(%3)\n\t"
; 267  :         "movq\t224(%1), %%rcx\n\t"
; 268  :         "adcq\t224(%2), %%rcx\n\t"
; 269  :         "movq\t%%rcx, 224(%3)\n\t"
; 270  :         "movq\t232(%1), %%rcx\n\t"
; 271  :         "adcq\t232(%2), %%rcx\n\t"
; 272  :         "movq\t%%rcx, 232(%3)\n\t"
; 273  :         "movq\t240(%1), %%rcx\n\t"
; 274  :         "adcq\t240(%2), %%rcx\n\t"
; 275  :         "movq\t%%rcx, 240(%3)\n\t"
; 276  :         "movq\t248(%1), %%rcx\n\t"
; 277  :         "adcq\t248(%2), %%rcx\n\t"
; 278  :         "movq\t%%rcx, 248(%3)\n\t"
; 279  :         "setc\t%0"
; 280  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 281  :         :
; 282  :         : "cc", "memory", "%rcx"
; 283  : );
; 284  : #else
; 285  : #error unknown platform
; 286  : #endif
; 287  : #else
; 288  : #error unknown compiler
; 289  : #endif
; 290  :     return (c);

  00aa4	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 291  : }

  00aab	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00ab2	5f		 pop	 rdi
  00ab3	5d		 pop	 rbp
  00ab4	c3		 ret	 0
_ADD_32WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 454  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 455  :             if (x == 0)

  00036	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR x$[rbp], 0
  0003e	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 456  :                 return (sizeof(x) * 8);

  00040	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00045	eb 1c		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 457  : #ifdef _M_IX86
; 458  :             DWORD pos;
; 459  : #ifdef _MSC_VER
; 460  :             _BitScanReverse(&pos, x);
; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);

  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR x$[rbp]
  0004e	48 0f bd c0	 bsr	 rax, rax
  00052	89 45 04	 mov	 DWORD PTR pos$[rbp], eax

; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  00055	8b 45 04	 mov	 eax, DWORD PTR pos$[rbp]
  00058	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  0005d	48 2b c8	 sub	 rcx, rax
  00060	48 8b c1	 mov	 rax, rcx
$LN1@LZCNT_ALT_:

; 480  :         }

  00063	48 8b f8	 mov	 rdi, rax
  00066	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
  00071	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00076	48 8b c7	 mov	 rax, rdi
  00079	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00080	5f		 pop	 rdi
  00081	5d		 pop	 rbp
  00082	c3		 ret	 0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_32 PROC					; COMDAT

; 421  :         {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR [rsp+296]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 422  :             if (x == 0)

  00034	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR x$[rbp], 0
  0003b	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 423  :                 return (sizeof(x) * 8);

  0003d	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00042	eb 1a		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 424  :             DWORD pos;
; 425  : #ifdef _MSC_VER
; 426  :             _BitScanReverse(&pos, x);

  00044	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  0004a	0f bd c0	 bsr	 eax, eax
  0004d	89 45 04	 mov	 DWORD PTR pos$[rbp], eax

; 427  : #elif defined(__GNUC__)
; 428  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 429  : #else
; 430  : #error unknown compiler
; 431  : #endif
; 432  :             return (sizeof(x) * 8 - 1 - pos);

  00050	8b 45 04	 mov	 eax, DWORD PTR pos$[rbp]
  00053	b9 1f 00 00 00	 mov	 ecx, 31
  00058	48 2b c8	 sub	 rcx, rax
  0005b	48 8b c1	 mov	 rax, rcx
$LN1@LZCNT_ALT_:

; 433  :         }

  0005e	48 8b f8	 mov	 rdi, rax
  00061	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_LZCNT_ALT_32$rtcFrameData
  0006c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00071	48 8b c7	 mov	 rax, rdi
  00074	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007b	5f		 pop	 rdi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADDX_UNIT PROC						; COMDAT

; 187  :         {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));
; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00044	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR carry$[rbp]
  00052	80 c1 ff	 add	 cl, -1
  00055	66 48 0f 38 f6
	85 f0 00 00 00	 adcx	 rax, QWORD PTR v$[rbp]
  0005f	0f 92 c1	 setb	 cl
  00062	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00069	48 89 02	 mov	 QWORD PTR [rdx], rax
  0006c	0f b6 c1	 movzx	 eax, cl

; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADD_UNIT PROC						; COMDAT

; 176  :         {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));
; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));

  00044	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR carry$[rbp]
  00052	80 c1 ff	 add	 cl, -1
  00055	48 13 85 f0 00
	00 00		 adc	 rax, QWORD PTR v$[rbp]
  0005c	0f 92 c1	 setb	 cl
  0005f	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00066	48 89 02	 mov	 QWORD PTR [rdx], rax
  00069	0f b6 c1	 movzx	 eax, cl

; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  0006c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MAXIMUM_UNIT
_TEXT	SEGMENT
tv65 = 192
x$ = 240
y$ = 248
_MAXIMUM_UNIT PROC					; COMDAT

; 166  :         {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 167  :             return (x >= y ? x : y);

  0003b	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR y$[rbp]
  00042	48 39 85 f0 00
	00 00		 cmp	 QWORD PTR x$[rbp], rax
  00049	72 10		 jb	 SHORT $LN3@MAXIMUM_UN
  0004b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR x$[rbp]
  00052	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00059	eb 0e		 jmp	 SHORT $LN4@MAXIMUM_UN
$LN3@MAXIMUM_UN:
  0005b	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR y$[rbp]
  00062	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@MAXIMUM_UN:
  00069	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]

; 168  :         }

  00070	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00077	5f		 pop	 rdi
  00078	5d		 pop	 rbp
  00079	c3		 ret	 0
_MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 224
result_high$ = 232
_FROMDWORDTOWORD PROC					; COMDAT

; 145  :         {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR value$[rbp]
  00042	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00046	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR result_high$[rbp]
  0004d	89 01		 mov	 DWORD PTR [rcx], eax

; 147  :             return ((_UINT32_T)value);

  0004f	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR value$[rbp]

; 148  :         }

  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z
_TEXT	SEGMENT
root$ = 8
w$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_X, COMDAT

; 551  :     {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  0002f	48 c7 85 e8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T7[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 552  :         if (u == nullptr)

  00046	48 83 bd 20 02
	00 00 00	 cmp	 QWORD PTR u$[rbp], 0
  0004e	75 2d		 jne	 SHORT $LN2@PMC_Add_X_

; 553  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00050	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13ICFKHAEN@?$AAu@
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  0005e	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00065	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00071	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00078	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_Add_X_:

; 554  :         if (v == nullptr)

  0007d	48 83 bd 28 02
	00 00 00	 cmp	 QWORD PTR v$[rbp], 0
  00085	75 2d		 jne	 SHORT $LN3@PMC_Add_X_

; 555  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00087	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13JAOPNPKD@?$AAv@
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00095	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0009c	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a8	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000af	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_Add_X_:

; 556  :         CheckNumber((NUMBER_HEADER*)u);

  000b4	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  000bb	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 557  :         CheckNumber((NUMBER_HEADER*)v);

  000c0	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  000c7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 558  :         ResourceHolderUINT root;

  000cc	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000d0	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000d5	90		 npad	 1

; 559  :         NUMBER_HEADER* w = PMC_Add_X_X_Imp((NUMBER_HEADER*)u, (NUMBER_HEADER*)v);

  000d6	48 8b 95 28 02
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  000dd	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  000e4	e8 00 00 00 00	 call	 ?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
  000e9	48 89 45 48	 mov	 QWORD PTR w$[rbp], rax

; 560  :         root.HookNumber(w);

  000ed	48 8b 55 48	 mov	 rdx, QWORD PTR w$[rbp]
  000f1	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000f5	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 561  : #ifdef _DEBUG
; 562  :         CheckNumber(w);

  000fa	48 8b 4d 48	 mov	 rcx, QWORD PTR w$[rbp]
  000fe	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 563  : #endif
; 564  :         root.UnlinkNumber(w);

  00103	48 8b 55 48	 mov	 rdx, QWORD PTR w$[rbp]
  00107	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0010b	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 565  :         return ((PMC_HANDLE_UINT)w);

  00110	48 8b 45 48	 mov	 rax, QWORD PTR w$[rbp]
  00114	48 89 85 c8 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0011b	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0011f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00124	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR $T6[rbp]

; 566  :     }

  0012b	48 8b f8	 mov	 rdi, rax
  0012e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z$rtcFrameData
  00139	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0013e	48 8b c7	 mov	 rax, rdi
  00141	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00148	5f		 pop	 rdi
  00149	5d		 pop	 rbp
  0014a	c3		 ret	 0
$LN6@PMC_Add_X_:
?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_X
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
w$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?dtor$0@?0??PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_X'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_X'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
w$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?dtor$0@?0??PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_X'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_X'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z
_TEXT	SEGMENT
root$ = 8
w$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_L, COMDAT

; 502  :     {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  0002f	48 c7 85 e8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T7[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 503  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

  00046	33 c0		 xor	 eax, eax
  00048	85 c0		 test	 eax, eax
  0004a	74 2d		 je	 SHORT $LN2@PMC_Add_X_

; 504  :         {
; 505  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 506  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_Add_X_L;1");

  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1DE@DCJPPHMC@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
  0005a	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00061	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0006d	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00074	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_Add_X_:

; 507  :         }
; 508  :         if (u == nullptr)

  00079	48 83 bd 20 02
	00 00 00	 cmp	 QWORD PTR u$[rbp], 0
  00081	75 2d		 jne	 SHORT $LN3@PMC_Add_X_

; 509  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00083	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13ICFKHAEN@?$AAu@
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00091	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00098	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a4	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000ab	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_Add_X_:

; 510  :         CheckNumber((NUMBER_HEADER*)u);

  000b0	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  000b7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 511  :         ResourceHolderUINT root;

  000bc	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000c0	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000c5	90		 npad	 1

; 512  :         NUMBER_HEADER* w = PMC_Add_X_L_Imp((NUMBER_HEADER*)u, v);

  000c6	48 8b 95 28 02
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  000cd	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  000d4	e8 00 00 00 00	 call	 ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
  000d9	48 89 45 48	 mov	 QWORD PTR w$[rbp], rax

; 513  :         root.HookNumber(w);

  000dd	48 8b 55 48	 mov	 rdx, QWORD PTR w$[rbp]
  000e1	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000e5	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 514  : #ifdef _DEBUG
; 515  :         CheckNumber((NUMBER_HEADER*)w);

  000ea	48 8b 4d 48	 mov	 rcx, QWORD PTR w$[rbp]
  000ee	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 516  : #endif
; 517  :         root.UnlinkNumber(w);

  000f3	48 8b 55 48	 mov	 rdx, QWORD PTR w$[rbp]
  000f7	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000fb	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 518  :         return ((PMC_HANDLE_UINT)w);

  00100	48 8b 45 48	 mov	 rax, QWORD PTR w$[rbp]
  00104	48 89 85 c8 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0010b	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0010f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00114	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR $T6[rbp]

; 519  :     }

  0011b	48 8b f8	 mov	 rdi, rax
  0011e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z$rtcFrameData
  00129	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0012e	48 8b c7	 mov	 rax, rdi
  00131	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00138	5f		 pop	 rdi
  00139	5d		 pop	 rbp
  0013a	c3		 ret	 0
$LN6@PMC_Add_X_:
?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_L
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
w$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?dtor$0@?0??PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_L'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_L'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
w$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?dtor$0@?0??PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_L'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_L@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@_K@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_L'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z
_TEXT	SEGMENT
root$ = 8
nw$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_I, COMDAT

; 370  :     {

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  0002e	48 c7 85 e8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T7[rbp], -2
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 371  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  00045	33 c0		 xor	 eax, eax
  00047	85 c0		 test	 eax, eax
  00049	74 2d		 je	 SHORT $LN2@PMC_Add_X_

; 372  :         {
; 373  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 374  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_Add_X_I;1");

  0004b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1DE@HKHPPJKG@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
  00059	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00060	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0006c	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00073	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_Add_X_:

; 375  :         }
; 376  :         if (u == nullptr)

  00078	48 83 bd 20 02
	00 00 00	 cmp	 QWORD PTR u$[rbp], 0
  00080	75 2d		 jne	 SHORT $LN3@PMC_Add_X_

; 377  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00082	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13ICFKHAEN@?$AAu@
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00090	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00097	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a3	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000aa	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_Add_X_:

; 378  :         CheckNumber((NUMBER_HEADER*)u);

  000af	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  000b6	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 379  :         ResourceHolderUINT root;

  000bb	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000bf	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000c4	90		 npad	 1

; 380  :         NUMBER_HEADER* nw = PMC_Add_X_I_Imp((NUMBER_HEADER*)u, v);

  000c5	8b 95 28 02 00
	00		 mov	 edx, DWORD PTR v$[rbp]
  000cb	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  000d2	e8 00 00 00 00	 call	 ?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp
  000d7	48 89 45 48	 mov	 QWORD PTR nw$[rbp], rax

; 381  :         root.HookNumber(nw);

  000db	48 8b 55 48	 mov	 rdx, QWORD PTR nw$[rbp]
  000df	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000e3	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 382  : #ifdef _DEBUG
; 383  :         CheckNumber(nw);

  000e8	48 8b 4d 48	 mov	 rcx, QWORD PTR nw$[rbp]
  000ec	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 384  : #endif
; 385  :         root.UnlinkNumber(nw);

  000f1	48 8b 55 48	 mov	 rdx, QWORD PTR nw$[rbp]
  000f5	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000f9	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 386  :         return ((PMC_HANDLE_UINT)nw);

  000fe	48 8b 45 48	 mov	 rax, QWORD PTR nw$[rbp]
  00102	48 89 85 c8 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  00109	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0010d	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00112	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR $T6[rbp]

; 387  :     }

  00119	48 8b f8	 mov	 rdi, rax
  0011c	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z$rtcFrameData
  00127	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0012c	48 8b c7	 mov	 rax, rdi
  0012f	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00136	5f		 pop	 rdi
  00137	5d		 pop	 rbp
  00138	c3		 ret	 0
$LN6@PMC_Add_X_:
?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_I
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
nw$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?dtor$0@?0??PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_I'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_I'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
nw$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?dtor$0@?0??PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_I'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@I@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_I'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z
_TEXT	SEGMENT
root$ = 8
w$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_L_X, COMDAT

; 482  :     {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  0002f	48 c7 85 e8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T7[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 483  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

  00046	33 c0		 xor	 eax, eax
  00048	85 c0		 test	 eax, eax
  0004a	74 2d		 je	 SHORT $LN2@PMC_Add_L_

; 484  :         {
; 485  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 486  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_Add_L_X;1");

  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1DE@MFHABOJA@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
  0005a	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00061	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0006d	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00074	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_Add_L_:

; 487  :         }
; 488  :         if (v == nullptr)

  00079	48 83 bd 28 02
	00 00 00	 cmp	 QWORD PTR v$[rbp], 0
  00081	75 2d		 jne	 SHORT $LN3@PMC_Add_L_

; 489  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00083	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13JAOPNPKD@?$AAv@
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00091	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00098	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a4	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000ab	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_Add_L_:

; 490  :         CheckNumber((NUMBER_HEADER*)v);

  000b0	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  000b7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 491  :         ResourceHolderUINT root;

  000bc	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000c0	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000c5	90		 npad	 1

; 492  :         NUMBER_HEADER* w = PMC_Add_X_L_Imp((NUMBER_HEADER*)v, u);

  000c6	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR u$[rbp]
  000cd	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  000d4	e8 00 00 00 00	 call	 ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
  000d9	48 89 45 48	 mov	 QWORD PTR w$[rbp], rax

; 493  :         root.HookNumber(w);

  000dd	48 8b 55 48	 mov	 rdx, QWORD PTR w$[rbp]
  000e1	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000e5	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 494  : #ifdef _DEBUG
; 495  :         CheckNumber((NUMBER_HEADER*)w);

  000ea	48 8b 4d 48	 mov	 rcx, QWORD PTR w$[rbp]
  000ee	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 496  : #endif
; 497  :         root.UnlinkNumber(w);

  000f3	48 8b 55 48	 mov	 rdx, QWORD PTR w$[rbp]
  000f7	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000fb	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 498  :         return ((PMC_HANDLE_UINT)w);

  00100	48 8b 45 48	 mov	 rax, QWORD PTR w$[rbp]
  00104	48 89 85 c8 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0010b	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0010f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00114	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR $T6[rbp]

; 499  :     }

  0011b	48 8b f8	 mov	 rdi, rax
  0011e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z$rtcFrameData
  00129	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0012e	48 8b c7	 mov	 rax, rdi
  00131	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00138	5f		 pop	 rdi
  00139	5d		 pop	 rbp
  0013a	c3		 ret	 0
$LN6@PMC_Add_L_:
?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_L_X
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
w$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?dtor$0@?0??PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_L_X'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_L_X'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
w$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?dtor$0@?0??PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_L_X'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_L_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_L_X'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z
_TEXT	SEGMENT
root$ = 8
nw$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_I_X, COMDAT

; 350  :     {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR [rsp+584]
  0002d	48 c7 85 e8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T7[rbp], -2
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 351  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

  00044	33 c0		 xor	 eax, eax
  00046	85 c0		 test	 eax, eax
  00048	74 2d		 je	 SHORT $LN2@PMC_Add_I_

; 352  :         {
; 353  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 354  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_Add_I_X;1");

  0004a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1DE@FNNDGJIA@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
  00058	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0005f	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0006b	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00072	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_Add_I_:

; 355  :         }
; 356  :         if (v == nullptr)

  00077	48 83 bd 28 02
	00 00 00	 cmp	 QWORD PTR v$[rbp], 0
  0007f	75 2d		 jne	 SHORT $LN3@PMC_Add_I_

; 357  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00081	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13JAOPNPKD@?$AAv@
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  0008f	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00096	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a2	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000a9	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_Add_I_:

; 358  :         CheckNumber((NUMBER_HEADER*)v);

  000ae	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  000b5	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 359  :         ResourceHolderUINT root;

  000ba	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000be	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000c3	90		 npad	 1

; 360  :         NUMBER_HEADER* nw =  PMC_Add_X_I_Imp((NUMBER_HEADER*)v, u);

  000c4	8b 95 20 02 00
	00		 mov	 edx, DWORD PTR u$[rbp]
  000ca	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  000d1	e8 00 00 00 00	 call	 ?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp
  000d6	48 89 45 48	 mov	 QWORD PTR nw$[rbp], rax

; 361  :         root.HookNumber(nw);

  000da	48 8b 55 48	 mov	 rdx, QWORD PTR nw$[rbp]
  000de	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000e2	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 362  : #ifdef _DEBUG
; 363  :         CheckNumber(nw);

  000e7	48 8b 4d 48	 mov	 rcx, QWORD PTR nw$[rbp]
  000eb	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 364  : #endif
; 365  :         root.UnlinkNumber(nw);

  000f0	48 8b 55 48	 mov	 rdx, QWORD PTR nw$[rbp]
  000f4	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  000f8	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 366  :         return ((PMC_HANDLE_UINT)nw);

  000fd	48 8b 45 48	 mov	 rax, QWORD PTR nw$[rbp]
  00101	48 89 85 c8 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  00108	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  0010c	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00111	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR $T6[rbp]

; 367  :     }

  00118	48 8b f8	 mov	 rdi, rax
  0011b	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z$rtcFrameData
  00126	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0012b	48 8b c7	 mov	 rax, rdi
  0012e	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00135	5f		 pop	 rdi
  00136	5d		 pop	 rbp
  00137	c3		 ret	 0
$LN6@PMC_Add_I_:
?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_I_X
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
nw$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?dtor$0@?0??PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_I_X'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_I_X'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$ = 8
nw$ = 72
$T4 = 296
$T5 = 376
$T6 = 456
$T7 = 488
u$ = 544
v$ = 552
?dtor$0@?0??PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_I_X'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_I_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@IPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_I_X'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
tv68 = 192
feature$ = 240
?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Add, COMDAT

; 569  :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 570  :         fp_Add_Imp = feature->PROCESSOR_FEATURE_ADX ? Add_Imp_using_ADCX : Add_Imp_using_ADC;

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR feature$[rbp]
  0003d	8b 00		 mov	 eax, DWORD PTR [rax]
  0003f	d1 e8		 shr	 eax, 1
  00041	83 e0 01	 and	 eax, 1
  00044	85 c0		 test	 eax, eax
  00046	74 10		 je	 SHORT $LN3@Initialize
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z ; Palmtree::Math::Core::Internal::Add_Imp_using_ADCX
  0004f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
  00056	eb 0e		 jmp	 SHORT $LN4@Initialize
$LN3@Initialize:
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPEA_K_K0101@Z ; Palmtree::Math::Core::Internal::Add_Imp_using_ADC
  0005f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
$LN4@Initialize:
  00066	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv68[rbp]
  0006d	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?fp_Add_Imp@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K0101@ZEA, rax

; 571  :         return (PMC_STATUS_OK);

  00074	33 c0		 xor	 eax, eax

; 572  :     }

  00076	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
;	COMDAT ?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z
_TEXT	SEGMENT
root$4 = 8
u_bit_count$5 = 72
v_bit_count$6 = 104
w_bit_count$7 = 136
w$8 = 168
$T9 = 392
$T10 = 424
tv134 = 440
u$ = 480
v$ = 488
?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp, COMDAT

; 522  :     {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR [rsp+536]
  0002f	48 c7 85 a8 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T10[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AF70AA4D_pmc_add@cpp
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 523  :         if (u->IS_ZERO)

  00046	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00050	83 e0 01	 and	 eax, 1
  00053	85 c0		 test	 eax, eax
  00055	74 35		 je	 SHORT $LN2@PMC_Add_X_

; 524  :         {
; 525  :             if (v->IS_ZERO)

  00057	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  0005e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00061	83 e0 01	 and	 eax, 1
  00064	85 c0		 test	 eax, eax
  00066	74 0e		 je	 SHORT $LN4@PMC_Add_X_

; 526  :                 return (&number_zero);

  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0006f	e9 3f 01 00 00	 jmp	 $LN1@PMC_Add_X_

; 527  :             else

  00074	eb 11		 jmp	 SHORT $LN5@PMC_Add_X_
$LN4@PMC_Add_X_:

; 528  :                 return (DuplicateNumber(v));

  00076	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  0007d	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00082	e9 2c 01 00 00	 jmp	 $LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 529  :         }
; 530  :         else

  00087	e9 27 01 00 00	 jmp	 $LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 531  :         {
; 532  :             if (v->IS_ZERO)

  0008c	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  00093	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00096	83 e0 01	 and	 eax, 1
  00099	85 c0		 test	 eax, eax
  0009b	74 16		 je	 SHORT $LN6@PMC_Add_X_

; 533  :                 return (DuplicateNumber(u));

  0009d	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  000a4	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  000a9	e9 05 01 00 00	 jmp	 $LN1@PMC_Add_X_

; 534  :             else

  000ae	e9 00 01 00 00	 jmp	 $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 535  :             {
; 536  :                 ResourceHolderUINT root;

  000b3	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  000b7	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000bc	90		 npad	 1

; 537  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000bd	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000c4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000c8	48 89 45 48	 mov	 QWORD PTR u_bit_count$5[rbp], rax

; 538  :                 __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

  000cc	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  000d3	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000d7	48 89 45 68	 mov	 QWORD PTR v_bit_count$6[rbp], rax

; 539  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  000db	48 8b 55 68	 mov	 rdx, QWORD PTR v_bit_count$6[rbp]
  000df	48 8b 4d 48	 mov	 rcx, QWORD PTR u_bit_count$5[rbp]
  000e3	e8 00 00 00 00	 call	 _MAXIMUM_UNIT
  000e8	48 ff c0	 inc	 rax
  000eb	48 89 85 88 00
	00 00		 mov	 QWORD PTR w_bit_count$7[rbp], rax

; 540  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000f2	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR w_bit_count$7[rbp]
  000f9	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  000fd	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00102	48 89 85 a8 00
	00 00		 mov	 QWORD PTR w$8[rbp], rax

; 541  :                 (*fp_Add_Imp)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, w->BLOCK, w->BLOCK_COUNT);

  00109	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?fp_Add_Imp@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K0101@ZEA
  00110	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv134[rbp], rax
  00117	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR w$8[rbp]
  0011e	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00122	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00127	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR w$8[rbp]
  0012e	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00132	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00137	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  0013e	4c 8b 48 18	 mov	 r9, QWORD PTR [rax+24]
  00142	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  00149	4c 8b 40 40	 mov	 r8, QWORD PTR [rax+64]
  0014d	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00154	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00158	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0015f	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00163	ff 95 b8 01 00
	00		 call	 QWORD PTR tv134[rbp]

; 542  :                 root.CheckNumber(w);

  00169	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR w$8[rbp]
  00170	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00174	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 543  :                 CommitNumber(w);

  00179	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR w$8[rbp]
  00180	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 544  :                 root.UnlinkNumber(w);

  00185	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR w$8[rbp]
  0018c	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00190	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 545  :                 return (w);

  00195	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR w$8[rbp]
  0019c	48 89 85 88 01
	00 00		 mov	 QWORD PTR $T9[rbp], rax
  001a3	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  001a7	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001ac	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR $T9[rbp]
$LN1@PMC_Add_X_:

; 546  :             }
; 547  :         }
; 548  :     }

  001b3	48 8b f8	 mov	 rdi, rax
  001b6	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z$rtcFrameData
  001c1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001c6	48 8b c7	 mov	 rax, rdi
  001c9	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  001d0	5f		 pop	 rdi
  001d1	5d		 pop	 rbp
  001d2	c3		 ret	 0
?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$4 = 8
u_bit_count$5 = 72
v_bit_count$6 = 104
w_bit_count$7 = 136
w$8 = 168
$T9 = 392
$T10 = 424
tv134 = 440
u$ = 480
v$ = 488
?dtor$0@?0??PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$4 = 8
u_bit_count$5 = 72
v_bit_count$6 = 104
w_bit_count$7 = 136
w$8 = 168
$T9 = 392
$T10 = 424
tv134 = 440
u$ = 480
v$ = 488
?dtor$0@?0??PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT

; 295  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 296  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT

; 291  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 290  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 291  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 292  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT

; 286  :         {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  0004c	4c 8b 8d 10 01
	00 00		 mov	 r9, QWORD PTR data$[rbp]
  00053	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0005a	ba 00 ff ff ff	 mov	 edx, -256		; ffffffffffffff00H
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0006b	90		 npad	 1

; 286  :         {

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 287  :         }

  0007d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT

; 124  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 125  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT

; 120  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 119  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 120  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 121  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT

; 115  :         {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  0004c	4c 8b 8d 10 01
	00 00		 mov	 r9, QWORD PTR param_name$[rbp]
  00053	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0005a	ba fe ff ff ff	 mov	 edx, -2
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0006b	90		 npad	 1

; 115  :         {

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 116  :         }

  0007d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT

; 70   :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 62   :         Exception(const Exception& p) noexcept(true)

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@XZ ; std::exception::exception
  00053	90		 npad	 1
  00054	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00062	48 89 08	 mov	 QWORD PTR [rax], rcx

; 63   :         {
; 64   :             _code = p._code;

  00065	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00073	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00076	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 65   :             _message = p._message;

  00079	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00087	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0008b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 66   :             _data = p._data;

  0008f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00096	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0009d	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  000a1	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 67   :         }

  000a5	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ac	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b3	5f		 pop	 rdi
  000b4	5d		 pop	 rbp
  000b5	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00038	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0004a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004f	90		 npad	 1
  00050	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00057	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@XZ ; std::exception::exception
  0005c	90		 npad	 1
  0005d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0006b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 55   :         {
; 56   :             _code = code;

  0006e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00075	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR code$[rbp]
  0007b	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 57   :             _message = message;

  0007e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0008c	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 58   :             _data = data;

  00090	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00097	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0009e	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 59   :         }

  000a2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b0	5f		 pop	 rdi
  000b1	5d		 pop	 rbp
  000b2	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 18 00 00 00	 mov	 edx, 24
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 90   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00042	74 14		 je	 SHORT $LN3@what
  00044	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  00056	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  0005f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  00066	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 92   :     }

  0006d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 85   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 86   :         __std_exception_destroy(&_Data);

  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 c0 08	 add	 rax, 8
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 __std_exception_destroy
  00066	90		 npad	 1

; 87   :     }

  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0exception@std@@QEAA@XZ PROC				; std::exception::exception, COMDAT

; 50   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 49   :         : _Data()

  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 c0 08	 add	 rax, 8
  0005e	48 8b f8	 mov	 rdi, rax
  00061	33 c0		 xor	 eax, eax
  00063	b9 10 00 00 00	 mov	 ecx, 16
  00068	f3 aa		 rep stosb

; 51   :     }

  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??0exception@std@@QEAA@XZ ENDP				; std::exception::exception
_TEXT	ENDS
END
