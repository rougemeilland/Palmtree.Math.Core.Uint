; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__372CD743_pmc_shift@c DB 01H
msvcjmc	ENDS
PUBLIC	RightShift_Imp_DIV
PUBLIC	RightShift_Imp
PUBLIC	LeftShift_Imp_DIV
PUBLIC	LeftShift_Imp
PUBLIC	Initialize_Shift
PUBLIC	PMC_RightShift_X_I
PUBLIC	PMC_RightShift_X_L
PUBLIC	PMC_LeftShift_X_I
PUBLIC	PMC_LeftShift_X_L
PUBLIC	__JustMyCode_Default
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$RightShift_Imp_DIV DD imagerel $LN16
	DD	imagerel $LN16+7171
	DD	imagerel $unwind$RightShift_Imp_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RightShift_Imp DD imagerel $LN16
	DD	imagerel $LN16+8006
	DD	imagerel $unwind$RightShift_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LeftShift_Imp_DIV DD imagerel $LN15
	DD	imagerel $LN15+7146
	DD	imagerel $unwind$LeftShift_Imp_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LeftShift_Imp DD imagerel $LN15
	DD	imagerel $LN15+7986
	DD	imagerel $unwind$LeftShift_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Shift DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$Initialize_Shift
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_RightShift_X_I DD imagerel $LN17
	DD	imagerel $LN17+527
	DD	imagerel $unwind$PMC_RightShift_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_RightShift_X_L DD imagerel $LN17
	DD	imagerel $LN17+529
	DD	imagerel $unwind$PMC_RightShift_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_LeftShift_X_I DD imagerel $LN15
	DD	imagerel $LN15+493
	DD	imagerel $unwind$PMC_LeftShift_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_LeftShift_X_L DD imagerel $LN15
	DD	imagerel $LN15+494
	DD	imagerel $unwind$PMC_LeftShift_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT_DIV DD imagerel _COPY_MEMORY_UNIT_DIV
	DD	imagerel _COPY_MEMORY_UNIT_DIV+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_UNIT DD imagerel _ZERO_MEMORY_UNIT
	DD	imagerel _ZERO_MEMORY_UNIT+88
	DD	imagerel $unwind$_ZERO_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_UNIT_DIV DD imagerel _ZERO_MEMORY_UNIT_DIV
	DD	imagerel _ZERO_MEMORY_UNIT_DIV+100
	DD	imagerel $unwind$_ZERO_MEMORY_UNIT_DIV
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_UNIT_DIV DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_UNIT DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT_DIV DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_LeftShift_X_L DD 035053401H
	DD	0118331dH
	DD	070110037H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_LeftShift_X_L$rtcName$0 DB 06eH
	DB	06fH
	DB	00H
	ORG $+5
PMC_LeftShift_X_L$rtcName$1 DB 06eH
	DB	06fH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_LeftShift_X_L$rtcVarDesc DD 0d8H
	DD	08H
	DQ	FLAT:PMC_LeftShift_X_L$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:PMC_LeftShift_X_L$rtcName$0
	ORG $+96
PMC_LeftShift_X_L$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_LeftShift_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_LeftShift_X_I DD 035053301H
	DD	0117331cH
	DD	070100037H
	DD	0500fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_LeftShift_X_I$rtcName$0 DB 06eH
	DB	06fH
	DB	00H
	ORG $+5
PMC_LeftShift_X_I$rtcName$1 DB 06eH
	DB	06fH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_LeftShift_X_I$rtcVarDesc DD 0d8H
	DD	08H
	DQ	FLAT:PMC_LeftShift_X_I$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:PMC_LeftShift_X_I$rtcName$0
	ORG $+96
PMC_LeftShift_X_I$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_LeftShift_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_RightShift_X_L DD 035053401H
	DD	0118331dH
	DD	070110037H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_RightShift_X_L$rtcName$0 DB 06eH
	DB	06fH
	DB	00H
	ORG $+5
PMC_RightShift_X_L$rtcName$1 DB 06eH
	DB	06fH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_RightShift_X_L$rtcVarDesc DD 0d8H
	DD	08H
	DQ	FLAT:PMC_RightShift_X_L$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:PMC_RightShift_X_L$rtcName$0
	ORG $+96
PMC_RightShift_X_L$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_RightShift_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_RightShift_X_I DD 035053301H
	DD	0117331cH
	DD	070100037H
	DD	0500fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_RightShift_X_I$rtcName$0 DB 06eH
	DB	06fH
	DB	00H
	ORG $+5
PMC_RightShift_X_I$rtcName$1 DB 06eH
	DB	06fH
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_RightShift_X_I$rtcVarDesc DD 0d8H
	DD	08H
	DQ	FLAT:PMC_RightShift_X_I$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:PMC_RightShift_X_I$rtcName$0
	ORG $+96
PMC_RightShift_X_I$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_RightShift_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Shift DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LeftShift_Imp DD 025053901H
	DD	011d2322H
	DD	070160041H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LeftShift_Imp_DIV DD 025053901H
	DD	011d2322H
	DD	070160041H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RightShift_Imp DD 025053901H
	DD	011d2322H
	DD	070160045H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RightShift_Imp_DIV DD 025053901H
	DD	011d2322H
	DD	070160045H
	DD	05015H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_UNIT_DIV
_TEXT	SEGMENT
tv64 = 192
d$ = 240
count$ = 248
_ZERO_MEMORY_UNIT_DIV PROC				; COMDAT

; 120  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 121  : #ifdef _M_IX86
; 122  :         __stosd((unsigned long*)d, 0, (unsigned long)count);
; 123  : #elif defined(_M_X64)
; 124  : #ifdef _MSC_VER
; 125  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	eax, DWORD PTR count$[rbp]
	mov	QWORD PTR tv64[rbp], rax
	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR tv64[rbp]
	rep stosd

; 126  : #elif defined(__GNUC__)
; 127  :         __stosq(d, 0, count);
; 128  : #else
; 129  : #error unknown compiler
; 130  : #endif
; 131  : #else
; 132  : #error unknown platform
; 133  : #endif
; 134  :     }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_UNIT PROC					; COMDAT

; 109  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 110  : #ifdef _M_IX86
; 111  :         __stosd((unsigned long*)d, 0, (unsigned long)count);
; 112  : #elif defined(_M_X64)
; 113  :         __stosq(d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosq

; 114  : #else
; 115  : #error unknown platform
; 116  : #endif
; 117  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT_DIV
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT_DIV PROC				; COMDAT

; 70   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 71   : #ifdef _M_IX86
; 72   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 73   : #elif defined(_M_X64)
; 74   : #ifdef _MSC_VER
; 75   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR count$[rbp]
	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	ecx, eax
	rep movsd

; 76   : #elif defined(__GNUC__)
; 77   :         __movsq(d, s, count);
; 78   : #else
; 79   : #error unknown compiler
; 80   : #endif
; 81   : #else
; 82   : #error unknown platform
; 83   : #endif
; 84   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT PROC					; COMDAT

; 59   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 60   : #ifdef _M_IX86
; 61   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 62   : #elif defined(_M_X64)
; 63   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsq

; 64   : #else
; 65   : #error unknown platform
; 66   : #endif
; 67   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT PMC_LeftShift_X_L
_TEXT	SEGMENT
np$ = 8
no$ = 40
result$ = 68
p_bit_count$5 = 104
o_bit_count$6 = 136
no_light_check_code$7 = 168
p$ = 416
n$ = 424
o$ = 432
PMC_LeftShift_X_L PROC					; COMDAT

; 714  : {

$LN15:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	lea	rcx, OFFSET FLAT:__372CD743_pmc_shift@c
	call	__CheckForDebuggerJustMyCode

; 715  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_LeftSh

; 716  :     {
; 717  :         // _UINT64_T が 1 ワードで表現しきれない処理系には対応しない
; 718  :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6
	jmp	$LN1@PMC_LeftSh
$LN2@PMC_LeftSh:

; 719  :     }
; 720  :     if (p == NULL)

	cmp	QWORD PTR p$[rbp], 0
	jne	SHORT $LN3@PMC_LeftSh

; 721  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_LeftSh
$LN3@PMC_LeftSh:

; 722  :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN4@PMC_LeftSh

; 723  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_LeftSh
$LN4@PMC_LeftSh:

; 724  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 725  :     NUMBER_HEADER* no;
; 726  :     PMC_STATUS_CODE result;
; 727  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_LeftSh

; 728  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_LeftSh
$LN5@PMC_LeftSh:

; 729  :     if (np->IS_ZERO)

	mov	rax, QWORD PTR np$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_LeftSh

; 730  :         *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	$LN7@PMC_LeftSh
$LN6@PMC_LeftSh:

; 731  :     else if (n == 0)

	cmp	QWORD PTR n$[rbp], 0
	jne	SHORT $LN8@PMC_LeftSh

; 732  :     {
; 733  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR no$[rbp]
	mov	rcx, QWORD PTR np$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN10@PMC_LeftSh

; 734  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_LeftSh
$LN10@PMC_LeftSh:

; 735  :         *o = no;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR no$[rbp]
	mov	QWORD PTR [rax], rcx

; 736  :     }

	jmp	$LN9@PMC_LeftSh
$LN8@PMC_LeftSh:

; 737  :     else
; 738  :     {
; 739  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR np$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR p_bit_count$5[rbp], rax

; 740  :         __UNIT_TYPE o_bit_count = p_bit_count + (__UNIT_TYPE)n;

	mov	rax, QWORD PTR n$[rbp]
	mov	rcx, QWORD PTR p_bit_count$5[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o_bit_count$6[rbp], rax

; 741  :         __UNIT_TYPE no_light_check_code;
; 742  :         if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$7[rbp]
	mov	rdx, QWORD PTR o_bit_count$6[rbp]
	lea	rcx, QWORD PTR no$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_LeftSh

; 743  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_LeftSh
$LN11@PMC_LeftSh:

; 744  :         LeftShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, (__UNIT_TYPE)n, no->BLOCK, FALSE);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR no$[rbp]
	mov	r9, QWORD PTR [rax+56]
	mov	r8, QWORD PTR n$[rbp]
	mov	rax, QWORD PTR np$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR np$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	LeftShift_Imp

; 745  :         if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR no_light_check_code$7[rbp]
	mov	rax, QWORD PTR no$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN12@PMC_LeftSh

; 746  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_LeftSh
$LN12@PMC_LeftSh:

; 747  :         CommitNumber(no);

	mov	rcx, QWORD PTR no$[rbp]
	call	CommitNumber

; 748  :         *o = no;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR no$[rbp]
	mov	QWORD PTR [rax], rcx
$LN9@PMC_LeftSh:
$LN7@PMC_LeftSh:

; 749  :     }
; 750  : #ifdef _DEBUG
; 751  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_LeftSh

; 752  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_LeftSh
$LN13@PMC_LeftSh:

; 753  : #endif
; 754  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_LeftSh:

; 755  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_LeftShift_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
PMC_LeftShift_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT PMC_LeftShift_X_I
_TEXT	SEGMENT
np$ = 8
no$ = 40
result$ = 68
p_bit_count$5 = 104
o_bit_count$6 = 136
no_light_check_code$7 = 168
p$ = 416
n$ = 424
o$ = 432
PMC_LeftShift_X_I PROC					; COMDAT

; 670  : {

$LN15:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	lea	rcx, OFFSET FLAT:__372CD743_pmc_shift@c
	call	__CheckForDebuggerJustMyCode

; 671  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_LeftSh

; 672  :     {
; 673  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 674  :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6
	jmp	$LN1@PMC_LeftSh
$LN2@PMC_LeftSh:

; 675  :     }
; 676  :     if (p == NULL)

	cmp	QWORD PTR p$[rbp], 0
	jne	SHORT $LN3@PMC_LeftSh

; 677  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_LeftSh
$LN3@PMC_LeftSh:

; 678  :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN4@PMC_LeftSh

; 679  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_LeftSh
$LN4@PMC_LeftSh:

; 680  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 681  :     NUMBER_HEADER* no;
; 682  :     PMC_STATUS_CODE result;
; 683  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_LeftSh

; 684  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_LeftSh
$LN5@PMC_LeftSh:

; 685  :     if (np->IS_ZERO)

	mov	rax, QWORD PTR np$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_LeftSh

; 686  :         *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	$LN7@PMC_LeftSh
$LN6@PMC_LeftSh:

; 687  :     else if (n == 0)

	cmp	DWORD PTR n$[rbp], 0
	jne	SHORT $LN8@PMC_LeftSh

; 688  :     {
; 689  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR no$[rbp]
	mov	rcx, QWORD PTR np$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN10@PMC_LeftSh

; 690  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_LeftSh
$LN10@PMC_LeftSh:

; 691  :         *o = no;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR no$[rbp]
	mov	QWORD PTR [rax], rcx

; 692  :     }

	jmp	$LN9@PMC_LeftSh
$LN8@PMC_LeftSh:

; 693  :     else
; 694  :     {
; 695  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR np$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR p_bit_count$5[rbp], rax

; 696  :         __UNIT_TYPE o_bit_count = p_bit_count + n;

	mov	eax, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR p_bit_count$5[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o_bit_count$6[rbp], rax

; 697  :         __UNIT_TYPE no_light_check_code;
; 698  :         if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$7[rbp]
	mov	rdx, QWORD PTR o_bit_count$6[rbp]
	lea	rcx, QWORD PTR no$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_LeftSh

; 699  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_LeftSh
$LN11@PMC_LeftSh:

; 700  :         LeftShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, n, no->BLOCK, FALSE);

	mov	eax, DWORD PTR n$[rbp]
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, QWORD PTR no$[rbp]
	mov	r9, QWORD PTR [rcx+56]
	mov	r8d, eax
	mov	rax, QWORD PTR np$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR np$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	LeftShift_Imp

; 701  :         if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR no_light_check_code$7[rbp]
	mov	rax, QWORD PTR no$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN12@PMC_LeftSh

; 702  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_LeftSh
$LN12@PMC_LeftSh:

; 703  :         CommitNumber(no);

	mov	rcx, QWORD PTR no$[rbp]
	call	CommitNumber

; 704  :         *o = no;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR no$[rbp]
	mov	QWORD PTR [rax], rcx
$LN9@PMC_LeftSh:
$LN7@PMC_LeftSh:

; 705  :     }
; 706  : #ifdef _DEBUG
; 707  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_LeftSh

; 708  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_LeftSh
$LN13@PMC_LeftSh:

; 709  : #endif
; 710  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_LeftSh:

; 711  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_LeftShift_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
PMC_LeftShift_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT PMC_RightShift_X_L
_TEXT	SEGMENT
np$ = 8
no$ = 40
result$ = 68
p_bit_count$5 = 104
o_bit_count$6 = 136
no_light_check_code$7 = 168
p$ = 416
n$ = 424
o$ = 432
PMC_RightShift_X_L PROC					; COMDAT

; 621  : {

$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	lea	rcx, OFFSET FLAT:__372CD743_pmc_shift@c
	call	__CheckForDebuggerJustMyCode

; 622  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_RightS

; 623  :     {
; 624  :         // _UINT64_T が 1 ワードで表現しきれない処理系には対応しない
; 625  :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6
	jmp	$LN1@PMC_RightS
$LN2@PMC_RightS:

; 626  :     }
; 627  :     if (p == NULL)

	cmp	QWORD PTR p$[rbp], 0
	jne	SHORT $LN3@PMC_RightS

; 628  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_RightS
$LN3@PMC_RightS:

; 629  :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN4@PMC_RightS

; 630  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_RightS
$LN4@PMC_RightS:

; 631  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 632  :     NUMBER_HEADER* no;
; 633  :     PMC_STATUS_CODE result;
; 634  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_RightS

; 635  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_RightS
$LN5@PMC_RightS:

; 636  :     if (np->IS_ZERO)

	mov	rax, QWORD PTR np$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_RightS

; 637  :         *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	$LN7@PMC_RightS
$LN6@PMC_RightS:

; 638  :     else if (n == 0)

	cmp	QWORD PTR n$[rbp], 0
	jne	SHORT $LN8@PMC_RightS

; 639  :     {
; 640  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR no$[rbp]
	mov	rcx, QWORD PTR np$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN10@PMC_RightS

; 641  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_RightS
$LN10@PMC_RightS:

; 642  :         *o = no;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR no$[rbp]
	mov	QWORD PTR [rax], rcx

; 643  :     }

	jmp	$LN9@PMC_RightS
$LN8@PMC_RightS:

; 644  :     else
; 645  :     {
; 646  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR np$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR p_bit_count$5[rbp], rax

; 647  :         if (p_bit_count <= n)

	mov	rax, QWORD PTR n$[rbp]
	cmp	QWORD PTR p_bit_count$5[rbp], rax
	ja	SHORT $LN11@PMC_RightS

; 648  :             *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	$LN12@PMC_RightS
$LN11@PMC_RightS:

; 649  :         else
; 650  :         {
; 651  :             __UNIT_TYPE o_bit_count = p_bit_count - (__UNIT_TYPE)n;

	mov	rax, QWORD PTR n$[rbp]
	mov	rcx, QWORD PTR p_bit_count$5[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o_bit_count$6[rbp], rax

; 652  :             __UNIT_TYPE no_light_check_code;
; 653  :             if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$7[rbp]
	mov	rdx, QWORD PTR o_bit_count$6[rbp]
	lea	rcx, QWORD PTR no$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_RightS

; 654  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_RightS
$LN13@PMC_RightS:

; 655  :             RightShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, (__UNIT_TYPE)n, no->BLOCK, FALSE);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR no$[rbp]
	mov	r9, QWORD PTR [rax+56]
	mov	r8, QWORD PTR n$[rbp]
	mov	rax, QWORD PTR np$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR np$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	RightShift_Imp

; 656  :             if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR no_light_check_code$7[rbp]
	mov	rax, QWORD PTR no$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_RightS

; 657  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_RightS
$LN14@PMC_RightS:

; 658  :             CommitNumber(no);

	mov	rcx, QWORD PTR no$[rbp]
	call	CommitNumber

; 659  :             *o = no;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR no$[rbp]
	mov	QWORD PTR [rax], rcx
$LN12@PMC_RightS:
$LN9@PMC_RightS:
$LN7@PMC_RightS:

; 660  :         }
; 661  :     }
; 662  : #ifdef _DEBUG
; 663  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN15@PMC_RightS

; 664  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_RightS
$LN15@PMC_RightS:

; 665  : #endif
; 666  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_RightS:

; 667  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_RightShift_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
PMC_RightShift_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT PMC_RightShift_X_I
_TEXT	SEGMENT
np$ = 8
no$ = 40
result$ = 68
p_bit_count$5 = 104
o_bit_count$6 = 136
no_light_check_code$7 = 168
p$ = 416
n$ = 424
o$ = 432
PMC_RightShift_X_I PROC					; COMDAT

; 572  : {

$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	lea	rcx, OFFSET FLAT:__372CD743_pmc_shift@c
	call	__CheckForDebuggerJustMyCode

; 573  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_RightS

; 574  :     {
; 575  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 576  :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6
	jmp	$LN1@PMC_RightS
$LN2@PMC_RightS:

; 577  :     }
; 578  :     if (p == NULL)

	cmp	QWORD PTR p$[rbp], 0
	jne	SHORT $LN3@PMC_RightS

; 579  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_RightS
$LN3@PMC_RightS:

; 580  :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN4@PMC_RightS

; 581  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_RightS
$LN4@PMC_RightS:

; 582  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 583  :     NUMBER_HEADER* no;
; 584  :     PMC_STATUS_CODE result;
; 585  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_RightS

; 586  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_RightS
$LN5@PMC_RightS:

; 587  :     if (np->IS_ZERO)

	mov	rax, QWORD PTR np$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_RightS

; 588  :         *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	$LN7@PMC_RightS
$LN6@PMC_RightS:

; 589  :     else if (n == 0)

	cmp	DWORD PTR n$[rbp], 0
	jne	SHORT $LN8@PMC_RightS

; 590  :     {
; 591  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR no$[rbp]
	mov	rcx, QWORD PTR np$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN10@PMC_RightS

; 592  :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_RightS
$LN10@PMC_RightS:

; 593  :         *o = no;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR no$[rbp]
	mov	QWORD PTR [rax], rcx

; 594  :     }

	jmp	$LN9@PMC_RightS
$LN8@PMC_RightS:

; 595  :     else
; 596  :     {
; 597  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR np$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR p_bit_count$5[rbp], rax

; 598  :         if (p_bit_count <= n)

	mov	eax, DWORD PTR n$[rbp]
	cmp	QWORD PTR p_bit_count$5[rbp], rax
	ja	SHORT $LN11@PMC_RightS

; 599  :             *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	$LN12@PMC_RightS
$LN11@PMC_RightS:

; 600  :         else
; 601  :         {
; 602  :             __UNIT_TYPE o_bit_count = p_bit_count - n;

	mov	eax, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR p_bit_count$5[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o_bit_count$6[rbp], rax

; 603  :             __UNIT_TYPE no_light_check_code;
; 604  :             if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$7[rbp]
	mov	rdx, QWORD PTR o_bit_count$6[rbp]
	lea	rcx, QWORD PTR no$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_RightS

; 605  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_RightS
$LN13@PMC_RightS:

; 606  :             RightShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, n, no->BLOCK, FALSE);

	mov	eax, DWORD PTR n$[rbp]
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, QWORD PTR no$[rbp]
	mov	r9, QWORD PTR [rcx+56]
	mov	r8d, eax
	mov	rax, QWORD PTR np$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR np$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	RightShift_Imp

; 607  :             if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR no_light_check_code$7[rbp]
	mov	rax, QWORD PTR no$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_RightS

; 608  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_RightS
$LN14@PMC_RightS:

; 609  :             CommitNumber(no);

	mov	rcx, QWORD PTR no$[rbp]
	call	CommitNumber

; 610  :             *o = no;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR no$[rbp]
	mov	QWORD PTR [rax], rcx
$LN12@PMC_RightS:
$LN9@PMC_RightS:
$LN7@PMC_RightS:

; 611  :         }
; 612  :     }
; 613  : #ifdef _DEBUG
; 614  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN15@PMC_RightS

; 615  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_RightS
$LN15@PMC_RightS:

; 616  : #endif
; 617  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_RightS:

; 618  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_RightShift_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
PMC_RightShift_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT Initialize_Shift
_TEXT	SEGMENT
feature$ = 224
Initialize_Shift PROC					; COMDAT

; 758  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__372CD743_pmc_shift@c
	call	__CheckForDebuggerJustMyCode

; 759  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 760  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Initialize_Shift ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT LeftShift_Imp
_TEXT	SEGMENT
pp$ = 8
p_count$ = 40
op$ = 72
n_word_count$ = 104
n_lshift_bit_count$ = 136
n_rshift_bit_count$1 = 168
temp$2 = 200
work$3 = 232
count$4 = 264
p$ = 512
p_word_count$ = 520
n$ = 528
o$ = 536
padding_zero$ = 544
LeftShift_Imp PROC					; COMDAT

; 302  : {

$LN15:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 520				; 00000208H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+552]
	lea	rcx, OFFSET FLAT:__372CD743_pmc_shift@c
	call	__CheckForDebuggerJustMyCode

; 303  :     __UNIT_TYPE* pp = p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR pp$[rbp], rax

; 304  :     __UNIT_TYPE p_count = p_word_count;

	mov	rax, QWORD PTR p_word_count$[rbp]
	mov	QWORD PTR p_count$[rbp], rax

; 305  :     __UNIT_TYPE* op = o;

	mov	rax, QWORD PTR o$[rbp]
	mov	QWORD PTR op$[rbp], rax

; 306  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	xor	edx, edx
	mov	rax, QWORD PTR n$[rbp]
	mov	ecx, 64					; 00000040H
	div	rcx
	mov	QWORD PTR n_word_count$[rbp], rax

; 307  :     __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	xor	edx, edx
	mov	rax, QWORD PTR n$[rbp]
	mov	ecx, 64					; 00000040H
	div	rcx
	mov	rax, rdx
	mov	QWORD PTR n_lshift_bit_count$[rbp], rax

; 308  :     if (n_lshift_bit_count == 0)

	cmp	QWORD PTR n_lshift_bit_count$[rbp], 0
	jne	SHORT $LN4@LeftShift_

; 309  :     {
; 310  :         // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 311  :         _COPY_MEMORY_UNIT(op + n_word_count, pp, p_count);

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR n_word_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	r8, QWORD PTR p_count$[rbp]
	mov	rdx, QWORD PTR pp$[rbp]
	mov	rcx, rax
	call	_COPY_MEMORY_UNIT

; 312  :         if (padding_zero)

	cmp	DWORD PTR padding_zero$[rbp], 0
	je	SHORT $LN6@LeftShift_

; 313  :             _ZERO_MEMORY_UNIT(op, n_word_count);

	mov	rdx, QWORD PTR n_word_count$[rbp]
	mov	rcx, QWORD PTR op$[rbp]
	call	_ZERO_MEMORY_UNIT
$LN6@LeftShift_:

; 314  :     }

	jmp	$LN5@LeftShift_
$LN4@LeftShift_:

; 315  :     else
; 316  :     {
; 317  :         __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;

	mov	eax, 64					; 00000040H
	sub	rax, QWORD PTR n_lshift_bit_count$[rbp]
	mov	QWORD PTR n_rshift_bit_count$1[rbp], rax

; 318  :         pp += p_count - 1;

	mov	rax, QWORD PTR pp$[rbp]
	mov	rcx, QWORD PTR p_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*8-8]
	mov	QWORD PTR pp$[rbp], rax

; 319  :         op += p_count + n_word_count;

	mov	rax, QWORD PTR n_word_count$[rbp]
	mov	rcx, QWORD PTR p_count$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR op$[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR op$[rbp], rax

; 320  :         p_count -= 1;

	mov	rax, QWORD PTR p_count$[rbp]
	dec	rax
	mov	QWORD PTR p_count$[rbp], rax

; 321  :         __UNIT_TYPE temp = *pp;

	mov	rax, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR temp$2[rbp], rax

; 322  :         __UNIT_TYPE work = temp >> n_rshift_bit_count;

	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax

; 323  :         if (work != 0)

	cmp	QWORD PTR work$3[rbp], 0
	je	SHORT $LN7@LeftShift_

; 324  :             *op = work;

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rax], rcx
$LN7@LeftShift_:

; 325  :         --pp;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 8
	mov	QWORD PTR pp$[rbp], rax

; 326  :         --op;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 8
	mov	QWORD PTR op$[rbp], rax

; 327  : 
; 328  :         __UNIT_TYPE count = p_count >> 5;

	mov	rax, QWORD PTR p_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$4[rbp], rax
$LN2@LeftShift_:

; 329  :         while (count != 0)

	cmp	QWORD PTR count$4[rbp], 0
	je	$LN3@LeftShift_

; 330  :         {
; 331  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 332  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 333  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 334  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -3
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 335  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -4
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 336  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -5
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 337  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -6
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 338  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -7
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 339  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -8
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -8
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 340  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -9
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -9
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 341  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -10
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -10
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 342  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -11
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -11
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 343  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -12
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -12
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 344  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -13
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -13
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 345  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -14
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -14
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 346  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -15
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -15
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 347  :             work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -16
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -16
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 348  :             work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -17
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -17
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 349  :             work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -18
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -18
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 350  :             work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -19
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -19
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 351  :             work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -20
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -20
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 352  :             work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -21
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -21
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 353  :             work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -22
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -22
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 354  :             work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -23
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -23
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 355  :             work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -24
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -24
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 356  :             work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -25
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -25
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 357  :             work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -26
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -26
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 358  :             work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -27
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -27
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 359  :             work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -28
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -28
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 360  :             work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -29
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -29
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 361  :             work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -30
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -30
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 362  :             work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -31
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -31
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 363  :             pp -= 32;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 256				; 00000100H
	mov	QWORD PTR pp$[rbp], rax

; 364  :             op -= 32;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 256				; 00000100H
	mov	QWORD PTR op$[rbp], rax

; 365  :             --count;

	mov	rax, QWORD PTR count$4[rbp]
	dec	rax
	mov	QWORD PTR count$4[rbp], rax

; 366  :         }

	jmp	$LN2@LeftShift_
$LN3@LeftShift_:

; 367  : 
; 368  :         if (p_count & 0x10)

	mov	rax, QWORD PTR p_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN8@LeftShift_

; 369  :         {
; 370  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 371  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 372  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 373  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -3
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 374  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -4
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 375  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -5
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 376  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -6
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 377  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -7
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 378  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -8
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -8
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 379  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -9
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -9
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 380  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -10
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -10
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 381  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -11
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -11
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 382  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -12
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -12
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 383  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -13
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -13
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 384  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -14
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -14
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 385  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -15
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -15
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 386  :             pp -= 16;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 128				; 00000080H
	mov	QWORD PTR pp$[rbp], rax

; 387  :             op -= 16;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 128				; 00000080H
	mov	QWORD PTR op$[rbp], rax
$LN8@LeftShift_:

; 388  :         }
; 389  : 
; 390  :         if (p_count & 0x8)

	mov	rax, QWORD PTR p_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN9@LeftShift_

; 391  :         {
; 392  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 393  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 394  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 395  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -3
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 396  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -4
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 397  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -5
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 398  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -6
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 399  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -7
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 400  :             pp -= 8;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 64					; 00000040H
	mov	QWORD PTR pp$[rbp], rax

; 401  :             op -= 8;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 64					; 00000040H
	mov	QWORD PTR op$[rbp], rax
$LN9@LeftShift_:

; 402  :         }
; 403  : 
; 404  :         if (p_count & 0x4)

	mov	rax, QWORD PTR p_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN10@LeftShift_

; 405  :         {
; 406  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 407  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 408  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 409  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -3
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 410  :             pp -= 4;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR pp$[rbp], rax

; 411  :             op -= 4;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR op$[rbp], rax
$LN10@LeftShift_:

; 412  :         }
; 413  : 
; 414  :         if (p_count & 0x2)

	mov	rax, QWORD PTR p_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN11@LeftShift_

; 415  :         {
; 416  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 417  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 418  :             pp -= 2;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 16
	mov	QWORD PTR pp$[rbp], rax

; 419  :             op -= 2;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 16
	mov	QWORD PTR op$[rbp], rax
$LN11@LeftShift_:

; 420  :         }
; 421  : 
; 422  :         if (p_count & 0x1)

	mov	rax, QWORD PTR p_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	$LN12@LeftShift_

; 423  :         {
; 424  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 425  :             pp -= 1;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 8
	mov	QWORD PTR pp$[rbp], rax

; 426  :             op -= 1;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 8
	mov	QWORD PTR op$[rbp], rax
$LN12@LeftShift_:

; 427  :         }
; 428  :         work = temp << n_lshift_bit_count;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	QWORD PTR work$3[rbp], rax

; 429  :         *op = work;

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rax], rcx

; 430  : 
; 431  :         if (padding_zero)

	cmp	DWORD PTR padding_zero$[rbp], 0
	je	SHORT $LN13@LeftShift_

; 432  :             _ZERO_MEMORY_UNIT(o, n_word_count);

	mov	rdx, QWORD PTR n_word_count$[rbp]
	mov	rcx, QWORD PTR o$[rbp]
	call	_ZERO_MEMORY_UNIT
$LN13@LeftShift_:
$LN5@LeftShift_:

; 433  :     }
; 434  : }

	lea	rsp, QWORD PTR [rbp+488]
	pop	rdi
	pop	rbp
	ret	0
LeftShift_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT LeftShift_Imp_DIV
_TEXT	SEGMENT
pp$ = 8
p_count$ = 40
op$ = 72
n_word_count$ = 104
n_lshift_bit_count$ = 136
n_rshift_bit_count$1 = 168
temp$2 = 196
work$3 = 228
count$4 = 264
p$ = 512
p_word_count$ = 520
n$ = 528
o$ = 536
padding_zero$ = 544
LeftShift_Imp_DIV PROC					; COMDAT

; 437  : {

$LN15:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 520				; 00000208H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+552]
	lea	rcx, OFFSET FLAT:__372CD743_pmc_shift@c
	call	__CheckForDebuggerJustMyCode

; 438  :     __UNIT_TYPE_DIV* pp = p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR pp$[rbp], rax

; 439  :     __UNIT_TYPE p_count = p_word_count;

	mov	rax, QWORD PTR p_word_count$[rbp]
	mov	QWORD PTR p_count$[rbp], rax

; 440  :     __UNIT_TYPE_DIV* op = o;

	mov	rax, QWORD PTR o$[rbp]
	mov	QWORD PTR op$[rbp], rax

; 441  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	xor	edx, edx
	mov	rax, QWORD PTR n$[rbp]
	mov	ecx, 64					; 00000040H
	div	rcx
	mov	QWORD PTR n_word_count$[rbp], rax

; 442  :     __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	xor	edx, edx
	mov	rax, QWORD PTR n$[rbp]
	mov	ecx, 64					; 00000040H
	div	rcx
	mov	rax, rdx
	mov	QWORD PTR n_lshift_bit_count$[rbp], rax

; 443  :     if (n_lshift_bit_count == 0)

	cmp	QWORD PTR n_lshift_bit_count$[rbp], 0
	jne	SHORT $LN4@LeftShift_

; 444  :     {
; 445  :         // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 446  :         _COPY_MEMORY_UNIT_DIV(op + n_word_count, pp, p_count);

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR n_word_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	r8, QWORD PTR p_count$[rbp]
	mov	rdx, QWORD PTR pp$[rbp]
	mov	rcx, rax
	call	_COPY_MEMORY_UNIT_DIV

; 447  :         if (padding_zero)

	cmp	DWORD PTR padding_zero$[rbp], 0
	je	SHORT $LN6@LeftShift_

; 448  :             _ZERO_MEMORY_UNIT_DIV(op, n_word_count);

	mov	rdx, QWORD PTR n_word_count$[rbp]
	mov	rcx, QWORD PTR op$[rbp]
	call	_ZERO_MEMORY_UNIT_DIV
$LN6@LeftShift_:

; 449  :     }

	jmp	$LN5@LeftShift_
$LN4@LeftShift_:

; 450  :     else
; 451  :     {
; 452  :         __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;

	mov	eax, 64					; 00000040H
	sub	rax, QWORD PTR n_lshift_bit_count$[rbp]
	mov	QWORD PTR n_rshift_bit_count$1[rbp], rax

; 453  :         pp += p_count - 1;

	mov	rax, QWORD PTR pp$[rbp]
	mov	rcx, QWORD PTR p_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4-4]
	mov	QWORD PTR pp$[rbp], rax

; 454  :         op += p_count + n_word_count;

	mov	rax, QWORD PTR n_word_count$[rbp]
	mov	rcx, QWORD PTR p_count$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR op$[rbp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR op$[rbp], rax

; 455  :         p_count -= 1;

	mov	rax, QWORD PTR p_count$[rbp]
	dec	rax
	mov	QWORD PTR p_count$[rbp], rax

; 456  :         __UNIT_TYPE_DIV temp = *pp;

	mov	rax, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR temp$2[rbp], eax

; 457  :         __UNIT_TYPE_DIV work = temp >> n_rshift_bit_count;

	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax

; 458  :         if (work != 0)

	cmp	DWORD PTR work$3[rbp], 0
	je	SHORT $LN7@LeftShift_

; 459  :             *op = work;

	mov	rax, QWORD PTR op$[rbp]
	mov	ecx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rax], ecx
$LN7@LeftShift_:

; 460  :         --pp;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 4
	mov	QWORD PTR pp$[rbp], rax

; 461  :         --op;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 4
	mov	QWORD PTR op$[rbp], rax

; 462  : 
; 463  :         __UNIT_TYPE count = p_count >> 5;

	mov	rax, QWORD PTR p_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$4[rbp], rax
$LN2@LeftShift_:

; 464  :         while (count != 0)

	cmp	QWORD PTR count$4[rbp], 0
	je	$LN3@LeftShift_

; 465  :         {
; 466  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 467  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 468  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 469  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 470  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -4
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 471  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -5
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 472  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -6
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 473  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -7
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 474  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -8
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -8
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 475  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -9
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -9
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 476  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -10
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -10
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 477  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -11
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -11
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 478  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -12
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -12
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 479  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -13
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -13
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 480  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -14
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -14
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 481  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -15
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -15
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 482  :             work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -16
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -16
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 483  :             work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -17
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -17
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 484  :             work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -18
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -18
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 485  :             work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -19
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -19
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 486  :             work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -20
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -20
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 487  :             work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -21
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -21
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 488  :             work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -22
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -22
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 489  :             work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -23
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -23
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 490  :             work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -24
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -24
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 491  :             work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -25
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -25
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 492  :             work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -26
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -26
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 493  :             work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -27
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -27
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 494  :             work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -28
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -28
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 495  :             work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -29
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -29
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 496  :             work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -30
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -30
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 497  :             work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -31
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -31
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 498  :             pp -= 32;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 128				; 00000080H
	mov	QWORD PTR pp$[rbp], rax

; 499  :             op -= 32;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 128				; 00000080H
	mov	QWORD PTR op$[rbp], rax

; 500  :             --count;

	mov	rax, QWORD PTR count$4[rbp]
	dec	rax
	mov	QWORD PTR count$4[rbp], rax

; 501  :         }

	jmp	$LN2@LeftShift_
$LN3@LeftShift_:

; 502  : 
; 503  :         if (p_count & 0x10)

	mov	rax, QWORD PTR p_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN8@LeftShift_

; 504  :         {
; 505  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 506  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 507  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 508  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 509  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -4
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 510  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -5
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 511  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -6
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 512  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -7
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 513  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -8
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -8
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 514  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -9
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -9
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 515  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -10
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -10
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 516  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -11
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -11
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 517  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -12
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -12
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 518  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -13
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -13
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 519  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -14
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -14
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 520  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -15
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -15
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 521  :             pp -= 16;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 64					; 00000040H
	mov	QWORD PTR pp$[rbp], rax

; 522  :             op -= 16;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 64					; 00000040H
	mov	QWORD PTR op$[rbp], rax
$LN8@LeftShift_:

; 523  :         }
; 524  : 
; 525  :         if (p_count & 0x8)

	mov	rax, QWORD PTR p_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN9@LeftShift_

; 526  :         {
; 527  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 528  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 529  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 530  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 531  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -4
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 532  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -5
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 533  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -6
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 534  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -7
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 535  :             pp -= 8;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR pp$[rbp], rax

; 536  :             op -= 8;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR op$[rbp], rax
$LN9@LeftShift_:

; 537  :         }
; 538  : 
; 539  :         if (p_count & 0x4)

	mov	rax, QWORD PTR p_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN10@LeftShift_

; 540  :         {
; 541  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 542  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 543  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 544  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 545  :             pp -= 4;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 16
	mov	QWORD PTR pp$[rbp], rax

; 546  :             op -= 4;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 16
	mov	QWORD PTR op$[rbp], rax
$LN10@LeftShift_:

; 547  :         }
; 548  : 
; 549  :         if (p_count & 0x2)

	mov	rax, QWORD PTR p_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN11@LeftShift_

; 550  :         {
; 551  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 552  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 553  :             pp -= 2;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 8
	mov	QWORD PTR pp$[rbp], rax

; 554  :             op -= 2;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 8
	mov	QWORD PTR op$[rbp], rax
$LN11@LeftShift_:

; 555  :         }
; 556  : 
; 557  :         if (p_count & 0x1)

	mov	rax, QWORD PTR p_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN12@LeftShift_

; 558  :         {
; 559  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_rshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 560  :             pp -= 1;

	mov	rax, QWORD PTR pp$[rbp]
	sub	rax, 4
	mov	QWORD PTR pp$[rbp], rax

; 561  :             op -= 1;

	mov	rax, QWORD PTR op$[rbp]
	sub	rax, 4
	mov	QWORD PTR op$[rbp], rax
$LN12@LeftShift_:

; 562  :         }
; 563  :         work = temp << n_lshift_bit_count;

	mov	rax, QWORD PTR n_lshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	DWORD PTR work$3[rbp], eax

; 564  :         *op = work;

	mov	rax, QWORD PTR op$[rbp]
	mov	ecx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rax], ecx

; 565  : 
; 566  :         if (padding_zero)

	cmp	DWORD PTR padding_zero$[rbp], 0
	je	SHORT $LN13@LeftShift_

; 567  :             _ZERO_MEMORY_UNIT_DIV(o, n_word_count);

	mov	rdx, QWORD PTR n_word_count$[rbp]
	mov	rcx, QWORD PTR o$[rbp]
	call	_ZERO_MEMORY_UNIT_DIV
$LN13@LeftShift_:
$LN5@LeftShift_:

; 568  :     }
; 569  : }

	lea	rsp, QWORD PTR [rbp+488]
	pop	rdi
	pop	rbp
	ret	0
LeftShift_Imp_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT RightShift_Imp
_TEXT	SEGMENT
pp$ = 8
p_count$ = 40
op$ = 72
n_word_count$ = 104
n_rshift_bit_count$ = 136
n_lshift_bit_count$1 = 168
temp$2 = 200
work$3 = 232
t_count$4 = 264
count$5 = 296
p$ = 544
p_word_count$ = 552
n$ = 560
o$ = 568
padding_zero$ = 576
RightShift_Imp PROC					; COMDAT

; 32   : {

$LN16:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 552				; 00000228H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 138				; 0000008aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+584]
	lea	rcx, OFFSET FLAT:__372CD743_pmc_shift@c
	call	__CheckForDebuggerJustMyCode

; 33   :     __UNIT_TYPE* pp = p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR pp$[rbp], rax

; 34   :     __UNIT_TYPE p_count = p_word_count;

	mov	rax, QWORD PTR p_word_count$[rbp]
	mov	QWORD PTR p_count$[rbp], rax

; 35   :     __UNIT_TYPE* op = o;

	mov	rax, QWORD PTR o$[rbp]
	mov	QWORD PTR op$[rbp], rax

; 36   :     // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 37   :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	xor	edx, edx
	mov	rax, QWORD PTR n$[rbp]
	mov	ecx, 64					; 00000040H
	div	rcx
	mov	QWORD PTR n_word_count$[rbp], rax

; 38   :     __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	xor	edx, edx
	mov	rax, QWORD PTR n$[rbp]
	mov	ecx, 64					; 00000040H
	div	rcx
	mov	rax, rdx
	mov	QWORD PTR n_rshift_bit_count$[rbp], rax

; 39   :     if (n_rshift_bit_count == 0)

	cmp	QWORD PTR n_rshift_bit_count$[rbp], 0
	jne	SHORT $LN4@RightShift

; 40   :     {
; 41   :         // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 42   :         _COPY_MEMORY_UNIT(op, pp + n_word_count, p_count - n_word_count);

	mov	rax, QWORD PTR n_word_count$[rbp]
	mov	rcx, QWORD PTR p_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rdx, QWORD PTR n_word_count$[rbp]
	lea	rcx, QWORD PTR [rcx+rdx*8]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR op$[rbp]
	call	_COPY_MEMORY_UNIT

; 43   :         if (padding_zero)

	cmp	DWORD PTR padding_zero$[rbp], 0
	je	SHORT $LN6@RightShift

; 44   :             _ZERO_MEMORY_UNIT(op + p_count - n_word_count, n_word_count);

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR p_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR n_word_count$[rbp]
	shl	rcx, 3
	sub	rax, rcx
	mov	rdx, QWORD PTR n_word_count$[rbp]
	mov	rcx, rax
	call	_ZERO_MEMORY_UNIT
$LN6@RightShift:

; 45   :     }

	jmp	$LN5@RightShift
$LN4@RightShift:

; 46   :     else
; 47   :     {
; 48   :         pp += n_word_count;

	mov	rax, QWORD PTR pp$[rbp]
	mov	rcx, QWORD PTR n_word_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR pp$[rbp], rax

; 49   :         __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;

	mov	eax, 64					; 00000040H
	sub	rax, QWORD PTR n_rshift_bit_count$[rbp]
	mov	QWORD PTR n_lshift_bit_count$1[rbp], rax

; 50   :         // p_count - n_word_count 回繰り返し
; 51   : 
; 52   :         __UNIT_TYPE temp = *pp++;

	mov	rax, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 8
	mov	QWORD PTR pp$[rbp], rax

; 53   :         __UNIT_TYPE work;
; 54   :         __UNIT_TYPE t_count = p_count - n_word_count - 1;

	mov	rax, QWORD PTR n_word_count$[rbp]
	mov	rcx, QWORD PTR p_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	dec	rax
	mov	QWORD PTR t_count$4[rbp], rax

; 55   : 
; 56   :         __UNIT_TYPE count = t_count >> 5;

	mov	rax, QWORD PTR t_count$4[rbp]
	shr	rax, 5
	mov	QWORD PTR count$5[rbp], rax
$LN2@RightShift:

; 57   :         while ( count > 0)

	cmp	QWORD PTR count$5[rbp], 0
	jbe	$LN3@RightShift

; 58   :         {
; 59   :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 60   :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 61   :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 62   :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 63   :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 64   :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 65   :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 66   :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 67   :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 68   :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 69   :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 70   :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 71   :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 72   :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 73   :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 74   :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 75   :             work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 76   :             work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 17
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 17
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 77   :             work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 18
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 18
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 78   :             work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 79   :             work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 80   :             work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 81   :             work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 82   :             work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 83   :             work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 84   :             work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 85   :             work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 86   :             work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 87   :             work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 88   :             work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 89   :             work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 90   :             work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 31
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 31
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 91   :             --count;

	mov	rax, QWORD PTR count$5[rbp]
	dec	rax
	mov	QWORD PTR count$5[rbp], rax

; 92   :             pp += 32;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR pp$[rbp], rax

; 93   :             op += 32;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR op$[rbp], rax

; 94   :         }

	jmp	$LN2@RightShift
$LN3@RightShift:

; 95   : 
; 96   :         if (t_count & 0x10)

	mov	rax, QWORD PTR t_count$4[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN7@RightShift

; 97   :         {
; 98   :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 99   :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 100  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 101  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 102  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 103  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 104  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 105  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 106  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 107  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 108  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 109  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 110  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 111  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 112  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 113  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 114  :             pp += 16;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR pp$[rbp], rax

; 115  :             op += 16;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR op$[rbp], rax
$LN7@RightShift:

; 116  :         }
; 117  : 
; 118  :         if (t_count & 0x8)

	mov	rax, QWORD PTR t_count$4[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN8@RightShift

; 119  :         {
; 120  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 121  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 122  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 123  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 124  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 125  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 126  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 127  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 128  :             pp += 8;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR pp$[rbp], rax

; 129  :             op += 8;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR op$[rbp], rax
$LN8@RightShift:

; 130  :         }
; 131  : 
; 132  :         if (t_count & 0x4)

	mov	rax, QWORD PTR t_count$4[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN9@RightShift

; 133  :         {
; 134  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 135  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 136  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 137  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  :             pp += 4;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR pp$[rbp], rax

; 139  :             op += 4;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR op$[rbp], rax
$LN9@RightShift:

; 140  :         }
; 141  : 
; 142  :         if (t_count & 0x2)

	mov	rax, QWORD PTR t_count$4[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN10@RightShift

; 143  :         {
; 144  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 145  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 146  :             pp += 2;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 16
	mov	QWORD PTR pp$[rbp], rax

; 147  :             op += 2;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 16
	mov	QWORD PTR op$[rbp], rax
$LN10@RightShift:

; 148  :         }
; 149  : 
; 150  :         if (t_count & 0x1)

	mov	rax, QWORD PTR t_count$4[rbp]
	and	rax, 1
	test	rax, rax
	je	$LN11@RightShift

; 151  :         {
; 152  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR temp$2[rbp], rax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR work$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR work$3[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	rdx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 153  :             pp += 1;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 8
	mov	QWORD PTR pp$[rbp], rax

; 154  :             op += 1;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 8
	mov	QWORD PTR op$[rbp], rax
$LN11@RightShift:

; 155  :         }
; 156  : 
; 157  :         work = temp >> n_rshift_bit_count;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR temp$2[rbp]
	shr	rax, cl
	mov	QWORD PTR work$3[rbp], rax

; 158  :         if (work != 0 || padding_zero)

	cmp	QWORD PTR work$3[rbp], 0
	jne	SHORT $LN13@RightShift
	cmp	DWORD PTR padding_zero$[rbp], 0
	je	SHORT $LN12@RightShift
$LN13@RightShift:

; 159  :             *op = work;

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR work$3[rbp]
	mov	QWORD PTR [rax], rcx
$LN12@RightShift:

; 160  : 
; 161  :         if (padding_zero)

	cmp	DWORD PTR padding_zero$[rbp], 0
	je	SHORT $LN14@RightShift

; 162  :             _ZERO_MEMORY_UNIT(o + p_word_count - n_word_count, n_word_count);

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR p_word_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR n_word_count$[rbp]
	shl	rcx, 3
	sub	rax, rcx
	mov	rdx, QWORD PTR n_word_count$[rbp]
	mov	rcx, rax
	call	_ZERO_MEMORY_UNIT
$LN14@RightShift:
$LN5@RightShift:

; 163  :     }
; 164  : }

	lea	rsp, QWORD PTR [rbp+520]
	pop	rdi
	pop	rbp
	ret	0
RightShift_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
;	COMDAT RightShift_Imp_DIV
_TEXT	SEGMENT
pp$ = 8
p_count$ = 40
op$ = 72
n_word_count$ = 104
n_rshift_bit_count$ = 136
n_lshift_bit_count$1 = 168
temp$2 = 196
work$3 = 228
t_count$4 = 264
count$5 = 296
p$ = 544
p_word_count$ = 552
n$ = 560
o$ = 568
padding_zero$ = 576
RightShift_Imp_DIV PROC					; COMDAT

; 167  : {

$LN16:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 552				; 00000228H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 138				; 0000008aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+584]
	lea	rcx, OFFSET FLAT:__372CD743_pmc_shift@c
	call	__CheckForDebuggerJustMyCode

; 168  :     __UNIT_TYPE_DIV* pp = p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR pp$[rbp], rax

; 169  :     __UNIT_TYPE p_count = p_word_count;

	mov	rax, QWORD PTR p_word_count$[rbp]
	mov	QWORD PTR p_count$[rbp], rax

; 170  :     __UNIT_TYPE_DIV* op = o;

	mov	rax, QWORD PTR o$[rbp]
	mov	QWORD PTR op$[rbp], rax

; 171  :     // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 172  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	xor	edx, edx
	mov	rax, QWORD PTR n$[rbp]
	mov	ecx, 64					; 00000040H
	div	rcx
	mov	QWORD PTR n_word_count$[rbp], rax

; 173  :     __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	xor	edx, edx
	mov	rax, QWORD PTR n$[rbp]
	mov	ecx, 64					; 00000040H
	div	rcx
	mov	rax, rdx
	mov	QWORD PTR n_rshift_bit_count$[rbp], rax

; 174  :     if (n_rshift_bit_count == 0)

	cmp	QWORD PTR n_rshift_bit_count$[rbp], 0
	jne	SHORT $LN4@RightShift

; 175  :     {
; 176  :         // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 177  :         _COPY_MEMORY_UNIT_DIV(op, pp + n_word_count, p_count - n_word_count);

	mov	rax, QWORD PTR n_word_count$[rbp]
	mov	rcx, QWORD PTR p_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR pp$[rbp]
	mov	rdx, QWORD PTR n_word_count$[rbp]
	lea	rcx, QWORD PTR [rcx+rdx*4]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR op$[rbp]
	call	_COPY_MEMORY_UNIT_DIV

; 178  :         if (padding_zero)

	cmp	DWORD PTR padding_zero$[rbp], 0
	je	SHORT $LN6@RightShift

; 179  :             _ZERO_MEMORY_UNIT_DIV(op + p_count - n_word_count, n_word_count);

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR p_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR n_word_count$[rbp]
	shl	rcx, 2
	sub	rax, rcx
	mov	rdx, QWORD PTR n_word_count$[rbp]
	mov	rcx, rax
	call	_ZERO_MEMORY_UNIT_DIV
$LN6@RightShift:

; 180  :     }

	jmp	$LN5@RightShift
$LN4@RightShift:

; 181  :     else
; 182  :     {
; 183  :         pp += n_word_count;

	mov	rax, QWORD PTR pp$[rbp]
	mov	rcx, QWORD PTR n_word_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR pp$[rbp], rax

; 184  :         __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;

	mov	eax, 64					; 00000040H
	sub	rax, QWORD PTR n_rshift_bit_count$[rbp]
	mov	QWORD PTR n_lshift_bit_count$1[rbp], rax

; 185  :         // p_count - n_word_count 回繰り返し
; 186  : 
; 187  :         __UNIT_TYPE_DIV temp = *pp++;

	mov	rax, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 4
	mov	QWORD PTR pp$[rbp], rax

; 188  :         __UNIT_TYPE_DIV work;
; 189  :         __UNIT_TYPE t_count = p_count - n_word_count - 1;

	mov	rax, QWORD PTR n_word_count$[rbp]
	mov	rcx, QWORD PTR p_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	dec	rax
	mov	QWORD PTR t_count$4[rbp], rax

; 190  : 
; 191  :         __UNIT_TYPE count = t_count >> 5;

	mov	rax, QWORD PTR t_count$4[rbp]
	shr	rax, 5
	mov	QWORD PTR count$5[rbp], rax
$LN2@RightShift:

; 192  :         while (count > 0)

	cmp	QWORD PTR count$5[rbp], 0
	jbe	$LN3@RightShift

; 193  :         {
; 194  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 195  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 196  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 197  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 198  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 199  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 200  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 201  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 202  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 203  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 204  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 205  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 206  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 207  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 208  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 209  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 210  :             work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 211  :             work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 17
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 17
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 212  :             work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 18
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 18
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 213  :             work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 19
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 19
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 214  :             work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 20
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 20
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 215  :             work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 21
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 21
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 216  :             work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 22
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 22
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 217  :             work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 23
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 23
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 218  :             work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 219  :             work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 25
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 25
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 220  :             work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 26
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 26
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 221  :             work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 27
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 27
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 222  :             work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 28
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 28
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 223  :             work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 29
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 29
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 224  :             work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 30
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 30
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 225  :             work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 31
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 31
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 226  :             --count;

	mov	rax, QWORD PTR count$5[rbp]
	dec	rax
	mov	QWORD PTR count$5[rbp], rax

; 227  :             pp += 32;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR pp$[rbp], rax

; 228  :             op += 32;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR op$[rbp], rax

; 229  :         }

	jmp	$LN2@RightShift
$LN3@RightShift:

; 230  : 
; 231  :         if (t_count & 0x10)

	mov	rax, QWORD PTR t_count$4[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN7@RightShift

; 232  :         {
; 233  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 234  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 235  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 236  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 237  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 238  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 239  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 240  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 241  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 242  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 243  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 244  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 245  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 246  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 247  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 248  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 249  :             pp += 16;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR pp$[rbp], rax

; 250  :             op += 16;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR op$[rbp], rax
$LN7@RightShift:

; 251  :         }
; 252  : 
; 253  :         if (t_count & 0x8)

	mov	rax, QWORD PTR t_count$4[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN8@RightShift

; 254  :         {
; 255  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 256  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 257  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 258  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 259  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 260  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 261  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 262  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 263  :             pp += 8;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR pp$[rbp], rax

; 264  :             op += 8;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR op$[rbp], rax
$LN8@RightShift:

; 265  :         }
; 266  : 
; 267  :         if (t_count & 0x4)

	mov	rax, QWORD PTR t_count$4[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN9@RightShift

; 268  :         {
; 269  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 270  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 271  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 272  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 273  :             pp += 4;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 16
	mov	QWORD PTR pp$[rbp], rax

; 274  :             op += 4;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 16
	mov	QWORD PTR op$[rbp], rax
$LN9@RightShift:

; 275  :         }
; 276  : 
; 277  :         if (t_count & 0x2)

	mov	rax, QWORD PTR t_count$4[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN10@RightShift

; 278  :         {
; 279  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 280  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 281  :             pp += 2;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 8
	mov	QWORD PTR pp$[rbp], rax

; 282  :             op += 2;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 8
	mov	QWORD PTR op$[rbp], rax
$LN10@RightShift:

; 283  :         }
; 284  : 
; 285  :         if (t_count & 0x1)

	mov	rax, QWORD PTR t_count$4[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN11@RightShift

; 286  :         {
; 287  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pp$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR temp$2[rbp], eax
	mov	rax, QWORD PTR n_lshift_bit_count$1[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR work$3[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR work$3[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR op$[rbp]
	mov	edx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rcx+rax], edx

; 288  :             pp += 1;

	mov	rax, QWORD PTR pp$[rbp]
	add	rax, 4
	mov	QWORD PTR pp$[rbp], rax

; 289  :             op += 1;

	mov	rax, QWORD PTR op$[rbp]
	add	rax, 4
	mov	QWORD PTR op$[rbp], rax
$LN11@RightShift:

; 290  :         }
; 291  : 
; 292  :         work = temp >> n_rshift_bit_count;

	mov	rax, QWORD PTR n_rshift_bit_count$[rbp]
	movzx	ecx, al
	mov	eax, DWORD PTR temp$2[rbp]
	shr	eax, cl
	mov	DWORD PTR work$3[rbp], eax

; 293  :         if (work != 0 || padding_zero)

	cmp	DWORD PTR work$3[rbp], 0
	jne	SHORT $LN13@RightShift
	cmp	DWORD PTR padding_zero$[rbp], 0
	je	SHORT $LN12@RightShift
$LN13@RightShift:

; 294  :             *op = work;

	mov	rax, QWORD PTR op$[rbp]
	mov	ecx, DWORD PTR work$3[rbp]
	mov	DWORD PTR [rax], ecx
$LN12@RightShift:

; 295  : 
; 296  :         if (padding_zero)

	cmp	DWORD PTR padding_zero$[rbp], 0
	je	SHORT $LN14@RightShift

; 297  :             _ZERO_MEMORY_UNIT_DIV(o + p_word_count - n_word_count, n_word_count);

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR p_word_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR n_word_count$[rbp]
	shl	rcx, 2
	sub	rax, rcx
	mov	rdx, QWORD PTR n_word_count$[rbp]
	mov	rcx, rax
	call	_ZERO_MEMORY_UNIT_DIV
$LN14@RightShift:
$LN5@RightShift:

; 298  :     }
; 299  : }

	lea	rsp, QWORD PTR [rbp+520]
	pop	rdi
	pop	rbp
	ret	0
RightShift_Imp_DIV ENDP
_TEXT	ENDS
END
