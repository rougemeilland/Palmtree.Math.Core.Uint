; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E05E7037_autogenerated_inline_func@h DB 01H
__DB5B71FB_pmc_add@c DB 01H
msvcjmc	ENDS
PUBLIC	Initialize_Add
PUBLIC	PMC_Add_I_X
PUBLIC	PMC_Add_L_X
PUBLIC	PMC_Add_X_I
PUBLIC	PMC_Add_X_L
PUBLIC	PMC_Add_X_X
PUBLIC	__JustMyCode_Default
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	From_I_Imp:PROC
EXTRN	From_L_Imp:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	number_zero:BYTE
_BSS	SEGMENT
fp_Add_Imp DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Add DD imagerel $LN5
	DD	imagerel $LN5+128
	DD	imagerel $unwind$Initialize_Add
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Add_I_X DD imagerel $LN9
	DD	imagerel $LN9+218
	DD	imagerel $unwind$PMC_Add_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Add_L_X DD imagerel $LN9
	DD	imagerel $LN9+221
	DD	imagerel $unwind$PMC_Add_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Add_X_I DD imagerel $LN9
	DD	imagerel $LN9+219
	DD	imagerel $unwind$PMC_Add_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Add_X_L DD imagerel $LN9
	DD	imagerel $LN9+221
	DD	imagerel $unwind$PMC_Add_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Add_X_X DD imagerel $LN20
	DD	imagerel $LN20+635
	DD	imagerel $unwind$PMC_Add_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMDWORDTOWORD DD imagerel _FROMDWORDTOWORD
	DD	imagerel _FROMDWORDTOWORD+95
	DD	imagerel $unwind$_FROMDWORDTOWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MAXIMUM_UNIT DD imagerel _MAXIMUM_UNIT
	DD	imagerel _MAXIMUM_UNIT+122
	DD	imagerel $unwind$_MAXIMUM_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_UNIT DD imagerel _ADD_UNIT
	DD	imagerel _ADD_UNIT+118
	DD	imagerel $unwind$_ADD_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADDX_UNIT DD imagerel _ADDX_UNIT
	DD	imagerel _ADDX_UNIT+121
	DD	imagerel $unwind$_ADDX_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_32 DD imagerel _LZCNT_ALT_32
	DD	imagerel _LZCNT_ALT_32+126
	DD	imagerel $unwind$_LZCNT_ALT_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_32WORDS_ADC DD imagerel _ADD_32WORDS_ADC
	DD	imagerel _ADD_32WORDS_ADC+2741
	DD	imagerel $unwind$_ADD_32WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_32WORDS_ADCX DD imagerel _ADD_32WORDS_ADCX
	DD	imagerel _ADD_32WORDS_ADCX+2741
	DD	imagerel $unwind$_ADD_32WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_16WORDS_ADC DD imagerel _ADD_16WORDS_ADC
	DD	imagerel _ADD_16WORDS_ADC+1413
	DD	imagerel $unwind$_ADD_16WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_16WORDS_ADCX DD imagerel _ADD_16WORDS_ADCX
	DD	imagerel _ADD_16WORDS_ADCX+1413
	DD	imagerel $unwind$_ADD_16WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_8WORDS_ADC DD imagerel _ADD_8WORDS_ADC
	DD	imagerel _ADD_8WORDS_ADC+749
	DD	imagerel $unwind$_ADD_8WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_8WORDS_ADCX DD imagerel _ADD_8WORDS_ADCX
	DD	imagerel _ADD_8WORDS_ADCX+749
	DD	imagerel $unwind$_ADD_8WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_4WORDS_ADC DD imagerel _ADD_4WORDS_ADC
	DD	imagerel _ADD_4WORDS_ADC+417
	DD	imagerel $unwind$_ADD_4WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_4WORDS_ADCX DD imagerel _ADD_4WORDS_ADCX
	DD	imagerel _ADD_4WORDS_ADCX+417
	DD	imagerel $unwind$_ADD_4WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_2WORDS_ADC DD imagerel _ADD_2WORDS_ADC
	DD	imagerel _ADD_2WORDS_ADC+251
	DD	imagerel $unwind$_ADD_2WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_2WORDS_ADCX DD imagerel _ADD_2WORDS_ADCX
	DD	imagerel _ADD_2WORDS_ADCX+251
	DD	imagerel $unwind$_ADD_2WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DoCarry DD imagerel DoCarry
	DD	imagerel DoCarry+409
	DD	imagerel $unwind$DoCarry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Add_X_1W DD imagerel Add_X_1W
	DD	imagerel Add_X_1W+253
	DD	imagerel $unwind$Add_X_1W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Add_X_2W DD imagerel Add_X_2W
	DD	imagerel Add_X_2W+489
	DD	imagerel $unwind$Add_X_2W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Add_Imp_using_ADC DD imagerel Add_Imp_using_ADC
	DD	imagerel Add_Imp_using_ADC+918
	DD	imagerel $unwind$Add_Imp_using_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Add_Imp_using_ADCX DD imagerel Add_Imp_using_ADCX
	DD	imagerel Add_Imp_using_ADCX+918
	DD	imagerel $unwind$Add_Imp_using_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Add_X_I_Imp DD imagerel PMC_Add_X_I_Imp
	DD	imagerel PMC_Add_X_I_Imp+490
	DD	imagerel $unwind$PMC_Add_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Add_X_L_Imp DD imagerel PMC_Add_X_L_Imp
	DD	imagerel PMC_Add_X_L_Imp+1075
	DD	imagerel $unwind$PMC_Add_X_L_Imp
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Add_X_L_Imp DD 035053401H
	DD	0118331dH
	DD	070110057H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Add_X_L_Imp$rtcName$0 DB 076H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
PMC_Add_X_L_Imp$rtcName$1 DB 077H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
PMC_Add_X_L_Imp$rtcName$2 DB 077H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
PMC_Add_X_L_Imp$rtcName$3 DB 077H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
PMC_Add_X_L_Imp$rtcVarDesc DD 01d8H
	DD	08H
	DQ	FLAT:PMC_Add_X_L_Imp$rtcName$3
	DD	0158H
	DD	08H
	DQ	FLAT:PMC_Add_X_L_Imp$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:PMC_Add_X_L_Imp$rtcName$1
	DD	074H
	DD	04H
	DQ	FLAT:PMC_Add_X_L_Imp$rtcName$0
	ORG $+192
PMC_Add_X_L_Imp$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:PMC_Add_X_L_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Add_X_I_Imp DD 035053301H
	DD	0117331cH
	DD	070100033H
	DD	0500fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Add_X_I_Imp$rtcName$0 DB 06eH
	DB	07aH
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+2
PMC_Add_X_I_Imp$rtcVarDesc DD 0b8H
	DD	08H
	DQ	FLAT:PMC_Add_X_I_Imp$rtcName$0
	ORG $+48
PMC_Add_X_I_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Add_X_I_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Add_Imp_using_ADCX DD 035053901H
	DD	011d3322H
	DD	07016003dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Add_Imp_using_ADC DD 035053901H
	DD	011d3322H
	DD	07016003dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Add_X_2W DD 035053901H
	DD	011d3322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Add_X_1W DD 035053901H
	DD	011d3322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DoCarry DD 025053801H
	DD	011c2321H
	DD	07015001fH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_2WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_2WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_4WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_4WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_8WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_8WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_16WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_16WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_32WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_32WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_32 DD 025052801H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_32$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_32$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_32$rtcName$0
	ORG $+48
_LZCNT_ALT_32$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_32$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADDX_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MAXIMUM_UNIT DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMDWORDTOWORD DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Add_X_X DD 035053401H
	DD	0118331dH
	DD	07011003fH
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Add_X_X$rtcName$0 DB 06eH
	DB	077H
	DB	00H
	ORG $+5
PMC_Add_X_X$rtcName$1 DB 077H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
PMC_Add_X_X$rtcVarDesc DD 0118H
	DD	08H
	DQ	FLAT:PMC_Add_X_X$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:PMC_Add_X_X$rtcName$0
	ORG $+96
PMC_Add_X_X$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_Add_X_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Add_X_L DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Add_X_I DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Add_L_X DD 025053401H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Add_I_X DD 025053201H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Add DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT PMC_Add_X_L_Imp
_TEXT	SEGMENT
result$ = 4
u_bit_count$7 = 40
v_hi$8 = 68
v_lo$9 = 100
v_bit_count$10 = 136
w_bit_count$11 = 168
w_light_check_code$12 = 200
v_bit_count$13 = 232
w_bit_count$14 = 264
w_light_check_code$15 = 296
u_bit_count$16 = 328
v_bit_count$17 = 360
w_bit_count$18 = 392
w_light_check_code$19 = 424
u$ = 672
v$ = 680
w$ = 688
PMC_Add_X_L_Imp PROC					; COMDAT

; 406  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 696				; 000002b8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 174				; 000000aeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+728]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 407  :     PMC_STATUS_CODE result;
; 408  :     if (u->IS_ZERO)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_Add_X_

; 409  :     {
; 410  :         // u が 0 である場合
; 411  : 
; 412  :         if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 413  :         {
; 414  :             // v が 0 である場合
; 415  : 
; 416  :             // u と v がともに 0 であるので、加算結果の 0 を呼び出し元に返す。
; 417  :             *w = &number_zero;

	mov	rax, QWORD PTR w$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 418  :         }

	jmp	SHORT $LN5@PMC_Add_X_
$LN4@PMC_Add_X_:

; 419  :         else
; 420  :         {
; 421  :             // v が 0 ではない場合
; 422  : 
; 423  :             // 加算結果となる v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 424  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	From_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Add_X_

; 425  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN6@PMC_Add_X_:
$LN5@PMC_Add_X_:

; 426  :         }
; 427  :     }

	jmp	$LN3@PMC_Add_X_
$LN2@PMC_Add_X_:

; 428  :     else
; 429  :     {
; 430  :         // u が 0 ではない場合
; 431  : 
; 432  :         if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN7@PMC_Add_X_

; 433  :         {
; 434  :             // v が 0 である場合
; 435  : 
; 436  :             // 加算結果となる u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 437  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN9@PMC_Add_X_

; 438  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN9@PMC_Add_X_:

; 439  :         }

	jmp	$LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 440  :         else
; 441  :         {
; 442  :             // u と v がともに 0 ではない場合
; 443  : 
; 444  :             // u と v の和を計算する
; 445  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	$LN10@PMC_Add_X_

; 446  :             {
; 447  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 448  : 
; 449  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR u_bit_count$7[rbp], rax

; 450  :                 _UINT32_T v_hi;
; 451  :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	rdx, QWORD PTR v_hi$8[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	_FROMDWORDTOWORD
	mov	DWORD PTR v_lo$9[rbp], eax

; 452  :                 if (v_hi == 0)

	cmp	DWORD PTR v_hi$8[rbp], 0
	jne	$LN12@PMC_Add_X_

; 453  :                 {
; 454  :                     // y の値が 32bit で表現可能な場合
; 455  :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR v_lo$9[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$10[rbp], rax

; 456  :                     __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	rdx, QWORD PTR v_bit_count$10[rbp]
	mov	rcx, QWORD PTR u_bit_count$7[rbp]
	call	_MAXIMUM_UNIT
	inc	rax
	mov	QWORD PTR w_bit_count$11[rbp], rax

; 457  :                     __UNIT_TYPE w_light_check_code;
; 458  :                     if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_light_check_code$12[rbp]
	mov	rdx, QWORD PTR w_bit_count$11[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Add_X_

; 459  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN14@PMC_Add_X_:

; 460  :                     if ((result = Add_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, (*w)->BLOCK, (*w)->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR v_lo$9[rbp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR [rcx+56]
	mov	r8d, edx
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Add_X_1W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN15@PMC_Add_X_

; 461  :                     {
; 462  :                         DeallocateNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 463  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN15@PMC_Add_X_:

; 464  :                     }
; 465  :                     if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR w_light_check_code$12[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN16@PMC_Add_X_

; 466  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN16@PMC_Add_X_:

; 467  :                 }

	jmp	$LN13@PMC_Add_X_
$LN12@PMC_Add_X_:

; 468  :                 else
; 469  :                 {
; 470  :                     // y の値が 32bit では表現できない場合
; 471  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	ecx, DWORD PTR v_hi$8[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$13[rbp], rax

; 472  :                     __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	rdx, QWORD PTR v_bit_count$13[rbp]
	mov	rcx, QWORD PTR u_bit_count$7[rbp]
	call	_MAXIMUM_UNIT
	inc	rax
	mov	QWORD PTR w_bit_count$14[rbp], rax

; 473  :                     __UNIT_TYPE w_light_check_code;
; 474  :                     if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_light_check_code$15[rbp]
	mov	rdx, QWORD PTR w_bit_count$14[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN17@PMC_Add_X_

; 475  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 476  :                     if ((result = Add_X_2W(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, (*w)->BLOCK, (*w)->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR v_lo$9[rbp]
	mov	r8d, DWORD PTR v_hi$8[rbp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, edx
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Add_X_2W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN18@PMC_Add_X_

; 477  :                     {
; 478  :                         DeallocateNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 479  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN18@PMC_Add_X_:

; 480  :                     }
; 481  :                     if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR w_light_check_code$15[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN19@PMC_Add_X_

; 482  :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN19@PMC_Add_X_:
$LN13@PMC_Add_X_:

; 483  :                 }
; 484  :                 CommitNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber

; 485  :             }

	jmp	$LN11@PMC_Add_X_
$LN10@PMC_Add_X_:

; 486  :             else
; 487  :             {
; 488  :                 // _UINT64_T が 1 ワードで表現できる場合
; 489  : 
; 490  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR u_bit_count$16[rbp], rax

; 491  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	rcx, QWORD PTR v$[rbp]
	call	_LZCNT_ALT_UNIT
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$17[rbp], rax

; 492  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	rdx, QWORD PTR v_bit_count$17[rbp]
	mov	rcx, QWORD PTR u_bit_count$16[rbp]
	call	_MAXIMUM_UNIT
	inc	rax
	mov	QWORD PTR w_bit_count$18[rbp], rax

; 493  :                 __UNIT_TYPE w_light_check_code;
; 494  :                 if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_light_check_code$19[rbp]
	mov	rdx, QWORD PTR w_bit_count$18[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN20@PMC_Add_X_

; 495  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN20@PMC_Add_X_:

; 496  :                 if ((result = Add_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*w)->BLOCK, (*w)->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR [rcx+56]
	mov	r8, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Add_X_1W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN21@PMC_Add_X_

; 497  :                 {
; 498  :                     DeallocateNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 499  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN21@PMC_Add_X_:

; 500  :                 }
; 501  :                 if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR w_light_check_code$19[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN22@PMC_Add_X_

; 502  :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN22@PMC_Add_X_:

; 503  :                 CommitNumber(*w);

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber
$LN11@PMC_Add_X_:
$LN8@PMC_Add_X_:
$LN3@PMC_Add_X_:

; 504  :             }
; 505  : 
; 506  :         }
; 507  :     }
; 508  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 509  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_Add_X_L_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+648]
	pop	rdi
	pop	rbp
	ret	0
PMC_Add_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT PMC_Add_X_I_Imp
_TEXT	SEGMENT
result$ = 4
x_bit_count$4 = 40
y_bit_count$5 = 72
z_bit_count$6 = 104
nz_check_code$7 = 136
nu$ = 384
v$ = 392
nw$ = 400
PMC_Add_X_I_Imp PROC					; COMDAT

; 301  : {

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+440]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 302  :     PMC_STATUS_CODE result;
; 303  :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_Add_X_

; 304  :     {
; 305  :         // x が 0 である場合
; 306  : 
; 307  :         if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 308  :         {
; 309  :             // y が 0 である場合
; 310  : 
; 311  :             // x と y がともに 0 であるので、加算結果の 0 を呼び出し元に返す。
; 312  :             *nw = &number_zero;

	mov	rax, QWORD PTR nw$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 313  :         }

	jmp	SHORT $LN5@PMC_Add_X_
$LN4@PMC_Add_X_:

; 314  :         else
; 315  :         {
; 316  :             // y が 0 ではない場合
; 317  : 
; 318  :             // 加算結果となる y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 319  :             if ((result = From_I_Imp(v, nw)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nw$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	call	From_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Add_X_

; 320  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN6@PMC_Add_X_:
$LN5@PMC_Add_X_:

; 321  :         }
; 322  :     }

	jmp	$LN3@PMC_Add_X_
$LN2@PMC_Add_X_:

; 323  :     else
; 324  :     {
; 325  :         // x が 0 ではない場合
; 326  : 
; 327  :         if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN7@PMC_Add_X_

; 328  :         {
; 329  :             // y が 0 である場合
; 330  : 
; 331  :             // 加算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 332  :             if ((result = DuplicateNumber(nu, nw)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR nu$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN9@PMC_Add_X_

; 333  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN9@PMC_Add_X_:

; 334  :         }

	jmp	$LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 335  :         else
; 336  :         {
; 337  :             // x と y がともに 0 ではない場合
; 338  : 
; 339  :             // x と y の和を計算する
; 340  :             __UNIT_TYPE x_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR x_bit_count$4[rbp], rax

; 341  :             __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR v$[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR y_bit_count$5[rbp], rax

; 342  :             __UNIT_TYPE z_bit_count = _MAXIMUM_UNIT(x_bit_count, y_bit_count) + 1;

	mov	rdx, QWORD PTR y_bit_count$5[rbp]
	mov	rcx, QWORD PTR x_bit_count$4[rbp]
	call	_MAXIMUM_UNIT
	inc	rax
	mov	QWORD PTR z_bit_count$6[rbp], rax

; 343  :             __UNIT_TYPE nz_check_code;
; 344  :             if ((result = AllocateNumber(nw, z_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_check_code$7[rbp]
	mov	rdx, QWORD PTR z_bit_count$6[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN10@PMC_Add_X_

; 345  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN10@PMC_Add_X_:

; 346  :             if ((result = Add_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, v, (*nw)->BLOCK, (*nw)->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR nw$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR [rcx+56]
	mov	r8d, edx
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Add_X_1W
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Add_X_

; 347  :             {
; 348  :                 DeallocateNumber(*nw);

	mov	rax, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	DeallocateNumber

; 349  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN11@PMC_Add_X_:

; 350  :             }
; 351  :             if ((result = CheckBlockLight((*nw)->BLOCK, nz_check_code)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR nw$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR nz_check_code$7[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN12@PMC_Add_X_

; 352  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN12@PMC_Add_X_:

; 353  :             CommitNumber(*nw);

	mov	rax, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CommitNumber
$LN8@PMC_Add_X_:
$LN3@PMC_Add_X_:

; 354  :         }
; 355  :     }
; 356  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 357  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_Add_X_I_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
PMC_Add_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT Add_Imp_using_ADCX
_TEXT	SEGMENT
t_buf$1 = 8
t_count$2 = 40
up$ = 72
vp$ = 104
wp$ = 136
c$ = 164
count$ = 200
tv152 = 408
tv155 = 416
tv158 = 424
u_buf$ = 464
u_count$ = 472
v_buf$ = 480
v_count$ = 488
w_buf$ = 496
w_count$ = 504
Add_Imp_using_ADCX PROC					; COMDAT

; 224  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 488				; 000001e8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+520]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 225  :     // x のワード長が y のワード長以上であるようにする
; 226  :     if (u_count < v_count)

	mov	rax, QWORD PTR v_count$[rbp]
	cmp	QWORD PTR u_count$[rbp], rax
	jae	SHORT $LN4@Add_Imp_us

; 227  :     {
; 228  :         __UNIT_TYPE* t_buf = u_buf;

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	QWORD PTR t_buf$1[rbp], rax

; 229  :         u_buf = v_buf;

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	QWORD PTR u_buf$[rbp], rax

; 230  :         v_buf = t_buf;

	mov	rax, QWORD PTR t_buf$1[rbp]
	mov	QWORD PTR v_buf$[rbp], rax

; 231  :         __UNIT_TYPE t_count = u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	mov	QWORD PTR t_count$2[rbp], rax

; 232  :         u_count = v_count;

	mov	rax, QWORD PTR v_count$[rbp]
	mov	QWORD PTR u_count$[rbp], rax

; 233  :         v_count = t_count;

	mov	rax, QWORD PTR t_count$2[rbp]
	mov	QWORD PTR v_count$[rbp], rax
$LN4@Add_Imp_us:

; 234  :     }
; 235  :     __UNIT_TYPE* up = u_buf;

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	QWORD PTR up$[rbp], rax

; 236  :     __UNIT_TYPE* vp = v_buf;

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	QWORD PTR vp$[rbp], rax

; 237  :     __UNIT_TYPE* wp = w_buf;

	mov	rax, QWORD PTR w_buf$[rbp]
	mov	QWORD PTR wp$[rbp], rax

; 238  :     char c = 0;

	mov	BYTE PTR c$[rbp], 0

; 239  : 
; 240  :     // まず 32 ワードずつ加算をする。
; 241  :     __UNIT_TYPE count = v_count >> 5;

	mov	rax, QWORD PTR v_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@Add_Imp_us:

; 242  :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	SHORT $LN3@Add_Imp_us

; 243  :     {
; 244  :         c = _ADD_32WORDS_ADCX(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_32WORDS_ADCX
	mov	BYTE PTR c$[rbp], al

; 245  :         up += 32;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR up$[rbp], rax

; 246  :         vp += 32;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR vp$[rbp], rax

; 247  :         wp += 32;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR wp$[rbp], rax

; 248  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 249  :     }

	jmp	SHORT $LN2@Add_Imp_us
$LN3@Add_Imp_us:

; 250  :     // この時点で未処理の桁は 32 ワード未満のはず
; 251  : 
; 252  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 253  :     if (v_count & 0x10)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	SHORT $LN5@Add_Imp_us

; 254  :     {
; 255  :         c = _ADD_16WORDS_ADCX(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_16WORDS_ADCX
	mov	BYTE PTR c$[rbp], al

; 256  :         up += 16;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR up$[rbp], rax

; 257  :         vp += 16;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR vp$[rbp], rax

; 258  :         wp += 16;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR wp$[rbp], rax
$LN5@Add_Imp_us:

; 259  :     }
; 260  :     // この時点で未処理の桁は 16 ワード未満のはず
; 261  : 
; 262  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 263  :     if (v_count & 0x8)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	SHORT $LN6@Add_Imp_us

; 264  :     {
; 265  :         c = _ADD_8WORDS_ADCX(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_8WORDS_ADCX
	mov	BYTE PTR c$[rbp], al

; 266  :         up += 8;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR up$[rbp], rax

; 267  :         vp += 8;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR vp$[rbp], rax

; 268  :         wp += 8;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR wp$[rbp], rax
$LN6@Add_Imp_us:

; 269  :     }
; 270  :     // この時点で未処理の桁は 8 ワード未満のはず
; 271  : 
; 272  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 273  :     if (v_count & 0x4)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	SHORT $LN7@Add_Imp_us

; 274  :     {
; 275  :         c = _ADD_4WORDS_ADCX(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_4WORDS_ADCX
	mov	BYTE PTR c$[rbp], al

; 276  :         up += 4;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR up$[rbp], rax

; 277  :         vp += 4;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR vp$[rbp], rax

; 278  :         wp += 4;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR wp$[rbp], rax
$LN7@Add_Imp_us:

; 279  :     }
; 280  :     // この時点で未処理の桁は 4 ワード未満のはず
; 281  : 
; 282  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 283  :     if (v_count & 0x2)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	SHORT $LN8@Add_Imp_us

; 284  :     {
; 285  :         c = _ADD_2WORDS_ADCX(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_2WORDS_ADCX
	mov	BYTE PTR c$[rbp], al

; 286  :         up += 2;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 16
	mov	QWORD PTR up$[rbp], rax

; 287  :         vp += 2;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 16
	mov	QWORD PTR vp$[rbp], rax

; 288  :         wp += 2;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 16
	mov	QWORD PTR wp$[rbp], rax
$LN8@Add_Imp_us:

; 289  :     }
; 290  :     // この時点で未処理の桁は 2 ワード未満のはず
; 291  : 
; 292  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 293  :     if (v_count & 0x1)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN9@Add_Imp_us

; 294  :         c = _ADDX_UNIT(c, *up++, *vp++, wp++);

	mov	rax, QWORD PTR wp$[rbp]
	mov	QWORD PTR tv152[rbp], rax
	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax
	mov	rax, QWORD PTR vp$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv155[rbp], rax
	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 8
	mov	QWORD PTR vp$[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv158[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax
	mov	r9, QWORD PTR tv152[rbp]
	mov	r8, QWORD PTR tv155[rbp]
	mov	rdx, QWORD PTR tv158[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al
$LN9@Add_Imp_us:

; 295  : 
; 296  :     // 残りの桁の繰り上がりを計算し、復帰する。
; 297  :     return (DoCarry(c, up, u_count - v_count, wp, w_count - v_count));

	mov	rax, QWORD PTR v_count$[rbp]
	mov	rcx, QWORD PTR w_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR v_count$[rbp]
	mov	rdx, QWORD PTR u_count$[rbp]
	sub	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, rcx
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	DoCarry

; 298  : }

	lea	rsp, QWORD PTR [rbp+440]
	pop	rdi
	pop	rbp
	ret	0
Add_Imp_using_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT Add_Imp_using_ADC
_TEXT	SEGMENT
t_buf$1 = 8
t_count$2 = 40
up$ = 72
vp$ = 104
wp$ = 136
c$ = 164
count$ = 200
tv152 = 408
tv155 = 416
tv158 = 424
u_buf$ = 464
u_count$ = 472
v_buf$ = 480
v_count$ = 488
w_buf$ = 496
w_count$ = 504
Add_Imp_using_ADC PROC					; COMDAT

; 147  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 488				; 000001e8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+520]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 148  :     // x のワード長が y のワード長以上であるようにする
; 149  :     if (u_count < v_count)

	mov	rax, QWORD PTR v_count$[rbp]
	cmp	QWORD PTR u_count$[rbp], rax
	jae	SHORT $LN4@Add_Imp_us

; 150  :     {
; 151  :         __UNIT_TYPE* t_buf = u_buf;

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	QWORD PTR t_buf$1[rbp], rax

; 152  :         u_buf = v_buf;

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	QWORD PTR u_buf$[rbp], rax

; 153  :         v_buf = t_buf;

	mov	rax, QWORD PTR t_buf$1[rbp]
	mov	QWORD PTR v_buf$[rbp], rax

; 154  :         __UNIT_TYPE t_count = u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	mov	QWORD PTR t_count$2[rbp], rax

; 155  :         u_count = v_count;

	mov	rax, QWORD PTR v_count$[rbp]
	mov	QWORD PTR u_count$[rbp], rax

; 156  :         v_count = t_count;

	mov	rax, QWORD PTR t_count$2[rbp]
	mov	QWORD PTR v_count$[rbp], rax
$LN4@Add_Imp_us:

; 157  :     }
; 158  :     __UNIT_TYPE* up = u_buf;

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	QWORD PTR up$[rbp], rax

; 159  :     __UNIT_TYPE* vp = v_buf;

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	QWORD PTR vp$[rbp], rax

; 160  :     __UNIT_TYPE* wp = w_buf;

	mov	rax, QWORD PTR w_buf$[rbp]
	mov	QWORD PTR wp$[rbp], rax

; 161  :     char c = 0;

	mov	BYTE PTR c$[rbp], 0

; 162  : 
; 163  :     // まず 32 ワードずつ加算をする。
; 164  :     __UNIT_TYPE count = v_count >> 5;

	mov	rax, QWORD PTR v_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@Add_Imp_us:

; 165  :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	SHORT $LN3@Add_Imp_us

; 166  :     {
; 167  :         c = _ADD_32WORDS_ADC(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_32WORDS_ADC
	mov	BYTE PTR c$[rbp], al

; 168  :         up += 32;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR up$[rbp], rax

; 169  :         vp += 32;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR vp$[rbp], rax

; 170  :         wp += 32;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR wp$[rbp], rax

; 171  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 172  :     }

	jmp	SHORT $LN2@Add_Imp_us
$LN3@Add_Imp_us:

; 173  :     // この時点で未処理の桁は 32 ワード未満のはず
; 174  : 
; 175  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 176  :     if (v_count & 0x10)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	SHORT $LN5@Add_Imp_us

; 177  :     {
; 178  :         c = _ADD_16WORDS_ADC(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_16WORDS_ADC
	mov	BYTE PTR c$[rbp], al

; 179  :         up += 16;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR up$[rbp], rax

; 180  :         vp += 16;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR vp$[rbp], rax

; 181  :         wp += 16;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR wp$[rbp], rax
$LN5@Add_Imp_us:

; 182  :     }
; 183  :     // この時点で未処理の桁は 16 ワード未満のはず
; 184  : 
; 185  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 186  :     if (v_count & 0x8)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	SHORT $LN6@Add_Imp_us

; 187  :     {
; 188  :         c = _ADD_8WORDS_ADC(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_8WORDS_ADC
	mov	BYTE PTR c$[rbp], al

; 189  :         up += 8;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR up$[rbp], rax

; 190  :         vp += 8;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR vp$[rbp], rax

; 191  :         wp += 8;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR wp$[rbp], rax
$LN6@Add_Imp_us:

; 192  :     }
; 193  :     // この時点で未処理の桁は 8 ワード未満のはず
; 194  : 
; 195  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 196  :     if (v_count & 0x4)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	SHORT $LN7@Add_Imp_us

; 197  :     {
; 198  :         c = _ADD_4WORDS_ADC(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_4WORDS_ADC
	mov	BYTE PTR c$[rbp], al

; 199  :         up += 4;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR up$[rbp], rax

; 200  :         vp += 4;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR vp$[rbp], rax

; 201  :         wp += 4;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR wp$[rbp], rax
$LN7@Add_Imp_us:

; 202  :     }
; 203  :     // この時点で未処理の桁は 4 ワード未満のはず
; 204  : 
; 205  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 206  :     if (v_count & 0x2)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	SHORT $LN8@Add_Imp_us

; 207  :     {
; 208  :         c = _ADD_2WORDS_ADC(c, up, vp, wp);

	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR vp$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_2WORDS_ADC
	mov	BYTE PTR c$[rbp], al

; 209  :         up += 2;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 16
	mov	QWORD PTR up$[rbp], rax

; 210  :         vp += 2;

	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 16
	mov	QWORD PTR vp$[rbp], rax

; 211  :         wp += 2;

	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 16
	mov	QWORD PTR wp$[rbp], rax
$LN8@Add_Imp_us:

; 212  :     }
; 213  :     // この時点で未処理の桁は 2 ワード未満のはず
; 214  : 
; 215  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 216  :     if (v_count & 0x1)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN9@Add_Imp_us

; 217  :         c = _ADD_UNIT(c, *up++, *vp++, wp++);

	mov	rax, QWORD PTR wp$[rbp]
	mov	QWORD PTR tv152[rbp], rax
	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax
	mov	rax, QWORD PTR vp$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv155[rbp], rax
	mov	rax, QWORD PTR vp$[rbp]
	add	rax, 8
	mov	QWORD PTR vp$[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv158[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax
	mov	r9, QWORD PTR tv152[rbp]
	mov	r8, QWORD PTR tv155[rbp]
	mov	rdx, QWORD PTR tv158[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al
$LN9@Add_Imp_us:

; 218  : 
; 219  :     // 残りの桁の繰り上がりを計算し、復帰する。
; 220  :     return (DoCarry(c, up, u_count - v_count, wp, w_count - v_count));

	mov	rax, QWORD PTR v_count$[rbp]
	mov	rcx, QWORD PTR w_count$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR v_count$[rbp]
	mov	rdx, QWORD PTR u_count$[rbp]
	sub	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, rcx
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	DoCarry

; 221  : }

	lea	rsp, QWORD PTR [rbp+440]
	pop	rdi
	pop	rbp
	ret	0
Add_Imp_using_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT Add_X_2W
_TEXT	SEGMENT
up$ = 8
wp$ = 40
c$ = 68
tv128 = 280
tv87 = 280
tv132 = 288
tv91 = 288
u_buf$ = 336
u_count$ = 344
v_hi$ = 352
v_lo$ = 360
w_buf$ = 368
w_count$ = 376
Add_X_2W PROC						; COMDAT

; 106  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 107  :     __UNIT_TYPE* up = u_buf;

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	QWORD PTR up$[rbp], rax

; 108  :     __UNIT_TYPE* wp = w_buf;

	mov	rax, QWORD PTR w_buf$[rbp]
	mov	QWORD PTR wp$[rbp], rax

; 109  :     char c;
; 110  : 
; 111  :     if (u_count < 2)

	cmp	QWORD PTR u_count$[rbp], 2
	jae	$LN2@Add_X_2W

; 112  :     {
; 113  :         // x が 1 ワードしかなかった場合
; 114  : 
; 115  :         // 最下位ワードの加算を行う
; 116  :         c = _ADD_UNIT(0, up[0], v_lo, &wp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r9, rax
	mov	r8, QWORD PTR v_lo$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	rdx, QWORD PTR [rax+rcx]
	xor	ecx, ecx
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 117  : 
; 118  :         // 最下位から 2 番目のワードの加算を行う
; 119  :         c = _ADD_UNIT(c, 0, v_hi, &wp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR wp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9, rax
	mov	r8, QWORD PTR v_hi$[rbp]
	xor	edx, edx
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 120  : 
; 121  :         // 桁上りが発生したら 3 番目のワードに 1 を設定する。
; 122  :         if (c)

	movsx	eax, BYTE PTR c$[rbp]
	test	eax, eax
	je	SHORT $LN4@Add_X_2W

; 123  :             wp[2] = 1;

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR wp$[rbp]
	mov	QWORD PTR [rcx+rax], 1
$LN4@Add_X_2W:

; 124  : 
; 125  :         // 正常復帰する。
; 126  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@Add_X_2W

; 127  :     }

	jmp	$LN3@Add_X_2W
$LN2@Add_X_2W:

; 128  :     else
; 129  :     {
; 130  :         // x が 2 ワード以上あった場合
; 131  : 
; 132  :         // 最下位のワードの加算をする
; 133  :         c = _ADD_UNIT(0, *up++, v_lo, wp++);

	mov	rax, QWORD PTR wp$[rbp]
	mov	QWORD PTR tv87[rbp], rax
	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv91[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax
	mov	r9, QWORD PTR tv87[rbp]
	mov	r8, QWORD PTR v_lo$[rbp]
	mov	rdx, QWORD PTR tv91[rbp]
	xor	ecx, ecx
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 134  : 
; 135  :         // 最下位から 2 番目のワードの加算をする。
; 136  :         c = _ADD_UNIT(c, *up++, v_hi, wp++);

	mov	rax, QWORD PTR wp$[rbp]
	mov	QWORD PTR tv128[rbp], rax
	mov	rax, QWORD PTR wp$[rbp]
	add	rax, 8
	mov	QWORD PTR wp$[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv132[rbp], rax
	mov	rax, QWORD PTR up$[rbp]
	add	rax, 8
	mov	QWORD PTR up$[rbp], rax
	mov	r9, QWORD PTR tv128[rbp]
	mov	r8, QWORD PTR v_hi$[rbp]
	mov	rdx, QWORD PTR tv132[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 137  :         u_count -= 2;

	mov	rax, QWORD PTR u_count$[rbp]
	sub	rax, 2
	mov	QWORD PTR u_count$[rbp], rax

; 138  :         w_count -= 2;

	mov	rax, QWORD PTR w_count$[rbp]
	sub	rax, 2
	mov	QWORD PTR w_count$[rbp], rax

; 139  : 
; 140  :         // 残りの桁の繰り上がりを計算し、復帰する。
; 141  :         return (DoCarry(c, up, u_count, wp, w_count));

	mov	rax, QWORD PTR w_count$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR wp$[rbp]
	mov	r8, QWORD PTR u_count$[rbp]
	mov	rdx, QWORD PTR up$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	DoCarry
$LN3@Add_X_2W:
$LN1@Add_X_2W:

; 142  :     }
; 143  : }

	lea	rsp, QWORD PTR [rbp+312]
	pop	rdi
	pop	rbp
	ret	0
Add_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT Add_X_1W
_TEXT	SEGMENT
c$ = 4
tv66 = 216
tv70 = 224
u_ptr$ = 272
u_count$ = 280
v$ = 288
w_ptr$ = 296
w_count$ = 304
Add_X_1W PROC						; COMDAT

; 93   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 94   :     char c;
; 95   : 
; 96   :     // 最下桁の加算を行う
; 97   :     c = _ADD_UNIT(0, *u_ptr++, v, w_ptr++);

	mov	rax, QWORD PTR w_ptr$[rbp]
	mov	QWORD PTR tv66[rbp], rax
	mov	rax, QWORD PTR w_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR w_ptr$[rbp], rax
	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv70[rbp], rax
	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR u_ptr$[rbp], rax
	mov	r9, QWORD PTR tv66[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR tv70[rbp]
	xor	ecx, ecx
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 98   :     --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax

; 99   :     --w_count;

	mov	rax, QWORD PTR w_count$[rbp]
	dec	rax
	mov	QWORD PTR w_count$[rbp], rax

; 100  : 
; 101  :     // 残りの桁の繰上りを行い復帰する。
; 102  :     return (DoCarry(c, u_ptr, u_count, w_ptr, w_count));

	mov	rax, QWORD PTR w_count$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR w_ptr$[rbp]
	mov	r8, QWORD PTR u_count$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	DoCarry

; 103  : }

	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
Add_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT DoCarry
_TEXT	SEGMENT
tv72 = 192
tv76 = 200
c$ = 240
u_ptr$ = 248
u_count$ = 256
w_ptr$ = 264
w_count$ = 272
DoCarry	PROC						; COMDAT

; 41   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode
$LN2@DoCarry:

; 42   :     // 繰り上がりを続く限り行う
; 43   :     for (;;)
; 44   :     {
; 45   :         if (u_count <= 0)

	cmp	QWORD PTR u_count$[rbp], 0
	ja	SHORT $LN7@DoCarry

; 46   :         {
; 47   :             // u の最上位まで達してしまった場合
; 48   : 
; 49   :             if (c)

	movsx	eax, BYTE PTR c$[rbp]
	test	eax, eax
	je	SHORT $LN9@DoCarry

; 50   :             {
; 51   :                 // かつそれでも繰り上がりを行う必要がある場合
; 52   :                 if (w_count <= 0)

	cmp	QWORD PTR w_count$[rbp], 0
	ja	SHORT $LN10@DoCarry

; 53   :                 {
; 54   :                     // しかし w がもう終端に達してしまった場合
; 55   : 
; 56   :                     // w のバッファはこの余裕を見込んでいるのでこのルートには到達しないはず。
; 57   :                     return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@DoCarry
$LN10@DoCarry:

; 58   :                 }
; 59   :                 *w_ptr = 1;

	mov	rax, QWORD PTR w_ptr$[rbp]
	mov	QWORD PTR [rax], 1
$LN9@DoCarry:

; 60   :             }
; 61   : 
; 62   :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 63   : 
; 64   :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DoCarry

; 65   :         }

	jmp	$LN8@DoCarry
$LN7@DoCarry:

; 66   :         else if (c)

	movsx	eax, BYTE PTR c$[rbp]
	test	eax, eax
	je	$LN11@DoCarry

; 67   :         {
; 68   :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 69   : 
; 70   :             // 繰り上がりを継続する
; 71   :             c = _ADD_UNIT(c, *u_ptr++, 0, w_ptr++);

	mov	rax, QWORD PTR w_ptr$[rbp]
	mov	QWORD PTR tv72[rbp], rax
	mov	rax, QWORD PTR w_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR w_ptr$[rbp], rax
	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv76[rbp], rax
	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR u_ptr$[rbp], rax
	mov	r9, QWORD PTR tv72[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv76[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 72   :             --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax

; 73   :             --w_count;

	mov	rax, QWORD PTR w_count$[rbp]
	dec	rax
	mov	QWORD PTR w_count$[rbp], rax

; 74   :         }

	jmp	SHORT $LN12@DoCarry
$LN11@DoCarry:
$LN5@DoCarry:

; 75   :         else
; 76   :         {
; 77   :             // u の最上位に達しておらず、かつキャリーが立っていない場合
; 78   : 
; 79   :             // 繰り上がりを中断し、u の残りのデータをzにそのまま複写し、正常復帰する。
; 80   :             while (u_count > 0)

	cmp	QWORD PTR u_count$[rbp], 0
	jbe	SHORT $LN6@DoCarry

; 81   :             {
; 82   :                 *w_ptr++ = *u_ptr++;

	mov	rax, QWORD PTR w_ptr$[rbp]
	mov	rcx, QWORD PTR u_ptr$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR w_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR w_ptr$[rbp], rax
	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR u_ptr$[rbp], rax

; 83   :                 --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax

; 84   :                 --w_count;

	mov	rax, QWORD PTR w_count$[rbp]
	dec	rax
	mov	QWORD PTR w_count$[rbp], rax

; 85   :             }

	jmp	SHORT $LN5@DoCarry
$LN6@DoCarry:

; 86   :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DoCarry
$LN12@DoCarry:
$LN8@DoCarry:

; 87   :         }
; 88   :     }

	jmp	$LN2@DoCarry
$LN1@DoCarry:

; 89   : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
DoCarry	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_2WORDS_ADCX PROC					; COMDAT

; 4378 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 4379 : #ifdef _MSC_VER
; 4380 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 4381 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 4382 : #elif defined(__GNUC__)
; 4383 : #ifdef _M_IX86
; 4384 :     __asm__ volatile (
; 4385 :         "addb\t$-1, %0\n\t"
; 4386 :         "movl\t(%1), %%ecx\n\t"
; 4387 :         "adcxl\t(%2), %%ecx\n\t"
; 4388 :         "movl\t%%ecx, (%3)\n\t"
; 4389 :         "movl\t4(%1), %%ecx\n\t"
; 4390 :         "adcxl\t4(%2), %%ecx\n\t"
; 4391 :         "movl\t%%ecx, 4(%3)\n\t"
; 4392 :         "setc\t%0"
; 4393 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4394 :         :
; 4395 :         : "cc", "memory", "%ecx"
; 4396 : );
; 4397 : #elif defined(_M_IX64)
; 4398 :     __asm__ volatile (
; 4399 :         "addb\t$-1, %0\n\t"
; 4400 :         "movq\t(%1), %%rcx\n\t"
; 4401 :         "adcxq\t(%2), %%rcx\n\t"
; 4402 :         "movq\t%%rcx, (%3)\n\t"
; 4403 :         "movq\t8(%1), %%rcx\n\t"
; 4404 :         "adcxq\t8(%2), %%rcx\n\t"
; 4405 :         "movq\t%%rcx, 8(%3)\n\t"
; 4406 :         "setc\t%0"
; 4407 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4408 :         :
; 4409 :         : "cc", "memory", "%rcx"
; 4410 : );
; 4411 : #else
; 4412 : #error unknown platform
; 4413 : #endif
; 4414 : #else
; 4415 : #error unknown compiler
; 4416 : #endif
; 4417 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 4418 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_2WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_2WORDS_ADC PROC					; COMDAT

; 4335 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 4336 : #ifdef _MSC_VER
; 4337 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 4338 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 4339 : #elif defined(__GNUC__)
; 4340 : #ifdef _M_IX86
; 4341 :     __asm__ volatile (
; 4342 :         "addb\t$-1, %0\n\t"
; 4343 :         "movl\t(%1), %%ecx\n\t"
; 4344 :         "adcl\t(%2), %%ecx\n\t"
; 4345 :         "movl\t%%ecx, (%3)\n\t"
; 4346 :         "movl\t4(%1), %%ecx\n\t"
; 4347 :         "adcl\t4(%2), %%ecx\n\t"
; 4348 :         "movl\t%%ecx, 4(%3)\n\t"
; 4349 :         "setc\t%0"
; 4350 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4351 :         :
; 4352 :         : "cc", "memory", "%ecx"
; 4353 : );
; 4354 : #elif defined(_M_IX64)
; 4355 :     __asm__ volatile (
; 4356 :         "addb\t$-1, %0\n\t"
; 4357 :         "movq\t(%1), %%rcx\n\t"
; 4358 :         "adcq\t(%2), %%rcx\n\t"
; 4359 :         "movq\t%%rcx, (%3)\n\t"
; 4360 :         "movq\t8(%1), %%rcx\n\t"
; 4361 :         "adcq\t8(%2), %%rcx\n\t"
; 4362 :         "movq\t%%rcx, 8(%3)\n\t"
; 4363 :         "setc\t%0"
; 4364 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4365 :         :
; 4366 :         : "cc", "memory", "%rcx"
; 4367 : );
; 4368 : #else
; 4369 : #error unknown platform
; 4370 : #endif
; 4371 : #else
; 4372 : #error unknown compiler
; 4373 : #endif
; 4374 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 4375 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_2WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_4WORDS_ADCX PROC					; COMDAT

; 3936 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 3937 : #ifdef _MSC_VER
; 3938 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3939 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3940 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3941 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3942 : #elif defined(__GNUC__)
; 3943 : #ifdef _M_IX86
; 3944 :     __asm__ volatile (
; 3945 :         "addb\t$-1, %0\n\t"
; 3946 :         "movl\t(%1), %%ecx\n\t"
; 3947 :         "adcxl\t(%2), %%ecx\n\t"
; 3948 :         "movl\t%%ecx, (%3)\n\t"
; 3949 :         "movl\t4(%1), %%ecx\n\t"
; 3950 :         "adcxl\t4(%2), %%ecx\n\t"
; 3951 :         "movl\t%%ecx, 4(%3)\n\t"
; 3952 :         "movl\t8(%1), %%ecx\n\t"
; 3953 :         "adcxl\t8(%2), %%ecx\n\t"
; 3954 :         "movl\t%%ecx, 8(%3)\n\t"
; 3955 :         "movl\t12(%1), %%ecx\n\t"
; 3956 :         "adcxl\t12(%2), %%ecx\n\t"
; 3957 :         "movl\t%%ecx, 12(%3)\n\t"
; 3958 :         "setc\t%0"
; 3959 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3960 :         :
; 3961 :         : "cc", "memory", "%ecx"
; 3962 : );
; 3963 : #elif defined(_M_IX64)
; 3964 :     __asm__ volatile (
; 3965 :         "addb\t$-1, %0\n\t"
; 3966 :         "movq\t(%1), %%rcx\n\t"
; 3967 :         "adcxq\t(%2), %%rcx\n\t"
; 3968 :         "movq\t%%rcx, (%3)\n\t"
; 3969 :         "movq\t8(%1), %%rcx\n\t"
; 3970 :         "adcxq\t8(%2), %%rcx\n\t"
; 3971 :         "movq\t%%rcx, 8(%3)\n\t"
; 3972 :         "movq\t16(%1), %%rcx\n\t"
; 3973 :         "adcxq\t16(%2), %%rcx\n\t"
; 3974 :         "movq\t%%rcx, 16(%3)\n\t"
; 3975 :         "movq\t24(%1), %%rcx\n\t"
; 3976 :         "adcxq\t24(%2), %%rcx\n\t"
; 3977 :         "movq\t%%rcx, 24(%3)\n\t"
; 3978 :         "setc\t%0"
; 3979 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3980 :         :
; 3981 :         : "cc", "memory", "%rcx"
; 3982 : );
; 3983 : #else
; 3984 : #error unknown platform
; 3985 : #endif
; 3986 : #else
; 3987 : #error unknown compiler
; 3988 : #endif
; 3989 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 3990 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_4WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_4WORDS_ADC PROC					; COMDAT

; 3879 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 3880 : #ifdef _MSC_VER
; 3881 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3882 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3883 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3884 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3885 : #elif defined(__GNUC__)
; 3886 : #ifdef _M_IX86
; 3887 :     __asm__ volatile (
; 3888 :         "addb\t$-1, %0\n\t"
; 3889 :         "movl\t(%1), %%ecx\n\t"
; 3890 :         "adcl\t(%2), %%ecx\n\t"
; 3891 :         "movl\t%%ecx, (%3)\n\t"
; 3892 :         "movl\t4(%1), %%ecx\n\t"
; 3893 :         "adcl\t4(%2), %%ecx\n\t"
; 3894 :         "movl\t%%ecx, 4(%3)\n\t"
; 3895 :         "movl\t8(%1), %%ecx\n\t"
; 3896 :         "adcl\t8(%2), %%ecx\n\t"
; 3897 :         "movl\t%%ecx, 8(%3)\n\t"
; 3898 :         "movl\t12(%1), %%ecx\n\t"
; 3899 :         "adcl\t12(%2), %%ecx\n\t"
; 3900 :         "movl\t%%ecx, 12(%3)\n\t"
; 3901 :         "setc\t%0"
; 3902 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3903 :         :
; 3904 :         : "cc", "memory", "%ecx"
; 3905 : );
; 3906 : #elif defined(_M_IX64)
; 3907 :     __asm__ volatile (
; 3908 :         "addb\t$-1, %0\n\t"
; 3909 :         "movq\t(%1), %%rcx\n\t"
; 3910 :         "adcq\t(%2), %%rcx\n\t"
; 3911 :         "movq\t%%rcx, (%3)\n\t"
; 3912 :         "movq\t8(%1), %%rcx\n\t"
; 3913 :         "adcq\t8(%2), %%rcx\n\t"
; 3914 :         "movq\t%%rcx, 8(%3)\n\t"
; 3915 :         "movq\t16(%1), %%rcx\n\t"
; 3916 :         "adcq\t16(%2), %%rcx\n\t"
; 3917 :         "movq\t%%rcx, 16(%3)\n\t"
; 3918 :         "movq\t24(%1), %%rcx\n\t"
; 3919 :         "adcq\t24(%2), %%rcx\n\t"
; 3920 :         "movq\t%%rcx, 24(%3)\n\t"
; 3921 :         "setc\t%0"
; 3922 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3923 :         :
; 3924 :         : "cc", "memory", "%rcx"
; 3925 : );
; 3926 : #else
; 3927 : #error unknown platform
; 3928 : #endif
; 3929 : #else
; 3930 : #error unknown compiler
; 3931 : #endif
; 3932 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 3933 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_4WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_8WORDS_ADCX PROC					; COMDAT

; 3284 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 3285 : #ifdef _MSC_VER
; 3286 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3287 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3288 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3289 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3290 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	edx, 8
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3291 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	edx, 8
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3292 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	edx, 8
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3293 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	edx, 8
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 3294 : #elif defined(__GNUC__)
; 3295 : #ifdef _M_IX86
; 3296 :     __asm__ volatile (
; 3297 :         "addb\t$-1, %0\n\t"
; 3298 :         "movl\t(%1), %%ecx\n\t"
; 3299 :         "adcxl\t(%2), %%ecx\n\t"
; 3300 :         "movl\t%%ecx, (%3)\n\t"
; 3301 :         "movl\t4(%1), %%ecx\n\t"
; 3302 :         "adcxl\t4(%2), %%ecx\n\t"
; 3303 :         "movl\t%%ecx, 4(%3)\n\t"
; 3304 :         "movl\t8(%1), %%ecx\n\t"
; 3305 :         "adcxl\t8(%2), %%ecx\n\t"
; 3306 :         "movl\t%%ecx, 8(%3)\n\t"
; 3307 :         "movl\t12(%1), %%ecx\n\t"
; 3308 :         "adcxl\t12(%2), %%ecx\n\t"
; 3309 :         "movl\t%%ecx, 12(%3)\n\t"
; 3310 :         "movl\t16(%1), %%ecx\n\t"
; 3311 :         "adcxl\t16(%2), %%ecx\n\t"
; 3312 :         "movl\t%%ecx, 16(%3)\n\t"
; 3313 :         "movl\t20(%1), %%ecx\n\t"
; 3314 :         "adcxl\t20(%2), %%ecx\n\t"
; 3315 :         "movl\t%%ecx, 20(%3)\n\t"
; 3316 :         "movl\t24(%1), %%ecx\n\t"
; 3317 :         "adcxl\t24(%2), %%ecx\n\t"
; 3318 :         "movl\t%%ecx, 24(%3)\n\t"
; 3319 :         "movl\t28(%1), %%ecx\n\t"
; 3320 :         "adcxl\t28(%2), %%ecx\n\t"
; 3321 :         "movl\t%%ecx, 28(%3)\n\t"
; 3322 :         "setc\t%0"
; 3323 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3324 :         :
; 3325 :         : "cc", "memory", "%ecx"
; 3326 : );
; 3327 : #elif defined(_M_IX64)
; 3328 :     __asm__ volatile (
; 3329 :         "addb\t$-1, %0\n\t"
; 3330 :         "movq\t(%1), %%rcx\n\t"
; 3331 :         "adcxq\t(%2), %%rcx\n\t"
; 3332 :         "movq\t%%rcx, (%3)\n\t"
; 3333 :         "movq\t8(%1), %%rcx\n\t"
; 3334 :         "adcxq\t8(%2), %%rcx\n\t"
; 3335 :         "movq\t%%rcx, 8(%3)\n\t"
; 3336 :         "movq\t16(%1), %%rcx\n\t"
; 3337 :         "adcxq\t16(%2), %%rcx\n\t"
; 3338 :         "movq\t%%rcx, 16(%3)\n\t"
; 3339 :         "movq\t24(%1), %%rcx\n\t"
; 3340 :         "adcxq\t24(%2), %%rcx\n\t"
; 3341 :         "movq\t%%rcx, 24(%3)\n\t"
; 3342 :         "movq\t32(%1), %%rcx\n\t"
; 3343 :         "adcxq\t32(%2), %%rcx\n\t"
; 3344 :         "movq\t%%rcx, 32(%3)\n\t"
; 3345 :         "movq\t40(%1), %%rcx\n\t"
; 3346 :         "adcxq\t40(%2), %%rcx\n\t"
; 3347 :         "movq\t%%rcx, 40(%3)\n\t"
; 3348 :         "movq\t48(%1), %%rcx\n\t"
; 3349 :         "adcxq\t48(%2), %%rcx\n\t"
; 3350 :         "movq\t%%rcx, 48(%3)\n\t"
; 3351 :         "movq\t56(%1), %%rcx\n\t"
; 3352 :         "adcxq\t56(%2), %%rcx\n\t"
; 3353 :         "movq\t%%rcx, 56(%3)\n\t"
; 3354 :         "setc\t%0"
; 3355 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3356 :         :
; 3357 :         : "cc", "memory", "%rcx"
; 3358 : );
; 3359 : #else
; 3360 : #error unknown platform
; 3361 : #endif
; 3362 : #else
; 3363 : #error unknown compiler
; 3364 : #endif
; 3365 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 3366 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_8WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_8WORDS_ADC PROC					; COMDAT

; 3199 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 3200 : #ifdef _MSC_VER
; 3201 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3202 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3203 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3204 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3205 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	edx, 8
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3206 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	edx, 8
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3207 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	edx, 8
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3208 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	edx, 8
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 3209 : #elif defined(__GNUC__)
; 3210 : #ifdef _M_IX86
; 3211 :     __asm__ volatile (
; 3212 :         "addb\t$-1, %0\n\t"
; 3213 :         "movl\t(%1), %%ecx\n\t"
; 3214 :         "adcl\t(%2), %%ecx\n\t"
; 3215 :         "movl\t%%ecx, (%3)\n\t"
; 3216 :         "movl\t4(%1), %%ecx\n\t"
; 3217 :         "adcl\t4(%2), %%ecx\n\t"
; 3218 :         "movl\t%%ecx, 4(%3)\n\t"
; 3219 :         "movl\t8(%1), %%ecx\n\t"
; 3220 :         "adcl\t8(%2), %%ecx\n\t"
; 3221 :         "movl\t%%ecx, 8(%3)\n\t"
; 3222 :         "movl\t12(%1), %%ecx\n\t"
; 3223 :         "adcl\t12(%2), %%ecx\n\t"
; 3224 :         "movl\t%%ecx, 12(%3)\n\t"
; 3225 :         "movl\t16(%1), %%ecx\n\t"
; 3226 :         "adcl\t16(%2), %%ecx\n\t"
; 3227 :         "movl\t%%ecx, 16(%3)\n\t"
; 3228 :         "movl\t20(%1), %%ecx\n\t"
; 3229 :         "adcl\t20(%2), %%ecx\n\t"
; 3230 :         "movl\t%%ecx, 20(%3)\n\t"
; 3231 :         "movl\t24(%1), %%ecx\n\t"
; 3232 :         "adcl\t24(%2), %%ecx\n\t"
; 3233 :         "movl\t%%ecx, 24(%3)\n\t"
; 3234 :         "movl\t28(%1), %%ecx\n\t"
; 3235 :         "adcl\t28(%2), %%ecx\n\t"
; 3236 :         "movl\t%%ecx, 28(%3)\n\t"
; 3237 :         "setc\t%0"
; 3238 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3239 :         :
; 3240 :         : "cc", "memory", "%ecx"
; 3241 : );
; 3242 : #elif defined(_M_IX64)
; 3243 :     __asm__ volatile (
; 3244 :         "addb\t$-1, %0\n\t"
; 3245 :         "movq\t(%1), %%rcx\n\t"
; 3246 :         "adcq\t(%2), %%rcx\n\t"
; 3247 :         "movq\t%%rcx, (%3)\n\t"
; 3248 :         "movq\t8(%1), %%rcx\n\t"
; 3249 :         "adcq\t8(%2), %%rcx\n\t"
; 3250 :         "movq\t%%rcx, 8(%3)\n\t"
; 3251 :         "movq\t16(%1), %%rcx\n\t"
; 3252 :         "adcq\t16(%2), %%rcx\n\t"
; 3253 :         "movq\t%%rcx, 16(%3)\n\t"
; 3254 :         "movq\t24(%1), %%rcx\n\t"
; 3255 :         "adcq\t24(%2), %%rcx\n\t"
; 3256 :         "movq\t%%rcx, 24(%3)\n\t"
; 3257 :         "movq\t32(%1), %%rcx\n\t"
; 3258 :         "adcq\t32(%2), %%rcx\n\t"
; 3259 :         "movq\t%%rcx, 32(%3)\n\t"
; 3260 :         "movq\t40(%1), %%rcx\n\t"
; 3261 :         "adcq\t40(%2), %%rcx\n\t"
; 3262 :         "movq\t%%rcx, 40(%3)\n\t"
; 3263 :         "movq\t48(%1), %%rcx\n\t"
; 3264 :         "adcq\t48(%2), %%rcx\n\t"
; 3265 :         "movq\t%%rcx, 48(%3)\n\t"
; 3266 :         "movq\t56(%1), %%rcx\n\t"
; 3267 :         "adcq\t56(%2), %%rcx\n\t"
; 3268 :         "movq\t%%rcx, 56(%3)\n\t"
; 3269 :         "setc\t%0"
; 3270 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3271 :         :
; 3272 :         : "cc", "memory", "%rcx"
; 3273 : );
; 3274 : #else
; 3275 : #error unknown platform
; 3276 : #endif
; 3277 : #else
; 3278 : #error unknown compiler
; 3279 : #endif
; 3280 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 3281 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_8WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_16WORDS_ADCX PROC					; COMDAT

; 2212 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 2213 : #ifdef _MSC_VER
; 2214 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2215 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2216 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2217 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2218 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	edx, 8
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2219 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	edx, 8
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2220 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	edx, 8
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2221 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	edx, 8
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2222 :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	edx, 8
	imul	rdx, rdx, 8
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2223 :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	edx, 8
	imul	rdx, rdx, 9
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2224 :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	edx, 8
	imul	rdx, rdx, 10
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2225 :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	edx, 8
	imul	rdx, rdx, 11
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2226 :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	edx, 8
	imul	rdx, rdx, 12
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2227 :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	edx, 8
	imul	rdx, rdx, 13
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2228 :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	edx, 8
	imul	rdx, rdx, 14
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2229 :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	edx, 8
	imul	rdx, rdx, 15
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 2230 : #elif defined(__GNUC__)
; 2231 : #ifdef _M_IX86
; 2232 :     __asm__ volatile (
; 2233 :         "addb\t$-1, %0\n\t"
; 2234 :         "movl\t(%1), %%ecx\n\t"
; 2235 :         "adcxl\t(%2), %%ecx\n\t"
; 2236 :         "movl\t%%ecx, (%3)\n\t"
; 2237 :         "movl\t4(%1), %%ecx\n\t"
; 2238 :         "adcxl\t4(%2), %%ecx\n\t"
; 2239 :         "movl\t%%ecx, 4(%3)\n\t"
; 2240 :         "movl\t8(%1), %%ecx\n\t"
; 2241 :         "adcxl\t8(%2), %%ecx\n\t"
; 2242 :         "movl\t%%ecx, 8(%3)\n\t"
; 2243 :         "movl\t12(%1), %%ecx\n\t"
; 2244 :         "adcxl\t12(%2), %%ecx\n\t"
; 2245 :         "movl\t%%ecx, 12(%3)\n\t"
; 2246 :         "movl\t16(%1), %%ecx\n\t"
; 2247 :         "adcxl\t16(%2), %%ecx\n\t"
; 2248 :         "movl\t%%ecx, 16(%3)\n\t"
; 2249 :         "movl\t20(%1), %%ecx\n\t"
; 2250 :         "adcxl\t20(%2), %%ecx\n\t"
; 2251 :         "movl\t%%ecx, 20(%3)\n\t"
; 2252 :         "movl\t24(%1), %%ecx\n\t"
; 2253 :         "adcxl\t24(%2), %%ecx\n\t"
; 2254 :         "movl\t%%ecx, 24(%3)\n\t"
; 2255 :         "movl\t28(%1), %%ecx\n\t"
; 2256 :         "adcxl\t28(%2), %%ecx\n\t"
; 2257 :         "movl\t%%ecx, 28(%3)\n\t"
; 2258 :         "movl\t32(%1), %%ecx\n\t"
; 2259 :         "adcxl\t32(%2), %%ecx\n\t"
; 2260 :         "movl\t%%ecx, 32(%3)\n\t"
; 2261 :         "movl\t36(%1), %%ecx\n\t"
; 2262 :         "adcxl\t36(%2), %%ecx\n\t"
; 2263 :         "movl\t%%ecx, 36(%3)\n\t"
; 2264 :         "movl\t40(%1), %%ecx\n\t"
; 2265 :         "adcxl\t40(%2), %%ecx\n\t"
; 2266 :         "movl\t%%ecx, 40(%3)\n\t"
; 2267 :         "movl\t44(%1), %%ecx\n\t"
; 2268 :         "adcxl\t44(%2), %%ecx\n\t"
; 2269 :         "movl\t%%ecx, 44(%3)\n\t"
; 2270 :         "movl\t48(%1), %%ecx\n\t"
; 2271 :         "adcxl\t48(%2), %%ecx\n\t"
; 2272 :         "movl\t%%ecx, 48(%3)\n\t"
; 2273 :         "movl\t52(%1), %%ecx\n\t"
; 2274 :         "adcxl\t52(%2), %%ecx\n\t"
; 2275 :         "movl\t%%ecx, 52(%3)\n\t"
; 2276 :         "movl\t56(%1), %%ecx\n\t"
; 2277 :         "adcxl\t56(%2), %%ecx\n\t"
; 2278 :         "movl\t%%ecx, 56(%3)\n\t"
; 2279 :         "movl\t60(%1), %%ecx\n\t"
; 2280 :         "adcxl\t60(%2), %%ecx\n\t"
; 2281 :         "movl\t%%ecx, 60(%3)\n\t"
; 2282 :         "setc\t%0"
; 2283 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2284 :         :
; 2285 :         : "cc", "memory", "%ecx"
; 2286 : );
; 2287 : #elif defined(_M_IX64)
; 2288 :     __asm__ volatile (
; 2289 :         "addb\t$-1, %0\n\t"
; 2290 :         "movq\t(%1), %%rcx\n\t"
; 2291 :         "adcxq\t(%2), %%rcx\n\t"
; 2292 :         "movq\t%%rcx, (%3)\n\t"
; 2293 :         "movq\t8(%1), %%rcx\n\t"
; 2294 :         "adcxq\t8(%2), %%rcx\n\t"
; 2295 :         "movq\t%%rcx, 8(%3)\n\t"
; 2296 :         "movq\t16(%1), %%rcx\n\t"
; 2297 :         "adcxq\t16(%2), %%rcx\n\t"
; 2298 :         "movq\t%%rcx, 16(%3)\n\t"
; 2299 :         "movq\t24(%1), %%rcx\n\t"
; 2300 :         "adcxq\t24(%2), %%rcx\n\t"
; 2301 :         "movq\t%%rcx, 24(%3)\n\t"
; 2302 :         "movq\t32(%1), %%rcx\n\t"
; 2303 :         "adcxq\t32(%2), %%rcx\n\t"
; 2304 :         "movq\t%%rcx, 32(%3)\n\t"
; 2305 :         "movq\t40(%1), %%rcx\n\t"
; 2306 :         "adcxq\t40(%2), %%rcx\n\t"
; 2307 :         "movq\t%%rcx, 40(%3)\n\t"
; 2308 :         "movq\t48(%1), %%rcx\n\t"
; 2309 :         "adcxq\t48(%2), %%rcx\n\t"
; 2310 :         "movq\t%%rcx, 48(%3)\n\t"
; 2311 :         "movq\t56(%1), %%rcx\n\t"
; 2312 :         "adcxq\t56(%2), %%rcx\n\t"
; 2313 :         "movq\t%%rcx, 56(%3)\n\t"
; 2314 :         "movq\t64(%1), %%rcx\n\t"
; 2315 :         "adcxq\t64(%2), %%rcx\n\t"
; 2316 :         "movq\t%%rcx, 64(%3)\n\t"
; 2317 :         "movq\t72(%1), %%rcx\n\t"
; 2318 :         "adcxq\t72(%2), %%rcx\n\t"
; 2319 :         "movq\t%%rcx, 72(%3)\n\t"
; 2320 :         "movq\t80(%1), %%rcx\n\t"
; 2321 :         "adcxq\t80(%2), %%rcx\n\t"
; 2322 :         "movq\t%%rcx, 80(%3)\n\t"
; 2323 :         "movq\t88(%1), %%rcx\n\t"
; 2324 :         "adcxq\t88(%2), %%rcx\n\t"
; 2325 :         "movq\t%%rcx, 88(%3)\n\t"
; 2326 :         "movq\t96(%1), %%rcx\n\t"
; 2327 :         "adcxq\t96(%2), %%rcx\n\t"
; 2328 :         "movq\t%%rcx, 96(%3)\n\t"
; 2329 :         "movq\t104(%1), %%rcx\n\t"
; 2330 :         "adcxq\t104(%2), %%rcx\n\t"
; 2331 :         "movq\t%%rcx, 104(%3)\n\t"
; 2332 :         "movq\t112(%1), %%rcx\n\t"
; 2333 :         "adcxq\t112(%2), %%rcx\n\t"
; 2334 :         "movq\t%%rcx, 112(%3)\n\t"
; 2335 :         "movq\t120(%1), %%rcx\n\t"
; 2336 :         "adcxq\t120(%2), %%rcx\n\t"
; 2337 :         "movq\t%%rcx, 120(%3)\n\t"
; 2338 :         "setc\t%0"
; 2339 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2340 :         :
; 2341 :         : "cc", "memory", "%rcx"
; 2342 : );
; 2343 : #else
; 2344 : #error unknown platform
; 2345 : #endif
; 2346 : #else
; 2347 : #error unknown compiler
; 2348 : #endif
; 2349 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 2350 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_16WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_16WORDS_ADC PROC					; COMDAT

; 2071 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 2072 : #ifdef _MSC_VER
; 2073 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2074 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2075 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2076 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2077 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	edx, 8
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2078 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	edx, 8
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2079 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	edx, 8
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2080 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	edx, 8
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2081 :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	edx, 8
	imul	rdx, rdx, 8
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2082 :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	edx, 8
	imul	rdx, rdx, 9
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2083 :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	edx, 8
	imul	rdx, rdx, 10
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2084 :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	edx, 8
	imul	rdx, rdx, 11
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2085 :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	edx, 8
	imul	rdx, rdx, 12
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2086 :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	edx, 8
	imul	rdx, rdx, 13
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2087 :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	edx, 8
	imul	rdx, rdx, 14
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2088 :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	edx, 8
	imul	rdx, rdx, 15
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 2089 : #elif defined(__GNUC__)
; 2090 : #ifdef _M_IX86
; 2091 :     __asm__ volatile (
; 2092 :         "addb\t$-1, %0\n\t"
; 2093 :         "movl\t(%1), %%ecx\n\t"
; 2094 :         "adcl\t(%2), %%ecx\n\t"
; 2095 :         "movl\t%%ecx, (%3)\n\t"
; 2096 :         "movl\t4(%1), %%ecx\n\t"
; 2097 :         "adcl\t4(%2), %%ecx\n\t"
; 2098 :         "movl\t%%ecx, 4(%3)\n\t"
; 2099 :         "movl\t8(%1), %%ecx\n\t"
; 2100 :         "adcl\t8(%2), %%ecx\n\t"
; 2101 :         "movl\t%%ecx, 8(%3)\n\t"
; 2102 :         "movl\t12(%1), %%ecx\n\t"
; 2103 :         "adcl\t12(%2), %%ecx\n\t"
; 2104 :         "movl\t%%ecx, 12(%3)\n\t"
; 2105 :         "movl\t16(%1), %%ecx\n\t"
; 2106 :         "adcl\t16(%2), %%ecx\n\t"
; 2107 :         "movl\t%%ecx, 16(%3)\n\t"
; 2108 :         "movl\t20(%1), %%ecx\n\t"
; 2109 :         "adcl\t20(%2), %%ecx\n\t"
; 2110 :         "movl\t%%ecx, 20(%3)\n\t"
; 2111 :         "movl\t24(%1), %%ecx\n\t"
; 2112 :         "adcl\t24(%2), %%ecx\n\t"
; 2113 :         "movl\t%%ecx, 24(%3)\n\t"
; 2114 :         "movl\t28(%1), %%ecx\n\t"
; 2115 :         "adcl\t28(%2), %%ecx\n\t"
; 2116 :         "movl\t%%ecx, 28(%3)\n\t"
; 2117 :         "movl\t32(%1), %%ecx\n\t"
; 2118 :         "adcl\t32(%2), %%ecx\n\t"
; 2119 :         "movl\t%%ecx, 32(%3)\n\t"
; 2120 :         "movl\t36(%1), %%ecx\n\t"
; 2121 :         "adcl\t36(%2), %%ecx\n\t"
; 2122 :         "movl\t%%ecx, 36(%3)\n\t"
; 2123 :         "movl\t40(%1), %%ecx\n\t"
; 2124 :         "adcl\t40(%2), %%ecx\n\t"
; 2125 :         "movl\t%%ecx, 40(%3)\n\t"
; 2126 :         "movl\t44(%1), %%ecx\n\t"
; 2127 :         "adcl\t44(%2), %%ecx\n\t"
; 2128 :         "movl\t%%ecx, 44(%3)\n\t"
; 2129 :         "movl\t48(%1), %%ecx\n\t"
; 2130 :         "adcl\t48(%2), %%ecx\n\t"
; 2131 :         "movl\t%%ecx, 48(%3)\n\t"
; 2132 :         "movl\t52(%1), %%ecx\n\t"
; 2133 :         "adcl\t52(%2), %%ecx\n\t"
; 2134 :         "movl\t%%ecx, 52(%3)\n\t"
; 2135 :         "movl\t56(%1), %%ecx\n\t"
; 2136 :         "adcl\t56(%2), %%ecx\n\t"
; 2137 :         "movl\t%%ecx, 56(%3)\n\t"
; 2138 :         "movl\t60(%1), %%ecx\n\t"
; 2139 :         "adcl\t60(%2), %%ecx\n\t"
; 2140 :         "movl\t%%ecx, 60(%3)\n\t"
; 2141 :         "setc\t%0"
; 2142 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2143 :         :
; 2144 :         : "cc", "memory", "%ecx"
; 2145 : );
; 2146 : #elif defined(_M_IX64)
; 2147 :     __asm__ volatile (
; 2148 :         "addb\t$-1, %0\n\t"
; 2149 :         "movq\t(%1), %%rcx\n\t"
; 2150 :         "adcq\t(%2), %%rcx\n\t"
; 2151 :         "movq\t%%rcx, (%3)\n\t"
; 2152 :         "movq\t8(%1), %%rcx\n\t"
; 2153 :         "adcq\t8(%2), %%rcx\n\t"
; 2154 :         "movq\t%%rcx, 8(%3)\n\t"
; 2155 :         "movq\t16(%1), %%rcx\n\t"
; 2156 :         "adcq\t16(%2), %%rcx\n\t"
; 2157 :         "movq\t%%rcx, 16(%3)\n\t"
; 2158 :         "movq\t24(%1), %%rcx\n\t"
; 2159 :         "adcq\t24(%2), %%rcx\n\t"
; 2160 :         "movq\t%%rcx, 24(%3)\n\t"
; 2161 :         "movq\t32(%1), %%rcx\n\t"
; 2162 :         "adcq\t32(%2), %%rcx\n\t"
; 2163 :         "movq\t%%rcx, 32(%3)\n\t"
; 2164 :         "movq\t40(%1), %%rcx\n\t"
; 2165 :         "adcq\t40(%2), %%rcx\n\t"
; 2166 :         "movq\t%%rcx, 40(%3)\n\t"
; 2167 :         "movq\t48(%1), %%rcx\n\t"
; 2168 :         "adcq\t48(%2), %%rcx\n\t"
; 2169 :         "movq\t%%rcx, 48(%3)\n\t"
; 2170 :         "movq\t56(%1), %%rcx\n\t"
; 2171 :         "adcq\t56(%2), %%rcx\n\t"
; 2172 :         "movq\t%%rcx, 56(%3)\n\t"
; 2173 :         "movq\t64(%1), %%rcx\n\t"
; 2174 :         "adcq\t64(%2), %%rcx\n\t"
; 2175 :         "movq\t%%rcx, 64(%3)\n\t"
; 2176 :         "movq\t72(%1), %%rcx\n\t"
; 2177 :         "adcq\t72(%2), %%rcx\n\t"
; 2178 :         "movq\t%%rcx, 72(%3)\n\t"
; 2179 :         "movq\t80(%1), %%rcx\n\t"
; 2180 :         "adcq\t80(%2), %%rcx\n\t"
; 2181 :         "movq\t%%rcx, 80(%3)\n\t"
; 2182 :         "movq\t88(%1), %%rcx\n\t"
; 2183 :         "adcq\t88(%2), %%rcx\n\t"
; 2184 :         "movq\t%%rcx, 88(%3)\n\t"
; 2185 :         "movq\t96(%1), %%rcx\n\t"
; 2186 :         "adcq\t96(%2), %%rcx\n\t"
; 2187 :         "movq\t%%rcx, 96(%3)\n\t"
; 2188 :         "movq\t104(%1), %%rcx\n\t"
; 2189 :         "adcq\t104(%2), %%rcx\n\t"
; 2190 :         "movq\t%%rcx, 104(%3)\n\t"
; 2191 :         "movq\t112(%1), %%rcx\n\t"
; 2192 :         "adcq\t112(%2), %%rcx\n\t"
; 2193 :         "movq\t%%rcx, 112(%3)\n\t"
; 2194 :         "movq\t120(%1), %%rcx\n\t"
; 2195 :         "adcq\t120(%2), %%rcx\n\t"
; 2196 :         "movq\t%%rcx, 120(%3)\n\t"
; 2197 :         "setc\t%0"
; 2198 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2199 :         :
; 2200 :         : "cc", "memory", "%rcx"
; 2201 : );
; 2202 : #else
; 2203 : #error unknown platform
; 2204 : #endif
; 2205 : #else
; 2206 : #error unknown compiler
; 2207 : #endif
; 2208 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 2209 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_16WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_32WORDS_ADCX PROC					; COMDAT

; 300  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 301  : #ifdef _MSC_VER
; 302  :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 303  :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 304  :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 305  :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 306  :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	edx, 8
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 307  :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	edx, 8
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 308  :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	edx, 8
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 309  :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	edx, 8
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 310  :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	edx, 8
	imul	rdx, rdx, 8
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 311  :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	edx, 8
	imul	rdx, rdx, 9
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 312  :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	edx, 8
	imul	rdx, rdx, 10
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 313  :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	edx, 8
	imul	rdx, rdx, 11
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 314  :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	edx, 8
	imul	rdx, rdx, 12
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 315  :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	edx, 8
	imul	rdx, rdx, 13
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 316  :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	edx, 8
	imul	rdx, rdx, 14
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 317  :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	edx, 8
	imul	rdx, rdx, 15
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 318  :     c = _ADDX_UNIT(c, xp[16], yp[16], &zp[16]);

	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 16
	mov	edx, 8
	imul	rdx, rdx, 16
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 319  :     c = _ADDX_UNIT(c, xp[17], yp[17], &zp[17]);

	mov	eax, 8
	imul	rax, rax, 17
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	edx, 8
	imul	rdx, rdx, 17
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 320  :     c = _ADDX_UNIT(c, xp[18], yp[18], &zp[18]);

	mov	eax, 8
	imul	rax, rax, 18
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	edx, 8
	imul	rdx, rdx, 18
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 321  :     c = _ADDX_UNIT(c, xp[19], yp[19], &zp[19]);

	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 19
	mov	edx, 8
	imul	rdx, rdx, 19
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 322  :     c = _ADDX_UNIT(c, xp[20], yp[20], &zp[20]);

	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 20
	mov	edx, 8
	imul	rdx, rdx, 20
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 323  :     c = _ADDX_UNIT(c, xp[21], yp[21], &zp[21]);

	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 21
	mov	edx, 8
	imul	rdx, rdx, 21
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 324  :     c = _ADDX_UNIT(c, xp[22], yp[22], &zp[22]);

	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 22
	mov	edx, 8
	imul	rdx, rdx, 22
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 325  :     c = _ADDX_UNIT(c, xp[23], yp[23], &zp[23]);

	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 23
	mov	edx, 8
	imul	rdx, rdx, 23
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 326  :     c = _ADDX_UNIT(c, xp[24], yp[24], &zp[24]);

	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 24
	mov	edx, 8
	imul	rdx, rdx, 24
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 327  :     c = _ADDX_UNIT(c, xp[25], yp[25], &zp[25]);

	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 25
	mov	edx, 8
	imul	rdx, rdx, 25
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 328  :     c = _ADDX_UNIT(c, xp[26], yp[26], &zp[26]);

	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 26
	mov	edx, 8
	imul	rdx, rdx, 26
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 329  :     c = _ADDX_UNIT(c, xp[27], yp[27], &zp[27]);

	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 27
	mov	edx, 8
	imul	rdx, rdx, 27
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 330  :     c = _ADDX_UNIT(c, xp[28], yp[28], &zp[28]);

	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 28
	mov	edx, 8
	imul	rdx, rdx, 28
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 331  :     c = _ADDX_UNIT(c, xp[29], yp[29], &zp[29]);

	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 29
	mov	edx, 8
	imul	rdx, rdx, 29
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 332  :     c = _ADDX_UNIT(c, xp[30], yp[30], &zp[30]);

	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	edx, 8
	imul	rdx, rdx, 30
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 333  :     c = _ADDX_UNIT(c, xp[31], yp[31], &zp[31]);

	mov	eax, 8
	imul	rax, rax, 31
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	edx, 8
	imul	rdx, rdx, 31
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT
	mov	BYTE PTR c$[rbp], al

; 334  : #elif defined(__GNUC__)
; 335  : #ifdef _M_IX86
; 336  :     __asm__ volatile (
; 337  :         "addb\t$-1, %0\n\t"
; 338  :         "movl\t(%1), %%ecx\n\t"
; 339  :         "adcxl\t(%2), %%ecx\n\t"
; 340  :         "movl\t%%ecx, (%3)\n\t"
; 341  :         "movl\t4(%1), %%ecx\n\t"
; 342  :         "adcxl\t4(%2), %%ecx\n\t"
; 343  :         "movl\t%%ecx, 4(%3)\n\t"
; 344  :         "movl\t8(%1), %%ecx\n\t"
; 345  :         "adcxl\t8(%2), %%ecx\n\t"
; 346  :         "movl\t%%ecx, 8(%3)\n\t"
; 347  :         "movl\t12(%1), %%ecx\n\t"
; 348  :         "adcxl\t12(%2), %%ecx\n\t"
; 349  :         "movl\t%%ecx, 12(%3)\n\t"
; 350  :         "movl\t16(%1), %%ecx\n\t"
; 351  :         "adcxl\t16(%2), %%ecx\n\t"
; 352  :         "movl\t%%ecx, 16(%3)\n\t"
; 353  :         "movl\t20(%1), %%ecx\n\t"
; 354  :         "adcxl\t20(%2), %%ecx\n\t"
; 355  :         "movl\t%%ecx, 20(%3)\n\t"
; 356  :         "movl\t24(%1), %%ecx\n\t"
; 357  :         "adcxl\t24(%2), %%ecx\n\t"
; 358  :         "movl\t%%ecx, 24(%3)\n\t"
; 359  :         "movl\t28(%1), %%ecx\n\t"
; 360  :         "adcxl\t28(%2), %%ecx\n\t"
; 361  :         "movl\t%%ecx, 28(%3)\n\t"
; 362  :         "movl\t32(%1), %%ecx\n\t"
; 363  :         "adcxl\t32(%2), %%ecx\n\t"
; 364  :         "movl\t%%ecx, 32(%3)\n\t"
; 365  :         "movl\t36(%1), %%ecx\n\t"
; 366  :         "adcxl\t36(%2), %%ecx\n\t"
; 367  :         "movl\t%%ecx, 36(%3)\n\t"
; 368  :         "movl\t40(%1), %%ecx\n\t"
; 369  :         "adcxl\t40(%2), %%ecx\n\t"
; 370  :         "movl\t%%ecx, 40(%3)\n\t"
; 371  :         "movl\t44(%1), %%ecx\n\t"
; 372  :         "adcxl\t44(%2), %%ecx\n\t"
; 373  :         "movl\t%%ecx, 44(%3)\n\t"
; 374  :         "movl\t48(%1), %%ecx\n\t"
; 375  :         "adcxl\t48(%2), %%ecx\n\t"
; 376  :         "movl\t%%ecx, 48(%3)\n\t"
; 377  :         "movl\t52(%1), %%ecx\n\t"
; 378  :         "adcxl\t52(%2), %%ecx\n\t"
; 379  :         "movl\t%%ecx, 52(%3)\n\t"
; 380  :         "movl\t56(%1), %%ecx\n\t"
; 381  :         "adcxl\t56(%2), %%ecx\n\t"
; 382  :         "movl\t%%ecx, 56(%3)\n\t"
; 383  :         "movl\t60(%1), %%ecx\n\t"
; 384  :         "adcxl\t60(%2), %%ecx\n\t"
; 385  :         "movl\t%%ecx, 60(%3)\n\t"
; 386  :         "movl\t64(%1), %%ecx\n\t"
; 387  :         "adcxl\t64(%2), %%ecx\n\t"
; 388  :         "movl\t%%ecx, 64(%3)\n\t"
; 389  :         "movl\t68(%1), %%ecx\n\t"
; 390  :         "adcxl\t68(%2), %%ecx\n\t"
; 391  :         "movl\t%%ecx, 68(%3)\n\t"
; 392  :         "movl\t72(%1), %%ecx\n\t"
; 393  :         "adcxl\t72(%2), %%ecx\n\t"
; 394  :         "movl\t%%ecx, 72(%3)\n\t"
; 395  :         "movl\t76(%1), %%ecx\n\t"
; 396  :         "adcxl\t76(%2), %%ecx\n\t"
; 397  :         "movl\t%%ecx, 76(%3)\n\t"
; 398  :         "movl\t80(%1), %%ecx\n\t"
; 399  :         "adcxl\t80(%2), %%ecx\n\t"
; 400  :         "movl\t%%ecx, 80(%3)\n\t"
; 401  :         "movl\t84(%1), %%ecx\n\t"
; 402  :         "adcxl\t84(%2), %%ecx\n\t"
; 403  :         "movl\t%%ecx, 84(%3)\n\t"
; 404  :         "movl\t88(%1), %%ecx\n\t"
; 405  :         "adcxl\t88(%2), %%ecx\n\t"
; 406  :         "movl\t%%ecx, 88(%3)\n\t"
; 407  :         "movl\t92(%1), %%ecx\n\t"
; 408  :         "adcxl\t92(%2), %%ecx\n\t"
; 409  :         "movl\t%%ecx, 92(%3)\n\t"
; 410  :         "movl\t96(%1), %%ecx\n\t"
; 411  :         "adcxl\t96(%2), %%ecx\n\t"
; 412  :         "movl\t%%ecx, 96(%3)\n\t"
; 413  :         "movl\t100(%1), %%ecx\n\t"
; 414  :         "adcxl\t100(%2), %%ecx\n\t"
; 415  :         "movl\t%%ecx, 100(%3)\n\t"
; 416  :         "movl\t104(%1), %%ecx\n\t"
; 417  :         "adcxl\t104(%2), %%ecx\n\t"
; 418  :         "movl\t%%ecx, 104(%3)\n\t"
; 419  :         "movl\t108(%1), %%ecx\n\t"
; 420  :         "adcxl\t108(%2), %%ecx\n\t"
; 421  :         "movl\t%%ecx, 108(%3)\n\t"
; 422  :         "movl\t112(%1), %%ecx\n\t"
; 423  :         "adcxl\t112(%2), %%ecx\n\t"
; 424  :         "movl\t%%ecx, 112(%3)\n\t"
; 425  :         "movl\t116(%1), %%ecx\n\t"
; 426  :         "adcxl\t116(%2), %%ecx\n\t"
; 427  :         "movl\t%%ecx, 116(%3)\n\t"
; 428  :         "movl\t120(%1), %%ecx\n\t"
; 429  :         "adcxl\t120(%2), %%ecx\n\t"
; 430  :         "movl\t%%ecx, 120(%3)\n\t"
; 431  :         "movl\t124(%1), %%ecx\n\t"
; 432  :         "adcxl\t124(%2), %%ecx\n\t"
; 433  :         "movl\t%%ecx, 124(%3)\n\t"
; 434  :         "setc\t%0"
; 435  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 436  :         :
; 437  :         : "cc", "memory", "%ecx"
; 438  : );
; 439  : #elif defined(_M_IX64)
; 440  :     __asm__ volatile (
; 441  :         "addb\t$-1, %0\n\t"
; 442  :         "movq\t(%1), %%rcx\n\t"
; 443  :         "adcxq\t(%2), %%rcx\n\t"
; 444  :         "movq\t%%rcx, (%3)\n\t"
; 445  :         "movq\t8(%1), %%rcx\n\t"
; 446  :         "adcxq\t8(%2), %%rcx\n\t"
; 447  :         "movq\t%%rcx, 8(%3)\n\t"
; 448  :         "movq\t16(%1), %%rcx\n\t"
; 449  :         "adcxq\t16(%2), %%rcx\n\t"
; 450  :         "movq\t%%rcx, 16(%3)\n\t"
; 451  :         "movq\t24(%1), %%rcx\n\t"
; 452  :         "adcxq\t24(%2), %%rcx\n\t"
; 453  :         "movq\t%%rcx, 24(%3)\n\t"
; 454  :         "movq\t32(%1), %%rcx\n\t"
; 455  :         "adcxq\t32(%2), %%rcx\n\t"
; 456  :         "movq\t%%rcx, 32(%3)\n\t"
; 457  :         "movq\t40(%1), %%rcx\n\t"
; 458  :         "adcxq\t40(%2), %%rcx\n\t"
; 459  :         "movq\t%%rcx, 40(%3)\n\t"
; 460  :         "movq\t48(%1), %%rcx\n\t"
; 461  :         "adcxq\t48(%2), %%rcx\n\t"
; 462  :         "movq\t%%rcx, 48(%3)\n\t"
; 463  :         "movq\t56(%1), %%rcx\n\t"
; 464  :         "adcxq\t56(%2), %%rcx\n\t"
; 465  :         "movq\t%%rcx, 56(%3)\n\t"
; 466  :         "movq\t64(%1), %%rcx\n\t"
; 467  :         "adcxq\t64(%2), %%rcx\n\t"
; 468  :         "movq\t%%rcx, 64(%3)\n\t"
; 469  :         "movq\t72(%1), %%rcx\n\t"
; 470  :         "adcxq\t72(%2), %%rcx\n\t"
; 471  :         "movq\t%%rcx, 72(%3)\n\t"
; 472  :         "movq\t80(%1), %%rcx\n\t"
; 473  :         "adcxq\t80(%2), %%rcx\n\t"
; 474  :         "movq\t%%rcx, 80(%3)\n\t"
; 475  :         "movq\t88(%1), %%rcx\n\t"
; 476  :         "adcxq\t88(%2), %%rcx\n\t"
; 477  :         "movq\t%%rcx, 88(%3)\n\t"
; 478  :         "movq\t96(%1), %%rcx\n\t"
; 479  :         "adcxq\t96(%2), %%rcx\n\t"
; 480  :         "movq\t%%rcx, 96(%3)\n\t"
; 481  :         "movq\t104(%1), %%rcx\n\t"
; 482  :         "adcxq\t104(%2), %%rcx\n\t"
; 483  :         "movq\t%%rcx, 104(%3)\n\t"
; 484  :         "movq\t112(%1), %%rcx\n\t"
; 485  :         "adcxq\t112(%2), %%rcx\n\t"
; 486  :         "movq\t%%rcx, 112(%3)\n\t"
; 487  :         "movq\t120(%1), %%rcx\n\t"
; 488  :         "adcxq\t120(%2), %%rcx\n\t"
; 489  :         "movq\t%%rcx, 120(%3)\n\t"
; 490  :         "movq\t128(%1), %%rcx\n\t"
; 491  :         "adcxq\t128(%2), %%rcx\n\t"
; 492  :         "movq\t%%rcx, 128(%3)\n\t"
; 493  :         "movq\t136(%1), %%rcx\n\t"
; 494  :         "adcxq\t136(%2), %%rcx\n\t"
; 495  :         "movq\t%%rcx, 136(%3)\n\t"
; 496  :         "movq\t144(%1), %%rcx\n\t"
; 497  :         "adcxq\t144(%2), %%rcx\n\t"
; 498  :         "movq\t%%rcx, 144(%3)\n\t"
; 499  :         "movq\t152(%1), %%rcx\n\t"
; 500  :         "adcxq\t152(%2), %%rcx\n\t"
; 501  :         "movq\t%%rcx, 152(%3)\n\t"
; 502  :         "movq\t160(%1), %%rcx\n\t"
; 503  :         "adcxq\t160(%2), %%rcx\n\t"
; 504  :         "movq\t%%rcx, 160(%3)\n\t"
; 505  :         "movq\t168(%1), %%rcx\n\t"
; 506  :         "adcxq\t168(%2), %%rcx\n\t"
; 507  :         "movq\t%%rcx, 168(%3)\n\t"
; 508  :         "movq\t176(%1), %%rcx\n\t"
; 509  :         "adcxq\t176(%2), %%rcx\n\t"
; 510  :         "movq\t%%rcx, 176(%3)\n\t"
; 511  :         "movq\t184(%1), %%rcx\n\t"
; 512  :         "adcxq\t184(%2), %%rcx\n\t"
; 513  :         "movq\t%%rcx, 184(%3)\n\t"
; 514  :         "movq\t192(%1), %%rcx\n\t"
; 515  :         "adcxq\t192(%2), %%rcx\n\t"
; 516  :         "movq\t%%rcx, 192(%3)\n\t"
; 517  :         "movq\t200(%1), %%rcx\n\t"
; 518  :         "adcxq\t200(%2), %%rcx\n\t"
; 519  :         "movq\t%%rcx, 200(%3)\n\t"
; 520  :         "movq\t208(%1), %%rcx\n\t"
; 521  :         "adcxq\t208(%2), %%rcx\n\t"
; 522  :         "movq\t%%rcx, 208(%3)\n\t"
; 523  :         "movq\t216(%1), %%rcx\n\t"
; 524  :         "adcxq\t216(%2), %%rcx\n\t"
; 525  :         "movq\t%%rcx, 216(%3)\n\t"
; 526  :         "movq\t224(%1), %%rcx\n\t"
; 527  :         "adcxq\t224(%2), %%rcx\n\t"
; 528  :         "movq\t%%rcx, 224(%3)\n\t"
; 529  :         "movq\t232(%1), %%rcx\n\t"
; 530  :         "adcxq\t232(%2), %%rcx\n\t"
; 531  :         "movq\t%%rcx, 232(%3)\n\t"
; 532  :         "movq\t240(%1), %%rcx\n\t"
; 533  :         "adcxq\t240(%2), %%rcx\n\t"
; 534  :         "movq\t%%rcx, 240(%3)\n\t"
; 535  :         "movq\t248(%1), %%rcx\n\t"
; 536  :         "adcxq\t248(%2), %%rcx\n\t"
; 537  :         "movq\t%%rcx, 248(%3)\n\t"
; 538  :         "setc\t%0"
; 539  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 540  :         :
; 541  :         : "cc", "memory", "%rcx"
; 542  : );
; 543  : #else
; 544  : #error unknown platform
; 545  : #endif
; 546  : #else
; 547  : #error unknown compiler
; 548  : #endif
; 549  :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 550  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_32WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_32WORDS_ADC PROC					; COMDAT

; 47   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 48   : #ifdef _MSC_VER
; 49   :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 50   :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 51   :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 52   :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	edx, 8
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 53   :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	edx, 8
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 54   :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	edx, 8
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 55   :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	edx, 8
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 56   :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	edx, 8
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 57   :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	eax, 8
	imul	rax, rax, 8
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	edx, 8
	imul	rdx, rdx, 8
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 58   :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 8
	imul	rax, rax, 9
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	edx, 8
	imul	rdx, rdx, 9
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 59   :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	eax, 8
	imul	rax, rax, 10
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	edx, 8
	imul	rdx, rdx, 10
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 60   :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	eax, 8
	imul	rax, rax, 11
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	edx, 8
	imul	rdx, rdx, 11
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 61   :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 8
	imul	rax, rax, 12
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	edx, 8
	imul	rdx, rdx, 12
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 62   :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	eax, 8
	imul	rax, rax, 13
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	edx, 8
	imul	rdx, rdx, 13
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 63   :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	eax, 8
	imul	rax, rax, 14
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	edx, 8
	imul	rdx, rdx, 14
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 64   :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 8
	imul	rax, rax, 15
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	edx, 8
	imul	rdx, rdx, 15
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 65   :     c = _ADD_UNIT(c, xp[16], yp[16], &zp[16]);

	mov	eax, 8
	imul	rax, rax, 16
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 16
	mov	edx, 8
	imul	rdx, rdx, 16
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 66   :     c = _ADD_UNIT(c, xp[17], yp[17], &zp[17]);

	mov	eax, 8
	imul	rax, rax, 17
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	edx, 8
	imul	rdx, rdx, 17
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 67   :     c = _ADD_UNIT(c, xp[18], yp[18], &zp[18]);

	mov	eax, 8
	imul	rax, rax, 18
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	edx, 8
	imul	rdx, rdx, 18
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 68   :     c = _ADD_UNIT(c, xp[19], yp[19], &zp[19]);

	mov	eax, 8
	imul	rax, rax, 19
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 19
	mov	edx, 8
	imul	rdx, rdx, 19
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 69   :     c = _ADD_UNIT(c, xp[20], yp[20], &zp[20]);

	mov	eax, 8
	imul	rax, rax, 20
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 20
	mov	edx, 8
	imul	rdx, rdx, 20
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 70   :     c = _ADD_UNIT(c, xp[21], yp[21], &zp[21]);

	mov	eax, 8
	imul	rax, rax, 21
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 21
	mov	edx, 8
	imul	rdx, rdx, 21
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 71   :     c = _ADD_UNIT(c, xp[22], yp[22], &zp[22]);

	mov	eax, 8
	imul	rax, rax, 22
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 22
	mov	edx, 8
	imul	rdx, rdx, 22
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 72   :     c = _ADD_UNIT(c, xp[23], yp[23], &zp[23]);

	mov	eax, 8
	imul	rax, rax, 23
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 23
	mov	edx, 8
	imul	rdx, rdx, 23
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 73   :     c = _ADD_UNIT(c, xp[24], yp[24], &zp[24]);

	mov	eax, 8
	imul	rax, rax, 24
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 24
	mov	edx, 8
	imul	rdx, rdx, 24
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 74   :     c = _ADD_UNIT(c, xp[25], yp[25], &zp[25]);

	mov	eax, 8
	imul	rax, rax, 25
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 25
	mov	edx, 8
	imul	rdx, rdx, 25
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 75   :     c = _ADD_UNIT(c, xp[26], yp[26], &zp[26]);

	mov	eax, 8
	imul	rax, rax, 26
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 26
	mov	edx, 8
	imul	rdx, rdx, 26
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 76   :     c = _ADD_UNIT(c, xp[27], yp[27], &zp[27]);

	mov	eax, 8
	imul	rax, rax, 27
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 27
	mov	edx, 8
	imul	rdx, rdx, 27
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 77   :     c = _ADD_UNIT(c, xp[28], yp[28], &zp[28]);

	mov	eax, 8
	imul	rax, rax, 28
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 28
	mov	edx, 8
	imul	rdx, rdx, 28
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 78   :     c = _ADD_UNIT(c, xp[29], yp[29], &zp[29]);

	mov	eax, 8
	imul	rax, rax, 29
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 29
	mov	edx, 8
	imul	rdx, rdx, 29
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 79   :     c = _ADD_UNIT(c, xp[30], yp[30], &zp[30]);

	mov	eax, 8
	imul	rax, rax, 30
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	edx, 8
	imul	rdx, rdx, 30
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 80   :     c = _ADD_UNIT(c, xp[31], yp[31], &zp[31]);

	mov	eax, 8
	imul	rax, rax, 31
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	edx, 8
	imul	rdx, rdx, 31
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8, QWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	rdx, QWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT
	mov	BYTE PTR c$[rbp], al

; 81   : #elif defined(__GNUC__)
; 82   : #ifdef _M_IX86
; 83   :     __asm__ volatile (
; 84   :         "addb\t$-1, %0\n\t"
; 85   :         "movl\t(%1), %%ecx\n\t"
; 86   :         "adcl\t(%2), %%ecx\n\t"
; 87   :         "movl\t%%ecx, (%3)\n\t"
; 88   :         "movl\t4(%1), %%ecx\n\t"
; 89   :         "adcl\t4(%2), %%ecx\n\t"
; 90   :         "movl\t%%ecx, 4(%3)\n\t"
; 91   :         "movl\t8(%1), %%ecx\n\t"
; 92   :         "adcl\t8(%2), %%ecx\n\t"
; 93   :         "movl\t%%ecx, 8(%3)\n\t"
; 94   :         "movl\t12(%1), %%ecx\n\t"
; 95   :         "adcl\t12(%2), %%ecx\n\t"
; 96   :         "movl\t%%ecx, 12(%3)\n\t"
; 97   :         "movl\t16(%1), %%ecx\n\t"
; 98   :         "adcl\t16(%2), %%ecx\n\t"
; 99   :         "movl\t%%ecx, 16(%3)\n\t"
; 100  :         "movl\t20(%1), %%ecx\n\t"
; 101  :         "adcl\t20(%2), %%ecx\n\t"
; 102  :         "movl\t%%ecx, 20(%3)\n\t"
; 103  :         "movl\t24(%1), %%ecx\n\t"
; 104  :         "adcl\t24(%2), %%ecx\n\t"
; 105  :         "movl\t%%ecx, 24(%3)\n\t"
; 106  :         "movl\t28(%1), %%ecx\n\t"
; 107  :         "adcl\t28(%2), %%ecx\n\t"
; 108  :         "movl\t%%ecx, 28(%3)\n\t"
; 109  :         "movl\t32(%1), %%ecx\n\t"
; 110  :         "adcl\t32(%2), %%ecx\n\t"
; 111  :         "movl\t%%ecx, 32(%3)\n\t"
; 112  :         "movl\t36(%1), %%ecx\n\t"
; 113  :         "adcl\t36(%2), %%ecx\n\t"
; 114  :         "movl\t%%ecx, 36(%3)\n\t"
; 115  :         "movl\t40(%1), %%ecx\n\t"
; 116  :         "adcl\t40(%2), %%ecx\n\t"
; 117  :         "movl\t%%ecx, 40(%3)\n\t"
; 118  :         "movl\t44(%1), %%ecx\n\t"
; 119  :         "adcl\t44(%2), %%ecx\n\t"
; 120  :         "movl\t%%ecx, 44(%3)\n\t"
; 121  :         "movl\t48(%1), %%ecx\n\t"
; 122  :         "adcl\t48(%2), %%ecx\n\t"
; 123  :         "movl\t%%ecx, 48(%3)\n\t"
; 124  :         "movl\t52(%1), %%ecx\n\t"
; 125  :         "adcl\t52(%2), %%ecx\n\t"
; 126  :         "movl\t%%ecx, 52(%3)\n\t"
; 127  :         "movl\t56(%1), %%ecx\n\t"
; 128  :         "adcl\t56(%2), %%ecx\n\t"
; 129  :         "movl\t%%ecx, 56(%3)\n\t"
; 130  :         "movl\t60(%1), %%ecx\n\t"
; 131  :         "adcl\t60(%2), %%ecx\n\t"
; 132  :         "movl\t%%ecx, 60(%3)\n\t"
; 133  :         "movl\t64(%1), %%ecx\n\t"
; 134  :         "adcl\t64(%2), %%ecx\n\t"
; 135  :         "movl\t%%ecx, 64(%3)\n\t"
; 136  :         "movl\t68(%1), %%ecx\n\t"
; 137  :         "adcl\t68(%2), %%ecx\n\t"
; 138  :         "movl\t%%ecx, 68(%3)\n\t"
; 139  :         "movl\t72(%1), %%ecx\n\t"
; 140  :         "adcl\t72(%2), %%ecx\n\t"
; 141  :         "movl\t%%ecx, 72(%3)\n\t"
; 142  :         "movl\t76(%1), %%ecx\n\t"
; 143  :         "adcl\t76(%2), %%ecx\n\t"
; 144  :         "movl\t%%ecx, 76(%3)\n\t"
; 145  :         "movl\t80(%1), %%ecx\n\t"
; 146  :         "adcl\t80(%2), %%ecx\n\t"
; 147  :         "movl\t%%ecx, 80(%3)\n\t"
; 148  :         "movl\t84(%1), %%ecx\n\t"
; 149  :         "adcl\t84(%2), %%ecx\n\t"
; 150  :         "movl\t%%ecx, 84(%3)\n\t"
; 151  :         "movl\t88(%1), %%ecx\n\t"
; 152  :         "adcl\t88(%2), %%ecx\n\t"
; 153  :         "movl\t%%ecx, 88(%3)\n\t"
; 154  :         "movl\t92(%1), %%ecx\n\t"
; 155  :         "adcl\t92(%2), %%ecx\n\t"
; 156  :         "movl\t%%ecx, 92(%3)\n\t"
; 157  :         "movl\t96(%1), %%ecx\n\t"
; 158  :         "adcl\t96(%2), %%ecx\n\t"
; 159  :         "movl\t%%ecx, 96(%3)\n\t"
; 160  :         "movl\t100(%1), %%ecx\n\t"
; 161  :         "adcl\t100(%2), %%ecx\n\t"
; 162  :         "movl\t%%ecx, 100(%3)\n\t"
; 163  :         "movl\t104(%1), %%ecx\n\t"
; 164  :         "adcl\t104(%2), %%ecx\n\t"
; 165  :         "movl\t%%ecx, 104(%3)\n\t"
; 166  :         "movl\t108(%1), %%ecx\n\t"
; 167  :         "adcl\t108(%2), %%ecx\n\t"
; 168  :         "movl\t%%ecx, 108(%3)\n\t"
; 169  :         "movl\t112(%1), %%ecx\n\t"
; 170  :         "adcl\t112(%2), %%ecx\n\t"
; 171  :         "movl\t%%ecx, 112(%3)\n\t"
; 172  :         "movl\t116(%1), %%ecx\n\t"
; 173  :         "adcl\t116(%2), %%ecx\n\t"
; 174  :         "movl\t%%ecx, 116(%3)\n\t"
; 175  :         "movl\t120(%1), %%ecx\n\t"
; 176  :         "adcl\t120(%2), %%ecx\n\t"
; 177  :         "movl\t%%ecx, 120(%3)\n\t"
; 178  :         "movl\t124(%1), %%ecx\n\t"
; 179  :         "adcl\t124(%2), %%ecx\n\t"
; 180  :         "movl\t%%ecx, 124(%3)\n\t"
; 181  :         "setc\t%0"
; 182  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 183  :         :
; 184  :         : "cc", "memory", "%ecx"
; 185  : );
; 186  : #elif defined(_M_IX64)
; 187  :     __asm__ volatile (
; 188  :         "addb\t$-1, %0\n\t"
; 189  :         "movq\t(%1), %%rcx\n\t"
; 190  :         "adcq\t(%2), %%rcx\n\t"
; 191  :         "movq\t%%rcx, (%3)\n\t"
; 192  :         "movq\t8(%1), %%rcx\n\t"
; 193  :         "adcq\t8(%2), %%rcx\n\t"
; 194  :         "movq\t%%rcx, 8(%3)\n\t"
; 195  :         "movq\t16(%1), %%rcx\n\t"
; 196  :         "adcq\t16(%2), %%rcx\n\t"
; 197  :         "movq\t%%rcx, 16(%3)\n\t"
; 198  :         "movq\t24(%1), %%rcx\n\t"
; 199  :         "adcq\t24(%2), %%rcx\n\t"
; 200  :         "movq\t%%rcx, 24(%3)\n\t"
; 201  :         "movq\t32(%1), %%rcx\n\t"
; 202  :         "adcq\t32(%2), %%rcx\n\t"
; 203  :         "movq\t%%rcx, 32(%3)\n\t"
; 204  :         "movq\t40(%1), %%rcx\n\t"
; 205  :         "adcq\t40(%2), %%rcx\n\t"
; 206  :         "movq\t%%rcx, 40(%3)\n\t"
; 207  :         "movq\t48(%1), %%rcx\n\t"
; 208  :         "adcq\t48(%2), %%rcx\n\t"
; 209  :         "movq\t%%rcx, 48(%3)\n\t"
; 210  :         "movq\t56(%1), %%rcx\n\t"
; 211  :         "adcq\t56(%2), %%rcx\n\t"
; 212  :         "movq\t%%rcx, 56(%3)\n\t"
; 213  :         "movq\t64(%1), %%rcx\n\t"
; 214  :         "adcq\t64(%2), %%rcx\n\t"
; 215  :         "movq\t%%rcx, 64(%3)\n\t"
; 216  :         "movq\t72(%1), %%rcx\n\t"
; 217  :         "adcq\t72(%2), %%rcx\n\t"
; 218  :         "movq\t%%rcx, 72(%3)\n\t"
; 219  :         "movq\t80(%1), %%rcx\n\t"
; 220  :         "adcq\t80(%2), %%rcx\n\t"
; 221  :         "movq\t%%rcx, 80(%3)\n\t"
; 222  :         "movq\t88(%1), %%rcx\n\t"
; 223  :         "adcq\t88(%2), %%rcx\n\t"
; 224  :         "movq\t%%rcx, 88(%3)\n\t"
; 225  :         "movq\t96(%1), %%rcx\n\t"
; 226  :         "adcq\t96(%2), %%rcx\n\t"
; 227  :         "movq\t%%rcx, 96(%3)\n\t"
; 228  :         "movq\t104(%1), %%rcx\n\t"
; 229  :         "adcq\t104(%2), %%rcx\n\t"
; 230  :         "movq\t%%rcx, 104(%3)\n\t"
; 231  :         "movq\t112(%1), %%rcx\n\t"
; 232  :         "adcq\t112(%2), %%rcx\n\t"
; 233  :         "movq\t%%rcx, 112(%3)\n\t"
; 234  :         "movq\t120(%1), %%rcx\n\t"
; 235  :         "adcq\t120(%2), %%rcx\n\t"
; 236  :         "movq\t%%rcx, 120(%3)\n\t"
; 237  :         "movq\t128(%1), %%rcx\n\t"
; 238  :         "adcq\t128(%2), %%rcx\n\t"
; 239  :         "movq\t%%rcx, 128(%3)\n\t"
; 240  :         "movq\t136(%1), %%rcx\n\t"
; 241  :         "adcq\t136(%2), %%rcx\n\t"
; 242  :         "movq\t%%rcx, 136(%3)\n\t"
; 243  :         "movq\t144(%1), %%rcx\n\t"
; 244  :         "adcq\t144(%2), %%rcx\n\t"
; 245  :         "movq\t%%rcx, 144(%3)\n\t"
; 246  :         "movq\t152(%1), %%rcx\n\t"
; 247  :         "adcq\t152(%2), %%rcx\n\t"
; 248  :         "movq\t%%rcx, 152(%3)\n\t"
; 249  :         "movq\t160(%1), %%rcx\n\t"
; 250  :         "adcq\t160(%2), %%rcx\n\t"
; 251  :         "movq\t%%rcx, 160(%3)\n\t"
; 252  :         "movq\t168(%1), %%rcx\n\t"
; 253  :         "adcq\t168(%2), %%rcx\n\t"
; 254  :         "movq\t%%rcx, 168(%3)\n\t"
; 255  :         "movq\t176(%1), %%rcx\n\t"
; 256  :         "adcq\t176(%2), %%rcx\n\t"
; 257  :         "movq\t%%rcx, 176(%3)\n\t"
; 258  :         "movq\t184(%1), %%rcx\n\t"
; 259  :         "adcq\t184(%2), %%rcx\n\t"
; 260  :         "movq\t%%rcx, 184(%3)\n\t"
; 261  :         "movq\t192(%1), %%rcx\n\t"
; 262  :         "adcq\t192(%2), %%rcx\n\t"
; 263  :         "movq\t%%rcx, 192(%3)\n\t"
; 264  :         "movq\t200(%1), %%rcx\n\t"
; 265  :         "adcq\t200(%2), %%rcx\n\t"
; 266  :         "movq\t%%rcx, 200(%3)\n\t"
; 267  :         "movq\t208(%1), %%rcx\n\t"
; 268  :         "adcq\t208(%2), %%rcx\n\t"
; 269  :         "movq\t%%rcx, 208(%3)\n\t"
; 270  :         "movq\t216(%1), %%rcx\n\t"
; 271  :         "adcq\t216(%2), %%rcx\n\t"
; 272  :         "movq\t%%rcx, 216(%3)\n\t"
; 273  :         "movq\t224(%1), %%rcx\n\t"
; 274  :         "adcq\t224(%2), %%rcx\n\t"
; 275  :         "movq\t%%rcx, 224(%3)\n\t"
; 276  :         "movq\t232(%1), %%rcx\n\t"
; 277  :         "adcq\t232(%2), %%rcx\n\t"
; 278  :         "movq\t%%rcx, 232(%3)\n\t"
; 279  :         "movq\t240(%1), %%rcx\n\t"
; 280  :         "adcq\t240(%2), %%rcx\n\t"
; 281  :         "movq\t%%rcx, 240(%3)\n\t"
; 282  :         "movq\t248(%1), %%rcx\n\t"
; 283  :         "adcq\t248(%2), %%rcx\n\t"
; 284  :         "movq\t%%rcx, 248(%3)\n\t"
; 285  :         "setc\t%0"
; 286  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 287  :         :
; 288  :         : "cc", "memory", "%rcx"
; 289  : );
; 290  : #else
; 291  : #error unknown platform
; 292  : #endif
; 293  : #else
; 294  : #error unknown compiler
; 295  : #endif
; 296  :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 297  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_32WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 629  :     {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 630  :         if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);
; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);

	mov	rax, QWORD PTR x$[rbp]
	bsr	rax, rax
	mov	DWORD PTR pos$[rbp], eax

; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 63					; 0000003fH
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 655  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_32 PROC					; COMDAT

; 596  :     {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 597  :         if (x == 0)

	cmp	DWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 598  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	mov	eax, DWORD PTR x$[rbp]
	bsr	eax, eax
	mov	DWORD PTR pos$[rbp], eax

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 31
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 608  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_32$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADDX_UNIT PROC						; COMDAT

; 241  :     {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 242  : #ifdef _M_IX86
; 243  :         return (_addcarryx_u32(carry, u, v, w));
; 244  : #elif defined(_M_X64)
; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	rax, QWORD PTR u$[rbp]
	movzx	ecx, BYTE PTR carry$[rbp]
	add	cl, -1
	adcx	rax, QWORD PTR v$[rbp]
	setb	cl
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx], rax
	movzx	eax, cl

; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADD_UNIT PROC						; COMDAT

; 213  :     {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 214  : #ifdef _M_IX86
; 215  :         return (_addcarry_u32(carry, u, v, w));
; 216  : #elif defined(_M_X64)
; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	rax, QWORD PTR u$[rbp]
	movzx	ecx, BYTE PTR carry$[rbp]
	add	cl, -1
	adc	rax, QWORD PTR v$[rbp]
	setb	cl
	mov	rdx, QWORD PTR w$[rbp]
	mov	QWORD PTR [rdx], rax
	movzx	eax, cl

; 218  : #else
; 219  : #error unknown platform
; 220  : #endif
; 221  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MAXIMUM_UNIT
_TEXT	SEGMENT
tv65 = 192
x$ = 240
y$ = 248
_MAXIMUM_UNIT PROC					; COMDAT

; 203  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 204  :         return (x >= y ? x : y);

	mov	rax, QWORD PTR y$[rbp]
	cmp	QWORD PTR x$[rbp], rax
	jb	SHORT $LN3@MAXIMUM_UN
	mov	rax, QWORD PTR x$[rbp]
	mov	QWORD PTR tv65[rbp], rax
	jmp	SHORT $LN4@MAXIMUM_UN
$LN3@MAXIMUM_UN:
	mov	rax, QWORD PTR y$[rbp]
	mov	QWORD PTR tv65[rbp], rax
$LN4@MAXIMUM_UN:
	mov	rax, QWORD PTR tv65[rbp]

; 205  :     }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
_MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 224
result_high$ = 232
_FROMDWORDTOWORD PROC					; COMDAT

; 182  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, QWORD PTR value$[rbp]
	shr	rax, 32					; 00000020H
	mov	rcx, QWORD PTR result_high$[rbp]
	mov	DWORD PTR [rcx], eax

; 184  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR value$[rbp]

; 185  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT PMC_Add_X_X
_TEXT	SEGMENT
nu$ = 8
nv$ = 40
result$ = 68
nw$ = 104
u_bit_count$5 = 136
v_bit_count$6 = 168
w_bit_count$7 = 200
w_light_check_code$8 = 232
u$ = 480
v$ = 488
w$ = 496
PMC_Add_X_X PROC					; COMDAT

; 558  : {

$LN20:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+536]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 559  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 560  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 561  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 562  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 563  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 564  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 565  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 566  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 567  :     PMC_STATUS_CODE result;
; 568  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Add_X_

; 569  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 570  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Add_X_

; 571  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 572  :     NUMBER_HEADER* nw;
; 573  :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@PMC_Add_X_

; 574  :     {
; 575  :         if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@PMC_Add_X_

; 576  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax
	jmp	SHORT $LN10@PMC_Add_X_
$LN9@PMC_Add_X_:

; 577  :         else
; 578  :         {
; 579  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR nv$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Add_X_

; 580  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN11@PMC_Add_X_:
$LN10@PMC_Add_X_:

; 581  :         }
; 582  :     }

	jmp	$LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 583  :     else
; 584  :     {
; 585  :         if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN12@PMC_Add_X_

; 586  :         {
; 587  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR nu$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Add_X_

; 588  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN14@PMC_Add_X_:

; 589  :         }

	jmp	$LN13@PMC_Add_X_
$LN12@PMC_Add_X_:

; 590  :         else
; 591  :         {
; 592  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR u_bit_count$5[rbp], rax

; 593  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR v_bit_count$6[rbp], rax

; 594  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	rdx, QWORD PTR v_bit_count$6[rbp]
	mov	rcx, QWORD PTR u_bit_count$5[rbp]
	call	_MAXIMUM_UNIT
	inc	rax
	mov	QWORD PTR w_bit_count$7[rbp], rax

; 595  :             __UNIT_TYPE w_light_check_code;
; 596  :             if ((result = AllocateNumber(&nw, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_light_check_code$8[rbp]
	mov	rdx, QWORD PTR w_bit_count$7[rbp]
	lea	rcx, QWORD PTR nw$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN15@PMC_Add_X_

; 597  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Add_X_
$LN15@PMC_Add_X_:

; 598  :             if ((result = (*fp_Add_Imp)(nu->BLOCK, nu->UNIT_WORD_COUNT, nv->BLOCK, nv->UNIT_WORD_COUNT, nw->BLOCK, nw->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR nw$[rbp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR nw$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR nv$[rbp]
	mov	r9, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rax+56]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	QWORD PTR fp_Add_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN16@PMC_Add_X_

; 599  :             {
; 600  :                 DeallocateNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp]
	call	DeallocateNumber

; 601  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN16@PMC_Add_X_:

; 602  :             }
; 603  :             if ((result = CheckBlockLight(nw->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR w_light_check_code$8[rbp]
	mov	rax, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN17@PMC_Add_X_

; 604  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 605  :             CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp]
	call	CommitNumber
$LN13@PMC_Add_X_:
$LN8@PMC_Add_X_:

; 606  :         }
; 607  :     }
; 608  :     *w = nw;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	QWORD PTR [rax], rcx

; 609  : #ifdef _DEBUG
; 610  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN18@PMC_Add_X_

; 611  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN18@PMC_Add_X_:

; 612  : #endif
; 613  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 614  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_Add_X_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
PMC_Add_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT PMC_Add_X_L
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_Add_X_L PROC					; COMDAT

; 535  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 536  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Add_X_

; 537  :     {
; 538  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 539  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 540  :     }
; 541  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 542  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 543  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 544  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 545  :     PMC_STATUS_CODE result;
; 546  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR u$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Add_X_

; 547  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 548  :     if ((result = PMC_Add_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	PMC_Add_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Add_X_

; 549  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 550  : #ifdef _DEBUG
; 551  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Add_X_

; 552  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN7@PMC_Add_X_:

; 553  : #endif
; 554  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 555  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_Add_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT PMC_Add_X_I
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_Add_X_I PROC					; COMDAT

; 383  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 384  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Add_X_

; 385  :     {
; 386  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 387  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 388  :     }
; 389  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 390  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 391  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 392  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 393  :     PMC_STATUS_CODE result;
; 394  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR u$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Add_X_

; 395  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 396  :     if ((result = PMC_Add_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	edx, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	PMC_Add_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Add_X_

; 397  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 398  : #ifdef _DEBUG
; 399  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Add_X_

; 400  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN7@PMC_Add_X_:

; 401  : #endif
; 402  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 403  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_Add_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT PMC_Add_L_X
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_Add_L_X PROC					; COMDAT

; 512  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 513  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Add_L_

; 514  :     {
; 515  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 516  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Add_L_
$LN2@PMC_Add_L_:

; 517  :     }
; 518  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Add_L_

; 519  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Add_L_
$LN3@PMC_Add_L_:

; 520  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Add_L_

; 521  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Add_L_
$LN4@PMC_Add_L_:

; 522  :     PMC_STATUS_CODE result;
; 523  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR v$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Add_L_

; 524  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN5@PMC_Add_L_:

; 525  :     if ((result = PMC_Add_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	PMC_Add_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Add_L_

; 526  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN6@PMC_Add_L_:

; 527  : #ifdef _DEBUG
; 528  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Add_L_

; 529  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN7@PMC_Add_L_:

; 530  : #endif
; 531  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_L_:

; 532  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_Add_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT PMC_Add_I_X
_TEXT	SEGMENT
result$ = 4
u$ = 256
v$ = 264
w$ = 272
PMC_Add_I_X PROC					; COMDAT

; 360  : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 361  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Add_I_

; 362  :     {
; 363  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 364  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_Add_I_
$LN2@PMC_Add_I_:

; 365  :     }
; 366  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Add_I_

; 367  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Add_I_
$LN3@PMC_Add_I_:

; 368  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Add_I_

; 369  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Add_I_
$LN4@PMC_Add_I_:

; 370  :     PMC_STATUS_CODE result;
; 371  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR v$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Add_I_

; 372  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN5@PMC_Add_I_:

; 373  :     if ((result = PMC_Add_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	edx, DWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	PMC_Add_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Add_I_

; 374  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN6@PMC_Add_I_:

; 375  : #ifdef _DEBUG
; 376  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Add_I_

; 377  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN7@PMC_Add_I_:

; 378  : #endif
; 379  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_I_:

; 380  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_Add_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.c
;	COMDAT Initialize_Add
_TEXT	SEGMENT
tv68 = 192
feature$ = 240
Initialize_Add PROC					; COMDAT

; 617  : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__DB5B71FB_pmc_add@c
	call	__CheckForDebuggerJustMyCode

; 618  :     fp_Add_Imp = feature->PROCESSOR_FEATURE_ADX ? Add_Imp_using_ADCX : Add_Imp_using_ADC;

	mov	rax, QWORD PTR feature$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@Initialize
	lea	rax, OFFSET FLAT:Add_Imp_using_ADCX
	mov	QWORD PTR tv68[rbp], rax
	jmp	SHORT $LN4@Initialize
$LN3@Initialize:
	lea	rax, OFFSET FLAT:Add_Imp_using_ADC
	mov	QWORD PTR tv68[rbp], rax
$LN4@Initialize:
	mov	rax, QWORD PTR tv68[rbp]
	mov	QWORD PTR fp_Add_Imp, rax

; 619  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 620  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
Initialize_Add ENDP
_TEXT	ENDS
END
