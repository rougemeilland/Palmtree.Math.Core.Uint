; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__B6CC0FF4_pmc_compare@c DB 01H
msvcjmc	ENDS
PUBLIC	Compare_Imp
PUBLIC	Initialize_Compare
PUBLIC	PMC_Compare_I_X
PUBLIC	PMC_Compare_L_X
PUBLIC	PMC_Compare_X_I
PUBLIC	PMC_Compare_X_L
PUBLIC	PMC_Compare_X_X
PUBLIC	__JustMyCode_Default
EXTRN	CheckNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Compare_Imp DD imagerel $LN9
	DD	imagerel $LN9+251
	DD	imagerel $unwind$Compare_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Compare DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$Initialize_Compare
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_I_X DD imagerel $LN7
	DD	imagerel $LN7+205
	DD	imagerel $unwind$PMC_Compare_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_L_X DD imagerel $LN7
	DD	imagerel $LN7+208
	DD	imagerel $unwind$PMC_Compare_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_I DD imagerel $LN7
	DD	imagerel $LN7+204
	DD	imagerel $unwind$PMC_Compare_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_L DD imagerel $LN7
	DD	imagerel $LN7+206
	DD	imagerel $unwind$PMC_Compare_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_X DD imagerel $LN18
	DD	imagerel $LN18+436
	DD	imagerel $unwind$PMC_Compare_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMDWORDTOWORD DD imagerel _FROMDWORDTOWORD
	DD	imagerel _FROMDWORDTOWORD+95
	DD	imagerel $unwind$_FROMDWORDTOWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_32 DD imagerel _LZCNT_ALT_32
	DD	imagerel _LZCNT_ALT_32+126
	DD	imagerel $unwind$_LZCNT_ALT_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_I_Imp DD imagerel PMC_Compare_X_I_Imp
	DD	imagerel PMC_Compare_X_I_Imp+364
	DD	imagerel $unwind$PMC_Compare_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_L_Imp DD imagerel PMC_Compare_X_L_Imp
	DD	imagerel PMC_Compare_X_L_Imp+926
	DD	imagerel $unwind$PMC_Compare_X_L_Imp
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_L_Imp DD 025053401H
	DD	0118231dH
	DD	070110039H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Compare_X_L_Imp$rtcName$0 DB 076H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+11
PMC_Compare_X_L_Imp$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:PMC_Compare_X_L_Imp$rtcName$0
	ORG $+48
PMC_Compare_X_L_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Compare_X_L_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_I_Imp DD 025053301H
	DD	0117231cH
	DD	070100025H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_32 DD 025052801H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_32$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_32$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_32$rtcName$0
	ORG $+48
_LZCNT_ALT_32$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_32$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMDWORDTOWORD DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_X DD 025053401H
	DD	0118231dH
	DD	070110031H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_L DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Compare_X_L$rtcName$0 DB 077H
	DB	05fH
	DB	074H
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+9
PMC_Compare_X_L$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:PMC_Compare_X_L$rtcName$0
	ORG $+48
PMC_Compare_X_L$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Compare_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_I DD 025053301H
	DD	0117231cH
	DD	070100025H
	DD	0500fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Compare_X_I$rtcName$0 DB 077H
	DB	05fH
	DB	074H
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+9
PMC_Compare_X_I$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:PMC_Compare_X_I$rtcName$0
	ORG $+48
PMC_Compare_X_I$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Compare_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_L_X DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Compare_L_X$rtcName$0 DB 077H
	DB	05fH
	DB	074H
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+9
PMC_Compare_L_X$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:PMC_Compare_L_X$rtcName$0
	ORG $+48
PMC_Compare_L_X$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Compare_L_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_I_X DD 025053201H
	DD	0117231cH
	DD	070100025H
	DD	0500fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Compare_I_X$rtcName$0 DB 077H
	DB	05fH
	DB	074H
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+9
PMC_Compare_I_X$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:PMC_Compare_I_X$rtcName$0
	ORG $+48
PMC_Compare_I_X$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Compare_I_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Compare DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Compare_Imp DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
;	COMDAT PMC_Compare_X_L_Imp
_TEXT	SEGMENT
u_bit_count$4 = 8
v_hi$5 = 36
v_lo$6 = 68
v_bit_count$7 = 104
v_bit_count$8 = 136
u_bit_count$9 = 168
v_bit_count$10 = 200
u$ = 448
v$ = 456
w$ = 464
PMC_Compare_X_L_Imp PROC				; COMDAT

; 151  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+488]
	lea	rcx, OFFSET FLAT:__B6CC0FF4_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 152  :     if (u->IS_ZERO)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_Compar

; 153  :     {
; 154  :         // u が 0 である場合
; 155  :         if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN4@PMC_Compar

; 156  :         {
; 157  :             // v が 0 である場合
; 158  :             *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 159  :         }

	jmp	SHORT $LN5@PMC_Compar
$LN4@PMC_Compar:

; 160  :         else
; 161  :         {
; 162  :             // v が 0 でない場合
; 163  :             *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1
$LN5@PMC_Compar:

; 164  :         }
; 165  :     }

	jmp	$LN3@PMC_Compar
$LN2@PMC_Compar:

; 166  :     else if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN6@PMC_Compar

; 167  :     {
; 168  :         // v が 0 である場合
; 169  :         *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 170  :     }

	jmp	$LN7@PMC_Compar
$LN6@PMC_Compar:

; 171  :     else
; 172  :     {
; 173  :         // u と v がともに 0 ではない場合
; 174  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	$LN8@PMC_Compar

; 175  :         {
; 176  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 177  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR u_bit_count$4[rbp], rax

; 178  :             _UINT32_T v_hi;
; 179  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	rdx, QWORD PTR v_hi$5[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	_FROMDWORDTOWORD
	mov	DWORD PTR v_lo$6[rbp], eax

; 180  :             if (v_hi == 0)

	cmp	DWORD PTR v_hi$5[rbp], 0
	jne	$LN10@PMC_Compar

; 181  :             {
; 182  :                 // v の値が 32bit では表現できる場合
; 183  :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR v_lo$6[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$7[rbp], rax

; 184  :                 if (u_bit_count > v_bit_count)

	mov	rax, QWORD PTR v_bit_count$7[rbp]
	cmp	QWORD PTR u_bit_count$4[rbp], rax
	jbe	SHORT $LN12@PMC_Compar

; 185  :                 {
; 186  :                     // 明らかに u > v である場合
; 187  :                     *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 188  :                 }

	jmp	SHORT $LN13@PMC_Compar
$LN12@PMC_Compar:

; 189  :                 else if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$7[rbp]
	cmp	QWORD PTR u_bit_count$4[rbp], rax
	jae	SHORT $LN14@PMC_Compar

; 190  :                 {
; 191  :                     // 明らかに u < v である場合
; 192  :                     *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1

; 193  :                 }

	jmp	SHORT $LN15@PMC_Compar
$LN14@PMC_Compar:

; 194  :                 else
; 195  :                 {
; 196  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 197  :                     // ⇒ u と v はともに 1 ワードで表現できる
; 198  :                     if (u->BLOCK[0] > v_lo)

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR v_lo$6[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jbe	SHORT $LN16@PMC_Compar

; 199  :                         *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1
	jmp	SHORT $LN17@PMC_Compar
$LN16@PMC_Compar:

; 200  :                     else if (u->BLOCK[0] < v_lo)

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR v_lo$6[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jae	SHORT $LN18@PMC_Compar

; 201  :                         *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1
	jmp	SHORT $LN19@PMC_Compar
$LN18@PMC_Compar:

; 202  :                     else
; 203  :                         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
$LN19@PMC_Compar:
$LN17@PMC_Compar:
$LN15@PMC_Compar:
$LN13@PMC_Compar:

; 204  :                 }
; 205  :             }

	jmp	$LN11@PMC_Compar
$LN10@PMC_Compar:

; 206  :             else
; 207  :             {
; 208  :                 // v の値が 32bit では表現できない場合
; 209  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	ecx, DWORD PTR v_hi$5[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$8[rbp], rax

; 210  :                 if (u_bit_count > v_bit_count)

	mov	rax, QWORD PTR v_bit_count$8[rbp]
	cmp	QWORD PTR u_bit_count$4[rbp], rax
	jbe	SHORT $LN20@PMC_Compar

; 211  :                 {
; 212  :                     // 明らかに u > v である場合
; 213  :                     *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 214  :                 }

	jmp	$LN21@PMC_Compar
$LN20@PMC_Compar:

; 215  :                 else if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$8[rbp]
	cmp	QWORD PTR u_bit_count$4[rbp], rax
	jae	SHORT $LN22@PMC_Compar

; 216  :                 {
; 217  :                     // 明らかに u < v である場合
; 218  :                     *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1

; 219  :                 }

	jmp	$LN23@PMC_Compar
$LN22@PMC_Compar:

; 220  :                 else
; 221  :                 {
; 222  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 2 ワードで表現できる場合
; 223  :                     // ⇒ u と v はともに 2 ワードで表現できる
; 224  :                     if (u->BLOCK[1] > v_hi)

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR v_hi$5[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jbe	SHORT $LN24@PMC_Compar

; 225  :                         *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1
	jmp	$LN25@PMC_Compar
$LN24@PMC_Compar:

; 226  :                     else if (u->BLOCK[1] < v_hi)

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR v_hi$5[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jae	SHORT $LN26@PMC_Compar

; 227  :                         *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1
	jmp	SHORT $LN27@PMC_Compar
$LN26@PMC_Compar:

; 228  :                     else if (u->BLOCK[0] > v_lo)

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR v_lo$6[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jbe	SHORT $LN28@PMC_Compar

; 229  :                         *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1
	jmp	SHORT $LN29@PMC_Compar
$LN28@PMC_Compar:

; 230  :                     else if (u->BLOCK[0] < v_lo)

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR v_lo$6[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jae	SHORT $LN30@PMC_Compar

; 231  :                         *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1
	jmp	SHORT $LN31@PMC_Compar
$LN30@PMC_Compar:

; 232  :                     else
; 233  :                         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
$LN31@PMC_Compar:
$LN29@PMC_Compar:
$LN27@PMC_Compar:
$LN25@PMC_Compar:
$LN23@PMC_Compar:
$LN21@PMC_Compar:
$LN11@PMC_Compar:

; 234  :                 }
; 235  :             }
; 236  :         }

	jmp	$LN9@PMC_Compar
$LN8@PMC_Compar:

; 237  :         else
; 238  :         {
; 239  :             // _UINT64_T が 1 ワードで表現できる場合
; 240  : 
; 241  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR u_bit_count$9[rbp], rax

; 242  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	rcx, QWORD PTR v$[rbp]
	call	_LZCNT_ALT_UNIT
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$10[rbp], rax

; 243  :             if (u_bit_count > v_bit_count)

	mov	rax, QWORD PTR v_bit_count$10[rbp]
	cmp	QWORD PTR u_bit_count$9[rbp], rax
	jbe	SHORT $LN32@PMC_Compar

; 244  :             {
; 245  :                 // 明らかに u > v である場合
; 246  :                 *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 247  :             }

	jmp	$LN33@PMC_Compar
$LN32@PMC_Compar:

; 248  :             else if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$10[rbp]
	cmp	QWORD PTR u_bit_count$9[rbp], rax
	jae	SHORT $LN34@PMC_Compar

; 249  :             {
; 250  :                 // 明らかに u < v である場合
; 251  :                 *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1

; 252  :             }

	jmp	SHORT $LN35@PMC_Compar
$LN34@PMC_Compar:

; 253  :             else
; 254  :             {
; 255  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 256  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 257  :                 if (u->BLOCK[0] > v)

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	rdx, QWORD PTR v$[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jbe	SHORT $LN36@PMC_Compar

; 258  :                     *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1
	jmp	SHORT $LN37@PMC_Compar
$LN36@PMC_Compar:

; 259  :                 else if (u->BLOCK[0] < v)

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	rdx, QWORD PTR v$[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jae	SHORT $LN38@PMC_Compar

; 260  :                     *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1
	jmp	SHORT $LN39@PMC_Compar
$LN38@PMC_Compar:

; 261  :                 else
; 262  :                     *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
$LN39@PMC_Compar:
$LN37@PMC_Compar:
$LN35@PMC_Compar:
$LN33@PMC_Compar:
$LN9@PMC_Compar:
$LN7@PMC_Compar:
$LN3@PMC_Compar:

; 263  :             }
; 264  :         }
; 265  :     }
; 266  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Compare_X_L_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
;	COMDAT PMC_Compare_X_I_Imp
_TEXT	SEGMENT
u_bit_count$1 = 8
v_bit_count$2 = 40
u$ = 288
v$ = 296
w$ = 304
PMC_Compare_X_I_Imp PROC				; COMDAT

; 61   : {

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__B6CC0FF4_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 62   :     if (u->IS_ZERO)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_Compar

; 63   :     {
; 64   :         // u が 0 である場合
; 65   :         if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN4@PMC_Compar

; 66   :         {
; 67   :             // v が 0 である場合
; 68   :             *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 69   :         }

	jmp	SHORT $LN5@PMC_Compar
$LN4@PMC_Compar:

; 70   :         else
; 71   :         {
; 72   :             // v が 0 でない場合
; 73   :             *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1
$LN5@PMC_Compar:

; 74   :         }
; 75   :     }

	jmp	$LN3@PMC_Compar
$LN2@PMC_Compar:

; 76   :     else if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN6@PMC_Compar

; 77   :     {
; 78   :         // v が 0 である場合
; 79   :         *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 80   :     }

	jmp	$LN7@PMC_Compar
$LN6@PMC_Compar:

; 81   :     else
; 82   :     {
; 83   :         // x と y がともに 0 ではない場合
; 84   :         __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR u_bit_count$1[rbp], rax

; 85   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR v$[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$2[rbp], rax

; 86   :         if (u_bit_count > v_bit_count)

	mov	rax, QWORD PTR v_bit_count$2[rbp]
	cmp	QWORD PTR u_bit_count$1[rbp], rax
	jbe	SHORT $LN8@PMC_Compar

; 87   :         {
; 88   :             // 明らかに u > v である場合
; 89   :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 90   :         }

	jmp	$LN9@PMC_Compar
$LN8@PMC_Compar:

; 91   :         else if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$2[rbp]
	cmp	QWORD PTR u_bit_count$1[rbp], rax
	jae	SHORT $LN10@PMC_Compar

; 92   :         {
; 93   :             // 明らかに u < v である場合
; 94   :             *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1

; 95   :         }

	jmp	SHORT $LN11@PMC_Compar
$LN10@PMC_Compar:

; 96   :         else
; 97   :         {
; 98   :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 99   :             // ⇒ u と v はともに 1 ワードで表現できる
; 100  :             if (u->BLOCK[0] > v)

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR v$[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jbe	SHORT $LN12@PMC_Compar

; 101  :                 *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1
	jmp	SHORT $LN13@PMC_Compar
$LN12@PMC_Compar:

; 102  :             else if (u->BLOCK[0] < v)

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	edx, DWORD PTR v$[rbp]
	cmp	QWORD PTR [rax+rcx], rdx
	jae	SHORT $LN14@PMC_Compar

; 103  :                 *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1
	jmp	SHORT $LN15@PMC_Compar
$LN14@PMC_Compar:

; 104  :             else
; 105  :                 *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
$LN15@PMC_Compar:
$LN13@PMC_Compar:
$LN11@PMC_Compar:
$LN9@PMC_Compar:
$LN7@PMC_Compar:
$LN3@PMC_Compar:

; 106  :         }
; 107  :     }
; 108  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 629  :     {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 630  :         if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);
; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);

	mov	rax, QWORD PTR x$[rbp]
	bsr	rax, rax
	mov	DWORD PTR pos$[rbp], eax

; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 63					; 0000003fH
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 655  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_32 PROC					; COMDAT

; 596  :     {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 597  :         if (x == 0)

	cmp	DWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 598  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	mov	eax, DWORD PTR x$[rbp]
	bsr	eax, eax
	mov	DWORD PTR pos$[rbp], eax

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 31
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 608  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_32$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 224
result_high$ = 232
_FROMDWORDTOWORD PROC					; COMDAT

; 182  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, QWORD PTR value$[rbp]
	shr	rax, 32					; 00000020H
	mov	rcx, QWORD PTR result_high$[rbp]
	mov	DWORD PTR [rcx], eax

; 184  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR value$[rbp]

; 185  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
;	COMDAT PMC_Compare_X_X
_TEXT	SEGMENT
nu$ = 8
nv$ = 40
result$ = 68
u_bit_count$1 = 104
v_bit_count$2 = 136
tv81 = 340
u$ = 384
v$ = 392
w$ = 400
PMC_Compare_X_X PROC					; COMDAT

; 309  : {

$LN18:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__B6CC0FF4_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 310  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Compar

; 311  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 312  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 313  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 314  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Compar

; 315  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 316  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 317  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 318  :     PMC_STATUS_CODE result;
; 319  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Compar

; 320  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Compar
$LN5@PMC_Compar:

; 321  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Compar

; 322  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Compar
$LN6@PMC_Compar:

; 323  :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@PMC_Compar

; 324  :     {
; 325  :         *w = nv->IS_ZERO ? 0 : -1;

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN16@PMC_Compar
	mov	DWORD PTR tv81[rbp], 0
	jmp	SHORT $LN17@PMC_Compar
$LN16@PMC_Compar:
	mov	DWORD PTR tv81[rbp], -1
$LN17@PMC_Compar:
	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR tv81[rbp]
	mov	DWORD PTR [rax], ecx

; 326  :     }

	jmp	$LN8@PMC_Compar
$LN7@PMC_Compar:

; 327  :     else if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@PMC_Compar

; 328  :     {
; 329  :         *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 330  :     }

	jmp	SHORT $LN10@PMC_Compar
$LN9@PMC_Compar:

; 331  :     else
; 332  :     {
; 333  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR u_bit_count$1[rbp], rax

; 334  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR v_bit_count$2[rbp], rax

; 335  :         if (u_bit_count > v_bit_count)

	mov	rax, QWORD PTR v_bit_count$2[rbp]
	cmp	QWORD PTR u_bit_count$1[rbp], rax
	jbe	SHORT $LN11@PMC_Compar

; 336  :         {
; 337  :             // 明らかに u > v である場合
; 338  :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 339  :         }

	jmp	SHORT $LN12@PMC_Compar
$LN11@PMC_Compar:

; 340  :         else if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$2[rbp]
	cmp	QWORD PTR u_bit_count$1[rbp], rax
	jae	SHORT $LN13@PMC_Compar

; 341  :         {
; 342  :             // 明らかに u < v である場合
; 343  :             *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1

; 344  :         }

	jmp	SHORT $LN14@PMC_Compar
$LN13@PMC_Compar:

; 345  :         else
; 346  :         {
; 347  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 348  :             *w = Compare_Imp(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	rax, QWORD PTR nu$[rbp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+56]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	Compare_Imp
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax
$LN14@PMC_Compar:
$LN12@PMC_Compar:
$LN10@PMC_Compar:
$LN8@PMC_Compar:

; 349  :         }
; 350  :     }
; 351  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 352  : }

	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
;	COMDAT PMC_Compare_X_L
_TEXT	SEGMENT
result$ = 4
w_temp$ = 36
u$ = 288
v$ = 296
w$ = 304
PMC_Compare_X_L PROC					; COMDAT

; 289  : {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__B6CC0FF4_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 290  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Compar

; 291  :     {
; 292  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 293  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN2@PMC_Compar:

; 294  :     }
; 295  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 296  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN3@PMC_Compar:

; 297  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Compar

; 298  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN4@PMC_Compar:

; 299  :     PMC_STATUS_CODE result;
; 300  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR u$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Compar

; 301  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN5@PMC_Compar:

; 302  :     _INT32_T w_temp;
; 303  :     PMC_Compare_X_L_Imp((NUMBER_HEADER*)u, v, &w_temp);

	lea	r8, QWORD PTR w_temp$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	PMC_Compare_X_L_Imp

; 304  :     *w = w_temp;

	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR w_temp$[rbp]
	mov	DWORD PTR [rax], ecx

; 305  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 306  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Compare_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
;	COMDAT PMC_Compare_X_I
_TEXT	SEGMENT
result$ = 4
w_temp$ = 36
u$ = 288
v$ = 296
w$ = 304
PMC_Compare_X_I PROC					; COMDAT

; 131  : {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__B6CC0FF4_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 132  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Compar

; 133  :     {
; 134  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 135  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN2@PMC_Compar:

; 136  :     }
; 137  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 138  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN3@PMC_Compar:

; 139  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Compar

; 140  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN4@PMC_Compar:

; 141  :     PMC_STATUS_CODE result;
; 142  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR u$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Compar

; 143  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN5@PMC_Compar:

; 144  :     _INT32_T w_temp;
; 145  :     PMC_Compare_X_I_Imp((NUMBER_HEADER*)u, v, &w_temp);

	lea	r8, QWORD PTR w_temp$[rbp]
	mov	edx, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	PMC_Compare_X_I_Imp

; 146  :     *w = w_temp;

	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR w_temp$[rbp]
	mov	DWORD PTR [rax], ecx

; 147  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 148  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Compare_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
;	COMDAT PMC_Compare_L_X
_TEXT	SEGMENT
result$ = 4
w_temp$ = 36
u$ = 288
v$ = 296
w$ = 304
PMC_Compare_L_X PROC					; COMDAT

; 269  : {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__B6CC0FF4_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 270  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Compar

; 271  :     {
; 272  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 273  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN2@PMC_Compar:

; 274  :     }
; 275  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 276  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN3@PMC_Compar:

; 277  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Compar

; 278  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN4@PMC_Compar:

; 279  :     PMC_STATUS_CODE result;
; 280  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR v$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Compar

; 281  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN5@PMC_Compar:

; 282  :     _INT32_T w_temp;
; 283  :     PMC_Compare_X_L_Imp((NUMBER_HEADER*)v, u, &w_temp);

	lea	r8, QWORD PTR w_temp$[rbp]
	mov	rdx, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	PMC_Compare_X_L_Imp

; 284  :     *w = -w_temp;

	mov	eax, DWORD PTR w_temp$[rbp]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax

; 285  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 286  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Compare_L_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
;	COMDAT PMC_Compare_I_X
_TEXT	SEGMENT
result$ = 4
w_temp$ = 36
u$ = 288
v$ = 296
w$ = 304
PMC_Compare_I_X PROC					; COMDAT

; 111  : {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__B6CC0FF4_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 112  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_Compar

; 113  :     {
; 114  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 115  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN2@PMC_Compar:

; 116  :     }
; 117  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 118  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN3@PMC_Compar:

; 119  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Compar

; 120  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN4@PMC_Compar:

; 121  :     PMC_STATUS_CODE result;
; 122  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR v$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Compar

; 123  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN5@PMC_Compar:

; 124  :     _INT32_T w_temp;
; 125  :     PMC_Compare_X_I_Imp((NUMBER_HEADER*)v, u, &w_temp);

	lea	r8, QWORD PTR w_temp$[rbp]
	mov	edx, DWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	PMC_Compare_X_I_Imp

; 126  :     *w = -w_temp;

	mov	eax, DWORD PTR w_temp$[rbp]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax

; 127  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 128  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Compare_I_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
;	COMDAT Initialize_Compare
_TEXT	SEGMENT
feature$ = 224
Initialize_Compare PROC					; COMDAT

; 355  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B6CC0FF4_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 356  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 357  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Initialize_Compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
;	COMDAT Compare_Imp
_TEXT	SEGMENT
u$ = 224
v$ = 232
count$ = 240
Compare_Imp PROC					; COMDAT

; 39   : {

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__B6CC0FF4_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 40   :     u += count;

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR u$[rbp], rax

; 41   :     v += count;

	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR v$[rbp], rax
$LN2@Compare_Im:

; 42   :     while (count > 0)

	cmp	QWORD PTR count$[rbp], 0
	jbe	SHORT $LN3@Compare_Im

; 43   :     {
; 44   :         --u;

	mov	rax, QWORD PTR u$[rbp]
	sub	rax, 8
	mov	QWORD PTR u$[rbp], rax

; 45   :         --v;

	mov	rax, QWORD PTR v$[rbp]
	sub	rax, 8
	mov	QWORD PTR v$[rbp], rax

; 46   :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 47   : 
; 48   :         if (*u > *v)

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jbe	SHORT $LN4@Compare_Im

; 49   :             return (1);

	mov	eax, 1
	jmp	SHORT $LN1@Compare_Im
	jmp	SHORT $LN5@Compare_Im
$LN4@Compare_Im:

; 50   :         else if (*u < *v)

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN6@Compare_Im

; 51   :             return (-1);

	mov	eax, -1
	jmp	SHORT $LN1@Compare_Im
$LN6@Compare_Im:
$LN5@Compare_Im:

; 52   :         else
; 53   :         {
; 54   :         }
; 55   :     }

	jmp	SHORT $LN2@Compare_Im
$LN3@Compare_Im:

; 56   :     return (0);

	xor	eax, eax
$LN1@Compare_Im:

; 57   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Compare_Imp ENDP
_TEXT	ENDS
END
