; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E05E7037_autogenerated_inline_func@h DB 01H
__E17217E9_pmc_divrem@cpp DB 01H
msvcjmc	ENDS
PUBLIC	??0exception@std@@QEAA@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
PUBLIC	??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
PUBLIC	??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
PUBLIC	??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
PUBLIC	?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
PUBLIC	?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X
PUBLIC	?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_DivRem
PUBLIC	?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X
PUBLIC	?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
PUBLIC	?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
PUBLIC	?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
PUBLIC	?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
PUBLIC	_DIVREM_UNIT
PUBLIC	_DIVREM_SINGLE_UNIT
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@ ; `string'
PUBLIC	??_C@_1FC@LDEMEDOK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ ; `string'
PUBLIC	??_C@_1FC@KBPJOMAE@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1FC@BJEFILGB@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1FC@IEJCLDNI@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1FC@DMCONELN@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1FC@COJLHLFD@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1FC@JGCHBMDG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1FC@MOEEAMGA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1FC@EDOPPJEK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1FC@NODIMBPD@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1FC@IGFLNBKF@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1FC@DOOHLGMA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1EA@MCJPOPJG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_13JAOPNPKD@?$AAv@				; `string'
PUBLIC	??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ ; `string'
PUBLIC	_TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@ ; `string'
PUBLIC	??_C@_1EA@OFDDHPLA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_13ICFKHAEN@?$AAu@				; `string'
PUBLIC	??_C@_1EA@FKDMJIIG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_C@_1EA@KNNDHBNE@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Complete Object Locator'
PUBLIC	??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EDivisionByZeroException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z:PROC ; Palmtree::Math::Core::Internal::RightShift_Imp
EXTRN	?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z:PROC ; Palmtree::Math::Core::Internal::LeftShift_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
EXTRN	?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
EXTRN	?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K01000@ZEA DQ 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_DivRem_X_X
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0exception@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA DD imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+179
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+182
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+130
	DD	imagerel $unwind$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA DD imagerel ?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
	DD	imagerel ?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z DD imagerel $LN25
	DD	imagerel $LN25+4376
	DD	imagerel $unwind$?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z DD imagerel $LN22
	DD	imagerel $LN22+3093
	DD	imagerel $unwind$?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z DD imagerel $LN15
	DD	imagerel $LN15+591
	DD	imagerel $unwind$?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z DD imagerel $LN5
	DD	imagerel $LN5+147
	DD	imagerel $unwind$?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel $LN18
	DD	imagerel $LN18+543
	DD	imagerel $unwind$?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z DD imagerel $LN37
	DD	imagerel $LN37+1725
	DD	imagerel $unwind$?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z DD imagerel $LN9
	DD	imagerel $LN9+420
	DD	imagerel $unwind$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z@4HA DD imagerel ?dtor$0@?0??PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z DD imagerel $LN9
	DD	imagerel $LN9+431
	DD	imagerel $unwind$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z@4HA DD imagerel ?dtor$0@?0??PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z DD imagerel $LN10
	DD	imagerel $LN10+564
	DD	imagerel $unwind$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z@4HA DD imagerel ?dtor$0@?0??PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ DD imagerel ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ
	DD	imagerel ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ+62
	DD	imagerel $unwind$?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ DD imagerel ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ
	DD	imagerel ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ+62
	DD	imagerel $unwind$?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ DD imagerel ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ
	DD	imagerel ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ+62
	DD	imagerel $unwind$?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ DD imagerel ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ
	DD	imagerel ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ+62
	DD	imagerel $unwind$?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD imagerel ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
	DD	imagerel ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z+78
	DD	imagerel $unwind$?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD imagerel ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
	DD	imagerel ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z+78
	DD	imagerel $unwind$?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD imagerel ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
	DD	imagerel ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z+78
	DD	imagerel $unwind$?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD imagerel ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
	DD	imagerel ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z+78
	DD	imagerel $unwind$?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMWORDTODWORD DD imagerel _FROMWORDTODWORD
	DD	imagerel _FROMWORDTODWORD+85
	DD	imagerel $unwind$_FROMWORDTODWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMDWORDTOWORD DD imagerel _FROMDWORDTOWORD
	DD	imagerel _FROMDWORDTOWORD+95
	DD	imagerel $unwind$_FROMDWORDTOWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_UNIT DD imagerel _ADD_UNIT
	DD	imagerel _ADD_UNIT+118
	DD	imagerel $unwind$_ADD_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADDX_UNIT DD imagerel _ADDX_UNIT
	DD	imagerel _ADDX_UNIT+121
	DD	imagerel $unwind$_ADDX_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_SUBTRUCT_UNIT DD imagerel _SUBTRUCT_UNIT
	DD	imagerel _SUBTRUCT_UNIT+118
	DD	imagerel $unwind$_SUBTRUCT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLY_UNIT DD imagerel _MULTIPLY_UNIT
	DD	imagerel _MULTIPLY_UNIT+118
	DD	imagerel $unwind$_MULTIPLY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLYX_UNIT DD imagerel _MULTIPLYX_UNIT
	DD	imagerel _MULTIPLYX_UNIT+103
	DD	imagerel $unwind$_MULTIPLYX_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_DIVREM_UNIT DD imagerel $LN5
	DD	imagerel $LN5+209
	DD	imagerel $unwind$_DIVREM_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_DIVREM_SINGLE_UNIT DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$_DIVREM_SINGLE_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_32 DD imagerel _LZCNT_ALT_32
	DD	imagerel _LZCNT_ALT_32+126
	DD	imagerel $unwind$_LZCNT_ALT_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_64 DD imagerel _LZCNT_ALT_64
	DD	imagerel _LZCNT_ALT_64+131
	DD	imagerel $unwind$_LZCNT_ALT_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_32WORDS_ADC DD imagerel _ADD_32WORDS_ADC
	DD	imagerel _ADD_32WORDS_ADC+2741
	DD	imagerel $unwind$_ADD_32WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_32WORDS_ADCX DD imagerel _ADD_32WORDS_ADCX
	DD	imagerel _ADD_32WORDS_ADCX+2741
	DD	imagerel $unwind$_ADD_32WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_16WORDS_ADC DD imagerel _ADD_16WORDS_ADC
	DD	imagerel _ADD_16WORDS_ADC+1413
	DD	imagerel $unwind$_ADD_16WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_16WORDS_ADCX DD imagerel _ADD_16WORDS_ADCX
	DD	imagerel _ADD_16WORDS_ADCX+1413
	DD	imagerel $unwind$_ADD_16WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_8WORDS_ADC DD imagerel _ADD_8WORDS_ADC
	DD	imagerel _ADD_8WORDS_ADC+749
	DD	imagerel $unwind$_ADD_8WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_8WORDS_ADCX DD imagerel _ADD_8WORDS_ADCX
	DD	imagerel _ADD_8WORDS_ADCX+749
	DD	imagerel $unwind$_ADD_8WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_4WORDS_ADC DD imagerel _ADD_4WORDS_ADC
	DD	imagerel _ADD_4WORDS_ADC+417
	DD	imagerel $unwind$_ADD_4WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_4WORDS_ADCX DD imagerel _ADD_4WORDS_ADCX
	DD	imagerel _ADD_4WORDS_ADCX+417
	DD	imagerel $unwind$_ADD_4WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_2WORDS_ADC DD imagerel _ADD_2WORDS_ADC
	DD	imagerel _ADD_2WORDS_ADC+251
	DD	imagerel $unwind$_ADD_2WORDS_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_2WORDS_ADCX DD imagerel _ADD_2WORDS_ADCX
	DD	imagerel _ADD_2WORDS_ADCX+251
	DD	imagerel $unwind$_ADD_2WORDS_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z DD imagerel ?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z
	DD	imagerel ?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z+1339
	DD	imagerel $unwind$?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Asume_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIII@Z DD imagerel ?_Asume_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIII@Z
	DD	imagerel ?_Asume_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIII@Z+137
	DD	imagerel $unwind$?_Asume_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z DD imagerel ?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z
	DD	imagerel ?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z+454
	DD	imagerel $unwind$?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z DD imagerel ?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z
	DD	imagerel ?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z+226
	DD	imagerel $unwind$?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z DD imagerel ?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z
	DD	imagerel ?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z+2733
	DD	imagerel $unwind$?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z DD imagerel ?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z
	DD	imagerel ?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z+178
	DD	imagerel $unwind$?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z DD imagerel ?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z
	DD	imagerel ?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z+368
	DD	imagerel $unwind$?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z DD imagerel ?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z
	DD	imagerel ?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z+368
	DD	imagerel $unwind$?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalculateQ_@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z DD imagerel ?CalculateQ_@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z
	DD	imagerel ?CalculateQ_@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z+404
	DD	imagerel $unwind$?CalculateQ_@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalculateQ_X@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z DD imagerel ?CalculateQ_X@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z
	DD	imagerel ?CalculateQ_X@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z+404
	DD	imagerel $unwind$?CalculateQ_X@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPEA_K_K@Z DD imagerel ?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPEA_K_K@Z
	DD	imagerel ?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPEA_K_K@Z+199
	DD	imagerel $unwind$?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPEA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z DD imagerel ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z
	DD	imagerel ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z+256
	DD	imagerel $unwind$?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z DD imagerel ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z
	DD	imagerel ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z+256
	DD	imagerel $unwind$?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z DD imagerel ?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z
	DD	imagerel ?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z+5439
	DD	imagerel $unwind$?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z DD imagerel ?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z
	DD	imagerel ?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z+5439
	DD	imagerel $unwind$?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K@Z DD imagerel ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K@Z
	DD	imagerel ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K@Z+177
	DD	imagerel $unwind$?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddOneLine@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z DD imagerel ?AddOneLine@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z
	DD	imagerel ?AddOneLine@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z+596
	DD	imagerel $unwind$?AddOneLine@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z DD imagerel ?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z
	DD	imagerel ?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z+596
	DD	imagerel $unwind$?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z DD imagerel ?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z
	DD	imagerel ?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z+637
	DD	imagerel $unwind$?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z DD imagerel ?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z
	DD	imagerel ?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z+549
	DD	imagerel $unwind$?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z DD imagerel ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z
	DD	imagerel ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z+714
	DD	imagerel $unwind$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z@4HA DD imagerel ?dtor$0@?0??PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z DD imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z
	DD	imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z+2311
	DD	imagerel $unwind$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA DD imagerel ?dtor$0@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA DD imagerel ?dtor$1@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$1@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA DD imagerel ?dtor$2@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$2@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA DD imagerel ?dtor$3@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$3@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z DD imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z
	DD	imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z+1986
	DD	imagerel $unwind$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA DD imagerel ?dtor$0@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA DD imagerel ?dtor$1@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$1@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA DD imagerel ?dtor$2@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$2@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA DD imagerel ?dtor$3@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
	DD	imagerel ?dtor$3@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 01H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1EA@KNNDHBNE@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1EA@KNNDHBNE@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H, 'X'
	DB	00H, '_', 00H, 'L', 00H, ';', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@FKDMJIIG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1EA@FKDMJIIG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H, 'L'
	DB	00H, '_', 00H, 'X', 00H, ';', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13ICFKHAEN@?$AAu@
CONST	SEGMENT
??_C@_13ICFKHAEN@?$AAu@ DB 'u', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OFDDHPLA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1EA@OFDDHPLA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H, 'X'
	DB	00H, '_', 00H, 'I', 00H, ';', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
CONST	SEGMENT
??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@ DB '0'
	DB	00H, 'k0', 088H, '0', 08bH, '0d', 096H, 097H, '{L0L', 088H, 08fH
	DB	'0', 08cH, '0', 088H, '0F0h0W0~0W0_0', 02H, '0', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVDivisionByZeroException@Internal@Core@Math@Palmtree@'
	DB	'@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
CONST	SEGMENT
??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ DB 015H
	DB	'_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13JAOPNPKD@?$AAv@
CONST	SEGMENT
??_C@_13JAOPNPKD@?$AAv@ DB 'v', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1EA@MCJPOPJG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1EA@MCJPOPJG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H, 'I'
	DB	00H, '_', 00H, 'X', 00H, ';', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@DOOHLGMA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@DOOHLGMA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, 'n', 00H, 'W', 00H, ';', 00H, '9'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@IGFLNBKF@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@IGFLNBKF@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, 'n', 00H, 'W', 00H, ';', 00H, '8'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@NODIMBPD@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@NODIMBPD@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, 'n', 00H, 'W', 00H, ';', 00H, '7'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@EDOPPJEK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@EDOPPJEK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, 'n', 00H, 'W', 00H, ';', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@MOEEAMGA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@MOEEAMGA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, '1', 00H, 'W', 00H, ';', 00H, '8'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@JGCHBMDG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@JGCHBMDG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, '1', 00H, 'W', 00H, ';', 00H, '7'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@COJLHLFD@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@COJLHLFD@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, '1', 00H, 'W', 00H, ';', 00H, '6'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@DMCONELN@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@DMCONELN@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, '1', 00H, 'W', 00H, ';', 00H, '5'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@IEJCLDNI@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@IEJCLDNI@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, '1', 00H, 'W', 00H, ';', 00H, '4'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@BJEFILGB@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@BJEFILGB@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, '1', 00H, 'W', 00H, ';', 00H, '3'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@KBPJOMAE@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@KBPJOMAE@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, '1', 00H, 'W', 00H, ';', 00H, '2'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
CONST	SEGMENT
??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ DB 085H
	DB	'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv', 01fH, 'u'
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@LDEMEDOK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
CONST	SEGMENT
??_C@_1FC@LDEMEDOK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'v', 00H
	DB	'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H
	DB	'm', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'V'
	DB	00H, 'R', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, '1', 00H, 'W', 00H, ';', 00H, '1'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
CONST	SEGMENT
??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@ DB 088H
	DB	'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H, '0k00RT', 090H
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT _CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DQ	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vftable'
	DQ	FLAT:??_EDivisionByZeroException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DQ	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DQ	FLAT:??_EException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z DD imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z+328
	DD	00H
	DD	imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z+712
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z+751
	DD	01H
	DD	imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z+993
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z+1049
	DD	02H
	DD	imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z+1563
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z+1605
	DD	03H
	DD	imagerel ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z+1935
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$2@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$3@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z DD 045053f11H
	DD	0118431dH
	DD	0701100a5H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$1 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$2 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$3 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcVarDesc DD 0268H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$3
	DD	01a8H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$2
	DD	0128H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$1
	DD	088H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$0
	ORG $+192
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcFrameData DD 04H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
	DD	00H
	DQ	FLAT:?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcVarDesc
$cppxdata$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z
	DD	00H
	DD	00H
	DD	09H
	DD	imagerel $ip2state$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z
	DD	0508H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z DD imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z+410
	DD	00H
	DD	imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z+668
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z+1018
	DD	01H
	DD	imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z+1445
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z+1487
	DD	02H
	DD	imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z+1760
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z+1943
	DD	03H
	DD	imagerel ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z+2208
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$2@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$3@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z DD 045053f11H
	DD	0118431dH
	DD	0701100fbH
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$0 DB 076H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$1 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$2 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$3 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$4 DB 076H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$5 DB 077H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+1
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$6 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$7 DB 076H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$8 DB 077H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+1
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$9 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$10 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcFrameData DD 0bH ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DD	00H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcVarDesc
$cppxdata$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z
	DD	00H
	DD	00H
	DD	09H
	DD	imagerel $ip2state$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z
	DD	07b8H
	DD	00H
	DD	00H
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcVarDesc DD 0468H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
	DD	08H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$10
	DD	0408H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$9
	DD	0358H
	DD	010H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$8
	DD	0328H
	DD	010H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$7
	DD	02c8H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$6
	DD	0278H
	DD	010H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$5
	DD	0248H
	DD	010H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$4
	DD	01c8H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$3
	DD	0128H
	DD	08H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$2
	DD	0c8H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$1
	DD	064H
	DD	04H
	DQ	FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z DD imagerel ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z+367
	DD	00H
	DD	imagerel ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z+614
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z DD 035053e11H
	DD	0117331cH
	DD	07010004dH
	DD	0500fH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z$rtcName$1 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z$rtcVarDesc DD 0d8H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
	DD	08H
	DQ	FLAT:?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z$rtcName$1
	DD	078H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z$rtcName$0
	ORG $+96
?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
	DD	00H
	DQ	FLAT:?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z$rtcVarDesc
$cppxdata$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z
	DD	0248H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z DD 035053901H
	DD	011d3322H
	DD	07016002fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z DD 035053901H
	DD	011d3322H
	DD	07016002fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z DD 025053901H
	DD	011d2322H
	DD	070160031H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddOneLine@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z DD 025053901H
	DD	011d2322H
	DD	070160031H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z DD 035053901H
	DD	011d3322H
	DD	070160037H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcName$0 DB 06bH ; Palmtree::Math::Core::Internal::SubtructOneLineX
	DB	00H
	ORG $+14
?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcVarDesc DD 098H ; Palmtree::Math::Core::Internal::SubtructOneLineX
	DD	08H
	DQ	FLAT:?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcName$0
	ORG $+48
?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::SubtructOneLineX
	DD	00H
	DQ	FLAT:?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z DD 035053901H
	DD	011d3322H
	DD	070160037H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcName$0 DB 06bH ; Palmtree::Math::Core::Internal::SubtructOneLine
	DB	00H
	ORG $+14
?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcVarDesc DD 098H ; Palmtree::Math::Core::Internal::SubtructOneLine
	DD	08H
	DQ	FLAT:?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcName$0
	ORG $+48
?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::SubtructOneLine
	DD	00H
	DQ	FLAT:?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z DD 025053801H
	DD	011c2321H
	DD	070150027H
	DD	05014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcName$0 DB 074H ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcName$1 DB 074H ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
	DB	05fH
	DB	06cH
	DB	06fH
	DB	00H
	ORG $+3
?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcVarDesc DD 048H ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
	DD	08H
	DQ	FLAT:?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcName$0
	ORG $+96
?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
	DD	00H
	DQ	FLAT:?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z DD 025053801H
	DD	011c2321H
	DD	070150027H
	DD	05014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcName$0 DB 074H ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcName$1 DB 074H ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
	DB	05fH
	DB	06cH
	DB	06fH
	DB	00H
	ORG $+3
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcVarDesc DD 048H ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
	DD	08H
	DQ	FLAT:?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcName$0
	ORG $+96
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
	DD	00H
	DQ	FLAT:?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPEA_K_K@Z DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalculateQ_X@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z DD 035053901H
	DD	011d3322H
	DD	07016003bH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalculateQ_@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z DD 035053901H
	DD	011d3322H
	DD	07016003bH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z DD 025053901H
	DD	011d2322H
	DD	07016003bH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$0 DB 06cH ; Palmtree::Math::Core::Internal::CheckQ_X
	DB	068H
	DB	05fH
	DB	06dH
	DB	069H
	DB	00H
	ORG $+2
?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$1 DB 072H ; Palmtree::Math::Core::Internal::CheckQ_X
	DB	068H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+2
?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$2 DB 072H ; Palmtree::Math::Core::Internal::CheckQ_X
	DB	068H
	DB	05fH
	DB	06dH
	DB	069H
	DB	00H
	ORG $+2
?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$3 DB 074H ; Palmtree::Math::Core::Internal::CheckQ_X
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcVarDesc DD 0c8H ; Palmtree::Math::Core::Internal::CheckQ_X
	DD	08H
	DQ	FLAT:?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$3
	DD	088H
	DD	08H
	DQ	FLAT:?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$0
	ORG $+192
?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcFrameData DD 04H ; Palmtree::Math::Core::Internal::CheckQ_X
	DD	00H
	DQ	FLAT:?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z DD 025053901H
	DD	011d2322H
	DD	07016003bH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$0 DB 06cH ; Palmtree::Math::Core::Internal::CheckQ_
	DB	068H
	DB	05fH
	DB	06dH
	DB	069H
	DB	00H
	ORG $+2
?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$1 DB 072H ; Palmtree::Math::Core::Internal::CheckQ_
	DB	068H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+2
?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$2 DB 072H ; Palmtree::Math::Core::Internal::CheckQ_
	DB	068H
	DB	05fH
	DB	06dH
	DB	069H
	DB	00H
	ORG $+2
?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$3 DB 074H ; Palmtree::Math::Core::Internal::CheckQ_
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcVarDesc DD 0c8H ; Palmtree::Math::Core::Internal::CheckQ_
	DD	08H
	DQ	FLAT:?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$3
	DD	088H
	DD	08H
	DQ	FLAT:?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcName$0
	ORG $+192
?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcFrameData DD 04H ; Palmtree::Math::Core::Internal::CheckQ_
	DD	00H
	DQ	FLAT:?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::AsumeQ_
	DB	00H
	ORG $+14
?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z$rtcVarDesc DD 028H ; Palmtree::Math::Core::Internal::AsumeQ_
	DD	08H
	DQ	FLAT:?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z$rtcName$0
	ORG $+48
?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::AsumeQ_
	DD	00H
	DQ	FLAT:?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z DD 035053901H
	DD	011d3322H
	DD	0701601bbH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$0 DB 075H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	030H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$1 DB 075H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	031H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$2 DB 075H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	032H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$3 DB 075H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	033H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$4 DB 075H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	034H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$5 DB 076H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	031H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$6 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$7 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	074H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$8 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	031H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$9 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$10 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	074H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$11 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	031H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$12 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$13 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	074H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$14 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	031H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$15 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	031H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+2
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$16 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	032H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+2
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$17 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	05fH
	DB	076H
	DB	068H
	DB	00H
	ORG $+3
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$18 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$19 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DB	05fH
	DB	06cH
	DB	06fH
	DB	00H
	ORG $+3
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcVarDesc DD 0658H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DD	08H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$19
	DD	0638H
	DD	08H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$18
	DD	0618H
	DD	08H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$17
	DD	05d8H
	DD	08H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$16
	DD	0598H
	DD	08H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$15
	DD	0494H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$14
	DD	0454H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$13
	DD	0418H
	DD	08H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$12
	DD	0394H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$11
	DD	0354H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$10
	DD	0318H
	DD	08H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$9
	DD	0294H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$8
	DD	0254H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$7
	DD	0218H
	DD	08H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$6
	DD	0154H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$5
	DD	0134H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$4
	DD	0114H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$3
	DD	0f4H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$2
	DD	0d4H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$1
	DD	0b4H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcName$0
	ORG $+960
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcFrameData DD 014H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
	DD	00H
	DQ	FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z DD 035053601H
	DD	011b3320H
	DD	070140023H
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z DD 025053601H
	DD	011b2320H
	DD	070140049H
	DD	05013H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcName$0 DB 078H ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_
	DB	031H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+2
?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcName$1 DB 078H ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_
	DB	032H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+2
?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcName$2 DB 06cH ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_
	DB	068H
	DB	032H
	DB	00H
?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcName$3 DB 06cH ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_
	DB	068H
	DB	031H
	DB	00H
?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcName$4 DB 06cH ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_
	DB	068H
	DB	030H
	DB	00H
	ORG $+4
?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcVarDesc DD 0e4H ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_
	DD	04H
	DQ	FLAT:?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcName$4
	DD	0c4H
	DD	04H
	DQ	FLAT:?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcName$3
	DD	0a4H
	DD	04H
	DQ	FLAT:?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcName$0
	ORG $+240
?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcFrameData DD 05H ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_
	DD	00H
	DQ	FLAT:?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Asume_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIII@Z DD 025053101H
	DD	0116231bH
	DD	0700f001fH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z DD 025053901H
	DD	011d2322H
	DD	0701600edH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$0 DB 075H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
	DB	031H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$1 DB 075H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
	DB	033H
	DB	00H
	ORG $+1
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$2 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
	DB	05fH
	DB	075H
	DB	034H
	DB	00H
	ORG $+3
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$3 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
	DB	05fH
	DB	075H
	DB	033H
	DB	00H
	ORG $+3
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$4 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
	DB	05fH
	DB	075H
	DB	032H
	DB	00H
	ORG $+3
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$5 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
	DB	05fH
	DB	075H
	DB	031H
	DB	00H
	ORG $+3
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$6 DB 074H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
	DB	05fH
	DB	075H
	DB	030H
	DB	00H
	ORG $+3
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcVarDesc DD 0264H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$6
	DD	0244H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$5
	DD	0224H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$4
	DD	0204H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$3
	DD	01e4H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$2
	DD	084H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcName$0
	ORG $+336
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcFrameData DD 07H ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
	DD	00H
	DQ	FLAT:?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_2WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_2WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_4WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_4WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_8WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_8WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_16WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_16WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_32WORDS_ADCX DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_32WORDS_ADC DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_64 DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_64$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_64$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_64$rtcName$0
	ORG $+48
_LZCNT_ALT_64$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_64$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_32 DD 025052801H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_32$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_32$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_32$rtcName$0
	ORG $+48
_LZCNT_ALT_32$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_32$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_DIVREM_SINGLE_UNIT DD 025053901H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_DIVREM_SINGLE_UNIT$rtcName$0 DB 052H
	DB	052H
	DB	00H
	ORG $+13
_DIVREM_SINGLE_UNIT$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:_DIVREM_SINGLE_UNIT$rtcName$0
	ORG $+48
_DIVREM_SINGLE_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_DIVREM_SINGLE_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_DIVREM_UNIT DD 025053901H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_DIVREM_UNIT$rtcName$0 DB 076H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+11
_DIVREM_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_DIVREM_UNIT$rtcName$0
	ORG $+48
_DIVREM_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_DIVREM_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLYX_UNIT DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLY_UNIT DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_SUBTRUCT_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADDX_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_UNIT DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMDWORDTOWORD DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMWORDTODWORD DD 025052c01H
	DD	01112316H
	DD	0700a001dH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z DD imagerel ?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z+287
	DD	00H
	DD	imagerel ?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z+516
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z DD 025053f11H
	DD	0118231dH
	DD	07011005bH
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$1 DB 06eH ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
	DB	071H
	DB	00H
	ORG $+5
?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z$rtcVarDesc DD 0a8H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
	DD	08H
	DQ	FLAT:?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$1
	DD	068H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z$rtcName$0
	ORG $+96
?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
	DD	00H
	DQ	FLAT:?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z$rtcVarDesc
$cppxdata$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z
	DD	02b8H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z DD imagerel ?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z+211
	DD	00H
	DD	imagerel ?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z+311
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z+331
	DD	00H
	DD	imagerel ?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z+371
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z DD 025053f11H
	DD	0118231dH
	DD	070110055H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z$rtcName$1 DB 06eH ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
	DB	071H
	DB	00H
	ORG $+5
?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z$rtcVarDesc DD 088H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
	DD	08H
	DQ	FLAT:?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z$rtcName$0
	ORG $+96
?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
	DD	00H
	DQ	FLAT:?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z$rtcVarDesc
$cppxdata$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z
	DD	0288H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z DD imagerel ?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z+210
	DD	00H
	DD	imagerel ?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z+306
	DD	0ffffffffH
	DD	imagerel ?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z+325
	DD	00H
	DD	imagerel ?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z+361
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z DD 025053e11H
	DD	0117231cH
	DD	070100055H
	DD	0500fH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z$rtcName$1 DB 06eH ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
	DB	071H
	DB	00H
	ORG $+5
?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z$rtcVarDesc DD 088H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
	DD	08H
	DQ	FLAT:?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z$rtcName$0
	ORG $+96
?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
	DD	00H
	DQ	FLAT:?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z$rtcVarDesc
$cppxdata$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z
	DD	0288H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z DD 045054519H
	DD	0118431dH
	DD	0701100e9H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0730H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$0 DB 075H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$1 DB 074H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	072H
	DB	00H
	ORG $+1
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$2 DB 075H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$3 DB 071H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$4 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$5 DB 075H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$6 DB 075H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$7 DB 071H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$8 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$9 DB 077H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+1
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$10 DB 075H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$11 DB 072H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$12 DB 077H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+1
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$13 DB 074H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	072H
	DB	00H
	ORG $+5
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcVarDesc DD 03c8H ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DD	08H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$13
	DD	0358H
	DD	010H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$12
	DD	0328H
	DD	018H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$11
	DD	02f8H
	DD	010H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$10
	DD	02c8H
	DD	010H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$9
	DD	0298H
	DD	018H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$8
	DD	0268H
	DD	018H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$7
	DD	0238H
	DD	010H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$6
	DD	01e8H
	DD	010H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$5
	DD	01c8H
	DD	08H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$4
	DD	0198H
	DD	018H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$3
	DD	0168H
	DD	010H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$2
	DD	0e8H
	DD	08H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$1
	DD	064H
	DD	04H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcName$0
	ORG $+672
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcFrameData DD 0eH ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
	DD	00H
	DQ	FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 025053201H
	DD	0117231cH
	DD	07010004fH
	DD	0500fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcName$0 DB 074H ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	072H
	DB	00H
	ORG $+9
?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcVarDesc DD 088H ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X
	DD	08H
	DQ	FLAT:?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcName$0
	ORG $+48
?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X
	DD	00H
	DQ	FLAT:?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z DD 045053901H
	DD	011d4322H
	DD	07016003dH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::DivRem_X_X
	DB	00H
	ORG $+2
?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z$rtcName$1 DB 072H ; Palmtree::Math::Core::Internal::DivRem_X_X
	DB	00H
	ORG $+10
?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z$rtcVarDesc DD 0108H ; Palmtree::Math::Core::Internal::DivRem_X_X
	DD	08H
	DQ	FLAT:?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z$rtcName$1
	DD	0c8H
	DD	08H
	DQ	FLAT:?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z$rtcName$0
	ORG $+96
?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::DivRem_X_X
	DD	00H
	DQ	FLAT:?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z DD 025053401H
	DD	0118231dH
	DD	070110031H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z$rtcName$0 DB 064H ; Palmtree::Math::Core::Internal::Rem_X_1W
	DB	075H
	DB	06dH
	DB	06dH
	DB	079H
	DB	05fH
	DB	071H
	DB	00H
	ORG $+8
?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z$rtcVarDesc DD 068H ; Palmtree::Math::Core::Internal::Rem_X_1W
	DD	08H
	DQ	FLAT:?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z$rtcName$0
	ORG $+48
?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::Rem_X_1W
	DD	00H
	DQ	FLAT:?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z DD 025053901H
	DD	011d2322H
	DD	070160031H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+108
	DD	00H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+125
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	0ffffffffH
	DD	imagerel ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+96
	DD	00H
	DD	imagerel ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+113
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+108
	DD	00H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+125
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+84
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+165
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z+93
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z+162
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 025054319H
	DD	011c2321H
	DD	070150021H
	DD	05014H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z+88
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z+154
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD 025053e19H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1exception@std@@UEAA@XZ DD imagerel ??1exception@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1exception@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1exception@std@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1exception@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0exception@std@@QEAA@XZ DD imagerel ??0exception@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0exception@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0exception@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0exception@std@@QEAA@XZ
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z
_TEXT	SEGMENT
u_bit_count$7 = 8
v_bit_count$8 = 40
root$9 = 72
q_bit_count$10 = 136
r_bit_count$11 = 168
r$12 = 200
root$13 = 232
r_bit_count$14 = 296
r$15 = 328
root$16 = 360
q_bit_count$17 = 424
r_bit_count$18 = 456
r$19 = 488
work_v_buf$20 = 520
root$21 = 552
r_bit_count$22 = 616
r$23 = 648
work_v_buf$24 = 680
$T25 = 1096
$T26 = 1128
$T27 = 1160
$T28 = 1192
$T29 = 1224
tv272 = 1240
tv222 = 1240
tv178 = 1240
u$ = 1280
v$ = 1288
q$ = 1296
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp, COMDAT

; 2039 :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 05
	00 00		 sub	 rsp, 1320		; 00000528H
  00018	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4a 01 00 00	 mov	 ecx, 330		; 0000014aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 48
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1352]
  00034	48 c7 85 c8 04
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T29[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2040 :         if (u->IS_ZERO)

  0004b	48 8b 85 00 05
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00052	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00055	83 e0 01	 and	 eax, 1
  00058	85 c0		 test	 eax, eax
  0005a	74 2c		 je	 SHORT $LN2@PMC_DivRem

; 2041 :         {
; 2042 :             // u が 0 である場合
; 2043 : 
; 2044 :             // q = 0, r = 0 を返す
; 2045 :             if (q != nullptr)

  0005c	48 83 bd 10 05
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00064	74 11		 je	 SHORT $LN4@PMC_DivRem

; 2046 :                 *q = &number_zero;

  00066	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00074	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN4@PMC_DivRem:

; 2047 :             return (&number_zero);

  00077	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0007e	e9 1f 07 00 00	 jmp	 $LN1@PMC_DivRem

; 2048 :         }
; 2049 :         else

  00083	e9 1a 07 00 00	 jmp	 $LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 2050 :         {
; 2051 :             // u が 0 ではない場合
; 2052 : 
; 2053 :             if (v->IS_ONE)

  00088	48 8b 85 08 05
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  0008f	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00092	d1 e8		 shr	 eax, 1
  00094	83 e0 01	 and	 eax, 1
  00097	85 c0		 test	 eax, eax
  00099	74 31		 je	 SHORT $LN5@PMC_DivRem

; 2054 :             {
; 2055 :                 // v が 1 である場合
; 2056 : 
; 2057 :                 // q = u, r = 0 を返す
; 2058 :                 if (q != nullptr)

  0009b	48 83 bd 10 05
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  000a3	74 16		 je	 SHORT $LN7@PMC_DivRem

; 2059 :                     *q = DuplicateNumber(u);

  000a5	48 8b 8d 00 05
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  000ac	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  000b1	48 8b 8d 10 05
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  000b8	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN7@PMC_DivRem:

; 2060 :                 return (&number_zero);

  000bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  000c2	e9 db 06 00 00	 jmp	 $LN1@PMC_DivRem

; 2061 :             }
; 2062 :             else

  000c7	e9 d6 06 00 00	 jmp	 $LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 2063 :             {
; 2064 :                 // u > 0 かつ v > 1 である場合
; 2065 : 
; 2066 :                 // x と y の商・剰余を計算する
; 2067 :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000cc	48 8b 85 00 05
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000d3	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000d7	48 89 45 08	 mov	 QWORD PTR u_bit_count$7[rbp], rax

; 2068 :                 __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

  000db	48 8b 85 08 05
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  000e2	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000e6	48 89 45 28	 mov	 QWORD PTR v_bit_count$8[rbp], rax

; 2069 :                 if (u_bit_count < v_bit_count)

  000ea	48 8b 45 28	 mov	 rax, QWORD PTR v_bit_count$8[rbp]
  000ee	48 39 45 08	 cmp	 QWORD PTR u_bit_count$7[rbp], rax
  000f2	73 31		 jae	 SHORT $LN8@PMC_DivRem

; 2070 :                 {
; 2071 :                     // 明らかに u < v である場合
; 2072 : 
; 2073 :                     // q = 0, r = u を返す。
; 2074 :                     if (q != nullptr)

  000f4	48 83 bd 10 05
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  000fc	74 11		 je	 SHORT $LN10@PMC_DivRem

; 2075 :                         *q = &number_zero;

  000fe	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0010c	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN10@PMC_DivRem:

; 2076 :                     return (DuplicateNumber(u));

  0010f	48 8b 8d 00 05
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  00116	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0011b	e9 82 06 00 00	 jmp	 $LN1@PMC_DivRem
  00120	e9 7d 06 00 00	 jmp	 $LN1@PMC_DivRem
$LN8@PMC_DivRem:

; 2077 :                 }
; 2078 :                 else if (v_bit_count <= sizeof(__UNIT_TYPE) * 8)

  00125	48 83 7d 28 40	 cmp	 QWORD PTR v_bit_count$8[rbp], 64 ; 00000040H
  0012a	0f 87 ce 02 00
	00		 ja	 $LN11@PMC_DivRem

; 2079 :                 {
; 2080 :                     // 除数が 1 ワードで表現できる場合
; 2081 : 
; 2082 :                     if (q != nullptr)

  00130	48 83 bd 10 05
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00138	0f 84 a4 01 00
	00		 je	 $LN13@PMC_DivRem

; 2083 :                     {
; 2084 :                         ResourceHolderUINT root;

  0013e	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  00142	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00147	90		 npad	 1

; 2085 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00148	48 8b 45 28	 mov	 rax, QWORD PTR v_bit_count$8[rbp]
  0014c	48 8b 4d 08	 mov	 rcx, QWORD PTR u_bit_count$7[rbp]
  00150	48 2b c8	 sub	 rcx, rax
  00153	48 8b c1	 mov	 rax, rcx
  00156	48 83 c0 41	 add	 rax, 65			; 00000041H
  0015a	48 89 85 88 00
	00 00		 mov	 QWORD PTR q_bit_count$10[rbp], rax

; 2086 :                         *q = root.AllocateNumber(q_bit_count);

  00161	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR q_bit_count$10[rbp]
  00168	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  0016c	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00171	48 8b 8d 10 05
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  00178	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2087 :                         __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE) * 8;

  0017b	48 c7 85 a8 00
	00 00 40 00 00
	00		 mov	 QWORD PTR r_bit_count$11[rbp], 64 ; 00000040H

; 2088 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  00186	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR r_bit_count$11[rbp]
  0018d	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  00191	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00196	48 89 85 c8 00
	00 00		 mov	 QWORD PTR r$12[rbp], rax

; 2089 :                         DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v->BLOCK[0], (*q)->BLOCK, r->BLOCK);

  0019d	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a7	b9 08 00 00 00	 mov	 ecx, 8
  001ac	48 6b c9 00	 imul	 rcx, rcx, 0
  001b0	48 8b 95 08 05
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  001b7	48 8b 52 40	 mov	 rdx, QWORD PTR [rdx+64]
  001bb	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR r$12[rbp]
  001c2	4d 8b 40 40	 mov	 r8, QWORD PTR [r8+64]
  001c6	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  001cb	4c 8b 48 40	 mov	 r9, QWORD PTR [rax+64]
  001cf	4c 8b 04 0a	 mov	 r8, QWORD PTR [rdx+rcx]
  001d3	48 8b 85 00 05
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  001da	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  001de	48 8b 85 00 05
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  001e5	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  001e9	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W

; 2090 :                         root.CheckNumber(*q);

  001ee	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001f5	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001f8	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  001fc	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2091 :                         root.CheckNumber(r);

  00201	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR r$12[rbp]
  00208	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  0020c	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2092 :                         CommitNumber(*q);

  00211	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00218	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0021b	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 2093 :                         CommitNumber(r);

  00220	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR r$12[rbp]
  00227	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 2094 :                         if ((*q)->IS_ZERO)

  0022c	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00233	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00236	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00239	83 e0 01	 and	 eax, 1
  0023c	85 c0		 test	 eax, eax
  0023e	74 26		 je	 SHORT $LN15@PMC_DivRem

; 2095 :                         {
; 2096 :                             root.DeallocateNumber(*q);

  00240	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00247	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0024a	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  0024e	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2097 :                             *q = &number_zero;

  00253	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0025a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00261	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2098 :                         }
; 2099 :                         else

  00264	eb 13		 jmp	 SHORT $LN16@PMC_DivRem
$LN15@PMC_DivRem:

; 2100 :                             root.UnlinkNumber(*q);

  00266	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0026d	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00270	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  00274	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN16@PMC_DivRem:

; 2101 :                         if (r->IS_ZERO)

  00279	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR r$12[rbp]
  00280	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00283	83 e0 01	 and	 eax, 1
  00286	85 c0		 test	 eax, eax
  00288	74 20		 je	 SHORT $LN17@PMC_DivRem

; 2102 :                         {
; 2103 :                             root.DeallocateNumber(r);

  0028a	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR r$12[rbp]
  00291	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  00295	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2104 :                             r = &number_zero;

  0029a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  002a1	48 89 85 c8 00
	00 00		 mov	 QWORD PTR r$12[rbp], rax

; 2105 :                         }
; 2106 :                         else

  002a8	eb 10		 jmp	 SHORT $LN18@PMC_DivRem
$LN17@PMC_DivRem:

; 2107 :                             root.UnlinkNumber(r);

  002aa	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR r$12[rbp]
  002b1	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  002b5	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN18@PMC_DivRem:

; 2108 :                         return (r);

  002ba	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR r$12[rbp]
  002c1	48 89 85 48 04
	00 00		 mov	 QWORD PTR $T25[rbp], rax
  002c8	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  002cc	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  002d1	48 8b 85 48 04
	00 00		 mov	 rax, QWORD PTR $T25[rbp]
  002d8	e9 c5 04 00 00	 jmp	 $LN1@PMC_DivRem

; 2109 :                     }
; 2110 :                     else

  002dd	e9 17 01 00 00	 jmp	 $LN14@PMC_DivRem
$LN13@PMC_DivRem:

; 2111 :                     {
; 2112 :                         ResourceHolderUINT root;

  002e2	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR root$13[rbp]
  002e9	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  002ee	90		 npad	 1

; 2113 :                         __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE) * 8;

  002ef	48 c7 85 28 01
	00 00 40 00 00
	00		 mov	 QWORD PTR r_bit_count$14[rbp], 64 ; 00000040H

; 2114 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  002fa	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR r_bit_count$14[rbp]
  00301	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR root$13[rbp]
  00308	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0030d	48 89 85 48 01
	00 00		 mov	 QWORD PTR r$15[rbp], rax

; 2115 :                         r->BLOCK[0] = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v->BLOCK[0]);

  00314	b8 08 00 00 00	 mov	 eax, 8
  00319	48 6b c0 00	 imul	 rax, rax, 0
  0031d	48 8b 8d 08 05
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  00324	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00328	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  0032c	48 8b 85 00 05
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00333	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00337	48 8b 85 00 05
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0033e	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00342	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  00347	48 89 85 d8 04
	00 00		 mov	 QWORD PTR tv178[rbp], rax
  0034e	b8 08 00 00 00	 mov	 eax, 8
  00353	48 6b c0 00	 imul	 rax, rax, 0
  00357	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  0035e	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00362	48 8b 95 d8 04
	00 00		 mov	 rdx, QWORD PTR tv178[rbp]
  00369	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 2116 :                         root.CheckNumber(r);

  0036d	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR r$15[rbp]
  00374	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR root$13[rbp]
  0037b	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2117 :                         CommitNumber(r);

  00380	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR r$15[rbp]
  00387	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 2118 :                         if (r->IS_ZERO)

  0038c	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  00393	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00396	83 e0 01	 and	 eax, 1
  00399	85 c0		 test	 eax, eax
  0039b	74 23		 je	 SHORT $LN19@PMC_DivRem

; 2119 :                         {
; 2120 :                             root.DeallocateNumber(r);

  0039d	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR r$15[rbp]
  003a4	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR root$13[rbp]
  003ab	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2121 :                             r = &number_zero;

  003b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  003b7	48 89 85 48 01
	00 00		 mov	 QWORD PTR r$15[rbp], rax

; 2122 :                         }
; 2123 :                         else

  003be	eb 13		 jmp	 SHORT $LN20@PMC_DivRem
$LN19@PMC_DivRem:

; 2124 :                             root.UnlinkNumber(r);

  003c0	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR r$15[rbp]
  003c7	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR root$13[rbp]
  003ce	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN20@PMC_DivRem:

; 2125 :                         return (r);

  003d3	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR r$15[rbp]
  003da	48 89 85 68 04
	00 00		 mov	 QWORD PTR $T26[rbp], rax
  003e1	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR root$13[rbp]
  003e8	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  003ed	48 8b 85 68 04
	00 00		 mov	 rax, QWORD PTR $T26[rbp]
  003f4	e9 a9 03 00 00	 jmp	 $LN1@PMC_DivRem
$LN14@PMC_DivRem:

; 2126 :                     }
; 2127 :                 }
; 2128 :                 else

  003f9	e9 a4 03 00 00	 jmp	 $LN1@PMC_DivRem
$LN11@PMC_DivRem:

; 2129 :                 {
; 2130 :                     // 除数を表現するのに 2 ワード以上必要な場合
; 2131 :                     if (q != nullptr)

  003fe	48 83 bd 10 05
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00406	0f 84 2c 02 00
	00		 je	 $LN21@PMC_DivRem

; 2132 :                     {
; 2133 :                         ResourceHolderUINT root;

  0040c	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  00413	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00418	90		 npad	 1

; 2134 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00419	48 8b 45 28	 mov	 rax, QWORD PTR v_bit_count$8[rbp]
  0041d	48 8b 4d 08	 mov	 rcx, QWORD PTR u_bit_count$7[rbp]
  00421	48 2b c8	 sub	 rcx, rax
  00424	48 8b c1	 mov	 rax, rcx
  00427	48 83 c0 41	 add	 rax, 65			; 00000041H
  0042b	48 89 85 a8 01
	00 00		 mov	 QWORD PTR q_bit_count$17[rbp], rax

; 2135 :                         __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00432	48 8b 45 08	 mov	 rax, QWORD PTR u_bit_count$7[rbp]
  00436	48 83 c0 40	 add	 rax, 64			; 00000040H
  0043a	48 89 85 c8 01
	00 00		 mov	 QWORD PTR r_bit_count$18[rbp], rax

; 2136 :                         *q = root.AllocateNumber(q_bit_count);

  00441	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR q_bit_count$17[rbp]
  00448	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  0044f	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00454	48 8b 8d 10 05
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  0045b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2137 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  0045e	48 8b 95 c8 01
	00 00		 mov	 rdx, QWORD PTR r_bit_count$18[rbp]
  00465	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  0046c	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00471	48 89 85 e8 01
	00 00		 mov	 QWORD PTR r$19[rbp], rax

; 2138 :                          __UNIT_TYPE* work_v_buf = root.AllocateBlock(v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT);

  00478	48 8b 85 08 05
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  0047f	48 6b 40 18 40	 imul	 rax, QWORD PTR [rax+24], 64 ; 00000040H
  00484	48 8b d0	 mov	 rdx, rax
  00487	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  0048e	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00493	48 89 85 08 02
	00 00		 mov	 QWORD PTR work_v_buf$20[rbp], rax

; 2139 :                         (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, (*q)->BLOCK, r->BLOCK);

  0049a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K01000@ZEA
  004a1	48 89 85 d8 04
	00 00		 mov	 QWORD PTR tv222[rbp], rax
  004a8	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  004af	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004b2	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR r$19[rbp]
  004b9	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  004bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004c2	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  004c6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004cb	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR work_v_buf$20[rbp]
  004d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004d7	48 8b 85 08 05
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  004de	4c 8b 48 18	 mov	 r9, QWORD PTR [rax+24]
  004e2	48 8b 85 08 05
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  004e9	4c 8b 40 40	 mov	 r8, QWORD PTR [rax+64]
  004ed	48 8b 85 00 05
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  004f4	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  004f8	48 8b 85 00 05
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  004ff	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00503	ff 95 d8 04 00
	00		 call	 QWORD PTR tv222[rbp]

; 2140 :                         root.CheckBlock(work_v_buf);

  00509	48 8b 95 08 02
	00 00		 mov	 rdx, QWORD PTR work_v_buf$20[rbp]
  00510	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  00517	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 2141 :                         root.CheckNumber(*q);

  0051c	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00523	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00526	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  0052d	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2142 :                         root.CheckNumber(r);

  00532	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR r$19[rbp]
  00539	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  00540	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2143 :                         root.DeallocateBlock(work_v_buf);

  00545	48 8b 95 08 02
	00 00		 mov	 rdx, QWORD PTR work_v_buf$20[rbp]
  0054c	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  00553	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 2144 :                         CommitNumber(*q);

  00558	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0055f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00562	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 2145 :                         CommitNumber(r);

  00567	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR r$19[rbp]
  0056e	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 2146 :                         if ((*q)->IS_ZERO)

  00573	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0057a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0057d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00580	83 e0 01	 and	 eax, 1
  00583	85 c0		 test	 eax, eax
  00585	74 29		 je	 SHORT $LN23@PMC_DivRem

; 2147 :                         {
; 2148 :                             root.DeallocateNumber(*q);

  00587	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0058e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00591	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  00598	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2149 :                             *q = &number_zero;

  0059d	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  005a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  005ab	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2150 :                         }
; 2151 :                         else

  005ae	eb 16		 jmp	 SHORT $LN24@PMC_DivRem
$LN23@PMC_DivRem:

; 2152 :                             root.UnlinkNumber(*q);

  005b0	48 8b 85 10 05
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  005b7	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  005ba	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  005c1	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN24@PMC_DivRem:

; 2153 :                         if (r->IS_ZERO)

  005c6	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR r$19[rbp]
  005cd	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  005d0	83 e0 01	 and	 eax, 1
  005d3	85 c0		 test	 eax, eax
  005d5	74 23		 je	 SHORT $LN25@PMC_DivRem

; 2154 :                         {
; 2155 :                             root.DeallocateNumber(r);

  005d7	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR r$19[rbp]
  005de	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  005e5	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2156 :                             r = &number_zero;

  005ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  005f1	48 89 85 e8 01
	00 00		 mov	 QWORD PTR r$19[rbp], rax

; 2157 :                         }
; 2158 :                         else

  005f8	eb 13		 jmp	 SHORT $LN26@PMC_DivRem
$LN25@PMC_DivRem:

; 2159 :                             root.UnlinkNumber(r);

  005fa	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR r$19[rbp]
  00601	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  00608	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN26@PMC_DivRem:

; 2160 :                         return (r);

  0060d	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR r$19[rbp]
  00614	48 89 85 88 04
	00 00		 mov	 QWORD PTR $T27[rbp], rax
  0061b	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  00622	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00627	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR $T27[rbp]
  0062e	e9 6f 01 00 00	 jmp	 $LN1@PMC_DivRem

; 2161 :                     }
; 2162 :                     else

  00633	e9 6a 01 00 00	 jmp	 $LN1@PMC_DivRem
$LN21@PMC_DivRem:

; 2163 :                     {
; 2164 :                         ResourceHolderUINT root;

  00638	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  0063f	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00644	90		 npad	 1

; 2165 :                         __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00645	48 8b 45 08	 mov	 rax, QWORD PTR u_bit_count$7[rbp]
  00649	48 83 c0 40	 add	 rax, 64			; 00000040H
  0064d	48 89 85 68 02
	00 00		 mov	 QWORD PTR r_bit_count$22[rbp], rax

; 2166 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  00654	48 8b 95 68 02
	00 00		 mov	 rdx, QWORD PTR r_bit_count$22[rbp]
  0065b	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  00662	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00667	48 89 85 88 02
	00 00		 mov	 QWORD PTR r$23[rbp], rax

; 2167 :                         __UNIT_TYPE* work_v_buf = root.AllocateBlock(v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT);

  0066e	48 8b 85 08 05
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  00675	48 6b 40 18 40	 imul	 rax, QWORD PTR [rax+24], 64 ; 00000040H
  0067a	48 8b d0	 mov	 rdx, rax
  0067d	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  00684	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00689	48 89 85 a8 02
	00 00		 mov	 QWORD PTR work_v_buf$24[rbp], rax

; 2168 :                         (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, nullptr, r->BLOCK);

  00690	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K01000@ZEA
  00697	48 89 85 d8 04
	00 00		 mov	 QWORD PTR tv272[rbp], rax
  0069e	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR r$23[rbp]
  006a5	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  006a9	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  006ae	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  006b7	48 8b 85 a8 02
	00 00		 mov	 rax, QWORD PTR work_v_buf$24[rbp]
  006be	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006c3	48 8b 85 08 05
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  006ca	4c 8b 48 18	 mov	 r9, QWORD PTR [rax+24]
  006ce	48 8b 85 08 05
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  006d5	4c 8b 40 40	 mov	 r8, QWORD PTR [rax+64]
  006d9	48 8b 85 00 05
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  006e0	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  006e4	48 8b 85 00 05
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  006eb	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  006ef	ff 95 d8 04 00
	00		 call	 QWORD PTR tv272[rbp]

; 2169 :                         root.CheckBlock(work_v_buf);

  006f5	48 8b 95 a8 02
	00 00		 mov	 rdx, QWORD PTR work_v_buf$24[rbp]
  006fc	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  00703	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 2170 :                         root.CheckNumber(r);

  00708	48 8b 95 88 02
	00 00		 mov	 rdx, QWORD PTR r$23[rbp]
  0070f	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  00716	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2171 :                         root.DeallocateBlock(work_v_buf);

  0071b	48 8b 95 a8 02
	00 00		 mov	 rdx, QWORD PTR work_v_buf$24[rbp]
  00722	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  00729	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 2172 :                         CommitNumber(r);

  0072e	48 8b 8d 88 02
	00 00		 mov	 rcx, QWORD PTR r$23[rbp]
  00735	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 2173 :                         if (r->IS_ZERO)

  0073a	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR r$23[rbp]
  00741	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00744	83 e0 01	 and	 eax, 1
  00747	85 c0		 test	 eax, eax
  00749	74 23		 je	 SHORT $LN27@PMC_DivRem

; 2174 :                         {
; 2175 :                             root.DeallocateNumber(r);

  0074b	48 8b 95 88 02
	00 00		 mov	 rdx, QWORD PTR r$23[rbp]
  00752	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  00759	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2176 :                             r = &number_zero;

  0075e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00765	48 89 85 88 02
	00 00		 mov	 QWORD PTR r$23[rbp], rax

; 2177 :                         }
; 2178 :                         else

  0076c	eb 13		 jmp	 SHORT $LN28@PMC_DivRem
$LN27@PMC_DivRem:

; 2179 :                             root.UnlinkNumber(r);

  0076e	48 8b 95 88 02
	00 00		 mov	 rdx, QWORD PTR r$23[rbp]
  00775	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  0077c	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN28@PMC_DivRem:

; 2180 :                         return (r);

  00781	48 8b 85 88 02
	00 00		 mov	 rax, QWORD PTR r$23[rbp]
  00788	48 89 85 a8 04
	00 00		 mov	 QWORD PTR $T28[rbp], rax
  0078f	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  00796	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0079b	48 8b 85 a8 04
	00 00		 mov	 rax, QWORD PTR $T28[rbp]
$LN1@PMC_DivRem:

; 2181 :                     }
; 2182 :                 }
; 2183 :             }
; 2184 :         }
; 2185 :     }

  007a2	48 8b f8	 mov	 rdi, rax
  007a5	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  007a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z$rtcFrameData
  007b0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  007b5	48 8b c7	 mov	 rax, rdi
  007b8	48 8d a5 e8 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1256]
  007bf	5f		 pop	 rdi
  007c0	5d		 pop	 rbp
  007c1	c3		 ret	 0
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_bit_count$8 = 40
root$9 = 72
q_bit_count$10 = 136
r_bit_count$11 = 168
r$12 = 200
root$13 = 232
r_bit_count$14 = 296
r$15 = 328
root$16 = 360
q_bit_count$17 = 424
r_bit_count$18 = 456
r$19 = 488
work_v_buf$20 = 520
root$21 = 552
r_bit_count$22 = 616
r$23 = 648
work_v_buf$24 = 680
$T25 = 1096
$T26 = 1128
$T27 = 1160
$T28 = 1192
$T29 = 1224
tv272 = 1240
tv222 = 1240
tv178 = 1240
u$ = 1280
v$ = 1288
q$ = 1296
?dtor$0@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_bit_count$8 = 40
root$9 = 72
q_bit_count$10 = 136
r_bit_count$11 = 168
r$12 = 200
root$13 = 232
r_bit_count$14 = 296
r$15 = 328
root$16 = 360
q_bit_count$17 = 424
r_bit_count$18 = 456
r$19 = 488
work_v_buf$20 = 520
root$21 = 552
r_bit_count$22 = 616
r$23 = 648
work_v_buf$24 = 680
$T25 = 1096
$T26 = 1128
$T27 = 1160
$T28 = 1192
$T29 = 1224
tv272 = 1240
tv222 = 1240
tv178 = 1240
u$ = 1280
v$ = 1288
q$ = 1296
?dtor$1@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR root$13[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_bit_count$8 = 40
root$9 = 72
q_bit_count$10 = 136
r_bit_count$11 = 168
r$12 = 200
root$13 = 232
r_bit_count$14 = 296
r$15 = 328
root$16 = 360
q_bit_count$17 = 424
r_bit_count$18 = 456
r$19 = 488
work_v_buf$20 = 520
root$21 = 552
r_bit_count$22 = 616
r$23 = 648
work_v_buf$24 = 680
$T25 = 1096
$T26 = 1128
$T27 = 1160
$T28 = 1192
$T29 = 1224
tv272 = 1240
tv222 = 1240
tv178 = 1240
u$ = 1280
v$ = 1288
q$ = 1296
?dtor$2@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$2
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_bit_count$8 = 40
root$9 = 72
q_bit_count$10 = 136
r_bit_count$11 = 168
r$12 = 200
root$13 = 232
r_bit_count$14 = 296
r$15 = 328
root$16 = 360
q_bit_count$17 = 424
r_bit_count$18 = 456
r$19 = 488
work_v_buf$20 = 520
root$21 = 552
r_bit_count$22 = 616
r$23 = 648
work_v_buf$24 = 680
$T25 = 1096
$T26 = 1128
$T27 = 1160
$T28 = 1192
$T29 = 1224
tv272 = 1240
tv222 = 1240
tv178 = 1240
u$ = 1280
v$ = 1288
q$ = 1296
?dtor$3@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$3@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_bit_count$8 = 40
root$9 = 72
q_bit_count$10 = 136
r_bit_count$11 = 168
r$12 = 200
root$13 = 232
r_bit_count$14 = 296
r$15 = 328
root$16 = 360
q_bit_count$17 = 424
r_bit_count$18 = 456
r$19 = 488
work_v_buf$20 = 520
root$21 = 552
r_bit_count$22 = 616
r$23 = 648
work_v_buf$24 = 680
$T25 = 1096
$T26 = 1128
$T27 = 1160
$T28 = 1192
$T29 = 1224
tv272 = 1240
tv222 = 1240
tv178 = 1240
u$ = 1280
v$ = 1288
q$ = 1296
?dtor$0@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR root$9[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_bit_count$8 = 40
root$9 = 72
q_bit_count$10 = 136
r_bit_count$11 = 168
r$12 = 200
root$13 = 232
r_bit_count$14 = 296
r$15 = 328
root$16 = 360
q_bit_count$17 = 424
r_bit_count$18 = 456
r$19 = 488
work_v_buf$20 = 520
root$21 = 552
r_bit_count$22 = 616
r$23 = 648
work_v_buf$24 = 680
$T25 = 1096
$T26 = 1128
$T27 = 1160
$T28 = 1192
$T29 = 1224
tv272 = 1240
tv222 = 1240
tv178 = 1240
u$ = 1280
v$ = 1288
q$ = 1296
?dtor$1@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR root$13[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_bit_count$8 = 40
root$9 = 72
q_bit_count$10 = 136
r_bit_count$11 = 168
r$12 = 200
root$13 = 232
r_bit_count$14 = 296
r$15 = 328
root$16 = 360
q_bit_count$17 = 424
r_bit_count$18 = 456
r$19 = 488
work_v_buf$20 = 520
root$21 = 552
r_bit_count$22 = 616
r$23 = 648
work_v_buf$24 = 680
$T25 = 1096
$T26 = 1128
$T27 = 1160
$T28 = 1192
$T29 = 1224
tv272 = 1240
tv222 = 1240
tv178 = 1240
u$ = 1280
v$ = 1288
q$ = 1296
?dtor$2@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR root$16[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$7 = 8
v_bit_count$8 = 40
root$9 = 72
q_bit_count$10 = 136
r_bit_count$11 = 168
r$12 = 200
root$13 = 232
r_bit_count$14 = 296
r$15 = 328
root$16 = 360
q_bit_count$17 = 424
r_bit_count$18 = 456
r$19 = 488
work_v_buf$20 = 520
root$21 = 552
r_bit_count$22 = 616
r$23 = 648
work_v_buf$24 = 680
$T25 = 1096
$T26 = 1128
$T27 = 1160
$T28 = 1192
$T29 = 1224
tv272 = 1240
tv222 = 1240
tv178 = 1240
u$ = 1280
v$ = 1288
q$ = 1296
?dtor$3@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR root$21[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$3@?0??PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z
_TEXT	SEGMENT
u_bit_count$14 = 8
v_hi$15 = 36
v_lo$16 = 68
v_bit_count$17 = 104
root$18 = 136
q_bit_count$19 = 200
r_buf$20 = 232
r_buf$21 = 264
v_bit_count$22 = 296
r_lo$23 = 328
r_hi$24 = 360
root$25 = 392
q_bit_count$26 = 456
r_bit_count$27 = 488
v_buf$28 = 520
work_v_buf$29 = 568
r_buf$30 = 616
root$31 = 648
r_bit_count$32 = 712
v_buf$33 = 744
work_v_buf$34 = 792
r_buf$35 = 840
r$36 = 872
u_bit_count$37 = 904
v_bit_count$38 = 936
root$39 = 968
q_bit_count$40 = 1032
r_buf$41 = 1064
r_buf$42 = 1096
$T43 = 1704
$T44 = 1784
$T45 = 1816
$T46 = 1848
$T47 = 1880
$T48 = 1912
tv248 = 1928
tv209 = 1928
tv178 = 1928
u$ = 1968
v$ = 1976
q$ = 1984
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp, COMDAT

; 1818 :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec d8 07
	00 00		 sub	 rsp, 2008		; 000007d8H
  00018	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 f6 01 00 00	 mov	 ecx, 502		; 000001f6H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 f8
	07 00 00	 mov	 rcx, QWORD PTR [rsp+2040]
  00034	48 c7 85 78 07
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T48[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1819 :         if (v == 0)

  0004b	48 83 bd b8 07
	00 00 00	 cmp	 QWORD PTR v$[rbp], 0
  00053	75 26		 jne	 SHORT $LN2@PMC_DivRem

; 1820 :         {
; 1821 :             // v が 0 である場合
; 1822 : 
; 1823 :             // 0 による除算はエラーで返す
; 1824 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  0005c	48 8d 8d a8 06
	00 00		 lea	 rcx, QWORD PTR $T43[rbp]
  00063	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  0006f	48 8d 8d a8 06
	00 00		 lea	 rcx, QWORD PTR $T43[rbp]
  00076	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_DivRem:

; 1825 :         }
; 1826 :         if (u->IS_ZERO)

  0007b	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00082	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00085	83 e0 01	 and	 eax, 1
  00088	85 c0		 test	 eax, eax
  0008a	74 27		 je	 SHORT $LN3@PMC_DivRem

; 1827 :         {
; 1828 :             // x が 0 である場合
; 1829 : 
; 1830 :             // q = 0, r = 0 を返す
; 1831 :             if (q != nullptr)

  0008c	48 83 bd c0 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00094	74 11		 je	 SHORT $LN5@PMC_DivRem

; 1832 :                 *q = &number_zero;

  00096	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  000a4	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN5@PMC_DivRem:

; 1833 :             return (0);

  000a7	33 c0		 xor	 eax, eax
  000a9	e9 39 08 00 00	 jmp	 $LN36@PMC_DivRem

; 1834 :         }
; 1835 :         else

  000ae	e9 34 08 00 00	 jmp	 $LN36@PMC_DivRem
$LN3@PMC_DivRem:

; 1836 :         {
; 1837 :             // u が 0 ではない場合
; 1838 : 
; 1839 :             if (v == 1)

  000b3	48 83 bd b8 07
	00 00 01	 cmp	 QWORD PTR v$[rbp], 1
  000bb	75 2c		 jne	 SHORT $LN6@PMC_DivRem

; 1840 :             {
; 1841 :                 // v が 1 である場合
; 1842 : 
; 1843 :                 // q = u, r = 0 を返す
; 1844 :                 if (q != nullptr)

  000bd	48 83 bd c0 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  000c5	74 16		 je	 SHORT $LN8@PMC_DivRem

; 1845 :                     *q = DuplicateNumber(u);

  000c7	48 8b 8d b0 07
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  000ce	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  000d3	48 8b 8d c0 07
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  000da	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN8@PMC_DivRem:

; 1846 :                 return (0);

  000dd	33 c0		 xor	 eax, eax
  000df	e9 03 08 00 00	 jmp	 $LN36@PMC_DivRem

; 1847 :             }
; 1848 :             else

  000e4	e9 fe 07 00 00	 jmp	 $LN36@PMC_DivRem
$LN6@PMC_DivRem:

; 1849 :             {
; 1850 :                 // u > 0 かつ v > 1 である場合
; 1851 : 
; 1852 :                 // u と v の商・剰余を計算する
; 1853 :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000e9	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000f0	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000f4	48 89 45 08	 mov	 QWORD PTR u_bit_count$14[rbp], rax

; 1854 :                 if (sizeof(__UNIT_TYPE) < sizeof(v))

  000f8	33 c0		 xor	 eax, eax
  000fa	85 c0		 test	 eax, eax
  000fc	0f 84 fb 05 00
	00		 je	 $LN9@PMC_DivRem

; 1855 :                 {
; 1856 :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 1857 :                     _UINT32_T v_hi;
; 1858 :                     _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

  00102	48 8d 55 24	 lea	 rdx, QWORD PTR v_hi$15[rbp]
  00106	48 8b 8d b8 07
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  0010d	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  00112	89 45 44	 mov	 DWORD PTR v_lo$16[rbp], eax

; 1859 :                     if (v_hi == 0)

  00115	83 7d 24 00	 cmp	 DWORD PTR v_hi$15[rbp], 0
  00119	0f 85 d0 01 00
	00		 jne	 $LN11@PMC_DivRem

; 1860 :                     {
; 1861 :                         // v の値が 32bit で表現可能な場合
; 1862 :                         __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

  0011f	8b 4d 44	 mov	 ecx, DWORD PTR v_lo$16[rbp]
  00122	e8 00 00 00 00	 call	 _LZCNT_ALT_32
  00127	48 98		 cdqe
  00129	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0012e	48 2b c8	 sub	 rcx, rax
  00131	48 8b c1	 mov	 rax, rcx
  00134	48 89 45 68	 mov	 QWORD PTR v_bit_count$17[rbp], rax

; 1863 :                         if (u_bit_count < v_bit_count)

  00138	48 8b 45 68	 mov	 rax, QWORD PTR v_bit_count$17[rbp]
  0013c	48 39 45 08	 cmp	 QWORD PTR u_bit_count$14[rbp], rax
  00140	73 3d		 jae	 SHORT $LN13@PMC_DivRem

; 1864 :                         {
; 1865 :                             // 明らかに u < v である場合
; 1866 : 
; 1867 :                             // q = 0, r = u を返す。
; 1868 :                             if (q != nullptr)

  00142	48 83 bd c0 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  0014a	74 11		 je	 SHORT $LN15@PMC_DivRem

; 1869 :                                 *q = &number_zero;

  0014c	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0015a	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN15@PMC_DivRem:

; 1870 :                             return (u->BLOCK[0]);

  0015d	b8 08 00 00 00	 mov	 eax, 8
  00162	48 6b c0 00	 imul	 rax, rax, 0
  00166	48 8b 8d b0 07
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  0016d	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00171	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00175	e9 6d 07 00 00	 jmp	 $LN36@PMC_DivRem

; 1871 :                         }
; 1872 :                         else

  0017a	e9 6b 01 00 00	 jmp	 $LN14@PMC_DivRem
$LN13@PMC_DivRem:

; 1873 :                         {
; 1874 :                             if (q != nullptr)

  0017f	48 83 bd c0 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00187	0f 84 29 01 00
	00		 je	 $LN16@PMC_DivRem

; 1875 :                             {
; 1876 :                                 ResourceHolderUINT root;

  0018d	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  00194	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00199	90		 npad	 1

; 1877 :                                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  0019a	48 8b 45 68	 mov	 rax, QWORD PTR v_bit_count$17[rbp]
  0019e	48 8b 4d 08	 mov	 rcx, QWORD PTR u_bit_count$14[rbp]
  001a2	48 2b c8	 sub	 rcx, rax
  001a5	48 8b c1	 mov	 rax, rcx
  001a8	48 83 c0 41	 add	 rax, 65			; 00000041H
  001ac	48 89 85 c8 00
	00 00		 mov	 QWORD PTR q_bit_count$19[rbp], rax

; 1878 :                                 *q = root.AllocateNumber(q_bit_count);

  001b3	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR q_bit_count$19[rbp]
  001ba	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  001c1	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  001c6	48 8b 8d c0 07
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  001cd	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1879 :                                 __UNIT_TYPE r_buf = 0;

  001d0	48 c7 85 e8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR r_buf$20[rbp], 0

; 1880 :                                 DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, (*q)->BLOCK, &r_buf);

  001db	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001e2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e5	8b 4d 44	 mov	 ecx, DWORD PTR v_lo$16[rbp]
  001e8	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR r_buf$20[rbp]
  001ef	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  001f4	4c 8b 48 40	 mov	 r9, QWORD PTR [rax+64]
  001f8	44 8b c1	 mov	 r8d, ecx
  001fb	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00202	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00206	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0020d	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00211	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W

; 1881 :                                 root.CheckNumber(*q);

  00216	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0021d	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00220	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  00227	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1882 :                                 CommitNumber(*q);

  0022c	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00233	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00236	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1883 :                                 if ((*q)->IS_ZERO)

  0023b	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00242	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00245	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00248	83 e0 01	 and	 eax, 1
  0024b	85 c0		 test	 eax, eax
  0024d	74 29		 je	 SHORT $LN18@PMC_DivRem

; 1884 :                                 {
; 1885 :                                     root.DeallocateNumber(*q);

  0024f	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00256	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00259	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  00260	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1886 :                                     *q = &number_zero;

  00265	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0026c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00273	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1887 :                                 }
; 1888 :                                 else

  00276	eb 16		 jmp	 SHORT $LN19@PMC_DivRem
$LN18@PMC_DivRem:

; 1889 :                                     root.UnlinkNumber(*q);

  00278	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0027f	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00282	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  00289	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN19@PMC_DivRem:

; 1890 :                                 return (r_buf);

  0028e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR r_buf$20[rbp]
  00295	48 89 85 f8 06
	00 00		 mov	 QWORD PTR $T44[rbp], rax
  0029c	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  002a3	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  002a8	48 8b 85 f8 06
	00 00		 mov	 rax, QWORD PTR $T44[rbp]
  002af	e9 33 06 00 00	 jmp	 $LN36@PMC_DivRem

; 1891 :                             }
; 1892 :                             else

  002b4	eb 34		 jmp	 SHORT $LN14@PMC_DivRem
$LN16@PMC_DivRem:

; 1893 :                             {
; 1894 :                                 __UNIT_TYPE r_buf = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo);

  002b6	8b 45 44	 mov	 eax, DWORD PTR v_lo$16[rbp]
  002b9	44 8b c0	 mov	 r8d, eax
  002bc	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  002c3	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  002c7	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  002ce	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  002d2	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  002d7	48 89 85 08 01
	00 00		 mov	 QWORD PTR r_buf$21[rbp], rax

; 1895 :                                 return (r_buf);

  002de	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR r_buf$21[rbp]
  002e5	e9 fd 05 00 00	 jmp	 $LN36@PMC_DivRem
$LN14@PMC_DivRem:

; 1896 :                             }
; 1897 :                         }
; 1898 :                     }
; 1899 :                     else

  002ea	e9 09 04 00 00	 jmp	 $LN12@PMC_DivRem
$LN11@PMC_DivRem:

; 1900 :                     {
; 1901 :                         // v の値が 32bit では表現できない場合
; 1902 :                         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

  002ef	8b 4d 24	 mov	 ecx, DWORD PTR v_hi$15[rbp]
  002f2	e8 00 00 00 00	 call	 _LZCNT_ALT_32
  002f7	48 98		 cdqe
  002f9	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002fe	48 2b c8	 sub	 rcx, rax
  00301	48 8b c1	 mov	 rax, rcx
  00304	48 89 85 28 01
	00 00		 mov	 QWORD PTR v_bit_count$22[rbp], rax

; 1903 :                         if (u_bit_count < v_bit_count)

  0030b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR v_bit_count$22[rbp]
  00312	48 39 45 08	 cmp	 QWORD PTR u_bit_count$14[rbp], rax
  00316	0f 83 c3 00 00
	00		 jae	 $LN20@PMC_DivRem

; 1904 :                         {
; 1905 :                             // 明らかに u < v である場合
; 1906 : 
; 1907 :                             // q = 0, r = u を返す。
; 1908 :                             if (q != nullptr)

  0031c	48 83 bd c0 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00324	74 11		 je	 SHORT $LN22@PMC_DivRem

; 1909 :                                 *q = &number_zero;

  00326	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0032d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00334	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN22@PMC_DivRem:

; 1910 :                             if (sizeof(v) == sizeof(__UNIT_TYPE))

  00337	33 c0		 xor	 eax, eax
  00339	83 f8 01	 cmp	 eax, 1
  0033c	74 1f		 je	 SHORT $LN23@PMC_DivRem

; 1911 :                                 return (u->BLOCK[0]);

  0033e	b8 08 00 00 00	 mov	 eax, 8
  00343	48 6b c0 00	 imul	 rax, rax, 0
  00347	48 8b 8d b0 07
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  0034e	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00352	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00356	e9 8c 05 00 00	 jmp	 $LN36@PMC_DivRem

; 1912 :                             else

  0035b	eb 7d		 jmp	 SHORT $LN24@PMC_DivRem
$LN23@PMC_DivRem:

; 1913 :                             {
; 1914 :                                 __UNIT_TYPE r_lo = u->BLOCK[0];

  0035d	b8 08 00 00 00	 mov	 eax, 8
  00362	48 6b c0 00	 imul	 rax, rax, 0
  00366	48 8b 8d b0 07
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  0036d	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00371	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00375	48 89 85 48 01
	00 00		 mov	 QWORD PTR r_lo$23[rbp], rax

; 1915 :                                 __UNIT_TYPE r_hi = u->UNIT_WORD_COUNT > 1 ? u->BLOCK[1] : 0;

  0037c	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00383	48 83 78 18 01	 cmp	 QWORD PTR [rax+24], 1
  00388	76 21		 jbe	 SHORT $LN37@PMC_DivRem
  0038a	b8 08 00 00 00	 mov	 eax, 8
  0038f	48 6b c0 01	 imul	 rax, rax, 1
  00393	48 8b 8d b0 07
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  0039a	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0039e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  003a2	48 89 85 88 07
	00 00		 mov	 QWORD PTR tv178[rbp], rax
  003a9	eb 0b		 jmp	 SHORT $LN38@PMC_DivRem
$LN37@PMC_DivRem:
  003ab	48 c7 85 88 07
	00 00 00 00 00
	00		 mov	 QWORD PTR tv178[rbp], 0
$LN38@PMC_DivRem:
  003b6	48 8b 85 88 07
	00 00		 mov	 rax, QWORD PTR tv178[rbp]
  003bd	48 89 85 68 01
	00 00		 mov	 QWORD PTR r_hi$24[rbp], rax

; 1916 :                                 return (_FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo));

  003c4	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR r_lo$23[rbp]
  003ca	8b 8d 68 01 00
	00		 mov	 ecx, DWORD PTR r_hi$24[rbp]
  003d0	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  003d5	e9 0d 05 00 00	 jmp	 $LN36@PMC_DivRem
$LN24@PMC_DivRem:

; 1917 :                             }
; 1918 :                         }
; 1919 :                         else

  003da	e9 19 03 00 00	 jmp	 $LN12@PMC_DivRem
$LN20@PMC_DivRem:

; 1920 :                         {
; 1921 :                             if (q != nullptr)

  003df	48 83 bd c0 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  003e7	0f 84 d5 01 00
	00		 je	 $LN25@PMC_DivRem

; 1922 :                             {
; 1923 :                                 ResourceHolderUINT root;

  003ed	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR root$25[rbp]
  003f4	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  003f9	90		 npad	 1

; 1924 :                                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  003fa	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR v_bit_count$22[rbp]
  00401	48 8b 4d 08	 mov	 rcx, QWORD PTR u_bit_count$14[rbp]
  00405	48 2b c8	 sub	 rcx, rax
  00408	48 8b c1	 mov	 rax, rcx
  0040b	48 83 c0 41	 add	 rax, 65			; 00000041H
  0040f	48 89 85 c8 01
	00 00		 mov	 QWORD PTR q_bit_count$26[rbp], rax

; 1925 :                                 __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00416	48 8b 45 08	 mov	 rax, QWORD PTR u_bit_count$14[rbp]
  0041a	48 83 c0 40	 add	 rax, 64			; 00000040H
  0041e	48 89 85 e8 01
	00 00		 mov	 QWORD PTR r_bit_count$27[rbp], rax

; 1926 :                                 *q = root.AllocateNumber(q_bit_count);

  00425	48 8b 95 c8 01
	00 00		 mov	 rdx, QWORD PTR q_bit_count$26[rbp]
  0042c	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR root$25[rbp]
  00433	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00438	48 8b 8d c0 07
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  0043f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1927 :                                 __UNIT_TYPE v_buf[] = { v_lo, v_hi };

  00442	8b 45 44	 mov	 eax, DWORD PTR v_lo$16[rbp]
  00445	48 89 85 08 02
	00 00		 mov	 QWORD PTR v_buf$28[rbp], rax
  0044c	8b 45 24	 mov	 eax, DWORD PTR v_hi$15[rbp]
  0044f	48 89 85 10 02
	00 00		 mov	 QWORD PTR v_buf$28[rbp+8], rax

; 1928 :                                 __UNIT_TYPE work_v_buf[] = { 0, 0 };

  00456	48 c7 85 38 02
	00 00 00 00 00
	00		 mov	 QWORD PTR work_v_buf$29[rbp], 0
  00461	48 c7 85 40 02
	00 00 00 00 00
	00		 mov	 QWORD PTR work_v_buf$29[rbp+8], 0

; 1929 :                                 __UNIT_TYPE* r_buf = root.AllocateBlock(r_bit_count);

  0046c	48 8b 95 e8 01
	00 00		 mov	 rdx, QWORD PTR r_bit_count$27[rbp]
  00473	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR root$25[rbp]
  0047a	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0047f	48 89 85 68 02
	00 00		 mov	 QWORD PTR r_buf$30[rbp], rax

; 1930 :                                 (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, (*q)->BLOCK, r_buf);

  00486	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K01000@ZEA
  0048d	48 89 85 88 07
	00 00		 mov	 QWORD PTR tv209[rbp], rax
  00494	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0049b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0049e	48 8b 8d 68 02
	00 00		 mov	 rcx, QWORD PTR r_buf$30[rbp]
  004a5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004aa	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  004ae	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004b3	48 8d 85 38 02
	00 00		 lea	 rax, QWORD PTR work_v_buf$29[rbp]
  004ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004bf	41 b9 02 00 00
	00		 mov	 r9d, 2
  004c5	4c 8d 85 08 02
	00 00		 lea	 r8, QWORD PTR v_buf$28[rbp]
  004cc	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  004d3	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  004d7	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  004de	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  004e2	ff 95 88 07 00
	00		 call	 QWORD PTR tv209[rbp]

; 1931 :                                 root.CheckNumber(*q);

  004e8	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  004ef	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  004f2	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR root$25[rbp]
  004f9	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1932 :                                 root.CheckBlock(r_buf);

  004fe	48 8b 95 68 02
	00 00		 mov	 rdx, QWORD PTR r_buf$30[rbp]
  00505	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR root$25[rbp]
  0050c	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 1933 :                                 CommitNumber(*q);

  00511	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00518	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0051b	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1934 :                                 if ((*q)->IS_ZERO)

  00520	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00527	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0052a	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0052d	83 e0 01	 and	 eax, 1
  00530	85 c0		 test	 eax, eax
  00532	74 29		 je	 SHORT $LN27@PMC_DivRem

; 1935 :                                 {
; 1936 :                                     root.DeallocateNumber(*q);

  00534	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0053b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0053e	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR root$25[rbp]
  00545	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1937 :                                     *q = &number_zero;

  0054a	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00551	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00558	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1938 :                                 }
; 1939 :                                 else

  0055b	eb 16		 jmp	 SHORT $LN28@PMC_DivRem
$LN27@PMC_DivRem:

; 1940 :                                     root.UnlinkNumber(*q);

  0055d	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00564	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00567	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR root$25[rbp]
  0056e	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN28@PMC_DivRem:

; 1941 :                                 return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));

  00573	b8 08 00 00 00	 mov	 eax, 8
  00578	48 6b c0 00	 imul	 rax, rax, 0
  0057c	b9 08 00 00 00	 mov	 ecx, 8
  00581	48 6b c9 01	 imul	 rcx, rcx, 1
  00585	48 8b 95 68 02
	00 00		 mov	 rdx, QWORD PTR r_buf$30[rbp]
  0058c	8b 14 02	 mov	 edx, DWORD PTR [rdx+rax]
  0058f	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR r_buf$30[rbp]
  00596	8b 0c 08	 mov	 ecx, DWORD PTR [rax+rcx]
  00599	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  0059e	48 89 85 18 07
	00 00		 mov	 QWORD PTR $T45[rbp], rax
  005a5	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR root$25[rbp]
  005ac	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  005b1	48 8b 85 18 07
	00 00		 mov	 rax, QWORD PTR $T45[rbp]
  005b8	e9 2a 03 00 00	 jmp	 $LN36@PMC_DivRem

; 1942 :                             }
; 1943 :                             else

  005bd	e9 36 01 00 00	 jmp	 $LN12@PMC_DivRem
$LN25@PMC_DivRem:

; 1944 :                             {
; 1945 :                                 ResourceHolderUINT root;

  005c2	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR root$31[rbp]
  005c9	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  005ce	90		 npad	 1

; 1946 :                                 __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  005cf	48 8b 45 08	 mov	 rax, QWORD PTR u_bit_count$14[rbp]
  005d3	48 83 c0 40	 add	 rax, 64			; 00000040H
  005d7	48 89 85 c8 02
	00 00		 mov	 QWORD PTR r_bit_count$32[rbp], rax

; 1947 :                                 __UNIT_TYPE v_buf[] = { v_lo, v_hi };

  005de	8b 45 44	 mov	 eax, DWORD PTR v_lo$16[rbp]
  005e1	48 89 85 e8 02
	00 00		 mov	 QWORD PTR v_buf$33[rbp], rax
  005e8	8b 45 24	 mov	 eax, DWORD PTR v_hi$15[rbp]
  005eb	48 89 85 f0 02
	00 00		 mov	 QWORD PTR v_buf$33[rbp+8], rax

; 1948 :                                 __UNIT_TYPE work_v_buf[] = { 0, 0 };

  005f2	48 c7 85 18 03
	00 00 00 00 00
	00		 mov	 QWORD PTR work_v_buf$34[rbp], 0
  005fd	48 c7 85 20 03
	00 00 00 00 00
	00		 mov	 QWORD PTR work_v_buf$34[rbp+8], 0

; 1949 :                                 __UNIT_TYPE* r_buf = root.AllocateBlock(r_bit_count);

  00608	48 8b 95 c8 02
	00 00		 mov	 rdx, QWORD PTR r_bit_count$32[rbp]
  0060f	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR root$31[rbp]
  00616	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0061b	48 89 85 48 03
	00 00		 mov	 QWORD PTR r_buf$35[rbp], rax

; 1950 :                                 (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, nullptr, r_buf);

  00622	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K01000@ZEA
  00629	48 89 85 88 07
	00 00		 mov	 QWORD PTR tv248[rbp], rax
  00630	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR r_buf$35[rbp]
  00637	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0063c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00645	48 8d 85 18 03
	00 00		 lea	 rax, QWORD PTR work_v_buf$34[rbp]
  0064c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00651	41 b9 02 00 00
	00		 mov	 r9d, 2
  00657	4c 8d 85 e8 02
	00 00		 lea	 r8, QWORD PTR v_buf$33[rbp]
  0065e	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00665	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00669	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00670	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00674	ff 95 88 07 00
	00		 call	 QWORD PTR tv248[rbp]

; 1951 :                                 root.CheckBlock(r_buf);

  0067a	48 8b 95 48 03
	00 00		 mov	 rdx, QWORD PTR r_buf$35[rbp]
  00681	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR root$31[rbp]
  00688	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 1952 :                                 _UINT64_T r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

  0068d	b8 08 00 00 00	 mov	 eax, 8
  00692	48 6b c0 00	 imul	 rax, rax, 0
  00696	b9 08 00 00 00	 mov	 ecx, 8
  0069b	48 6b c9 01	 imul	 rcx, rcx, 1
  0069f	48 8b 95 48 03
	00 00		 mov	 rdx, QWORD PTR r_buf$35[rbp]
  006a6	8b 14 02	 mov	 edx, DWORD PTR [rdx+rax]
  006a9	48 8b 85 48 03
	00 00		 mov	 rax, QWORD PTR r_buf$35[rbp]
  006b0	8b 0c 08	 mov	 ecx, DWORD PTR [rax+rcx]
  006b3	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  006b8	48 89 85 68 03
	00 00		 mov	 QWORD PTR r$36[rbp], rax

; 1953 :                                 root.DeallocateBlock(r_buf);

  006bf	48 8b 95 48 03
	00 00		 mov	 rdx, QWORD PTR r_buf$35[rbp]
  006c6	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR root$31[rbp]
  006cd	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 1954 :                                 return (r);

  006d2	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR r$36[rbp]
  006d9	48 89 85 38 07
	00 00		 mov	 QWORD PTR $T46[rbp], rax
  006e0	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR root$31[rbp]
  006e7	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  006ec	48 8b 85 38 07
	00 00		 mov	 rax, QWORD PTR $T46[rbp]
  006f3	e9 ef 01 00 00	 jmp	 $LN36@PMC_DivRem
$LN12@PMC_DivRem:

; 1955 :                             }
; 1956 :                         }
; 1957 :                     }
; 1958 :                 }
; 1959 :                 else

  006f8	e9 ea 01 00 00	 jmp	 $LN36@PMC_DivRem
$LN9@PMC_DivRem:

; 1960 :                 {
; 1961 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1962 : 
; 1963 :                     // x と y の商・剰余を計算する
; 1964 :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  006fd	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00704	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00708	48 89 85 88 03
	00 00		 mov	 QWORD PTR u_bit_count$37[rbp], rax

; 1965 :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

  0070f	48 8b 8d b8 07
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  00716	e8 00 00 00 00	 call	 _LZCNT_ALT_UNIT
  0071b	48 98		 cdqe
  0071d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00722	48 2b c8	 sub	 rcx, rax
  00725	48 8b c1	 mov	 rax, rcx
  00728	48 89 85 a8 03
	00 00		 mov	 QWORD PTR v_bit_count$38[rbp], rax

; 1966 :                     if (u_bit_count < v_bit_count)

  0072f	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR v_bit_count$38[rbp]
  00736	48 39 85 88 03
	00 00		 cmp	 QWORD PTR u_bit_count$37[rbp], rax
  0073d	73 3d		 jae	 SHORT $LN29@PMC_DivRem

; 1967 :                     {
; 1968 :                         // 明らかに u < v である場合
; 1969 : 
; 1970 :                         // q = 0, r = u を返す。
; 1971 :                         if (q != nullptr)

  0073f	48 83 bd c0 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00747	74 11		 je	 SHORT $LN31@PMC_DivRem

; 1972 :                             *q = &number_zero;

  00749	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00750	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00757	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN31@PMC_DivRem:

; 1973 :                         return (u->BLOCK[0]);

  0075a	b8 08 00 00 00	 mov	 eax, 8
  0075f	48 6b c0 00	 imul	 rax, rax, 0
  00763	48 8b 8d b0 07
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  0076a	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0076e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00772	e9 70 01 00 00	 jmp	 $LN36@PMC_DivRem

; 1974 :                     }
; 1975 :                     else

  00777	e9 6b 01 00 00	 jmp	 $LN36@PMC_DivRem
$LN29@PMC_DivRem:

; 1976 :                     {
; 1977 :                         if (q != nullptr)

  0077c	48 83 bd c0 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00784	0f 84 2d 01 00
	00		 je	 $LN32@PMC_DivRem

; 1978 :                         {
; 1979 :                             ResourceHolderUINT root;

  0078a	48 8d 8d c8 03
	00 00		 lea	 rcx, QWORD PTR root$39[rbp]
  00791	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00796	90		 npad	 1

; 1980 :                             __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00797	48 8b 85 a8 03
	00 00		 mov	 rax, QWORD PTR v_bit_count$38[rbp]
  0079e	48 8b 8d 88 03
	00 00		 mov	 rcx, QWORD PTR u_bit_count$37[rbp]
  007a5	48 2b c8	 sub	 rcx, rax
  007a8	48 8b c1	 mov	 rax, rcx
  007ab	48 83 c0 41	 add	 rax, 65			; 00000041H
  007af	48 89 85 08 04
	00 00		 mov	 QWORD PTR q_bit_count$40[rbp], rax

; 1981 :                             *q = root.AllocateNumber(q_bit_count);

  007b6	48 8b 95 08 04
	00 00		 mov	 rdx, QWORD PTR q_bit_count$40[rbp]
  007bd	48 8d 8d c8 03
	00 00		 lea	 rcx, QWORD PTR root$39[rbp]
  007c4	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  007c9	48 8b 8d c0 07
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  007d0	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1982 :                             __UNIT_TYPE r_buf = 0;

  007d3	48 c7 85 28 04
	00 00 00 00 00
	00		 mov	 QWORD PTR r_buf$41[rbp], 0

; 1983 :                             DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*q)->BLOCK, &r_buf);

  007de	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  007e5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007e8	48 8d 8d 28 04
	00 00		 lea	 rcx, QWORD PTR r_buf$41[rbp]
  007ef	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  007f4	4c 8b 48 40	 mov	 r9, QWORD PTR [rax+64]
  007f8	4c 8b 85 b8 07
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  007ff	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00806	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  0080a	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00811	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00815	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W

; 1984 :                             root.CheckNumber(*q);

  0081a	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00821	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00824	48 8d 8d c8 03
	00 00		 lea	 rcx, QWORD PTR root$39[rbp]
  0082b	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1985 :                             CommitNumber(*q);

  00830	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00837	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0083a	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1986 :                             if ((*q)->IS_ZERO)

  0083f	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00846	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00849	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0084c	83 e0 01	 and	 eax, 1
  0084f	85 c0		 test	 eax, eax
  00851	74 29		 je	 SHORT $LN34@PMC_DivRem

; 1987 :                             {
; 1988 :                                 root.DeallocateNumber(*q);

  00853	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0085a	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0085d	48 8d 8d c8 03
	00 00		 lea	 rcx, QWORD PTR root$39[rbp]
  00864	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1989 :                                 *q = &number_zero;

  00869	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00870	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00877	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1990 :                             }
; 1991 :                             else

  0087a	eb 16		 jmp	 SHORT $LN35@PMC_DivRem
$LN34@PMC_DivRem:

; 1992 :                                 root.UnlinkNumber(*q);

  0087c	48 8b 85 c0 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00883	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00886	48 8d 8d c8 03
	00 00		 lea	 rcx, QWORD PTR root$39[rbp]
  0088d	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN35@PMC_DivRem:

; 1993 :                             return (r_buf);

  00892	48 8b 85 28 04
	00 00		 mov	 rax, QWORD PTR r_buf$41[rbp]
  00899	48 89 85 58 07
	00 00		 mov	 QWORD PTR $T47[rbp], rax
  008a0	48 8d 8d c8 03
	00 00		 lea	 rcx, QWORD PTR root$39[rbp]
  008a7	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  008ac	48 8b 85 58 07
	00 00		 mov	 rax, QWORD PTR $T47[rbp]
  008b3	eb 32		 jmp	 SHORT $LN36@PMC_DivRem

; 1994 :                         }
; 1995 :                         else

  008b5	eb 30		 jmp	 SHORT $LN36@PMC_DivRem
$LN32@PMC_DivRem:

; 1996 :                         {
; 1997 :                             __UNIT_TYPE r_buf = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v);

  008b7	4c 8b 85 b8 07
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  008be	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  008c5	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  008c9	48 8b 85 b0 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  008d0	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  008d4	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  008d9	48 89 85 48 04
	00 00		 mov	 QWORD PTR r_buf$42[rbp], rax

; 1998 :                             return (r_buf);

  008e0	48 8b 85 48 04
	00 00		 mov	 rax, QWORD PTR r_buf$42[rbp]
$LN36@PMC_DivRem:

; 1999 :                         }
; 2000 :                     }
; 2001 :                 }
; 2002 : 
; 2003 :             }
; 2004 :         }
; 2005 :     }

  008e7	48 8b f8	 mov	 rdi, rax
  008ea	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  008ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z$rtcFrameData
  008f5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  008fa	48 8b c7	 mov	 rax, rdi
  008fd	48 8d a5 98 07
	00 00		 lea	 rsp, QWORD PTR [rbp+1944]
  00904	5f		 pop	 rdi
  00905	5d		 pop	 rbp
  00906	c3		 ret	 0
$LN43@PMC_DivRem:
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$14 = 8
v_hi$15 = 36
v_lo$16 = 68
v_bit_count$17 = 104
root$18 = 136
q_bit_count$19 = 200
r_buf$20 = 232
r_buf$21 = 264
v_bit_count$22 = 296
r_lo$23 = 328
r_hi$24 = 360
root$25 = 392
q_bit_count$26 = 456
r_bit_count$27 = 488
v_buf$28 = 520
work_v_buf$29 = 568
r_buf$30 = 616
root$31 = 648
r_bit_count$32 = 712
v_buf$33 = 744
work_v_buf$34 = 792
r_buf$35 = 840
r$36 = 872
u_bit_count$37 = 904
v_bit_count$38 = 936
root$39 = 968
q_bit_count$40 = 1032
r_buf$41 = 1064
r_buf$42 = 1096
$T43 = 1704
$T44 = 1784
$T45 = 1816
$T46 = 1848
$T47 = 1880
$T48 = 1912
tv248 = 1928
tv209 = 1928
tv178 = 1928
u$ = 1968
v$ = 1976
q$ = 1984
?dtor$0@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$14 = 8
v_hi$15 = 36
v_lo$16 = 68
v_bit_count$17 = 104
root$18 = 136
q_bit_count$19 = 200
r_buf$20 = 232
r_buf$21 = 264
v_bit_count$22 = 296
r_lo$23 = 328
r_hi$24 = 360
root$25 = 392
q_bit_count$26 = 456
r_bit_count$27 = 488
v_buf$28 = 520
work_v_buf$29 = 568
r_buf$30 = 616
root$31 = 648
r_bit_count$32 = 712
v_buf$33 = 744
work_v_buf$34 = 792
r_buf$35 = 840
r$36 = 872
u_bit_count$37 = 904
v_bit_count$38 = 936
root$39 = 968
q_bit_count$40 = 1032
r_buf$41 = 1064
r_buf$42 = 1096
$T43 = 1704
$T44 = 1784
$T45 = 1816
$T46 = 1848
$T47 = 1880
$T48 = 1912
tv248 = 1928
tv209 = 1928
tv178 = 1928
u$ = 1968
v$ = 1976
q$ = 1984
?dtor$1@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR root$25[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$14 = 8
v_hi$15 = 36
v_lo$16 = 68
v_bit_count$17 = 104
root$18 = 136
q_bit_count$19 = 200
r_buf$20 = 232
r_buf$21 = 264
v_bit_count$22 = 296
r_lo$23 = 328
r_hi$24 = 360
root$25 = 392
q_bit_count$26 = 456
r_bit_count$27 = 488
v_buf$28 = 520
work_v_buf$29 = 568
r_buf$30 = 616
root$31 = 648
r_bit_count$32 = 712
v_buf$33 = 744
work_v_buf$34 = 792
r_buf$35 = 840
r$36 = 872
u_bit_count$37 = 904
v_bit_count$38 = 936
root$39 = 968
q_bit_count$40 = 1032
r_buf$41 = 1064
r_buf$42 = 1096
$T43 = 1704
$T44 = 1784
$T45 = 1816
$T46 = 1848
$T47 = 1880
$T48 = 1912
tv248 = 1928
tv209 = 1928
tv178 = 1928
u$ = 1968
v$ = 1976
q$ = 1984
?dtor$2@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR root$31[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$2
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$14 = 8
v_hi$15 = 36
v_lo$16 = 68
v_bit_count$17 = 104
root$18 = 136
q_bit_count$19 = 200
r_buf$20 = 232
r_buf$21 = 264
v_bit_count$22 = 296
r_lo$23 = 328
r_hi$24 = 360
root$25 = 392
q_bit_count$26 = 456
r_bit_count$27 = 488
v_buf$28 = 520
work_v_buf$29 = 568
r_buf$30 = 616
root$31 = 648
r_bit_count$32 = 712
v_buf$33 = 744
work_v_buf$34 = 792
r_buf$35 = 840
r$36 = 872
u_bit_count$37 = 904
v_bit_count$38 = 936
root$39 = 968
q_bit_count$40 = 1032
r_buf$41 = 1064
r_buf$42 = 1096
$T43 = 1704
$T44 = 1784
$T45 = 1816
$T46 = 1848
$T47 = 1880
$T48 = 1912
tv248 = 1928
tv209 = 1928
tv178 = 1928
u$ = 1968
v$ = 1976
q$ = 1984
?dtor$3@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d c8 03
	00 00		 lea	 rcx, QWORD PTR root$39[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$3@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$14 = 8
v_hi$15 = 36
v_lo$16 = 68
v_bit_count$17 = 104
root$18 = 136
q_bit_count$19 = 200
r_buf$20 = 232
r_buf$21 = 264
v_bit_count$22 = 296
r_lo$23 = 328
r_hi$24 = 360
root$25 = 392
q_bit_count$26 = 456
r_bit_count$27 = 488
v_buf$28 = 520
work_v_buf$29 = 568
r_buf$30 = 616
root$31 = 648
r_bit_count$32 = 712
v_buf$33 = 744
work_v_buf$34 = 792
r_buf$35 = 840
r$36 = 872
u_bit_count$37 = 904
v_bit_count$38 = 936
root$39 = 968
q_bit_count$40 = 1032
r_buf$41 = 1064
r_buf$42 = 1096
$T43 = 1704
$T44 = 1784
$T45 = 1816
$T46 = 1848
$T47 = 1880
$T48 = 1912
tv248 = 1928
tv209 = 1928
tv178 = 1928
u$ = 1968
v$ = 1976
q$ = 1984
?dtor$0@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR root$18[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$14 = 8
v_hi$15 = 36
v_lo$16 = 68
v_bit_count$17 = 104
root$18 = 136
q_bit_count$19 = 200
r_buf$20 = 232
r_buf$21 = 264
v_bit_count$22 = 296
r_lo$23 = 328
r_hi$24 = 360
root$25 = 392
q_bit_count$26 = 456
r_bit_count$27 = 488
v_buf$28 = 520
work_v_buf$29 = 568
r_buf$30 = 616
root$31 = 648
r_bit_count$32 = 712
v_buf$33 = 744
work_v_buf$34 = 792
r_buf$35 = 840
r$36 = 872
u_bit_count$37 = 904
v_bit_count$38 = 936
root$39 = 968
q_bit_count$40 = 1032
r_buf$41 = 1064
r_buf$42 = 1096
$T43 = 1704
$T44 = 1784
$T45 = 1816
$T46 = 1848
$T47 = 1880
$T48 = 1912
tv248 = 1928
tv209 = 1928
tv178 = 1928
u$ = 1968
v$ = 1976
q$ = 1984
?dtor$1@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR root$25[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$14 = 8
v_hi$15 = 36
v_lo$16 = 68
v_bit_count$17 = 104
root$18 = 136
q_bit_count$19 = 200
r_buf$20 = 232
r_buf$21 = 264
v_bit_count$22 = 296
r_lo$23 = 328
r_hi$24 = 360
root$25 = 392
q_bit_count$26 = 456
r_bit_count$27 = 488
v_buf$28 = 520
work_v_buf$29 = 568
r_buf$30 = 616
root$31 = 648
r_bit_count$32 = 712
v_buf$33 = 744
work_v_buf$34 = 792
r_buf$35 = 840
r$36 = 872
u_bit_count$37 = 904
v_bit_count$38 = 936
root$39 = 968
q_bit_count$40 = 1032
r_buf$41 = 1064
r_buf$42 = 1096
$T43 = 1704
$T44 = 1784
$T45 = 1816
$T46 = 1848
$T47 = 1880
$T48 = 1912
tv248 = 1928
tv209 = 1928
tv178 = 1928
u$ = 1968
v$ = 1976
q$ = 1984
?dtor$2@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d 88 02
	00 00		 lea	 rcx, QWORD PTR root$31[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$14 = 8
v_hi$15 = 36
v_lo$16 = 68
v_bit_count$17 = 104
root$18 = 136
q_bit_count$19 = 200
r_buf$20 = 232
r_buf$21 = 264
v_bit_count$22 = 296
r_lo$23 = 328
r_hi$24 = 360
root$25 = 392
q_bit_count$26 = 456
r_bit_count$27 = 488
v_buf$28 = 520
work_v_buf$29 = 568
r_buf$30 = 616
root$31 = 648
r_bit_count$32 = 712
v_buf$33 = 744
work_v_buf$34 = 792
r_buf$35 = 840
r$36 = 872
u_bit_count$37 = 904
v_bit_count$38 = 936
root$39 = 968
q_bit_count$40 = 1032
r_buf$41 = 1064
r_buf$42 = 1096
$T43 = 1704
$T44 = 1784
$T45 = 1816
$T46 = 1848
$T47 = 1880
$T48 = 1912
tv248 = 1928
tv209 = 1928
tv178 = 1928
u$ = 1968
v$ = 1976
q$ = 1984
?dtor$3@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  00014	48 8d 8d c8 03
	00 00		 lea	 rcx, QWORD PTR root$39[rbp]
  0001b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$3@?0??PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z
_TEXT	SEGMENT
u_bit_count$5 = 8
v_bit_count$6 = 40
root$7 = 72
q_bit_count$8 = 136
r_buf$9 = 168
r_buf$10 = 200
$T11 = 424
$T12 = 500
$T13 = 536
u$ = 592
v$ = 600
q$ = 608
?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp, COMDAT

; 1521 :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  00017	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 9a 00 00 00	 mov	 ecx, 154		; 0000009aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR [rsp+648]
  00033	48 c7 85 18 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T13[rbp], -2
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00045	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1522 :         if (v == 0)

  0004a	83 bd 58 02 00
	00 00		 cmp	 DWORD PTR v$[rbp], 0
  00051	75 26		 jne	 SHORT $LN2@PMC_DivRem

; 1523 :         {
; 1524 :             // v が 0 である場合
; 1525 : 
; 1526 :             // 0 による除算はエラーで返す
; 1527 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  0005a	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00061	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  0006d	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00074	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_DivRem:

; 1528 :         }
; 1529 :         if (u->IS_ZERO)

  00079	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00080	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00083	83 e0 01	 and	 eax, 1
  00086	85 c0		 test	 eax, eax
  00088	74 27		 je	 SHORT $LN3@PMC_DivRem

; 1530 :         {
; 1531 :             // u が 0 である場合
; 1532 : 
; 1533 :             // q = 0, r = 0 を返す
; 1534 : 
; 1535 :             if (q != nullptr)

  0008a	48 83 bd 60 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00092	74 11		 je	 SHORT $LN5@PMC_DivRem

; 1536 :                 *q = &number_zero;

  00094	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  000a2	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN5@PMC_DivRem:

; 1537 :             return (0);

  000a5	33 c0		 xor	 eax, eax
  000a7	e9 fe 01 00 00	 jmp	 $LN16@PMC_DivRem

; 1538 :         }
; 1539 :         else

  000ac	e9 f9 01 00 00	 jmp	 $LN16@PMC_DivRem
$LN3@PMC_DivRem:

; 1540 :         {
; 1541 :             // u が 0 ではない場合
; 1542 : 
; 1543 :             if (v == 1)

  000b1	83 bd 58 02 00
	00 01		 cmp	 DWORD PTR v$[rbp], 1
  000b8	75 2c		 jne	 SHORT $LN6@PMC_DivRem

; 1544 :             {
; 1545 :                 // v が 1 である場合
; 1546 : 
; 1547 :                 // q = u, r = 0 を返す
; 1548 :                 if (q != nullptr)

  000ba	48 83 bd 60 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  000c2	74 16		 je	 SHORT $LN8@PMC_DivRem

; 1549 :                     *q = DuplicateNumber(u);

  000c4	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  000cb	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  000d0	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  000d7	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN8@PMC_DivRem:

; 1550 :                 return (0);

  000da	33 c0		 xor	 eax, eax
  000dc	e9 c9 01 00 00	 jmp	 $LN16@PMC_DivRem

; 1551 :             }
; 1552 :             else

  000e1	e9 c4 01 00 00	 jmp	 $LN16@PMC_DivRem
$LN6@PMC_DivRem:

; 1553 :             {
; 1554 :                 // u と v がともに 0 ではない場合
; 1555 : 
; 1556 :                 // x と y の商・剰余を計算する
; 1557 :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000e6	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000ed	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000f1	48 89 45 08	 mov	 QWORD PTR u_bit_count$5[rbp], rax

; 1558 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

  000f5	8b 8d 58 02 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  000fb	e8 00 00 00 00	 call	 _LZCNT_ALT_32
  00100	48 98		 cdqe
  00102	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00107	48 2b c8	 sub	 rcx, rax
  0010a	48 8b c1	 mov	 rax, rcx
  0010d	48 89 45 28	 mov	 QWORD PTR v_bit_count$6[rbp], rax

; 1559 :                 if (u_bit_count < v_bit_count)

  00111	48 8b 45 28	 mov	 rax, QWORD PTR v_bit_count$6[rbp]
  00115	48 39 45 08	 cmp	 QWORD PTR u_bit_count$5[rbp], rax
  00119	73 3c		 jae	 SHORT $LN9@PMC_DivRem

; 1560 :                 {
; 1561 :                     // 明らかに u < v である場合
; 1562 : 
; 1563 :                     // q = 0, r = u を返す。
; 1564 :                     if (q != nullptr)

  0011b	48 83 bd 60 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00123	74 11		 je	 SHORT $LN11@PMC_DivRem

; 1565 :                         *q = &number_zero;

  00125	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00133	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN11@PMC_DivRem:

; 1566 :                     return ((_UINT32_T)u->BLOCK[0]);

  00136	b8 08 00 00 00	 mov	 eax, 8
  0013b	48 6b c0 00	 imul	 rax, rax, 0
  0013f	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  00146	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0014a	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0014d	e9 58 01 00 00	 jmp	 $LN16@PMC_DivRem

; 1567 :                 }
; 1568 :                 else

  00152	e9 53 01 00 00	 jmp	 $LN16@PMC_DivRem
$LN9@PMC_DivRem:

; 1569 :                 {
; 1570 :                     if (q != nullptr)

  00157	48 83 bd 60 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  0015f	0f 84 14 01 00
	00		 je	 $LN12@PMC_DivRem

; 1571 :                     {
; 1572 :                         ResourceHolderUINT root;

  00165	48 8d 4d 48	 lea	 rcx, QWORD PTR root$7[rbp]
  00169	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0016e	90		 npad	 1

; 1573 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  0016f	48 8b 45 28	 mov	 rax, QWORD PTR v_bit_count$6[rbp]
  00173	48 8b 4d 08	 mov	 rcx, QWORD PTR u_bit_count$5[rbp]
  00177	48 2b c8	 sub	 rcx, rax
  0017a	48 8b c1	 mov	 rax, rcx
  0017d	48 83 c0 41	 add	 rax, 65			; 00000041H
  00181	48 89 85 88 00
	00 00		 mov	 QWORD PTR q_bit_count$8[rbp], rax

; 1574 :                         *q = root.AllocateNumber(q_bit_count);

  00188	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR q_bit_count$8[rbp]
  0018f	48 8d 4d 48	 lea	 rcx, QWORD PTR root$7[rbp]
  00193	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00198	48 8b 8d 60 02
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  0019f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1575 :                         __UNIT_TYPE r_buf = 0;

  001a2	48 c7 85 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR r_buf$9[rbp], 0

; 1576 :                         DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v, (*q)->BLOCK, &r_buf);

  001ad	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001b4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001b7	8b 8d 58 02 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  001bd	48 8d 95 a8 00
	00 00		 lea	 rdx, QWORD PTR r_buf$9[rbp]
  001c4	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  001c9	4c 8b 48 40	 mov	 r9, QWORD PTR [rax+64]
  001cd	44 8b c1	 mov	 r8d, ecx
  001d0	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  001d7	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  001db	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  001e2	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  001e6	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W

; 1577 :                         root.CheckNumber(*q);

  001eb	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001f2	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001f5	48 8d 4d 48	 lea	 rcx, QWORD PTR root$7[rbp]
  001f9	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1578 :                         CommitNumber(*q);

  001fe	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00205	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00208	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1579 :                         if ((*q)->IS_ZERO)

  0020d	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00214	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00217	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0021a	83 e0 01	 and	 eax, 1
  0021d	85 c0		 test	 eax, eax
  0021f	74 26		 je	 SHORT $LN14@PMC_DivRem

; 1580 :                         {
; 1581 :                             root.DeallocateNumber(*q);

  00221	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00228	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0022b	48 8d 4d 48	 lea	 rcx, QWORD PTR root$7[rbp]
  0022f	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1582 :                             *q = &number_zero;

  00234	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00242	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1583 :                         }
; 1584 :                         else

  00245	eb 13		 jmp	 SHORT $LN15@PMC_DivRem
$LN14@PMC_DivRem:

; 1585 :                             root.UnlinkNumber(*q);

  00247	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0024e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00251	48 8d 4d 48	 lea	 rcx, QWORD PTR root$7[rbp]
  00255	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN15@PMC_DivRem:

; 1586 :                         return ((_UINT32_T)r_buf);

  0025a	8b 85 a8 00 00
	00		 mov	 eax, DWORD PTR r_buf$9[rbp]
  00260	89 85 f4 01 00
	00		 mov	 DWORD PTR $T12[rbp], eax
  00266	48 8d 4d 48	 lea	 rcx, QWORD PTR root$7[rbp]
  0026a	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0026f	8b 85 f4 01 00
	00		 mov	 eax, DWORD PTR $T12[rbp]
  00275	eb 33		 jmp	 SHORT $LN16@PMC_DivRem

; 1587 :                     }
; 1588 :                     else

  00277	eb 31		 jmp	 SHORT $LN16@PMC_DivRem
$LN12@PMC_DivRem:

; 1589 :                     {
; 1590 :                         __UNIT_TYPE r_buf = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v);

  00279	8b 85 58 02 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  0027f	44 8b c0	 mov	 r8d, eax
  00282	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00289	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  0028d	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00294	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00298	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  0029d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR r_buf$10[rbp], rax

; 1591 :                         return ((_UINT32_T)r_buf);

  002a4	8b 85 c8 00 00
	00		 mov	 eax, DWORD PTR r_buf$10[rbp]
$LN16@PMC_DivRem:

; 1592 :                     }
; 1593 :                 }
; 1594 :             }
; 1595 :         }
; 1596 :     }

  002aa	48 8b f8	 mov	 rdi, rax
  002ad	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  002b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z$rtcFrameData
  002b8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002bd	48 8b c7	 mov	 rax, rdi
  002c0	48 8d a5 38 02
	00 00		 lea	 rsp, QWORD PTR [rbp+568]
  002c7	5f		 pop	 rdi
  002c8	5d		 pop	 rbp
  002c9	c3		 ret	 0
$LN18@PMC_DivRem:
?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$5 = 8
v_bit_count$6 = 40
root$7 = 72
q_bit_count$8 = 136
r_buf$9 = 168
r_buf$10 = 200
$T11 = 424
$T12 = 500
$T13 = 536
u$ = 592
v$ = 600
q$ = 608
?dtor$0@?0??PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR root$7[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$5 = 8
v_bit_count$6 = 40
root$7 = 72
q_bit_count$8 = 136
r_buf$9 = 168
r_buf$10 = 200
$T11 = 424
$T12 = 500
$T13 = 536
u$ = 592
v$ = 600
q$ = 608
?dtor$0@?0??PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR root$7[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z
_TEXT	SEGMENT
d_factor$ = 8
work_u_buf$ = 40
q_index$ = 72
q_$1 = 104
u_buf$ = 352
u_buf_len$ = 360
v_buf$ = 368
v_buf_len$ = 376
work_v_buf$ = 384
q_buf$ = 392
r_buf$ = 400
?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADX_MULX, COMDAT

; 1392 :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1393 :         // u の最上位ワードは 0 でありうることに注意すること。
; 1394 : 
; 1395 : #ifdef _DEBUG
; 1396 :         if (v_buf[v_buf_len - 1] == 0)

  00045	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  0004c	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR v_buf_len$[rbp]

; 1397 :         {
; 1398 :             ; // このルートには到達しないはず。デバッグ用。
; 1399 :         }
; 1400 : #endif
; 1401 : 
; 1402 :         __UNIT_TYPE d_factor = _LZCNT_ALT_UNIT(v_buf[v_buf_len - 1]);

  00053	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  0005a	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR v_buf_len$[rbp]
  00061	48 8b 4c c8 f8	 mov	 rcx, QWORD PTR [rax+rcx*8-8]
  00066	e8 00 00 00 00	 call	 _LZCNT_ALT_UNIT
  0006b	48 98		 cdqe
  0006d	48 89 45 08	 mov	 QWORD PTR d_factor$[rbp], rax

; 1403 :         if (d_factor == 0)

  00071	48 83 7d 08 00	 cmp	 QWORD PTR d_factor$[rbp], 0
  00076	75 4c		 jne	 SHORT $LN6@DivRem_X_X

; 1404 :         {
; 1405 :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_buf_len);

  00078	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR u_buf_len$[rbp]
  0007f	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR u_buf$[rbp]
  00086	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR r_buf$[rbp]
  0008d	e8 00 00 00 00	 call	 _COPY_MEMORY_UNIT

; 1406 :             _COPY_MEMORY_UNIT(work_v_buf, v_buf, v_buf_len);

  00092	4c 8b 85 78 01
	00 00		 mov	 r8, QWORD PTR v_buf_len$[rbp]
  00099	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR v_buf$[rbp]
  000a0	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR work_v_buf$[rbp]
  000a7	e8 00 00 00 00	 call	 _COPY_MEMORY_UNIT

; 1407 :             r_buf[u_buf_len] = 0;

  000ac	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR r_buf$[rbp]
  000b3	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  000ba	48 c7 04 c8 00
	00 00 00	 mov	 QWORD PTR [rax+rcx*8], 0

; 1408 :         }
; 1409 :         else

  000c2	eb 4c		 jmp	 SHORT $LN7@DivRem_X_X
$LN6@DivRem_X_X:

; 1410 :         {
; 1411 :             LeftShift_Imp(u_buf, u_buf_len, d_factor, r_buf, FALSE);

  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000cc	4c 8b 8d 90 01
	00 00		 mov	 r9, QWORD PTR r_buf$[rbp]
  000d3	4c 8b 45 08	 mov	 r8, QWORD PTR d_factor$[rbp]
  000d7	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR u_buf_len$[rbp]
  000de	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  000e5	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp

; 1412 :             LeftShift_Imp(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

  000ea	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000f2	4c 8b 8d 80 01
	00 00		 mov	 r9, QWORD PTR work_v_buf$[rbp]
  000f9	4c 8b 45 08	 mov	 r8, QWORD PTR d_factor$[rbp]
  000fd	48 8b 95 78 01
	00 00		 mov	 rdx, QWORD PTR v_buf_len$[rbp]
  00104	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR v_buf$[rbp]
  0010b	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
$LN7@DivRem_X_X:

; 1413 :         }
; 1414 : 
; 1415 :         __UNIT_TYPE* work_u_buf = r_buf;

  00110	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR r_buf$[rbp]
  00117	48 89 45 28	 mov	 QWORD PTR work_u_buf$[rbp], rax

; 1416 :         __UNIT_TYPE q_index = u_buf_len - v_buf_len;

  0011b	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR v_buf_len$[rbp]
  00122	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  00129	48 2b c8	 sub	 rcx, rax
  0012c	48 8b c1	 mov	 rax, rcx
  0012f	48 89 45 48	 mov	 QWORD PTR q_index$[rbp], rax
$LN2@DivRem_X_X:

; 1417 : 
; 1418 :         for (;;)
; 1419 :         {
; 1420 :             __UNIT_TYPE q_ = CalculateQ_X(work_u_buf, work_v_buf, v_buf_len, q_index);

  00133	4c 8b 4d 48	 mov	 r9, QWORD PTR q_index$[rbp]
  00137	4c 8b 85 78 01
	00 00		 mov	 r8, QWORD PTR v_buf_len$[rbp]
  0013e	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR work_v_buf$[rbp]
  00145	48 8b 4d 28	 mov	 rcx, QWORD PTR work_u_buf$[rbp]
  00149	e8 00 00 00 00	 call	 ?CalculateQ_X@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z ; Palmtree::Math::Core::Internal::CalculateQ_X
  0014e	48 89 45 68	 mov	 QWORD PTR q_$1[rbp], rax

; 1421 : 
; 1422 :             if (SubtructOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

  00152	48 8b 45 68	 mov	 rax, QWORD PTR q_$1[rbp]
  00156	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0015b	48 8b 45 48	 mov	 rax, QWORD PTR q_index$[rbp]
  0015f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00164	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR v_buf_len$[rbp]
  0016b	4c 8b 85 80 01
	00 00		 mov	 r8, QWORD PTR work_v_buf$[rbp]
  00172	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR u_buf_len$[rbp]
  00179	48 8b 4d 28	 mov	 rcx, QWORD PTR work_u_buf$[rbp]
  0017d	e8 00 00 00 00	 call	 ?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z ; Palmtree::Math::Core::Internal::SubtructOneLineX
  00182	85 c0		 test	 eax, eax
  00184	74 32		 je	 SHORT $LN8@DivRem_X_X

; 1423 :             {
; 1424 :                 // 桁借りが発生した場合
; 1425 : 
; 1426 :                 --q_;

  00186	48 8b 45 68	 mov	 rax, QWORD PTR q_$1[rbp]
  0018a	48 ff c8	 dec	 rax
  0018d	48 89 45 68	 mov	 QWORD PTR q_$1[rbp], rax

; 1427 :                 AddOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

  00191	48 8b 45 48	 mov	 rax, QWORD PTR q_index$[rbp]
  00195	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0019a	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR v_buf_len$[rbp]
  001a1	4c 8b 85 80 01
	00 00		 mov	 r8, QWORD PTR work_v_buf$[rbp]
  001a8	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR u_buf_len$[rbp]
  001af	48 8b 4d 28	 mov	 rcx, QWORD PTR work_u_buf$[rbp]
  001b3	e8 00 00 00 00	 call	 ?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z ; Palmtree::Math::Core::Internal::AddOneLineX
$LN8@DivRem_X_X:

; 1428 :             }
; 1429 : 
; 1430 :             if (q_buf != nullptr)

  001b8	48 83 bd 88 01
	00 00 00	 cmp	 QWORD PTR q_buf$[rbp], 0
  001c0	74 13		 je	 SHORT $LN9@DivRem_X_X

; 1431 :                 q_buf[q_index] = q_;

  001c2	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR q_buf$[rbp]
  001c9	48 8b 4d 48	 mov	 rcx, QWORD PTR q_index$[rbp]
  001cd	48 8b 55 68	 mov	 rdx, QWORD PTR q_$1[rbp]
  001d1	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
$LN9@DivRem_X_X:

; 1432 : 
; 1433 : 
; 1434 :             if (q_index == 0)

  001d5	48 83 7d 48 00	 cmp	 QWORD PTR q_index$[rbp], 0
  001da	75 02		 jne	 SHORT $LN10@DivRem_X_X

; 1435 :                 break;

  001dc	eb 10		 jmp	 SHORT $LN3@DivRem_X_X
$LN10@DivRem_X_X:

; 1436 :             --q_index;

  001de	48 8b 45 48	 mov	 rax, QWORD PTR q_index$[rbp]
  001e2	48 ff c8	 dec	 rax
  001e5	48 89 45 48	 mov	 QWORD PTR q_index$[rbp], rax

; 1437 :         }

  001e9	e9 45 ff ff ff	 jmp	 $LN2@DivRem_X_X
$LN3@DivRem_X_X:

; 1438 : 
; 1439 :         if (d_factor > 0)

  001ee	48 83 7d 08 00	 cmp	 QWORD PTR d_factor$[rbp], 0
  001f3	76 26		 jbe	 SHORT $LN11@DivRem_X_X

; 1440 :             RightShift_Imp(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

  001f5	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR u_buf_len$[rbp]
  001fc	48 ff c0	 inc	 rax
  001ff	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00207	4c 8b 4d 28	 mov	 r9, QWORD PTR work_u_buf$[rbp]
  0020b	4c 8b 45 08	 mov	 r8, QWORD PTR d_factor$[rbp]
  0020f	48 8b d0	 mov	 rdx, rax
  00212	48 8b 4d 28	 mov	 rcx, QWORD PTR work_u_buf$[rbp]
  00216	e8 00 00 00 00	 call	 ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
$LN11@DivRem_X_X:

; 1441 :     }

  0021b	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  00222	5f		 pop	 rdi
  00223	5d		 pop	 rbp
  00224	c3		 ret	 0
?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADX_MULX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z
_TEXT	SEGMENT
d_factor$ = 8
work_u_buf$ = 40
q_index$ = 72
q_$1 = 104
u_buf$ = 352
u_buf_len$ = 360
v_buf$ = 368
v_buf_len$ = 376
work_v_buf$ = 384
q_buf$ = 392
r_buf$ = 400
?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADC_MUL, COMDAT

; 1335 :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1336 :         // u および v の最上位ワードは 0 でありうることに注意すること。
; 1337 :         if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE))

  00045	33 c0		 xor	 eax, eax
  00047	85 c0		 test	 eax, eax
  00049	74 52		 je	 SHORT $LN9@DivRem_X_X
$LN2@DivRem_X_X:

; 1338 :         {
; 1339 :             while (u_buf[u_buf_len - 1] == 0)

  0004b	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00052	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  00059	48 83 7c c8 f8
	00		 cmp	 QWORD PTR [rax+rcx*8-8], 0
  0005f	75 13		 jne	 SHORT $LN3@DivRem_X_X

; 1340 :                 --u_buf_len;

  00061	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR u_buf_len$[rbp]
  00068	48 ff c8	 dec	 rax
  0006b	48 89 85 68 01
	00 00		 mov	 QWORD PTR u_buf_len$[rbp], rax
  00072	eb d7		 jmp	 SHORT $LN2@DivRem_X_X
$LN3@DivRem_X_X:
$LN4@DivRem_X_X:

; 1341 :             while (v_buf[v_buf_len - 1] == 0)

  00074	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  0007b	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR v_buf_len$[rbp]
  00082	48 83 7c c8 f8
	00		 cmp	 QWORD PTR [rax+rcx*8-8], 0
  00088	75 13		 jne	 SHORT $LN5@DivRem_X_X

; 1342 :                 --v_buf_len;

  0008a	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR v_buf_len$[rbp]
  00091	48 ff c8	 dec	 rax
  00094	48 89 85 78 01
	00 00		 mov	 QWORD PTR v_buf_len$[rbp], rax
  0009b	eb d7		 jmp	 SHORT $LN4@DivRem_X_X
$LN5@DivRem_X_X:
$LN9@DivRem_X_X:

; 1343 :         }
; 1344 : 
; 1345 : #ifdef _DEBUG
; 1346 :         if (v_buf[v_buf_len - 1] == 0)

  0009d	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  000a4	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR v_buf_len$[rbp]

; 1347 :         {
; 1348 :             ; // このルートには到達しないはず。デバッグ用。
; 1349 :         }
; 1350 : #endif
; 1351 : 
; 1352 :         __UNIT_TYPE d_factor = _LZCNT_ALT_UNIT(v_buf[v_buf_len - 1]);

  000ab	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  000b2	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR v_buf_len$[rbp]
  000b9	48 8b 4c c8 f8	 mov	 rcx, QWORD PTR [rax+rcx*8-8]
  000be	e8 00 00 00 00	 call	 _LZCNT_ALT_UNIT
  000c3	48 98		 cdqe
  000c5	48 89 45 08	 mov	 QWORD PTR d_factor$[rbp], rax

; 1353 :         if (d_factor == 0)

  000c9	48 83 7d 08 00	 cmp	 QWORD PTR d_factor$[rbp], 0
  000ce	75 4c		 jne	 SHORT $LN11@DivRem_X_X

; 1354 :         {
; 1355 :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_buf_len);

  000d0	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR u_buf_len$[rbp]
  000d7	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR u_buf$[rbp]
  000de	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR r_buf$[rbp]
  000e5	e8 00 00 00 00	 call	 _COPY_MEMORY_UNIT

; 1356 :             _COPY_MEMORY_UNIT(work_v_buf, v_buf, v_buf_len);

  000ea	4c 8b 85 78 01
	00 00		 mov	 r8, QWORD PTR v_buf_len$[rbp]
  000f1	48 8b 95 70 01
	00 00		 mov	 rdx, QWORD PTR v_buf$[rbp]
  000f8	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR work_v_buf$[rbp]
  000ff	e8 00 00 00 00	 call	 _COPY_MEMORY_UNIT

; 1357 :             r_buf[u_buf_len] = 0;

  00104	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR r_buf$[rbp]
  0010b	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  00112	48 c7 04 c8 00
	00 00 00	 mov	 QWORD PTR [rax+rcx*8], 0

; 1358 :         }
; 1359 :         else

  0011a	eb 4c		 jmp	 SHORT $LN12@DivRem_X_X
$LN11@DivRem_X_X:

; 1360 :         {
; 1361 :             LeftShift_Imp(u_buf, u_buf_len, d_factor, r_buf, FALSE);

  0011c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00124	4c 8b 8d 90 01
	00 00		 mov	 r9, QWORD PTR r_buf$[rbp]
  0012b	4c 8b 45 08	 mov	 r8, QWORD PTR d_factor$[rbp]
  0012f	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR u_buf_len$[rbp]
  00136	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR u_buf$[rbp]
  0013d	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp

; 1362 :             LeftShift_Imp(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

  00142	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0014a	4c 8b 8d 80 01
	00 00		 mov	 r9, QWORD PTR work_v_buf$[rbp]
  00151	4c 8b 45 08	 mov	 r8, QWORD PTR d_factor$[rbp]
  00155	48 8b 95 78 01
	00 00		 mov	 rdx, QWORD PTR v_buf_len$[rbp]
  0015c	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR v_buf$[rbp]
  00163	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
$LN12@DivRem_X_X:

; 1363 :         }
; 1364 : 
; 1365 :         __UNIT_TYPE* work_u_buf = r_buf;

  00168	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR r_buf$[rbp]
  0016f	48 89 45 28	 mov	 QWORD PTR work_u_buf$[rbp], rax

; 1366 :         __UNIT_TYPE q_index = u_buf_len - v_buf_len;

  00173	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR v_buf_len$[rbp]
  0017a	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  00181	48 2b c8	 sub	 rcx, rax
  00184	48 8b c1	 mov	 rax, rcx
  00187	48 89 45 48	 mov	 QWORD PTR q_index$[rbp], rax
$LN6@DivRem_X_X:

; 1367 : 
; 1368 :         for (;;)
; 1369 :         {
; 1370 :             __UNIT_TYPE q_ = CalculateQ_(work_u_buf, work_v_buf, v_buf_len, q_index);

  0018b	4c 8b 4d 48	 mov	 r9, QWORD PTR q_index$[rbp]
  0018f	4c 8b 85 78 01
	00 00		 mov	 r8, QWORD PTR v_buf_len$[rbp]
  00196	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR work_v_buf$[rbp]
  0019d	48 8b 4d 28	 mov	 rcx, QWORD PTR work_u_buf$[rbp]
  001a1	e8 00 00 00 00	 call	 ?CalculateQ_@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z ; Palmtree::Math::Core::Internal::CalculateQ_
  001a6	48 89 45 68	 mov	 QWORD PTR q_$1[rbp], rax

; 1371 : 
; 1372 : 
; 1373 :             if (SubtructOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

  001aa	48 8b 45 68	 mov	 rax, QWORD PTR q_$1[rbp]
  001ae	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001b3	48 8b 45 48	 mov	 rax, QWORD PTR q_index$[rbp]
  001b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001bc	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR v_buf_len$[rbp]
  001c3	4c 8b 85 80 01
	00 00		 mov	 r8, QWORD PTR work_v_buf$[rbp]
  001ca	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR u_buf_len$[rbp]
  001d1	48 8b 4d 28	 mov	 rcx, QWORD PTR work_u_buf$[rbp]
  001d5	e8 00 00 00 00	 call	 ?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z ; Palmtree::Math::Core::Internal::SubtructOneLine
  001da	85 c0		 test	 eax, eax
  001dc	74 32		 je	 SHORT $LN13@DivRem_X_X

; 1374 :             {
; 1375 :                 // 桁借りが発生した場合
; 1376 :                 --q_;

  001de	48 8b 45 68	 mov	 rax, QWORD PTR q_$1[rbp]
  001e2	48 ff c8	 dec	 rax
  001e5	48 89 45 68	 mov	 QWORD PTR q_$1[rbp], rax

; 1377 :                 AddOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

  001e9	48 8b 45 48	 mov	 rax, QWORD PTR q_index$[rbp]
  001ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f2	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR v_buf_len$[rbp]
  001f9	4c 8b 85 80 01
	00 00		 mov	 r8, QWORD PTR work_v_buf$[rbp]
  00200	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR u_buf_len$[rbp]
  00207	48 8b 4d 28	 mov	 rcx, QWORD PTR work_u_buf$[rbp]
  0020b	e8 00 00 00 00	 call	 ?AddOneLine@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z ; Palmtree::Math::Core::Internal::AddOneLine
$LN13@DivRem_X_X:

; 1378 :             }
; 1379 : 
; 1380 :             if (q_buf != nullptr)

  00210	48 83 bd 88 01
	00 00 00	 cmp	 QWORD PTR q_buf$[rbp], 0
  00218	74 13		 je	 SHORT $LN14@DivRem_X_X

; 1381 :                 q_buf[q_index] = q_;

  0021a	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR q_buf$[rbp]
  00221	48 8b 4d 48	 mov	 rcx, QWORD PTR q_index$[rbp]
  00225	48 8b 55 68	 mov	 rdx, QWORD PTR q_$1[rbp]
  00229	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
$LN14@DivRem_X_X:

; 1382 :             if (q_index == 0)

  0022d	48 83 7d 48 00	 cmp	 QWORD PTR q_index$[rbp], 0
  00232	75 02		 jne	 SHORT $LN15@DivRem_X_X

; 1383 :                 break;

  00234	eb 10		 jmp	 SHORT $LN7@DivRem_X_X
$LN15@DivRem_X_X:

; 1384 :             --q_index;

  00236	48 8b 45 48	 mov	 rax, QWORD PTR q_index$[rbp]
  0023a	48 ff c8	 dec	 rax
  0023d	48 89 45 48	 mov	 QWORD PTR q_index$[rbp], rax

; 1385 :         }

  00241	e9 45 ff ff ff	 jmp	 $LN6@DivRem_X_X
$LN7@DivRem_X_X:

; 1386 : 
; 1387 :         if (d_factor > 0)

  00246	48 83 7d 08 00	 cmp	 QWORD PTR d_factor$[rbp], 0
  0024b	76 26		 jbe	 SHORT $LN16@DivRem_X_X

; 1388 :             RightShift_Imp(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

  0024d	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR u_buf_len$[rbp]
  00254	48 ff c0	 inc	 rax
  00257	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0025f	4c 8b 4d 28	 mov	 r9, QWORD PTR work_u_buf$[rbp]
  00263	4c 8b 45 08	 mov	 r8, QWORD PTR d_factor$[rbp]
  00267	48 8b d0	 mov	 rdx, rax
  0026a	48 8b 4d 28	 mov	 rcx, QWORD PTR work_u_buf$[rbp]
  0026e	e8 00 00 00 00	 call	 ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
$LN16@DivRem_X_X:

; 1389 :     }

  00273	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0027a	5f		 pop	 rdi
  0027b	5d		 pop	 rbp
  0027c	c3		 ret	 0
?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z
_TEXT	SEGMENT
u_ptr$ = 8
v_ptr$ = 40
v_count$ = 72
c$ = 100
count$ = 136
u_buf$ = 384
u_buf_len$ = 392
v_buf$ = 400
v_buf_len$ = 408
q_index$ = 416
?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z PROC ; Palmtree::Math::Core::Internal::AddOneLineX, COMDAT

; 1269 :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1270 :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  00045	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0004c	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR q_index$[rbp]
  00053	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00057	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1271 :         __UNIT_TYPE* v_ptr = &v_buf[0];

  0005b	b8 08 00 00 00	 mov	 eax, 8
  00060	48 6b c0 00	 imul	 rax, rax, 0
  00064	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR v_buf$[rbp]
  0006b	48 03 c8	 add	 rcx, rax
  0006e	48 8b c1	 mov	 rax, rcx
  00071	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1272 :         __UNIT_TYPE v_count = v_buf_len;

  00075	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR v_buf_len$[rbp]
  0007c	48 89 45 48	 mov	 QWORD PTR v_count$[rbp], rax

; 1273 :         char c = 0;

  00080	c6 45 64 00	 mov	 BYTE PTR c$[rbp], 0

; 1274 : 
; 1275 :         // まず 32 ワードずつ加算をする。
; 1276 :         __UNIT_TYPE count = v_count >> 5;

  00084	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00088	48 c1 e8 05	 shr	 rax, 5
  0008c	48 89 85 88 00
	00 00		 mov	 QWORD PTR count$[rbp], rax
$LN2@AddOneLine:

; 1277 :         while (count != 0)

  00093	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR count$[rbp], 0
  0009b	74 47		 je	 SHORT $LN3@AddOneLine

; 1278 :         {
; 1279 :             c = _ADD_32WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  0009d	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  000a1	4c 8b 45 28	 mov	 r8, QWORD PTR v_ptr$[rbp]
  000a5	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  000a9	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  000ad	e8 00 00 00 00	 call	 _ADD_32WORDS_ADCX
  000b2	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1280 :             u_ptr += 32;

  000b5	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  000b9	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  000bf	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1281 :             v_ptr += 32;

  000c3	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  000c7	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  000cd	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1282 :             --count;

  000d1	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  000d8	48 ff c8	 dec	 rax
  000db	48 89 85 88 00
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 1283 :         }

  000e2	eb af		 jmp	 SHORT $LN2@AddOneLine
$LN3@AddOneLine:

; 1284 :         // この時点で未処理の桁は 32 ワード未満のはず
; 1285 : 
; 1286 :         // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 1287 :         if (v_count & 0x10)

  000e4	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  000e8	48 83 e0 10	 and	 rax, 16
  000ec	48 85 c0	 test	 rax, rax
  000ef	74 34		 je	 SHORT $LN4@AddOneLine

; 1288 :         {
; 1289 :             c = _ADD_16WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  000f1	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  000f5	4c 8b 45 28	 mov	 r8, QWORD PTR v_ptr$[rbp]
  000f9	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  000fd	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  00101	e8 00 00 00 00	 call	 _ADD_16WORDS_ADCX
  00106	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1290 :             u_ptr += 16;

  00109	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  0010d	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00113	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1291 :             v_ptr += 16;

  00117	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  0011b	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00121	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax
$LN4@AddOneLine:

; 1292 :         }
; 1293 :         // この時点で未処理の桁は 16 ワード未満のはず
; 1294 : 
; 1295 :         // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 1296 :         if (v_count & 0x8)

  00125	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00129	48 83 e0 08	 and	 rax, 8
  0012d	48 85 c0	 test	 rax, rax
  00130	74 30		 je	 SHORT $LN5@AddOneLine

; 1297 :         {
; 1298 :             c = _ADD_8WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  00132	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  00136	4c 8b 45 28	 mov	 r8, QWORD PTR v_ptr$[rbp]
  0013a	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  0013e	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  00142	e8 00 00 00 00	 call	 _ADD_8WORDS_ADCX
  00147	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1299 :             u_ptr += 8;

  0014a	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  0014e	48 83 c0 40	 add	 rax, 64			; 00000040H
  00152	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1300 :             v_ptr += 8;

  00156	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  0015a	48 83 c0 40	 add	 rax, 64			; 00000040H
  0015e	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax
$LN5@AddOneLine:

; 1301 :         }
; 1302 :         // この時点で未処理の桁は 8 ワード未満のはず
; 1303 : 
; 1304 :         // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 1305 :         if (v_count & 0x4)

  00162	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00166	48 83 e0 04	 and	 rax, 4
  0016a	48 85 c0	 test	 rax, rax
  0016d	74 30		 je	 SHORT $LN6@AddOneLine

; 1306 :         {
; 1307 :             c = _ADD_4WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  0016f	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  00173	4c 8b 45 28	 mov	 r8, QWORD PTR v_ptr$[rbp]
  00177	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  0017b	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  0017f	e8 00 00 00 00	 call	 _ADD_4WORDS_ADCX
  00184	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1308 :             u_ptr += 4;

  00187	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  0018b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0018f	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1309 :             v_ptr += 4;

  00193	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  00197	48 83 c0 20	 add	 rax, 32			; 00000020H
  0019b	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax
$LN6@AddOneLine:

; 1310 :         }
; 1311 :         // この時点で未処理の桁は 4 ワード未満のはず
; 1312 : 
; 1313 :         // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 1314 :         if (v_count & 0x2)

  0019f	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  001a3	48 83 e0 02	 and	 rax, 2
  001a7	48 85 c0	 test	 rax, rax
  001aa	74 30		 je	 SHORT $LN7@AddOneLine

; 1315 :         {
; 1316 :             c = _ADD_2WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  001ac	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  001b0	4c 8b 45 28	 mov	 r8, QWORD PTR v_ptr$[rbp]
  001b4	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  001b8	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  001bc	e8 00 00 00 00	 call	 _ADD_2WORDS_ADCX
  001c1	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1317 :             u_ptr += 2;

  001c4	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  001c8	48 83 c0 10	 add	 rax, 16
  001cc	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1318 :             v_ptr += 2;

  001d0	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  001d4	48 83 c0 10	 add	 rax, 16
  001d8	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax
$LN7@AddOneLine:

; 1319 :         }
; 1320 :         // この時点で未処理の桁は 2 ワード未満のはず
; 1321 : 
; 1322 :         // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 1323 :         if (v_count & 0x1)

  001dc	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  001e0	48 83 e0 01	 and	 rax, 1
  001e4	48 85 c0	 test	 rax, rax
  001e7	74 36		 je	 SHORT $LN8@AddOneLine

; 1324 :         {
; 1325 :             c = _ADD_UNIT(c, *u_ptr, *v_ptr, u_ptr);

  001e9	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  001ed	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  001f1	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  001f4	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  001f8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001fb	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  001ff	e8 00 00 00 00	 call	 _ADD_UNIT
  00204	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1326 :             ++u_ptr;

  00207	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  0020b	48 83 c0 08	 add	 rax, 8
  0020f	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1327 :             ++v_ptr;

  00213	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  00217	48 83 c0 08	 add	 rax, 8
  0021b	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax
$LN8@AddOneLine:

; 1328 :         }
; 1329 : 
; 1330 :         // 残りの桁の繰り上がりを計算する。
; 1331 :         DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

  0021f	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00226	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  0022d	48 8d 44 c8 08	 lea	 rax, QWORD PTR [rax+rcx*8+8]
  00232	48 2b 45 08	 sub	 rax, QWORD PTR u_ptr$[rbp]
  00236	48 c1 f8 03	 sar	 rax, 3
  0023a	4c 8b c0	 mov	 r8, rax
  0023d	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  00241	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  00245	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K@Z ; Palmtree::Math::Core::Internal::DoCarry

; 1332 :     }

  0024a	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00251	5f		 pop	 rdi
  00252	5d		 pop	 rbp
  00253	c3		 ret	 0
?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z ENDP ; Palmtree::Math::Core::Internal::AddOneLineX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?AddOneLine@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z
_TEXT	SEGMENT
u_ptr$ = 8
v_ptr$ = 40
v_count$ = 72
c$ = 100
count$ = 136
u_buf$ = 384
u_buf_len$ = 392
v_buf$ = 400
v_buf_len$ = 408
q_index$ = 416
?AddOneLine@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z PROC ; Palmtree::Math::Core::Internal::AddOneLine, COMDAT

; 1203 :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1204 :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  00045	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0004c	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR q_index$[rbp]
  00053	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00057	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1205 :         __UNIT_TYPE* v_ptr = &v_buf[0];

  0005b	b8 08 00 00 00	 mov	 eax, 8
  00060	48 6b c0 00	 imul	 rax, rax, 0
  00064	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR v_buf$[rbp]
  0006b	48 03 c8	 add	 rcx, rax
  0006e	48 8b c1	 mov	 rax, rcx
  00071	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1206 :         __UNIT_TYPE v_count = v_buf_len;

  00075	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR v_buf_len$[rbp]
  0007c	48 89 45 48	 mov	 QWORD PTR v_count$[rbp], rax

; 1207 :         char c = 0;

  00080	c6 45 64 00	 mov	 BYTE PTR c$[rbp], 0

; 1208 : 
; 1209 :         // まず 32 ワードずつ加算をする。
; 1210 :         __UNIT_TYPE count = v_count >> 5;

  00084	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00088	48 c1 e8 05	 shr	 rax, 5
  0008c	48 89 85 88 00
	00 00		 mov	 QWORD PTR count$[rbp], rax
$LN2@AddOneLine:

; 1211 :         while (count != 0)

  00093	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR count$[rbp], 0
  0009b	74 47		 je	 SHORT $LN3@AddOneLine

; 1212 :         {
; 1213 :             c = _ADD_32WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  0009d	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  000a1	4c 8b 45 28	 mov	 r8, QWORD PTR v_ptr$[rbp]
  000a5	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  000a9	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  000ad	e8 00 00 00 00	 call	 _ADD_32WORDS_ADC
  000b2	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1214 :             u_ptr += 32;

  000b5	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  000b9	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  000bf	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1215 :             v_ptr += 32;

  000c3	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  000c7	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  000cd	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1216 :             --count;

  000d1	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  000d8	48 ff c8	 dec	 rax
  000db	48 89 85 88 00
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 1217 :         }

  000e2	eb af		 jmp	 SHORT $LN2@AddOneLine
$LN3@AddOneLine:

; 1218 :         // この時点で未処理の桁は 32 ワード未満のはず
; 1219 : 
; 1220 :         // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 1221 :         if (v_count & 0x10)

  000e4	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  000e8	48 83 e0 10	 and	 rax, 16
  000ec	48 85 c0	 test	 rax, rax
  000ef	74 34		 je	 SHORT $LN4@AddOneLine

; 1222 :         {
; 1223 :             c = _ADD_16WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  000f1	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  000f5	4c 8b 45 28	 mov	 r8, QWORD PTR v_ptr$[rbp]
  000f9	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  000fd	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  00101	e8 00 00 00 00	 call	 _ADD_16WORDS_ADC
  00106	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1224 :             u_ptr += 16;

  00109	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  0010d	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00113	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1225 :             v_ptr += 16;

  00117	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  0011b	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00121	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax
$LN4@AddOneLine:

; 1226 :         }
; 1227 :         // この時点で未処理の桁は 16 ワード未満のはず
; 1228 : 
; 1229 :         // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 1230 :         if (v_count & 0x8)

  00125	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00129	48 83 e0 08	 and	 rax, 8
  0012d	48 85 c0	 test	 rax, rax
  00130	74 30		 je	 SHORT $LN5@AddOneLine

; 1231 :         {
; 1232 :             c = _ADD_8WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  00132	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  00136	4c 8b 45 28	 mov	 r8, QWORD PTR v_ptr$[rbp]
  0013a	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  0013e	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  00142	e8 00 00 00 00	 call	 _ADD_8WORDS_ADC
  00147	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1233 :             u_ptr += 8;

  0014a	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  0014e	48 83 c0 40	 add	 rax, 64			; 00000040H
  00152	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1234 :             v_ptr += 8;

  00156	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  0015a	48 83 c0 40	 add	 rax, 64			; 00000040H
  0015e	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax
$LN5@AddOneLine:

; 1235 :         }
; 1236 :         // この時点で未処理の桁は 8 ワード未満のはず
; 1237 : 
; 1238 :         // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 1239 :         if (v_count & 0x4)

  00162	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00166	48 83 e0 04	 and	 rax, 4
  0016a	48 85 c0	 test	 rax, rax
  0016d	74 30		 je	 SHORT $LN6@AddOneLine

; 1240 :         {
; 1241 :             c = _ADD_4WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  0016f	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  00173	4c 8b 45 28	 mov	 r8, QWORD PTR v_ptr$[rbp]
  00177	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  0017b	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  0017f	e8 00 00 00 00	 call	 _ADD_4WORDS_ADC
  00184	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1242 :             u_ptr += 4;

  00187	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  0018b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0018f	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1243 :             v_ptr += 4;

  00193	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  00197	48 83 c0 20	 add	 rax, 32			; 00000020H
  0019b	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax
$LN6@AddOneLine:

; 1244 :         }
; 1245 :         // この時点で未処理の桁は 4 ワード未満のはず
; 1246 : 
; 1247 :         // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 1248 :         if (v_count & 0x2)

  0019f	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  001a3	48 83 e0 02	 and	 rax, 2
  001a7	48 85 c0	 test	 rax, rax
  001aa	74 30		 je	 SHORT $LN7@AddOneLine

; 1249 :         {
; 1250 :             c = _ADD_2WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  001ac	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  001b0	4c 8b 45 28	 mov	 r8, QWORD PTR v_ptr$[rbp]
  001b4	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  001b8	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  001bc	e8 00 00 00 00	 call	 _ADD_2WORDS_ADC
  001c1	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1251 :             u_ptr += 2;

  001c4	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  001c8	48 83 c0 10	 add	 rax, 16
  001cc	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1252 :             v_ptr += 2;

  001d0	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  001d4	48 83 c0 10	 add	 rax, 16
  001d8	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax
$LN7@AddOneLine:

; 1253 :         }
; 1254 :         // この時点で未処理の桁は 2 ワード未満のはず
; 1255 : 
; 1256 :         // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 1257 :         if (v_count & 0x1)

  001dc	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  001e0	48 83 e0 01	 and	 rax, 1
  001e4	48 85 c0	 test	 rax, rax
  001e7	74 36		 je	 SHORT $LN8@AddOneLine

; 1258 :         {
; 1259 :             c = _ADD_UNIT(c, *u_ptr, *v_ptr, u_ptr);

  001e9	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  001ed	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  001f1	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  001f4	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  001f8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001fb	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  001ff	e8 00 00 00 00	 call	 _ADD_UNIT
  00204	88 45 64	 mov	 BYTE PTR c$[rbp], al

; 1260 :             ++u_ptr;

  00207	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  0020b	48 83 c0 08	 add	 rax, 8
  0020f	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1261 :             ++v_ptr;

  00213	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  00217	48 83 c0 08	 add	 rax, 8
  0021b	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax
$LN8@AddOneLine:

; 1262 :         }
; 1263 : 
; 1264 :         // 残りの桁の繰り上がりを計算する。
; 1265 :         DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

  0021f	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00226	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  0022d	48 8d 44 c8 08	 lea	 rax, QWORD PTR [rax+rcx*8+8]
  00232	48 2b 45 08	 sub	 rax, QWORD PTR u_ptr$[rbp]
  00236	48 c1 f8 03	 sar	 rax, 3
  0023a	4c 8b c0	 mov	 r8, rax
  0023d	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  00241	0f b6 4d 64	 movzx	 ecx, BYTE PTR c$[rbp]
  00245	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K@Z ; Palmtree::Math::Core::Internal::DoCarry

; 1266 :     }

  0024a	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00251	5f		 pop	 rdi
  00252	5d		 pop	 rbp
  00253	c3		 ret	 0
?AddOneLine@Internal@Core@Math@Palmtree@@YAXPEA_K_K011@Z ENDP ; Palmtree::Math::Core::Internal::AddOneLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K@Z
_TEXT	SEGMENT
c$ = 224
u_ptr$ = 232
u_count$ = 240
?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K@Z PROC ; Palmtree::Math::Core::Internal::DoCarry, COMDAT

; 1174 :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@DoCarry:

; 1175 :         // 繰り上がりを続く限り行う
; 1176 :         for (;;)
; 1177 :         {
; 1178 :             if (u_count <= 0)

  0003f	48 83 bd f0 00
	00 00 00	 cmp	 QWORD PTR u_count$[rbp], 0
  00047	77 04		 ja	 SHORT $LN5@DoCarry

; 1179 :             {
; 1180 :                 // u の最上位まで達してしまった場合
; 1181 :                 return;

  00049	eb 5c		 jmp	 SHORT $LN1@DoCarry
  0004b	eb 58		 jmp	 SHORT $LN6@DoCarry
$LN5@DoCarry:

; 1182 :             }
; 1183 :             else if (c)

  0004d	0f be 85 e0 00
	00 00		 movsx	 eax, BYTE PTR c$[rbp]
  00054	85 c0		 test	 eax, eax
  00056	74 4b		 je	 SHORT $LN7@DoCarry

; 1184 :             {
; 1185 :                 // u の最上位に達しておらず、かつキャリーが立っている場合
; 1186 : 
; 1187 :                 // 繰り上がりを継続する
; 1188 :                 c = _ADD_UNIT(c, *u_ptr, 0, u_ptr);

  00058	4c 8b 8d e8 00
	00 00		 mov	 r9, QWORD PTR u_ptr$[rbp]
  0005f	45 33 c0	 xor	 r8d, r8d
  00062	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR u_ptr$[rbp]
  00069	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0006c	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00073	e8 00 00 00 00	 call	 _ADD_UNIT
  00078	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1189 :                 ++u_ptr;

  0007e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR u_ptr$[rbp]
  00085	48 83 c0 08	 add	 rax, 8
  00089	48 89 85 e8 00
	00 00		 mov	 QWORD PTR u_ptr$[rbp], rax

; 1190 :                 --u_count;

  00090	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00097	48 ff c8	 dec	 rax
  0009a	48 89 85 f0 00
	00 00		 mov	 QWORD PTR u_count$[rbp], rax

; 1191 :             }
; 1192 :             else

  000a1	eb 02		 jmp	 SHORT $LN8@DoCarry
$LN7@DoCarry:

; 1193 :             {
; 1194 :                 // u の最上位に達しておらず、かつキャリーが立っていない場合
; 1195 : 
; 1196 :                 // 繰り上がりを中断し、復帰する。
; 1197 :                 return;

  000a3	eb 02		 jmp	 SHORT $LN1@DoCarry
$LN8@DoCarry:
$LN6@DoCarry:

; 1198 :             }
; 1199 :         }

  000a5	eb 98		 jmp	 SHORT $LN2@DoCarry
$LN1@DoCarry:

; 1200 :     }

  000a7	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000ae	5f		 pop	 rdi
  000af	5d		 pop	 rbp
  000b0	c3		 ret	 0
?DoCarry@Internal@Core@Math@Palmtree@@YAXDPEA_K_K@Z ENDP ; Palmtree::Math::Core::Internal::DoCarry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z
_TEXT	SEGMENT
u_ptr$ = 8
v_ptr$ = 40
v_count$ = 72
k$ = 104
c$ = 132
count$ = 168
u_buf$ = 416
u_buf_len$ = 424
v_buf$ = 432
v_buf_len$ = 440
q_index$ = 448
q_$ = 456
?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z PROC ; Palmtree::Math::Core::Internal::SubtructOneLineX, COMDAT

; 1023 :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+472]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1024 :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  00045	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0004c	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR q_index$[rbp]
  00053	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00057	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1025 :         __UNIT_TYPE* v_ptr = &v_buf[0];

  0005b	b8 08 00 00 00	 mov	 eax, 8
  00060	48 6b c0 00	 imul	 rax, rax, 0
  00064	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR v_buf$[rbp]
  0006b	48 03 c8	 add	 rcx, rax
  0006e	48 8b c1	 mov	 rax, rcx
  00071	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1026 :         __UNIT_TYPE v_count = v_buf_len;

  00075	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR v_buf_len$[rbp]
  0007c	48 89 45 48	 mov	 QWORD PTR v_count$[rbp], rax

; 1027 :         __UNIT_TYPE k = 0;

  00080	48 c7 45 68 00
	00 00 00	 mov	 QWORD PTR k$[rbp], 0

; 1028 :         char c = 0;

  00088	c6 85 84 00 00
	00 00		 mov	 BYTE PTR c$[rbp], 0

; 1029 : 
; 1030 :         __UNIT_TYPE count = v_count >> 5;

  0008f	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00093	48 c1 e8 05	 shr	 rax, 5
  00097	48 89 85 a8 00
	00 00		 mov	 QWORD PTR count$[rbp], rax
$LN2@SubtructOn:

; 1031 :         while (count != 0)

  0009e	48 83 bd a8 00
	00 00 00	 cmp	 QWORD PTR count$[rbp], 0
  000a6	0f 84 af 09 00
	00		 je	 $LN3@SubtructOn

; 1032 :         {
; 1033 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  000ac	b8 08 00 00 00	 mov	 eax, 8
  000b1	48 6b c0 00	 imul	 rax, rax, 0
  000b5	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  000b9	48 03 c8	 add	 rcx, rax
  000bc	48 8b c1	 mov	 rax, rcx
  000bf	b9 08 00 00 00	 mov	 ecx, 8
  000c4	48 6b c9 00	 imul	 rcx, rcx, 0
  000c8	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  000cc	48 03 d1	 add	 rdx, rcx
  000cf	48 8b ca	 mov	 rcx, rdx
  000d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d7	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  000de	4c 8b c1	 mov	 r8, rcx
  000e1	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  000e5	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000ec	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  000f1	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1034 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  000f7	b8 08 00 00 00	 mov	 eax, 8
  000fc	48 6b c0 01	 imul	 rax, rax, 1
  00100	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00104	48 03 c8	 add	 rcx, rax
  00107	48 8b c1	 mov	 rax, rcx
  0010a	b9 08 00 00 00	 mov	 ecx, 8
  0010f	48 6b c9 01	 imul	 rcx, rcx, 1
  00113	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00117	48 03 d1	 add	 rdx, rcx
  0011a	48 8b ca	 mov	 rcx, rdx
  0011d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00122	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00129	4c 8b c1	 mov	 r8, rcx
  0012c	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00130	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00137	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0013c	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1035 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00142	b8 08 00 00 00	 mov	 eax, 8
  00147	48 6b c0 02	 imul	 rax, rax, 2
  0014b	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0014f	48 03 c8	 add	 rcx, rax
  00152	48 8b c1	 mov	 rax, rcx
  00155	b9 08 00 00 00	 mov	 ecx, 8
  0015a	48 6b c9 02	 imul	 rcx, rcx, 2
  0015e	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00162	48 03 d1	 add	 rdx, rcx
  00165	48 8b ca	 mov	 rcx, rdx
  00168	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016d	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00174	4c 8b c1	 mov	 r8, rcx
  00177	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0017b	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00182	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00187	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1036 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  0018d	b8 08 00 00 00	 mov	 eax, 8
  00192	48 6b c0 03	 imul	 rax, rax, 3
  00196	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0019a	48 03 c8	 add	 rcx, rax
  0019d	48 8b c1	 mov	 rax, rcx
  001a0	b9 08 00 00 00	 mov	 ecx, 8
  001a5	48 6b c9 03	 imul	 rcx, rcx, 3
  001a9	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  001ad	48 03 d1	 add	 rdx, rcx
  001b0	48 8b ca	 mov	 rcx, rdx
  001b3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b8	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  001bf	4c 8b c1	 mov	 r8, rcx
  001c2	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  001c6	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001cd	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  001d2	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1037 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  001d8	b8 08 00 00 00	 mov	 eax, 8
  001dd	48 6b c0 04	 imul	 rax, rax, 4
  001e1	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  001e5	48 03 c8	 add	 rcx, rax
  001e8	48 8b c1	 mov	 rax, rcx
  001eb	b9 08 00 00 00	 mov	 ecx, 8
  001f0	48 6b c9 04	 imul	 rcx, rcx, 4
  001f4	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  001f8	48 03 d1	 add	 rdx, rcx
  001fb	48 8b ca	 mov	 rcx, rdx
  001fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00203	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0020a	4c 8b c1	 mov	 r8, rcx
  0020d	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00211	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00218	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0021d	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1038 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  00223	b8 08 00 00 00	 mov	 eax, 8
  00228	48 6b c0 05	 imul	 rax, rax, 5
  0022c	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00230	48 03 c8	 add	 rcx, rax
  00233	48 8b c1	 mov	 rax, rcx
  00236	b9 08 00 00 00	 mov	 ecx, 8
  0023b	48 6b c9 05	 imul	 rcx, rcx, 5
  0023f	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00243	48 03 d1	 add	 rdx, rcx
  00246	48 8b ca	 mov	 rcx, rdx
  00249	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024e	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00255	4c 8b c1	 mov	 r8, rcx
  00258	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0025c	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00263	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00268	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1039 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  0026e	b8 08 00 00 00	 mov	 eax, 8
  00273	48 6b c0 06	 imul	 rax, rax, 6
  00277	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0027b	48 03 c8	 add	 rcx, rax
  0027e	48 8b c1	 mov	 rax, rcx
  00281	b9 08 00 00 00	 mov	 ecx, 8
  00286	48 6b c9 06	 imul	 rcx, rcx, 6
  0028a	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0028e	48 03 d1	 add	 rdx, rcx
  00291	48 8b ca	 mov	 rcx, rdx
  00294	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00299	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  002a0	4c 8b c1	 mov	 r8, rcx
  002a3	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  002a7	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002ae	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  002b3	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1040 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  002b9	b8 08 00 00 00	 mov	 eax, 8
  002be	48 6b c0 07	 imul	 rax, rax, 7
  002c2	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  002c6	48 03 c8	 add	 rcx, rax
  002c9	48 8b c1	 mov	 rax, rcx
  002cc	b9 08 00 00 00	 mov	 ecx, 8
  002d1	48 6b c9 07	 imul	 rcx, rcx, 7
  002d5	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  002d9	48 03 d1	 add	 rdx, rcx
  002dc	48 8b ca	 mov	 rcx, rdx
  002df	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e4	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  002eb	4c 8b c1	 mov	 r8, rcx
  002ee	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  002f2	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002f9	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  002fe	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1041 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

  00304	b8 08 00 00 00	 mov	 eax, 8
  00309	48 6b c0 08	 imul	 rax, rax, 8
  0030d	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00311	48 03 c8	 add	 rcx, rax
  00314	48 8b c1	 mov	 rax, rcx
  00317	b9 08 00 00 00	 mov	 ecx, 8
  0031c	48 6b c9 08	 imul	 rcx, rcx, 8
  00320	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00324	48 03 d1	 add	 rdx, rcx
  00327	48 8b ca	 mov	 rcx, rdx
  0032a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032f	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00336	4c 8b c1	 mov	 r8, rcx
  00339	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0033d	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00344	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00349	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1042 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

  0034f	b8 08 00 00 00	 mov	 eax, 8
  00354	48 6b c0 09	 imul	 rax, rax, 9
  00358	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0035c	48 03 c8	 add	 rcx, rax
  0035f	48 8b c1	 mov	 rax, rcx
  00362	b9 08 00 00 00	 mov	 ecx, 8
  00367	48 6b c9 09	 imul	 rcx, rcx, 9
  0036b	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0036f	48 03 d1	 add	 rdx, rcx
  00372	48 8b ca	 mov	 rcx, rdx
  00375	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0037a	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00381	4c 8b c1	 mov	 r8, rcx
  00384	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00388	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0038f	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00394	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1043 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 0a	 imul	 rax, rax, 10
  003a3	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  003a7	48 03 c8	 add	 rcx, rax
  003aa	48 8b c1	 mov	 rax, rcx
  003ad	b9 08 00 00 00	 mov	 ecx, 8
  003b2	48 6b c9 0a	 imul	 rcx, rcx, 10
  003b6	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  003ba	48 03 d1	 add	 rdx, rcx
  003bd	48 8b ca	 mov	 rcx, rdx
  003c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c5	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  003cc	4c 8b c1	 mov	 r8, rcx
  003cf	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  003d3	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  003da	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  003df	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1044 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

  003e5	b8 08 00 00 00	 mov	 eax, 8
  003ea	48 6b c0 0b	 imul	 rax, rax, 11
  003ee	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  003f2	48 03 c8	 add	 rcx, rax
  003f5	48 8b c1	 mov	 rax, rcx
  003f8	b9 08 00 00 00	 mov	 ecx, 8
  003fd	48 6b c9 0b	 imul	 rcx, rcx, 11
  00401	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00405	48 03 d1	 add	 rdx, rcx
  00408	48 8b ca	 mov	 rcx, rdx
  0040b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00410	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00417	4c 8b c1	 mov	 r8, rcx
  0041a	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0041e	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00425	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0042a	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1045 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

  00430	b8 08 00 00 00	 mov	 eax, 8
  00435	48 6b c0 0c	 imul	 rax, rax, 12
  00439	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0043d	48 03 c8	 add	 rcx, rax
  00440	48 8b c1	 mov	 rax, rcx
  00443	b9 08 00 00 00	 mov	 ecx, 8
  00448	48 6b c9 0c	 imul	 rcx, rcx, 12
  0044c	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00450	48 03 d1	 add	 rdx, rcx
  00453	48 8b ca	 mov	 rcx, rdx
  00456	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0045b	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00462	4c 8b c1	 mov	 r8, rcx
  00465	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00469	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00470	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00475	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1046 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 0d	 imul	 rax, rax, 13
  00484	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00488	48 03 c8	 add	 rcx, rax
  0048b	48 8b c1	 mov	 rax, rcx
  0048e	b9 08 00 00 00	 mov	 ecx, 8
  00493	48 6b c9 0d	 imul	 rcx, rcx, 13
  00497	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0049b	48 03 d1	 add	 rdx, rcx
  0049e	48 8b ca	 mov	 rcx, rdx
  004a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a6	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  004ad	4c 8b c1	 mov	 r8, rcx
  004b0	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  004b4	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  004bb	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  004c0	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1047 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

  004c6	b8 08 00 00 00	 mov	 eax, 8
  004cb	48 6b c0 0e	 imul	 rax, rax, 14
  004cf	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  004d3	48 03 c8	 add	 rcx, rax
  004d6	48 8b c1	 mov	 rax, rcx
  004d9	b9 08 00 00 00	 mov	 ecx, 8
  004de	48 6b c9 0e	 imul	 rcx, rcx, 14
  004e2	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  004e6	48 03 d1	 add	 rdx, rcx
  004e9	48 8b ca	 mov	 rcx, rdx
  004ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004f1	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  004f8	4c 8b c1	 mov	 r8, rcx
  004fb	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  004ff	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00506	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0050b	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1048 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

  00511	b8 08 00 00 00	 mov	 eax, 8
  00516	48 6b c0 0f	 imul	 rax, rax, 15
  0051a	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0051e	48 03 c8	 add	 rcx, rax
  00521	48 8b c1	 mov	 rax, rcx
  00524	b9 08 00 00 00	 mov	 ecx, 8
  00529	48 6b c9 0f	 imul	 rcx, rcx, 15
  0052d	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00531	48 03 d1	 add	 rdx, rcx
  00534	48 8b ca	 mov	 rcx, rdx
  00537	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0053c	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00543	4c 8b c1	 mov	 r8, rcx
  00546	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0054a	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00551	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00556	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1049 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[16], q_, &u_ptr[16]);

  0055c	b8 08 00 00 00	 mov	 eax, 8
  00561	48 6b c0 10	 imul	 rax, rax, 16
  00565	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00569	48 03 c8	 add	 rcx, rax
  0056c	48 8b c1	 mov	 rax, rcx
  0056f	b9 08 00 00 00	 mov	 ecx, 8
  00574	48 6b c9 10	 imul	 rcx, rcx, 16
  00578	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0057c	48 03 d1	 add	 rdx, rcx
  0057f	48 8b ca	 mov	 rcx, rdx
  00582	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00587	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0058e	4c 8b c1	 mov	 r8, rcx
  00591	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00595	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0059c	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  005a1	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1050 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[17], q_, &u_ptr[17]);

  005a7	b8 08 00 00 00	 mov	 eax, 8
  005ac	48 6b c0 11	 imul	 rax, rax, 17
  005b0	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  005b4	48 03 c8	 add	 rcx, rax
  005b7	48 8b c1	 mov	 rax, rcx
  005ba	b9 08 00 00 00	 mov	 ecx, 8
  005bf	48 6b c9 11	 imul	 rcx, rcx, 17
  005c3	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  005c7	48 03 d1	 add	 rdx, rcx
  005ca	48 8b ca	 mov	 rcx, rdx
  005cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005d2	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  005d9	4c 8b c1	 mov	 r8, rcx
  005dc	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  005e0	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  005e7	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  005ec	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1051 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[18], q_, &u_ptr[18]);

  005f2	b8 08 00 00 00	 mov	 eax, 8
  005f7	48 6b c0 12	 imul	 rax, rax, 18
  005fb	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  005ff	48 03 c8	 add	 rcx, rax
  00602	48 8b c1	 mov	 rax, rcx
  00605	b9 08 00 00 00	 mov	 ecx, 8
  0060a	48 6b c9 12	 imul	 rcx, rcx, 18
  0060e	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00612	48 03 d1	 add	 rdx, rcx
  00615	48 8b ca	 mov	 rcx, rdx
  00618	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0061d	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00624	4c 8b c1	 mov	 r8, rcx
  00627	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0062b	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00632	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00637	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1052 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[19], q_, &u_ptr[19]);

  0063d	b8 08 00 00 00	 mov	 eax, 8
  00642	48 6b c0 13	 imul	 rax, rax, 19
  00646	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0064a	48 03 c8	 add	 rcx, rax
  0064d	48 8b c1	 mov	 rax, rcx
  00650	b9 08 00 00 00	 mov	 ecx, 8
  00655	48 6b c9 13	 imul	 rcx, rcx, 19
  00659	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0065d	48 03 d1	 add	 rdx, rcx
  00660	48 8b ca	 mov	 rcx, rdx
  00663	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00668	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0066f	4c 8b c1	 mov	 r8, rcx
  00672	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00676	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0067d	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00682	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1053 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[20], q_, &u_ptr[20]);

  00688	b8 08 00 00 00	 mov	 eax, 8
  0068d	48 6b c0 14	 imul	 rax, rax, 20
  00691	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00695	48 03 c8	 add	 rcx, rax
  00698	48 8b c1	 mov	 rax, rcx
  0069b	b9 08 00 00 00	 mov	 ecx, 8
  006a0	48 6b c9 14	 imul	 rcx, rcx, 20
  006a4	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  006a8	48 03 d1	 add	 rdx, rcx
  006ab	48 8b ca	 mov	 rcx, rdx
  006ae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006b3	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  006ba	4c 8b c1	 mov	 r8, rcx
  006bd	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  006c1	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  006c8	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  006cd	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1054 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[21], q_, &u_ptr[21]);

  006d3	b8 08 00 00 00	 mov	 eax, 8
  006d8	48 6b c0 15	 imul	 rax, rax, 21
  006dc	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  006e0	48 03 c8	 add	 rcx, rax
  006e3	48 8b c1	 mov	 rax, rcx
  006e6	b9 08 00 00 00	 mov	 ecx, 8
  006eb	48 6b c9 15	 imul	 rcx, rcx, 21
  006ef	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  006f3	48 03 d1	 add	 rdx, rcx
  006f6	48 8b ca	 mov	 rcx, rdx
  006f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006fe	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00705	4c 8b c1	 mov	 r8, rcx
  00708	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0070c	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00713	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00718	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1055 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[22], q_, &u_ptr[22]);

  0071e	b8 08 00 00 00	 mov	 eax, 8
  00723	48 6b c0 16	 imul	 rax, rax, 22
  00727	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0072b	48 03 c8	 add	 rcx, rax
  0072e	48 8b c1	 mov	 rax, rcx
  00731	b9 08 00 00 00	 mov	 ecx, 8
  00736	48 6b c9 16	 imul	 rcx, rcx, 22
  0073a	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0073e	48 03 d1	 add	 rdx, rcx
  00741	48 8b ca	 mov	 rcx, rdx
  00744	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00749	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00750	4c 8b c1	 mov	 r8, rcx
  00753	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00757	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0075e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00763	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1056 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[23], q_, &u_ptr[23]);

  00769	b8 08 00 00 00	 mov	 eax, 8
  0076e	48 6b c0 17	 imul	 rax, rax, 23
  00772	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00776	48 03 c8	 add	 rcx, rax
  00779	48 8b c1	 mov	 rax, rcx
  0077c	b9 08 00 00 00	 mov	 ecx, 8
  00781	48 6b c9 17	 imul	 rcx, rcx, 23
  00785	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00789	48 03 d1	 add	 rdx, rcx
  0078c	48 8b ca	 mov	 rcx, rdx
  0078f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00794	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0079b	4c 8b c1	 mov	 r8, rcx
  0079e	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  007a2	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  007a9	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  007ae	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1057 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[24], q_, &u_ptr[24]);

  007b4	b8 08 00 00 00	 mov	 eax, 8
  007b9	48 6b c0 18	 imul	 rax, rax, 24
  007bd	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  007c1	48 03 c8	 add	 rcx, rax
  007c4	48 8b c1	 mov	 rax, rcx
  007c7	b9 08 00 00 00	 mov	 ecx, 8
  007cc	48 6b c9 18	 imul	 rcx, rcx, 24
  007d0	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  007d4	48 03 d1	 add	 rdx, rcx
  007d7	48 8b ca	 mov	 rcx, rdx
  007da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007df	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  007e6	4c 8b c1	 mov	 r8, rcx
  007e9	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  007ed	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  007f4	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  007f9	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1058 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[25], q_, &u_ptr[25]);

  007ff	b8 08 00 00 00	 mov	 eax, 8
  00804	48 6b c0 19	 imul	 rax, rax, 25
  00808	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0080c	48 03 c8	 add	 rcx, rax
  0080f	48 8b c1	 mov	 rax, rcx
  00812	b9 08 00 00 00	 mov	 ecx, 8
  00817	48 6b c9 19	 imul	 rcx, rcx, 25
  0081b	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0081f	48 03 d1	 add	 rdx, rcx
  00822	48 8b ca	 mov	 rcx, rdx
  00825	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0082a	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00831	4c 8b c1	 mov	 r8, rcx
  00834	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00838	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0083f	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00844	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1059 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[26], q_, &u_ptr[26]);

  0084a	b8 08 00 00 00	 mov	 eax, 8
  0084f	48 6b c0 1a	 imul	 rax, rax, 26
  00853	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00857	48 03 c8	 add	 rcx, rax
  0085a	48 8b c1	 mov	 rax, rcx
  0085d	b9 08 00 00 00	 mov	 ecx, 8
  00862	48 6b c9 1a	 imul	 rcx, rcx, 26
  00866	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0086a	48 03 d1	 add	 rdx, rcx
  0086d	48 8b ca	 mov	 rcx, rdx
  00870	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00875	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0087c	4c 8b c1	 mov	 r8, rcx
  0087f	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00883	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0088a	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0088f	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1060 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[27], q_, &u_ptr[27]);

  00895	b8 08 00 00 00	 mov	 eax, 8
  0089a	48 6b c0 1b	 imul	 rax, rax, 27
  0089e	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  008a2	48 03 c8	 add	 rcx, rax
  008a5	48 8b c1	 mov	 rax, rcx
  008a8	b9 08 00 00 00	 mov	 ecx, 8
  008ad	48 6b c9 1b	 imul	 rcx, rcx, 27
  008b1	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  008b5	48 03 d1	 add	 rdx, rcx
  008b8	48 8b ca	 mov	 rcx, rdx
  008bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008c0	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  008c7	4c 8b c1	 mov	 r8, rcx
  008ca	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  008ce	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  008d5	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  008da	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1061 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[28], q_, &u_ptr[28]);

  008e0	b8 08 00 00 00	 mov	 eax, 8
  008e5	48 6b c0 1c	 imul	 rax, rax, 28
  008e9	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  008ed	48 03 c8	 add	 rcx, rax
  008f0	48 8b c1	 mov	 rax, rcx
  008f3	b9 08 00 00 00	 mov	 ecx, 8
  008f8	48 6b c9 1c	 imul	 rcx, rcx, 28
  008fc	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00900	48 03 d1	 add	 rdx, rcx
  00903	48 8b ca	 mov	 rcx, rdx
  00906	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0090b	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00912	4c 8b c1	 mov	 r8, rcx
  00915	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00919	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00920	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00925	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1062 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[29], q_, &u_ptr[29]);

  0092b	b8 08 00 00 00	 mov	 eax, 8
  00930	48 6b c0 1d	 imul	 rax, rax, 29
  00934	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00938	48 03 c8	 add	 rcx, rax
  0093b	48 8b c1	 mov	 rax, rcx
  0093e	b9 08 00 00 00	 mov	 ecx, 8
  00943	48 6b c9 1d	 imul	 rcx, rcx, 29
  00947	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0094b	48 03 d1	 add	 rdx, rcx
  0094e	48 8b ca	 mov	 rcx, rdx
  00951	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00956	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0095d	4c 8b c1	 mov	 r8, rcx
  00960	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00964	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0096b	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00970	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1063 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[30], q_, &u_ptr[30]);

  00976	b8 08 00 00 00	 mov	 eax, 8
  0097b	48 6b c0 1e	 imul	 rax, rax, 30
  0097f	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00983	48 03 c8	 add	 rcx, rax
  00986	48 8b c1	 mov	 rax, rcx
  00989	b9 08 00 00 00	 mov	 ecx, 8
  0098e	48 6b c9 1e	 imul	 rcx, rcx, 30
  00992	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00996	48 03 d1	 add	 rdx, rcx
  00999	48 8b ca	 mov	 rcx, rdx
  0099c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009a1	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  009a8	4c 8b c1	 mov	 r8, rcx
  009ab	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  009af	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  009b6	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  009bb	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1064 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[31], q_, &u_ptr[31]);

  009c1	b8 08 00 00 00	 mov	 eax, 8
  009c6	48 6b c0 1f	 imul	 rax, rax, 31
  009ca	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  009ce	48 03 c8	 add	 rcx, rax
  009d1	48 8b c1	 mov	 rax, rcx
  009d4	b9 08 00 00 00	 mov	 ecx, 8
  009d9	48 6b c9 1f	 imul	 rcx, rcx, 31
  009dd	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  009e1	48 03 d1	 add	 rdx, rcx
  009e4	48 8b ca	 mov	 rcx, rdx
  009e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009ec	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  009f3	4c 8b c1	 mov	 r8, rcx
  009f6	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  009fa	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00a01	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00a06	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1065 :             u_ptr += 32;

  00a0c	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  00a10	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00a16	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1066 :             v_ptr += 32;

  00a1a	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  00a1e	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00a24	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1067 :             --count;

  00a28	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  00a2f	48 ff c8	 dec	 rax
  00a32	48 89 85 a8 00
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 1068 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1069 :             if (sizeof(k) == sizeof(_UINT64_T))

  00a39	33 c0		 xor	 eax, eax
  00a3b	83 f8 01	 cmp	 eax, 1
  00a3e	74 0c		 je	 SHORT $LN4@SubtructOn

; 1070 :                 AddToMULTI64Counter(32);

  00a40	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00a45	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 1071 :             else

  00a4a	eb 0a		 jmp	 SHORT $LN5@SubtructOn
$LN4@SubtructOn:

; 1072 :                 AddToMULTI32Counter(32);

  00a4c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00a51	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN5@SubtructOn:

; 1073 : #endif
; 1074 :         }

  00a56	e9 43 f6 ff ff	 jmp	 $LN2@SubtructOn
$LN3@SubtructOn:

; 1075 : 
; 1076 :         if (v_count & 0x10)

  00a5b	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00a5f	48 83 e0 10	 and	 rax, 16
  00a63	48 85 c0	 test	 rax, rax
  00a66	0f 84 e9 04 00
	00		 je	 $LN6@SubtructOn

; 1077 :         {
; 1078 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  00a6c	b8 08 00 00 00	 mov	 eax, 8
  00a71	48 6b c0 00	 imul	 rax, rax, 0
  00a75	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00a79	48 03 c8	 add	 rcx, rax
  00a7c	48 8b c1	 mov	 rax, rcx
  00a7f	b9 08 00 00 00	 mov	 ecx, 8
  00a84	48 6b c9 00	 imul	 rcx, rcx, 0
  00a88	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00a8c	48 03 d1	 add	 rdx, rcx
  00a8f	48 8b ca	 mov	 rcx, rdx
  00a92	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a97	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00a9e	4c 8b c1	 mov	 r8, rcx
  00aa1	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00aa5	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00aac	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00ab1	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1079 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  00ab7	b8 08 00 00 00	 mov	 eax, 8
  00abc	48 6b c0 01	 imul	 rax, rax, 1
  00ac0	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00ac4	48 03 c8	 add	 rcx, rax
  00ac7	48 8b c1	 mov	 rax, rcx
  00aca	b9 08 00 00 00	 mov	 ecx, 8
  00acf	48 6b c9 01	 imul	 rcx, rcx, 1
  00ad3	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00ad7	48 03 d1	 add	 rdx, rcx
  00ada	48 8b ca	 mov	 rcx, rdx
  00add	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ae2	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00ae9	4c 8b c1	 mov	 r8, rcx
  00aec	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00af0	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00af7	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00afc	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1080 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00b02	b8 08 00 00 00	 mov	 eax, 8
  00b07	48 6b c0 02	 imul	 rax, rax, 2
  00b0b	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00b0f	48 03 c8	 add	 rcx, rax
  00b12	48 8b c1	 mov	 rax, rcx
  00b15	b9 08 00 00 00	 mov	 ecx, 8
  00b1a	48 6b c9 02	 imul	 rcx, rcx, 2
  00b1e	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00b22	48 03 d1	 add	 rdx, rcx
  00b25	48 8b ca	 mov	 rcx, rdx
  00b28	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b2d	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00b34	4c 8b c1	 mov	 r8, rcx
  00b37	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00b3b	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00b42	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00b47	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1081 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  00b4d	b8 08 00 00 00	 mov	 eax, 8
  00b52	48 6b c0 03	 imul	 rax, rax, 3
  00b56	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00b5a	48 03 c8	 add	 rcx, rax
  00b5d	48 8b c1	 mov	 rax, rcx
  00b60	b9 08 00 00 00	 mov	 ecx, 8
  00b65	48 6b c9 03	 imul	 rcx, rcx, 3
  00b69	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00b6d	48 03 d1	 add	 rdx, rcx
  00b70	48 8b ca	 mov	 rcx, rdx
  00b73	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b78	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00b7f	4c 8b c1	 mov	 r8, rcx
  00b82	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00b86	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00b8d	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00b92	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1082 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  00b98	b8 08 00 00 00	 mov	 eax, 8
  00b9d	48 6b c0 04	 imul	 rax, rax, 4
  00ba1	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00ba5	48 03 c8	 add	 rcx, rax
  00ba8	48 8b c1	 mov	 rax, rcx
  00bab	b9 08 00 00 00	 mov	 ecx, 8
  00bb0	48 6b c9 04	 imul	 rcx, rcx, 4
  00bb4	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00bb8	48 03 d1	 add	 rdx, rcx
  00bbb	48 8b ca	 mov	 rcx, rdx
  00bbe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bc3	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00bca	4c 8b c1	 mov	 r8, rcx
  00bcd	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00bd1	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00bd8	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00bdd	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1083 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  00be3	b8 08 00 00 00	 mov	 eax, 8
  00be8	48 6b c0 05	 imul	 rax, rax, 5
  00bec	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00bf0	48 03 c8	 add	 rcx, rax
  00bf3	48 8b c1	 mov	 rax, rcx
  00bf6	b9 08 00 00 00	 mov	 ecx, 8
  00bfb	48 6b c9 05	 imul	 rcx, rcx, 5
  00bff	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00c03	48 03 d1	 add	 rdx, rcx
  00c06	48 8b ca	 mov	 rcx, rdx
  00c09	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c0e	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00c15	4c 8b c1	 mov	 r8, rcx
  00c18	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00c1c	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00c23	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00c28	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1084 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  00c2e	b8 08 00 00 00	 mov	 eax, 8
  00c33	48 6b c0 06	 imul	 rax, rax, 6
  00c37	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00c3b	48 03 c8	 add	 rcx, rax
  00c3e	48 8b c1	 mov	 rax, rcx
  00c41	b9 08 00 00 00	 mov	 ecx, 8
  00c46	48 6b c9 06	 imul	 rcx, rcx, 6
  00c4a	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00c4e	48 03 d1	 add	 rdx, rcx
  00c51	48 8b ca	 mov	 rcx, rdx
  00c54	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c59	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00c60	4c 8b c1	 mov	 r8, rcx
  00c63	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00c67	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00c6e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00c73	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1085 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  00c79	b8 08 00 00 00	 mov	 eax, 8
  00c7e	48 6b c0 07	 imul	 rax, rax, 7
  00c82	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00c86	48 03 c8	 add	 rcx, rax
  00c89	48 8b c1	 mov	 rax, rcx
  00c8c	b9 08 00 00 00	 mov	 ecx, 8
  00c91	48 6b c9 07	 imul	 rcx, rcx, 7
  00c95	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00c99	48 03 d1	 add	 rdx, rcx
  00c9c	48 8b ca	 mov	 rcx, rdx
  00c9f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ca4	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00cab	4c 8b c1	 mov	 r8, rcx
  00cae	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00cb2	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00cb9	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00cbe	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1086 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

  00cc4	b8 08 00 00 00	 mov	 eax, 8
  00cc9	48 6b c0 08	 imul	 rax, rax, 8
  00ccd	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00cd1	48 03 c8	 add	 rcx, rax
  00cd4	48 8b c1	 mov	 rax, rcx
  00cd7	b9 08 00 00 00	 mov	 ecx, 8
  00cdc	48 6b c9 08	 imul	 rcx, rcx, 8
  00ce0	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00ce4	48 03 d1	 add	 rdx, rcx
  00ce7	48 8b ca	 mov	 rcx, rdx
  00cea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00cef	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00cf6	4c 8b c1	 mov	 r8, rcx
  00cf9	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00cfd	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00d04	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00d09	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1087 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

  00d0f	b8 08 00 00 00	 mov	 eax, 8
  00d14	48 6b c0 09	 imul	 rax, rax, 9
  00d18	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00d1c	48 03 c8	 add	 rcx, rax
  00d1f	48 8b c1	 mov	 rax, rcx
  00d22	b9 08 00 00 00	 mov	 ecx, 8
  00d27	48 6b c9 09	 imul	 rcx, rcx, 9
  00d2b	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00d2f	48 03 d1	 add	 rdx, rcx
  00d32	48 8b ca	 mov	 rcx, rdx
  00d35	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d3a	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00d41	4c 8b c1	 mov	 r8, rcx
  00d44	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00d48	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00d4f	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00d54	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1088 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

  00d5a	b8 08 00 00 00	 mov	 eax, 8
  00d5f	48 6b c0 0a	 imul	 rax, rax, 10
  00d63	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00d67	48 03 c8	 add	 rcx, rax
  00d6a	48 8b c1	 mov	 rax, rcx
  00d6d	b9 08 00 00 00	 mov	 ecx, 8
  00d72	48 6b c9 0a	 imul	 rcx, rcx, 10
  00d76	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00d7a	48 03 d1	 add	 rdx, rcx
  00d7d	48 8b ca	 mov	 rcx, rdx
  00d80	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d85	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00d8c	4c 8b c1	 mov	 r8, rcx
  00d8f	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00d93	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00d9a	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00d9f	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1089 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

  00da5	b8 08 00 00 00	 mov	 eax, 8
  00daa	48 6b c0 0b	 imul	 rax, rax, 11
  00dae	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00db2	48 03 c8	 add	 rcx, rax
  00db5	48 8b c1	 mov	 rax, rcx
  00db8	b9 08 00 00 00	 mov	 ecx, 8
  00dbd	48 6b c9 0b	 imul	 rcx, rcx, 11
  00dc1	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00dc5	48 03 d1	 add	 rdx, rcx
  00dc8	48 8b ca	 mov	 rcx, rdx
  00dcb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00dd0	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00dd7	4c 8b c1	 mov	 r8, rcx
  00dda	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00dde	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00de5	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00dea	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1090 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

  00df0	b8 08 00 00 00	 mov	 eax, 8
  00df5	48 6b c0 0c	 imul	 rax, rax, 12
  00df9	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00dfd	48 03 c8	 add	 rcx, rax
  00e00	48 8b c1	 mov	 rax, rcx
  00e03	b9 08 00 00 00	 mov	 ecx, 8
  00e08	48 6b c9 0c	 imul	 rcx, rcx, 12
  00e0c	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00e10	48 03 d1	 add	 rdx, rcx
  00e13	48 8b ca	 mov	 rcx, rdx
  00e16	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e1b	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00e22	4c 8b c1	 mov	 r8, rcx
  00e25	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00e29	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00e30	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00e35	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1091 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

  00e3b	b8 08 00 00 00	 mov	 eax, 8
  00e40	48 6b c0 0d	 imul	 rax, rax, 13
  00e44	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00e48	48 03 c8	 add	 rcx, rax
  00e4b	48 8b c1	 mov	 rax, rcx
  00e4e	b9 08 00 00 00	 mov	 ecx, 8
  00e53	48 6b c9 0d	 imul	 rcx, rcx, 13
  00e57	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00e5b	48 03 d1	 add	 rdx, rcx
  00e5e	48 8b ca	 mov	 rcx, rdx
  00e61	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e66	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00e6d	4c 8b c1	 mov	 r8, rcx
  00e70	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00e74	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00e7b	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00e80	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1092 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

  00e86	b8 08 00 00 00	 mov	 eax, 8
  00e8b	48 6b c0 0e	 imul	 rax, rax, 14
  00e8f	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00e93	48 03 c8	 add	 rcx, rax
  00e96	48 8b c1	 mov	 rax, rcx
  00e99	b9 08 00 00 00	 mov	 ecx, 8
  00e9e	48 6b c9 0e	 imul	 rcx, rcx, 14
  00ea2	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00ea6	48 03 d1	 add	 rdx, rcx
  00ea9	48 8b ca	 mov	 rcx, rdx
  00eac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00eb1	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00eb8	4c 8b c1	 mov	 r8, rcx
  00ebb	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00ebf	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00ec6	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00ecb	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1093 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

  00ed1	b8 08 00 00 00	 mov	 eax, 8
  00ed6	48 6b c0 0f	 imul	 rax, rax, 15
  00eda	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00ede	48 03 c8	 add	 rcx, rax
  00ee1	48 8b c1	 mov	 rax, rcx
  00ee4	b9 08 00 00 00	 mov	 ecx, 8
  00ee9	48 6b c9 0f	 imul	 rcx, rcx, 15
  00eed	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00ef1	48 03 d1	 add	 rdx, rcx
  00ef4	48 8b ca	 mov	 rcx, rdx
  00ef7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00efc	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00f03	4c 8b c1	 mov	 r8, rcx
  00f06	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00f0a	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00f11	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00f16	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1094 :             u_ptr += 16;

  00f1c	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  00f20	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00f26	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1095 :             v_ptr += 16;

  00f2a	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  00f2e	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00f34	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1096 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1097 :             if (sizeof(k) == sizeof(_UINT64_T))

  00f38	33 c0		 xor	 eax, eax
  00f3a	83 f8 01	 cmp	 eax, 1
  00f3d	74 0c		 je	 SHORT $LN7@SubtructOn

; 1098 :                 AddToMULTI64Counter(16);

  00f3f	b9 10 00 00 00	 mov	 ecx, 16
  00f44	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 1099 :             else

  00f49	eb 0a		 jmp	 SHORT $LN8@SubtructOn
$LN7@SubtructOn:

; 1100 :                 AddToMULTI32Counter(16);

  00f4b	b9 10 00 00 00	 mov	 ecx, 16
  00f50	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN8@SubtructOn:
$LN6@SubtructOn:

; 1101 : #endif
; 1102 :         }
; 1103 : 
; 1104 :         if (v_count & 0x8)

  00f55	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00f59	48 83 e0 08	 and	 rax, 8
  00f5d	48 85 c0	 test	 rax, rax
  00f60	0f 84 8d 02 00
	00		 je	 $LN9@SubtructOn

; 1105 :         {
; 1106 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  00f66	b8 08 00 00 00	 mov	 eax, 8
  00f6b	48 6b c0 00	 imul	 rax, rax, 0
  00f6f	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00f73	48 03 c8	 add	 rcx, rax
  00f76	48 8b c1	 mov	 rax, rcx
  00f79	b9 08 00 00 00	 mov	 ecx, 8
  00f7e	48 6b c9 00	 imul	 rcx, rcx, 0
  00f82	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00f86	48 03 d1	 add	 rdx, rcx
  00f89	48 8b ca	 mov	 rcx, rdx
  00f8c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f91	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00f98	4c 8b c1	 mov	 r8, rcx
  00f9b	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00f9f	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00fa6	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00fab	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1107 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  00fb1	b8 08 00 00 00	 mov	 eax, 8
  00fb6	48 6b c0 01	 imul	 rax, rax, 1
  00fba	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00fbe	48 03 c8	 add	 rcx, rax
  00fc1	48 8b c1	 mov	 rax, rcx
  00fc4	b9 08 00 00 00	 mov	 ecx, 8
  00fc9	48 6b c9 01	 imul	 rcx, rcx, 1
  00fcd	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00fd1	48 03 d1	 add	 rdx, rcx
  00fd4	48 8b ca	 mov	 rcx, rdx
  00fd7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fdc	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00fe3	4c 8b c1	 mov	 r8, rcx
  00fe6	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00fea	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00ff1	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00ff6	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1108 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00ffc	b8 08 00 00 00	 mov	 eax, 8
  01001	48 6b c0 02	 imul	 rax, rax, 2
  01005	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01009	48 03 c8	 add	 rcx, rax
  0100c	48 8b c1	 mov	 rax, rcx
  0100f	b9 08 00 00 00	 mov	 ecx, 8
  01014	48 6b c9 02	 imul	 rcx, rcx, 2
  01018	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0101c	48 03 d1	 add	 rdx, rcx
  0101f	48 8b ca	 mov	 rcx, rdx
  01022	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01027	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0102e	4c 8b c1	 mov	 r8, rcx
  01031	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01035	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0103c	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  01041	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1109 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  01047	b8 08 00 00 00	 mov	 eax, 8
  0104c	48 6b c0 03	 imul	 rax, rax, 3
  01050	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01054	48 03 c8	 add	 rcx, rax
  01057	48 8b c1	 mov	 rax, rcx
  0105a	b9 08 00 00 00	 mov	 ecx, 8
  0105f	48 6b c9 03	 imul	 rcx, rcx, 3
  01063	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01067	48 03 d1	 add	 rdx, rcx
  0106a	48 8b ca	 mov	 rcx, rdx
  0106d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01072	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  01079	4c 8b c1	 mov	 r8, rcx
  0107c	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01080	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  01087	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0108c	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1110 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  01092	b8 08 00 00 00	 mov	 eax, 8
  01097	48 6b c0 04	 imul	 rax, rax, 4
  0109b	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0109f	48 03 c8	 add	 rcx, rax
  010a2	48 8b c1	 mov	 rax, rcx
  010a5	b9 08 00 00 00	 mov	 ecx, 8
  010aa	48 6b c9 04	 imul	 rcx, rcx, 4
  010ae	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  010b2	48 03 d1	 add	 rdx, rcx
  010b5	48 8b ca	 mov	 rcx, rdx
  010b8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010bd	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  010c4	4c 8b c1	 mov	 r8, rcx
  010c7	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  010cb	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  010d2	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  010d7	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1111 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  010dd	b8 08 00 00 00	 mov	 eax, 8
  010e2	48 6b c0 05	 imul	 rax, rax, 5
  010e6	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  010ea	48 03 c8	 add	 rcx, rax
  010ed	48 8b c1	 mov	 rax, rcx
  010f0	b9 08 00 00 00	 mov	 ecx, 8
  010f5	48 6b c9 05	 imul	 rcx, rcx, 5
  010f9	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  010fd	48 03 d1	 add	 rdx, rcx
  01100	48 8b ca	 mov	 rcx, rdx
  01103	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01108	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0110f	4c 8b c1	 mov	 r8, rcx
  01112	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01116	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0111d	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  01122	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1112 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  01128	b8 08 00 00 00	 mov	 eax, 8
  0112d	48 6b c0 06	 imul	 rax, rax, 6
  01131	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01135	48 03 c8	 add	 rcx, rax
  01138	48 8b c1	 mov	 rax, rcx
  0113b	b9 08 00 00 00	 mov	 ecx, 8
  01140	48 6b c9 06	 imul	 rcx, rcx, 6
  01144	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01148	48 03 d1	 add	 rdx, rcx
  0114b	48 8b ca	 mov	 rcx, rdx
  0114e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01153	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0115a	4c 8b c1	 mov	 r8, rcx
  0115d	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01161	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  01168	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0116d	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1113 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  01173	b8 08 00 00 00	 mov	 eax, 8
  01178	48 6b c0 07	 imul	 rax, rax, 7
  0117c	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01180	48 03 c8	 add	 rcx, rax
  01183	48 8b c1	 mov	 rax, rcx
  01186	b9 08 00 00 00	 mov	 ecx, 8
  0118b	48 6b c9 07	 imul	 rcx, rcx, 7
  0118f	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01193	48 03 d1	 add	 rdx, rcx
  01196	48 8b ca	 mov	 rcx, rdx
  01199	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0119e	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  011a5	4c 8b c1	 mov	 r8, rcx
  011a8	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  011ac	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  011b3	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  011b8	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1114 :             u_ptr += 8;

  011be	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  011c2	48 83 c0 40	 add	 rax, 64			; 00000040H
  011c6	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1115 :             v_ptr += 8;

  011ca	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  011ce	48 83 c0 40	 add	 rax, 64			; 00000040H
  011d2	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1116 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1117 :             if (sizeof(k) == sizeof(_UINT64_T))

  011d6	33 c0		 xor	 eax, eax
  011d8	83 f8 01	 cmp	 eax, 1
  011db	74 0c		 je	 SHORT $LN10@SubtructOn

; 1118 :                 AddToMULTI64Counter(8);

  011dd	b9 08 00 00 00	 mov	 ecx, 8
  011e2	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 1119 :             else

  011e7	eb 0a		 jmp	 SHORT $LN11@SubtructOn
$LN10@SubtructOn:

; 1120 :                 AddToMULTI32Counter(8);

  011e9	b9 08 00 00 00	 mov	 ecx, 8
  011ee	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN11@SubtructOn:
$LN9@SubtructOn:

; 1121 : #endif
; 1122 :         }
; 1123 : 
; 1124 :         if (v_count & 0x4)

  011f3	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  011f7	48 83 e0 04	 and	 rax, 4
  011fb	48 85 c0	 test	 rax, rax
  011fe	0f 84 61 01 00
	00		 je	 $LN12@SubtructOn

; 1125 :         {
; 1126 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  01204	b8 08 00 00 00	 mov	 eax, 8
  01209	48 6b c0 00	 imul	 rax, rax, 0
  0120d	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01211	48 03 c8	 add	 rcx, rax
  01214	48 8b c1	 mov	 rax, rcx
  01217	b9 08 00 00 00	 mov	 ecx, 8
  0121c	48 6b c9 00	 imul	 rcx, rcx, 0
  01220	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01224	48 03 d1	 add	 rdx, rcx
  01227	48 8b ca	 mov	 rcx, rdx
  0122a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0122f	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  01236	4c 8b c1	 mov	 r8, rcx
  01239	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0123d	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  01244	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  01249	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1127 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  0124f	b8 08 00 00 00	 mov	 eax, 8
  01254	48 6b c0 01	 imul	 rax, rax, 1
  01258	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0125c	48 03 c8	 add	 rcx, rax
  0125f	48 8b c1	 mov	 rax, rcx
  01262	b9 08 00 00 00	 mov	 ecx, 8
  01267	48 6b c9 01	 imul	 rcx, rcx, 1
  0126b	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0126f	48 03 d1	 add	 rdx, rcx
  01272	48 8b ca	 mov	 rcx, rdx
  01275	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0127a	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  01281	4c 8b c1	 mov	 r8, rcx
  01284	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01288	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0128f	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  01294	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1128 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  0129a	b8 08 00 00 00	 mov	 eax, 8
  0129f	48 6b c0 02	 imul	 rax, rax, 2
  012a3	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  012a7	48 03 c8	 add	 rcx, rax
  012aa	48 8b c1	 mov	 rax, rcx
  012ad	b9 08 00 00 00	 mov	 ecx, 8
  012b2	48 6b c9 02	 imul	 rcx, rcx, 2
  012b6	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  012ba	48 03 d1	 add	 rdx, rcx
  012bd	48 8b ca	 mov	 rcx, rdx
  012c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012c5	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  012cc	4c 8b c1	 mov	 r8, rcx
  012cf	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  012d3	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  012da	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  012df	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1129 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  012e5	b8 08 00 00 00	 mov	 eax, 8
  012ea	48 6b c0 03	 imul	 rax, rax, 3
  012ee	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  012f2	48 03 c8	 add	 rcx, rax
  012f5	48 8b c1	 mov	 rax, rcx
  012f8	b9 08 00 00 00	 mov	 ecx, 8
  012fd	48 6b c9 03	 imul	 rcx, rcx, 3
  01301	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01305	48 03 d1	 add	 rdx, rcx
  01308	48 8b ca	 mov	 rcx, rdx
  0130b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01310	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  01317	4c 8b c1	 mov	 r8, rcx
  0131a	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0131e	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  01325	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0132a	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1130 :             u_ptr += 4;

  01330	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  01334	48 83 c0 20	 add	 rax, 32			; 00000020H
  01338	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1131 :             v_ptr += 4;

  0133c	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  01340	48 83 c0 20	 add	 rax, 32			; 00000020H
  01344	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1132 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1133 :             if (sizeof(k) == sizeof(_UINT64_T))

  01348	33 c0		 xor	 eax, eax
  0134a	83 f8 01	 cmp	 eax, 1
  0134d	74 0c		 je	 SHORT $LN13@SubtructOn

; 1134 :                 AddToMULTI64Counter(4);

  0134f	b9 04 00 00 00	 mov	 ecx, 4
  01354	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 1135 :             else

  01359	eb 0a		 jmp	 SHORT $LN14@SubtructOn
$LN13@SubtructOn:

; 1136 :                 AddToMULTI32Counter(4);

  0135b	b9 04 00 00 00	 mov	 ecx, 4
  01360	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN14@SubtructOn:
$LN12@SubtructOn:

; 1137 : #endif
; 1138 :         }
; 1139 : 
; 1140 :         if (v_count & 0x2)

  01365	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  01369	48 83 e0 02	 and	 rax, 2
  0136d	48 85 c0	 test	 rax, rax
  01370	0f 84 cb 00 00
	00		 je	 $LN15@SubtructOn

; 1141 :         {
; 1142 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  01376	b8 08 00 00 00	 mov	 eax, 8
  0137b	48 6b c0 00	 imul	 rax, rax, 0
  0137f	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01383	48 03 c8	 add	 rcx, rax
  01386	48 8b c1	 mov	 rax, rcx
  01389	b9 08 00 00 00	 mov	 ecx, 8
  0138e	48 6b c9 00	 imul	 rcx, rcx, 0
  01392	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01396	48 03 d1	 add	 rdx, rcx
  01399	48 8b ca	 mov	 rcx, rdx
  0139c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013a1	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  013a8	4c 8b c1	 mov	 r8, rcx
  013ab	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  013af	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  013b6	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  013bb	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1143 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  013c1	b8 08 00 00 00	 mov	 eax, 8
  013c6	48 6b c0 01	 imul	 rax, rax, 1
  013ca	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  013ce	48 03 c8	 add	 rcx, rax
  013d1	48 8b c1	 mov	 rax, rcx
  013d4	b9 08 00 00 00	 mov	 ecx, 8
  013d9	48 6b c9 01	 imul	 rcx, rcx, 1
  013dd	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  013e1	48 03 d1	 add	 rdx, rcx
  013e4	48 8b ca	 mov	 rcx, rdx
  013e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013ec	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  013f3	4c 8b c1	 mov	 r8, rcx
  013f6	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  013fa	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  01401	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  01406	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1144 :             u_ptr += 2;

  0140c	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  01410	48 83 c0 10	 add	 rax, 16
  01414	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1145 :             v_ptr += 2;

  01418	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  0141c	48 83 c0 10	 add	 rax, 16
  01420	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1146 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1147 :             if (sizeof(k) == sizeof(_UINT64_T))

  01424	33 c0		 xor	 eax, eax
  01426	83 f8 01	 cmp	 eax, 1
  01429	74 0c		 je	 SHORT $LN16@SubtructOn

; 1148 :                 AddToMULTI64Counter(2);

  0142b	b9 02 00 00 00	 mov	 ecx, 2
  01430	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 1149 :             else

  01435	eb 0a		 jmp	 SHORT $LN17@SubtructOn
$LN16@SubtructOn:

; 1150 :                 AddToMULTI32Counter(2);

  01437	b9 02 00 00 00	 mov	 ecx, 2
  0143c	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN17@SubtructOn:
$LN15@SubtructOn:

; 1151 : #endif
; 1152 :         }
; 1153 : 
; 1154 :         if (v_count & 0x1)

  01441	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  01445	48 83 e0 01	 and	 rax, 1
  01449	48 85 c0	 test	 rax, rax
  0144c	74 76		 je	 SHORT $LN18@SubtructOn

; 1155 :         {
; 1156 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  0144e	b8 08 00 00 00	 mov	 eax, 8
  01453	48 6b c0 00	 imul	 rax, rax, 0
  01457	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0145b	48 03 c8	 add	 rcx, rax
  0145e	48 8b c1	 mov	 rax, rcx
  01461	b9 08 00 00 00	 mov	 ecx, 8
  01466	48 6b c9 00	 imul	 rcx, rcx, 0
  0146a	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0146e	48 03 d1	 add	 rdx, rcx
  01471	48 8b ca	 mov	 rcx, rdx
  01474	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01479	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  01480	4c 8b c1	 mov	 r8, rcx
  01483	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01487	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0148e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  01493	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1157 :             u_ptr += 1;

  01499	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  0149d	48 83 c0 08	 add	 rax, 8
  014a1	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1158 :             v_ptr += 1;

  014a5	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  014a9	48 83 c0 08	 add	 rax, 8
  014ad	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1159 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1160 :             if (sizeof(k) == sizeof(_UINT64_T))

  014b1	33 c0		 xor	 eax, eax
  014b3	83 f8 01	 cmp	 eax, 1
  014b6	74 07		 je	 SHORT $LN19@SubtructOn

; 1161 :                 IncrementMULTI64Counter();

  014b8	e8 00 00 00 00	 call	 ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter

; 1162 :             else

  014bd	eb 05		 jmp	 SHORT $LN20@SubtructOn
$LN19@SubtructOn:

; 1163 :                 IncrementMULTI32Counter();

  014bf	e8 00 00 00 00	 call	 ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
$LN20@SubtructOn:
$LN18@SubtructOn:

; 1164 : #endif
; 1165 :         }
; 1166 : 
; 1167 :         c = _SUBTRUCT_UNIT(c, *u_ptr, k, u_ptr);

  014c4	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  014c8	4c 8b 45 68	 mov	 r8, QWORD PTR k$[rbp]
  014cc	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  014d0	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  014d3	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  014da	e8 00 00 00 00	 call	 _SUBTRUCT_UNIT
  014df	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1168 :         u_ptr += 1;

  014e5	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  014e9	48 83 c0 08	 add	 rax, 8
  014ed	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1169 : 
; 1170 :         return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

  014f1	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  014f8	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  014ff	48 8d 44 c8 08	 lea	 rax, QWORD PTR [rax+rcx*8+8]
  01504	48 2b 45 08	 sub	 rax, QWORD PTR u_ptr$[rbp]
  01508	48 c1 f8 03	 sar	 rax, 3
  0150c	4c 8b c0	 mov	 r8, rax
  0150f	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  01513	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0151a	e8 00 00 00 00	 call	 ?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPEA_K_K@Z ; Palmtree::Math::Core::Internal::DoBorrow

; 1171 :     }

  0151f	48 8b f8	 mov	 rdi, rax
  01522	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  01526	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcFrameData
  0152d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  01532	48 8b c7	 mov	 rax, rdi
  01535	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  0153c	5f		 pop	 rdi
  0153d	5d		 pop	 rbp
  0153e	c3		 ret	 0
?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z ENDP ; Palmtree::Math::Core::Internal::SubtructOneLineX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z
_TEXT	SEGMENT
u_ptr$ = 8
v_ptr$ = 40
v_count$ = 72
k$ = 104
c$ = 132
count$ = 168
u_buf$ = 416
u_buf_len$ = 424
v_buf$ = 432
v_buf_len$ = 440
q_index$ = 448
q_$ = 456
?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z PROC ; Palmtree::Math::Core::Internal::SubtructOneLine, COMDAT

; 872  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 6e 00 00 00	 mov	 ecx, 110		; 0000006eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+472]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 873  :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  00045	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0004c	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR q_index$[rbp]
  00053	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00057	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 874  :         __UNIT_TYPE* v_ptr = &v_buf[0];

  0005b	b8 08 00 00 00	 mov	 eax, 8
  00060	48 6b c0 00	 imul	 rax, rax, 0
  00064	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR v_buf$[rbp]
  0006b	48 03 c8	 add	 rcx, rax
  0006e	48 8b c1	 mov	 rax, rcx
  00071	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 875  :         __UNIT_TYPE v_count = v_buf_len;

  00075	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR v_buf_len$[rbp]
  0007c	48 89 45 48	 mov	 QWORD PTR v_count$[rbp], rax

; 876  :         __UNIT_TYPE k = 0;

  00080	48 c7 45 68 00
	00 00 00	 mov	 QWORD PTR k$[rbp], 0

; 877  :         char c = 0;

  00088	c6 85 84 00 00
	00 00		 mov	 BYTE PTR c$[rbp], 0

; 878  : 
; 879  :         __UNIT_TYPE count = v_count >> 5;

  0008f	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00093	48 c1 e8 05	 shr	 rax, 5
  00097	48 89 85 a8 00
	00 00		 mov	 QWORD PTR count$[rbp], rax
$LN2@SubtructOn:

; 880  :         while (count != 0)

  0009e	48 83 bd a8 00
	00 00 00	 cmp	 QWORD PTR count$[rbp], 0
  000a6	0f 84 af 09 00
	00		 je	 $LN3@SubtructOn

; 881  :         {
; 882  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  000ac	b8 08 00 00 00	 mov	 eax, 8
  000b1	48 6b c0 00	 imul	 rax, rax, 0
  000b5	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  000b9	48 03 c8	 add	 rcx, rax
  000bc	48 8b c1	 mov	 rax, rcx
  000bf	b9 08 00 00 00	 mov	 ecx, 8
  000c4	48 6b c9 00	 imul	 rcx, rcx, 0
  000c8	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  000cc	48 03 d1	 add	 rdx, rcx
  000cf	48 8b ca	 mov	 rcx, rdx
  000d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d7	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  000de	4c 8b c1	 mov	 r8, rcx
  000e1	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  000e5	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000ec	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  000f1	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 883  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  000f7	b8 08 00 00 00	 mov	 eax, 8
  000fc	48 6b c0 01	 imul	 rax, rax, 1
  00100	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00104	48 03 c8	 add	 rcx, rax
  00107	48 8b c1	 mov	 rax, rcx
  0010a	b9 08 00 00 00	 mov	 ecx, 8
  0010f	48 6b c9 01	 imul	 rcx, rcx, 1
  00113	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00117	48 03 d1	 add	 rdx, rcx
  0011a	48 8b ca	 mov	 rcx, rdx
  0011d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00122	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00129	4c 8b c1	 mov	 r8, rcx
  0012c	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00130	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00137	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0013c	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 884  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00142	b8 08 00 00 00	 mov	 eax, 8
  00147	48 6b c0 02	 imul	 rax, rax, 2
  0014b	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0014f	48 03 c8	 add	 rcx, rax
  00152	48 8b c1	 mov	 rax, rcx
  00155	b9 08 00 00 00	 mov	 ecx, 8
  0015a	48 6b c9 02	 imul	 rcx, rcx, 2
  0015e	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00162	48 03 d1	 add	 rdx, rcx
  00165	48 8b ca	 mov	 rcx, rdx
  00168	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016d	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00174	4c 8b c1	 mov	 r8, rcx
  00177	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0017b	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00182	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00187	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 885  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  0018d	b8 08 00 00 00	 mov	 eax, 8
  00192	48 6b c0 03	 imul	 rax, rax, 3
  00196	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0019a	48 03 c8	 add	 rcx, rax
  0019d	48 8b c1	 mov	 rax, rcx
  001a0	b9 08 00 00 00	 mov	 ecx, 8
  001a5	48 6b c9 03	 imul	 rcx, rcx, 3
  001a9	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  001ad	48 03 d1	 add	 rdx, rcx
  001b0	48 8b ca	 mov	 rcx, rdx
  001b3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b8	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  001bf	4c 8b c1	 mov	 r8, rcx
  001c2	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  001c6	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001cd	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  001d2	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 886  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  001d8	b8 08 00 00 00	 mov	 eax, 8
  001dd	48 6b c0 04	 imul	 rax, rax, 4
  001e1	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  001e5	48 03 c8	 add	 rcx, rax
  001e8	48 8b c1	 mov	 rax, rcx
  001eb	b9 08 00 00 00	 mov	 ecx, 8
  001f0	48 6b c9 04	 imul	 rcx, rcx, 4
  001f4	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  001f8	48 03 d1	 add	 rdx, rcx
  001fb	48 8b ca	 mov	 rcx, rdx
  001fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00203	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0020a	4c 8b c1	 mov	 r8, rcx
  0020d	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00211	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00218	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0021d	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 887  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  00223	b8 08 00 00 00	 mov	 eax, 8
  00228	48 6b c0 05	 imul	 rax, rax, 5
  0022c	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00230	48 03 c8	 add	 rcx, rax
  00233	48 8b c1	 mov	 rax, rcx
  00236	b9 08 00 00 00	 mov	 ecx, 8
  0023b	48 6b c9 05	 imul	 rcx, rcx, 5
  0023f	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00243	48 03 d1	 add	 rdx, rcx
  00246	48 8b ca	 mov	 rcx, rdx
  00249	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024e	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00255	4c 8b c1	 mov	 r8, rcx
  00258	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0025c	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00263	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00268	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 888  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  0026e	b8 08 00 00 00	 mov	 eax, 8
  00273	48 6b c0 06	 imul	 rax, rax, 6
  00277	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0027b	48 03 c8	 add	 rcx, rax
  0027e	48 8b c1	 mov	 rax, rcx
  00281	b9 08 00 00 00	 mov	 ecx, 8
  00286	48 6b c9 06	 imul	 rcx, rcx, 6
  0028a	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0028e	48 03 d1	 add	 rdx, rcx
  00291	48 8b ca	 mov	 rcx, rdx
  00294	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00299	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  002a0	4c 8b c1	 mov	 r8, rcx
  002a3	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  002a7	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002ae	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  002b3	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 889  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  002b9	b8 08 00 00 00	 mov	 eax, 8
  002be	48 6b c0 07	 imul	 rax, rax, 7
  002c2	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  002c6	48 03 c8	 add	 rcx, rax
  002c9	48 8b c1	 mov	 rax, rcx
  002cc	b9 08 00 00 00	 mov	 ecx, 8
  002d1	48 6b c9 07	 imul	 rcx, rcx, 7
  002d5	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  002d9	48 03 d1	 add	 rdx, rcx
  002dc	48 8b ca	 mov	 rcx, rdx
  002df	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e4	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  002eb	4c 8b c1	 mov	 r8, rcx
  002ee	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  002f2	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002f9	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  002fe	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 890  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[8], q_, &u_ptr[8]);

  00304	b8 08 00 00 00	 mov	 eax, 8
  00309	48 6b c0 08	 imul	 rax, rax, 8
  0030d	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00311	48 03 c8	 add	 rcx, rax
  00314	48 8b c1	 mov	 rax, rcx
  00317	b9 08 00 00 00	 mov	 ecx, 8
  0031c	48 6b c9 08	 imul	 rcx, rcx, 8
  00320	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00324	48 03 d1	 add	 rdx, rcx
  00327	48 8b ca	 mov	 rcx, rdx
  0032a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032f	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00336	4c 8b c1	 mov	 r8, rcx
  00339	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0033d	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00344	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00349	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 891  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[9], q_, &u_ptr[9]);

  0034f	b8 08 00 00 00	 mov	 eax, 8
  00354	48 6b c0 09	 imul	 rax, rax, 9
  00358	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0035c	48 03 c8	 add	 rcx, rax
  0035f	48 8b c1	 mov	 rax, rcx
  00362	b9 08 00 00 00	 mov	 ecx, 8
  00367	48 6b c9 09	 imul	 rcx, rcx, 9
  0036b	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0036f	48 03 d1	 add	 rdx, rcx
  00372	48 8b ca	 mov	 rcx, rdx
  00375	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0037a	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00381	4c 8b c1	 mov	 r8, rcx
  00384	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00388	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0038f	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00394	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 892  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[10], q_, &u_ptr[10]);

  0039a	b8 08 00 00 00	 mov	 eax, 8
  0039f	48 6b c0 0a	 imul	 rax, rax, 10
  003a3	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  003a7	48 03 c8	 add	 rcx, rax
  003aa	48 8b c1	 mov	 rax, rcx
  003ad	b9 08 00 00 00	 mov	 ecx, 8
  003b2	48 6b c9 0a	 imul	 rcx, rcx, 10
  003b6	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  003ba	48 03 d1	 add	 rdx, rcx
  003bd	48 8b ca	 mov	 rcx, rdx
  003c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c5	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  003cc	4c 8b c1	 mov	 r8, rcx
  003cf	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  003d3	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  003da	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  003df	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 893  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[11], q_, &u_ptr[11]);

  003e5	b8 08 00 00 00	 mov	 eax, 8
  003ea	48 6b c0 0b	 imul	 rax, rax, 11
  003ee	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  003f2	48 03 c8	 add	 rcx, rax
  003f5	48 8b c1	 mov	 rax, rcx
  003f8	b9 08 00 00 00	 mov	 ecx, 8
  003fd	48 6b c9 0b	 imul	 rcx, rcx, 11
  00401	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00405	48 03 d1	 add	 rdx, rcx
  00408	48 8b ca	 mov	 rcx, rdx
  0040b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00410	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00417	4c 8b c1	 mov	 r8, rcx
  0041a	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0041e	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00425	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0042a	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 894  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[12], q_, &u_ptr[12]);

  00430	b8 08 00 00 00	 mov	 eax, 8
  00435	48 6b c0 0c	 imul	 rax, rax, 12
  00439	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0043d	48 03 c8	 add	 rcx, rax
  00440	48 8b c1	 mov	 rax, rcx
  00443	b9 08 00 00 00	 mov	 ecx, 8
  00448	48 6b c9 0c	 imul	 rcx, rcx, 12
  0044c	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00450	48 03 d1	 add	 rdx, rcx
  00453	48 8b ca	 mov	 rcx, rdx
  00456	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0045b	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00462	4c 8b c1	 mov	 r8, rcx
  00465	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00469	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00470	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00475	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 895  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[13], q_, &u_ptr[13]);

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 0d	 imul	 rax, rax, 13
  00484	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00488	48 03 c8	 add	 rcx, rax
  0048b	48 8b c1	 mov	 rax, rcx
  0048e	b9 08 00 00 00	 mov	 ecx, 8
  00493	48 6b c9 0d	 imul	 rcx, rcx, 13
  00497	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0049b	48 03 d1	 add	 rdx, rcx
  0049e	48 8b ca	 mov	 rcx, rdx
  004a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a6	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  004ad	4c 8b c1	 mov	 r8, rcx
  004b0	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  004b4	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  004bb	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  004c0	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 896  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[14], q_, &u_ptr[14]);

  004c6	b8 08 00 00 00	 mov	 eax, 8
  004cb	48 6b c0 0e	 imul	 rax, rax, 14
  004cf	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  004d3	48 03 c8	 add	 rcx, rax
  004d6	48 8b c1	 mov	 rax, rcx
  004d9	b9 08 00 00 00	 mov	 ecx, 8
  004de	48 6b c9 0e	 imul	 rcx, rcx, 14
  004e2	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  004e6	48 03 d1	 add	 rdx, rcx
  004e9	48 8b ca	 mov	 rcx, rdx
  004ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004f1	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  004f8	4c 8b c1	 mov	 r8, rcx
  004fb	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  004ff	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00506	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0050b	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 897  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[15], q_, &u_ptr[15]);

  00511	b8 08 00 00 00	 mov	 eax, 8
  00516	48 6b c0 0f	 imul	 rax, rax, 15
  0051a	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0051e	48 03 c8	 add	 rcx, rax
  00521	48 8b c1	 mov	 rax, rcx
  00524	b9 08 00 00 00	 mov	 ecx, 8
  00529	48 6b c9 0f	 imul	 rcx, rcx, 15
  0052d	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00531	48 03 d1	 add	 rdx, rcx
  00534	48 8b ca	 mov	 rcx, rdx
  00537	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0053c	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00543	4c 8b c1	 mov	 r8, rcx
  00546	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0054a	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00551	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00556	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 898  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[16], q_, &u_ptr[16]);

  0055c	b8 08 00 00 00	 mov	 eax, 8
  00561	48 6b c0 10	 imul	 rax, rax, 16
  00565	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00569	48 03 c8	 add	 rcx, rax
  0056c	48 8b c1	 mov	 rax, rcx
  0056f	b9 08 00 00 00	 mov	 ecx, 8
  00574	48 6b c9 10	 imul	 rcx, rcx, 16
  00578	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0057c	48 03 d1	 add	 rdx, rcx
  0057f	48 8b ca	 mov	 rcx, rdx
  00582	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00587	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0058e	4c 8b c1	 mov	 r8, rcx
  00591	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00595	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0059c	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  005a1	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 899  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[17], q_, &u_ptr[17]);

  005a7	b8 08 00 00 00	 mov	 eax, 8
  005ac	48 6b c0 11	 imul	 rax, rax, 17
  005b0	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  005b4	48 03 c8	 add	 rcx, rax
  005b7	48 8b c1	 mov	 rax, rcx
  005ba	b9 08 00 00 00	 mov	 ecx, 8
  005bf	48 6b c9 11	 imul	 rcx, rcx, 17
  005c3	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  005c7	48 03 d1	 add	 rdx, rcx
  005ca	48 8b ca	 mov	 rcx, rdx
  005cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005d2	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  005d9	4c 8b c1	 mov	 r8, rcx
  005dc	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  005e0	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  005e7	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  005ec	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 900  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[18], q_, &u_ptr[18]);

  005f2	b8 08 00 00 00	 mov	 eax, 8
  005f7	48 6b c0 12	 imul	 rax, rax, 18
  005fb	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  005ff	48 03 c8	 add	 rcx, rax
  00602	48 8b c1	 mov	 rax, rcx
  00605	b9 08 00 00 00	 mov	 ecx, 8
  0060a	48 6b c9 12	 imul	 rcx, rcx, 18
  0060e	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00612	48 03 d1	 add	 rdx, rcx
  00615	48 8b ca	 mov	 rcx, rdx
  00618	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0061d	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00624	4c 8b c1	 mov	 r8, rcx
  00627	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0062b	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00632	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00637	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 901  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[19], q_, &u_ptr[19]);

  0063d	b8 08 00 00 00	 mov	 eax, 8
  00642	48 6b c0 13	 imul	 rax, rax, 19
  00646	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0064a	48 03 c8	 add	 rcx, rax
  0064d	48 8b c1	 mov	 rax, rcx
  00650	b9 08 00 00 00	 mov	 ecx, 8
  00655	48 6b c9 13	 imul	 rcx, rcx, 19
  00659	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0065d	48 03 d1	 add	 rdx, rcx
  00660	48 8b ca	 mov	 rcx, rdx
  00663	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00668	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0066f	4c 8b c1	 mov	 r8, rcx
  00672	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00676	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0067d	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00682	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 902  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[20], q_, &u_ptr[20]);

  00688	b8 08 00 00 00	 mov	 eax, 8
  0068d	48 6b c0 14	 imul	 rax, rax, 20
  00691	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00695	48 03 c8	 add	 rcx, rax
  00698	48 8b c1	 mov	 rax, rcx
  0069b	b9 08 00 00 00	 mov	 ecx, 8
  006a0	48 6b c9 14	 imul	 rcx, rcx, 20
  006a4	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  006a8	48 03 d1	 add	 rdx, rcx
  006ab	48 8b ca	 mov	 rcx, rdx
  006ae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006b3	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  006ba	4c 8b c1	 mov	 r8, rcx
  006bd	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  006c1	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  006c8	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  006cd	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 903  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[21], q_, &u_ptr[21]);

  006d3	b8 08 00 00 00	 mov	 eax, 8
  006d8	48 6b c0 15	 imul	 rax, rax, 21
  006dc	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  006e0	48 03 c8	 add	 rcx, rax
  006e3	48 8b c1	 mov	 rax, rcx
  006e6	b9 08 00 00 00	 mov	 ecx, 8
  006eb	48 6b c9 15	 imul	 rcx, rcx, 21
  006ef	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  006f3	48 03 d1	 add	 rdx, rcx
  006f6	48 8b ca	 mov	 rcx, rdx
  006f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006fe	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00705	4c 8b c1	 mov	 r8, rcx
  00708	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0070c	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00713	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00718	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 904  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[22], q_, &u_ptr[22]);

  0071e	b8 08 00 00 00	 mov	 eax, 8
  00723	48 6b c0 16	 imul	 rax, rax, 22
  00727	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0072b	48 03 c8	 add	 rcx, rax
  0072e	48 8b c1	 mov	 rax, rcx
  00731	b9 08 00 00 00	 mov	 ecx, 8
  00736	48 6b c9 16	 imul	 rcx, rcx, 22
  0073a	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0073e	48 03 d1	 add	 rdx, rcx
  00741	48 8b ca	 mov	 rcx, rdx
  00744	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00749	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00750	4c 8b c1	 mov	 r8, rcx
  00753	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00757	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0075e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00763	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 905  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[23], q_, &u_ptr[23]);

  00769	b8 08 00 00 00	 mov	 eax, 8
  0076e	48 6b c0 17	 imul	 rax, rax, 23
  00772	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00776	48 03 c8	 add	 rcx, rax
  00779	48 8b c1	 mov	 rax, rcx
  0077c	b9 08 00 00 00	 mov	 ecx, 8
  00781	48 6b c9 17	 imul	 rcx, rcx, 23
  00785	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00789	48 03 d1	 add	 rdx, rcx
  0078c	48 8b ca	 mov	 rcx, rdx
  0078f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00794	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0079b	4c 8b c1	 mov	 r8, rcx
  0079e	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  007a2	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  007a9	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  007ae	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 906  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[24], q_, &u_ptr[24]);

  007b4	b8 08 00 00 00	 mov	 eax, 8
  007b9	48 6b c0 18	 imul	 rax, rax, 24
  007bd	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  007c1	48 03 c8	 add	 rcx, rax
  007c4	48 8b c1	 mov	 rax, rcx
  007c7	b9 08 00 00 00	 mov	 ecx, 8
  007cc	48 6b c9 18	 imul	 rcx, rcx, 24
  007d0	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  007d4	48 03 d1	 add	 rdx, rcx
  007d7	48 8b ca	 mov	 rcx, rdx
  007da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007df	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  007e6	4c 8b c1	 mov	 r8, rcx
  007e9	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  007ed	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  007f4	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  007f9	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 907  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[25], q_, &u_ptr[25]);

  007ff	b8 08 00 00 00	 mov	 eax, 8
  00804	48 6b c0 19	 imul	 rax, rax, 25
  00808	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0080c	48 03 c8	 add	 rcx, rax
  0080f	48 8b c1	 mov	 rax, rcx
  00812	b9 08 00 00 00	 mov	 ecx, 8
  00817	48 6b c9 19	 imul	 rcx, rcx, 25
  0081b	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0081f	48 03 d1	 add	 rdx, rcx
  00822	48 8b ca	 mov	 rcx, rdx
  00825	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0082a	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00831	4c 8b c1	 mov	 r8, rcx
  00834	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00838	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0083f	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00844	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 908  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[26], q_, &u_ptr[26]);

  0084a	b8 08 00 00 00	 mov	 eax, 8
  0084f	48 6b c0 1a	 imul	 rax, rax, 26
  00853	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00857	48 03 c8	 add	 rcx, rax
  0085a	48 8b c1	 mov	 rax, rcx
  0085d	b9 08 00 00 00	 mov	 ecx, 8
  00862	48 6b c9 1a	 imul	 rcx, rcx, 26
  00866	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0086a	48 03 d1	 add	 rdx, rcx
  0086d	48 8b ca	 mov	 rcx, rdx
  00870	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00875	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0087c	4c 8b c1	 mov	 r8, rcx
  0087f	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00883	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0088a	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0088f	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 909  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[27], q_, &u_ptr[27]);

  00895	b8 08 00 00 00	 mov	 eax, 8
  0089a	48 6b c0 1b	 imul	 rax, rax, 27
  0089e	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  008a2	48 03 c8	 add	 rcx, rax
  008a5	48 8b c1	 mov	 rax, rcx
  008a8	b9 08 00 00 00	 mov	 ecx, 8
  008ad	48 6b c9 1b	 imul	 rcx, rcx, 27
  008b1	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  008b5	48 03 d1	 add	 rdx, rcx
  008b8	48 8b ca	 mov	 rcx, rdx
  008bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008c0	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  008c7	4c 8b c1	 mov	 r8, rcx
  008ca	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  008ce	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  008d5	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  008da	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 910  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[28], q_, &u_ptr[28]);

  008e0	b8 08 00 00 00	 mov	 eax, 8
  008e5	48 6b c0 1c	 imul	 rax, rax, 28
  008e9	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  008ed	48 03 c8	 add	 rcx, rax
  008f0	48 8b c1	 mov	 rax, rcx
  008f3	b9 08 00 00 00	 mov	 ecx, 8
  008f8	48 6b c9 1c	 imul	 rcx, rcx, 28
  008fc	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00900	48 03 d1	 add	 rdx, rcx
  00903	48 8b ca	 mov	 rcx, rdx
  00906	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0090b	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00912	4c 8b c1	 mov	 r8, rcx
  00915	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00919	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00920	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00925	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 911  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[29], q_, &u_ptr[29]);

  0092b	b8 08 00 00 00	 mov	 eax, 8
  00930	48 6b c0 1d	 imul	 rax, rax, 29
  00934	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00938	48 03 c8	 add	 rcx, rax
  0093b	48 8b c1	 mov	 rax, rcx
  0093e	b9 08 00 00 00	 mov	 ecx, 8
  00943	48 6b c9 1d	 imul	 rcx, rcx, 29
  00947	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0094b	48 03 d1	 add	 rdx, rcx
  0094e	48 8b ca	 mov	 rcx, rdx
  00951	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00956	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0095d	4c 8b c1	 mov	 r8, rcx
  00960	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00964	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0096b	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00970	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 912  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[30], q_, &u_ptr[30]);

  00976	b8 08 00 00 00	 mov	 eax, 8
  0097b	48 6b c0 1e	 imul	 rax, rax, 30
  0097f	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00983	48 03 c8	 add	 rcx, rax
  00986	48 8b c1	 mov	 rax, rcx
  00989	b9 08 00 00 00	 mov	 ecx, 8
  0098e	48 6b c9 1e	 imul	 rcx, rcx, 30
  00992	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00996	48 03 d1	 add	 rdx, rcx
  00999	48 8b ca	 mov	 rcx, rdx
  0099c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009a1	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  009a8	4c 8b c1	 mov	 r8, rcx
  009ab	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  009af	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  009b6	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  009bb	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 913  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[31], q_, &u_ptr[31]);

  009c1	b8 08 00 00 00	 mov	 eax, 8
  009c6	48 6b c0 1f	 imul	 rax, rax, 31
  009ca	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  009ce	48 03 c8	 add	 rcx, rax
  009d1	48 8b c1	 mov	 rax, rcx
  009d4	b9 08 00 00 00	 mov	 ecx, 8
  009d9	48 6b c9 1f	 imul	 rcx, rcx, 31
  009dd	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  009e1	48 03 d1	 add	 rdx, rcx
  009e4	48 8b ca	 mov	 rcx, rdx
  009e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009ec	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  009f3	4c 8b c1	 mov	 r8, rcx
  009f6	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  009fa	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00a01	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00a06	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 914  :             u_ptr += 32;

  00a0c	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  00a10	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00a16	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 915  :             v_ptr += 32;

  00a1a	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  00a1e	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00a24	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 916  :             --count;

  00a28	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  00a2f	48 ff c8	 dec	 rax
  00a32	48 89 85 a8 00
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 917  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 918  :             if (sizeof(k) == sizeof(_UINT64_T))

  00a39	33 c0		 xor	 eax, eax
  00a3b	83 f8 01	 cmp	 eax, 1
  00a3e	74 0c		 je	 SHORT $LN4@SubtructOn

; 919  :                 AddToMULTI64Counter(32);

  00a40	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00a45	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 920  :             else

  00a4a	eb 0a		 jmp	 SHORT $LN5@SubtructOn
$LN4@SubtructOn:

; 921  :                 AddToMULTI32Counter(32);

  00a4c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00a51	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN5@SubtructOn:

; 922  : #endif
; 923  :         }

  00a56	e9 43 f6 ff ff	 jmp	 $LN2@SubtructOn
$LN3@SubtructOn:

; 924  : 
; 925  :         if (v_count & 0x10)

  00a5b	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00a5f	48 83 e0 10	 and	 rax, 16
  00a63	48 85 c0	 test	 rax, rax
  00a66	0f 84 e9 04 00
	00		 je	 $LN6@SubtructOn

; 926  :         {
; 927  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  00a6c	b8 08 00 00 00	 mov	 eax, 8
  00a71	48 6b c0 00	 imul	 rax, rax, 0
  00a75	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00a79	48 03 c8	 add	 rcx, rax
  00a7c	48 8b c1	 mov	 rax, rcx
  00a7f	b9 08 00 00 00	 mov	 ecx, 8
  00a84	48 6b c9 00	 imul	 rcx, rcx, 0
  00a88	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00a8c	48 03 d1	 add	 rdx, rcx
  00a8f	48 8b ca	 mov	 rcx, rdx
  00a92	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a97	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00a9e	4c 8b c1	 mov	 r8, rcx
  00aa1	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00aa5	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00aac	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00ab1	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 928  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  00ab7	b8 08 00 00 00	 mov	 eax, 8
  00abc	48 6b c0 01	 imul	 rax, rax, 1
  00ac0	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00ac4	48 03 c8	 add	 rcx, rax
  00ac7	48 8b c1	 mov	 rax, rcx
  00aca	b9 08 00 00 00	 mov	 ecx, 8
  00acf	48 6b c9 01	 imul	 rcx, rcx, 1
  00ad3	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00ad7	48 03 d1	 add	 rdx, rcx
  00ada	48 8b ca	 mov	 rcx, rdx
  00add	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ae2	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00ae9	4c 8b c1	 mov	 r8, rcx
  00aec	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00af0	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00af7	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00afc	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 929  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00b02	b8 08 00 00 00	 mov	 eax, 8
  00b07	48 6b c0 02	 imul	 rax, rax, 2
  00b0b	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00b0f	48 03 c8	 add	 rcx, rax
  00b12	48 8b c1	 mov	 rax, rcx
  00b15	b9 08 00 00 00	 mov	 ecx, 8
  00b1a	48 6b c9 02	 imul	 rcx, rcx, 2
  00b1e	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00b22	48 03 d1	 add	 rdx, rcx
  00b25	48 8b ca	 mov	 rcx, rdx
  00b28	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b2d	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00b34	4c 8b c1	 mov	 r8, rcx
  00b37	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00b3b	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00b42	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00b47	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 930  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  00b4d	b8 08 00 00 00	 mov	 eax, 8
  00b52	48 6b c0 03	 imul	 rax, rax, 3
  00b56	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00b5a	48 03 c8	 add	 rcx, rax
  00b5d	48 8b c1	 mov	 rax, rcx
  00b60	b9 08 00 00 00	 mov	 ecx, 8
  00b65	48 6b c9 03	 imul	 rcx, rcx, 3
  00b69	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00b6d	48 03 d1	 add	 rdx, rcx
  00b70	48 8b ca	 mov	 rcx, rdx
  00b73	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b78	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00b7f	4c 8b c1	 mov	 r8, rcx
  00b82	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00b86	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00b8d	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00b92	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 931  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  00b98	b8 08 00 00 00	 mov	 eax, 8
  00b9d	48 6b c0 04	 imul	 rax, rax, 4
  00ba1	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00ba5	48 03 c8	 add	 rcx, rax
  00ba8	48 8b c1	 mov	 rax, rcx
  00bab	b9 08 00 00 00	 mov	 ecx, 8
  00bb0	48 6b c9 04	 imul	 rcx, rcx, 4
  00bb4	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00bb8	48 03 d1	 add	 rdx, rcx
  00bbb	48 8b ca	 mov	 rcx, rdx
  00bbe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bc3	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00bca	4c 8b c1	 mov	 r8, rcx
  00bcd	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00bd1	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00bd8	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00bdd	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 932  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  00be3	b8 08 00 00 00	 mov	 eax, 8
  00be8	48 6b c0 05	 imul	 rax, rax, 5
  00bec	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00bf0	48 03 c8	 add	 rcx, rax
  00bf3	48 8b c1	 mov	 rax, rcx
  00bf6	b9 08 00 00 00	 mov	 ecx, 8
  00bfb	48 6b c9 05	 imul	 rcx, rcx, 5
  00bff	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00c03	48 03 d1	 add	 rdx, rcx
  00c06	48 8b ca	 mov	 rcx, rdx
  00c09	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c0e	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00c15	4c 8b c1	 mov	 r8, rcx
  00c18	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00c1c	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00c23	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00c28	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 933  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  00c2e	b8 08 00 00 00	 mov	 eax, 8
  00c33	48 6b c0 06	 imul	 rax, rax, 6
  00c37	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00c3b	48 03 c8	 add	 rcx, rax
  00c3e	48 8b c1	 mov	 rax, rcx
  00c41	b9 08 00 00 00	 mov	 ecx, 8
  00c46	48 6b c9 06	 imul	 rcx, rcx, 6
  00c4a	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00c4e	48 03 d1	 add	 rdx, rcx
  00c51	48 8b ca	 mov	 rcx, rdx
  00c54	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c59	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00c60	4c 8b c1	 mov	 r8, rcx
  00c63	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00c67	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00c6e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00c73	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 934  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  00c79	b8 08 00 00 00	 mov	 eax, 8
  00c7e	48 6b c0 07	 imul	 rax, rax, 7
  00c82	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00c86	48 03 c8	 add	 rcx, rax
  00c89	48 8b c1	 mov	 rax, rcx
  00c8c	b9 08 00 00 00	 mov	 ecx, 8
  00c91	48 6b c9 07	 imul	 rcx, rcx, 7
  00c95	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00c99	48 03 d1	 add	 rdx, rcx
  00c9c	48 8b ca	 mov	 rcx, rdx
  00c9f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ca4	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00cab	4c 8b c1	 mov	 r8, rcx
  00cae	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00cb2	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00cb9	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00cbe	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 935  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[8], q_, &u_ptr[8]);

  00cc4	b8 08 00 00 00	 mov	 eax, 8
  00cc9	48 6b c0 08	 imul	 rax, rax, 8
  00ccd	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00cd1	48 03 c8	 add	 rcx, rax
  00cd4	48 8b c1	 mov	 rax, rcx
  00cd7	b9 08 00 00 00	 mov	 ecx, 8
  00cdc	48 6b c9 08	 imul	 rcx, rcx, 8
  00ce0	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00ce4	48 03 d1	 add	 rdx, rcx
  00ce7	48 8b ca	 mov	 rcx, rdx
  00cea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00cef	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00cf6	4c 8b c1	 mov	 r8, rcx
  00cf9	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00cfd	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00d04	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00d09	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 936  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[9], q_, &u_ptr[9]);

  00d0f	b8 08 00 00 00	 mov	 eax, 8
  00d14	48 6b c0 09	 imul	 rax, rax, 9
  00d18	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00d1c	48 03 c8	 add	 rcx, rax
  00d1f	48 8b c1	 mov	 rax, rcx
  00d22	b9 08 00 00 00	 mov	 ecx, 8
  00d27	48 6b c9 09	 imul	 rcx, rcx, 9
  00d2b	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00d2f	48 03 d1	 add	 rdx, rcx
  00d32	48 8b ca	 mov	 rcx, rdx
  00d35	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d3a	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00d41	4c 8b c1	 mov	 r8, rcx
  00d44	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00d48	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00d4f	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00d54	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 937  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[10], q_, &u_ptr[10]);

  00d5a	b8 08 00 00 00	 mov	 eax, 8
  00d5f	48 6b c0 0a	 imul	 rax, rax, 10
  00d63	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00d67	48 03 c8	 add	 rcx, rax
  00d6a	48 8b c1	 mov	 rax, rcx
  00d6d	b9 08 00 00 00	 mov	 ecx, 8
  00d72	48 6b c9 0a	 imul	 rcx, rcx, 10
  00d76	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00d7a	48 03 d1	 add	 rdx, rcx
  00d7d	48 8b ca	 mov	 rcx, rdx
  00d80	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d85	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00d8c	4c 8b c1	 mov	 r8, rcx
  00d8f	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00d93	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00d9a	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00d9f	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 938  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[11], q_, &u_ptr[11]);

  00da5	b8 08 00 00 00	 mov	 eax, 8
  00daa	48 6b c0 0b	 imul	 rax, rax, 11
  00dae	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00db2	48 03 c8	 add	 rcx, rax
  00db5	48 8b c1	 mov	 rax, rcx
  00db8	b9 08 00 00 00	 mov	 ecx, 8
  00dbd	48 6b c9 0b	 imul	 rcx, rcx, 11
  00dc1	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00dc5	48 03 d1	 add	 rdx, rcx
  00dc8	48 8b ca	 mov	 rcx, rdx
  00dcb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00dd0	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00dd7	4c 8b c1	 mov	 r8, rcx
  00dda	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00dde	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00de5	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00dea	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 939  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[12], q_, &u_ptr[12]);

  00df0	b8 08 00 00 00	 mov	 eax, 8
  00df5	48 6b c0 0c	 imul	 rax, rax, 12
  00df9	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00dfd	48 03 c8	 add	 rcx, rax
  00e00	48 8b c1	 mov	 rax, rcx
  00e03	b9 08 00 00 00	 mov	 ecx, 8
  00e08	48 6b c9 0c	 imul	 rcx, rcx, 12
  00e0c	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00e10	48 03 d1	 add	 rdx, rcx
  00e13	48 8b ca	 mov	 rcx, rdx
  00e16	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e1b	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00e22	4c 8b c1	 mov	 r8, rcx
  00e25	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00e29	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00e30	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00e35	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 940  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[13], q_, &u_ptr[13]);

  00e3b	b8 08 00 00 00	 mov	 eax, 8
  00e40	48 6b c0 0d	 imul	 rax, rax, 13
  00e44	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00e48	48 03 c8	 add	 rcx, rax
  00e4b	48 8b c1	 mov	 rax, rcx
  00e4e	b9 08 00 00 00	 mov	 ecx, 8
  00e53	48 6b c9 0d	 imul	 rcx, rcx, 13
  00e57	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00e5b	48 03 d1	 add	 rdx, rcx
  00e5e	48 8b ca	 mov	 rcx, rdx
  00e61	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e66	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00e6d	4c 8b c1	 mov	 r8, rcx
  00e70	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00e74	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00e7b	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00e80	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 941  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[14], q_, &u_ptr[14]);

  00e86	b8 08 00 00 00	 mov	 eax, 8
  00e8b	48 6b c0 0e	 imul	 rax, rax, 14
  00e8f	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00e93	48 03 c8	 add	 rcx, rax
  00e96	48 8b c1	 mov	 rax, rcx
  00e99	b9 08 00 00 00	 mov	 ecx, 8
  00e9e	48 6b c9 0e	 imul	 rcx, rcx, 14
  00ea2	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00ea6	48 03 d1	 add	 rdx, rcx
  00ea9	48 8b ca	 mov	 rcx, rdx
  00eac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00eb1	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00eb8	4c 8b c1	 mov	 r8, rcx
  00ebb	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00ebf	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00ec6	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00ecb	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 942  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[15], q_, &u_ptr[15]);

  00ed1	b8 08 00 00 00	 mov	 eax, 8
  00ed6	48 6b c0 0f	 imul	 rax, rax, 15
  00eda	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00ede	48 03 c8	 add	 rcx, rax
  00ee1	48 8b c1	 mov	 rax, rcx
  00ee4	b9 08 00 00 00	 mov	 ecx, 8
  00ee9	48 6b c9 0f	 imul	 rcx, rcx, 15
  00eed	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00ef1	48 03 d1	 add	 rdx, rcx
  00ef4	48 8b ca	 mov	 rcx, rdx
  00ef7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00efc	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00f03	4c 8b c1	 mov	 r8, rcx
  00f06	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00f0a	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00f11	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00f16	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 943  :             u_ptr += 16;

  00f1c	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  00f20	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00f26	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 944  :             v_ptr += 16;

  00f2a	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  00f2e	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00f34	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 945  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 946  :             if (sizeof(k) == sizeof(_UINT64_T))

  00f38	33 c0		 xor	 eax, eax
  00f3a	83 f8 01	 cmp	 eax, 1
  00f3d	74 0c		 je	 SHORT $LN7@SubtructOn

; 947  :                 AddToMULTI64Counter(16);

  00f3f	b9 10 00 00 00	 mov	 ecx, 16
  00f44	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 948  :             else

  00f49	eb 0a		 jmp	 SHORT $LN8@SubtructOn
$LN7@SubtructOn:

; 949  :                 AddToMULTI32Counter(16);

  00f4b	b9 10 00 00 00	 mov	 ecx, 16
  00f50	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN8@SubtructOn:
$LN6@SubtructOn:

; 950  : #endif
; 951  :         }
; 952  : 
; 953  :         if (v_count & 0x8)

  00f55	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  00f59	48 83 e0 08	 and	 rax, 8
  00f5d	48 85 c0	 test	 rax, rax
  00f60	0f 84 8d 02 00
	00		 je	 $LN9@SubtructOn

; 954  :         {
; 955  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  00f66	b8 08 00 00 00	 mov	 eax, 8
  00f6b	48 6b c0 00	 imul	 rax, rax, 0
  00f6f	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00f73	48 03 c8	 add	 rcx, rax
  00f76	48 8b c1	 mov	 rax, rcx
  00f79	b9 08 00 00 00	 mov	 ecx, 8
  00f7e	48 6b c9 00	 imul	 rcx, rcx, 0
  00f82	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00f86	48 03 d1	 add	 rdx, rcx
  00f89	48 8b ca	 mov	 rcx, rdx
  00f8c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f91	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00f98	4c 8b c1	 mov	 r8, rcx
  00f9b	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00f9f	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00fa6	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00fab	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 956  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  00fb1	b8 08 00 00 00	 mov	 eax, 8
  00fb6	48 6b c0 01	 imul	 rax, rax, 1
  00fba	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  00fbe	48 03 c8	 add	 rcx, rax
  00fc1	48 8b c1	 mov	 rax, rcx
  00fc4	b9 08 00 00 00	 mov	 ecx, 8
  00fc9	48 6b c9 01	 imul	 rcx, rcx, 1
  00fcd	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  00fd1	48 03 d1	 add	 rdx, rcx
  00fd4	48 8b ca	 mov	 rcx, rdx
  00fd7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fdc	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  00fe3	4c 8b c1	 mov	 r8, rcx
  00fe6	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  00fea	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00ff1	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00ff6	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 957  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00ffc	b8 08 00 00 00	 mov	 eax, 8
  01001	48 6b c0 02	 imul	 rax, rax, 2
  01005	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01009	48 03 c8	 add	 rcx, rax
  0100c	48 8b c1	 mov	 rax, rcx
  0100f	b9 08 00 00 00	 mov	 ecx, 8
  01014	48 6b c9 02	 imul	 rcx, rcx, 2
  01018	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0101c	48 03 d1	 add	 rdx, rcx
  0101f	48 8b ca	 mov	 rcx, rdx
  01022	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01027	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0102e	4c 8b c1	 mov	 r8, rcx
  01031	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01035	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0103c	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  01041	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 958  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  01047	b8 08 00 00 00	 mov	 eax, 8
  0104c	48 6b c0 03	 imul	 rax, rax, 3
  01050	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01054	48 03 c8	 add	 rcx, rax
  01057	48 8b c1	 mov	 rax, rcx
  0105a	b9 08 00 00 00	 mov	 ecx, 8
  0105f	48 6b c9 03	 imul	 rcx, rcx, 3
  01063	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01067	48 03 d1	 add	 rdx, rcx
  0106a	48 8b ca	 mov	 rcx, rdx
  0106d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01072	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  01079	4c 8b c1	 mov	 r8, rcx
  0107c	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01080	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  01087	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0108c	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 959  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  01092	b8 08 00 00 00	 mov	 eax, 8
  01097	48 6b c0 04	 imul	 rax, rax, 4
  0109b	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0109f	48 03 c8	 add	 rcx, rax
  010a2	48 8b c1	 mov	 rax, rcx
  010a5	b9 08 00 00 00	 mov	 ecx, 8
  010aa	48 6b c9 04	 imul	 rcx, rcx, 4
  010ae	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  010b2	48 03 d1	 add	 rdx, rcx
  010b5	48 8b ca	 mov	 rcx, rdx
  010b8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010bd	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  010c4	4c 8b c1	 mov	 r8, rcx
  010c7	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  010cb	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  010d2	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  010d7	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 960  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  010dd	b8 08 00 00 00	 mov	 eax, 8
  010e2	48 6b c0 05	 imul	 rax, rax, 5
  010e6	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  010ea	48 03 c8	 add	 rcx, rax
  010ed	48 8b c1	 mov	 rax, rcx
  010f0	b9 08 00 00 00	 mov	 ecx, 8
  010f5	48 6b c9 05	 imul	 rcx, rcx, 5
  010f9	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  010fd	48 03 d1	 add	 rdx, rcx
  01100	48 8b ca	 mov	 rcx, rdx
  01103	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01108	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0110f	4c 8b c1	 mov	 r8, rcx
  01112	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01116	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0111d	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  01122	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 961  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  01128	b8 08 00 00 00	 mov	 eax, 8
  0112d	48 6b c0 06	 imul	 rax, rax, 6
  01131	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01135	48 03 c8	 add	 rcx, rax
  01138	48 8b c1	 mov	 rax, rcx
  0113b	b9 08 00 00 00	 mov	 ecx, 8
  01140	48 6b c9 06	 imul	 rcx, rcx, 6
  01144	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01148	48 03 d1	 add	 rdx, rcx
  0114b	48 8b ca	 mov	 rcx, rdx
  0114e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01153	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  0115a	4c 8b c1	 mov	 r8, rcx
  0115d	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01161	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  01168	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0116d	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 962  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  01173	b8 08 00 00 00	 mov	 eax, 8
  01178	48 6b c0 07	 imul	 rax, rax, 7
  0117c	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01180	48 03 c8	 add	 rcx, rax
  01183	48 8b c1	 mov	 rax, rcx
  01186	b9 08 00 00 00	 mov	 ecx, 8
  0118b	48 6b c9 07	 imul	 rcx, rcx, 7
  0118f	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01193	48 03 d1	 add	 rdx, rcx
  01196	48 8b ca	 mov	 rcx, rdx
  01199	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0119e	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  011a5	4c 8b c1	 mov	 r8, rcx
  011a8	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  011ac	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  011b3	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  011b8	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 963  :             u_ptr += 8;

  011be	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  011c2	48 83 c0 40	 add	 rax, 64			; 00000040H
  011c6	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 964  :             v_ptr += 8;

  011ca	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  011ce	48 83 c0 40	 add	 rax, 64			; 00000040H
  011d2	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 965  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 966  :             if (sizeof(k) == sizeof(_UINT64_T))

  011d6	33 c0		 xor	 eax, eax
  011d8	83 f8 01	 cmp	 eax, 1
  011db	74 0c		 je	 SHORT $LN10@SubtructOn

; 967  :                 AddToMULTI64Counter(8);

  011dd	b9 08 00 00 00	 mov	 ecx, 8
  011e2	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 968  :             else

  011e7	eb 0a		 jmp	 SHORT $LN11@SubtructOn
$LN10@SubtructOn:

; 969  :                 AddToMULTI32Counter(8);

  011e9	b9 08 00 00 00	 mov	 ecx, 8
  011ee	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN11@SubtructOn:
$LN9@SubtructOn:

; 970  : #endif
; 971  :         }
; 972  : 
; 973  :         if (v_count & 0x4)

  011f3	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  011f7	48 83 e0 04	 and	 rax, 4
  011fb	48 85 c0	 test	 rax, rax
  011fe	0f 84 61 01 00
	00		 je	 $LN12@SubtructOn

; 974  :         {
; 975  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  01204	b8 08 00 00 00	 mov	 eax, 8
  01209	48 6b c0 00	 imul	 rax, rax, 0
  0120d	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01211	48 03 c8	 add	 rcx, rax
  01214	48 8b c1	 mov	 rax, rcx
  01217	b9 08 00 00 00	 mov	 ecx, 8
  0121c	48 6b c9 00	 imul	 rcx, rcx, 0
  01220	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01224	48 03 d1	 add	 rdx, rcx
  01227	48 8b ca	 mov	 rcx, rdx
  0122a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0122f	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  01236	4c 8b c1	 mov	 r8, rcx
  01239	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0123d	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  01244	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  01249	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 976  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  0124f	b8 08 00 00 00	 mov	 eax, 8
  01254	48 6b c0 01	 imul	 rax, rax, 1
  01258	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0125c	48 03 c8	 add	 rcx, rax
  0125f	48 8b c1	 mov	 rax, rcx
  01262	b9 08 00 00 00	 mov	 ecx, 8
  01267	48 6b c9 01	 imul	 rcx, rcx, 1
  0126b	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0126f	48 03 d1	 add	 rdx, rcx
  01272	48 8b ca	 mov	 rcx, rdx
  01275	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0127a	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  01281	4c 8b c1	 mov	 r8, rcx
  01284	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01288	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0128f	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  01294	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 977  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  0129a	b8 08 00 00 00	 mov	 eax, 8
  0129f	48 6b c0 02	 imul	 rax, rax, 2
  012a3	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  012a7	48 03 c8	 add	 rcx, rax
  012aa	48 8b c1	 mov	 rax, rcx
  012ad	b9 08 00 00 00	 mov	 ecx, 8
  012b2	48 6b c9 02	 imul	 rcx, rcx, 2
  012b6	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  012ba	48 03 d1	 add	 rdx, rcx
  012bd	48 8b ca	 mov	 rcx, rdx
  012c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012c5	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  012cc	4c 8b c1	 mov	 r8, rcx
  012cf	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  012d3	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  012da	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  012df	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 978  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  012e5	b8 08 00 00 00	 mov	 eax, 8
  012ea	48 6b c0 03	 imul	 rax, rax, 3
  012ee	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  012f2	48 03 c8	 add	 rcx, rax
  012f5	48 8b c1	 mov	 rax, rcx
  012f8	b9 08 00 00 00	 mov	 ecx, 8
  012fd	48 6b c9 03	 imul	 rcx, rcx, 3
  01301	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01305	48 03 d1	 add	 rdx, rcx
  01308	48 8b ca	 mov	 rcx, rdx
  0130b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01310	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  01317	4c 8b c1	 mov	 r8, rcx
  0131a	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  0131e	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  01325	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0132a	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 979  :             u_ptr += 4;

  01330	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  01334	48 83 c0 20	 add	 rax, 32			; 00000020H
  01338	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 980  :             v_ptr += 4;

  0133c	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  01340	48 83 c0 20	 add	 rax, 32			; 00000020H
  01344	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 981  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 982  :             if (sizeof(k) == sizeof(_UINT64_T))

  01348	33 c0		 xor	 eax, eax
  0134a	83 f8 01	 cmp	 eax, 1
  0134d	74 0c		 je	 SHORT $LN13@SubtructOn

; 983  :                 AddToMULTI64Counter(4);

  0134f	b9 04 00 00 00	 mov	 ecx, 4
  01354	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 984  :             else

  01359	eb 0a		 jmp	 SHORT $LN14@SubtructOn
$LN13@SubtructOn:

; 985  :                 AddToMULTI32Counter(4);

  0135b	b9 04 00 00 00	 mov	 ecx, 4
  01360	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN14@SubtructOn:
$LN12@SubtructOn:

; 986  : #endif
; 987  :         }
; 988  : 
; 989  :         if (v_count & 0x2)

  01365	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  01369	48 83 e0 02	 and	 rax, 2
  0136d	48 85 c0	 test	 rax, rax
  01370	0f 84 cb 00 00
	00		 je	 $LN15@SubtructOn

; 990  :         {
; 991  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  01376	b8 08 00 00 00	 mov	 eax, 8
  0137b	48 6b c0 00	 imul	 rax, rax, 0
  0137f	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  01383	48 03 c8	 add	 rcx, rax
  01386	48 8b c1	 mov	 rax, rcx
  01389	b9 08 00 00 00	 mov	 ecx, 8
  0138e	48 6b c9 00	 imul	 rcx, rcx, 0
  01392	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  01396	48 03 d1	 add	 rdx, rcx
  01399	48 8b ca	 mov	 rcx, rdx
  0139c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013a1	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  013a8	4c 8b c1	 mov	 r8, rcx
  013ab	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  013af	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  013b6	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  013bb	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 992  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  013c1	b8 08 00 00 00	 mov	 eax, 8
  013c6	48 6b c0 01	 imul	 rax, rax, 1
  013ca	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  013ce	48 03 c8	 add	 rcx, rax
  013d1	48 8b c1	 mov	 rax, rcx
  013d4	b9 08 00 00 00	 mov	 ecx, 8
  013d9	48 6b c9 01	 imul	 rcx, rcx, 1
  013dd	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  013e1	48 03 d1	 add	 rdx, rcx
  013e4	48 8b ca	 mov	 rcx, rdx
  013e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013ec	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  013f3	4c 8b c1	 mov	 r8, rcx
  013f6	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  013fa	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  01401	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  01406	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 993  :             u_ptr += 2;

  0140c	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  01410	48 83 c0 10	 add	 rax, 16
  01414	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 994  :             v_ptr += 2;

  01418	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  0141c	48 83 c0 10	 add	 rax, 16
  01420	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 995  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 996  :             if (sizeof(k) == sizeof(_UINT64_T))

  01424	33 c0		 xor	 eax, eax
  01426	83 f8 01	 cmp	 eax, 1
  01429	74 0c		 je	 SHORT $LN16@SubtructOn

; 997  :                 AddToMULTI64Counter(2);

  0142b	b9 02 00 00 00	 mov	 ecx, 2
  01430	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 998  :             else

  01435	eb 0a		 jmp	 SHORT $LN17@SubtructOn
$LN16@SubtructOn:

; 999  :                 AddToMULTI32Counter(2);

  01437	b9 02 00 00 00	 mov	 ecx, 2
  0143c	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN17@SubtructOn:
$LN15@SubtructOn:

; 1000 : #endif
; 1001 :         }
; 1002 : 
; 1003 :         if (v_count & 0x1)

  01441	48 8b 45 48	 mov	 rax, QWORD PTR v_count$[rbp]
  01445	48 83 e0 01	 and	 rax, 1
  01449	48 85 c0	 test	 rax, rax
  0144c	74 76		 je	 SHORT $LN18@SubtructOn

; 1004 :         {
; 1005 :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  0144e	b8 08 00 00 00	 mov	 eax, 8
  01453	48 6b c0 00	 imul	 rax, rax, 0
  01457	48 8b 4d 08	 mov	 rcx, QWORD PTR u_ptr$[rbp]
  0145b	48 03 c8	 add	 rcx, rax
  0145e	48 8b c1	 mov	 rax, rcx
  01461	b9 08 00 00 00	 mov	 ecx, 8
  01466	48 6b c9 00	 imul	 rcx, rcx, 0
  0146a	48 8b 55 28	 mov	 rdx, QWORD PTR v_ptr$[rbp]
  0146e	48 03 d1	 add	 rdx, rcx
  01471	48 8b ca	 mov	 rcx, rdx
  01474	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01479	4c 8b 8d c8 01
	00 00		 mov	 r9, QWORD PTR q_$[rbp]
  01480	4c 8b c1	 mov	 r8, rcx
  01483	48 8d 55 68	 lea	 rdx, QWORD PTR k$[rbp]
  01487	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0148e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  01493	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1006 :             u_ptr += 1;

  01499	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  0149d	48 83 c0 08	 add	 rax, 8
  014a1	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1007 :             v_ptr += 1;

  014a5	48 8b 45 28	 mov	 rax, QWORD PTR v_ptr$[rbp]
  014a9	48 83 c0 08	 add	 rax, 8
  014ad	48 89 45 28	 mov	 QWORD PTR v_ptr$[rbp], rax

; 1008 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1009 :             if (sizeof(k) == sizeof(_UINT64_T))

  014b1	33 c0		 xor	 eax, eax
  014b3	83 f8 01	 cmp	 eax, 1
  014b6	74 07		 je	 SHORT $LN19@SubtructOn

; 1010 :                 IncrementMULTI64Counter();

  014b8	e8 00 00 00 00	 call	 ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter

; 1011 :             else

  014bd	eb 05		 jmp	 SHORT $LN20@SubtructOn
$LN19@SubtructOn:

; 1012 :                 IncrementMULTI32Counter();

  014bf	e8 00 00 00 00	 call	 ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
$LN20@SubtructOn:
$LN18@SubtructOn:

; 1013 : #endif
; 1014 :         }
; 1015 : 
; 1016 :         c = _SUBTRUCT_UNIT(c, *u_ptr, k, u_ptr);

  014c4	4c 8b 4d 08	 mov	 r9, QWORD PTR u_ptr$[rbp]
  014c8	4c 8b 45 68	 mov	 r8, QWORD PTR k$[rbp]
  014cc	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  014d0	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  014d3	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  014da	e8 00 00 00 00	 call	 _SUBTRUCT_UNIT
  014df	88 85 84 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1017 :         u_ptr += 1;

  014e5	48 8b 45 08	 mov	 rax, QWORD PTR u_ptr$[rbp]
  014e9	48 83 c0 08	 add	 rax, 8
  014ed	48 89 45 08	 mov	 QWORD PTR u_ptr$[rbp], rax

; 1018 : 
; 1019 :         return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

  014f1	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  014f8	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  014ff	48 8d 44 c8 08	 lea	 rax, QWORD PTR [rax+rcx*8+8]
  01504	48 2b 45 08	 sub	 rax, QWORD PTR u_ptr$[rbp]
  01508	48 c1 f8 03	 sar	 rax, 3
  0150c	4c 8b c0	 mov	 r8, rax
  0150f	48 8b 55 08	 mov	 rdx, QWORD PTR u_ptr$[rbp]
  01513	0f b6 8d 84 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0151a	e8 00 00 00 00	 call	 ?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPEA_K_K@Z ; Palmtree::Math::Core::Internal::DoBorrow

; 1020 :     }

  0151f	48 8b f8	 mov	 rdi, rax
  01522	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  01526	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z$rtcFrameData
  0152d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  01532	48 8b c7	 mov	 rax, rdi
  01535	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  0153c	5f		 pop	 rdi
  0153d	5d		 pop	 rbp
  0153e	c3		 ret	 0
?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPEA_K_K0111@Z ENDP ; Palmtree::Math::Core::Internal::SubtructOneLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z
_TEXT	SEGMENT
t_hi$ = 8
t_lo$ = 40
tv81 = 248
tv79 = 256
c$ = 304
k$ = 312
vp$ = 320
q_$ = 328
up$ = 336
?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z PROC ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV, COMDAT

; 861  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 58
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+344]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 862  :         __UNIT_TYPE t_hi;
; 863  :         __UNIT_TYPE t_lo;
; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  00044	4c 8d 45 08	 lea	 r8, QWORD PTR t_hi$[rbp]
  00048	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR q_$[rbp]
  0004f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR vp$[rbp]
  00056	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00059	e8 00 00 00 00	 call	 _MULTIPLYX_UNIT
  0005e	48 89 45 28	 mov	 QWORD PTR t_lo$[rbp], rax

; 865  :         _ADDX_UNIT(_ADDX_UNIT(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

  00062	48 8b 45 08	 mov	 rax, QWORD PTR t_hi$[rbp]
  00066	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  0006d	4c 8d 4d 28	 lea	 r9, QWORD PTR t_lo$[rbp]
  00071	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR k$[rbp]
  00078	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0007b	48 8b 55 28	 mov	 rdx, QWORD PTR t_lo$[rbp]
  0007f	33 c9		 xor	 ecx, ecx
  00081	e8 00 00 00 00	 call	 _ADDX_UNIT
  00086	88 85 00 01 00
	00		 mov	 BYTE PTR tv79[rbp], al
  0008c	4c 8d 4d 08	 lea	 r9, QWORD PTR t_hi$[rbp]
  00090	45 33 c0	 xor	 r8d, r8d
  00093	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR tv81[rbp]
  0009a	0f b6 8d 00 01
	00 00		 movzx	 ecx, BYTE PTR tv79[rbp]
  000a1	e8 00 00 00 00	 call	 _ADDX_UNIT

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  000a6	4c 8b 8d 50 01
	00 00		 mov	 r9, QWORD PTR up$[rbp]
  000ad	4c 8b 45 28	 mov	 r8, QWORD PTR t_lo$[rbp]
  000b1	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR up$[rbp]
  000b8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000bb	0f b6 8d 30 01
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000c2	e8 00 00 00 00	 call	 _SUBTRUCT_UNIT
  000c7	88 85 30 01 00
	00		 mov	 BYTE PTR c$[rbp], al

; 867  :         *k = t_hi;

  000cd	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR k$[rbp]
  000d4	48 8b 4d 08	 mov	 rcx, QWORD PTR t_hi$[rbp]
  000d8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 868  :         return (c);

  000db	0f b6 85 30 01
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 869  :     }

  000e2	8b f8		 mov	 edi, eax
  000e4	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcFrameData
  000ef	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f4	8b c7		 mov	 eax, edi
  000f6	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  000fd	5f		 pop	 rdi
  000fe	5d		 pop	 rbp
  000ff	c3		 ret	 0
?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ENDP ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z
_TEXT	SEGMENT
t_hi$ = 8
t_lo$ = 40
tv81 = 248
tv79 = 256
c$ = 304
k$ = 312
vp$ = 320
q_$ = 328
up$ = 336
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z PROC ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT, COMDAT

; 850  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 58
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+344]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 851  :         __UNIT_TYPE t_hi;
; 852  :         __UNIT_TYPE t_lo;
; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  00044	4c 8d 45 08	 lea	 r8, QWORD PTR t_hi$[rbp]
  00048	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR q_$[rbp]
  0004f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR vp$[rbp]
  00056	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00059	e8 00 00 00 00	 call	 _MULTIPLY_UNIT
  0005e	48 89 45 28	 mov	 QWORD PTR t_lo$[rbp], rax

; 854  :         _ADD_UNIT(_ADD_UNIT(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

  00062	48 8b 45 08	 mov	 rax, QWORD PTR t_hi$[rbp]
  00066	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv81[rbp], rax
  0006d	4c 8d 4d 28	 lea	 r9, QWORD PTR t_lo$[rbp]
  00071	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR k$[rbp]
  00078	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0007b	48 8b 55 28	 mov	 rdx, QWORD PTR t_lo$[rbp]
  0007f	33 c9		 xor	 ecx, ecx
  00081	e8 00 00 00 00	 call	 _ADD_UNIT
  00086	88 85 00 01 00
	00		 mov	 BYTE PTR tv79[rbp], al
  0008c	4c 8d 4d 08	 lea	 r9, QWORD PTR t_hi$[rbp]
  00090	45 33 c0	 xor	 r8d, r8d
  00093	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR tv81[rbp]
  0009a	0f b6 8d 00 01
	00 00		 movzx	 ecx, BYTE PTR tv79[rbp]
  000a1	e8 00 00 00 00	 call	 _ADD_UNIT

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  000a6	4c 8b 8d 50 01
	00 00		 mov	 r9, QWORD PTR up$[rbp]
  000ad	4c 8b 45 28	 mov	 r8, QWORD PTR t_lo$[rbp]
  000b1	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR up$[rbp]
  000b8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000bb	0f b6 8d 30 01
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000c2	e8 00 00 00 00	 call	 _SUBTRUCT_UNIT
  000c7	88 85 30 01 00
	00		 mov	 BYTE PTR c$[rbp], al

; 856  :         *k = t_hi;

  000cd	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR k$[rbp]
  000d4	48 8b 4d 08	 mov	 rcx, QWORD PTR t_hi$[rbp]
  000d8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 857  :         return (c);

  000db	0f b6 85 30 01
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 858  :     }

  000e2	8b f8		 mov	 edi, eax
  000e4	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z$rtcFrameData
  000ef	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f4	8b c7		 mov	 eax, edi
  000f6	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  000fd	5f		 pop	 rdi
  000fe	5d		 pop	 rbp
  000ff	c3		 ret	 0
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPEA_K0_K0@Z ENDP ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPEA_K_K@Z
_TEXT	SEGMENT
c$ = 224
up$ = 232
u_count$ = 240
?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPEA_K_K@Z PROC ; Palmtree::Math::Core::Internal::DoBorrow, COMDAT

; 810  :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  0003a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@DoBorrow:

; 811  :         // 桁借りを続く限り行う
; 812  :         for (;;)
; 813  :         {
; 814  :             if (u_count <= 0)

  0003f	48 83 bd f0 00
	00 00 00	 cmp	 QWORD PTR u_count$[rbp], 0
  00047	77 18		 ja	 SHORT $LN5@DoBorrow

; 815  :             {
; 816  :                 // u の最上位まで達してしまった場合
; 817  : 
; 818  :                 if (c)

  00049	0f be 85 e0 00
	00 00		 movsx	 eax, BYTE PTR c$[rbp]
  00050	85 c0		 test	 eax, eax
  00052	74 07		 je	 SHORT $LN7@DoBorrow

; 819  :                 {
; 820  :                     // かつそれでも桁借りを行う必要がある場合
; 821  : 
; 822  :                     // 減算結果が負になってしまったので呼び出し元に通知する。
; 823  :                     return (TRUE);

  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	eb 62		 jmp	 SHORT $LN1@DoBorrow
$LN7@DoBorrow:

; 824  :                 }
; 825  : 
; 826  :                 // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 827  : 
; 828  :                 return (FALSE);

  0005b	33 c0		 xor	 eax, eax
  0005d	eb 5e		 jmp	 SHORT $LN1@DoBorrow
  0005f	eb 5a		 jmp	 SHORT $LN6@DoBorrow
$LN5@DoBorrow:

; 829  :             }
; 830  :             else if (c)

  00061	0f be 85 e0 00
	00 00		 movsx	 eax, BYTE PTR c$[rbp]
  00068	85 c0		 test	 eax, eax
  0006a	74 4b		 je	 SHORT $LN8@DoBorrow

; 831  :             {
; 832  :                 // u の最上位に達しておらず、かつボローが立っている場合
; 833  : 
; 834  :                 // 桁借りを継続する
; 835  :                 c = _SUBTRUCT_UNIT(c, *up, 0, up);

  0006c	4c 8b 8d e8 00
	00 00		 mov	 r9, QWORD PTR up$[rbp]
  00073	45 33 c0	 xor	 r8d, r8d
  00076	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR up$[rbp]
  0007d	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00080	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00087	e8 00 00 00 00	 call	 _SUBTRUCT_UNIT
  0008c	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 836  :                 ++up;

  00092	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR up$[rbp]
  00099	48 83 c0 08	 add	 rax, 8
  0009d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR up$[rbp], rax

; 837  :                 --u_count;

  000a4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  000ab	48 ff c8	 dec	 rax
  000ae	48 89 85 f0 00
	00 00		 mov	 QWORD PTR u_count$[rbp], rax

; 838  :             }
; 839  :             else

  000b5	eb 04		 jmp	 SHORT $LN9@DoBorrow
$LN8@DoBorrow:

; 840  :             {
; 841  :                 // u の最上位に達しておらず、かつボローが立っていない場合
; 842  : 
; 843  :                 // 桁借りを中断し復帰する。
; 844  :                 return (FALSE);

  000b7	33 c0		 xor	 eax, eax
  000b9	eb 02		 jmp	 SHORT $LN1@DoBorrow
$LN9@DoBorrow:
$LN6@DoBorrow:

; 845  :             }
; 846  :         }

  000bb	eb 82		 jmp	 SHORT $LN2@DoBorrow
$LN1@DoBorrow:

; 847  :     }

  000bd	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000c4	5f		 pop	 rdi
  000c5	5d		 pop	 rbp
  000c6	c3		 ret	 0
?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPEA_K_K@Z ENDP ; Palmtree::Math::Core::Internal::DoBorrow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?CalculateQ_X@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z
_TEXT	SEGMENT
u_index$ = 8
uj$ = 40
uj_1$ = 72
uj_2$ = 104
v1$ = 136
v2$ = 168
q_$ = 200
u_buf$ = 448
v_buf$ = 456
v_buf_len$ = 464
q_index$ = 472
?CalculateQ_X@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z PROC ; Palmtree::Math::Core::Internal::CalculateQ_X, COMDAT

; 792  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+504]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 793  :         __UNIT_TYPE u_index = q_index + v_buf_len;

  00045	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR v_buf_len$[rbp]
  0004c	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR q_index$[rbp]
  00053	48 03 c8	 add	 rcx, rax
  00056	48 8b c1	 mov	 rax, rcx
  00059	48 89 45 08	 mov	 QWORD PTR u_index$[rbp], rax

; 794  :         __UNIT_TYPE uj = u_buf[u_index];

  0005d	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00064	48 8b 4d 08	 mov	 rcx, QWORD PTR u_index$[rbp]
  00068	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0006c	48 89 45 28	 mov	 QWORD PTR uj$[rbp], rax

; 795  :         __UNIT_TYPE uj_1 = u_buf[u_index - 1];

  00070	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00077	48 8b 4d 08	 mov	 rcx, QWORD PTR u_index$[rbp]
  0007b	48 8b 44 c8 f8	 mov	 rax, QWORD PTR [rax+rcx*8-8]
  00080	48 89 45 48	 mov	 QWORD PTR uj_1$[rbp], rax

; 796  :         __UNIT_TYPE uj_2 = u_buf[u_index - 2];

  00084	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0008b	48 8b 4d 08	 mov	 rcx, QWORD PTR u_index$[rbp]
  0008f	48 8b 44 c8 f0	 mov	 rax, QWORD PTR [rax+rcx*8-16]
  00094	48 89 45 68	 mov	 QWORD PTR uj_2$[rbp], rax

; 797  :         __UNIT_TYPE v1 = v_buf[v_buf_len - 1];

  00098	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  0009f	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR v_buf_len$[rbp]
  000a6	48 8b 44 c8 f8	 mov	 rax, QWORD PTR [rax+rcx*8-8]
  000ab	48 89 85 88 00
	00 00		 mov	 QWORD PTR v1$[rbp], rax

; 798  :         __UNIT_TYPE v2 = v_buf[v_buf_len - 2];

  000b2	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  000b9	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR v_buf_len$[rbp]
  000c0	48 8b 44 c8 f0	 mov	 rax, QWORD PTR [rax+rcx*8-16]
  000c5	48 89 85 a8 00
	00 00		 mov	 QWORD PTR v2$[rbp], rax

; 799  :         __UNIT_TYPE q_ = AsumeQ_(uj, uj_1, v1);

  000cc	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR v1$[rbp]
  000d3	48 8b 55 48	 mov	 rdx, QWORD PTR uj_1$[rbp]
  000d7	48 8b 4d 28	 mov	 rcx, QWORD PTR uj$[rbp]
  000db	e8 00 00 00 00	 call	 ?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z ; Palmtree::Math::Core::Internal::AsumeQ_
  000e0	48 89 85 c8 00
	00 00		 mov	 QWORD PTR q_$[rbp], rax

; 800  :         if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

  000e7	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR v2$[rbp]
  000ee	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000f3	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR v1$[rbp]
  000fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ff	4c 8b 4d 68	 mov	 r9, QWORD PTR uj_2$[rbp]
  00103	4c 8b 45 48	 mov	 r8, QWORD PTR uj_1$[rbp]
  00107	48 8b 55 28	 mov	 rdx, QWORD PTR uj$[rbp]
  0010b	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR q_$[rbp]
  00112	e8 00 00 00 00	 call	 ?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z ; Palmtree::Math::Core::Internal::CheckQ_X
  00117	85 c0		 test	 eax, eax
  00119	75 09		 jne	 SHORT $LN2@CalculateQ

; 801  :             return (q_);

  0011b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR q_$[rbp]
  00122	eb 66		 jmp	 SHORT $LN1@CalculateQ
$LN2@CalculateQ:

; 802  :         --q_;

  00124	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR q_$[rbp]
  0012b	48 ff c8	 dec	 rax
  0012e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR q_$[rbp], rax

; 803  :         if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

  00135	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR v2$[rbp]
  0013c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00141	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR v1$[rbp]
  00148	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014d	4c 8b 4d 68	 mov	 r9, QWORD PTR uj_2$[rbp]
  00151	4c 8b 45 48	 mov	 r8, QWORD PTR uj_1$[rbp]
  00155	48 8b 55 28	 mov	 rdx, QWORD PTR uj$[rbp]
  00159	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR q_$[rbp]
  00160	e8 00 00 00 00	 call	 ?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z ; Palmtree::Math::Core::Internal::CheckQ_X
  00165	85 c0		 test	 eax, eax
  00167	75 09		 jne	 SHORT $LN3@CalculateQ

; 804  :             return (q_);

  00169	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR q_$[rbp]
  00170	eb 18		 jmp	 SHORT $LN1@CalculateQ
$LN3@CalculateQ:

; 805  :         --q_;

  00172	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR q_$[rbp]
  00179	48 ff c8	 dec	 rax
  0017c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR q_$[rbp], rax

; 806  :         return (q_);

  00183	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR q_$[rbp]
$LN1@CalculateQ:

; 807  :     }

  0018a	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  00191	5f		 pop	 rdi
  00192	5d		 pop	 rbp
  00193	c3		 ret	 0
?CalculateQ_X@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z ENDP ; Palmtree::Math::Core::Internal::CalculateQ_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?CalculateQ_@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z
_TEXT	SEGMENT
u_index$ = 8
uj$ = 40
uj_1$ = 72
uj_2$ = 104
v1$ = 136
v2$ = 168
q_$ = 200
u_buf$ = 448
v_buf$ = 456
v_buf_len$ = 464
q_index$ = 472
?CalculateQ_@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z PROC ; Palmtree::Math::Core::Internal::CalculateQ_, COMDAT

; 774  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+504]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 775  :         __UNIT_TYPE u_index = q_index + v_buf_len;

  00045	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR v_buf_len$[rbp]
  0004c	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR q_index$[rbp]
  00053	48 03 c8	 add	 rcx, rax
  00056	48 8b c1	 mov	 rax, rcx
  00059	48 89 45 08	 mov	 QWORD PTR u_index$[rbp], rax

; 776  :         __UNIT_TYPE uj = u_buf[u_index];

  0005d	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00064	48 8b 4d 08	 mov	 rcx, QWORD PTR u_index$[rbp]
  00068	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0006c	48 89 45 28	 mov	 QWORD PTR uj$[rbp], rax

; 777  :         __UNIT_TYPE uj_1 = u_buf[u_index - 1];

  00070	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00077	48 8b 4d 08	 mov	 rcx, QWORD PTR u_index$[rbp]
  0007b	48 8b 44 c8 f8	 mov	 rax, QWORD PTR [rax+rcx*8-8]
  00080	48 89 45 48	 mov	 QWORD PTR uj_1$[rbp], rax

; 778  :         __UNIT_TYPE uj_2 = u_buf[u_index - 2];

  00084	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0008b	48 8b 4d 08	 mov	 rcx, QWORD PTR u_index$[rbp]
  0008f	48 8b 44 c8 f0	 mov	 rax, QWORD PTR [rax+rcx*8-16]
  00094	48 89 45 68	 mov	 QWORD PTR uj_2$[rbp], rax

; 779  :         __UNIT_TYPE v1 = v_buf[v_buf_len - 1];

  00098	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  0009f	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR v_buf_len$[rbp]
  000a6	48 8b 44 c8 f8	 mov	 rax, QWORD PTR [rax+rcx*8-8]
  000ab	48 89 85 88 00
	00 00		 mov	 QWORD PTR v1$[rbp], rax

; 780  :         __UNIT_TYPE v2 = v_buf[v_buf_len - 2];

  000b2	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  000b9	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR v_buf_len$[rbp]
  000c0	48 8b 44 c8 f0	 mov	 rax, QWORD PTR [rax+rcx*8-16]
  000c5	48 89 85 a8 00
	00 00		 mov	 QWORD PTR v2$[rbp], rax

; 781  :         __UNIT_TYPE q_ = AsumeQ_(uj, uj_1, v1);

  000cc	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR v1$[rbp]
  000d3	48 8b 55 48	 mov	 rdx, QWORD PTR uj_1$[rbp]
  000d7	48 8b 4d 28	 mov	 rcx, QWORD PTR uj$[rbp]
  000db	e8 00 00 00 00	 call	 ?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z ; Palmtree::Math::Core::Internal::AsumeQ_
  000e0	48 89 85 c8 00
	00 00		 mov	 QWORD PTR q_$[rbp], rax

; 782  :         if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

  000e7	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR v2$[rbp]
  000ee	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000f3	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR v1$[rbp]
  000fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ff	4c 8b 4d 68	 mov	 r9, QWORD PTR uj_2$[rbp]
  00103	4c 8b 45 48	 mov	 r8, QWORD PTR uj_1$[rbp]
  00107	48 8b 55 28	 mov	 rdx, QWORD PTR uj$[rbp]
  0010b	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR q_$[rbp]
  00112	e8 00 00 00 00	 call	 ?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z ; Palmtree::Math::Core::Internal::CheckQ_
  00117	85 c0		 test	 eax, eax
  00119	75 09		 jne	 SHORT $LN2@CalculateQ

; 783  :             return (q_);

  0011b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR q_$[rbp]
  00122	eb 66		 jmp	 SHORT $LN1@CalculateQ
$LN2@CalculateQ:

; 784  :         --q_;

  00124	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR q_$[rbp]
  0012b	48 ff c8	 dec	 rax
  0012e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR q_$[rbp], rax

; 785  :         if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

  00135	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR v2$[rbp]
  0013c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00141	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR v1$[rbp]
  00148	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014d	4c 8b 4d 68	 mov	 r9, QWORD PTR uj_2$[rbp]
  00151	4c 8b 45 48	 mov	 r8, QWORD PTR uj_1$[rbp]
  00155	48 8b 55 28	 mov	 rdx, QWORD PTR uj$[rbp]
  00159	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR q_$[rbp]
  00160	e8 00 00 00 00	 call	 ?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z ; Palmtree::Math::Core::Internal::CheckQ_
  00165	85 c0		 test	 eax, eax
  00167	75 09		 jne	 SHORT $LN3@CalculateQ

; 786  :             return (q_);

  00169	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR q_$[rbp]
  00170	eb 18		 jmp	 SHORT $LN1@CalculateQ
$LN3@CalculateQ:

; 787  :         --q_;

  00172	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR q_$[rbp]
  00179	48 ff c8	 dec	 rax
  0017c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR q_$[rbp], rax

; 788  :         return (q_);

  00183	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR q_$[rbp]
$LN1@CalculateQ:

; 789  :     }

  0018a	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  00191	5f		 pop	 rdi
  00192	5d		 pop	 rbp
  00193	c3		 ret	 0
?CalculateQ_@Internal@Core@Math@Palmtree@@YA_KPEA_K0_K1@Z ENDP ; Palmtree::Math::Core::Internal::CalculateQ_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z
_TEXT	SEGMENT
lh_mi$ = 8
lh_lo$ = 40
rh_hi$ = 72
rh_mi$ = 104
rh_lo$ = 136
t_hi$ = 168
t_mi$ = 200
tv92 = 404
tv85 = 408
tv83 = 416
q_$ = 464
uj$ = 472
uj_1$ = 480
uj_2$ = 488
v1$ = 496
v2$ = 504
?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z PROC ; Palmtree::Math::Core::Internal::CheckQ_X, COMDAT

; 738  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+504]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 739  :         __UNIT_TYPE lh_mi;
; 740  :         __UNIT_TYPE lh_lo = _MULTIPLYX_UNIT(v2, q_, &lh_mi);

  00045	4c 8d 45 08	 lea	 r8, QWORD PTR lh_mi$[rbp]
  00049	48 8b 95 d0 01
	00 00		 mov	 rdx, QWORD PTR q_$[rbp]
  00050	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR v2$[rbp]
  00057	e8 00 00 00 00	 call	 _MULTIPLYX_UNIT
  0005c	48 89 45 28	 mov	 QWORD PTR lh_lo$[rbp], rax

; 741  :         __UNIT_TYPE rh_hi;
; 742  :         __UNIT_TYPE rh_mi;
; 743  :         __UNIT_TYPE rh_lo = uj_2;

  00060	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR uj_2$[rbp]
  00067	48 89 85 88 00
	00 00		 mov	 QWORD PTR rh_lo$[rbp], rax

; 744  :         __UNIT_TYPE t_hi;
; 745  :         __UNIT_TYPE t_mi = _MULTIPLYX_UNIT(q_, v1, &t_hi);

  0006e	4c 8d 85 a8 00
	00 00		 lea	 r8, QWORD PTR t_hi$[rbp]
  00075	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR v1$[rbp]
  0007c	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR q_$[rbp]
  00083	e8 00 00 00 00	 call	 _MULTIPLYX_UNIT
  00088	48 89 85 c8 00
	00 00		 mov	 QWORD PTR t_mi$[rbp], rax

; 746  : 
; 747  :         _SUBTRUCT_UNIT(_SUBTRUCT_UNIT(0, uj_1, t_mi, &rh_mi), uj, t_hi, &rh_hi);

  0008f	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR t_hi$[rbp]
  00096	48 89 85 98 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  0009d	4c 8d 4d 68	 lea	 r9, QWORD PTR rh_mi$[rbp]
  000a1	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR t_mi$[rbp]
  000a8	48 8b 95 e0 01
	00 00		 mov	 rdx, QWORD PTR uj_1$[rbp]
  000af	33 c9		 xor	 ecx, ecx
  000b1	e8 00 00 00 00	 call	 _SUBTRUCT_UNIT
  000b6	88 85 a0 01 00
	00		 mov	 BYTE PTR tv83[rbp], al
  000bc	4c 8d 4d 48	 lea	 r9, QWORD PTR rh_hi$[rbp]
  000c0	4c 8b 85 98 01
	00 00		 mov	 r8, QWORD PTR tv85[rbp]
  000c7	48 8b 95 d8 01
	00 00		 mov	 rdx, QWORD PTR uj$[rbp]
  000ce	0f b6 8d a0 01
	00 00		 movzx	 ecx, BYTE PTR tv83[rbp]
  000d5	e8 00 00 00 00	 call	 _SUBTRUCT_UNIT

; 748  : 
; 749  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 750  :         if (sizeof(q_) == sizeof(_UINT64_T))

  000da	33 c0		 xor	 eax, eax
  000dc	83 f8 01	 cmp	 eax, 1
  000df	74 0c		 je	 SHORT $LN2@CheckQ_X

; 751  :             AddToMULTI64Counter(2);

  000e1	b9 02 00 00 00	 mov	 ecx, 2
  000e6	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 752  :         else

  000eb	eb 0a		 jmp	 SHORT $LN3@CheckQ_X
$LN2@CheckQ_X:

; 753  :             AddToMULTI32Counter(2);

  000ed	b9 02 00 00 00	 mov	 ecx, 2
  000f2	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN3@CheckQ_X:

; 754  : #endif
; 755  :         if (rh_hi > 0)

  000f7	48 83 7d 48 00	 cmp	 QWORD PTR rh_hi$[rbp], 0
  000fc	76 06		 jbe	 SHORT $LN4@CheckQ_X

; 756  :         {
; 757  :             return (FALSE);

  000fe	33 c0		 xor	 eax, eax
  00100	eb 4e		 jmp	 SHORT $LN1@CheckQ_X
  00102	eb 4c		 jmp	 SHORT $LN5@CheckQ_X
$LN4@CheckQ_X:

; 758  :         }
; 759  :         else if (lh_mi > rh_mi)

  00104	48 8b 45 68	 mov	 rax, QWORD PTR rh_mi$[rbp]
  00108	48 39 45 08	 cmp	 QWORD PTR lh_mi$[rbp], rax
  0010c	76 09		 jbe	 SHORT $LN6@CheckQ_X

; 760  :         {
; 761  :             return (TRUE);

  0010e	b8 01 00 00 00	 mov	 eax, 1
  00113	eb 3b		 jmp	 SHORT $LN1@CheckQ_X
  00115	eb 39		 jmp	 SHORT $LN7@CheckQ_X
$LN6@CheckQ_X:

; 762  :         }
; 763  :         else if (lh_mi < rh_mi)

  00117	48 8b 45 68	 mov	 rax, QWORD PTR rh_mi$[rbp]
  0011b	48 39 45 08	 cmp	 QWORD PTR lh_mi$[rbp], rax
  0011f	73 06		 jae	 SHORT $LN8@CheckQ_X

; 764  :         {
; 765  :             return (FALSE);

  00121	33 c0		 xor	 eax, eax
  00123	eb 2b		 jmp	 SHORT $LN1@CheckQ_X

; 766  :         }
; 767  :         else

  00125	eb 29		 jmp	 SHORT $LN9@CheckQ_X
$LN8@CheckQ_X:

; 768  :         {
; 769  :             return (lh_lo > rh_lo);

  00127	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR rh_lo$[rbp]
  0012e	48 39 45 28	 cmp	 QWORD PTR lh_lo$[rbp], rax
  00132	76 0c		 jbe	 SHORT $LN11@CheckQ_X
  00134	c7 85 94 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv92[rbp], 1
  0013e	eb 0a		 jmp	 SHORT $LN12@CheckQ_X
$LN11@CheckQ_X:
  00140	c7 85 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv92[rbp], 0
$LN12@CheckQ_X:
  0014a	8b 85 94 01 00
	00		 mov	 eax, DWORD PTR tv92[rbp]
$LN9@CheckQ_X:
$LN7@CheckQ_X:
$LN5@CheckQ_X:
$LN1@CheckQ_X:

; 770  :         }
; 771  :     }

  00150	48 8b f8	 mov	 rdi, rax
  00153	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcFrameData
  0015e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00163	48 8b c7	 mov	 rax, rdi
  00166	48 8d a5 b8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+440]
  0016d	5f		 pop	 rdi
  0016e	5d		 pop	 rbp
  0016f	c3		 ret	 0
?CheckQ_X@Internal@Core@Math@Palmtree@@YAH_K00000@Z ENDP ; Palmtree::Math::Core::Internal::CheckQ_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z
_TEXT	SEGMENT
lh_mi$ = 8
lh_lo$ = 40
rh_hi$ = 72
rh_mi$ = 104
rh_lo$ = 136
t_hi$ = 168
t_mi$ = 200
tv92 = 404
tv85 = 408
tv83 = 416
q_$ = 464
uj$ = 472
uj_1$ = 480
uj_2$ = 488
v1$ = 496
v2$ = 504
?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z PROC	; Palmtree::Math::Core::Internal::CheckQ_, COMDAT

; 711  :     {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+504]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 712  :         __UNIT_TYPE lh_mi;
; 713  :         __UNIT_TYPE lh_lo = _MULTIPLY_UNIT(v2, q_, &lh_mi);

  00045	4c 8d 45 08	 lea	 r8, QWORD PTR lh_mi$[rbp]
  00049	48 8b 95 d0 01
	00 00		 mov	 rdx, QWORD PTR q_$[rbp]
  00050	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR v2$[rbp]
  00057	e8 00 00 00 00	 call	 _MULTIPLY_UNIT
  0005c	48 89 45 28	 mov	 QWORD PTR lh_lo$[rbp], rax

; 714  :         __UNIT_TYPE rh_hi;
; 715  :         __UNIT_TYPE rh_mi;
; 716  :         __UNIT_TYPE rh_lo = uj_2;

  00060	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR uj_2$[rbp]
  00067	48 89 85 88 00
	00 00		 mov	 QWORD PTR rh_lo$[rbp], rax

; 717  :         __UNIT_TYPE t_hi;
; 718  :         __UNIT_TYPE t_mi = _MULTIPLY_UNIT(q_, v1, &t_hi);

  0006e	4c 8d 85 a8 00
	00 00		 lea	 r8, QWORD PTR t_hi$[rbp]
  00075	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR v1$[rbp]
  0007c	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR q_$[rbp]
  00083	e8 00 00 00 00	 call	 _MULTIPLY_UNIT
  00088	48 89 85 c8 00
	00 00		 mov	 QWORD PTR t_mi$[rbp], rax

; 719  :         _SUBTRUCT_UNIT(_SUBTRUCT_UNIT(0, uj_1, t_mi, &rh_mi), uj, t_hi, &rh_hi);

  0008f	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR t_hi$[rbp]
  00096	48 89 85 98 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  0009d	4c 8d 4d 68	 lea	 r9, QWORD PTR rh_mi$[rbp]
  000a1	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR t_mi$[rbp]
  000a8	48 8b 95 e0 01
	00 00		 mov	 rdx, QWORD PTR uj_1$[rbp]
  000af	33 c9		 xor	 ecx, ecx
  000b1	e8 00 00 00 00	 call	 _SUBTRUCT_UNIT
  000b6	88 85 a0 01 00
	00		 mov	 BYTE PTR tv83[rbp], al
  000bc	4c 8d 4d 48	 lea	 r9, QWORD PTR rh_hi$[rbp]
  000c0	4c 8b 85 98 01
	00 00		 mov	 r8, QWORD PTR tv85[rbp]
  000c7	48 8b 95 d8 01
	00 00		 mov	 rdx, QWORD PTR uj$[rbp]
  000ce	0f b6 8d a0 01
	00 00		 movzx	 ecx, BYTE PTR tv83[rbp]
  000d5	e8 00 00 00 00	 call	 _SUBTRUCT_UNIT

; 720  : 
; 721  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 722  :         if (sizeof(q_) == sizeof(_UINT64_T))

  000da	33 c0		 xor	 eax, eax
  000dc	83 f8 01	 cmp	 eax, 1
  000df	74 0c		 je	 SHORT $LN2@CheckQ_

; 723  :             AddToMULTI64Counter(2);

  000e1	b9 02 00 00 00	 mov	 ecx, 2
  000e6	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 724  :         else

  000eb	eb 0a		 jmp	 SHORT $LN3@CheckQ_
$LN2@CheckQ_:

; 725  :             AddToMULTI32Counter(2);

  000ed	b9 02 00 00 00	 mov	 ecx, 2
  000f2	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
$LN3@CheckQ_:

; 726  : #endif
; 727  :         if (rh_hi > 0)

  000f7	48 83 7d 48 00	 cmp	 QWORD PTR rh_hi$[rbp], 0
  000fc	76 06		 jbe	 SHORT $LN4@CheckQ_

; 728  :             return (FALSE);

  000fe	33 c0		 xor	 eax, eax
  00100	eb 4e		 jmp	 SHORT $LN1@CheckQ_
  00102	eb 4c		 jmp	 SHORT $LN5@CheckQ_
$LN4@CheckQ_:

; 729  :         else if (lh_mi > rh_mi)

  00104	48 8b 45 68	 mov	 rax, QWORD PTR rh_mi$[rbp]
  00108	48 39 45 08	 cmp	 QWORD PTR lh_mi$[rbp], rax
  0010c	76 09		 jbe	 SHORT $LN6@CheckQ_

; 730  :             return (TRUE);

  0010e	b8 01 00 00 00	 mov	 eax, 1
  00113	eb 3b		 jmp	 SHORT $LN1@CheckQ_
  00115	eb 39		 jmp	 SHORT $LN7@CheckQ_
$LN6@CheckQ_:

; 731  :         else if (lh_mi < rh_mi)

  00117	48 8b 45 68	 mov	 rax, QWORD PTR rh_mi$[rbp]
  0011b	48 39 45 08	 cmp	 QWORD PTR lh_mi$[rbp], rax
  0011f	73 06		 jae	 SHORT $LN8@CheckQ_

; 732  :             return (FALSE);

  00121	33 c0		 xor	 eax, eax
  00123	eb 2b		 jmp	 SHORT $LN1@CheckQ_

; 733  :         else

  00125	eb 29		 jmp	 SHORT $LN9@CheckQ_
$LN8@CheckQ_:

; 734  :             return (lh_lo > rh_lo);

  00127	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR rh_lo$[rbp]
  0012e	48 39 45 28	 cmp	 QWORD PTR lh_lo$[rbp], rax
  00132	76 0c		 jbe	 SHORT $LN11@CheckQ_
  00134	c7 85 94 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv92[rbp], 1
  0013e	eb 0a		 jmp	 SHORT $LN12@CheckQ_
$LN11@CheckQ_:
  00140	c7 85 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv92[rbp], 0
$LN12@CheckQ_:
  0014a	8b 85 94 01 00
	00		 mov	 eax, DWORD PTR tv92[rbp]
$LN9@CheckQ_:
$LN7@CheckQ_:
$LN5@CheckQ_:
$LN1@CheckQ_:

; 735  :     }

  00150	48 8b f8	 mov	 rdi, rax
  00153	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z$rtcFrameData
  0015e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00163	48 8b c7	 mov	 rax, rdi
  00166	48 8d a5 b8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+440]
  0016d	5f		 pop	 rdi
  0016e	5d		 pop	 rbp
  0016f	c3		 ret	 0
?CheckQ_@Internal@Core@Math@Palmtree@@YAH_K00000@Z ENDP	; Palmtree::Math::Core::Internal::CheckQ_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z
_TEXT	SEGMENT
r$ = 8
q$ = 40
uj$ = 288
uj_1$ = 296
v1$ = 304
?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z PROC	; Palmtree::Math::Core::Internal::AsumeQ_, COMDAT

; 696  :     {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 697  :         if (uj == v1)

  00040	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR v1$[rbp]
  00047	48 39 85 20 01
	00 00		 cmp	 QWORD PTR uj$[rbp], rax
  0004e	75 09		 jne	 SHORT $LN2@AsumeQ_

; 698  :             return (-1);

  00050	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00057	eb 39		 jmp	 SHORT $LN1@AsumeQ_
$LN2@AsumeQ_:

; 699  :         __UNIT_TYPE r;
; 700  :         __UNIT_TYPE q = _DIVREM_UNIT(uj, uj_1, v1, &r);

  00059	4c 8d 4d 08	 lea	 r9, QWORD PTR r$[rbp]
  0005d	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR v1$[rbp]
  00064	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR uj_1$[rbp]
  0006b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR uj$[rbp]
  00072	e8 00 00 00 00	 call	 _DIVREM_UNIT
  00077	48 89 45 28	 mov	 QWORD PTR q$[rbp], rax

; 701  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 702  :         if (sizeof(v1) == sizeof(_UINT64_T))

  0007b	33 c0		 xor	 eax, eax
  0007d	83 f8 01	 cmp	 eax, 1
  00080	74 07		 je	 SHORT $LN3@AsumeQ_

; 703  :             IncrementDIV64Counter();

  00082	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 704  :         else

  00087	eb 05		 jmp	 SHORT $LN4@AsumeQ_
$LN3@AsumeQ_:

; 705  :             IncrementDIV32Counter();

  00089	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN4@AsumeQ_:

; 706  : #endif
; 707  :         return (q);

  0008e	48 8b 45 28	 mov	 rax, QWORD PTR q$[rbp]
$LN1@AsumeQ_:

; 708  :     }

  00092	48 8b f8	 mov	 rdi, rax
  00095	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z$rtcFrameData
  000a0	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000a5	48 8b c7	 mov	 rax, rdi
  000a8	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000af	5f		 pop	 rdi
  000b0	5d		 pop	 rbp
  000b1	c3		 ret	 0
?AsumeQ_@Internal@Core@Math@Palmtree@@YA_K_K00@Z ENDP	; Palmtree::Math::Core::Internal::AsumeQ_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z
_TEXT	SEGMENT
u_hi_orig$ = 8
u_lo_orig$ = 40
v_orig$ = 72
d$ = 100
u0$ = 132
u1$ = 164
u2$ = 196
u3$ = 228
u4$ = 260
v1$ = 292
v2$ = 324
q1$ = 356
q2$ = 388
q3$ = 420
q_$ = 452
t_hi$23 = 488
t_lo$24 = 520
tt$25 = 548
t0$26 = 580
t1$27 = 612
t2$28 = 644
borrow$29 = 676
carry$30 = 708
t_hi$31 = 744
t_lo$32 = 776
tt$33 = 804
t0$34 = 836
t1$35 = 868
t2$36 = 900
borrow$37 = 932
carry$38 = 964
t_hi$39 = 1000
t_lo$40 = 1032
tt$41 = 1060
t0$42 = 1092
t1$43 = 1124
t2$44 = 1156
borrow$45 = 1188
carry$46 = 1220
r_hi$47 = 1252
r_lo$48 = 1284
q_hi$49 = 1320
q_lo$50 = 1352
t1_hi$51 = 1384
t1_lo$52 = 1416
t2_hi$53 = 1448
t2_lo$54 = 1480
t_vh$55 = 1512
t_hi$56 = 1544
t_lo$57 = 1576
carry$58 = 1604
$T59 = 2600
$T60 = 2680
$T61 = 2760
$T62 = 2840
$T63 = 2920
$T64 = 3000
$T65 = 3080
$T66 = 3160
$T67 = 3240
$T68 = 3320
$T69 = 3400
tv473 = 3464
tv469 = 3464
tv287 = 3464
tv190 = 3464
tv93 = 3464
tv587 = 3472
tv552 = 3472
tv517 = 3472
u_hi$ = 3520
u_lo$ = 3528
v$ = 3536
r$ = 3544
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z PROC ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW, COMDAT

; 161  :         {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec d8 0d
	00 00		 sub	 rsp, 3544		; 00000dd8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 76 03 00 00	 mov	 ecx, 886		; 00000376H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 f8
	0d 00 00	 mov	 rcx, QWORD PTR [rsp+3576]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 162  : #ifdef _DEBUG
; 163  :             _UINT64_T u_hi_orig = u_hi;

  00045	48 8b 85 c0 0d
	00 00		 mov	 rax, QWORD PTR u_hi$[rbp]
  0004c	48 89 45 08	 mov	 QWORD PTR u_hi_orig$[rbp], rax

; 164  :             _UINT64_T u_lo_orig = u_lo;

  00050	48 8b 85 c8 0d
	00 00		 mov	 rax, QWORD PTR u_lo$[rbp]
  00057	48 89 45 28	 mov	 QWORD PTR u_lo_orig$[rbp], rax

; 165  :             _UINT64_T v_orig = v;

  0005b	48 8b 85 d0 0d
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  00062	48 89 45 48	 mov	 QWORD PTR v_orig$[rbp], rax

; 166  : #endif
; 167  : 
; 168  :             int d = _LZCNT_ALT_64(v);

  00066	48 8b 8d d0 0d
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  0006d	e8 00 00 00 00	 call	 _LZCNT_ALT_64
  00072	89 45 64	 mov	 DWORD PTR d$[rbp], eax

; 169  :             _UINT32_T u0;
; 170  :             if (d == 0)

  00075	83 7d 64 00	 cmp	 DWORD PTR d$[rbp], 0
  00079	75 0c		 jne	 SHORT $LN2@DIVREM_UNI

; 171  :             {
; 172  :                 u0 = 0;

  0007b	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR u0$[rbp], 0

; 173  :             }
; 174  :             else

  00085	eb 78		 jmp	 SHORT $LN3@DIVREM_UNI
$LN2@DIVREM_UNI:

; 175  :             {
; 176  :                 u0 = (_UINT32_T)(u_hi >> (64 - d));

  00087	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0008c	2b 45 64	 sub	 eax, DWORD PTR d$[rbp]
  0008f	0f b6 c8	 movzx	 ecx, al
  00092	48 8b 85 c0 0d
	00 00		 mov	 rax, QWORD PTR u_hi$[rbp]
  00099	48 d3 e8	 shr	 rax, cl
  0009c	89 85 84 00 00
	00		 mov	 DWORD PTR u0$[rbp], eax

; 177  :                 u_hi = (u_hi << d) | (u_lo >> (64 - d));

  000a2	8b 45 64	 mov	 eax, DWORD PTR d$[rbp]
  000a5	0f b6 c8	 movzx	 ecx, al
  000a8	48 8b 85 c0 0d
	00 00		 mov	 rax, QWORD PTR u_hi$[rbp]
  000af	48 d3 e0	 shl	 rax, cl
  000b2	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000b7	2b 4d 64	 sub	 ecx, DWORD PTR d$[rbp]
  000ba	48 8b 95 c8 0d
	00 00		 mov	 rdx, QWORD PTR u_lo$[rbp]
  000c1	48 d3 ea	 shr	 rdx, cl
  000c4	48 8b ca	 mov	 rcx, rdx
  000c7	48 0b c1	 or	 rax, rcx
  000ca	48 89 85 c0 0d
	00 00		 mov	 QWORD PTR u_hi$[rbp], rax

; 178  :                 u_lo = u_lo << d;

  000d1	8b 45 64	 mov	 eax, DWORD PTR d$[rbp]
  000d4	0f b6 c8	 movzx	 ecx, al
  000d7	48 8b 85 c8 0d
	00 00		 mov	 rax, QWORD PTR u_lo$[rbp]
  000de	48 d3 e0	 shl	 rax, cl
  000e1	48 89 85 c8 0d
	00 00		 mov	 QWORD PTR u_lo$[rbp], rax

; 179  :                 v = v << d;

  000e8	8b 45 64	 mov	 eax, DWORD PTR d$[rbp]
  000eb	0f b6 c8	 movzx	 ecx, al
  000ee	48 8b 85 d0 0d
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  000f5	48 d3 e0	 shl	 rax, cl
  000f8	48 89 85 d0 0d
	00 00		 mov	 QWORD PTR v$[rbp], rax
$LN3@DIVREM_UNI:

; 180  :             }
; 181  :             _UINT32_T u1;
; 182  :             _UINT32_T u2 = _FROMDWORDTOWORD(u_hi, &u1);

  000ff	48 8d 95 a4 00
	00 00		 lea	 rdx, QWORD PTR u1$[rbp]
  00106	48 8b 8d c0 0d
	00 00		 mov	 rcx, QWORD PTR u_hi$[rbp]
  0010d	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  00112	89 85 c4 00 00
	00		 mov	 DWORD PTR u2$[rbp], eax

; 183  :             _UINT32_T u3;
; 184  :             _UINT32_T u4 = _FROMDWORDTOWORD(u_lo, &u3);

  00118	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR u3$[rbp]
  0011f	48 8b 8d c8 0d
	00 00		 mov	 rcx, QWORD PTR u_lo$[rbp]
  00126	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  0012b	89 85 04 01 00
	00		 mov	 DWORD PTR u4$[rbp], eax

; 185  :             _UINT32_T v1;
; 186  :             _UINT32_T v2 = _FROMDWORDTOWORD(v, &v1);

  00131	48 8d 95 24 01
	00 00		 lea	 rdx, QWORD PTR v1$[rbp]
  00138	48 8b 8d d0 0d
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  0013f	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  00144	89 85 44 01 00
	00		 mov	 DWORD PTR v2$[rbp], eax

; 187  :             _UINT32_T q1;
; 188  :             _UINT32_T q2;
; 189  :             _UINT32_T q3;
; 190  :             _UINT32_T q_;
; 191  : 
; 192  :             {
; 193  :                 q_ = _Calculate_Q_(u0, u1, u2, v1, v2);

  0014a	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR v2$[rbp]
  00150	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00154	44 8b 8d 24 01
	00 00		 mov	 r9d, DWORD PTR v1$[rbp]
  0015b	44 8b 85 c4 00
	00 00		 mov	 r8d, DWORD PTR u2$[rbp]
  00162	8b 95 a4 00 00
	00		 mov	 edx, DWORD PTR u1$[rbp]
  00168	8b 8d 84 00 00
	00		 mov	 ecx, DWORD PTR u0$[rbp]
  0016e	e8 00 00 00 00	 call	 ?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z ; Palmtree::Math::Core::Internal::DivRem::_Calculate_Q_
  00173	89 85 c4 01 00
	00		 mov	 DWORD PTR q_$[rbp], eax

; 194  : 
; 195  :                 _UINT64_T t_hi;
; 196  :                 _UINT64_T t_lo = _umul128(_FROMWORDTODWORD(v1, v2), q_, &t_hi);

  00179	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR q_$[rbp]
  0017f	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00186	8b 95 44 01 00
	00		 mov	 edx, DWORD PTR v2$[rbp]
  0018c	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR v1$[rbp]
  00192	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  00197	48 89 85 90 0d
	00 00		 mov	 QWORD PTR tv587[rbp], rax
  0019e	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  001a5	48 8b c1	 mov	 rax, rcx
  001a8	48 8b 8d 90 0d
	00 00		 mov	 rcx, QWORD PTR tv587[rbp]
  001af	48 f7 e1	 mul	 rcx
  001b2	48 89 95 e8 01
	00 00		 mov	 QWORD PTR t_hi$23[rbp], rdx
  001b9	48 89 85 08 02
	00 00		 mov	 QWORD PTR t_lo$24[rbp], rax

; 197  :                 _UINT32_T tt;
; 198  :                 _UINT32_T t0 = _FROMDWORDTOWORD(t_hi, &tt);

  001c0	48 8d 95 24 02
	00 00		 lea	 rdx, QWORD PTR tt$25[rbp]
  001c7	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR t_hi$23[rbp]
  001ce	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  001d3	89 85 44 02 00
	00		 mov	 DWORD PTR t0$26[rbp], eax

; 199  :                 _UINT32_T t1;
; 200  :                 _UINT32_T t2 = _FROMDWORDTOWORD(t_lo, &t1);

  001d9	48 8d 95 64 02
	00 00		 lea	 rdx, QWORD PTR t1$27[rbp]
  001e0	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR t_lo$24[rbp]
  001e7	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  001ec	89 85 84 02 00
	00		 mov	 DWORD PTR t2$28[rbp], eax

; 201  :                 if (tt != 0)

  001f2	83 bd 24 02 00
	00 00		 cmp	 DWORD PTR tt$25[rbp], 0
  001f9	74 2d		 je	 SHORT $LN4@DIVREM_UNI

; 202  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;0");

  001fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@EDOPPJEK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00202	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00209	48 8d 8d 28 0a
	00 00		 lea	 rcx, QWORD PTR $T59[rbp]
  00210	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0021c	48 8d 8d 28 0a
	00 00		 lea	 rcx, QWORD PTR $T59[rbp]
  00223	e8 00 00 00 00	 call	 _CxxThrowException
$LN4@DIVREM_UNI:

; 203  :                 char borrow = 0;

  00228	c6 85 a4 02 00
	00 00		 mov	 BYTE PTR borrow$29[rbp], 0

; 204  :                 borrow = _subborrow_u32(borrow, u2, t2, &u2);

  0022f	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR u2$[rbp]
  00235	0f b6 8d a4 02
	00 00		 movzx	 ecx, BYTE PTR borrow$29[rbp]
  0023c	80 c1 ff	 add	 cl, -1
  0023f	1b 85 84 02 00
	00		 sbb	 eax, DWORD PTR t2$28[rbp]
  00245	0f 92 c1	 setb	 cl
  00248	89 85 c4 00 00
	00		 mov	 DWORD PTR u2$[rbp], eax
  0024e	88 8d a4 02 00
	00		 mov	 BYTE PTR borrow$29[rbp], cl

; 205  :                 borrow = _subborrow_u32(borrow, u1, t1, &u1);

  00254	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR u1$[rbp]
  0025a	0f b6 8d a4 02
	00 00		 movzx	 ecx, BYTE PTR borrow$29[rbp]
  00261	80 c1 ff	 add	 cl, -1
  00264	1b 85 64 02 00
	00		 sbb	 eax, DWORD PTR t1$27[rbp]
  0026a	0f 92 c1	 setb	 cl
  0026d	89 85 a4 00 00
	00		 mov	 DWORD PTR u1$[rbp], eax
  00273	88 8d a4 02 00
	00		 mov	 BYTE PTR borrow$29[rbp], cl

; 206  :                 borrow = _subborrow_u32(borrow, u0, t0, &u0);

  00279	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR u0$[rbp]
  0027f	0f b6 8d a4 02
	00 00		 movzx	 ecx, BYTE PTR borrow$29[rbp]
  00286	80 c1 ff	 add	 cl, -1
  00289	1b 85 44 02 00
	00		 sbb	 eax, DWORD PTR t0$26[rbp]
  0028f	0f 92 c1	 setb	 cl
  00292	89 85 84 00 00
	00		 mov	 DWORD PTR u0$[rbp], eax
  00298	88 8d a4 02 00
	00		 mov	 BYTE PTR borrow$29[rbp], cl

; 207  :                 if (borrow)

  0029e	0f be 85 a4 02
	00 00		 movsx	 eax, BYTE PTR borrow$29[rbp]
  002a5	85 c0		 test	 eax, eax
  002a7	0f 84 81 00 00
	00		 je	 $LN5@DIVREM_UNI

; 208  :                 {
; 209  :                     char carry = 0;

  002ad	c6 85 c4 02 00
	00 00		 mov	 BYTE PTR carry$30[rbp], 0

; 210  :                     carry = _addcarry_u32(carry, u2, v2, &u2);

  002b4	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR u2$[rbp]
  002ba	0f b6 8d c4 02
	00 00		 movzx	 ecx, BYTE PTR carry$30[rbp]
  002c1	80 c1 ff	 add	 cl, -1
  002c4	13 85 44 01 00
	00		 adc	 eax, DWORD PTR v2$[rbp]
  002ca	0f 92 c1	 setb	 cl
  002cd	89 85 c4 00 00
	00		 mov	 DWORD PTR u2$[rbp], eax
  002d3	88 8d c4 02 00
	00		 mov	 BYTE PTR carry$30[rbp], cl

; 211  :                     carry = _addcarry_u32(carry, u1, v1, &u1);

  002d9	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR u1$[rbp]
  002df	0f b6 8d c4 02
	00 00		 movzx	 ecx, BYTE PTR carry$30[rbp]
  002e6	80 c1 ff	 add	 cl, -1
  002e9	13 85 24 01 00
	00		 adc	 eax, DWORD PTR v1$[rbp]
  002ef	0f 92 c1	 setb	 cl
  002f2	89 85 a4 00 00
	00		 mov	 DWORD PTR u1$[rbp], eax
  002f8	88 8d c4 02 00
	00		 mov	 BYTE PTR carry$30[rbp], cl

; 212  :                     carry = _addcarry_u32(carry, u0, 0, &u0);

  002fe	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR u0$[rbp]
  00304	0f b6 8d c4 02
	00 00		 movzx	 ecx, BYTE PTR carry$30[rbp]
  0030b	80 c1 ff	 add	 cl, -1
  0030e	83 d0 00	 adc	 eax, 0
  00311	0f 92 c1	 setb	 cl
  00314	89 85 84 00 00
	00		 mov	 DWORD PTR u0$[rbp], eax
  0031a	88 8d c4 02 00
	00		 mov	 BYTE PTR carry$30[rbp], cl

; 213  :                     --q_;

  00320	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR q_$[rbp]
  00326	ff c8		 dec	 eax
  00328	89 85 c4 01 00
	00		 mov	 DWORD PTR q_$[rbp], eax
$LN5@DIVREM_UNI:

; 214  :                 }
; 215  :                 q1 = q_;

  0032e	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR q_$[rbp]
  00334	89 85 64 01 00
	00		 mov	 DWORD PTR q1$[rbp], eax

; 216  :                 if (u0 > 0)

  0033a	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR u0$[rbp], 0
  00341	76 2d		 jbe	 SHORT $LN6@DIVREM_UNI

; 217  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;0");

  00343	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@EDOPPJEK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  0034a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00351	48 8d 8d 78 0a
	00 00		 lea	 rcx, QWORD PTR $T60[rbp]
  00358	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0035d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00364	48 8d 8d 78 0a
	00 00		 lea	 rcx, QWORD PTR $T60[rbp]
  0036b	e8 00 00 00 00	 call	 _CxxThrowException
$LN6@DIVREM_UNI:

; 218  :             }
; 219  : 
; 220  :             {
; 221  :                 q_ = _Calculate_Q_(u1, u2, u3, v1, v2);

  00370	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR v2$[rbp]
  00376	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0037a	44 8b 8d 24 01
	00 00		 mov	 r9d, DWORD PTR v1$[rbp]
  00381	44 8b 85 e4 00
	00 00		 mov	 r8d, DWORD PTR u3$[rbp]
  00388	8b 95 c4 00 00
	00		 mov	 edx, DWORD PTR u2$[rbp]
  0038e	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR u1$[rbp]
  00394	e8 00 00 00 00	 call	 ?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z ; Palmtree::Math::Core::Internal::DivRem::_Calculate_Q_
  00399	89 85 c4 01 00
	00		 mov	 DWORD PTR q_$[rbp], eax

; 222  : 
; 223  :                 _UINT64_T t_hi;
; 224  :                 _UINT64_T t_lo = _umul128(_FROMWORDTODWORD(v1, v2), q_, &t_hi);

  0039f	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR q_$[rbp]
  003a5	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv190[rbp], rax
  003ac	8b 95 44 01 00
	00		 mov	 edx, DWORD PTR v2$[rbp]
  003b2	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR v1$[rbp]
  003b8	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  003bd	48 89 85 90 0d
	00 00		 mov	 QWORD PTR tv552[rbp], rax
  003c4	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv190[rbp]
  003cb	48 8b c1	 mov	 rax, rcx
  003ce	48 8b 8d 90 0d
	00 00		 mov	 rcx, QWORD PTR tv552[rbp]
  003d5	48 f7 e1	 mul	 rcx
  003d8	48 89 95 e8 02
	00 00		 mov	 QWORD PTR t_hi$31[rbp], rdx
  003df	48 89 85 08 03
	00 00		 mov	 QWORD PTR t_lo$32[rbp], rax

; 225  :                 _UINT32_T tt;
; 226  :                 _UINT32_T t0 = _FROMDWORDTOWORD(t_hi, &tt);

  003e6	48 8d 95 24 03
	00 00		 lea	 rdx, QWORD PTR tt$33[rbp]
  003ed	48 8b 8d e8 02
	00 00		 mov	 rcx, QWORD PTR t_hi$31[rbp]
  003f4	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  003f9	89 85 44 03 00
	00		 mov	 DWORD PTR t0$34[rbp], eax

; 227  :                 _UINT32_T t1;
; 228  :                 _UINT32_T t2 = _FROMDWORDTOWORD(t_lo, &t1);

  003ff	48 8d 95 64 03
	00 00		 lea	 rdx, QWORD PTR t1$35[rbp]
  00406	48 8b 8d 08 03
	00 00		 mov	 rcx, QWORD PTR t_lo$32[rbp]
  0040d	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  00412	89 85 84 03 00
	00		 mov	 DWORD PTR t2$36[rbp], eax

; 229  :                 if (tt != 0)

  00418	83 bd 24 03 00
	00 00		 cmp	 DWORD PTR tt$33[rbp], 0
  0041f	74 2d		 je	 SHORT $LN7@DIVREM_UNI

; 230  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;0");

  00421	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@EDOPPJEK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00428	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0042f	48 8d 8d c8 0a
	00 00		 lea	 rcx, QWORD PTR $T61[rbp]
  00436	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0043b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00442	48 8d 8d c8 0a
	00 00		 lea	 rcx, QWORD PTR $T61[rbp]
  00449	e8 00 00 00 00	 call	 _CxxThrowException
$LN7@DIVREM_UNI:

; 231  :                 char borrow = 0;

  0044e	c6 85 a4 03 00
	00 00		 mov	 BYTE PTR borrow$37[rbp], 0

; 232  :                 borrow = _subborrow_u32(borrow, u3, t2, &u3);

  00455	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR u3$[rbp]
  0045b	0f b6 8d a4 03
	00 00		 movzx	 ecx, BYTE PTR borrow$37[rbp]
  00462	80 c1 ff	 add	 cl, -1
  00465	1b 85 84 03 00
	00		 sbb	 eax, DWORD PTR t2$36[rbp]
  0046b	0f 92 c1	 setb	 cl
  0046e	89 85 e4 00 00
	00		 mov	 DWORD PTR u3$[rbp], eax
  00474	88 8d a4 03 00
	00		 mov	 BYTE PTR borrow$37[rbp], cl

; 233  :                 borrow = _subborrow_u32(borrow, u2, t1, &u2);

  0047a	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR u2$[rbp]
  00480	0f b6 8d a4 03
	00 00		 movzx	 ecx, BYTE PTR borrow$37[rbp]
  00487	80 c1 ff	 add	 cl, -1
  0048a	1b 85 64 03 00
	00		 sbb	 eax, DWORD PTR t1$35[rbp]
  00490	0f 92 c1	 setb	 cl
  00493	89 85 c4 00 00
	00		 mov	 DWORD PTR u2$[rbp], eax
  00499	88 8d a4 03 00
	00		 mov	 BYTE PTR borrow$37[rbp], cl

; 234  :                 borrow = _subborrow_u32(borrow, u1, t0, &u1);

  0049f	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR u1$[rbp]
  004a5	0f b6 8d a4 03
	00 00		 movzx	 ecx, BYTE PTR borrow$37[rbp]
  004ac	80 c1 ff	 add	 cl, -1
  004af	1b 85 44 03 00
	00		 sbb	 eax, DWORD PTR t0$34[rbp]
  004b5	0f 92 c1	 setb	 cl
  004b8	89 85 a4 00 00
	00		 mov	 DWORD PTR u1$[rbp], eax
  004be	88 8d a4 03 00
	00		 mov	 BYTE PTR borrow$37[rbp], cl

; 235  :                 if (borrow)

  004c4	0f be 85 a4 03
	00 00		 movsx	 eax, BYTE PTR borrow$37[rbp]
  004cb	85 c0		 test	 eax, eax
  004cd	0f 84 81 00 00
	00		 je	 $LN8@DIVREM_UNI

; 236  :                 {
; 237  :                     char carry = 0;

  004d3	c6 85 c4 03 00
	00 00		 mov	 BYTE PTR carry$38[rbp], 0

; 238  :                     carry = _addcarry_u32(carry, u3, v2, &u3);

  004da	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR u3$[rbp]
  004e0	0f b6 8d c4 03
	00 00		 movzx	 ecx, BYTE PTR carry$38[rbp]
  004e7	80 c1 ff	 add	 cl, -1
  004ea	13 85 44 01 00
	00		 adc	 eax, DWORD PTR v2$[rbp]
  004f0	0f 92 c1	 setb	 cl
  004f3	89 85 e4 00 00
	00		 mov	 DWORD PTR u3$[rbp], eax
  004f9	88 8d c4 03 00
	00		 mov	 BYTE PTR carry$38[rbp], cl

; 239  :                     carry = _addcarry_u32(carry, u2, v1, &u2);

  004ff	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR u2$[rbp]
  00505	0f b6 8d c4 03
	00 00		 movzx	 ecx, BYTE PTR carry$38[rbp]
  0050c	80 c1 ff	 add	 cl, -1
  0050f	13 85 24 01 00
	00		 adc	 eax, DWORD PTR v1$[rbp]
  00515	0f 92 c1	 setb	 cl
  00518	89 85 c4 00 00
	00		 mov	 DWORD PTR u2$[rbp], eax
  0051e	88 8d c4 03 00
	00		 mov	 BYTE PTR carry$38[rbp], cl

; 240  :                     carry = _addcarry_u32(carry, u1, 0, &u1);

  00524	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR u1$[rbp]
  0052a	0f b6 8d c4 03
	00 00		 movzx	 ecx, BYTE PTR carry$38[rbp]
  00531	80 c1 ff	 add	 cl, -1
  00534	83 d0 00	 adc	 eax, 0
  00537	0f 92 c1	 setb	 cl
  0053a	89 85 a4 00 00
	00		 mov	 DWORD PTR u1$[rbp], eax
  00540	88 8d c4 03 00
	00		 mov	 BYTE PTR carry$38[rbp], cl

; 241  :                     --q_;

  00546	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR q_$[rbp]
  0054c	ff c8		 dec	 eax
  0054e	89 85 c4 01 00
	00		 mov	 DWORD PTR q_$[rbp], eax
$LN8@DIVREM_UNI:

; 242  :                 }
; 243  :                 q2 = q_;

  00554	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR q_$[rbp]
  0055a	89 85 84 01 00
	00		 mov	 DWORD PTR q2$[rbp], eax

; 244  :                 if (u1 > 0)

  00560	83 bd a4 00 00
	00 00		 cmp	 DWORD PTR u1$[rbp], 0
  00567	76 2d		 jbe	 SHORT $LN9@DIVREM_UNI

; 245  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;0");

  00569	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@EDOPPJEK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00570	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00577	48 8d 8d 18 0b
	00 00		 lea	 rcx, QWORD PTR $T62[rbp]
  0057e	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00583	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0058a	48 8d 8d 18 0b
	00 00		 lea	 rcx, QWORD PTR $T62[rbp]
  00591	e8 00 00 00 00	 call	 _CxxThrowException
$LN9@DIVREM_UNI:

; 246  :             }
; 247  : 
; 248  :             {
; 249  :                 q_ = _Calculate_Q_(u2, u3, u4, v1, v2);

  00596	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR v2$[rbp]
  0059c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  005a0	44 8b 8d 24 01
	00 00		 mov	 r9d, DWORD PTR v1$[rbp]
  005a7	44 8b 85 04 01
	00 00		 mov	 r8d, DWORD PTR u4$[rbp]
  005ae	8b 95 e4 00 00
	00		 mov	 edx, DWORD PTR u3$[rbp]
  005b4	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR u2$[rbp]
  005ba	e8 00 00 00 00	 call	 ?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z ; Palmtree::Math::Core::Internal::DivRem::_Calculate_Q_
  005bf	89 85 c4 01 00
	00		 mov	 DWORD PTR q_$[rbp], eax

; 250  : 
; 251  :                 _UINT64_T t_hi;
; 252  :                 _UINT64_T t_lo = _umul128(_FROMWORDTODWORD(v1, v2), q_, &t_hi);

  005c5	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR q_$[rbp]
  005cb	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv287[rbp], rax
  005d2	8b 95 44 01 00
	00		 mov	 edx, DWORD PTR v2$[rbp]
  005d8	8b 8d 24 01 00
	00		 mov	 ecx, DWORD PTR v1$[rbp]
  005de	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  005e3	48 89 85 90 0d
	00 00		 mov	 QWORD PTR tv517[rbp], rax
  005ea	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv287[rbp]
  005f1	48 8b c1	 mov	 rax, rcx
  005f4	48 8b 8d 90 0d
	00 00		 mov	 rcx, QWORD PTR tv517[rbp]
  005fb	48 f7 e1	 mul	 rcx
  005fe	48 89 95 e8 03
	00 00		 mov	 QWORD PTR t_hi$39[rbp], rdx
  00605	48 89 85 08 04
	00 00		 mov	 QWORD PTR t_lo$40[rbp], rax

; 253  :                 _UINT32_T tt;
; 254  :                 _UINT32_T t0 = _FROMDWORDTOWORD(t_hi, &tt);

  0060c	48 8d 95 24 04
	00 00		 lea	 rdx, QWORD PTR tt$41[rbp]
  00613	48 8b 8d e8 03
	00 00		 mov	 rcx, QWORD PTR t_hi$39[rbp]
  0061a	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  0061f	89 85 44 04 00
	00		 mov	 DWORD PTR t0$42[rbp], eax

; 255  :                 _UINT32_T t1;
; 256  :                 _UINT32_T t2 = _FROMDWORDTOWORD(t_lo, &t1);

  00625	48 8d 95 64 04
	00 00		 lea	 rdx, QWORD PTR t1$43[rbp]
  0062c	48 8b 8d 08 04
	00 00		 mov	 rcx, QWORD PTR t_lo$40[rbp]
  00633	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  00638	89 85 84 04 00
	00		 mov	 DWORD PTR t2$44[rbp], eax

; 257  :                 if (tt != 0)

  0063e	83 bd 24 04 00
	00 00		 cmp	 DWORD PTR tt$41[rbp], 0
  00645	74 2d		 je	 SHORT $LN10@DIVREM_UNI

; 258  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;0");

  00647	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@EDOPPJEK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  0064e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00655	48 8d 8d 68 0b
	00 00		 lea	 rcx, QWORD PTR $T63[rbp]
  0065c	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00661	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00668	48 8d 8d 68 0b
	00 00		 lea	 rcx, QWORD PTR $T63[rbp]
  0066f	e8 00 00 00 00	 call	 _CxxThrowException
$LN10@DIVREM_UNI:

; 259  :                 char borrow = 0;

  00674	c6 85 a4 04 00
	00 00		 mov	 BYTE PTR borrow$45[rbp], 0

; 260  :                 borrow = _subborrow_u32(borrow, u4, t2, &u4);

  0067b	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR u4$[rbp]
  00681	0f b6 8d a4 04
	00 00		 movzx	 ecx, BYTE PTR borrow$45[rbp]
  00688	80 c1 ff	 add	 cl, -1
  0068b	1b 85 84 04 00
	00		 sbb	 eax, DWORD PTR t2$44[rbp]
  00691	0f 92 c1	 setb	 cl
  00694	89 85 04 01 00
	00		 mov	 DWORD PTR u4$[rbp], eax
  0069a	88 8d a4 04 00
	00		 mov	 BYTE PTR borrow$45[rbp], cl

; 261  :                 borrow = _subborrow_u32(borrow, u3, t1, &u3);

  006a0	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR u3$[rbp]
  006a6	0f b6 8d a4 04
	00 00		 movzx	 ecx, BYTE PTR borrow$45[rbp]
  006ad	80 c1 ff	 add	 cl, -1
  006b0	1b 85 64 04 00
	00		 sbb	 eax, DWORD PTR t1$43[rbp]
  006b6	0f 92 c1	 setb	 cl
  006b9	89 85 e4 00 00
	00		 mov	 DWORD PTR u3$[rbp], eax
  006bf	88 8d a4 04 00
	00		 mov	 BYTE PTR borrow$45[rbp], cl

; 262  :                 borrow = _subborrow_u32(borrow, u2, t0, &u2);

  006c5	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR u2$[rbp]
  006cb	0f b6 8d a4 04
	00 00		 movzx	 ecx, BYTE PTR borrow$45[rbp]
  006d2	80 c1 ff	 add	 cl, -1
  006d5	1b 85 44 04 00
	00		 sbb	 eax, DWORD PTR t0$42[rbp]
  006db	0f 92 c1	 setb	 cl
  006de	89 85 c4 00 00
	00		 mov	 DWORD PTR u2$[rbp], eax
  006e4	88 8d a4 04 00
	00		 mov	 BYTE PTR borrow$45[rbp], cl

; 263  :                 if (borrow)

  006ea	0f be 85 a4 04
	00 00		 movsx	 eax, BYTE PTR borrow$45[rbp]
  006f1	85 c0		 test	 eax, eax
  006f3	0f 84 81 00 00
	00		 je	 $LN11@DIVREM_UNI

; 264  :                 {
; 265  :                     char carry = 0;

  006f9	c6 85 c4 04 00
	00 00		 mov	 BYTE PTR carry$46[rbp], 0

; 266  :                     carry = _addcarry_u32(carry, u4, v2, &u4);

  00700	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR u4$[rbp]
  00706	0f b6 8d c4 04
	00 00		 movzx	 ecx, BYTE PTR carry$46[rbp]
  0070d	80 c1 ff	 add	 cl, -1
  00710	13 85 44 01 00
	00		 adc	 eax, DWORD PTR v2$[rbp]
  00716	0f 92 c1	 setb	 cl
  00719	89 85 04 01 00
	00		 mov	 DWORD PTR u4$[rbp], eax
  0071f	88 8d c4 04 00
	00		 mov	 BYTE PTR carry$46[rbp], cl

; 267  :                     carry = _addcarry_u32(carry, u3, v1, &u3);

  00725	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR u3$[rbp]
  0072b	0f b6 8d c4 04
	00 00		 movzx	 ecx, BYTE PTR carry$46[rbp]
  00732	80 c1 ff	 add	 cl, -1
  00735	13 85 24 01 00
	00		 adc	 eax, DWORD PTR v1$[rbp]
  0073b	0f 92 c1	 setb	 cl
  0073e	89 85 e4 00 00
	00		 mov	 DWORD PTR u3$[rbp], eax
  00744	88 8d c4 04 00
	00		 mov	 BYTE PTR carry$46[rbp], cl

; 268  :                     carry = _addcarry_u32(carry, u2, 0, &u2);

  0074a	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR u2$[rbp]
  00750	0f b6 8d c4 04
	00 00		 movzx	 ecx, BYTE PTR carry$46[rbp]
  00757	80 c1 ff	 add	 cl, -1
  0075a	83 d0 00	 adc	 eax, 0
  0075d	0f 92 c1	 setb	 cl
  00760	89 85 c4 00 00
	00		 mov	 DWORD PTR u2$[rbp], eax
  00766	88 8d c4 04 00
	00		 mov	 BYTE PTR carry$46[rbp], cl

; 269  :                     --q_;

  0076c	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR q_$[rbp]
  00772	ff c8		 dec	 eax
  00774	89 85 c4 01 00
	00		 mov	 DWORD PTR q_$[rbp], eax
$LN11@DIVREM_UNI:

; 270  :                 }
; 271  :                 q3 = q_;

  0077a	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR q_$[rbp]
  00780	89 85 a4 01 00
	00		 mov	 DWORD PTR q3$[rbp], eax

; 272  :                 if (u2 > 0)

  00786	83 bd c4 00 00
	00 00		 cmp	 DWORD PTR u2$[rbp], 0
  0078d	76 2d		 jbe	 SHORT $LN12@DIVREM_UNI

; 273  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;0");

  0078f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@EDOPPJEK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00796	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0079d	48 8d 8d b8 0b
	00 00		 lea	 rcx, QWORD PTR $T64[rbp]
  007a4	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  007a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  007b0	48 8d 8d b8 0b
	00 00		 lea	 rcx, QWORD PTR $T64[rbp]
  007b7	e8 00 00 00 00	 call	 _CxxThrowException
$LN12@DIVREM_UNI:

; 274  :             }
; 275  : 
; 276  :             if (d == 0)

  007bc	83 7d 64 00	 cmp	 DWORD PTR d$[rbp], 0
  007c0	75 1d		 jne	 SHORT $LN13@DIVREM_UNI

; 277  :                 *r = _FROMWORDTODWORD(u3, u4);

  007c2	8b 95 04 01 00
	00		 mov	 edx, DWORD PTR u4$[rbp]
  007c8	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR u3$[rbp]
  007ce	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  007d3	48 8b 8d d8 0d
	00 00		 mov	 rcx, QWORD PTR r$[rbp]
  007da	48 89 01	 mov	 QWORD PTR [rcx], rax

; 278  :             else

  007dd	eb 6b		 jmp	 SHORT $LN14@DIVREM_UNI
$LN13@DIVREM_UNI:

; 279  :             {
; 280  : 
; 281  :                 _UINT32_T r_hi = (u2 << (32 - d)) | (u3 >> d);

  007df	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  007e4	2b 45 64	 sub	 eax, DWORD PTR d$[rbp]
  007e7	0f b6 c8	 movzx	 ecx, al
  007ea	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR u2$[rbp]
  007f0	d3 e0		 shl	 eax, cl
  007f2	8b 4d 64	 mov	 ecx, DWORD PTR d$[rbp]
  007f5	8b 95 e4 00 00
	00		 mov	 edx, DWORD PTR u3$[rbp]
  007fb	d3 ea		 shr	 edx, cl
  007fd	8b ca		 mov	 ecx, edx
  007ff	0b c1		 or	 eax, ecx
  00801	89 85 e4 04 00
	00		 mov	 DWORD PTR r_hi$47[rbp], eax

; 282  :                 _UINT32_T r_lo = (u3 << (32 - d)) | (u4 >> d);

  00807	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0080c	2b 45 64	 sub	 eax, DWORD PTR d$[rbp]
  0080f	0f b6 c8	 movzx	 ecx, al
  00812	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR u3$[rbp]
  00818	d3 e0		 shl	 eax, cl
  0081a	8b 4d 64	 mov	 ecx, DWORD PTR d$[rbp]
  0081d	8b 95 04 01 00
	00		 mov	 edx, DWORD PTR u4$[rbp]
  00823	d3 ea		 shr	 edx, cl
  00825	8b ca		 mov	 ecx, edx
  00827	0b c1		 or	 eax, ecx
  00829	89 85 04 05 00
	00		 mov	 DWORD PTR r_lo$48[rbp], eax

; 283  :                 *r = _FROMWORDTODWORD(r_hi, r_lo);

  0082f	8b 95 04 05 00
	00		 mov	 edx, DWORD PTR r_lo$48[rbp]
  00835	8b 8d e4 04 00
	00		 mov	 ecx, DWORD PTR r_hi$47[rbp]
  0083b	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  00840	48 8b 8d d8 0d
	00 00		 mov	 rcx, QWORD PTR r$[rbp]
  00847	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN14@DIVREM_UNI:

; 284  :             }
; 285  : 
; 286  : #ifdef _DEBUG
; 287  :             {
; 288  :                 if (*r < 0)

  0084a	48 8b 85 d8 0d
	00 00		 mov	 rax, QWORD PTR r$[rbp]
  00851	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00855	73 2d		 jae	 SHORT $LN15@DIVREM_UNI

; 289  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;7");

  00857	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@NODIMBPD@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  0085e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00865	48 8d 8d 08 0c
	00 00		 lea	 rcx, QWORD PTR $T65[rbp]
  0086c	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00871	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00878	48 8d 8d 08 0c
	00 00		 lea	 rcx, QWORD PTR $T65[rbp]
  0087f	e8 00 00 00 00	 call	 _CxxThrowException
$LN15@DIVREM_UNI:

; 290  :                 if (*r >= v_orig)

  00884	48 8b 85 d8 0d
	00 00		 mov	 rax, QWORD PTR r$[rbp]
  0088b	48 8b 4d 48	 mov	 rcx, QWORD PTR v_orig$[rbp]
  0088f	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00892	72 2d		 jb	 SHORT $LN16@DIVREM_UNI

; 291  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;8");

  00894	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@IGFLNBKF@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  0089b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  008a2	48 8d 8d 58 0c
	00 00		 lea	 rcx, QWORD PTR $T66[rbp]
  008a9	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  008ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  008b5	48 8d 8d 58 0c
	00 00		 lea	 rcx, QWORD PTR $T66[rbp]
  008bc	e8 00 00 00 00	 call	 _CxxThrowException
$LN16@DIVREM_UNI:

; 292  : 
; 293  :                 // 検算をする
; 294  : 
; 295  :                 _UINT64_T q_hi = _FROMWORDTODWORD(0, q1);

  008c1	8b 95 64 01 00
	00		 mov	 edx, DWORD PTR q1$[rbp]
  008c7	33 c9		 xor	 ecx, ecx
  008c9	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  008ce	48 89 85 28 05
	00 00		 mov	 QWORD PTR q_hi$49[rbp], rax

; 296  :                 _UINT64_T q_lo = _FROMWORDTODWORD(q2, q3);

  008d5	8b 95 a4 01 00
	00		 mov	 edx, DWORD PTR q3$[rbp]
  008db	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR q2$[rbp]
  008e1	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  008e6	48 89 85 48 05
	00 00		 mov	 QWORD PTR q_lo$50[rbp], rax

; 297  : 
; 298  :                 _UINT64_T t1_hi;
; 299  :                 _UINT64_T t1_lo = _umul128(v_orig, q_lo, &t1_hi);

  008ed	48 8b 45 48	 mov	 rax, QWORD PTR v_orig$[rbp]
  008f1	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv473[rbp], rax
  008f8	48 8b 8d 48 05
	00 00		 mov	 rcx, QWORD PTR q_lo$50[rbp]
  008ff	48 8b c1	 mov	 rax, rcx
  00902	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv473[rbp]
  00909	48 f7 e1	 mul	 rcx
  0090c	48 89 95 68 05
	00 00		 mov	 QWORD PTR t1_hi$51[rbp], rdx
  00913	48 89 85 88 05
	00 00		 mov	 QWORD PTR t1_lo$52[rbp], rax

; 300  :                 _UINT64_T t2_hi;
; 301  :                 _UINT64_T t2_lo = _umul128(v_orig, q_hi, &t2_hi);

  0091a	48 8b 45 48	 mov	 rax, QWORD PTR v_orig$[rbp]
  0091e	48 89 85 88 0d
	00 00		 mov	 QWORD PTR tv469[rbp], rax
  00925	48 8b 8d 28 05
	00 00		 mov	 rcx, QWORD PTR q_hi$49[rbp]
  0092c	48 8b c1	 mov	 rax, rcx
  0092f	48 8b 8d 88 0d
	00 00		 mov	 rcx, QWORD PTR tv469[rbp]
  00936	48 f7 e1	 mul	 rcx
  00939	48 89 95 a8 05
	00 00		 mov	 QWORD PTR t2_hi$53[rbp], rdx
  00940	48 89 85 c8 05
	00 00		 mov	 QWORD PTR t2_lo$54[rbp], rax

; 302  : 
; 303  :                 _UINT64_T t_vh;
; 304  :                 _UINT64_T t_hi;
; 305  :                 _UINT64_T t_lo;
; 306  :                 char carry = 0;

  00947	c6 85 44 06 00
	00 00		 mov	 BYTE PTR carry$58[rbp], 0

; 307  :                 carry = _addcarry_u64(carry, t1_lo, *r, &t_lo);

  0094e	48 8b 85 88 05
	00 00		 mov	 rax, QWORD PTR t1_lo$52[rbp]
  00955	0f b6 8d 44 06
	00 00		 movzx	 ecx, BYTE PTR carry$58[rbp]
  0095c	80 c1 ff	 add	 cl, -1
  0095f	48 8b 8d d8 0d
	00 00		 mov	 rcx, QWORD PTR r$[rbp]
  00966	48 13 01	 adc	 rax, QWORD PTR [rcx]
  00969	0f 92 c1	 setb	 cl
  0096c	48 89 85 28 06
	00 00		 mov	 QWORD PTR t_lo$57[rbp], rax
  00973	88 8d 44 06 00
	00		 mov	 BYTE PTR carry$58[rbp], cl

; 308  :                 carry = _addcarry_u64(carry, t1_hi, t2_lo, &t_hi);

  00979	48 8b 85 68 05
	00 00		 mov	 rax, QWORD PTR t1_hi$51[rbp]
  00980	0f b6 8d 44 06
	00 00		 movzx	 ecx, BYTE PTR carry$58[rbp]
  00987	80 c1 ff	 add	 cl, -1
  0098a	48 13 85 c8 05
	00 00		 adc	 rax, QWORD PTR t2_lo$54[rbp]
  00991	0f 92 c1	 setb	 cl
  00994	48 89 85 08 06
	00 00		 mov	 QWORD PTR t_hi$56[rbp], rax
  0099b	88 8d 44 06 00
	00		 mov	 BYTE PTR carry$58[rbp], cl

; 309  :                 carry = _addcarry_u64(carry, 0, t2_hi, &t_vh);

  009a1	48 8b 85 a8 05
	00 00		 mov	 rax, QWORD PTR t2_hi$53[rbp]
  009a8	0f b6 8d 44 06
	00 00		 movzx	 ecx, BYTE PTR carry$58[rbp]
  009af	80 c1 ff	 add	 cl, -1
  009b2	48 83 d0 00	 adc	 rax, 0
  009b6	0f 92 c1	 setb	 cl
  009b9	48 89 85 e8 05
	00 00		 mov	 QWORD PTR t_vh$55[rbp], rax
  009c0	88 8d 44 06 00
	00		 mov	 BYTE PTR carry$58[rbp], cl

; 310  :                 if (carry || t_vh > 0)

  009c6	0f be 85 44 06
	00 00		 movsx	 eax, BYTE PTR carry$58[rbp]
  009cd	85 c0		 test	 eax, eax
  009cf	75 0a		 jne	 SHORT $LN18@DIVREM_UNI
  009d1	48 83 bd e8 05
	00 00 00	 cmp	 QWORD PTR t_vh$55[rbp], 0
  009d9	76 2d		 jbe	 SHORT $LN17@DIVREM_UNI
$LN18@DIVREM_UNI:

; 311  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;9");

  009db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@DOOHLGMA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  009e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  009e9	48 8d 8d a8 0c
	00 00		 lea	 rcx, QWORD PTR $T67[rbp]
  009f0	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  009f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  009fc	48 8d 8d a8 0c
	00 00		 lea	 rcx, QWORD PTR $T67[rbp]
  00a03	e8 00 00 00 00	 call	 _CxxThrowException
$LN17@DIVREM_UNI:

; 312  :                 if (t_hi != u_hi_orig)

  00a08	48 8b 45 08	 mov	 rax, QWORD PTR u_hi_orig$[rbp]
  00a0c	48 39 85 08 06
	00 00		 cmp	 QWORD PTR t_hi$56[rbp], rax
  00a13	74 2d		 je	 SHORT $LN19@DIVREM_UNI

; 313  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;9");

  00a15	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@DOOHLGMA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00a1c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00a23	48 8d 8d f8 0c
	00 00		 lea	 rcx, QWORD PTR $T68[rbp]
  00a2a	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00a2f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00a36	48 8d 8d f8 0c
	00 00		 lea	 rcx, QWORD PTR $T68[rbp]
  00a3d	e8 00 00 00 00	 call	 _CxxThrowException
$LN19@DIVREM_UNI:

; 314  :                 if (t_lo != u_lo_orig)

  00a42	48 8b 45 28	 mov	 rax, QWORD PTR u_lo_orig$[rbp]
  00a46	48 39 85 28 06
	00 00		 cmp	 QWORD PTR t_lo$57[rbp], rax
  00a4d	74 2d		 je	 SHORT $LN20@DIVREM_UNI

; 315  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_nW;9");

  00a4f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@DOOHLGMA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00a56	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00a5d	48 8d 8d 48 0d
	00 00		 lea	 rcx, QWORD PTR $T69[rbp]
  00a64	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00a69	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00a70	48 8d 8d 48 0d
	00 00		 lea	 rcx, QWORD PTR $T69[rbp]
  00a77	e8 00 00 00 00	 call	 _CxxThrowException
$LN20@DIVREM_UNI:

; 316  :             }
; 317  : #endif
; 318  :             return (_FROMWORDTODWORD(q2, q3));

  00a7c	8b 95 a4 01 00
	00		 mov	 edx, DWORD PTR q3$[rbp]
  00a82	8b 8d 84 01 00
	00		 mov	 ecx, DWORD PTR q2$[rbp]
  00a88	e8 00 00 00 00	 call	 _FROMWORDTODWORD
$LN21@DIVREM_UNI:

; 319  :         }

  00a8d	48 8b f8	 mov	 rdi, rax
  00a90	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00a94	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z$rtcFrameData
  00a9b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00aa0	48 8b c7	 mov	 rax, rdi
  00aa3	48 8d a5 a8 0d
	00 00		 lea	 rsp, QWORD PTR [rbp+3496]
  00aaa	5f		 pop	 rdi
  00aab	5d		 pop	 rbp
  00aac	c3		 ret	 0
?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z ENDP ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z
_TEXT	SEGMENT
q_$ = 4
uj$ = 256
uj1$ = 264
uj2$ = 272
v1$ = 280
v2$ = 288
?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z PROC ; Palmtree::Math::Core::Internal::DivRem::_Calculate_Q_, COMDAT

; 138  :         {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	55		 push	 rbp
  00013	57		 push	 rdi
  00014	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001b	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00020	48 8b fc	 mov	 rdi, rsp
  00023	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR [rsp+312]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  0003d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 139  :             _UINT32_T q_ = _Asume_Q_(uj, uj1, v1);

  00042	44 8b 85 18 01
	00 00		 mov	 r8d, DWORD PTR v1$[rbp]
  00049	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR uj1$[rbp]
  0004f	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR uj$[rbp]
  00055	e8 00 00 00 00	 call	 ?_Asume_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIII@Z ; Palmtree::Math::Core::Internal::DivRem::_Asume_Q_
  0005a	89 45 04	 mov	 DWORD PTR q_$[rbp], eax

; 140  :             if (_Check_Q_(q_, uj, uj1, uj2, v1, v2))

  0005d	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR v2$[rbp]
  00063	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00067	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR v1$[rbp]
  0006d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00071	44 8b 8d 10 01
	00 00		 mov	 r9d, DWORD PTR uj2$[rbp]
  00078	44 8b 85 08 01
	00 00		 mov	 r8d, DWORD PTR uj1$[rbp]
  0007f	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR uj$[rbp]
  00085	8b 4d 04	 mov	 ecx, DWORD PTR q_$[rbp]
  00088	e8 00 00 00 00	 call	 ?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_
  0008d	85 c0		 test	 eax, eax
  0008f	74 44		 je	 SHORT $LN2@Calculate_

; 141  :             {
; 142  :                 --q_;

  00091	8b 45 04	 mov	 eax, DWORD PTR q_$[rbp]
  00094	ff c8		 dec	 eax
  00096	89 45 04	 mov	 DWORD PTR q_$[rbp], eax

; 143  :                 if (_Check_Q_(q_, uj, uj1, uj2, v1, v2))

  00099	8b 85 20 01 00
	00		 mov	 eax, DWORD PTR v2$[rbp]
  0009f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000a3	8b 85 18 01 00
	00		 mov	 eax, DWORD PTR v1$[rbp]
  000a9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000ad	44 8b 8d 10 01
	00 00		 mov	 r9d, DWORD PTR uj2$[rbp]
  000b4	44 8b 85 08 01
	00 00		 mov	 r8d, DWORD PTR uj1$[rbp]
  000bb	8b 95 00 01 00
	00		 mov	 edx, DWORD PTR uj$[rbp]
  000c1	8b 4d 04	 mov	 ecx, DWORD PTR q_$[rbp]
  000c4	e8 00 00 00 00	 call	 ?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_
  000c9	85 c0		 test	 eax, eax
  000cb	74 08		 je	 SHORT $LN3@Calculate_

; 144  :                     --q_;

  000cd	8b 45 04	 mov	 eax, DWORD PTR q_$[rbp]
  000d0	ff c8		 dec	 eax
  000d2	89 45 04	 mov	 DWORD PTR q_$[rbp], eax
$LN3@Calculate_:
$LN2@Calculate_:

; 145  :             }
; 146  :             return (q_);

  000d5	8b 45 04	 mov	 eax, DWORD PTR q_$[rbp]

; 147  :         }

  000d8	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000df	5f		 pop	 rdi
  000e0	5d		 pop	 rbp
  000e1	c3		 ret	 0
?_Calculate_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIIIII@Z ENDP ; Palmtree::Math::Core::Internal::DivRem::_Calculate_Q_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z
_TEXT	SEGMENT
x1_hi$ = 4
x1_lo$ = 36
x2_hi$ = 68
x2_lo$ = 100
lh2$ = 132
lh1$ = 164
lh0$ = 196
carry$ = 228
rh2$ = 260
rh1$ = 292
rh0$ = 324
tv130 = 532
tv128 = 532
tv93 = 532
q_$ = 576
uj$ = 584
uj1$ = 592
uj2$ = 600
v1$ = 608
v2$ = 616
?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z PROC ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_, COMDAT

; 115  :         {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	55		 push	 rbp
  00013	57		 push	 rdi
  00014	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  0001b	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00020	48 8b fc	 mov	 rdi, rsp
  00023	b9 92 00 00 00	 mov	 ecx, 146		; 00000092H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	8b 8c 24 68 02
	00 00		 mov	 ecx, DWORD PTR [rsp+616]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  0003d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 116  :             _UINT32_T x1_hi;
; 117  :             _UINT32_T x1_lo = _FROMDWORDTOWORD((_UINT64_T)v2 * q_, &x1_hi);

  00042	8b 85 68 02 00
	00		 mov	 eax, DWORD PTR v2$[rbp]
  00048	8b 8d 40 02 00
	00		 mov	 ecx, DWORD PTR q_$[rbp]
  0004e	48 0f af c1	 imul	 rax, rcx
  00052	48 8d 55 04	 lea	 rdx, QWORD PTR x1_hi$[rbp]
  00056	48 8b c8	 mov	 rcx, rax
  00059	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  0005e	89 45 24	 mov	 DWORD PTR x1_lo$[rbp], eax

; 118  :             _UINT32_T x2_hi;
; 119  :             _UINT32_T x2_lo = _FROMDWORDTOWORD((_UINT64_T)v1 * q_, &x2_hi);

  00061	8b 85 60 02 00
	00		 mov	 eax, DWORD PTR v1$[rbp]
  00067	8b 8d 40 02 00
	00		 mov	 ecx, DWORD PTR q_$[rbp]
  0006d	48 0f af c1	 imul	 rax, rcx
  00071	48 8d 55 44	 lea	 rdx, QWORD PTR x2_hi$[rbp]
  00075	48 8b c8	 mov	 rcx, rax
  00078	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  0007d	89 45 64	 mov	 DWORD PTR x2_lo$[rbp], eax

; 120  :             _UINT32_T lh2;
; 121  :             _UINT32_T lh1;
; 122  :             _UINT32_T lh0;
; 123  :             char carry = 0;

  00080	c6 85 e4 00 00
	00 00		 mov	 BYTE PTR carry$[rbp], 0

; 124  :             carry = _addcarry_u32(carry, x1_lo,     0, &lh2);

  00087	8b 45 24	 mov	 eax, DWORD PTR x1_lo$[rbp]
  0008a	0f b6 8d e4 00
	00 00		 movzx	 ecx, BYTE PTR carry$[rbp]
  00091	80 c1 ff	 add	 cl, -1
  00094	83 d0 00	 adc	 eax, 0
  00097	0f 92 c1	 setb	 cl
  0009a	89 85 84 00 00
	00		 mov	 DWORD PTR lh2$[rbp], eax
  000a0	88 8d e4 00 00
	00		 mov	 BYTE PTR carry$[rbp], cl

; 125  :             carry = _addcarry_u32(carry, x1_hi, x2_lo, &lh1);

  000a6	8b 45 04	 mov	 eax, DWORD PTR x1_hi$[rbp]
  000a9	0f b6 8d e4 00
	00 00		 movzx	 ecx, BYTE PTR carry$[rbp]
  000b0	80 c1 ff	 add	 cl, -1
  000b3	13 45 64	 adc	 eax, DWORD PTR x2_lo$[rbp]
  000b6	0f 92 c1	 setb	 cl
  000b9	89 85 a4 00 00
	00		 mov	 DWORD PTR lh1$[rbp], eax
  000bf	88 8d e4 00 00
	00		 mov	 BYTE PTR carry$[rbp], cl

; 126  :             carry = _addcarry_u32(carry,     0, x2_hi, &lh0);

  000c5	8b 45 44	 mov	 eax, DWORD PTR x2_hi$[rbp]
  000c8	0f b6 8d e4 00
	00 00		 movzx	 ecx, BYTE PTR carry$[rbp]
  000cf	80 c1 ff	 add	 cl, -1
  000d2	83 d0 00	 adc	 eax, 0
  000d5	0f 92 c1	 setb	 cl
  000d8	89 85 c4 00 00
	00		 mov	 DWORD PTR lh0$[rbp], eax
  000de	88 8d e4 00 00
	00		 mov	 BYTE PTR carry$[rbp], cl

; 127  :             _UINT32_T rh2 = uj2;

  000e4	8b 85 58 02 00
	00		 mov	 eax, DWORD PTR uj2$[rbp]
  000ea	89 85 04 01 00
	00		 mov	 DWORD PTR rh2$[rbp], eax

; 128  :             _UINT32_T rh1 = uj1;

  000f0	8b 85 50 02 00
	00		 mov	 eax, DWORD PTR uj1$[rbp]
  000f6	89 85 24 01 00
	00		 mov	 DWORD PTR rh1$[rbp], eax

; 129  :             _UINT32_T rh0 = uj;

  000fc	8b 85 48 02 00
	00		 mov	 eax, DWORD PTR uj$[rbp]
  00102	89 85 44 01 00
	00		 mov	 DWORD PTR rh0$[rbp], eax

; 130  :             if (rh0 != lh0)

  00108	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR lh0$[rbp]
  0010e	39 85 44 01 00
	00		 cmp	 DWORD PTR rh0$[rbp], eax
  00114	74 2c		 je	 SHORT $LN2@Check_Q_

; 131  :                 return (lh0 > rh0);

  00116	8b 85 44 01 00
	00		 mov	 eax, DWORD PTR rh0$[rbp]
  0011c	39 85 c4 00 00
	00		 cmp	 DWORD PTR lh0$[rbp], eax
  00122	76 0c		 jbe	 SHORT $LN5@Check_Q_
  00124	c7 85 14 02 00
	00 01 00 00 00	 mov	 DWORD PTR tv93[rbp], 1
  0012e	eb 0a		 jmp	 SHORT $LN6@Check_Q_
$LN5@Check_Q_:
  00130	c7 85 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv93[rbp], 0
$LN6@Check_Q_:
  0013a	8b 85 14 02 00
	00		 mov	 eax, DWORD PTR tv93[rbp]
  00140	eb 64		 jmp	 SHORT $LN1@Check_Q_
$LN2@Check_Q_:

; 132  :             if (rh1 != lh1)

  00142	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR lh1$[rbp]
  00148	39 85 24 01 00
	00		 cmp	 DWORD PTR rh1$[rbp], eax
  0014e	74 2c		 je	 SHORT $LN3@Check_Q_

; 133  :                 return (lh1 > rh1);

  00150	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR rh1$[rbp]
  00156	39 85 a4 00 00
	00		 cmp	 DWORD PTR lh1$[rbp], eax
  0015c	76 0c		 jbe	 SHORT $LN7@Check_Q_
  0015e	c7 85 14 02 00
	00 01 00 00 00	 mov	 DWORD PTR tv128[rbp], 1
  00168	eb 0a		 jmp	 SHORT $LN8@Check_Q_
$LN7@Check_Q_:
  0016a	c7 85 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv128[rbp], 0
$LN8@Check_Q_:
  00174	8b 85 14 02 00
	00		 mov	 eax, DWORD PTR tv128[rbp]
  0017a	eb 2a		 jmp	 SHORT $LN1@Check_Q_
$LN3@Check_Q_:

; 134  :             return (lh2 > rh2);

  0017c	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR rh2$[rbp]
  00182	39 85 84 00 00
	00		 cmp	 DWORD PTR lh2$[rbp], eax
  00188	76 0c		 jbe	 SHORT $LN9@Check_Q_
  0018a	c7 85 14 02 00
	00 01 00 00 00	 mov	 DWORD PTR tv130[rbp], 1
  00194	eb 0a		 jmp	 SHORT $LN10@Check_Q_
$LN9@Check_Q_:
  00196	c7 85 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv130[rbp], 0
$LN10@Check_Q_:
  001a0	8b 85 14 02 00
	00		 mov	 eax, DWORD PTR tv130[rbp]
$LN1@Check_Q_:

; 135  :         }

  001a6	48 8b f8	 mov	 rdi, rax
  001a9	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z$rtcFrameData
  001b4	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001b9	48 8b c7	 mov	 rax, rdi
  001bc	48 8d a5 28 02
	00 00		 lea	 rsp, QWORD PTR [rbp+552]
  001c3	5f		 pop	 rdi
  001c4	5d		 pop	 rbp
  001c5	c3		 ret	 0
?_Check_Q_@DivRem@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ENDP ; Palmtree::Math::Core::Internal::DivRem::_Check_Q_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?_Asume_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIII@Z
_TEXT	SEGMENT
tv71 = 192
uj$ = 240
uj1$ = 248
v1$ = 256
?_Asume_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIII@Z PROC ; Palmtree::Math::Core::Internal::DivRem::_Asume_Q_, COMDAT

; 110  :         {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	55		 push	 rbp
  0000e	57		 push	 rdi
  0000f	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00016	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001b	48 8b fc	 mov	 rdi, rsp
  0001e	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR [rsp+280]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 111  :             return (uj == v1 ? (_UINT32_T)-1 : (_UINT32_T)(_FROMWORDTODWORD(uj, uj1) / v1));

  0003d	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR v1$[rbp]
  00043	39 85 f0 00 00
	00		 cmp	 DWORD PTR uj$[rbp], eax
  00049	75 0c		 jne	 SHORT $LN3@Asume_Q_
  0004b	c7 85 c0 00 00
	00 ff ff ff ff	 mov	 DWORD PTR tv71[rbp], -1	; ffffffffH
  00055	eb 22		 jmp	 SHORT $LN4@Asume_Q_
$LN3@Asume_Q_:
  00057	8b 95 f8 00 00
	00		 mov	 edx, DWORD PTR uj1$[rbp]
  0005d	8b 8d f0 00 00
	00		 mov	 ecx, DWORD PTR uj$[rbp]
  00063	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  00068	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR v1$[rbp]
  0006e	33 d2		 xor	 edx, edx
  00070	48 f7 f1	 div	 rcx
  00073	89 85 c0 00 00
	00		 mov	 DWORD PTR tv71[rbp], eax
$LN4@Asume_Q_:
  00079	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv71[rbp]

; 112  :         }

  0007f	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00086	5f		 pop	 rdi
  00087	5d		 pop	 rbp
  00088	c3		 ret	 0
?_Asume_Q_@DivRem@Internal@Core@Math@Palmtree@@YAIIII@Z ENDP ; Palmtree::Math::Core::Internal::DivRem::_Asume_Q_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z
_TEXT	SEGMENT
_r$ = 4
u1$ = 36
u2$ = 68
u3$ = 100
u4$ = 132
q1$ = 164
q2$ = 196
q3$ = 228
q4$ = 260
t$ = 296
temp4$10 = 328
temp3$11 = 360
temp2$12 = 392
temp1$13 = 424
t_u4$14 = 452
t_u3$15 = 484
t_u2$16 = 516
t_u1$17 = 548
t_u0$18 = 580
carry$19 = 612
$T20 = 1224
$T21 = 1304
$T22 = 1384
$T23 = 1464
$T24 = 1544
$T25 = 1624
$T26 = 1704
$T27 = 1784
tv135 = 1848
tv132 = 1848
tv94 = 1848
tv91 = 1848
tv85 = 1848
tv82 = 1848
tv76 = 1848
tv73 = 1848
u_hi$ = 1888
u_lo$ = 1896
v$ = 1904
r$ = 1912
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z PROC ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W, COMDAT

; 42   :         {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 07
	00 00		 sub	 rsp, 1896		; 00000768H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 da 01 00 00	 mov	 ecx, 474		; 000001daH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR [rsp+1928]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 43   :             _UINT32_T _r;
; 44   :             _UINT32_T u1;
; 45   :             _UINT32_T u2 = _FROMDWORDTOWORD(u_hi, &u1);

  00045	48 8d 55 24	 lea	 rdx, QWORD PTR u1$[rbp]
  00049	48 8b 8d 60 07
	00 00		 mov	 rcx, QWORD PTR u_hi$[rbp]
  00050	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  00055	89 45 44	 mov	 DWORD PTR u2$[rbp], eax

; 46   :             _UINT32_T u3;
; 47   :             _UINT32_T u4 = _FROMDWORDTOWORD(u_lo, &u3);

  00058	48 8d 55 64	 lea	 rdx, QWORD PTR u3$[rbp]
  0005c	48 8b 8d 68 07
	00 00		 mov	 rcx, QWORD PTR u_lo$[rbp]
  00063	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  00068	89 85 84 00 00
	00		 mov	 DWORD PTR u4$[rbp], eax

; 48   :             _UINT32_T q1;
; 49   :             _UINT32_T q2;
; 50   :             _UINT32_T q3;
; 51   :             _UINT32_T q4;
; 52   :             _UINT64_T t;
; 53   : 
; 54   :             t = _FROMWORDTODWORD(0, u1);

  0006e	8b 55 24	 mov	 edx, DWORD PTR u1$[rbp]
  00071	33 c9		 xor	 ecx, ecx
  00073	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  00078	48 89 85 28 01
	00 00		 mov	 QWORD PTR t$[rbp], rax

; 55   :             q1 = (_UINT32_T)(t / v);

  0007f	8b 85 70 07 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  00085	48 89 85 38 07
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  0008c	33 d2		 xor	 edx, edx
  0008e	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR t$[rbp]
  00095	48 8b 8d 38 07
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  0009c	48 f7 f1	 div	 rcx
  0009f	89 85 a4 00 00
	00		 mov	 DWORD PTR q1$[rbp], eax

; 56   :             _r = (_UINT32_T)(t % v);

  000a5	8b 85 70 07 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  000ab	48 89 85 38 07
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  000b2	33 d2		 xor	 edx, edx
  000b4	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR t$[rbp]
  000bb	48 8b 8d 38 07
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  000c2	48 f7 f1	 div	 rcx
  000c5	48 8b c2	 mov	 rax, rdx
  000c8	89 45 04	 mov	 DWORD PTR _r$[rbp], eax

; 57   : 
; 58   :             t = _FROMWORDTODWORD(_r, u2);

  000cb	8b 55 44	 mov	 edx, DWORD PTR u2$[rbp]
  000ce	8b 4d 04	 mov	 ecx, DWORD PTR _r$[rbp]
  000d1	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  000d6	48 89 85 28 01
	00 00		 mov	 QWORD PTR t$[rbp], rax

; 59   :             q2 = (_UINT32_T)(t / v);

  000dd	8b 85 70 07 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  000e3	48 89 85 38 07
	00 00		 mov	 QWORD PTR tv82[rbp], rax
  000ea	33 d2		 xor	 edx, edx
  000ec	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR t$[rbp]
  000f3	48 8b 8d 38 07
	00 00		 mov	 rcx, QWORD PTR tv82[rbp]
  000fa	48 f7 f1	 div	 rcx
  000fd	89 85 c4 00 00
	00		 mov	 DWORD PTR q2$[rbp], eax

; 60   :             _r = (_UINT32_T)(t % v);

  00103	8b 85 70 07 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  00109	48 89 85 38 07
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  00110	33 d2		 xor	 edx, edx
  00112	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR t$[rbp]
  00119	48 8b 8d 38 07
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  00120	48 f7 f1	 div	 rcx
  00123	48 8b c2	 mov	 rax, rdx
  00126	89 45 04	 mov	 DWORD PTR _r$[rbp], eax

; 61   : 
; 62   :             t = _FROMWORDTODWORD(_r, u3);

  00129	8b 55 64	 mov	 edx, DWORD PTR u3$[rbp]
  0012c	8b 4d 04	 mov	 ecx, DWORD PTR _r$[rbp]
  0012f	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  00134	48 89 85 28 01
	00 00		 mov	 QWORD PTR t$[rbp], rax

; 63   :             q3 = (_UINT32_T)(t / v);

  0013b	8b 85 70 07 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  00141	48 89 85 38 07
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  00148	33 d2		 xor	 edx, edx
  0014a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR t$[rbp]
  00151	48 8b 8d 38 07
	00 00		 mov	 rcx, QWORD PTR tv91[rbp]
  00158	48 f7 f1	 div	 rcx
  0015b	89 85 e4 00 00
	00		 mov	 DWORD PTR q3$[rbp], eax

; 64   :             _r = (_UINT32_T)(t % v);

  00161	8b 85 70 07 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  00167	48 89 85 38 07
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  0016e	33 d2		 xor	 edx, edx
  00170	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR t$[rbp]
  00177	48 8b 8d 38 07
	00 00		 mov	 rcx, QWORD PTR tv94[rbp]
  0017e	48 f7 f1	 div	 rcx
  00181	48 8b c2	 mov	 rax, rdx
  00184	89 45 04	 mov	 DWORD PTR _r$[rbp], eax

; 65   : 
; 66   :             t = _FROMWORDTODWORD(_r, u4);

  00187	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR u4$[rbp]
  0018d	8b 4d 04	 mov	 ecx, DWORD PTR _r$[rbp]
  00190	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  00195	48 89 85 28 01
	00 00		 mov	 QWORD PTR t$[rbp], rax

; 67   :             q4 = (_UINT32_T)(t / v);

  0019c	8b 85 70 07 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  001a2	48 89 85 38 07
	00 00		 mov	 QWORD PTR tv132[rbp], rax
  001a9	33 d2		 xor	 edx, edx
  001ab	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR t$[rbp]
  001b2	48 8b 8d 38 07
	00 00		 mov	 rcx, QWORD PTR tv132[rbp]
  001b9	48 f7 f1	 div	 rcx
  001bc	89 85 04 01 00
	00		 mov	 DWORD PTR q4$[rbp], eax

; 68   :             *r = (_UINT32_T)(t % v);

  001c2	8b 85 70 07 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  001c8	48 89 85 38 07
	00 00		 mov	 QWORD PTR tv135[rbp], rax
  001cf	33 d2		 xor	 edx, edx
  001d1	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR t$[rbp]
  001d8	48 8b 8d 38 07
	00 00		 mov	 rcx, QWORD PTR tv135[rbp]
  001df	48 f7 f1	 div	 rcx
  001e2	48 8b c2	 mov	 rax, rdx
  001e5	8b c0		 mov	 eax, eax
  001e7	48 8b 8d 78 07
	00 00		 mov	 rcx, QWORD PTR r$[rbp]
  001ee	48 89 01	 mov	 QWORD PTR [rcx], rax

; 69   : 
; 70   : #ifdef _DEBUG
; 71   :             {
; 72   :                 if (*r < 0)

  001f1	48 8b 85 78 07
	00 00		 mov	 rax, QWORD PTR r$[rbp]
  001f8	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001fc	73 2d		 jae	 SHORT $LN2@DIVREM_UNI

; 73   :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_1W;1");

  001fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@LDEMEDOK@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00205	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0020c	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  00213	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00218	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0021f	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR $T20[rbp]
  00226	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@DIVREM_UNI:

; 74   :                 if (*r >= v)

  0022b	8b 85 70 07 00
	00		 mov	 eax, DWORD PTR v$[rbp]
  00231	48 8b 8d 78 07
	00 00		 mov	 rcx, QWORD PTR r$[rbp]
  00238	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0023b	72 2d		 jb	 SHORT $LN3@DIVREM_UNI

; 75   :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_1W;2");

  0023d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@KBPJOMAE@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00244	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0024b	48 8d 8d 18 05
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  00252	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00257	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0025e	48 8d 8d 18 05
	00 00		 lea	 rcx, QWORD PTR $T21[rbp]
  00265	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@DIVREM_UNI:

; 76   :                 _UINT64_T temp4 = (_UINT64_T)q4 * v;

  0026a	8b 85 04 01 00
	00		 mov	 eax, DWORD PTR q4$[rbp]
  00270	8b 8d 70 07 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  00276	48 0f af c1	 imul	 rax, rcx
  0027a	48 89 85 48 01
	00 00		 mov	 QWORD PTR temp4$10[rbp], rax

; 77   :                 _UINT64_T temp3 = (_UINT64_T)q3 * v;

  00281	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR q3$[rbp]
  00287	8b 8d 70 07 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  0028d	48 0f af c1	 imul	 rax, rcx
  00291	48 89 85 68 01
	00 00		 mov	 QWORD PTR temp3$11[rbp], rax

; 78   :                 _UINT64_T temp2 = (_UINT64_T)q2 * v;

  00298	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR q2$[rbp]
  0029e	8b 8d 70 07 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  002a4	48 0f af c1	 imul	 rax, rcx
  002a8	48 89 85 88 01
	00 00		 mov	 QWORD PTR temp2$12[rbp], rax

; 79   :                 _UINT64_T temp1 = (_UINT64_T)q1 * v;

  002af	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR q1$[rbp]
  002b5	8b 8d 70 07 00
	00		 mov	 ecx, DWORD PTR v$[rbp]
  002bb	48 0f af c1	 imul	 rax, rcx
  002bf	48 89 85 a8 01
	00 00		 mov	 QWORD PTR temp1$13[rbp], rax

; 80   :                 _UINT32_T t_u4;
; 81   :                 _UINT32_T t_u3;
; 82   :                 _UINT32_T t_u2;
; 83   :                 _UINT32_T t_u1;
; 84   :                 _UINT32_T t_u0;
; 85   :                 char carry = 0;

  002c6	c6 85 64 02 00
	00 00		 mov	 BYTE PTR carry$19[rbp], 0

; 86   :                 carry = _addcarry_u32(carry, (_UINT32_T)temp4, (_UINT32_T)*r, &t_u4);

  002cd	8b 85 48 01 00
	00		 mov	 eax, DWORD PTR temp4$10[rbp]
  002d3	0f b6 8d 64 02
	00 00		 movzx	 ecx, BYTE PTR carry$19[rbp]
  002da	80 c1 ff	 add	 cl, -1
  002dd	48 8b 8d 78 07
	00 00		 mov	 rcx, QWORD PTR r$[rbp]
  002e4	13 01		 adc	 eax, DWORD PTR [rcx]
  002e6	0f 92 c1	 setb	 cl
  002e9	89 85 c4 01 00
	00		 mov	 DWORD PTR t_u4$14[rbp], eax
  002ef	88 8d 64 02 00
	00		 mov	 BYTE PTR carry$19[rbp], cl

; 87   :                 carry = _addcarry_u32(carry, (_UINT32_T)temp3, (_UINT32_T)(temp4 >> 32), &t_u3);

  002f5	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR temp4$10[rbp]
  002fc	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00300	8b 8d 68 01 00
	00		 mov	 ecx, DWORD PTR temp3$11[rbp]
  00306	0f b6 95 64 02
	00 00		 movzx	 edx, BYTE PTR carry$19[rbp]
  0030d	80 c2 ff	 add	 dl, -1
  00310	13 c8		 adc	 ecx, eax
  00312	0f 92 c0	 setb	 al
  00315	89 8d e4 01 00
	00		 mov	 DWORD PTR t_u3$15[rbp], ecx
  0031b	88 85 64 02 00
	00		 mov	 BYTE PTR carry$19[rbp], al

; 88   :                 carry = _addcarry_u32(carry, (_UINT32_T)temp2, (_UINT32_T)(temp3 >> 32), &t_u2);

  00321	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR temp3$11[rbp]
  00328	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0032c	8b 8d 88 01 00
	00		 mov	 ecx, DWORD PTR temp2$12[rbp]
  00332	0f b6 95 64 02
	00 00		 movzx	 edx, BYTE PTR carry$19[rbp]
  00339	80 c2 ff	 add	 dl, -1
  0033c	13 c8		 adc	 ecx, eax
  0033e	0f 92 c0	 setb	 al
  00341	89 8d 04 02 00
	00		 mov	 DWORD PTR t_u2$16[rbp], ecx
  00347	88 85 64 02 00
	00		 mov	 BYTE PTR carry$19[rbp], al

; 89   :                 carry = _addcarry_u32(carry, (_UINT32_T)temp1, (_UINT32_T)(temp2 >> 32), &t_u1);

  0034d	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR temp2$12[rbp]
  00354	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00358	8b 8d a8 01 00
	00		 mov	 ecx, DWORD PTR temp1$13[rbp]
  0035e	0f b6 95 64 02
	00 00		 movzx	 edx, BYTE PTR carry$19[rbp]
  00365	80 c2 ff	 add	 dl, -1
  00368	13 c8		 adc	 ecx, eax
  0036a	0f 92 c0	 setb	 al
  0036d	89 8d 24 02 00
	00		 mov	 DWORD PTR t_u1$17[rbp], ecx
  00373	88 85 64 02 00
	00		 mov	 BYTE PTR carry$19[rbp], al

; 90   :                 carry = _addcarry_u32(carry, 0, temp1 >> 32, &t_u0);

  00379	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR temp1$13[rbp]
  00380	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00384	0f b6 8d 64 02
	00 00		 movzx	 ecx, BYTE PTR carry$19[rbp]
  0038b	80 c1 ff	 add	 cl, -1
  0038e	83 d0 00	 adc	 eax, 0
  00391	0f 92 c1	 setb	 cl
  00394	89 85 44 02 00
	00		 mov	 DWORD PTR t_u0$18[rbp], eax
  0039a	88 8d 64 02 00
	00		 mov	 BYTE PTR carry$19[rbp], cl

; 91   :                 if (carry)

  003a0	0f be 85 64 02
	00 00		 movsx	 eax, BYTE PTR carry$19[rbp]
  003a7	85 c0		 test	 eax, eax
  003a9	74 2d		 je	 SHORT $LN4@DIVREM_UNI

; 92   :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_1W;3");

  003ab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@BJEFILGB@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  003b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  003b9	48 8d 8d 68 05
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  003c0	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  003c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  003cc	48 8d 8d 68 05
	00 00		 lea	 rcx, QWORD PTR $T22[rbp]
  003d3	e8 00 00 00 00	 call	 _CxxThrowException
$LN4@DIVREM_UNI:

; 93   :                 if (t_u0 != 0)

  003d8	83 bd 44 02 00
	00 00		 cmp	 DWORD PTR t_u0$18[rbp], 0
  003df	74 2d		 je	 SHORT $LN5@DIVREM_UNI

; 94   :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_1W;4");

  003e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@IEJCLDNI@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  003e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  003ef	48 8d 8d b8 05
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  003f6	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  003fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00402	48 8d 8d b8 05
	00 00		 lea	 rcx, QWORD PTR $T23[rbp]
  00409	e8 00 00 00 00	 call	 _CxxThrowException
$LN5@DIVREM_UNI:

; 95   :                 if (t_u1 != (u_hi >> 32))

  0040e	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR t_u1$17[rbp]
  00414	48 8b 8d 60 07
	00 00		 mov	 rcx, QWORD PTR u_hi$[rbp]
  0041b	48 c1 e9 20	 shr	 rcx, 32			; 00000020H
  0041f	48 3b c1	 cmp	 rax, rcx
  00422	74 2d		 je	 SHORT $LN6@DIVREM_UNI

; 96   :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_1W;5");

  00424	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@DMCONELN@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  0042b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00432	48 8d 8d 08 06
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  00439	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0043e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00445	48 8d 8d 08 06
	00 00		 lea	 rcx, QWORD PTR $T24[rbp]
  0044c	e8 00 00 00 00	 call	 _CxxThrowException
$LN6@DIVREM_UNI:

; 97   :                 if (t_u2 != (_UINT32_T)u_hi)

  00451	8b 85 60 07 00
	00		 mov	 eax, DWORD PTR u_hi$[rbp]
  00457	39 85 04 02 00
	00		 cmp	 DWORD PTR t_u2$16[rbp], eax
  0045d	74 2d		 je	 SHORT $LN7@DIVREM_UNI

; 98   :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_1W;6");

  0045f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@COJLHLFD@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00466	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0046d	48 8d 8d 58 06
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00474	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00479	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00480	48 8d 8d 58 06
	00 00		 lea	 rcx, QWORD PTR $T25[rbp]
  00487	e8 00 00 00 00	 call	 _CxxThrowException
$LN7@DIVREM_UNI:

; 99   :                 if (t_u3 != (u_lo >> 32))

  0048c	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR t_u3$15[rbp]
  00492	48 8b 8d 68 07
	00 00		 mov	 rcx, QWORD PTR u_lo$[rbp]
  00499	48 c1 e9 20	 shr	 rcx, 32			; 00000020H
  0049d	48 3b c1	 cmp	 rax, rcx
  004a0	74 2d		 je	 SHORT $LN8@DIVREM_UNI

; 100  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_1W;7");

  004a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@JGCHBMDG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  004a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  004b0	48 8d 8d a8 06
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  004b7	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  004bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  004c3	48 8d 8d a8 06
	00 00		 lea	 rcx, QWORD PTR $T26[rbp]
  004ca	e8 00 00 00 00	 call	 _CxxThrowException
$LN8@DIVREM_UNI:

; 101  :                 if (t_u4 != (_UINT32_T)u_lo)

  004cf	8b 85 68 07 00
	00		 mov	 eax, DWORD PTR u_lo$[rbp]
  004d5	39 85 c4 01 00
	00		 cmp	 DWORD PTR t_u4$14[rbp], eax
  004db	74 2d		 je	 SHORT $LN9@DIVREM_UNI

; 102  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_divrem.cpp;DivRem::_DIVREM_UNIT_1W;8");

  004dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FC@MOEEAMGA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  004e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  004eb	48 8d 8d f8 06
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  004f2	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  004f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  004fe	48 8d 8d f8 06
	00 00		 lea	 rcx, QWORD PTR $T27[rbp]
  00505	e8 00 00 00 00	 call	 _CxxThrowException
$LN9@DIVREM_UNI:

; 103  :             }
; 104  : #endif
; 105  : 
; 106  :             return (_FROMWORDTODWORD(q3, q4));

  0050a	8b 95 04 01 00
	00		 mov	 edx, DWORD PTR q4$[rbp]
  00510	8b 8d e4 00 00
	00		 mov	 ecx, DWORD PTR q3$[rbp]
  00516	e8 00 00 00 00	 call	 _FROMWORDTODWORD
$LN10@DIVREM_UNI:

; 107  :         }

  0051b	48 8b f8	 mov	 rdi, rax
  0051e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00522	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z$rtcFrameData
  00529	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0052e	48 8b c7	 mov	 rax, rdi
  00531	48 8d a5 48 07
	00 00		 lea	 rsp, QWORD PTR [rbp+1864]
  00538	5f		 pop	 rdi
  00539	5d		 pop	 rbp
  0053a	c3		 ret	 0
?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z ENDP ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_2WORDS_ADCX PROC					; COMDAT

; 2228 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2229 : #ifdef _MSC_VER
; 2230 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADDX_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2231 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADDX_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2232 : #elif defined(__GNUC__)
; 2233 : #ifdef _M_IX86
; 2234 :     __asm__ volatile (
; 2235 :         "addb\t$-1, %0\n\t"
; 2236 :         "movl\t(%1), %%ecx\n\t"
; 2237 :         "adcxl\t(%2), %%ecx\n\t"
; 2238 :         "movl\t%%ecx, (%3)\n\t"
; 2239 :         "movl\t4(%1), %%ecx\n\t"
; 2240 :         "adcxl\t4(%2), %%ecx\n\t"
; 2241 :         "movl\t%%ecx, 4(%3)\n\t"
; 2242 :         "setc\t%0"
; 2243 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2244 :         :
; 2245 :         : "cc", "memory", "%ecx"
; 2246 : );
; 2247 : #elif defined(_M_X64)
; 2248 :     __asm__ volatile (
; 2249 :         "addb\t$-1, %0\n\t"
; 2250 :         "movq\t(%1), %%rcx\n\t"
; 2251 :         "adcxq\t(%2), %%rcx\n\t"
; 2252 :         "movq\t%%rcx, (%3)\n\t"
; 2253 :         "movq\t8(%1), %%rcx\n\t"
; 2254 :         "adcxq\t8(%2), %%rcx\n\t"
; 2255 :         "movq\t%%rcx, 8(%3)\n\t"
; 2256 :         "setc\t%0"
; 2257 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2258 :         :
; 2259 :         : "cc", "memory", "%rcx"
; 2260 : );
; 2261 : #else
; 2262 : #error unknown platform
; 2263 : #endif
; 2264 : #else
; 2265 : #error unknown compiler
; 2266 : #endif
; 2267 :     return (c);

  000ea	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 2268 : }

  000f1	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000f8	5f		 pop	 rdi
  000f9	5d		 pop	 rbp
  000fa	c3		 ret	 0
_ADD_2WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_2WORDS_ADC PROC					; COMDAT

; 2185 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2186 : #ifdef _MSC_VER
; 2187 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADD_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2188 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADD_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2189 : #elif defined(__GNUC__)
; 2190 : #ifdef _M_IX86
; 2191 :     __asm__ volatile (
; 2192 :         "addb\t$-1, %0\n\t"
; 2193 :         "movl\t(%1), %%ecx\n\t"
; 2194 :         "adcl\t(%2), %%ecx\n\t"
; 2195 :         "movl\t%%ecx, (%3)\n\t"
; 2196 :         "movl\t4(%1), %%ecx\n\t"
; 2197 :         "adcl\t4(%2), %%ecx\n\t"
; 2198 :         "movl\t%%ecx, 4(%3)\n\t"
; 2199 :         "setc\t%0"
; 2200 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2201 :         :
; 2202 :         : "cc", "memory", "%ecx"
; 2203 : );
; 2204 : #elif defined(_M_X64)
; 2205 :     __asm__ volatile (
; 2206 :         "addb\t$-1, %0\n\t"
; 2207 :         "movq\t(%1), %%rcx\n\t"
; 2208 :         "adcq\t(%2), %%rcx\n\t"
; 2209 :         "movq\t%%rcx, (%3)\n\t"
; 2210 :         "movq\t8(%1), %%rcx\n\t"
; 2211 :         "adcq\t8(%2), %%rcx\n\t"
; 2212 :         "movq\t%%rcx, 8(%3)\n\t"
; 2213 :         "setc\t%0"
; 2214 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2215 :         :
; 2216 :         : "cc", "memory", "%rcx"
; 2217 : );
; 2218 : #else
; 2219 : #error unknown platform
; 2220 : #endif
; 2221 : #else
; 2222 : #error unknown compiler
; 2223 : #endif
; 2224 :     return (c);

  000ea	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 2225 : }

  000f1	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000f8	5f		 pop	 rdi
  000f9	5d		 pop	 rbp
  000fa	c3		 ret	 0
_ADD_2WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_4WORDS_ADCX PROC					; COMDAT

; 2014 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2015 : #ifdef _MSC_VER
; 2016 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADDX_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2017 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADDX_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2018 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADDX_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2019 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADDX_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 2020 : #elif defined(__GNUC__)
; 2021 : #ifdef _M_IX86
; 2022 :     __asm__ volatile (
; 2023 :         "addb\t$-1, %0\n\t"
; 2024 :         "movl\t(%1), %%ecx\n\t"
; 2025 :         "adcxl\t(%2), %%ecx\n\t"
; 2026 :         "movl\t%%ecx, (%3)\n\t"
; 2027 :         "movl\t4(%1), %%ecx\n\t"
; 2028 :         "adcxl\t4(%2), %%ecx\n\t"
; 2029 :         "movl\t%%ecx, 4(%3)\n\t"
; 2030 :         "movl\t8(%1), %%ecx\n\t"
; 2031 :         "adcxl\t8(%2), %%ecx\n\t"
; 2032 :         "movl\t%%ecx, 8(%3)\n\t"
; 2033 :         "movl\t12(%1), %%ecx\n\t"
; 2034 :         "adcxl\t12(%2), %%ecx\n\t"
; 2035 :         "movl\t%%ecx, 12(%3)\n\t"
; 2036 :         "setc\t%0"
; 2037 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2038 :         :
; 2039 :         : "cc", "memory", "%ecx"
; 2040 : );
; 2041 : #elif defined(_M_X64)
; 2042 :     __asm__ volatile (
; 2043 :         "addb\t$-1, %0\n\t"
; 2044 :         "movq\t(%1), %%rcx\n\t"
; 2045 :         "adcxq\t(%2), %%rcx\n\t"
; 2046 :         "movq\t%%rcx, (%3)\n\t"
; 2047 :         "movq\t8(%1), %%rcx\n\t"
; 2048 :         "adcxq\t8(%2), %%rcx\n\t"
; 2049 :         "movq\t%%rcx, 8(%3)\n\t"
; 2050 :         "movq\t16(%1), %%rcx\n\t"
; 2051 :         "adcxq\t16(%2), %%rcx\n\t"
; 2052 :         "movq\t%%rcx, 16(%3)\n\t"
; 2053 :         "movq\t24(%1), %%rcx\n\t"
; 2054 :         "adcxq\t24(%2), %%rcx\n\t"
; 2055 :         "movq\t%%rcx, 24(%3)\n\t"
; 2056 :         "setc\t%0"
; 2057 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2058 :         :
; 2059 :         : "cc", "memory", "%rcx"
; 2060 : );
; 2061 : #else
; 2062 : #error unknown platform
; 2063 : #endif
; 2064 : #else
; 2065 : #error unknown compiler
; 2066 : #endif
; 2067 :     return (c);

  00190	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 2068 : }

  00197	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0019e	5f		 pop	 rdi
  0019f	5d		 pop	 rbp
  001a0	c3		 ret	 0
_ADD_4WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_4WORDS_ADC PROC					; COMDAT

; 1957 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1958 : #ifdef _MSC_VER
; 1959 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADD_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1960 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADD_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1961 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADD_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1962 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADD_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1963 : #elif defined(__GNUC__)
; 1964 : #ifdef _M_IX86
; 1965 :     __asm__ volatile (
; 1966 :         "addb\t$-1, %0\n\t"
; 1967 :         "movl\t(%1), %%ecx\n\t"
; 1968 :         "adcl\t(%2), %%ecx\n\t"
; 1969 :         "movl\t%%ecx, (%3)\n\t"
; 1970 :         "movl\t4(%1), %%ecx\n\t"
; 1971 :         "adcl\t4(%2), %%ecx\n\t"
; 1972 :         "movl\t%%ecx, 4(%3)\n\t"
; 1973 :         "movl\t8(%1), %%ecx\n\t"
; 1974 :         "adcl\t8(%2), %%ecx\n\t"
; 1975 :         "movl\t%%ecx, 8(%3)\n\t"
; 1976 :         "movl\t12(%1), %%ecx\n\t"
; 1977 :         "adcl\t12(%2), %%ecx\n\t"
; 1978 :         "movl\t%%ecx, 12(%3)\n\t"
; 1979 :         "setc\t%0"
; 1980 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1981 :         :
; 1982 :         : "cc", "memory", "%ecx"
; 1983 : );
; 1984 : #elif defined(_M_X64)
; 1985 :     __asm__ volatile (
; 1986 :         "addb\t$-1, %0\n\t"
; 1987 :         "movq\t(%1), %%rcx\n\t"
; 1988 :         "adcq\t(%2), %%rcx\n\t"
; 1989 :         "movq\t%%rcx, (%3)\n\t"
; 1990 :         "movq\t8(%1), %%rcx\n\t"
; 1991 :         "adcq\t8(%2), %%rcx\n\t"
; 1992 :         "movq\t%%rcx, 8(%3)\n\t"
; 1993 :         "movq\t16(%1), %%rcx\n\t"
; 1994 :         "adcq\t16(%2), %%rcx\n\t"
; 1995 :         "movq\t%%rcx, 16(%3)\n\t"
; 1996 :         "movq\t24(%1), %%rcx\n\t"
; 1997 :         "adcq\t24(%2), %%rcx\n\t"
; 1998 :         "movq\t%%rcx, 24(%3)\n\t"
; 1999 :         "setc\t%0"
; 2000 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2001 :         :
; 2002 :         : "cc", "memory", "%rcx"
; 2003 : );
; 2004 : #else
; 2005 : #error unknown platform
; 2006 : #endif
; 2007 : #else
; 2008 : #error unknown compiler
; 2009 : #endif
; 2010 :     return (c);

  00190	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 2011 : }

  00197	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0019e	5f		 pop	 rdi
  0019f	5d		 pop	 rbp
  001a0	c3		 ret	 0
_ADD_4WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_8WORDS_ADCX PROC					; COMDAT

; 1702 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1703 : #ifdef _MSC_VER
; 1704 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADDX_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1705 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADDX_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1706 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADDX_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1707 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADDX_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1708 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADDX_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1709 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADDX_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1710 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADDX_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1711 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADDX_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1712 : #elif defined(__GNUC__)
; 1713 : #ifdef _M_IX86
; 1714 :     __asm__ volatile (
; 1715 :         "addb\t$-1, %0\n\t"
; 1716 :         "movl\t(%1), %%ecx\n\t"
; 1717 :         "adcxl\t(%2), %%ecx\n\t"
; 1718 :         "movl\t%%ecx, (%3)\n\t"
; 1719 :         "movl\t4(%1), %%ecx\n\t"
; 1720 :         "adcxl\t4(%2), %%ecx\n\t"
; 1721 :         "movl\t%%ecx, 4(%3)\n\t"
; 1722 :         "movl\t8(%1), %%ecx\n\t"
; 1723 :         "adcxl\t8(%2), %%ecx\n\t"
; 1724 :         "movl\t%%ecx, 8(%3)\n\t"
; 1725 :         "movl\t12(%1), %%ecx\n\t"
; 1726 :         "adcxl\t12(%2), %%ecx\n\t"
; 1727 :         "movl\t%%ecx, 12(%3)\n\t"
; 1728 :         "movl\t16(%1), %%ecx\n\t"
; 1729 :         "adcxl\t16(%2), %%ecx\n\t"
; 1730 :         "movl\t%%ecx, 16(%3)\n\t"
; 1731 :         "movl\t20(%1), %%ecx\n\t"
; 1732 :         "adcxl\t20(%2), %%ecx\n\t"
; 1733 :         "movl\t%%ecx, 20(%3)\n\t"
; 1734 :         "movl\t24(%1), %%ecx\n\t"
; 1735 :         "adcxl\t24(%2), %%ecx\n\t"
; 1736 :         "movl\t%%ecx, 24(%3)\n\t"
; 1737 :         "movl\t28(%1), %%ecx\n\t"
; 1738 :         "adcxl\t28(%2), %%ecx\n\t"
; 1739 :         "movl\t%%ecx, 28(%3)\n\t"
; 1740 :         "setc\t%0"
; 1741 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1742 :         :
; 1743 :         : "cc", "memory", "%ecx"
; 1744 : );
; 1745 : #elif defined(_M_X64)
; 1746 :     __asm__ volatile (
; 1747 :         "addb\t$-1, %0\n\t"
; 1748 :         "movq\t(%1), %%rcx\n\t"
; 1749 :         "adcxq\t(%2), %%rcx\n\t"
; 1750 :         "movq\t%%rcx, (%3)\n\t"
; 1751 :         "movq\t8(%1), %%rcx\n\t"
; 1752 :         "adcxq\t8(%2), %%rcx\n\t"
; 1753 :         "movq\t%%rcx, 8(%3)\n\t"
; 1754 :         "movq\t16(%1), %%rcx\n\t"
; 1755 :         "adcxq\t16(%2), %%rcx\n\t"
; 1756 :         "movq\t%%rcx, 16(%3)\n\t"
; 1757 :         "movq\t24(%1), %%rcx\n\t"
; 1758 :         "adcxq\t24(%2), %%rcx\n\t"
; 1759 :         "movq\t%%rcx, 24(%3)\n\t"
; 1760 :         "movq\t32(%1), %%rcx\n\t"
; 1761 :         "adcxq\t32(%2), %%rcx\n\t"
; 1762 :         "movq\t%%rcx, 32(%3)\n\t"
; 1763 :         "movq\t40(%1), %%rcx\n\t"
; 1764 :         "adcxq\t40(%2), %%rcx\n\t"
; 1765 :         "movq\t%%rcx, 40(%3)\n\t"
; 1766 :         "movq\t48(%1), %%rcx\n\t"
; 1767 :         "adcxq\t48(%2), %%rcx\n\t"
; 1768 :         "movq\t%%rcx, 48(%3)\n\t"
; 1769 :         "movq\t56(%1), %%rcx\n\t"
; 1770 :         "adcxq\t56(%2), %%rcx\n\t"
; 1771 :         "movq\t%%rcx, 56(%3)\n\t"
; 1772 :         "setc\t%0"
; 1773 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1774 :         :
; 1775 :         : "cc", "memory", "%rcx"
; 1776 : );
; 1777 : #else
; 1778 : #error unknown platform
; 1779 : #endif
; 1780 : #else
; 1781 : #error unknown compiler
; 1782 : #endif
; 1783 :     return (c);

  002dc	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 1784 : }

  002e3	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  002ea	5f		 pop	 rdi
  002eb	5d		 pop	 rbp
  002ec	c3		 ret	 0
_ADD_8WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_8WORDS_ADC PROC					; COMDAT

; 1617 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1618 : #ifdef _MSC_VER
; 1619 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADD_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1620 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADD_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1621 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADD_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1622 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADD_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1623 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADD_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1624 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADD_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1625 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADD_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1626 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADD_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1627 : #elif defined(__GNUC__)
; 1628 : #ifdef _M_IX86
; 1629 :     __asm__ volatile (
; 1630 :         "addb\t$-1, %0\n\t"
; 1631 :         "movl\t(%1), %%ecx\n\t"
; 1632 :         "adcl\t(%2), %%ecx\n\t"
; 1633 :         "movl\t%%ecx, (%3)\n\t"
; 1634 :         "movl\t4(%1), %%ecx\n\t"
; 1635 :         "adcl\t4(%2), %%ecx\n\t"
; 1636 :         "movl\t%%ecx, 4(%3)\n\t"
; 1637 :         "movl\t8(%1), %%ecx\n\t"
; 1638 :         "adcl\t8(%2), %%ecx\n\t"
; 1639 :         "movl\t%%ecx, 8(%3)\n\t"
; 1640 :         "movl\t12(%1), %%ecx\n\t"
; 1641 :         "adcl\t12(%2), %%ecx\n\t"
; 1642 :         "movl\t%%ecx, 12(%3)\n\t"
; 1643 :         "movl\t16(%1), %%ecx\n\t"
; 1644 :         "adcl\t16(%2), %%ecx\n\t"
; 1645 :         "movl\t%%ecx, 16(%3)\n\t"
; 1646 :         "movl\t20(%1), %%ecx\n\t"
; 1647 :         "adcl\t20(%2), %%ecx\n\t"
; 1648 :         "movl\t%%ecx, 20(%3)\n\t"
; 1649 :         "movl\t24(%1), %%ecx\n\t"
; 1650 :         "adcl\t24(%2), %%ecx\n\t"
; 1651 :         "movl\t%%ecx, 24(%3)\n\t"
; 1652 :         "movl\t28(%1), %%ecx\n\t"
; 1653 :         "adcl\t28(%2), %%ecx\n\t"
; 1654 :         "movl\t%%ecx, 28(%3)\n\t"
; 1655 :         "setc\t%0"
; 1656 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1657 :         :
; 1658 :         : "cc", "memory", "%ecx"
; 1659 : );
; 1660 : #elif defined(_M_X64)
; 1661 :     __asm__ volatile (
; 1662 :         "addb\t$-1, %0\n\t"
; 1663 :         "movq\t(%1), %%rcx\n\t"
; 1664 :         "adcq\t(%2), %%rcx\n\t"
; 1665 :         "movq\t%%rcx, (%3)\n\t"
; 1666 :         "movq\t8(%1), %%rcx\n\t"
; 1667 :         "adcq\t8(%2), %%rcx\n\t"
; 1668 :         "movq\t%%rcx, 8(%3)\n\t"
; 1669 :         "movq\t16(%1), %%rcx\n\t"
; 1670 :         "adcq\t16(%2), %%rcx\n\t"
; 1671 :         "movq\t%%rcx, 16(%3)\n\t"
; 1672 :         "movq\t24(%1), %%rcx\n\t"
; 1673 :         "adcq\t24(%2), %%rcx\n\t"
; 1674 :         "movq\t%%rcx, 24(%3)\n\t"
; 1675 :         "movq\t32(%1), %%rcx\n\t"
; 1676 :         "adcq\t32(%2), %%rcx\n\t"
; 1677 :         "movq\t%%rcx, 32(%3)\n\t"
; 1678 :         "movq\t40(%1), %%rcx\n\t"
; 1679 :         "adcq\t40(%2), %%rcx\n\t"
; 1680 :         "movq\t%%rcx, 40(%3)\n\t"
; 1681 :         "movq\t48(%1), %%rcx\n\t"
; 1682 :         "adcq\t48(%2), %%rcx\n\t"
; 1683 :         "movq\t%%rcx, 48(%3)\n\t"
; 1684 :         "movq\t56(%1), %%rcx\n\t"
; 1685 :         "adcq\t56(%2), %%rcx\n\t"
; 1686 :         "movq\t%%rcx, 56(%3)\n\t"
; 1687 :         "setc\t%0"
; 1688 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1689 :         :
; 1690 :         : "cc", "memory", "%rcx"
; 1691 : );
; 1692 : #else
; 1693 : #error unknown platform
; 1694 : #endif
; 1695 : #else
; 1696 : #error unknown compiler
; 1697 : #endif
; 1698 :     return (c);

  002dc	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 1699 : }

  002e3	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  002ea	5f		 pop	 rdi
  002eb	5d		 pop	 rbp
  002ec	c3		 ret	 0
_ADD_8WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_16WORDS_ADCX PROC					; COMDAT

; 1194 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1195 : #ifdef _MSC_VER
; 1196 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADDX_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1197 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADDX_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1198 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADDX_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1199 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADDX_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1200 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADDX_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1201 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADDX_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1202 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADDX_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1203 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADDX_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1204 :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  002dc	b8 08 00 00 00	 mov	 eax, 8
  002e1	48 6b c0 08	 imul	 rax, rax, 8
  002e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  002ec	48 03 c8	 add	 rcx, rax
  002ef	48 8b c1	 mov	 rax, rcx
  002f2	b9 08 00 00 00	 mov	 ecx, 8
  002f7	48 6b c9 08	 imul	 rcx, rcx, 8
  002fb	ba 08 00 00 00	 mov	 edx, 8
  00300	48 6b d2 08	 imul	 rdx, rdx, 8
  00304	4c 8b c8	 mov	 r9, rax
  00307	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0030e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00312	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00319	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0031d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00324	e8 00 00 00 00	 call	 _ADDX_UNIT
  00329	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1205 :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  0032f	b8 08 00 00 00	 mov	 eax, 8
  00334	48 6b c0 09	 imul	 rax, rax, 9
  00338	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0033f	48 03 c8	 add	 rcx, rax
  00342	48 8b c1	 mov	 rax, rcx
  00345	b9 08 00 00 00	 mov	 ecx, 8
  0034a	48 6b c9 09	 imul	 rcx, rcx, 9
  0034e	ba 08 00 00 00	 mov	 edx, 8
  00353	48 6b d2 09	 imul	 rdx, rdx, 9
  00357	4c 8b c8	 mov	 r9, rax
  0035a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00361	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00365	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0036c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00370	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00377	e8 00 00 00 00	 call	 _ADDX_UNIT
  0037c	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1206 :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  00382	b8 08 00 00 00	 mov	 eax, 8
  00387	48 6b c0 0a	 imul	 rax, rax, 10
  0038b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00392	48 03 c8	 add	 rcx, rax
  00395	48 8b c1	 mov	 rax, rcx
  00398	b9 08 00 00 00	 mov	 ecx, 8
  0039d	48 6b c9 0a	 imul	 rcx, rcx, 10
  003a1	ba 08 00 00 00	 mov	 edx, 8
  003a6	48 6b d2 0a	 imul	 rdx, rdx, 10
  003aa	4c 8b c8	 mov	 r9, rax
  003ad	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  003b4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  003b8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  003bf	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  003c3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  003ca	e8 00 00 00 00	 call	 _ADDX_UNIT
  003cf	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1207 :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  003d5	b8 08 00 00 00	 mov	 eax, 8
  003da	48 6b c0 0b	 imul	 rax, rax, 11
  003de	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  003e5	48 03 c8	 add	 rcx, rax
  003e8	48 8b c1	 mov	 rax, rcx
  003eb	b9 08 00 00 00	 mov	 ecx, 8
  003f0	48 6b c9 0b	 imul	 rcx, rcx, 11
  003f4	ba 08 00 00 00	 mov	 edx, 8
  003f9	48 6b d2 0b	 imul	 rdx, rdx, 11
  003fd	4c 8b c8	 mov	 r9, rax
  00400	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00407	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0040b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00412	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00416	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0041d	e8 00 00 00 00	 call	 _ADDX_UNIT
  00422	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1208 :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  00428	b8 08 00 00 00	 mov	 eax, 8
  0042d	48 6b c0 0c	 imul	 rax, rax, 12
  00431	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00438	48 03 c8	 add	 rcx, rax
  0043b	48 8b c1	 mov	 rax, rcx
  0043e	b9 08 00 00 00	 mov	 ecx, 8
  00443	48 6b c9 0c	 imul	 rcx, rcx, 12
  00447	ba 08 00 00 00	 mov	 edx, 8
  0044c	48 6b d2 0c	 imul	 rdx, rdx, 12
  00450	4c 8b c8	 mov	 r9, rax
  00453	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0045a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0045e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00465	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00469	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00470	e8 00 00 00 00	 call	 _ADDX_UNIT
  00475	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1209 :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 0d	 imul	 rax, rax, 13
  00484	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0048b	48 03 c8	 add	 rcx, rax
  0048e	48 8b c1	 mov	 rax, rcx
  00491	b9 08 00 00 00	 mov	 ecx, 8
  00496	48 6b c9 0d	 imul	 rcx, rcx, 13
  0049a	ba 08 00 00 00	 mov	 edx, 8
  0049f	48 6b d2 0d	 imul	 rdx, rdx, 13
  004a3	4c 8b c8	 mov	 r9, rax
  004a6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  004ad	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  004b1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  004b8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  004bc	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  004c3	e8 00 00 00 00	 call	 _ADDX_UNIT
  004c8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1210 :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  004ce	b8 08 00 00 00	 mov	 eax, 8
  004d3	48 6b c0 0e	 imul	 rax, rax, 14
  004d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  004de	48 03 c8	 add	 rcx, rax
  004e1	48 8b c1	 mov	 rax, rcx
  004e4	b9 08 00 00 00	 mov	 ecx, 8
  004e9	48 6b c9 0e	 imul	 rcx, rcx, 14
  004ed	ba 08 00 00 00	 mov	 edx, 8
  004f2	48 6b d2 0e	 imul	 rdx, rdx, 14
  004f6	4c 8b c8	 mov	 r9, rax
  004f9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00500	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00504	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0050b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0050f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00516	e8 00 00 00 00	 call	 _ADDX_UNIT
  0051b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1211 :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  00521	b8 08 00 00 00	 mov	 eax, 8
  00526	48 6b c0 0f	 imul	 rax, rax, 15
  0052a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00531	48 03 c8	 add	 rcx, rax
  00534	48 8b c1	 mov	 rax, rcx
  00537	b9 08 00 00 00	 mov	 ecx, 8
  0053c	48 6b c9 0f	 imul	 rcx, rcx, 15
  00540	ba 08 00 00 00	 mov	 edx, 8
  00545	48 6b d2 0f	 imul	 rdx, rdx, 15
  00549	4c 8b c8	 mov	 r9, rax
  0054c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00553	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00557	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0055e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00562	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00569	e8 00 00 00 00	 call	 _ADDX_UNIT
  0056e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1212 : #elif defined(__GNUC__)
; 1213 : #ifdef _M_IX86
; 1214 :     __asm__ volatile (
; 1215 :         "addb\t$-1, %0\n\t"
; 1216 :         "movl\t(%1), %%ecx\n\t"
; 1217 :         "adcxl\t(%2), %%ecx\n\t"
; 1218 :         "movl\t%%ecx, (%3)\n\t"
; 1219 :         "movl\t4(%1), %%ecx\n\t"
; 1220 :         "adcxl\t4(%2), %%ecx\n\t"
; 1221 :         "movl\t%%ecx, 4(%3)\n\t"
; 1222 :         "movl\t8(%1), %%ecx\n\t"
; 1223 :         "adcxl\t8(%2), %%ecx\n\t"
; 1224 :         "movl\t%%ecx, 8(%3)\n\t"
; 1225 :         "movl\t12(%1), %%ecx\n\t"
; 1226 :         "adcxl\t12(%2), %%ecx\n\t"
; 1227 :         "movl\t%%ecx, 12(%3)\n\t"
; 1228 :         "movl\t16(%1), %%ecx\n\t"
; 1229 :         "adcxl\t16(%2), %%ecx\n\t"
; 1230 :         "movl\t%%ecx, 16(%3)\n\t"
; 1231 :         "movl\t20(%1), %%ecx\n\t"
; 1232 :         "adcxl\t20(%2), %%ecx\n\t"
; 1233 :         "movl\t%%ecx, 20(%3)\n\t"
; 1234 :         "movl\t24(%1), %%ecx\n\t"
; 1235 :         "adcxl\t24(%2), %%ecx\n\t"
; 1236 :         "movl\t%%ecx, 24(%3)\n\t"
; 1237 :         "movl\t28(%1), %%ecx\n\t"
; 1238 :         "adcxl\t28(%2), %%ecx\n\t"
; 1239 :         "movl\t%%ecx, 28(%3)\n\t"
; 1240 :         "movl\t32(%1), %%ecx\n\t"
; 1241 :         "adcxl\t32(%2), %%ecx\n\t"
; 1242 :         "movl\t%%ecx, 32(%3)\n\t"
; 1243 :         "movl\t36(%1), %%ecx\n\t"
; 1244 :         "adcxl\t36(%2), %%ecx\n\t"
; 1245 :         "movl\t%%ecx, 36(%3)\n\t"
; 1246 :         "movl\t40(%1), %%ecx\n\t"
; 1247 :         "adcxl\t40(%2), %%ecx\n\t"
; 1248 :         "movl\t%%ecx, 40(%3)\n\t"
; 1249 :         "movl\t44(%1), %%ecx\n\t"
; 1250 :         "adcxl\t44(%2), %%ecx\n\t"
; 1251 :         "movl\t%%ecx, 44(%3)\n\t"
; 1252 :         "movl\t48(%1), %%ecx\n\t"
; 1253 :         "adcxl\t48(%2), %%ecx\n\t"
; 1254 :         "movl\t%%ecx, 48(%3)\n\t"
; 1255 :         "movl\t52(%1), %%ecx\n\t"
; 1256 :         "adcxl\t52(%2), %%ecx\n\t"
; 1257 :         "movl\t%%ecx, 52(%3)\n\t"
; 1258 :         "movl\t56(%1), %%ecx\n\t"
; 1259 :         "adcxl\t56(%2), %%ecx\n\t"
; 1260 :         "movl\t%%ecx, 56(%3)\n\t"
; 1261 :         "movl\t60(%1), %%ecx\n\t"
; 1262 :         "adcxl\t60(%2), %%ecx\n\t"
; 1263 :         "movl\t%%ecx, 60(%3)\n\t"
; 1264 :         "setc\t%0"
; 1265 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1266 :         :
; 1267 :         : "cc", "memory", "%ecx"
; 1268 : );
; 1269 : #elif defined(_M_X64)
; 1270 :     __asm__ volatile (
; 1271 :         "addb\t$-1, %0\n\t"
; 1272 :         "movq\t(%1), %%rcx\n\t"
; 1273 :         "adcxq\t(%2), %%rcx\n\t"
; 1274 :         "movq\t%%rcx, (%3)\n\t"
; 1275 :         "movq\t8(%1), %%rcx\n\t"
; 1276 :         "adcxq\t8(%2), %%rcx\n\t"
; 1277 :         "movq\t%%rcx, 8(%3)\n\t"
; 1278 :         "movq\t16(%1), %%rcx\n\t"
; 1279 :         "adcxq\t16(%2), %%rcx\n\t"
; 1280 :         "movq\t%%rcx, 16(%3)\n\t"
; 1281 :         "movq\t24(%1), %%rcx\n\t"
; 1282 :         "adcxq\t24(%2), %%rcx\n\t"
; 1283 :         "movq\t%%rcx, 24(%3)\n\t"
; 1284 :         "movq\t32(%1), %%rcx\n\t"
; 1285 :         "adcxq\t32(%2), %%rcx\n\t"
; 1286 :         "movq\t%%rcx, 32(%3)\n\t"
; 1287 :         "movq\t40(%1), %%rcx\n\t"
; 1288 :         "adcxq\t40(%2), %%rcx\n\t"
; 1289 :         "movq\t%%rcx, 40(%3)\n\t"
; 1290 :         "movq\t48(%1), %%rcx\n\t"
; 1291 :         "adcxq\t48(%2), %%rcx\n\t"
; 1292 :         "movq\t%%rcx, 48(%3)\n\t"
; 1293 :         "movq\t56(%1), %%rcx\n\t"
; 1294 :         "adcxq\t56(%2), %%rcx\n\t"
; 1295 :         "movq\t%%rcx, 56(%3)\n\t"
; 1296 :         "movq\t64(%1), %%rcx\n\t"
; 1297 :         "adcxq\t64(%2), %%rcx\n\t"
; 1298 :         "movq\t%%rcx, 64(%3)\n\t"
; 1299 :         "movq\t72(%1), %%rcx\n\t"
; 1300 :         "adcxq\t72(%2), %%rcx\n\t"
; 1301 :         "movq\t%%rcx, 72(%3)\n\t"
; 1302 :         "movq\t80(%1), %%rcx\n\t"
; 1303 :         "adcxq\t80(%2), %%rcx\n\t"
; 1304 :         "movq\t%%rcx, 80(%3)\n\t"
; 1305 :         "movq\t88(%1), %%rcx\n\t"
; 1306 :         "adcxq\t88(%2), %%rcx\n\t"
; 1307 :         "movq\t%%rcx, 88(%3)\n\t"
; 1308 :         "movq\t96(%1), %%rcx\n\t"
; 1309 :         "adcxq\t96(%2), %%rcx\n\t"
; 1310 :         "movq\t%%rcx, 96(%3)\n\t"
; 1311 :         "movq\t104(%1), %%rcx\n\t"
; 1312 :         "adcxq\t104(%2), %%rcx\n\t"
; 1313 :         "movq\t%%rcx, 104(%3)\n\t"
; 1314 :         "movq\t112(%1), %%rcx\n\t"
; 1315 :         "adcxq\t112(%2), %%rcx\n\t"
; 1316 :         "movq\t%%rcx, 112(%3)\n\t"
; 1317 :         "movq\t120(%1), %%rcx\n\t"
; 1318 :         "adcxq\t120(%2), %%rcx\n\t"
; 1319 :         "movq\t%%rcx, 120(%3)\n\t"
; 1320 :         "setc\t%0"
; 1321 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1322 :         :
; 1323 :         : "cc", "memory", "%rcx"
; 1324 : );
; 1325 : #else
; 1326 : #error unknown platform
; 1327 : #endif
; 1328 : #else
; 1329 : #error unknown compiler
; 1330 : #endif
; 1331 :     return (c);

  00574	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 1332 : }

  0057b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00582	5f		 pop	 rdi
  00583	5d		 pop	 rbp
  00584	c3		 ret	 0
_ADD_16WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_16WORDS_ADC PROC					; COMDAT

; 1053 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1054 : #ifdef _MSC_VER
; 1055 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADD_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1056 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADD_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1057 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADD_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1058 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADD_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1059 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADD_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1060 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADD_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1061 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADD_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1062 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADD_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1063 :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  002dc	b8 08 00 00 00	 mov	 eax, 8
  002e1	48 6b c0 08	 imul	 rax, rax, 8
  002e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  002ec	48 03 c8	 add	 rcx, rax
  002ef	48 8b c1	 mov	 rax, rcx
  002f2	b9 08 00 00 00	 mov	 ecx, 8
  002f7	48 6b c9 08	 imul	 rcx, rcx, 8
  002fb	ba 08 00 00 00	 mov	 edx, 8
  00300	48 6b d2 08	 imul	 rdx, rdx, 8
  00304	4c 8b c8	 mov	 r9, rax
  00307	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0030e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00312	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00319	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0031d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00324	e8 00 00 00 00	 call	 _ADD_UNIT
  00329	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1064 :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  0032f	b8 08 00 00 00	 mov	 eax, 8
  00334	48 6b c0 09	 imul	 rax, rax, 9
  00338	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0033f	48 03 c8	 add	 rcx, rax
  00342	48 8b c1	 mov	 rax, rcx
  00345	b9 08 00 00 00	 mov	 ecx, 8
  0034a	48 6b c9 09	 imul	 rcx, rcx, 9
  0034e	ba 08 00 00 00	 mov	 edx, 8
  00353	48 6b d2 09	 imul	 rdx, rdx, 9
  00357	4c 8b c8	 mov	 r9, rax
  0035a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00361	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00365	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0036c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00370	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00377	e8 00 00 00 00	 call	 _ADD_UNIT
  0037c	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1065 :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  00382	b8 08 00 00 00	 mov	 eax, 8
  00387	48 6b c0 0a	 imul	 rax, rax, 10
  0038b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00392	48 03 c8	 add	 rcx, rax
  00395	48 8b c1	 mov	 rax, rcx
  00398	b9 08 00 00 00	 mov	 ecx, 8
  0039d	48 6b c9 0a	 imul	 rcx, rcx, 10
  003a1	ba 08 00 00 00	 mov	 edx, 8
  003a6	48 6b d2 0a	 imul	 rdx, rdx, 10
  003aa	4c 8b c8	 mov	 r9, rax
  003ad	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  003b4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  003b8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  003bf	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  003c3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  003ca	e8 00 00 00 00	 call	 _ADD_UNIT
  003cf	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1066 :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  003d5	b8 08 00 00 00	 mov	 eax, 8
  003da	48 6b c0 0b	 imul	 rax, rax, 11
  003de	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  003e5	48 03 c8	 add	 rcx, rax
  003e8	48 8b c1	 mov	 rax, rcx
  003eb	b9 08 00 00 00	 mov	 ecx, 8
  003f0	48 6b c9 0b	 imul	 rcx, rcx, 11
  003f4	ba 08 00 00 00	 mov	 edx, 8
  003f9	48 6b d2 0b	 imul	 rdx, rdx, 11
  003fd	4c 8b c8	 mov	 r9, rax
  00400	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00407	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0040b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00412	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00416	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0041d	e8 00 00 00 00	 call	 _ADD_UNIT
  00422	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1067 :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  00428	b8 08 00 00 00	 mov	 eax, 8
  0042d	48 6b c0 0c	 imul	 rax, rax, 12
  00431	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00438	48 03 c8	 add	 rcx, rax
  0043b	48 8b c1	 mov	 rax, rcx
  0043e	b9 08 00 00 00	 mov	 ecx, 8
  00443	48 6b c9 0c	 imul	 rcx, rcx, 12
  00447	ba 08 00 00 00	 mov	 edx, 8
  0044c	48 6b d2 0c	 imul	 rdx, rdx, 12
  00450	4c 8b c8	 mov	 r9, rax
  00453	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0045a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0045e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00465	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00469	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00470	e8 00 00 00 00	 call	 _ADD_UNIT
  00475	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1068 :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 0d	 imul	 rax, rax, 13
  00484	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0048b	48 03 c8	 add	 rcx, rax
  0048e	48 8b c1	 mov	 rax, rcx
  00491	b9 08 00 00 00	 mov	 ecx, 8
  00496	48 6b c9 0d	 imul	 rcx, rcx, 13
  0049a	ba 08 00 00 00	 mov	 edx, 8
  0049f	48 6b d2 0d	 imul	 rdx, rdx, 13
  004a3	4c 8b c8	 mov	 r9, rax
  004a6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  004ad	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  004b1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  004b8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  004bc	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  004c3	e8 00 00 00 00	 call	 _ADD_UNIT
  004c8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1069 :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  004ce	b8 08 00 00 00	 mov	 eax, 8
  004d3	48 6b c0 0e	 imul	 rax, rax, 14
  004d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  004de	48 03 c8	 add	 rcx, rax
  004e1	48 8b c1	 mov	 rax, rcx
  004e4	b9 08 00 00 00	 mov	 ecx, 8
  004e9	48 6b c9 0e	 imul	 rcx, rcx, 14
  004ed	ba 08 00 00 00	 mov	 edx, 8
  004f2	48 6b d2 0e	 imul	 rdx, rdx, 14
  004f6	4c 8b c8	 mov	 r9, rax
  004f9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00500	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00504	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0050b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0050f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00516	e8 00 00 00 00	 call	 _ADD_UNIT
  0051b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1070 :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  00521	b8 08 00 00 00	 mov	 eax, 8
  00526	48 6b c0 0f	 imul	 rax, rax, 15
  0052a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00531	48 03 c8	 add	 rcx, rax
  00534	48 8b c1	 mov	 rax, rcx
  00537	b9 08 00 00 00	 mov	 ecx, 8
  0053c	48 6b c9 0f	 imul	 rcx, rcx, 15
  00540	ba 08 00 00 00	 mov	 edx, 8
  00545	48 6b d2 0f	 imul	 rdx, rdx, 15
  00549	4c 8b c8	 mov	 r9, rax
  0054c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00553	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00557	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0055e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00562	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00569	e8 00 00 00 00	 call	 _ADD_UNIT
  0056e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 1071 : #elif defined(__GNUC__)
; 1072 : #ifdef _M_IX86
; 1073 :     __asm__ volatile (
; 1074 :         "addb\t$-1, %0\n\t"
; 1075 :         "movl\t(%1), %%ecx\n\t"
; 1076 :         "adcl\t(%2), %%ecx\n\t"
; 1077 :         "movl\t%%ecx, (%3)\n\t"
; 1078 :         "movl\t4(%1), %%ecx\n\t"
; 1079 :         "adcl\t4(%2), %%ecx\n\t"
; 1080 :         "movl\t%%ecx, 4(%3)\n\t"
; 1081 :         "movl\t8(%1), %%ecx\n\t"
; 1082 :         "adcl\t8(%2), %%ecx\n\t"
; 1083 :         "movl\t%%ecx, 8(%3)\n\t"
; 1084 :         "movl\t12(%1), %%ecx\n\t"
; 1085 :         "adcl\t12(%2), %%ecx\n\t"
; 1086 :         "movl\t%%ecx, 12(%3)\n\t"
; 1087 :         "movl\t16(%1), %%ecx\n\t"
; 1088 :         "adcl\t16(%2), %%ecx\n\t"
; 1089 :         "movl\t%%ecx, 16(%3)\n\t"
; 1090 :         "movl\t20(%1), %%ecx\n\t"
; 1091 :         "adcl\t20(%2), %%ecx\n\t"
; 1092 :         "movl\t%%ecx, 20(%3)\n\t"
; 1093 :         "movl\t24(%1), %%ecx\n\t"
; 1094 :         "adcl\t24(%2), %%ecx\n\t"
; 1095 :         "movl\t%%ecx, 24(%3)\n\t"
; 1096 :         "movl\t28(%1), %%ecx\n\t"
; 1097 :         "adcl\t28(%2), %%ecx\n\t"
; 1098 :         "movl\t%%ecx, 28(%3)\n\t"
; 1099 :         "movl\t32(%1), %%ecx\n\t"
; 1100 :         "adcl\t32(%2), %%ecx\n\t"
; 1101 :         "movl\t%%ecx, 32(%3)\n\t"
; 1102 :         "movl\t36(%1), %%ecx\n\t"
; 1103 :         "adcl\t36(%2), %%ecx\n\t"
; 1104 :         "movl\t%%ecx, 36(%3)\n\t"
; 1105 :         "movl\t40(%1), %%ecx\n\t"
; 1106 :         "adcl\t40(%2), %%ecx\n\t"
; 1107 :         "movl\t%%ecx, 40(%3)\n\t"
; 1108 :         "movl\t44(%1), %%ecx\n\t"
; 1109 :         "adcl\t44(%2), %%ecx\n\t"
; 1110 :         "movl\t%%ecx, 44(%3)\n\t"
; 1111 :         "movl\t48(%1), %%ecx\n\t"
; 1112 :         "adcl\t48(%2), %%ecx\n\t"
; 1113 :         "movl\t%%ecx, 48(%3)\n\t"
; 1114 :         "movl\t52(%1), %%ecx\n\t"
; 1115 :         "adcl\t52(%2), %%ecx\n\t"
; 1116 :         "movl\t%%ecx, 52(%3)\n\t"
; 1117 :         "movl\t56(%1), %%ecx\n\t"
; 1118 :         "adcl\t56(%2), %%ecx\n\t"
; 1119 :         "movl\t%%ecx, 56(%3)\n\t"
; 1120 :         "movl\t60(%1), %%ecx\n\t"
; 1121 :         "adcl\t60(%2), %%ecx\n\t"
; 1122 :         "movl\t%%ecx, 60(%3)\n\t"
; 1123 :         "setc\t%0"
; 1124 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1125 :         :
; 1126 :         : "cc", "memory", "%ecx"
; 1127 : );
; 1128 : #elif defined(_M_X64)
; 1129 :     __asm__ volatile (
; 1130 :         "addb\t$-1, %0\n\t"
; 1131 :         "movq\t(%1), %%rcx\n\t"
; 1132 :         "adcq\t(%2), %%rcx\n\t"
; 1133 :         "movq\t%%rcx, (%3)\n\t"
; 1134 :         "movq\t8(%1), %%rcx\n\t"
; 1135 :         "adcq\t8(%2), %%rcx\n\t"
; 1136 :         "movq\t%%rcx, 8(%3)\n\t"
; 1137 :         "movq\t16(%1), %%rcx\n\t"
; 1138 :         "adcq\t16(%2), %%rcx\n\t"
; 1139 :         "movq\t%%rcx, 16(%3)\n\t"
; 1140 :         "movq\t24(%1), %%rcx\n\t"
; 1141 :         "adcq\t24(%2), %%rcx\n\t"
; 1142 :         "movq\t%%rcx, 24(%3)\n\t"
; 1143 :         "movq\t32(%1), %%rcx\n\t"
; 1144 :         "adcq\t32(%2), %%rcx\n\t"
; 1145 :         "movq\t%%rcx, 32(%3)\n\t"
; 1146 :         "movq\t40(%1), %%rcx\n\t"
; 1147 :         "adcq\t40(%2), %%rcx\n\t"
; 1148 :         "movq\t%%rcx, 40(%3)\n\t"
; 1149 :         "movq\t48(%1), %%rcx\n\t"
; 1150 :         "adcq\t48(%2), %%rcx\n\t"
; 1151 :         "movq\t%%rcx, 48(%3)\n\t"
; 1152 :         "movq\t56(%1), %%rcx\n\t"
; 1153 :         "adcq\t56(%2), %%rcx\n\t"
; 1154 :         "movq\t%%rcx, 56(%3)\n\t"
; 1155 :         "movq\t64(%1), %%rcx\n\t"
; 1156 :         "adcq\t64(%2), %%rcx\n\t"
; 1157 :         "movq\t%%rcx, 64(%3)\n\t"
; 1158 :         "movq\t72(%1), %%rcx\n\t"
; 1159 :         "adcq\t72(%2), %%rcx\n\t"
; 1160 :         "movq\t%%rcx, 72(%3)\n\t"
; 1161 :         "movq\t80(%1), %%rcx\n\t"
; 1162 :         "adcq\t80(%2), %%rcx\n\t"
; 1163 :         "movq\t%%rcx, 80(%3)\n\t"
; 1164 :         "movq\t88(%1), %%rcx\n\t"
; 1165 :         "adcq\t88(%2), %%rcx\n\t"
; 1166 :         "movq\t%%rcx, 88(%3)\n\t"
; 1167 :         "movq\t96(%1), %%rcx\n\t"
; 1168 :         "adcq\t96(%2), %%rcx\n\t"
; 1169 :         "movq\t%%rcx, 96(%3)\n\t"
; 1170 :         "movq\t104(%1), %%rcx\n\t"
; 1171 :         "adcq\t104(%2), %%rcx\n\t"
; 1172 :         "movq\t%%rcx, 104(%3)\n\t"
; 1173 :         "movq\t112(%1), %%rcx\n\t"
; 1174 :         "adcq\t112(%2), %%rcx\n\t"
; 1175 :         "movq\t%%rcx, 112(%3)\n\t"
; 1176 :         "movq\t120(%1), %%rcx\n\t"
; 1177 :         "adcq\t120(%2), %%rcx\n\t"
; 1178 :         "movq\t%%rcx, 120(%3)\n\t"
; 1179 :         "setc\t%0"
; 1180 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1181 :         :
; 1182 :         : "cc", "memory", "%rcx"
; 1183 : );
; 1184 : #else
; 1185 : #error unknown platform
; 1186 : #endif
; 1187 : #else
; 1188 : #error unknown compiler
; 1189 : #endif
; 1190 :     return (c);

  00574	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 1191 : }

  0057b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00582	5f		 pop	 rdi
  00583	5d		 pop	 rbp
  00584	c3		 ret	 0
_ADD_16WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADCX
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_32WORDS_ADCX PROC					; COMDAT

; 294  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 295  : #ifdef _MSC_VER
; 296  :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADDX_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 297  :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADDX_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 298  :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADDX_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 299  :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADDX_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 300  :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADDX_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 301  :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADDX_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 302  :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADDX_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 303  :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADDX_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 304  :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  002dc	b8 08 00 00 00	 mov	 eax, 8
  002e1	48 6b c0 08	 imul	 rax, rax, 8
  002e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  002ec	48 03 c8	 add	 rcx, rax
  002ef	48 8b c1	 mov	 rax, rcx
  002f2	b9 08 00 00 00	 mov	 ecx, 8
  002f7	48 6b c9 08	 imul	 rcx, rcx, 8
  002fb	ba 08 00 00 00	 mov	 edx, 8
  00300	48 6b d2 08	 imul	 rdx, rdx, 8
  00304	4c 8b c8	 mov	 r9, rax
  00307	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0030e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00312	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00319	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0031d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00324	e8 00 00 00 00	 call	 _ADDX_UNIT
  00329	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 305  :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  0032f	b8 08 00 00 00	 mov	 eax, 8
  00334	48 6b c0 09	 imul	 rax, rax, 9
  00338	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0033f	48 03 c8	 add	 rcx, rax
  00342	48 8b c1	 mov	 rax, rcx
  00345	b9 08 00 00 00	 mov	 ecx, 8
  0034a	48 6b c9 09	 imul	 rcx, rcx, 9
  0034e	ba 08 00 00 00	 mov	 edx, 8
  00353	48 6b d2 09	 imul	 rdx, rdx, 9
  00357	4c 8b c8	 mov	 r9, rax
  0035a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00361	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00365	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0036c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00370	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00377	e8 00 00 00 00	 call	 _ADDX_UNIT
  0037c	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 306  :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  00382	b8 08 00 00 00	 mov	 eax, 8
  00387	48 6b c0 0a	 imul	 rax, rax, 10
  0038b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00392	48 03 c8	 add	 rcx, rax
  00395	48 8b c1	 mov	 rax, rcx
  00398	b9 08 00 00 00	 mov	 ecx, 8
  0039d	48 6b c9 0a	 imul	 rcx, rcx, 10
  003a1	ba 08 00 00 00	 mov	 edx, 8
  003a6	48 6b d2 0a	 imul	 rdx, rdx, 10
  003aa	4c 8b c8	 mov	 r9, rax
  003ad	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  003b4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  003b8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  003bf	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  003c3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  003ca	e8 00 00 00 00	 call	 _ADDX_UNIT
  003cf	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 307  :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  003d5	b8 08 00 00 00	 mov	 eax, 8
  003da	48 6b c0 0b	 imul	 rax, rax, 11
  003de	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  003e5	48 03 c8	 add	 rcx, rax
  003e8	48 8b c1	 mov	 rax, rcx
  003eb	b9 08 00 00 00	 mov	 ecx, 8
  003f0	48 6b c9 0b	 imul	 rcx, rcx, 11
  003f4	ba 08 00 00 00	 mov	 edx, 8
  003f9	48 6b d2 0b	 imul	 rdx, rdx, 11
  003fd	4c 8b c8	 mov	 r9, rax
  00400	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00407	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0040b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00412	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00416	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0041d	e8 00 00 00 00	 call	 _ADDX_UNIT
  00422	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 308  :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  00428	b8 08 00 00 00	 mov	 eax, 8
  0042d	48 6b c0 0c	 imul	 rax, rax, 12
  00431	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00438	48 03 c8	 add	 rcx, rax
  0043b	48 8b c1	 mov	 rax, rcx
  0043e	b9 08 00 00 00	 mov	 ecx, 8
  00443	48 6b c9 0c	 imul	 rcx, rcx, 12
  00447	ba 08 00 00 00	 mov	 edx, 8
  0044c	48 6b d2 0c	 imul	 rdx, rdx, 12
  00450	4c 8b c8	 mov	 r9, rax
  00453	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0045a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0045e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00465	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00469	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00470	e8 00 00 00 00	 call	 _ADDX_UNIT
  00475	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 309  :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 0d	 imul	 rax, rax, 13
  00484	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0048b	48 03 c8	 add	 rcx, rax
  0048e	48 8b c1	 mov	 rax, rcx
  00491	b9 08 00 00 00	 mov	 ecx, 8
  00496	48 6b c9 0d	 imul	 rcx, rcx, 13
  0049a	ba 08 00 00 00	 mov	 edx, 8
  0049f	48 6b d2 0d	 imul	 rdx, rdx, 13
  004a3	4c 8b c8	 mov	 r9, rax
  004a6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  004ad	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  004b1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  004b8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  004bc	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  004c3	e8 00 00 00 00	 call	 _ADDX_UNIT
  004c8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 310  :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  004ce	b8 08 00 00 00	 mov	 eax, 8
  004d3	48 6b c0 0e	 imul	 rax, rax, 14
  004d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  004de	48 03 c8	 add	 rcx, rax
  004e1	48 8b c1	 mov	 rax, rcx
  004e4	b9 08 00 00 00	 mov	 ecx, 8
  004e9	48 6b c9 0e	 imul	 rcx, rcx, 14
  004ed	ba 08 00 00 00	 mov	 edx, 8
  004f2	48 6b d2 0e	 imul	 rdx, rdx, 14
  004f6	4c 8b c8	 mov	 r9, rax
  004f9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00500	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00504	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0050b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0050f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00516	e8 00 00 00 00	 call	 _ADDX_UNIT
  0051b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 311  :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  00521	b8 08 00 00 00	 mov	 eax, 8
  00526	48 6b c0 0f	 imul	 rax, rax, 15
  0052a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00531	48 03 c8	 add	 rcx, rax
  00534	48 8b c1	 mov	 rax, rcx
  00537	b9 08 00 00 00	 mov	 ecx, 8
  0053c	48 6b c9 0f	 imul	 rcx, rcx, 15
  00540	ba 08 00 00 00	 mov	 edx, 8
  00545	48 6b d2 0f	 imul	 rdx, rdx, 15
  00549	4c 8b c8	 mov	 r9, rax
  0054c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00553	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00557	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0055e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00562	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00569	e8 00 00 00 00	 call	 _ADDX_UNIT
  0056e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 312  :     c = _ADDX_UNIT(c, xp[16], yp[16], &zp[16]);

  00574	b8 08 00 00 00	 mov	 eax, 8
  00579	48 6b c0 10	 imul	 rax, rax, 16
  0057d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00584	48 03 c8	 add	 rcx, rax
  00587	48 8b c1	 mov	 rax, rcx
  0058a	b9 08 00 00 00	 mov	 ecx, 8
  0058f	48 6b c9 10	 imul	 rcx, rcx, 16
  00593	ba 08 00 00 00	 mov	 edx, 8
  00598	48 6b d2 10	 imul	 rdx, rdx, 16
  0059c	4c 8b c8	 mov	 r9, rax
  0059f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  005a6	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  005aa	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  005b1	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  005b5	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  005bc	e8 00 00 00 00	 call	 _ADDX_UNIT
  005c1	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 313  :     c = _ADDX_UNIT(c, xp[17], yp[17], &zp[17]);

  005c7	b8 08 00 00 00	 mov	 eax, 8
  005cc	48 6b c0 11	 imul	 rax, rax, 17
  005d0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  005d7	48 03 c8	 add	 rcx, rax
  005da	48 8b c1	 mov	 rax, rcx
  005dd	b9 08 00 00 00	 mov	 ecx, 8
  005e2	48 6b c9 11	 imul	 rcx, rcx, 17
  005e6	ba 08 00 00 00	 mov	 edx, 8
  005eb	48 6b d2 11	 imul	 rdx, rdx, 17
  005ef	4c 8b c8	 mov	 r9, rax
  005f2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  005f9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  005fd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00604	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00608	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0060f	e8 00 00 00 00	 call	 _ADDX_UNIT
  00614	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 314  :     c = _ADDX_UNIT(c, xp[18], yp[18], &zp[18]);

  0061a	b8 08 00 00 00	 mov	 eax, 8
  0061f	48 6b c0 12	 imul	 rax, rax, 18
  00623	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0062a	48 03 c8	 add	 rcx, rax
  0062d	48 8b c1	 mov	 rax, rcx
  00630	b9 08 00 00 00	 mov	 ecx, 8
  00635	48 6b c9 12	 imul	 rcx, rcx, 18
  00639	ba 08 00 00 00	 mov	 edx, 8
  0063e	48 6b d2 12	 imul	 rdx, rdx, 18
  00642	4c 8b c8	 mov	 r9, rax
  00645	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0064c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00650	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00657	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0065b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00662	e8 00 00 00 00	 call	 _ADDX_UNIT
  00667	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 315  :     c = _ADDX_UNIT(c, xp[19], yp[19], &zp[19]);

  0066d	b8 08 00 00 00	 mov	 eax, 8
  00672	48 6b c0 13	 imul	 rax, rax, 19
  00676	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0067d	48 03 c8	 add	 rcx, rax
  00680	48 8b c1	 mov	 rax, rcx
  00683	b9 08 00 00 00	 mov	 ecx, 8
  00688	48 6b c9 13	 imul	 rcx, rcx, 19
  0068c	ba 08 00 00 00	 mov	 edx, 8
  00691	48 6b d2 13	 imul	 rdx, rdx, 19
  00695	4c 8b c8	 mov	 r9, rax
  00698	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0069f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  006a3	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  006aa	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  006ae	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  006b5	e8 00 00 00 00	 call	 _ADDX_UNIT
  006ba	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 316  :     c = _ADDX_UNIT(c, xp[20], yp[20], &zp[20]);

  006c0	b8 08 00 00 00	 mov	 eax, 8
  006c5	48 6b c0 14	 imul	 rax, rax, 20
  006c9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  006d0	48 03 c8	 add	 rcx, rax
  006d3	48 8b c1	 mov	 rax, rcx
  006d6	b9 08 00 00 00	 mov	 ecx, 8
  006db	48 6b c9 14	 imul	 rcx, rcx, 20
  006df	ba 08 00 00 00	 mov	 edx, 8
  006e4	48 6b d2 14	 imul	 rdx, rdx, 20
  006e8	4c 8b c8	 mov	 r9, rax
  006eb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  006f2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  006f6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  006fd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00701	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00708	e8 00 00 00 00	 call	 _ADDX_UNIT
  0070d	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 317  :     c = _ADDX_UNIT(c, xp[21], yp[21], &zp[21]);

  00713	b8 08 00 00 00	 mov	 eax, 8
  00718	48 6b c0 15	 imul	 rax, rax, 21
  0071c	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00723	48 03 c8	 add	 rcx, rax
  00726	48 8b c1	 mov	 rax, rcx
  00729	b9 08 00 00 00	 mov	 ecx, 8
  0072e	48 6b c9 15	 imul	 rcx, rcx, 21
  00732	ba 08 00 00 00	 mov	 edx, 8
  00737	48 6b d2 15	 imul	 rdx, rdx, 21
  0073b	4c 8b c8	 mov	 r9, rax
  0073e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00745	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00749	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00750	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00754	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0075b	e8 00 00 00 00	 call	 _ADDX_UNIT
  00760	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 318  :     c = _ADDX_UNIT(c, xp[22], yp[22], &zp[22]);

  00766	b8 08 00 00 00	 mov	 eax, 8
  0076b	48 6b c0 16	 imul	 rax, rax, 22
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00776	48 03 c8	 add	 rcx, rax
  00779	48 8b c1	 mov	 rax, rcx
  0077c	b9 08 00 00 00	 mov	 ecx, 8
  00781	48 6b c9 16	 imul	 rcx, rcx, 22
  00785	ba 08 00 00 00	 mov	 edx, 8
  0078a	48 6b d2 16	 imul	 rdx, rdx, 22
  0078e	4c 8b c8	 mov	 r9, rax
  00791	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00798	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0079c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  007a3	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  007a7	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  007ae	e8 00 00 00 00	 call	 _ADDX_UNIT
  007b3	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 319  :     c = _ADDX_UNIT(c, xp[23], yp[23], &zp[23]);

  007b9	b8 08 00 00 00	 mov	 eax, 8
  007be	48 6b c0 17	 imul	 rax, rax, 23
  007c2	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  007c9	48 03 c8	 add	 rcx, rax
  007cc	48 8b c1	 mov	 rax, rcx
  007cf	b9 08 00 00 00	 mov	 ecx, 8
  007d4	48 6b c9 17	 imul	 rcx, rcx, 23
  007d8	ba 08 00 00 00	 mov	 edx, 8
  007dd	48 6b d2 17	 imul	 rdx, rdx, 23
  007e1	4c 8b c8	 mov	 r9, rax
  007e4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  007eb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  007ef	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  007f6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  007fa	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00801	e8 00 00 00 00	 call	 _ADDX_UNIT
  00806	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 320  :     c = _ADDX_UNIT(c, xp[24], yp[24], &zp[24]);

  0080c	b8 08 00 00 00	 mov	 eax, 8
  00811	48 6b c0 18	 imul	 rax, rax, 24
  00815	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0081c	48 03 c8	 add	 rcx, rax
  0081f	48 8b c1	 mov	 rax, rcx
  00822	b9 08 00 00 00	 mov	 ecx, 8
  00827	48 6b c9 18	 imul	 rcx, rcx, 24
  0082b	ba 08 00 00 00	 mov	 edx, 8
  00830	48 6b d2 18	 imul	 rdx, rdx, 24
  00834	4c 8b c8	 mov	 r9, rax
  00837	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0083e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00842	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00849	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0084d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00854	e8 00 00 00 00	 call	 _ADDX_UNIT
  00859	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 321  :     c = _ADDX_UNIT(c, xp[25], yp[25], &zp[25]);

  0085f	b8 08 00 00 00	 mov	 eax, 8
  00864	48 6b c0 19	 imul	 rax, rax, 25
  00868	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0086f	48 03 c8	 add	 rcx, rax
  00872	48 8b c1	 mov	 rax, rcx
  00875	b9 08 00 00 00	 mov	 ecx, 8
  0087a	48 6b c9 19	 imul	 rcx, rcx, 25
  0087e	ba 08 00 00 00	 mov	 edx, 8
  00883	48 6b d2 19	 imul	 rdx, rdx, 25
  00887	4c 8b c8	 mov	 r9, rax
  0088a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00891	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00895	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0089c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  008a0	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  008a7	e8 00 00 00 00	 call	 _ADDX_UNIT
  008ac	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 322  :     c = _ADDX_UNIT(c, xp[26], yp[26], &zp[26]);

  008b2	b8 08 00 00 00	 mov	 eax, 8
  008b7	48 6b c0 1a	 imul	 rax, rax, 26
  008bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  008c2	48 03 c8	 add	 rcx, rax
  008c5	48 8b c1	 mov	 rax, rcx
  008c8	b9 08 00 00 00	 mov	 ecx, 8
  008cd	48 6b c9 1a	 imul	 rcx, rcx, 26
  008d1	ba 08 00 00 00	 mov	 edx, 8
  008d6	48 6b d2 1a	 imul	 rdx, rdx, 26
  008da	4c 8b c8	 mov	 r9, rax
  008dd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  008e4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  008e8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  008ef	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  008f3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  008fa	e8 00 00 00 00	 call	 _ADDX_UNIT
  008ff	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 323  :     c = _ADDX_UNIT(c, xp[27], yp[27], &zp[27]);

  00905	b8 08 00 00 00	 mov	 eax, 8
  0090a	48 6b c0 1b	 imul	 rax, rax, 27
  0090e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00915	48 03 c8	 add	 rcx, rax
  00918	48 8b c1	 mov	 rax, rcx
  0091b	b9 08 00 00 00	 mov	 ecx, 8
  00920	48 6b c9 1b	 imul	 rcx, rcx, 27
  00924	ba 08 00 00 00	 mov	 edx, 8
  00929	48 6b d2 1b	 imul	 rdx, rdx, 27
  0092d	4c 8b c8	 mov	 r9, rax
  00930	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00937	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0093b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00942	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00946	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0094d	e8 00 00 00 00	 call	 _ADDX_UNIT
  00952	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 324  :     c = _ADDX_UNIT(c, xp[28], yp[28], &zp[28]);

  00958	b8 08 00 00 00	 mov	 eax, 8
  0095d	48 6b c0 1c	 imul	 rax, rax, 28
  00961	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00968	48 03 c8	 add	 rcx, rax
  0096b	48 8b c1	 mov	 rax, rcx
  0096e	b9 08 00 00 00	 mov	 ecx, 8
  00973	48 6b c9 1c	 imul	 rcx, rcx, 28
  00977	ba 08 00 00 00	 mov	 edx, 8
  0097c	48 6b d2 1c	 imul	 rdx, rdx, 28
  00980	4c 8b c8	 mov	 r9, rax
  00983	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0098a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0098e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00995	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00999	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  009a0	e8 00 00 00 00	 call	 _ADDX_UNIT
  009a5	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 325  :     c = _ADDX_UNIT(c, xp[29], yp[29], &zp[29]);

  009ab	b8 08 00 00 00	 mov	 eax, 8
  009b0	48 6b c0 1d	 imul	 rax, rax, 29
  009b4	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  009bb	48 03 c8	 add	 rcx, rax
  009be	48 8b c1	 mov	 rax, rcx
  009c1	b9 08 00 00 00	 mov	 ecx, 8
  009c6	48 6b c9 1d	 imul	 rcx, rcx, 29
  009ca	ba 08 00 00 00	 mov	 edx, 8
  009cf	48 6b d2 1d	 imul	 rdx, rdx, 29
  009d3	4c 8b c8	 mov	 r9, rax
  009d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  009dd	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  009e1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  009e8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  009ec	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  009f3	e8 00 00 00 00	 call	 _ADDX_UNIT
  009f8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 326  :     c = _ADDX_UNIT(c, xp[30], yp[30], &zp[30]);

  009fe	b8 08 00 00 00	 mov	 eax, 8
  00a03	48 6b c0 1e	 imul	 rax, rax, 30
  00a07	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00a0e	48 03 c8	 add	 rcx, rax
  00a11	48 8b c1	 mov	 rax, rcx
  00a14	b9 08 00 00 00	 mov	 ecx, 8
  00a19	48 6b c9 1e	 imul	 rcx, rcx, 30
  00a1d	ba 08 00 00 00	 mov	 edx, 8
  00a22	48 6b d2 1e	 imul	 rdx, rdx, 30
  00a26	4c 8b c8	 mov	 r9, rax
  00a29	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00a30	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00a34	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00a3b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00a3f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00a46	e8 00 00 00 00	 call	 _ADDX_UNIT
  00a4b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 327  :     c = _ADDX_UNIT(c, xp[31], yp[31], &zp[31]);

  00a51	b8 08 00 00 00	 mov	 eax, 8
  00a56	48 6b c0 1f	 imul	 rax, rax, 31
  00a5a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00a61	48 03 c8	 add	 rcx, rax
  00a64	48 8b c1	 mov	 rax, rcx
  00a67	b9 08 00 00 00	 mov	 ecx, 8
  00a6c	48 6b c9 1f	 imul	 rcx, rcx, 31
  00a70	ba 08 00 00 00	 mov	 edx, 8
  00a75	48 6b d2 1f	 imul	 rdx, rdx, 31
  00a79	4c 8b c8	 mov	 r9, rax
  00a7c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00a83	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00a87	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00a8e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00a92	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00a99	e8 00 00 00 00	 call	 _ADDX_UNIT
  00a9e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 328  : #elif defined(__GNUC__)
; 329  : #ifdef _M_IX86
; 330  :     __asm__ volatile (
; 331  :         "addb\t$-1, %0\n\t"
; 332  :         "movl\t(%1), %%ecx\n\t"
; 333  :         "adcxl\t(%2), %%ecx\n\t"
; 334  :         "movl\t%%ecx, (%3)\n\t"
; 335  :         "movl\t4(%1), %%ecx\n\t"
; 336  :         "adcxl\t4(%2), %%ecx\n\t"
; 337  :         "movl\t%%ecx, 4(%3)\n\t"
; 338  :         "movl\t8(%1), %%ecx\n\t"
; 339  :         "adcxl\t8(%2), %%ecx\n\t"
; 340  :         "movl\t%%ecx, 8(%3)\n\t"
; 341  :         "movl\t12(%1), %%ecx\n\t"
; 342  :         "adcxl\t12(%2), %%ecx\n\t"
; 343  :         "movl\t%%ecx, 12(%3)\n\t"
; 344  :         "movl\t16(%1), %%ecx\n\t"
; 345  :         "adcxl\t16(%2), %%ecx\n\t"
; 346  :         "movl\t%%ecx, 16(%3)\n\t"
; 347  :         "movl\t20(%1), %%ecx\n\t"
; 348  :         "adcxl\t20(%2), %%ecx\n\t"
; 349  :         "movl\t%%ecx, 20(%3)\n\t"
; 350  :         "movl\t24(%1), %%ecx\n\t"
; 351  :         "adcxl\t24(%2), %%ecx\n\t"
; 352  :         "movl\t%%ecx, 24(%3)\n\t"
; 353  :         "movl\t28(%1), %%ecx\n\t"
; 354  :         "adcxl\t28(%2), %%ecx\n\t"
; 355  :         "movl\t%%ecx, 28(%3)\n\t"
; 356  :         "movl\t32(%1), %%ecx\n\t"
; 357  :         "adcxl\t32(%2), %%ecx\n\t"
; 358  :         "movl\t%%ecx, 32(%3)\n\t"
; 359  :         "movl\t36(%1), %%ecx\n\t"
; 360  :         "adcxl\t36(%2), %%ecx\n\t"
; 361  :         "movl\t%%ecx, 36(%3)\n\t"
; 362  :         "movl\t40(%1), %%ecx\n\t"
; 363  :         "adcxl\t40(%2), %%ecx\n\t"
; 364  :         "movl\t%%ecx, 40(%3)\n\t"
; 365  :         "movl\t44(%1), %%ecx\n\t"
; 366  :         "adcxl\t44(%2), %%ecx\n\t"
; 367  :         "movl\t%%ecx, 44(%3)\n\t"
; 368  :         "movl\t48(%1), %%ecx\n\t"
; 369  :         "adcxl\t48(%2), %%ecx\n\t"
; 370  :         "movl\t%%ecx, 48(%3)\n\t"
; 371  :         "movl\t52(%1), %%ecx\n\t"
; 372  :         "adcxl\t52(%2), %%ecx\n\t"
; 373  :         "movl\t%%ecx, 52(%3)\n\t"
; 374  :         "movl\t56(%1), %%ecx\n\t"
; 375  :         "adcxl\t56(%2), %%ecx\n\t"
; 376  :         "movl\t%%ecx, 56(%3)\n\t"
; 377  :         "movl\t60(%1), %%ecx\n\t"
; 378  :         "adcxl\t60(%2), %%ecx\n\t"
; 379  :         "movl\t%%ecx, 60(%3)\n\t"
; 380  :         "movl\t64(%1), %%ecx\n\t"
; 381  :         "adcxl\t64(%2), %%ecx\n\t"
; 382  :         "movl\t%%ecx, 64(%3)\n\t"
; 383  :         "movl\t68(%1), %%ecx\n\t"
; 384  :         "adcxl\t68(%2), %%ecx\n\t"
; 385  :         "movl\t%%ecx, 68(%3)\n\t"
; 386  :         "movl\t72(%1), %%ecx\n\t"
; 387  :         "adcxl\t72(%2), %%ecx\n\t"
; 388  :         "movl\t%%ecx, 72(%3)\n\t"
; 389  :         "movl\t76(%1), %%ecx\n\t"
; 390  :         "adcxl\t76(%2), %%ecx\n\t"
; 391  :         "movl\t%%ecx, 76(%3)\n\t"
; 392  :         "movl\t80(%1), %%ecx\n\t"
; 393  :         "adcxl\t80(%2), %%ecx\n\t"
; 394  :         "movl\t%%ecx, 80(%3)\n\t"
; 395  :         "movl\t84(%1), %%ecx\n\t"
; 396  :         "adcxl\t84(%2), %%ecx\n\t"
; 397  :         "movl\t%%ecx, 84(%3)\n\t"
; 398  :         "movl\t88(%1), %%ecx\n\t"
; 399  :         "adcxl\t88(%2), %%ecx\n\t"
; 400  :         "movl\t%%ecx, 88(%3)\n\t"
; 401  :         "movl\t92(%1), %%ecx\n\t"
; 402  :         "adcxl\t92(%2), %%ecx\n\t"
; 403  :         "movl\t%%ecx, 92(%3)\n\t"
; 404  :         "movl\t96(%1), %%ecx\n\t"
; 405  :         "adcxl\t96(%2), %%ecx\n\t"
; 406  :         "movl\t%%ecx, 96(%3)\n\t"
; 407  :         "movl\t100(%1), %%ecx\n\t"
; 408  :         "adcxl\t100(%2), %%ecx\n\t"
; 409  :         "movl\t%%ecx, 100(%3)\n\t"
; 410  :         "movl\t104(%1), %%ecx\n\t"
; 411  :         "adcxl\t104(%2), %%ecx\n\t"
; 412  :         "movl\t%%ecx, 104(%3)\n\t"
; 413  :         "movl\t108(%1), %%ecx\n\t"
; 414  :         "adcxl\t108(%2), %%ecx\n\t"
; 415  :         "movl\t%%ecx, 108(%3)\n\t"
; 416  :         "movl\t112(%1), %%ecx\n\t"
; 417  :         "adcxl\t112(%2), %%ecx\n\t"
; 418  :         "movl\t%%ecx, 112(%3)\n\t"
; 419  :         "movl\t116(%1), %%ecx\n\t"
; 420  :         "adcxl\t116(%2), %%ecx\n\t"
; 421  :         "movl\t%%ecx, 116(%3)\n\t"
; 422  :         "movl\t120(%1), %%ecx\n\t"
; 423  :         "adcxl\t120(%2), %%ecx\n\t"
; 424  :         "movl\t%%ecx, 120(%3)\n\t"
; 425  :         "movl\t124(%1), %%ecx\n\t"
; 426  :         "adcxl\t124(%2), %%ecx\n\t"
; 427  :         "movl\t%%ecx, 124(%3)\n\t"
; 428  :         "setc\t%0"
; 429  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 430  :         :
; 431  :         : "cc", "memory", "%ecx"
; 432  : );
; 433  : #elif defined(_M_X64)
; 434  :     __asm__ volatile (
; 435  :         "addb\t$-1, %0\n\t"
; 436  :         "movq\t(%1), %%rcx\n\t"
; 437  :         "adcxq\t(%2), %%rcx\n\t"
; 438  :         "movq\t%%rcx, (%3)\n\t"
; 439  :         "movq\t8(%1), %%rcx\n\t"
; 440  :         "adcxq\t8(%2), %%rcx\n\t"
; 441  :         "movq\t%%rcx, 8(%3)\n\t"
; 442  :         "movq\t16(%1), %%rcx\n\t"
; 443  :         "adcxq\t16(%2), %%rcx\n\t"
; 444  :         "movq\t%%rcx, 16(%3)\n\t"
; 445  :         "movq\t24(%1), %%rcx\n\t"
; 446  :         "adcxq\t24(%2), %%rcx\n\t"
; 447  :         "movq\t%%rcx, 24(%3)\n\t"
; 448  :         "movq\t32(%1), %%rcx\n\t"
; 449  :         "adcxq\t32(%2), %%rcx\n\t"
; 450  :         "movq\t%%rcx, 32(%3)\n\t"
; 451  :         "movq\t40(%1), %%rcx\n\t"
; 452  :         "adcxq\t40(%2), %%rcx\n\t"
; 453  :         "movq\t%%rcx, 40(%3)\n\t"
; 454  :         "movq\t48(%1), %%rcx\n\t"
; 455  :         "adcxq\t48(%2), %%rcx\n\t"
; 456  :         "movq\t%%rcx, 48(%3)\n\t"
; 457  :         "movq\t56(%1), %%rcx\n\t"
; 458  :         "adcxq\t56(%2), %%rcx\n\t"
; 459  :         "movq\t%%rcx, 56(%3)\n\t"
; 460  :         "movq\t64(%1), %%rcx\n\t"
; 461  :         "adcxq\t64(%2), %%rcx\n\t"
; 462  :         "movq\t%%rcx, 64(%3)\n\t"
; 463  :         "movq\t72(%1), %%rcx\n\t"
; 464  :         "adcxq\t72(%2), %%rcx\n\t"
; 465  :         "movq\t%%rcx, 72(%3)\n\t"
; 466  :         "movq\t80(%1), %%rcx\n\t"
; 467  :         "adcxq\t80(%2), %%rcx\n\t"
; 468  :         "movq\t%%rcx, 80(%3)\n\t"
; 469  :         "movq\t88(%1), %%rcx\n\t"
; 470  :         "adcxq\t88(%2), %%rcx\n\t"
; 471  :         "movq\t%%rcx, 88(%3)\n\t"
; 472  :         "movq\t96(%1), %%rcx\n\t"
; 473  :         "adcxq\t96(%2), %%rcx\n\t"
; 474  :         "movq\t%%rcx, 96(%3)\n\t"
; 475  :         "movq\t104(%1), %%rcx\n\t"
; 476  :         "adcxq\t104(%2), %%rcx\n\t"
; 477  :         "movq\t%%rcx, 104(%3)\n\t"
; 478  :         "movq\t112(%1), %%rcx\n\t"
; 479  :         "adcxq\t112(%2), %%rcx\n\t"
; 480  :         "movq\t%%rcx, 112(%3)\n\t"
; 481  :         "movq\t120(%1), %%rcx\n\t"
; 482  :         "adcxq\t120(%2), %%rcx\n\t"
; 483  :         "movq\t%%rcx, 120(%3)\n\t"
; 484  :         "movq\t128(%1), %%rcx\n\t"
; 485  :         "adcxq\t128(%2), %%rcx\n\t"
; 486  :         "movq\t%%rcx, 128(%3)\n\t"
; 487  :         "movq\t136(%1), %%rcx\n\t"
; 488  :         "adcxq\t136(%2), %%rcx\n\t"
; 489  :         "movq\t%%rcx, 136(%3)\n\t"
; 490  :         "movq\t144(%1), %%rcx\n\t"
; 491  :         "adcxq\t144(%2), %%rcx\n\t"
; 492  :         "movq\t%%rcx, 144(%3)\n\t"
; 493  :         "movq\t152(%1), %%rcx\n\t"
; 494  :         "adcxq\t152(%2), %%rcx\n\t"
; 495  :         "movq\t%%rcx, 152(%3)\n\t"
; 496  :         "movq\t160(%1), %%rcx\n\t"
; 497  :         "adcxq\t160(%2), %%rcx\n\t"
; 498  :         "movq\t%%rcx, 160(%3)\n\t"
; 499  :         "movq\t168(%1), %%rcx\n\t"
; 500  :         "adcxq\t168(%2), %%rcx\n\t"
; 501  :         "movq\t%%rcx, 168(%3)\n\t"
; 502  :         "movq\t176(%1), %%rcx\n\t"
; 503  :         "adcxq\t176(%2), %%rcx\n\t"
; 504  :         "movq\t%%rcx, 176(%3)\n\t"
; 505  :         "movq\t184(%1), %%rcx\n\t"
; 506  :         "adcxq\t184(%2), %%rcx\n\t"
; 507  :         "movq\t%%rcx, 184(%3)\n\t"
; 508  :         "movq\t192(%1), %%rcx\n\t"
; 509  :         "adcxq\t192(%2), %%rcx\n\t"
; 510  :         "movq\t%%rcx, 192(%3)\n\t"
; 511  :         "movq\t200(%1), %%rcx\n\t"
; 512  :         "adcxq\t200(%2), %%rcx\n\t"
; 513  :         "movq\t%%rcx, 200(%3)\n\t"
; 514  :         "movq\t208(%1), %%rcx\n\t"
; 515  :         "adcxq\t208(%2), %%rcx\n\t"
; 516  :         "movq\t%%rcx, 208(%3)\n\t"
; 517  :         "movq\t216(%1), %%rcx\n\t"
; 518  :         "adcxq\t216(%2), %%rcx\n\t"
; 519  :         "movq\t%%rcx, 216(%3)\n\t"
; 520  :         "movq\t224(%1), %%rcx\n\t"
; 521  :         "adcxq\t224(%2), %%rcx\n\t"
; 522  :         "movq\t%%rcx, 224(%3)\n\t"
; 523  :         "movq\t232(%1), %%rcx\n\t"
; 524  :         "adcxq\t232(%2), %%rcx\n\t"
; 525  :         "movq\t%%rcx, 232(%3)\n\t"
; 526  :         "movq\t240(%1), %%rcx\n\t"
; 527  :         "adcxq\t240(%2), %%rcx\n\t"
; 528  :         "movq\t%%rcx, 240(%3)\n\t"
; 529  :         "movq\t248(%1), %%rcx\n\t"
; 530  :         "adcxq\t248(%2), %%rcx\n\t"
; 531  :         "movq\t%%rcx, 248(%3)\n\t"
; 532  :         "setc\t%0"
; 533  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 534  :         :
; 535  :         : "cc", "memory", "%rcx"
; 536  : );
; 537  : #else
; 538  : #error unknown platform
; 539  : #endif
; 540  : #else
; 541  : #error unknown compiler
; 542  : #endif
; 543  :     return (c);

  00aa4	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 544  : }

  00aab	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00ab2	5f		 pop	 rdi
  00ab3	5d		 pop	 rbp
  00ab4	c3		 ret	 0
_ADD_32WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADC
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_32WORDS_ADC PROC					; COMDAT

; 41   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 42   : #ifdef _MSC_VER
; 43   :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  00044	b8 08 00 00 00	 mov	 eax, 8
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00054	48 03 c8	 add	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 6b d2 00	 imul	 rdx, rdx, 0
  0006c	4c 8b c8	 mov	 r9, rax
  0006f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00076	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0007a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00081	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00085	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0008c	e8 00 00 00 00	 call	 _ADD_UNIT
  00091	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 44   :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	b9 08 00 00 00	 mov	 ecx, 8
  000b2	48 6b c9 01	 imul	 rcx, rcx, 1
  000b6	ba 08 00 00 00	 mov	 edx, 8
  000bb	48 6b d2 01	 imul	 rdx, rdx, 1
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  000c9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  000cd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  000d4	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d8	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  000df	e8 00 00 00 00	 call	 _ADD_UNIT
  000e4	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 45   :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 02	 imul	 rax, rax, 2
  000f3	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 02	 imul	 rcx, rcx, 2
  00109	ba 08 00 00 00	 mov	 edx, 8
  0010e	48 6b d2 02	 imul	 rdx, rdx, 2
  00112	4c 8b c8	 mov	 r9, rax
  00115	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0011c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00120	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00127	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0012b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00132	e8 00 00 00 00	 call	 _ADD_UNIT
  00137	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 46   :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 03	 imul	 rax, rax, 3
  00146	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	b9 08 00 00 00	 mov	 ecx, 8
  00158	48 6b c9 03	 imul	 rcx, rcx, 3
  0015c	ba 08 00 00 00	 mov	 edx, 8
  00161	48 6b d2 03	 imul	 rdx, rdx, 3
  00165	4c 8b c8	 mov	 r9, rax
  00168	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0016f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00173	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0017a	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0017e	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00185	e8 00 00 00 00	 call	 _ADD_UNIT
  0018a	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 47   :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 04	 imul	 rax, rax, 4
  00199	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001a0	48 03 c8	 add	 rcx, rax
  001a3	48 8b c1	 mov	 rax, rcx
  001a6	b9 08 00 00 00	 mov	 ecx, 8
  001ab	48 6b c9 04	 imul	 rcx, rcx, 4
  001af	ba 08 00 00 00	 mov	 edx, 8
  001b4	48 6b d2 04	 imul	 rdx, rdx, 4
  001b8	4c 8b c8	 mov	 r9, rax
  001bb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  001c2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  001c6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  001cd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  001d1	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  001d8	e8 00 00 00 00	 call	 _ADD_UNIT
  001dd	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 48   :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 05	 imul	 rax, rax, 5
  001ec	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  001f3	48 03 c8	 add	 rcx, rax
  001f6	48 8b c1	 mov	 rax, rcx
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 05	 imul	 rcx, rcx, 5
  00202	ba 08 00 00 00	 mov	 edx, 8
  00207	48 6b d2 05	 imul	 rdx, rdx, 5
  0020b	4c 8b c8	 mov	 r9, rax
  0020e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00215	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00219	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00220	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00224	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0022b	e8 00 00 00 00	 call	 _ADD_UNIT
  00230	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 49   :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 06	 imul	 rax, rax, 6
  0023f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	b9 08 00 00 00	 mov	 ecx, 8
  00251	48 6b c9 06	 imul	 rcx, rcx, 6
  00255	ba 08 00 00 00	 mov	 edx, 8
  0025a	48 6b d2 06	 imul	 rdx, rdx, 6
  0025e	4c 8b c8	 mov	 r9, rax
  00261	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00268	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0026c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00273	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00277	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0027e	e8 00 00 00 00	 call	 _ADD_UNIT
  00283	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 50   :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  00289	b8 08 00 00 00	 mov	 eax, 8
  0028e	48 6b c0 07	 imul	 rax, rax, 7
  00292	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00299	48 03 c8	 add	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 07	 imul	 rcx, rcx, 7
  002a8	ba 08 00 00 00	 mov	 edx, 8
  002ad	48 6b d2 07	 imul	 rdx, rdx, 7
  002b1	4c 8b c8	 mov	 r9, rax
  002b4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  002bb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  002bf	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  002c6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  002ca	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  002d1	e8 00 00 00 00	 call	 _ADD_UNIT
  002d6	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 51   :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  002dc	b8 08 00 00 00	 mov	 eax, 8
  002e1	48 6b c0 08	 imul	 rax, rax, 8
  002e5	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  002ec	48 03 c8	 add	 rcx, rax
  002ef	48 8b c1	 mov	 rax, rcx
  002f2	b9 08 00 00 00	 mov	 ecx, 8
  002f7	48 6b c9 08	 imul	 rcx, rcx, 8
  002fb	ba 08 00 00 00	 mov	 edx, 8
  00300	48 6b d2 08	 imul	 rdx, rdx, 8
  00304	4c 8b c8	 mov	 r9, rax
  00307	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0030e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00312	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00319	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0031d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00324	e8 00 00 00 00	 call	 _ADD_UNIT
  00329	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 52   :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  0032f	b8 08 00 00 00	 mov	 eax, 8
  00334	48 6b c0 09	 imul	 rax, rax, 9
  00338	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0033f	48 03 c8	 add	 rcx, rax
  00342	48 8b c1	 mov	 rax, rcx
  00345	b9 08 00 00 00	 mov	 ecx, 8
  0034a	48 6b c9 09	 imul	 rcx, rcx, 9
  0034e	ba 08 00 00 00	 mov	 edx, 8
  00353	48 6b d2 09	 imul	 rdx, rdx, 9
  00357	4c 8b c8	 mov	 r9, rax
  0035a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00361	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00365	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0036c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00370	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00377	e8 00 00 00 00	 call	 _ADD_UNIT
  0037c	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 53   :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  00382	b8 08 00 00 00	 mov	 eax, 8
  00387	48 6b c0 0a	 imul	 rax, rax, 10
  0038b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00392	48 03 c8	 add	 rcx, rax
  00395	48 8b c1	 mov	 rax, rcx
  00398	b9 08 00 00 00	 mov	 ecx, 8
  0039d	48 6b c9 0a	 imul	 rcx, rcx, 10
  003a1	ba 08 00 00 00	 mov	 edx, 8
  003a6	48 6b d2 0a	 imul	 rdx, rdx, 10
  003aa	4c 8b c8	 mov	 r9, rax
  003ad	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  003b4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  003b8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  003bf	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  003c3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  003ca	e8 00 00 00 00	 call	 _ADD_UNIT
  003cf	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 54   :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  003d5	b8 08 00 00 00	 mov	 eax, 8
  003da	48 6b c0 0b	 imul	 rax, rax, 11
  003de	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  003e5	48 03 c8	 add	 rcx, rax
  003e8	48 8b c1	 mov	 rax, rcx
  003eb	b9 08 00 00 00	 mov	 ecx, 8
  003f0	48 6b c9 0b	 imul	 rcx, rcx, 11
  003f4	ba 08 00 00 00	 mov	 edx, 8
  003f9	48 6b d2 0b	 imul	 rdx, rdx, 11
  003fd	4c 8b c8	 mov	 r9, rax
  00400	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00407	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0040b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00412	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00416	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0041d	e8 00 00 00 00	 call	 _ADD_UNIT
  00422	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 55   :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  00428	b8 08 00 00 00	 mov	 eax, 8
  0042d	48 6b c0 0c	 imul	 rax, rax, 12
  00431	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00438	48 03 c8	 add	 rcx, rax
  0043b	48 8b c1	 mov	 rax, rcx
  0043e	b9 08 00 00 00	 mov	 ecx, 8
  00443	48 6b c9 0c	 imul	 rcx, rcx, 12
  00447	ba 08 00 00 00	 mov	 edx, 8
  0044c	48 6b d2 0c	 imul	 rdx, rdx, 12
  00450	4c 8b c8	 mov	 r9, rax
  00453	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0045a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0045e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00465	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00469	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00470	e8 00 00 00 00	 call	 _ADD_UNIT
  00475	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 56   :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 0d	 imul	 rax, rax, 13
  00484	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0048b	48 03 c8	 add	 rcx, rax
  0048e	48 8b c1	 mov	 rax, rcx
  00491	b9 08 00 00 00	 mov	 ecx, 8
  00496	48 6b c9 0d	 imul	 rcx, rcx, 13
  0049a	ba 08 00 00 00	 mov	 edx, 8
  0049f	48 6b d2 0d	 imul	 rdx, rdx, 13
  004a3	4c 8b c8	 mov	 r9, rax
  004a6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  004ad	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  004b1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  004b8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  004bc	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  004c3	e8 00 00 00 00	 call	 _ADD_UNIT
  004c8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 57   :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  004ce	b8 08 00 00 00	 mov	 eax, 8
  004d3	48 6b c0 0e	 imul	 rax, rax, 14
  004d7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  004de	48 03 c8	 add	 rcx, rax
  004e1	48 8b c1	 mov	 rax, rcx
  004e4	b9 08 00 00 00	 mov	 ecx, 8
  004e9	48 6b c9 0e	 imul	 rcx, rcx, 14
  004ed	ba 08 00 00 00	 mov	 edx, 8
  004f2	48 6b d2 0e	 imul	 rdx, rdx, 14
  004f6	4c 8b c8	 mov	 r9, rax
  004f9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00500	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00504	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0050b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0050f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00516	e8 00 00 00 00	 call	 _ADD_UNIT
  0051b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 58   :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  00521	b8 08 00 00 00	 mov	 eax, 8
  00526	48 6b c0 0f	 imul	 rax, rax, 15
  0052a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00531	48 03 c8	 add	 rcx, rax
  00534	48 8b c1	 mov	 rax, rcx
  00537	b9 08 00 00 00	 mov	 ecx, 8
  0053c	48 6b c9 0f	 imul	 rcx, rcx, 15
  00540	ba 08 00 00 00	 mov	 edx, 8
  00545	48 6b d2 0f	 imul	 rdx, rdx, 15
  00549	4c 8b c8	 mov	 r9, rax
  0054c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00553	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00557	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0055e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00562	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00569	e8 00 00 00 00	 call	 _ADD_UNIT
  0056e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 59   :     c = _ADD_UNIT(c, xp[16], yp[16], &zp[16]);

  00574	b8 08 00 00 00	 mov	 eax, 8
  00579	48 6b c0 10	 imul	 rax, rax, 16
  0057d	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00584	48 03 c8	 add	 rcx, rax
  00587	48 8b c1	 mov	 rax, rcx
  0058a	b9 08 00 00 00	 mov	 ecx, 8
  0058f	48 6b c9 10	 imul	 rcx, rcx, 16
  00593	ba 08 00 00 00	 mov	 edx, 8
  00598	48 6b d2 10	 imul	 rdx, rdx, 16
  0059c	4c 8b c8	 mov	 r9, rax
  0059f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  005a6	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  005aa	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  005b1	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  005b5	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  005bc	e8 00 00 00 00	 call	 _ADD_UNIT
  005c1	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 60   :     c = _ADD_UNIT(c, xp[17], yp[17], &zp[17]);

  005c7	b8 08 00 00 00	 mov	 eax, 8
  005cc	48 6b c0 11	 imul	 rax, rax, 17
  005d0	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  005d7	48 03 c8	 add	 rcx, rax
  005da	48 8b c1	 mov	 rax, rcx
  005dd	b9 08 00 00 00	 mov	 ecx, 8
  005e2	48 6b c9 11	 imul	 rcx, rcx, 17
  005e6	ba 08 00 00 00	 mov	 edx, 8
  005eb	48 6b d2 11	 imul	 rdx, rdx, 17
  005ef	4c 8b c8	 mov	 r9, rax
  005f2	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  005f9	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  005fd	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00604	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00608	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0060f	e8 00 00 00 00	 call	 _ADD_UNIT
  00614	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 61   :     c = _ADD_UNIT(c, xp[18], yp[18], &zp[18]);

  0061a	b8 08 00 00 00	 mov	 eax, 8
  0061f	48 6b c0 12	 imul	 rax, rax, 18
  00623	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0062a	48 03 c8	 add	 rcx, rax
  0062d	48 8b c1	 mov	 rax, rcx
  00630	b9 08 00 00 00	 mov	 ecx, 8
  00635	48 6b c9 12	 imul	 rcx, rcx, 18
  00639	ba 08 00 00 00	 mov	 edx, 8
  0063e	48 6b d2 12	 imul	 rdx, rdx, 18
  00642	4c 8b c8	 mov	 r9, rax
  00645	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0064c	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00650	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00657	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0065b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00662	e8 00 00 00 00	 call	 _ADD_UNIT
  00667	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 62   :     c = _ADD_UNIT(c, xp[19], yp[19], &zp[19]);

  0066d	b8 08 00 00 00	 mov	 eax, 8
  00672	48 6b c0 13	 imul	 rax, rax, 19
  00676	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0067d	48 03 c8	 add	 rcx, rax
  00680	48 8b c1	 mov	 rax, rcx
  00683	b9 08 00 00 00	 mov	 ecx, 8
  00688	48 6b c9 13	 imul	 rcx, rcx, 19
  0068c	ba 08 00 00 00	 mov	 edx, 8
  00691	48 6b d2 13	 imul	 rdx, rdx, 19
  00695	4c 8b c8	 mov	 r9, rax
  00698	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0069f	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  006a3	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  006aa	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  006ae	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  006b5	e8 00 00 00 00	 call	 _ADD_UNIT
  006ba	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 63   :     c = _ADD_UNIT(c, xp[20], yp[20], &zp[20]);

  006c0	b8 08 00 00 00	 mov	 eax, 8
  006c5	48 6b c0 14	 imul	 rax, rax, 20
  006c9	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  006d0	48 03 c8	 add	 rcx, rax
  006d3	48 8b c1	 mov	 rax, rcx
  006d6	b9 08 00 00 00	 mov	 ecx, 8
  006db	48 6b c9 14	 imul	 rcx, rcx, 20
  006df	ba 08 00 00 00	 mov	 edx, 8
  006e4	48 6b d2 14	 imul	 rdx, rdx, 20
  006e8	4c 8b c8	 mov	 r9, rax
  006eb	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  006f2	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  006f6	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  006fd	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00701	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00708	e8 00 00 00 00	 call	 _ADD_UNIT
  0070d	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 64   :     c = _ADD_UNIT(c, xp[21], yp[21], &zp[21]);

  00713	b8 08 00 00 00	 mov	 eax, 8
  00718	48 6b c0 15	 imul	 rax, rax, 21
  0071c	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00723	48 03 c8	 add	 rcx, rax
  00726	48 8b c1	 mov	 rax, rcx
  00729	b9 08 00 00 00	 mov	 ecx, 8
  0072e	48 6b c9 15	 imul	 rcx, rcx, 21
  00732	ba 08 00 00 00	 mov	 edx, 8
  00737	48 6b d2 15	 imul	 rdx, rdx, 21
  0073b	4c 8b c8	 mov	 r9, rax
  0073e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00745	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00749	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00750	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00754	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0075b	e8 00 00 00 00	 call	 _ADD_UNIT
  00760	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 65   :     c = _ADD_UNIT(c, xp[22], yp[22], &zp[22]);

  00766	b8 08 00 00 00	 mov	 eax, 8
  0076b	48 6b c0 16	 imul	 rax, rax, 22
  0076f	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00776	48 03 c8	 add	 rcx, rax
  00779	48 8b c1	 mov	 rax, rcx
  0077c	b9 08 00 00 00	 mov	 ecx, 8
  00781	48 6b c9 16	 imul	 rcx, rcx, 22
  00785	ba 08 00 00 00	 mov	 edx, 8
  0078a	48 6b d2 16	 imul	 rdx, rdx, 22
  0078e	4c 8b c8	 mov	 r9, rax
  00791	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00798	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0079c	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  007a3	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  007a7	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  007ae	e8 00 00 00 00	 call	 _ADD_UNIT
  007b3	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 66   :     c = _ADD_UNIT(c, xp[23], yp[23], &zp[23]);

  007b9	b8 08 00 00 00	 mov	 eax, 8
  007be	48 6b c0 17	 imul	 rax, rax, 23
  007c2	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  007c9	48 03 c8	 add	 rcx, rax
  007cc	48 8b c1	 mov	 rax, rcx
  007cf	b9 08 00 00 00	 mov	 ecx, 8
  007d4	48 6b c9 17	 imul	 rcx, rcx, 23
  007d8	ba 08 00 00 00	 mov	 edx, 8
  007dd	48 6b d2 17	 imul	 rdx, rdx, 23
  007e1	4c 8b c8	 mov	 r9, rax
  007e4	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  007eb	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  007ef	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  007f6	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  007fa	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00801	e8 00 00 00 00	 call	 _ADD_UNIT
  00806	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 67   :     c = _ADD_UNIT(c, xp[24], yp[24], &zp[24]);

  0080c	b8 08 00 00 00	 mov	 eax, 8
  00811	48 6b c0 18	 imul	 rax, rax, 24
  00815	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0081c	48 03 c8	 add	 rcx, rax
  0081f	48 8b c1	 mov	 rax, rcx
  00822	b9 08 00 00 00	 mov	 ecx, 8
  00827	48 6b c9 18	 imul	 rcx, rcx, 24
  0082b	ba 08 00 00 00	 mov	 edx, 8
  00830	48 6b d2 18	 imul	 rdx, rdx, 24
  00834	4c 8b c8	 mov	 r9, rax
  00837	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0083e	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00842	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00849	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  0084d	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00854	e8 00 00 00 00	 call	 _ADD_UNIT
  00859	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 68   :     c = _ADD_UNIT(c, xp[25], yp[25], &zp[25]);

  0085f	b8 08 00 00 00	 mov	 eax, 8
  00864	48 6b c0 19	 imul	 rax, rax, 25
  00868	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  0086f	48 03 c8	 add	 rcx, rax
  00872	48 8b c1	 mov	 rax, rcx
  00875	b9 08 00 00 00	 mov	 ecx, 8
  0087a	48 6b c9 19	 imul	 rcx, rcx, 25
  0087e	ba 08 00 00 00	 mov	 edx, 8
  00883	48 6b d2 19	 imul	 rdx, rdx, 25
  00887	4c 8b c8	 mov	 r9, rax
  0088a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00891	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00895	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  0089c	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  008a0	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  008a7	e8 00 00 00 00	 call	 _ADD_UNIT
  008ac	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 69   :     c = _ADD_UNIT(c, xp[26], yp[26], &zp[26]);

  008b2	b8 08 00 00 00	 mov	 eax, 8
  008b7	48 6b c0 1a	 imul	 rax, rax, 26
  008bb	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  008c2	48 03 c8	 add	 rcx, rax
  008c5	48 8b c1	 mov	 rax, rcx
  008c8	b9 08 00 00 00	 mov	 ecx, 8
  008cd	48 6b c9 1a	 imul	 rcx, rcx, 26
  008d1	ba 08 00 00 00	 mov	 edx, 8
  008d6	48 6b d2 1a	 imul	 rdx, rdx, 26
  008da	4c 8b c8	 mov	 r9, rax
  008dd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  008e4	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  008e8	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  008ef	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  008f3	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  008fa	e8 00 00 00 00	 call	 _ADD_UNIT
  008ff	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 70   :     c = _ADD_UNIT(c, xp[27], yp[27], &zp[27]);

  00905	b8 08 00 00 00	 mov	 eax, 8
  0090a	48 6b c0 1b	 imul	 rax, rax, 27
  0090e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00915	48 03 c8	 add	 rcx, rax
  00918	48 8b c1	 mov	 rax, rcx
  0091b	b9 08 00 00 00	 mov	 ecx, 8
  00920	48 6b c9 1b	 imul	 rcx, rcx, 27
  00924	ba 08 00 00 00	 mov	 edx, 8
  00929	48 6b d2 1b	 imul	 rdx, rdx, 27
  0092d	4c 8b c8	 mov	 r9, rax
  00930	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00937	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0093b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00942	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00946	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  0094d	e8 00 00 00 00	 call	 _ADD_UNIT
  00952	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 71   :     c = _ADD_UNIT(c, xp[28], yp[28], &zp[28]);

  00958	b8 08 00 00 00	 mov	 eax, 8
  0095d	48 6b c0 1c	 imul	 rax, rax, 28
  00961	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00968	48 03 c8	 add	 rcx, rax
  0096b	48 8b c1	 mov	 rax, rcx
  0096e	b9 08 00 00 00	 mov	 ecx, 8
  00973	48 6b c9 1c	 imul	 rcx, rcx, 28
  00977	ba 08 00 00 00	 mov	 edx, 8
  0097c	48 6b d2 1c	 imul	 rdx, rdx, 28
  00980	4c 8b c8	 mov	 r9, rax
  00983	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  0098a	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  0098e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00995	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00999	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  009a0	e8 00 00 00 00	 call	 _ADD_UNIT
  009a5	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 72   :     c = _ADD_UNIT(c, xp[29], yp[29], &zp[29]);

  009ab	b8 08 00 00 00	 mov	 eax, 8
  009b0	48 6b c0 1d	 imul	 rax, rax, 29
  009b4	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  009bb	48 03 c8	 add	 rcx, rax
  009be	48 8b c1	 mov	 rax, rcx
  009c1	b9 08 00 00 00	 mov	 ecx, 8
  009c6	48 6b c9 1d	 imul	 rcx, rcx, 29
  009ca	ba 08 00 00 00	 mov	 edx, 8
  009cf	48 6b d2 1d	 imul	 rdx, rdx, 29
  009d3	4c 8b c8	 mov	 r9, rax
  009d6	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  009dd	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  009e1	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  009e8	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  009ec	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  009f3	e8 00 00 00 00	 call	 _ADD_UNIT
  009f8	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 73   :     c = _ADD_UNIT(c, xp[30], yp[30], &zp[30]);

  009fe	b8 08 00 00 00	 mov	 eax, 8
  00a03	48 6b c0 1e	 imul	 rax, rax, 30
  00a07	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00a0e	48 03 c8	 add	 rcx, rax
  00a11	48 8b c1	 mov	 rax, rcx
  00a14	b9 08 00 00 00	 mov	 ecx, 8
  00a19	48 6b c9 1e	 imul	 rcx, rcx, 30
  00a1d	ba 08 00 00 00	 mov	 edx, 8
  00a22	48 6b d2 1e	 imul	 rdx, rdx, 30
  00a26	4c 8b c8	 mov	 r9, rax
  00a29	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00a30	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00a34	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00a3b	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00a3f	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00a46	e8 00 00 00 00	 call	 _ADD_UNIT
  00a4b	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 74   :     c = _ADD_UNIT(c, xp[31], yp[31], &zp[31]);

  00a51	b8 08 00 00 00	 mov	 eax, 8
  00a56	48 6b c0 1f	 imul	 rax, rax, 31
  00a5a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR zp$[rbp]
  00a61	48 03 c8	 add	 rcx, rax
  00a64	48 8b c1	 mov	 rax, rcx
  00a67	b9 08 00 00 00	 mov	 ecx, 8
  00a6c	48 6b c9 1f	 imul	 rcx, rcx, 31
  00a70	ba 08 00 00 00	 mov	 edx, 8
  00a75	48 6b d2 1f	 imul	 rdx, rdx, 31
  00a79	4c 8b c8	 mov	 r9, rax
  00a7c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR yp$[rbp]
  00a83	4c 8b 04 08	 mov	 r8, QWORD PTR [rax+rcx]
  00a87	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR xp$[rbp]
  00a8e	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  00a92	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR c$[rbp]
  00a99	e8 00 00 00 00	 call	 _ADD_UNIT
  00a9e	88 85 e0 00 00
	00		 mov	 BYTE PTR c$[rbp], al

; 75   : #elif defined(__GNUC__)
; 76   : #ifdef _M_IX86
; 77   :     __asm__ volatile (
; 78   :         "addb\t$-1, %0\n\t"
; 79   :         "movl\t(%1), %%ecx\n\t"
; 80   :         "adcl\t(%2), %%ecx\n\t"
; 81   :         "movl\t%%ecx, (%3)\n\t"
; 82   :         "movl\t4(%1), %%ecx\n\t"
; 83   :         "adcl\t4(%2), %%ecx\n\t"
; 84   :         "movl\t%%ecx, 4(%3)\n\t"
; 85   :         "movl\t8(%1), %%ecx\n\t"
; 86   :         "adcl\t8(%2), %%ecx\n\t"
; 87   :         "movl\t%%ecx, 8(%3)\n\t"
; 88   :         "movl\t12(%1), %%ecx\n\t"
; 89   :         "adcl\t12(%2), %%ecx\n\t"
; 90   :         "movl\t%%ecx, 12(%3)\n\t"
; 91   :         "movl\t16(%1), %%ecx\n\t"
; 92   :         "adcl\t16(%2), %%ecx\n\t"
; 93   :         "movl\t%%ecx, 16(%3)\n\t"
; 94   :         "movl\t20(%1), %%ecx\n\t"
; 95   :         "adcl\t20(%2), %%ecx\n\t"
; 96   :         "movl\t%%ecx, 20(%3)\n\t"
; 97   :         "movl\t24(%1), %%ecx\n\t"
; 98   :         "adcl\t24(%2), %%ecx\n\t"
; 99   :         "movl\t%%ecx, 24(%3)\n\t"
; 100  :         "movl\t28(%1), %%ecx\n\t"
; 101  :         "adcl\t28(%2), %%ecx\n\t"
; 102  :         "movl\t%%ecx, 28(%3)\n\t"
; 103  :         "movl\t32(%1), %%ecx\n\t"
; 104  :         "adcl\t32(%2), %%ecx\n\t"
; 105  :         "movl\t%%ecx, 32(%3)\n\t"
; 106  :         "movl\t36(%1), %%ecx\n\t"
; 107  :         "adcl\t36(%2), %%ecx\n\t"
; 108  :         "movl\t%%ecx, 36(%3)\n\t"
; 109  :         "movl\t40(%1), %%ecx\n\t"
; 110  :         "adcl\t40(%2), %%ecx\n\t"
; 111  :         "movl\t%%ecx, 40(%3)\n\t"
; 112  :         "movl\t44(%1), %%ecx\n\t"
; 113  :         "adcl\t44(%2), %%ecx\n\t"
; 114  :         "movl\t%%ecx, 44(%3)\n\t"
; 115  :         "movl\t48(%1), %%ecx\n\t"
; 116  :         "adcl\t48(%2), %%ecx\n\t"
; 117  :         "movl\t%%ecx, 48(%3)\n\t"
; 118  :         "movl\t52(%1), %%ecx\n\t"
; 119  :         "adcl\t52(%2), %%ecx\n\t"
; 120  :         "movl\t%%ecx, 52(%3)\n\t"
; 121  :         "movl\t56(%1), %%ecx\n\t"
; 122  :         "adcl\t56(%2), %%ecx\n\t"
; 123  :         "movl\t%%ecx, 56(%3)\n\t"
; 124  :         "movl\t60(%1), %%ecx\n\t"
; 125  :         "adcl\t60(%2), %%ecx\n\t"
; 126  :         "movl\t%%ecx, 60(%3)\n\t"
; 127  :         "movl\t64(%1), %%ecx\n\t"
; 128  :         "adcl\t64(%2), %%ecx\n\t"
; 129  :         "movl\t%%ecx, 64(%3)\n\t"
; 130  :         "movl\t68(%1), %%ecx\n\t"
; 131  :         "adcl\t68(%2), %%ecx\n\t"
; 132  :         "movl\t%%ecx, 68(%3)\n\t"
; 133  :         "movl\t72(%1), %%ecx\n\t"
; 134  :         "adcl\t72(%2), %%ecx\n\t"
; 135  :         "movl\t%%ecx, 72(%3)\n\t"
; 136  :         "movl\t76(%1), %%ecx\n\t"
; 137  :         "adcl\t76(%2), %%ecx\n\t"
; 138  :         "movl\t%%ecx, 76(%3)\n\t"
; 139  :         "movl\t80(%1), %%ecx\n\t"
; 140  :         "adcl\t80(%2), %%ecx\n\t"
; 141  :         "movl\t%%ecx, 80(%3)\n\t"
; 142  :         "movl\t84(%1), %%ecx\n\t"
; 143  :         "adcl\t84(%2), %%ecx\n\t"
; 144  :         "movl\t%%ecx, 84(%3)\n\t"
; 145  :         "movl\t88(%1), %%ecx\n\t"
; 146  :         "adcl\t88(%2), %%ecx\n\t"
; 147  :         "movl\t%%ecx, 88(%3)\n\t"
; 148  :         "movl\t92(%1), %%ecx\n\t"
; 149  :         "adcl\t92(%2), %%ecx\n\t"
; 150  :         "movl\t%%ecx, 92(%3)\n\t"
; 151  :         "movl\t96(%1), %%ecx\n\t"
; 152  :         "adcl\t96(%2), %%ecx\n\t"
; 153  :         "movl\t%%ecx, 96(%3)\n\t"
; 154  :         "movl\t100(%1), %%ecx\n\t"
; 155  :         "adcl\t100(%2), %%ecx\n\t"
; 156  :         "movl\t%%ecx, 100(%3)\n\t"
; 157  :         "movl\t104(%1), %%ecx\n\t"
; 158  :         "adcl\t104(%2), %%ecx\n\t"
; 159  :         "movl\t%%ecx, 104(%3)\n\t"
; 160  :         "movl\t108(%1), %%ecx\n\t"
; 161  :         "adcl\t108(%2), %%ecx\n\t"
; 162  :         "movl\t%%ecx, 108(%3)\n\t"
; 163  :         "movl\t112(%1), %%ecx\n\t"
; 164  :         "adcl\t112(%2), %%ecx\n\t"
; 165  :         "movl\t%%ecx, 112(%3)\n\t"
; 166  :         "movl\t116(%1), %%ecx\n\t"
; 167  :         "adcl\t116(%2), %%ecx\n\t"
; 168  :         "movl\t%%ecx, 116(%3)\n\t"
; 169  :         "movl\t120(%1), %%ecx\n\t"
; 170  :         "adcl\t120(%2), %%ecx\n\t"
; 171  :         "movl\t%%ecx, 120(%3)\n\t"
; 172  :         "movl\t124(%1), %%ecx\n\t"
; 173  :         "adcl\t124(%2), %%ecx\n\t"
; 174  :         "movl\t%%ecx, 124(%3)\n\t"
; 175  :         "setc\t%0"
; 176  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 177  :         :
; 178  :         : "cc", "memory", "%ecx"
; 179  : );
; 180  : #elif defined(_M_X64)
; 181  :     __asm__ volatile (
; 182  :         "addb\t$-1, %0\n\t"
; 183  :         "movq\t(%1), %%rcx\n\t"
; 184  :         "adcq\t(%2), %%rcx\n\t"
; 185  :         "movq\t%%rcx, (%3)\n\t"
; 186  :         "movq\t8(%1), %%rcx\n\t"
; 187  :         "adcq\t8(%2), %%rcx\n\t"
; 188  :         "movq\t%%rcx, 8(%3)\n\t"
; 189  :         "movq\t16(%1), %%rcx\n\t"
; 190  :         "adcq\t16(%2), %%rcx\n\t"
; 191  :         "movq\t%%rcx, 16(%3)\n\t"
; 192  :         "movq\t24(%1), %%rcx\n\t"
; 193  :         "adcq\t24(%2), %%rcx\n\t"
; 194  :         "movq\t%%rcx, 24(%3)\n\t"
; 195  :         "movq\t32(%1), %%rcx\n\t"
; 196  :         "adcq\t32(%2), %%rcx\n\t"
; 197  :         "movq\t%%rcx, 32(%3)\n\t"
; 198  :         "movq\t40(%1), %%rcx\n\t"
; 199  :         "adcq\t40(%2), %%rcx\n\t"
; 200  :         "movq\t%%rcx, 40(%3)\n\t"
; 201  :         "movq\t48(%1), %%rcx\n\t"
; 202  :         "adcq\t48(%2), %%rcx\n\t"
; 203  :         "movq\t%%rcx, 48(%3)\n\t"
; 204  :         "movq\t56(%1), %%rcx\n\t"
; 205  :         "adcq\t56(%2), %%rcx\n\t"
; 206  :         "movq\t%%rcx, 56(%3)\n\t"
; 207  :         "movq\t64(%1), %%rcx\n\t"
; 208  :         "adcq\t64(%2), %%rcx\n\t"
; 209  :         "movq\t%%rcx, 64(%3)\n\t"
; 210  :         "movq\t72(%1), %%rcx\n\t"
; 211  :         "adcq\t72(%2), %%rcx\n\t"
; 212  :         "movq\t%%rcx, 72(%3)\n\t"
; 213  :         "movq\t80(%1), %%rcx\n\t"
; 214  :         "adcq\t80(%2), %%rcx\n\t"
; 215  :         "movq\t%%rcx, 80(%3)\n\t"
; 216  :         "movq\t88(%1), %%rcx\n\t"
; 217  :         "adcq\t88(%2), %%rcx\n\t"
; 218  :         "movq\t%%rcx, 88(%3)\n\t"
; 219  :         "movq\t96(%1), %%rcx\n\t"
; 220  :         "adcq\t96(%2), %%rcx\n\t"
; 221  :         "movq\t%%rcx, 96(%3)\n\t"
; 222  :         "movq\t104(%1), %%rcx\n\t"
; 223  :         "adcq\t104(%2), %%rcx\n\t"
; 224  :         "movq\t%%rcx, 104(%3)\n\t"
; 225  :         "movq\t112(%1), %%rcx\n\t"
; 226  :         "adcq\t112(%2), %%rcx\n\t"
; 227  :         "movq\t%%rcx, 112(%3)\n\t"
; 228  :         "movq\t120(%1), %%rcx\n\t"
; 229  :         "adcq\t120(%2), %%rcx\n\t"
; 230  :         "movq\t%%rcx, 120(%3)\n\t"
; 231  :         "movq\t128(%1), %%rcx\n\t"
; 232  :         "adcq\t128(%2), %%rcx\n\t"
; 233  :         "movq\t%%rcx, 128(%3)\n\t"
; 234  :         "movq\t136(%1), %%rcx\n\t"
; 235  :         "adcq\t136(%2), %%rcx\n\t"
; 236  :         "movq\t%%rcx, 136(%3)\n\t"
; 237  :         "movq\t144(%1), %%rcx\n\t"
; 238  :         "adcq\t144(%2), %%rcx\n\t"
; 239  :         "movq\t%%rcx, 144(%3)\n\t"
; 240  :         "movq\t152(%1), %%rcx\n\t"
; 241  :         "adcq\t152(%2), %%rcx\n\t"
; 242  :         "movq\t%%rcx, 152(%3)\n\t"
; 243  :         "movq\t160(%1), %%rcx\n\t"
; 244  :         "adcq\t160(%2), %%rcx\n\t"
; 245  :         "movq\t%%rcx, 160(%3)\n\t"
; 246  :         "movq\t168(%1), %%rcx\n\t"
; 247  :         "adcq\t168(%2), %%rcx\n\t"
; 248  :         "movq\t%%rcx, 168(%3)\n\t"
; 249  :         "movq\t176(%1), %%rcx\n\t"
; 250  :         "adcq\t176(%2), %%rcx\n\t"
; 251  :         "movq\t%%rcx, 176(%3)\n\t"
; 252  :         "movq\t184(%1), %%rcx\n\t"
; 253  :         "adcq\t184(%2), %%rcx\n\t"
; 254  :         "movq\t%%rcx, 184(%3)\n\t"
; 255  :         "movq\t192(%1), %%rcx\n\t"
; 256  :         "adcq\t192(%2), %%rcx\n\t"
; 257  :         "movq\t%%rcx, 192(%3)\n\t"
; 258  :         "movq\t200(%1), %%rcx\n\t"
; 259  :         "adcq\t200(%2), %%rcx\n\t"
; 260  :         "movq\t%%rcx, 200(%3)\n\t"
; 261  :         "movq\t208(%1), %%rcx\n\t"
; 262  :         "adcq\t208(%2), %%rcx\n\t"
; 263  :         "movq\t%%rcx, 208(%3)\n\t"
; 264  :         "movq\t216(%1), %%rcx\n\t"
; 265  :         "adcq\t216(%2), %%rcx\n\t"
; 266  :         "movq\t%%rcx, 216(%3)\n\t"
; 267  :         "movq\t224(%1), %%rcx\n\t"
; 268  :         "adcq\t224(%2), %%rcx\n\t"
; 269  :         "movq\t%%rcx, 224(%3)\n\t"
; 270  :         "movq\t232(%1), %%rcx\n\t"
; 271  :         "adcq\t232(%2), %%rcx\n\t"
; 272  :         "movq\t%%rcx, 232(%3)\n\t"
; 273  :         "movq\t240(%1), %%rcx\n\t"
; 274  :         "adcq\t240(%2), %%rcx\n\t"
; 275  :         "movq\t%%rcx, 240(%3)\n\t"
; 276  :         "movq\t248(%1), %%rcx\n\t"
; 277  :         "adcq\t248(%2), %%rcx\n\t"
; 278  :         "movq\t%%rcx, 248(%3)\n\t"
; 279  :         "setc\t%0"
; 280  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 281  :         :
; 282  :         : "cc", "memory", "%rcx"
; 283  : );
; 284  : #else
; 285  : #error unknown platform
; 286  : #endif
; 287  : #else
; 288  : #error unknown compiler
; 289  : #endif
; 290  :     return (c);

  00aa4	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR c$[rbp]

; 291  : }

  00aab	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00ab2	5f		 pop	 rdi
  00ab3	5d		 pop	 rbp
  00ab4	c3		 ret	 0
_ADD_32WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 454  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 455  :             if (x == 0)

  00036	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR x$[rbp], 0
  0003e	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 456  :                 return (sizeof(x) * 8);

  00040	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00045	eb 1c		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 457  : #ifdef _M_IX86
; 458  :             DWORD pos;
; 459  : #ifdef _MSC_VER
; 460  :             _BitScanReverse(&pos, x);
; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);

  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR x$[rbp]
  0004e	48 0f bd c0	 bsr	 rax, rax
  00052	89 45 04	 mov	 DWORD PTR pos$[rbp], eax

; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  00055	8b 45 04	 mov	 eax, DWORD PTR pos$[rbp]
  00058	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  0005d	48 2b c8	 sub	 rcx, rax
  00060	48 8b c1	 mov	 rax, rcx
$LN1@LZCNT_ALT_:

; 480  :         }

  00063	48 8b f8	 mov	 rdi, rax
  00066	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
  00071	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00076	48 8b c7	 mov	 rax, rdi
  00079	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00080	5f		 pop	 rdi
  00081	5d		 pop	 rbp
  00082	c3		 ret	 0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_64
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_64 PROC					; COMDAT

; 437  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 438  :             if (x == 0)

  00036	48 83 bd 00 01
	00 00 00	 cmp	 QWORD PTR x$[rbp], 0
  0003e	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 439  :                 return (sizeof(x) * 8);

  00040	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00045	eb 1c		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 440  : #ifdef _MSC_VER
; 441  :             DWORD pos;
; 442  :             _BitScanReverse64(&pos, x);

  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR x$[rbp]
  0004e	48 0f bd c0	 bsr	 rax, rax
  00052	89 45 04	 mov	 DWORD PTR pos$[rbp], eax

; 443  : #elif defined(__GNUC__)
; 444  :             _UINT64_T pos;
; 445  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 446  : #else
; 447  : #error unknown compiler
; 448  : #endif
; 449  :             return (sizeof(x) * 8 - 1 - pos);

  00055	8b 45 04	 mov	 eax, DWORD PTR pos$[rbp]
  00058	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  0005d	48 2b c8	 sub	 rcx, rax
  00060	48 8b c1	 mov	 rax, rcx
$LN1@LZCNT_ALT_:

; 450  :         }

  00063	48 8b f8	 mov	 rdi, rax
  00066	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_LZCNT_ALT_64$rtcFrameData
  00071	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00076	48 8b c7	 mov	 rax, rdi
  00079	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00080	5f		 pop	 rdi
  00081	5d		 pop	 rbp
  00082	c3		 ret	 0
_LZCNT_ALT_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_32 PROC					; COMDAT

; 421  :         {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR [rsp+296]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 422  :             if (x == 0)

  00034	83 bd 00 01 00
	00 00		 cmp	 DWORD PTR x$[rbp], 0
  0003b	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 423  :                 return (sizeof(x) * 8);

  0003d	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00042	eb 1a		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 424  :             DWORD pos;
; 425  : #ifdef _MSC_VER
; 426  :             _BitScanReverse(&pos, x);

  00044	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR x$[rbp]
  0004a	0f bd c0	 bsr	 eax, eax
  0004d	89 45 04	 mov	 DWORD PTR pos$[rbp], eax

; 427  : #elif defined(__GNUC__)
; 428  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 429  : #else
; 430  : #error unknown compiler
; 431  : #endif
; 432  :             return (sizeof(x) * 8 - 1 - pos);

  00050	8b 45 04	 mov	 eax, DWORD PTR pos$[rbp]
  00053	b9 1f 00 00 00	 mov	 ecx, 31
  00058	48 2b c8	 sub	 rcx, rax
  0005b	48 8b c1	 mov	 rax, rcx
$LN1@LZCNT_ALT_:

; 433  :         }

  0005e	48 8b f8	 mov	 rdi, rax
  00061	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_LZCNT_ALT_32$rtcFrameData
  0006c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00071	48 8b c7	 mov	 rax, rdi
  00074	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007b	5f		 pop	 rdi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT _DIVREM_SINGLE_UNIT
_TEXT	SEGMENT
RR$ = 8
r$ = 256
u$ = 264
v$ = 272
q$ = 280
_DIVREM_SINGLE_UNIT PROC				; COMDAT

; 339  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 340  :         _UINT64_T RR;
; 341  :         *q = _DIVREM_UNIT(r, u, v, &RR);

  00045	4c 8d 4d 08	 lea	 r9, QWORD PTR RR$[rbp]
  00049	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00050	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR u$[rbp]
  00057	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR r$[rbp]
  0005e	e8 00 00 00 00	 call	 _DIVREM_UNIT
  00063	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  0006a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 342  :         return (RR);

  0006d	48 8b 45 08	 mov	 rax, QWORD PTR RR$[rbp]

; 343  :     }

  00071	48 8b f8	 mov	 rdi, rax
  00074	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_DIVREM_SINGLE_UNIT$rtcFrameData
  0007f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00084	48 8b c7	 mov	 rax, rdi
  00087	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
_DIVREM_SINGLE_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT _DIVREM_UNIT
_TEXT	SEGMENT
v_hi$ = 4
v_lo$ = 36
q$4 = 72
q$5 = 104
u_hi$ = 352
u_lo$ = 360
v$ = 368
r$ = 376
_DIVREM_UNIT PROC					; COMDAT

; 323  :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 324  :         _UINT32_T v_hi;
; 325  :         _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

  00045	48 8d 55 04	 lea	 rdx, QWORD PTR v_hi$[rbp]
  00049	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  00050	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  00055	89 45 24	 mov	 DWORD PTR v_lo$[rbp], eax

; 326  :         if (v_hi == 0)

  00058	83 7d 04 00	 cmp	 DWORD PTR v_hi$[rbp], 0
  0005c	75 2a		 jne	 SHORT $LN2@DIVREM_UNI

; 327  :         {
; 328  :             _UINT64_T q = DivRem::_DIVREM_UNIT_1W(u_hi, u_lo, v_lo, r);

  0005e	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR r$[rbp]
  00065	44 8b 45 24	 mov	 r8d, DWORD PTR v_lo$[rbp]
  00069	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR u_lo$[rbp]
  00070	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR u_hi$[rbp]
  00077	e8 00 00 00 00	 call	 ?_DIVREM_UNIT_1W@DivRem@Internal@Core@Math@Palmtree@@YA_K_K0IPEA_K@Z ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_1W
  0007c	48 89 45 48	 mov	 QWORD PTR q$4[rbp], rax

; 329  :             return (q);

  00080	48 8b 45 48	 mov	 rax, QWORD PTR q$4[rbp]
  00084	eb 2b		 jmp	 SHORT $LN1@DIVREM_UNI

; 330  :         }
; 331  :         else

  00086	eb 29		 jmp	 SHORT $LN3@DIVREM_UNI
$LN2@DIVREM_UNI:

; 332  :         {
; 333  :             _UINT64_T q = DivRem::_DIVREM_UNIT_nW(u_hi, u_lo, v, r);

  00088	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR r$[rbp]
  0008f	4c 8b 85 70 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00096	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR u_lo$[rbp]
  0009d	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR u_hi$[rbp]
  000a4	e8 00 00 00 00	 call	 ?_DIVREM_UNIT_nW@DivRem@Internal@Core@Math@Palmtree@@YA_K_K00PEA_K@Z ; Palmtree::Math::Core::Internal::DivRem::_DIVREM_UNIT_nW
  000a9	48 89 45 68	 mov	 QWORD PTR q$5[rbp], rax

; 334  :             return (q);

  000ad	48 8b 45 68	 mov	 rax, QWORD PTR q$5[rbp]
$LN3@DIVREM_UNI:
$LN1@DIVREM_UNI:

; 335  :         }
; 336  :     }

  000b1	48 8b f8	 mov	 rdi, rax
  000b4	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_DIVREM_UNIT$rtcFrameData
  000bf	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c4	48 8b c7	 mov	 rax, rdi
  000c7	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  000ce	5f		 pop	 rdi
  000cf	5d		 pop	 rbp
  000d0	c3		 ret	 0
_DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLYX_UNIT
_TEXT	SEGMENT
u$ = 224
v$ = 232
w_hi$ = 240
_MULTIPLYX_UNIT PROC					; COMDAT

; 228  :         {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 229  : #ifdef _MSC_VER
; 230  : #ifdef _M_IX86
; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 232  : #elif defined(_M_X64)
; 233  :             return (_mulx_u64(u, v, w_hi));

  00040	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00047	c4 e2 f3 f6 85
	e0 00 00 00	 mulx	 rax, rcx, QWORD PTR u$[rbp]
  00050	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR w_hi$[rbp]
  00057	48 89 02	 mov	 QWORD PTR [rdx], rax
  0005a	48 8b c1	 mov	 rax, rcx

; 234  : #else
; 235  : #error unknown platform
; 236  : #endif
; 237  : #elif defined(__GNUC__)
; 238  : #ifdef _M_IX86
; 239  :             _UINT32_T w_lo;
; 240  :             __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 241  :             return (w_lo);
; 242  : #elif defined(_M_X64)
; 243  :             _UINT64_T w_lo;
; 244  :             __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 245  :             return (w_lo);
; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  : #else
; 250  : #error unknown compiler
; 251  : #endif
; 252  :         }

  0005d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
_MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLY_UNIT
_TEXT	SEGMENT
tv69 = 192
u$ = 240
v$ = 248
w_hi$ = 256
_MULTIPLY_UNIT PROC					; COMDAT

; 209  :         {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 210  : #ifdef _M_IX86
; 211  : #ifdef _MSC_VER
; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 213  : #elif defined(__GNUC__)
; 214  :             _UINT32_T w_lo;
; 215  :             __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 216  :             return (w_lo);
; 217  : #else
; 218  : #error unknown compiler
; 219  : #endif
; 220  : #elif defined(_M_X64)
; 221  :             return (_umul128(u, v, w_hi));

  00040	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00047	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  0004e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR v$[rbp]
  00055	48 8b c1	 mov	 rax, rcx
  00058	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv69[rbp]
  0005f	48 f7 e1	 mul	 rcx
  00062	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR w_hi$[rbp]
  00069	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 222  : #else
; 223  : #error unknown platform
; 224  : #endif
; 225  :         }

  0006c	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
_MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _SUBTRUCT_UNIT
_TEXT	SEGMENT
borrow$ = 224
u$ = 232
v$ = 240
w$ = 248
_SUBTRUCT_UNIT PROC					; COMDAT

; 198  :         {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 199  : #ifdef _M_IX86
; 200  :             return (_subborrow_u32(borrow, u, v, w));
; 201  : #elif defined(_M_X64)
; 202  :             return (_subborrow_u64(borrow, u, v, w));

  00044	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR borrow$[rbp]
  00052	80 c1 ff	 add	 cl, -1
  00055	48 1b 85 f0 00
	00 00		 sbb	 rax, QWORD PTR v$[rbp]
  0005c	0f 92 c1	 setb	 cl
  0005f	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00066	48 89 02	 mov	 QWORD PTR [rdx], rax
  00069	0f b6 c1	 movzx	 eax, cl

; 203  : #else
; 204  : #error unknown platform
; 205  : #endif
; 206  :         }

  0006c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
_SUBTRUCT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADDX_UNIT PROC						; COMDAT

; 187  :         {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));
; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00044	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR carry$[rbp]
  00052	80 c1 ff	 add	 cl, -1
  00055	66 48 0f 38 f6
	85 f0 00 00 00	 adcx	 rax, QWORD PTR v$[rbp]
  0005f	0f 92 c1	 setb	 cl
  00062	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00069	48 89 02	 mov	 QWORD PTR [rdx], rax
  0006c	0f b6 c1	 movzx	 eax, cl

; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  0006f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADD_UNIT PROC						; COMDAT

; 176  :         {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f b6 8c 24 08
	01 00 00	 movzx	 ecx, BYTE PTR [rsp+264]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));
; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));

  00044	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004b	0f b6 8d e0 00
	00 00		 movzx	 ecx, BYTE PTR carry$[rbp]
  00052	80 c1 ff	 add	 cl, -1
  00055	48 13 85 f0 00
	00 00		 adc	 rax, QWORD PTR v$[rbp]
  0005c	0f 92 c1	 setb	 cl
  0005f	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00066	48 89 02	 mov	 QWORD PTR [rdx], rax
  00069	0f b6 c1	 movzx	 eax, cl

; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  0006c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 224
result_high$ = 232
_FROMDWORDTOWORD PROC					; COMDAT

; 145  :         {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR value$[rbp]
  00042	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00046	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR result_high$[rbp]
  0004d	89 01		 mov	 DWORD PTR [rcx], eax

; 147  :             return ((_UINT32_T)value);

  0004f	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR value$[rbp]

; 148  :         }

  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMWORDTODWORD
_TEXT	SEGMENT
value_high$ = 224
value_low$ = 232
_FROMWORDTODWORD PROC					; COMDAT

; 140  :         {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00033	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  00038	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR value_high$[rbp]
  0003e	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00042	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR value_low$[rbp]
  00048	48 0b c1	 or	 rax, rcx

; 142  :         }

  0004b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
_FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT PROC					; COMDAT

; 63   :         {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);

  00041	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR d$[rbp]
  00048	48 8b b5 e8 00
	00 00		 mov	 rsi, QWORD PTR s$[rbp]
  0004f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR count$[rbp]
  00056	f3 48 a5	 rep movsq

; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  00059	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  00060	5f		 pop	 rdi
  00061	5e		 pop	 rsi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
value$ = 224
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI64Counter, COMDAT

; 344  :     {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A ; Palmtree::Math::Core::Internal::statistics_info
  0003b	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR value$[rbp]
  00041	f0 01 08	 lock add DWORD PTR [rax], ecx

; 346  :     }

  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
value$ = 224
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI32Counter, COMDAT

; 338  :     {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00034	48 8d 05 04 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  0003b	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR value$[rbp]
  00041	f0 01 08	 lock add DWORD PTR [rax], ecx

; 340  :     }

  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
value$ = 224
?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToDIV64Counter, COMDAT

; 332  :     {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 333  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

  00034	48 8d 05 08 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+8
  0003b	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR value$[rbp]
  00041	f0 01 08	 lock add DWORD PTR [rax], ecx

; 334  :     }

  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToDIV64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
value$ = 224
?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToDIV32Counter, COMDAT

; 326  :     {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR [rsp+264]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 327  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  00034	48 8d 05 0c 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  0003b	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR value$[rbp]
  00041	f0 01 08	 lock add DWORD PTR [rax], ecx

; 328  :     }

  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToDIV32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter, COMDAT

; 321  :     {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A ; Palmtree::Math::Core::Internal::statistics_info
  00031	f0 ff 00	 lock inc DWORD PTR [rax]

; 323  :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter, COMDAT

; 315  :     {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  0002a	48 8d 05 04 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  00031	f0 ff 00	 lock inc DWORD PTR [rax]

; 317  :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementDIV64Counter, COMDAT

; 309  :     {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

  0002a	48 8d 05 08 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+8
  00031	f0 ff 00	 lock inc DWORD PTR [rax]

; 311  :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementDIV64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementDIV32Counter, COMDAT

; 303  :     {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 304  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  0002a	48 8d 05 0c 00
	00 00		 lea	 rax, OFFSET FLAT:?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  00031	f0 ff 00	 lock inc DWORD PTR [rax]

; 305  :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z
_TEXT	SEGMENT
nu$ = 8
nv$ = 40
root$ = 72
nq$ = 136
nr$ = 168
$T5 = 392
$T6 = 472
$T7 = 552
$T8 = 632
$T9 = 664
u$ = 720
v$ = 728
q$ = 736
?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X, COMDAT

; 2188 :     {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec d8 02
	00 00		 sub	 rsp, 728		; 000002d8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 b6 00 00 00	 mov	 ecx, 182		; 000000b6H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+760]
  00034	48 c7 85 98 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T9[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2189 :         if (u == nullptr)

  0004b	48 83 bd d0 02
	00 00 00	 cmp	 QWORD PTR u$[rbp], 0
  00053	75 2d		 jne	 SHORT $LN2@PMC_DivRem

; 2190 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00055	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13ICFKHAEN@?$AAu@
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00063	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0006a	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00076	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0007d	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_DivRem:

; 2191 :         if (v == nullptr)

  00082	48 83 bd d8 02
	00 00 00	 cmp	 QWORD PTR v$[rbp], 0
  0008a	75 2d		 jne	 SHORT $LN3@PMC_DivRem

; 2192 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0008c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13JAOPNPKD@?$AAv@
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  0009a	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000a1	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000ad	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000b4	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_DivRem:

; 2193 :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  000b9	48 8b 85 d0 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000c0	48 89 45 08	 mov	 QWORD PTR nu$[rbp], rax

; 2194 :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  000c4	48 8b 85 d8 02
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  000cb	48 89 45 28	 mov	 QWORD PTR nv$[rbp], rax

; 2195 :         CheckNumber(nu);

  000cf	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  000d3	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 2196 :         CheckNumber(nv);

  000d8	48 8b 4d 28	 mov	 rcx, QWORD PTR nv$[rbp]
  000dc	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 2197 :         if (nv->IS_ZERO)

  000e1	48 8b 45 28	 mov	 rax, QWORD PTR nv$[rbp]
  000e5	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000e8	83 e0 01	 and	 eax, 1
  000eb	85 c0		 test	 eax, eax
  000ed	74 26		 je	 SHORT $LN4@PMC_DivRem

; 2198 :         {
; 2199 :             // v が 0 である場合
; 2200 : 
; 2201 :             // 0 による除算はエラーで返す
; 2202 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  000f6	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000fd	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  00109	48 8d 8d 28 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00110	e8 00 00 00 00	 call	 _CxxThrowException
$LN4@PMC_DivRem:

; 2203 :         }
; 2204 :         ResourceHolderUINT root;

  00115	48 8d 4d 48	 lea	 rcx, QWORD PTR root$[rbp]
  00119	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0011e	90		 npad	 1

; 2205 :         NUMBER_HEADER* nq;
; 2206 :         NUMBER_HEADER* nr;
; 2207 : 
; 2208 :         if (q != nullptr)

  0011f	48 83 bd e0 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00127	0f 84 86 00 00
	00		 je	 $LN5@PMC_DivRem

; 2209 :         {
; 2210 :             nr = PMC_DivRem_X_X_Imp(nu, nv, &nq);

  0012d	4c 8d 85 88 00
	00 00		 lea	 r8, QWORD PTR nq$[rbp]
  00134	48 8b 55 28	 mov	 rdx, QWORD PTR nv$[rbp]
  00138	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  0013c	e8 00 00 00 00	 call	 ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
  00141	48 89 85 a8 00
	00 00		 mov	 QWORD PTR nr$[rbp], rax

; 2211 :             root.HookNumber(nq);

  00148	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR nq$[rbp]
  0014f	48 8d 4d 48	 lea	 rcx, QWORD PTR root$[rbp]
  00153	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2212 :             root.HookNumber(nr);

  00158	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR nr$[rbp]
  0015f	48 8d 4d 48	 lea	 rcx, QWORD PTR root$[rbp]
  00163	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2213 : #ifdef _DEBUG
; 2214 :             CheckNumber(nq);

  00168	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR nq$[rbp]
  0016f	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 2215 :             CheckNumber(nr);

  00174	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR nr$[rbp]
  0017b	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 2216 : #endif
; 2217 :             root.UnlinkNumber(nq);

  00180	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR nq$[rbp]
  00187	48 8d 4d 48	 lea	 rcx, QWORD PTR root$[rbp]
  0018b	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 2218 :             *q = (PMC_HANDLE_UINT)nq;

  00190	48 8b 85 e0 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00197	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR nq$[rbp]
  0019e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2219 :             root.UnlinkNumber(nr);

  001a1	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR nr$[rbp]
  001a8	48 8d 4d 48	 lea	 rcx, QWORD PTR root$[rbp]
  001ac	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 2220 :         }
; 2221 :         else

  001b1	eb 43		 jmp	 SHORT $LN6@PMC_DivRem
$LN5@PMC_DivRem:

; 2222 :         {
; 2223 :             nr = PMC_DivRem_X_X_Imp(nu, nv, nullptr);

  001b3	45 33 c0	 xor	 r8d, r8d
  001b6	48 8b 55 28	 mov	 rdx, QWORD PTR nv$[rbp]
  001ba	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  001be	e8 00 00 00 00	 call	 ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@0PEAPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
  001c3	48 89 85 a8 00
	00 00		 mov	 QWORD PTR nr$[rbp], rax

; 2224 :             root.HookNumber(nr);

  001ca	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR nr$[rbp]
  001d1	48 8d 4d 48	 lea	 rcx, QWORD PTR root$[rbp]
  001d5	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2225 : #ifdef _DEBUG
; 2226 :             CheckNumber(nr);

  001da	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR nr$[rbp]
  001e1	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 2227 : #endif
; 2228 :             root.UnlinkNumber(nr);

  001e6	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR nr$[rbp]
  001ed	48 8d 4d 48	 lea	 rcx, QWORD PTR root$[rbp]
  001f1	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN6@PMC_DivRem:

; 2229 :         }
; 2230 : 
; 2231 :         return ((PMC_HANDLE_UINT)nr);

  001f6	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR nr$[rbp]
  001fd	48 89 85 78 02
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  00204	48 8d 4d 48	 lea	 rcx, QWORD PTR root$[rbp]
  00208	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0020d	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR $T8[rbp]

; 2232 :     }

  00214	48 8b f8	 mov	 rdi, rax
  00217	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0021b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z$rtcFrameData
  00222	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00227	48 8b c7	 mov	 rax, rdi
  0022a	48 8d a5 b8 02
	00 00		 lea	 rsp, QWORD PTR [rbp+696]
  00231	5f		 pop	 rdi
  00232	5d		 pop	 rbp
  00233	c3		 ret	 0
$LN9@PMC_DivRem:
?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
nu$ = 8
nv$ = 40
root$ = 72
nq$ = 136
nr$ = 168
$T5 = 392
$T6 = 472
$T7 = 552
$T8 = 632
$T9 = 664
u$ = 720
v$ = 728
q$ = 736
?dtor$0@?0??PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nu$ = 8
nv$ = 40
root$ = 72
nq$ = 136
nr$ = 168
$T5 = 392
$T6 = 472
$T7 = 552
$T8 = 632
$T9 = 664
u$ = 720
v$ = 728
q$ = 736
?dtor$0@?0??PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@0PEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_X'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z
_TEXT	SEGMENT
nu$ = 8
root$ = 40
nq$ = 104
r$5 = 136
r$6 = 168
$T7 = 392
$T8 = 472
$T9 = 552
$T10 = 584
$T11 = 616
u$ = 672
v$ = 680
q$ = 688
?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L, COMDAT

; 2008 :     {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec a8 02
	00 00		 sub	 rsp, 680		; 000002a8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 aa 00 00 00	 mov	 ecx, 170		; 000000aaH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+712]
  00034	48 c7 85 68 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T11[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2009 :         if (sizeof(__UNIT_TYPE) * 2 < sizeof(v))

  0004b	33 c0		 xor	 eax, eax
  0004d	85 c0		 test	 eax, eax
  0004f	74 2d		 je	 SHORT $LN2@PMC_DivRem

; 2010 :         {
; 2011 :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 2012 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_X_L;1");

  00051	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EA@KNNDHBNE@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
  0005f	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00066	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00072	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00079	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_DivRem:

; 2013 :         }
; 2014 :         if (u == nullptr)

  0007e	48 83 bd a0 02
	00 00 00	 cmp	 QWORD PTR u$[rbp], 0
  00086	75 2d		 jne	 SHORT $LN3@PMC_DivRem

; 2015 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00088	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13ICFKHAEN@?$AAu@
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00096	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0009d	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a9	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  000b0	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_DivRem:

; 2016 :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  000b5	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000bc	48 89 45 08	 mov	 QWORD PTR nu$[rbp], rax

; 2017 :         CheckNumber(nu);

  000c0	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  000c4	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 2018 :         ResourceHolderUINT root;

  000c9	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  000cd	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000d2	90		 npad	 1

; 2019 :         NUMBER_HEADER* nq;
; 2020 :         if (q != nullptr)

  000d3	48 83 bd b0 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  000db	74 6e		 je	 SHORT $LN4@PMC_DivRem

; 2021 :         {
; 2022 :             _UINT64_T r = PMC_DivRem_X_L_Imp(nu, v, &nq);

  000dd	4c 8d 45 68	 lea	 r8, QWORD PTR nq$[rbp]
  000e1	48 8b 95 a8 02
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  000e8	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  000ec	e8 00 00 00 00	 call	 ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
  000f1	48 89 85 88 00
	00 00		 mov	 QWORD PTR r$5[rbp], rax

; 2023 :             root.HookNumber(nq);

  000f8	48 8b 55 68	 mov	 rdx, QWORD PTR nq$[rbp]
  000fc	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00100	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2024 : #ifdef _DEBUG
; 2025 :             CheckNumber(nq);

  00105	48 8b 4d 68	 mov	 rcx, QWORD PTR nq$[rbp]
  00109	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 2026 : #endif
; 2027 :             *q = (PMC_HANDLE_UINT)nq;

  0010e	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00115	48 8b 4d 68	 mov	 rcx, QWORD PTR nq$[rbp]
  00119	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2028 :             root.UnlinkNumber(nq);

  0011c	48 8b 55 68	 mov	 rdx, QWORD PTR nq$[rbp]
  00120	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00124	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 2029 :             return (r);

  00129	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR r$5[rbp]
  00130	48 89 85 28 02
	00 00		 mov	 QWORD PTR $T9[rbp], rax
  00137	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0013b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00140	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR $T9[rbp]
  00147	eb 46		 jmp	 SHORT $LN6@PMC_DivRem

; 2030 :         }
; 2031 :         else

  00149	eb 3a		 jmp	 SHORT $LN5@PMC_DivRem
$LN4@PMC_DivRem:

; 2032 :         {
; 2033 :             _UINT64_T r = PMC_DivRem_X_L_Imp(nu, v, nullptr);

  0014b	45 33 c0	 xor	 r8d, r8d
  0014e	48 8b 95 a8 02
	00 00		 mov	 rdx, QWORD PTR v$[rbp]
  00155	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  00159	e8 00 00 00 00	 call	 ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_NUMBER_HEADER@1234@_KPEAPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
  0015e	48 89 85 a8 00
	00 00		 mov	 QWORD PTR r$6[rbp], rax

; 2034 :             return (r);

  00165	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR r$6[rbp]
  0016c	48 89 85 48 02
	00 00		 mov	 QWORD PTR $T10[rbp], rax
  00173	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00177	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0017c	48 8b 85 48 02
	00 00		 mov	 rax, QWORD PTR $T10[rbp]
  00183	eb 0a		 jmp	 SHORT $LN6@PMC_DivRem
$LN5@PMC_DivRem:

; 2035 :         }
; 2036 :     }

  00185	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00189	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0018e	90		 npad	 1
$LN6@PMC_DivRem:
  0018f	48 8b f8	 mov	 rdi, rax
  00192	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z$rtcFrameData
  0019d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001a2	48 8b c7	 mov	 rax, rdi
  001a5	48 8d a5 88 02
	00 00		 lea	 rsp, QWORD PTR [rbp+648]
  001ac	5f		 pop	 rdi
  001ad	5d		 pop	 rbp
  001ae	c3		 ret	 0
$LN8@PMC_DivRem:
?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
nu$ = 8
root$ = 40
nq$ = 104
r$5 = 136
r$6 = 168
$T7 = 392
$T8 = 472
$T9 = 552
$T10 = 584
$T11 = 616
u$ = 672
v$ = 680
q$ = 688
?dtor$0@?0??PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nu$ = 8
root$ = 40
nq$ = 104
r$5 = 136
r$6 = 168
$T7 = 392
$T8 = 472
$T9 = 552
$T10 = 584
$T11 = 616
u$ = 672
v$ = 680
q$ = 688
?dtor$0@?0??PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YA_KPEAU__tag_PMC_HANDLE_UINT@1234@_KPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_L'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z
_TEXT	SEGMENT
nu$ = 8
root$ = 40
nq$ = 104
r$5 = 132
r$6 = 164
$T7 = 392
$T8 = 472
$T9 = 548
$T10 = 580
$T11 = 616
u$ = 672
v$ = 680
q$ = 688
?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I, COMDAT

; 1599 :     {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec a8 02
	00 00		 sub	 rsp, 680		; 000002a8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 aa 00 00 00	 mov	 ecx, 170		; 000000aaH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+712]
  00033	48 c7 85 68 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T11[rbp], -2
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00045	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1600 :         if (sizeof(__UNIT_TYPE) < sizeof(v))

  0004a	33 c0		 xor	 eax, eax
  0004c	85 c0		 test	 eax, eax
  0004e	74 2d		 je	 SHORT $LN2@PMC_DivRem

; 1601 :         {
; 1602 :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1603 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_X_I;1");

  00050	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EA@OFDDHPLA@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
  0005e	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00065	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00071	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00078	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_DivRem:

; 1604 :         }
; 1605 :         if (u == nullptr)

  0007d	48 83 bd a0 02
	00 00 00	 cmp	 QWORD PTR u$[rbp], 0
  00085	75 2d		 jne	 SHORT $LN3@PMC_DivRem

; 1606 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00087	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13ICFKHAEN@?$AAu@
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00095	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0009c	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a8	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  000af	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_DivRem:

; 1607 :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  000b4	48 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000bb	48 89 45 08	 mov	 QWORD PTR nu$[rbp], rax

; 1608 :         CheckNumber(nu);

  000bf	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  000c3	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 1609 :         ResourceHolderUINT root;

  000c8	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  000cc	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000d1	90		 npad	 1

; 1610 :         NUMBER_HEADER* nq;
; 1611 :         if (q != nullptr)

  000d2	48 83 bd b0 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  000da	74 69		 je	 SHORT $LN4@PMC_DivRem

; 1612 :         {
; 1613 :             _UINT32_T r = PMC_DivRem_X_I_Imp(nu, v, &nq);

  000dc	4c 8d 45 68	 lea	 r8, QWORD PTR nq$[rbp]
  000e0	8b 95 a8 02 00
	00		 mov	 edx, DWORD PTR v$[rbp]
  000e6	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  000ea	e8 00 00 00 00	 call	 ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
  000ef	89 85 84 00 00
	00		 mov	 DWORD PTR r$5[rbp], eax

; 1614 :             root.HookNumber(nq);

  000f5	48 8b 55 68	 mov	 rdx, QWORD PTR nq$[rbp]
  000f9	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  000fd	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 1615 : #ifdef _DEBUG
; 1616 :             CheckNumber(nq);

  00102	48 8b 4d 68	 mov	 rcx, QWORD PTR nq$[rbp]
  00106	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 1617 : #endif
; 1618 :             *q = (PMC_HANDLE_UINT)nq;

  0010b	48 8b 85 b0 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00112	48 8b 4d 68	 mov	 rcx, QWORD PTR nq$[rbp]
  00116	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1619 :             root.UnlinkNumber(nq);

  00119	48 8b 55 68	 mov	 rdx, QWORD PTR nq$[rbp]
  0011d	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00121	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1620 :             return (r);

  00126	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR r$5[rbp]
  0012c	89 85 24 02 00
	00		 mov	 DWORD PTR $T9[rbp], eax
  00132	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00136	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0013b	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR $T9[rbp]
  00141	eb 41		 jmp	 SHORT $LN6@PMC_DivRem

; 1621 :         }
; 1622 :         else

  00143	eb 35		 jmp	 SHORT $LN5@PMC_DivRem
$LN4@PMC_DivRem:

; 1623 :         {
; 1624 :             _UINT32_T r = PMC_DivRem_X_I_Imp(nu, v, nullptr);

  00145	45 33 c0	 xor	 r8d, r8d
  00148	8b 95 a8 02 00
	00		 mov	 edx, DWORD PTR v$[rbp]
  0014e	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  00152	e8 00 00 00 00	 call	 ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPEAU__tag_NUMBER_HEADER@1234@IPEAPEAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
  00157	89 85 a4 00 00
	00		 mov	 DWORD PTR r$6[rbp], eax

; 1625 :             return (r);

  0015d	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR r$6[rbp]
  00163	89 85 44 02 00
	00		 mov	 DWORD PTR $T10[rbp], eax
  00169	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0016d	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00172	8b 85 44 02 00
	00		 mov	 eax, DWORD PTR $T10[rbp]
  00178	eb 0a		 jmp	 SHORT $LN6@PMC_DivRem
$LN5@PMC_DivRem:

; 1626 :         }
; 1627 :     }

  0017a	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0017e	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00183	90		 npad	 1
$LN6@PMC_DivRem:
  00184	48 8b f8	 mov	 rdi, rax
  00187	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z$rtcFrameData
  00192	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00197	48 8b c7	 mov	 rax, rdi
  0019a	48 8d a5 88 02
	00 00		 lea	 rsp, QWORD PTR [rbp+648]
  001a1	5f		 pop	 rdi
  001a2	5d		 pop	 rbp
  001a3	c3		 ret	 0
$LN8@PMC_DivRem:
?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
nu$ = 8
root$ = 40
nq$ = 104
r$5 = 132
r$6 = 164
$T7 = 392
$T8 = 472
$T9 = 548
$T10 = 580
$T11 = 616
u$ = 672
v$ = 680
q$ = 688
?dtor$0@?0??PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_I'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_I'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nu$ = 8
root$ = 40
nq$ = 104
r$5 = 132
r$6 = 164
$T7 = 392
$T8 = 472
$T9 = 548
$T10 = 580
$T11 = 616
u$ = 672
v$ = 680
q$ = 688
?dtor$0@?0??PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_I'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YAIPEAU__tag_PMC_HANDLE_UINT@1234@IPEAPEAU51234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_DivRem_X_I'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z
_TEXT	SEGMENT
nv$ = 8
u_hi$17 = 36
u_lo$18 = 68
u_bit_count$19 = 104
v_bit_count$20 = 136
temp_r$21 = 168
temp_q$22 = 200
u_bit_count$23 = 232
v_bit_count$24 = 264
u_buf$25 = 296
q_buf$26 = 344
r_buf$27 = 392
u_buf$28 = 424
r_buf$29 = 472
u_buf$30 = 504
q_buf$31 = 552
r_buf$32 = 600
work_v_buf$33 = 648
u_buf$34 = 696
r_buf$35 = 744
work_v_buf$36 = 792
u_bit_count$37 = 840
v_bit_count$38 = 872
temp_r$39 = 904
temp_q$40 = 936
$T41 = 1544
$T42 = 1624
$T43 = 1704
tv255 = 1768
tv228 = 1768
__$ArrayPad$ = 1776
u$ = 1824
v$ = 1832
q$ = 1840
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X, COMDAT

; 1630 :     {

$LN37:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 48 07
	00 00		 sub	 rsp, 1864		; 00000748H
  00018	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 d2 01 00 00	 mov	 ecx, 466		; 000001d2H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 68
	07 00 00	 mov	 rcx, QWORD PTR [rsp+1896]
  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003b	48 33 c5	 xor	 rax, rbp
  0003e	48 89 85 f0 06
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  0004c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1631 :         if (sizeof(__UNIT_TYPE) * 2 < sizeof(u))

  00051	33 c0		 xor	 eax, eax
  00053	85 c0		 test	 eax, eax
  00055	74 2d		 je	 SHORT $LN2@PMC_DivRem

; 1632 :         {
; 1633 :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1634 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_L_X;1");

  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EA@FKDMJIIG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
  00065	48 8d 8d 08 06
	00 00		 lea	 rcx, QWORD PTR $T41[rbp]
  0006c	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00078	48 8d 8d 08 06
	00 00		 lea	 rcx, QWORD PTR $T41[rbp]
  0007f	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_DivRem:

; 1635 :         }
; 1636 :         if (v == nullptr)

  00084	48 83 bd 28 07
	00 00 00	 cmp	 QWORD PTR v$[rbp], 0
  0008c	75 2d		 jne	 SHORT $LN3@PMC_DivRem

; 1637 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0008e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13JAOPNPKD@?$AAv@
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  0009c	48 8d 8d 58 06
	00 00		 lea	 rcx, QWORD PTR $T42[rbp]
  000a3	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000af	48 8d 8d 58 06
	00 00		 lea	 rcx, QWORD PTR $T42[rbp]
  000b6	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_DivRem:

; 1638 :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  000bb	48 8b 85 28 07
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  000c2	48 89 45 08	 mov	 QWORD PTR nv$[rbp], rax

; 1639 :         CheckNumber(nv);

  000c6	48 8b 4d 08	 mov	 rcx, QWORD PTR nv$[rbp]
  000ca	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 1640 :         if (nv->IS_ZERO)

  000cf	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  000d3	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000d6	83 e0 01	 and	 eax, 1
  000d9	85 c0		 test	 eax, eax
  000db	74 26		 je	 SHORT $LN4@PMC_DivRem

; 1641 :         {
; 1642 :             // v が 0 である場合
; 1643 : 
; 1644 :             // 0 による除算はエラーで返す
; 1645 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  000e4	48 8d 8d a8 06
	00 00		 lea	 rcx, QWORD PTR $T43[rbp]
  000eb	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  000f7	48 8d 8d a8 06
	00 00		 lea	 rcx, QWORD PTR $T43[rbp]
  000fe	e8 00 00 00 00	 call	 _CxxThrowException
$LN4@PMC_DivRem:

; 1646 :         }
; 1647 :         if (u == 0)

  00103	48 83 bd 20 07
	00 00 00	 cmp	 QWORD PTR u$[rbp], 0
  0010b	75 24		 jne	 SHORT $LN5@PMC_DivRem

; 1648 :         {
; 1649 :             // x が 0 である場合
; 1650 : 
; 1651 :             // q = 0, r = 0 を返す
; 1652 :             if (q != nullptr)

  0010d	48 83 bd 30 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00115	74 0e		 je	 SHORT $LN7@PMC_DivRem

; 1653 :                 *q = 0;

  00117	48 8b 85 30 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0011e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN7@PMC_DivRem:

; 1654 :             return (0);

  00125	33 c0		 xor	 eax, eax
  00127	e9 62 05 00 00	 jmp	 $LN1@PMC_DivRem

; 1655 :         }
; 1656 :         else

  0012c	e9 5d 05 00 00	 jmp	 $LN6@PMC_DivRem
$LN5@PMC_DivRem:

; 1657 :         {
; 1658 :             // u が 0 ではない場合
; 1659 : 
; 1660 :             if (nv->IS_ONE)

  00131	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  00135	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00138	d1 e8		 shr	 eax, 1
  0013a	83 e0 01	 and	 eax, 1
  0013d	85 c0		 test	 eax, eax
  0013f	74 27		 je	 SHORT $LN8@PMC_DivRem

; 1661 :             {
; 1662 :                 // v が 1 である場合
; 1663 : 
; 1664 :                 // q = u, r = 0 を返す
; 1665 :                 if (q != nullptr)

  00141	48 83 bd 30 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00149	74 11		 je	 SHORT $LN10@PMC_DivRem

; 1666 :                     *q = u;

  0014b	48 8b 85 30 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00152	48 8b 8d 20 07
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  00159	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN10@PMC_DivRem:

; 1667 :                 return (0);

  0015c	33 c0		 xor	 eax, eax
  0015e	e9 2b 05 00 00	 jmp	 $LN1@PMC_DivRem

; 1668 :             }
; 1669 :             else

  00163	e9 26 05 00 00	 jmp	 $LN9@PMC_DivRem
$LN8@PMC_DivRem:

; 1670 :             {
; 1671 :                 // u > 0 かつ v > 1 である場合
; 1672 : 
; 1673 :                 // u と v の商・剰余を計算する
; 1674 :                 if (sizeof(__UNIT_TYPE) < sizeof(u))

  00168	33 c0		 xor	 eax, eax
  0016a	85 c0		 test	 eax, eax
  0016c	0f 84 54 04 00
	00		 je	 $LN11@PMC_DivRem

; 1675 :                 {
; 1676 :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 1677 :                     _UINT32_T u_hi;
; 1678 :                     _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);

  00172	48 8d 55 24	 lea	 rdx, QWORD PTR u_hi$17[rbp]
  00176	48 8b 8d 20 07
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  0017d	e8 00 00 00 00	 call	 _FROMDWORDTOWORD
  00182	89 45 44	 mov	 DWORD PTR u_lo$18[rbp], eax

; 1679 :                     if (u_hi == 0)

  00185	83 7d 24 00	 cmp	 DWORD PTR u_hi$17[rbp], 0
  00189	0f 85 c2 00 00
	00		 jne	 $LN13@PMC_DivRem

; 1680 :                     {
; 1681 :                         // u の値が 32bit で表現可能な場合
; 1682 :                         __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

  0018f	8b 4d 44	 mov	 ecx, DWORD PTR u_lo$18[rbp]
  00192	e8 00 00 00 00	 call	 _LZCNT_ALT_32
  00197	48 98		 cdqe
  00199	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0019e	48 2b c8	 sub	 rcx, rax
  001a1	48 8b c1	 mov	 rax, rcx
  001a4	48 89 45 68	 mov	 QWORD PTR u_bit_count$19[rbp], rax

; 1683 :                         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  001a8	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  001ac	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001b0	48 89 85 88 00
	00 00		 mov	 QWORD PTR v_bit_count$20[rbp], rax

; 1684 :                         if (u_bit_count < v_bit_count)

  001b7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR v_bit_count$20[rbp]
  001be	48 39 45 68	 cmp	 QWORD PTR u_bit_count$19[rbp], rax
  001c2	73 22		 jae	 SHORT $LN15@PMC_DivRem

; 1685 :                         {
; 1686 :                             // 明らかに u < v である場合
; 1687 : 
; 1688 :                             // q = 0, r = u を返す。
; 1689 :                             if (q != nullptr)

  001c4	48 83 bd 30 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  001cc	74 0e		 je	 SHORT $LN17@PMC_DivRem

; 1690 :                                 *q = 0;

  001ce	48 8b 85 30 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001d5	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN17@PMC_DivRem:

; 1691 :                             return (u_lo);

  001dc	8b 45 44	 mov	 eax, DWORD PTR u_lo$18[rbp]
  001df	e9 aa 04 00 00	 jmp	 $LN1@PMC_DivRem

; 1692 :                         }
; 1693 :                         else

  001e4	eb 66		 jmp	 SHORT $LN16@PMC_DivRem
$LN15@PMC_DivRem:

; 1694 :                         {
; 1695 :                             // u のビット数が v のビット数以上である場合
; 1696 : 
; 1697 :                             // u は 32bit で表現できるので、v も 32bit で表現できる。
; 1698 :                             __UNIT_TYPE temp_r;
; 1699 :                             __UNIT_TYPE temp_q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);

  001e6	b8 08 00 00 00	 mov	 eax, 8
  001eb	48 6b c0 00	 imul	 rax, rax, 0
  001ef	48 8b 4d 08	 mov	 rcx, QWORD PTR nv$[rbp]
  001f3	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  001f7	8b 55 44	 mov	 edx, DWORD PTR u_lo$18[rbp]
  001fa	4c 8d 8d a8 00
	00 00		 lea	 r9, QWORD PTR temp_r$21[rbp]
  00201	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  00205	33 c9		 xor	 ecx, ecx
  00207	e8 00 00 00 00	 call	 _DIVREM_UNIT
  0020c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp_q$22[rbp], rax

; 1700 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1701 :                             if (sizeof(u_lo) == sizeof(_UINT64_T))

  00213	33 c0		 xor	 eax, eax
  00215	85 c0		 test	 eax, eax
  00217	74 07		 je	 SHORT $LN18@PMC_DivRem

; 1702 :                                 IncrementDIV64Counter();

  00219	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 1703 :                             else

  0021e	eb 05		 jmp	 SHORT $LN19@PMC_DivRem
$LN18@PMC_DivRem:

; 1704 :                                 IncrementDIV32Counter();

  00220	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN19@PMC_DivRem:

; 1705 : #endif
; 1706 :                             if (q != nullptr)

  00225	48 83 bd 30 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  0022d	74 11		 je	 SHORT $LN20@PMC_DivRem

; 1707 :                                 *q = temp_q;

  0022f	48 8b 85 30 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00236	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR temp_q$22[rbp]
  0023d	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN20@PMC_DivRem:

; 1708 :                             return (temp_r);

  00240	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR temp_r$21[rbp]
  00247	e9 42 04 00 00	 jmp	 $LN1@PMC_DivRem
$LN16@PMC_DivRem:

; 1709 :                         }
; 1710 :                     }
; 1711 :                     else

  0024c	e9 70 03 00 00	 jmp	 $LN14@PMC_DivRem
$LN13@PMC_DivRem:

; 1712 :                     {
; 1713 :                         // v の値が 32bit では表現できない場合
; 1714 :                         __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

  00251	8b 4d 24	 mov	 ecx, DWORD PTR u_hi$17[rbp]
  00254	e8 00 00 00 00	 call	 _LZCNT_ALT_32
  00259	48 98		 cdqe
  0025b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00260	48 2b c8	 sub	 rcx, rax
  00263	48 8b c1	 mov	 rax, rcx
  00266	48 89 85 e8 00
	00 00		 mov	 QWORD PTR u_bit_count$23[rbp], rax

; 1715 :                         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  0026d	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  00271	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00275	48 89 85 08 01
	00 00		 mov	 QWORD PTR v_bit_count$24[rbp], rax

; 1716 :                         if (u_bit_count < v_bit_count)

  0027c	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR v_bit_count$24[rbp]
  00283	48 39 85 e8 00
	00 00		 cmp	 QWORD PTR u_bit_count$23[rbp], rax
  0028a	73 29		 jae	 SHORT $LN21@PMC_DivRem

; 1717 :                         {
; 1718 :                             // 明らかに u < v である場合
; 1719 : 
; 1720 :                             // q = 0, r = u を返す。
; 1721 :                             if (q != nullptr)

  0028c	48 83 bd 30 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00294	74 0e		 je	 SHORT $LN23@PMC_DivRem

; 1722 :                                 *q = 0;

  00296	48 8b 85 30 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0029d	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN23@PMC_DivRem:

; 1723 :                             return (u);

  002a4	48 8b 85 20 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  002ab	e9 de 03 00 00	 jmp	 $LN1@PMC_DivRem

; 1724 :                         }
; 1725 :                         else

  002b0	e9 0c 03 00 00	 jmp	 $LN22@PMC_DivRem
$LN21@PMC_DivRem:

; 1726 :                         {
; 1727 :                             // u のビット長が 33 以上 64 以下であり、かつ、u のビット長が v のビット長以上(v のビット長は多くとも64以下)である場合
; 1728 : 
; 1729 :                             if (nv->UNIT_BIT_COUNT <= sizeof(__UNIT_TYPE) * 8)

  002b5	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  002b9	48 83 78 20 40	 cmp	 QWORD PTR [rax+32], 64	; 00000040H
  002be	0f 87 0b 01 00
	00		 ja	 $LN24@PMC_DivRem

; 1730 :                             {
; 1731 :                                 // v が 32bit で表現できる場合
; 1732 : 
; 1733 :                                 if (q != nullptr)

  002c4	48 83 bd 30 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  002cc	0f 84 ab 00 00
	00		 je	 $LN26@PMC_DivRem

; 1734 :                                 {
; 1735 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };

  002d2	8b 45 44	 mov	 eax, DWORD PTR u_lo$18[rbp]
  002d5	48 89 85 28 01
	00 00		 mov	 QWORD PTR u_buf$25[rbp], rax
  002dc	8b 45 24	 mov	 eax, DWORD PTR u_hi$17[rbp]
  002df	48 89 85 30 01
	00 00		 mov	 QWORD PTR u_buf$25[rbp+8], rax

; 1736 :                                     __UNIT_TYPE q_buf[] = { 0, 0, 0 };

  002e6	48 c7 85 58 01
	00 00 00 00 00
	00		 mov	 QWORD PTR q_buf$26[rbp], 0
  002f1	48 c7 85 60 01
	00 00 00 00 00
	00		 mov	 QWORD PTR q_buf$26[rbp+8], 0
  002fc	48 c7 85 68 01
	00 00 00 00 00
	00		 mov	 QWORD PTR q_buf$26[rbp+16], 0

; 1737 :                                     __UNIT_TYPE r_buf;
; 1738 : 
; 1739 :                                     DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE)nv->BLOCK[0], q_buf, &r_buf);

  00307	b8 08 00 00 00	 mov	 eax, 8
  0030c	48 6b c0 00	 imul	 rax, rax, 0
  00310	48 8b 4d 08	 mov	 rcx, QWORD PTR nv$[rbp]
  00314	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00318	48 8d 95 88 01
	00 00		 lea	 rdx, QWORD PTR r_buf$27[rbp]
  0031f	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00324	4c 8d 8d 58 01
	00 00		 lea	 r9, QWORD PTR q_buf$26[rbp]
  0032b	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  0032f	ba 02 00 00 00	 mov	 edx, 2
  00334	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR u_buf$25[rbp]
  0033b	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W

; 1740 : 
; 1741 :                                     *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

  00340	b8 08 00 00 00	 mov	 eax, 8
  00345	48 6b c0 00	 imul	 rax, rax, 0
  00349	b9 08 00 00 00	 mov	 ecx, 8
  0034e	48 6b c9 01	 imul	 rcx, rcx, 1
  00352	8b 94 05 58 01
	00 00		 mov	 edx, DWORD PTR q_buf$26[rbp+rax]
  00359	8b 8c 0d 58 01
	00 00		 mov	 ecx, DWORD PTR q_buf$26[rbp+rcx]
  00360	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  00365	48 8b 8d 30 07
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  0036c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1742 :                                     return (r_buf);

  0036f	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR r_buf$27[rbp]
  00376	e9 13 03 00 00	 jmp	 $LN1@PMC_DivRem

; 1743 :                                 }
; 1744 :                                 else

  0037b	eb 4d		 jmp	 SHORT $LN27@PMC_DivRem
$LN26@PMC_DivRem:

; 1745 :                                 {
; 1746 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };

  0037d	8b 45 44	 mov	 eax, DWORD PTR u_lo$18[rbp]
  00380	48 89 85 a8 01
	00 00		 mov	 QWORD PTR u_buf$28[rbp], rax
  00387	8b 45 24	 mov	 eax, DWORD PTR u_hi$17[rbp]
  0038a	48 89 85 b0 01
	00 00		 mov	 QWORD PTR u_buf$28[rbp+8], rax

; 1747 :                                     __UNIT_TYPE r_buf = Rem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE)nv->BLOCK[0]);

  00391	b8 08 00 00 00	 mov	 eax, 8
  00396	48 6b c0 00	 imul	 rax, rax, 0
  0039a	48 8b 4d 08	 mov	 rcx, QWORD PTR nv$[rbp]
  0039e	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  003a2	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  003a6	ba 02 00 00 00	 mov	 edx, 2
  003ab	48 8d 8d a8 01
	00 00		 lea	 rcx, QWORD PTR u_buf$28[rbp]
  003b2	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  003b7	48 89 85 d8 01
	00 00		 mov	 QWORD PTR r_buf$29[rbp], rax

; 1748 :                                     return (r_buf);

  003be	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR r_buf$29[rbp]
  003c5	e9 c4 02 00 00	 jmp	 $LN1@PMC_DivRem
$LN27@PMC_DivRem:

; 1749 :                                 }
; 1750 :                             }
; 1751 :                             else

  003ca	e9 f2 01 00 00	 jmp	 $LN25@PMC_DivRem
$LN24@PMC_DivRem:

; 1752 :                             {
; 1753 :                                 // v が 32bit では表現できない場合
; 1754 : 
; 1755 :                                 // この場合、2 ワード / 2 ワード の除算となるため、_DIVREM_UNIT 単発では計算できない。
; 1756 :                                 if (q != nullptr)

  003cf	48 83 bd 30 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  003d7	0f 84 1e 01 00
	00		 je	 $LN28@PMC_DivRem

; 1757 :                                 {
; 1758 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };

  003dd	8b 45 44	 mov	 eax, DWORD PTR u_lo$18[rbp]
  003e0	48 89 85 f8 01
	00 00		 mov	 QWORD PTR u_buf$30[rbp], rax
  003e7	8b 45 24	 mov	 eax, DWORD PTR u_hi$17[rbp]
  003ea	48 89 85 00 02
	00 00		 mov	 QWORD PTR u_buf$30[rbp+8], rax

; 1759 :                                     __UNIT_TYPE q_buf[] = { 0, 0, 0 };// 演算結果を格納するためには u のビット数 - v のビット数 + 1 ビットだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  003f1	48 c7 85 28 02
	00 00 00 00 00
	00		 mov	 QWORD PTR q_buf$31[rbp], 0
  003fc	48 c7 85 30 02
	00 00 00 00 00
	00		 mov	 QWORD PTR q_buf$31[rbp+8], 0
  00407	48 c7 85 38 02
	00 00 00 00 00
	00		 mov	 QWORD PTR q_buf$31[rbp+16], 0

; 1760 :                                     __UNIT_TYPE r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00412	48 c7 85 58 02
	00 00 00 00 00
	00		 mov	 QWORD PTR r_buf$32[rbp], 0
  0041d	48 c7 85 60 02
	00 00 00 00 00
	00		 mov	 QWORD PTR r_buf$32[rbp+8], 0
  00428	48 c7 85 68 02
	00 00 00 00 00
	00		 mov	 QWORD PTR r_buf$32[rbp+16], 0

; 1761 :                                     __UNIT_TYPE work_v_buf[] = { 0, 0 };

  00433	48 c7 85 88 02
	00 00 00 00 00
	00		 mov	 QWORD PTR work_v_buf$33[rbp], 0
  0043e	48 c7 85 90 02
	00 00 00 00 00
	00		 mov	 QWORD PTR work_v_buf$33[rbp+8], 0

; 1762 :                                     (*fp_DivRem_X_X)(u_buf, countof(u_buf), nv->BLOCK, nv->UNIT_WORD_COUNT, work_v_buf, q_buf, r_buf);

  00449	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K01000@ZEA
  00450	48 89 85 e8 06
	00 00		 mov	 QWORD PTR tv228[rbp], rax
  00457	48 8d 85 58 02
	00 00		 lea	 rax, QWORD PTR r_buf$32[rbp]
  0045e	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00463	48 8d 85 28 02
	00 00		 lea	 rax, QWORD PTR q_buf$31[rbp]
  0046a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0046f	48 8d 85 88 02
	00 00		 lea	 rax, QWORD PTR work_v_buf$33[rbp]
  00476	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0047b	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  0047f	4c 8b 48 18	 mov	 r9, QWORD PTR [rax+24]
  00483	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  00487	4c 8b 40 40	 mov	 r8, QWORD PTR [rax+64]
  0048b	ba 02 00 00 00	 mov	 edx, 2
  00490	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR u_buf$30[rbp]
  00497	ff 95 e8 06 00
	00		 call	 QWORD PTR tv228[rbp]

; 1763 :                                     *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

  0049d	b8 08 00 00 00	 mov	 eax, 8
  004a2	48 6b c0 00	 imul	 rax, rax, 0
  004a6	b9 08 00 00 00	 mov	 ecx, 8
  004ab	48 6b c9 01	 imul	 rcx, rcx, 1
  004af	8b 94 05 28 02
	00 00		 mov	 edx, DWORD PTR q_buf$31[rbp+rax]
  004b6	8b 8c 0d 28 02
	00 00		 mov	 ecx, DWORD PTR q_buf$31[rbp+rcx]
  004bd	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  004c2	48 8b 8d 30 07
	00 00		 mov	 rcx, QWORD PTR q$[rbp]
  004c9	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1764 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));

  004cc	b8 08 00 00 00	 mov	 eax, 8
  004d1	48 6b c0 00	 imul	 rax, rax, 0
  004d5	b9 08 00 00 00	 mov	 ecx, 8
  004da	48 6b c9 01	 imul	 rcx, rcx, 1
  004de	8b 94 05 58 02
	00 00		 mov	 edx, DWORD PTR r_buf$32[rbp+rax]
  004e5	8b 8c 0d 58 02
	00 00		 mov	 ecx, DWORD PTR r_buf$32[rbp+rcx]
  004ec	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  004f1	e9 98 01 00 00	 jmp	 $LN1@PMC_DivRem

; 1765 :                                 }
; 1766 :                                 else

  004f6	e9 c6 00 00 00	 jmp	 $LN29@PMC_DivRem
$LN28@PMC_DivRem:

; 1767 :                                 {
; 1768 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };

  004fb	8b 45 44	 mov	 eax, DWORD PTR u_lo$18[rbp]
  004fe	48 89 85 b8 02
	00 00		 mov	 QWORD PTR u_buf$34[rbp], rax
  00505	8b 45 24	 mov	 eax, DWORD PTR u_hi$17[rbp]
  00508	48 89 85 c0 02
	00 00		 mov	 QWORD PTR u_buf$34[rbp+8], rax

; 1769 :                                     __UNIT_TYPE r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  0050f	48 c7 85 e8 02
	00 00 00 00 00
	00		 mov	 QWORD PTR r_buf$35[rbp], 0
  0051a	48 c7 85 f0 02
	00 00 00 00 00
	00		 mov	 QWORD PTR r_buf$35[rbp+8], 0
  00525	48 c7 85 f8 02
	00 00 00 00 00
	00		 mov	 QWORD PTR r_buf$35[rbp+16], 0

; 1770 :                                     __UNIT_TYPE work_v_buf[] = { 0, 0 };

  00530	48 c7 85 18 03
	00 00 00 00 00
	00		 mov	 QWORD PTR work_v_buf$36[rbp], 0
  0053b	48 c7 85 20 03
	00 00 00 00 00
	00		 mov	 QWORD PTR work_v_buf$36[rbp+8], 0

; 1771 :                                     (*fp_DivRem_X_X)(u_buf, countof(u_buf), nv->BLOCK, nv->UNIT_WORD_COUNT, work_v_buf, nullptr, r_buf);

  00546	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K01000@ZEA
  0054d	48 89 85 e8 06
	00 00		 mov	 QWORD PTR tv255[rbp], rax
  00554	48 8d 85 e8 02
	00 00		 lea	 rax, QWORD PTR r_buf$35[rbp]
  0055b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00560	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00569	48 8d 85 18 03
	00 00		 lea	 rax, QWORD PTR work_v_buf$36[rbp]
  00570	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00575	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  00579	4c 8b 48 18	 mov	 r9, QWORD PTR [rax+24]
  0057d	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  00581	4c 8b 40 40	 mov	 r8, QWORD PTR [rax+64]
  00585	ba 02 00 00 00	 mov	 edx, 2
  0058a	48 8d 8d b8 02
	00 00		 lea	 rcx, QWORD PTR u_buf$34[rbp]
  00591	ff 95 e8 06 00
	00		 call	 QWORD PTR tv255[rbp]

; 1772 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));

  00597	b8 08 00 00 00	 mov	 eax, 8
  0059c	48 6b c0 00	 imul	 rax, rax, 0
  005a0	b9 08 00 00 00	 mov	 ecx, 8
  005a5	48 6b c9 01	 imul	 rcx, rcx, 1
  005a9	8b 94 05 e8 02
	00 00		 mov	 edx, DWORD PTR r_buf$35[rbp+rax]
  005b0	8b 8c 0d e8 02
	00 00		 mov	 ecx, DWORD PTR r_buf$35[rbp+rcx]
  005b7	e8 00 00 00 00	 call	 _FROMWORDTODWORD
  005bc	e9 cd 00 00 00	 jmp	 $LN1@PMC_DivRem
$LN29@PMC_DivRem:
$LN25@PMC_DivRem:
$LN22@PMC_DivRem:
$LN14@PMC_DivRem:

; 1773 :                                 }
; 1774 :                             }
; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :                 else

  005c1	e9 c8 00 00 00	 jmp	 $LN12@PMC_DivRem
$LN11@PMC_DivRem:

; 1779 :                 {
; 1780 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1781 : 
; 1782 :                     // x と y の商・剰余を計算する
; 1783 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);

  005c6	48 8b 8d 20 07
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  005cd	e8 00 00 00 00	 call	 _LZCNT_ALT_UNIT
  005d2	48 98		 cdqe
  005d4	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  005d9	48 2b c8	 sub	 rcx, rax
  005dc	48 8b c1	 mov	 rax, rcx
  005df	48 89 85 48 03
	00 00		 mov	 QWORD PTR u_bit_count$37[rbp], rax

; 1784 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  005e6	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  005ea	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  005ee	48 89 85 68 03
	00 00		 mov	 QWORD PTR v_bit_count$38[rbp], rax

; 1785 :                     if (u_bit_count < v_bit_count)

  005f5	48 8b 85 68 03
	00 00		 mov	 rax, QWORD PTR v_bit_count$38[rbp]
  005fc	48 39 85 48 03
	00 00		 cmp	 QWORD PTR u_bit_count$37[rbp], rax
  00603	73 23		 jae	 SHORT $LN30@PMC_DivRem

; 1786 :                     {
; 1787 :                         // 明らかに u < v である場合
; 1788 : 
; 1789 :                         // q = 0, r = u を返す。
; 1790 :                         if (q != nullptr)

  00605	48 83 bd 30 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  0060d	74 0e		 je	 SHORT $LN32@PMC_DivRem

; 1791 :                             *q = 0;

  0060f	48 8b 85 30 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00616	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN32@PMC_DivRem:

; 1792 :                         return (u);

  0061d	48 8b 85 20 07
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00624	eb 68		 jmp	 SHORT $LN1@PMC_DivRem

; 1793 :                     }
; 1794 :                     else

  00626	eb 66		 jmp	 SHORT $LN31@PMC_DivRem
$LN30@PMC_DivRem:

; 1795 :                     {
; 1796 :                         // u のビット数が v のビット数以上である場合
; 1797 : 
; 1798 :                         // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1799 :                         __UNIT_TYPE temp_r;
; 1800 :                         __UNIT_TYPE temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE)u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);

  00628	b8 08 00 00 00	 mov	 eax, 8
  0062d	48 6b c0 00	 imul	 rax, rax, 0
  00631	48 8b 4d 08	 mov	 rcx, QWORD PTR nv$[rbp]
  00635	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00639	4c 8d 8d 88 03
	00 00		 lea	 r9, QWORD PTR temp_r$39[rbp]
  00640	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  00644	48 8b 95 20 07
	00 00		 mov	 rdx, QWORD PTR u$[rbp]
  0064b	33 c9		 xor	 ecx, ecx
  0064d	e8 00 00 00 00	 call	 _DIVREM_UNIT
  00652	48 89 85 a8 03
	00 00		 mov	 QWORD PTR temp_q$40[rbp], rax

; 1801 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1802 :                         if (sizeof(temp_r) == sizeof(_UINT64_T))

  00659	33 c0		 xor	 eax, eax
  0065b	83 f8 01	 cmp	 eax, 1
  0065e	74 07		 je	 SHORT $LN33@PMC_DivRem

; 1803 :                             IncrementDIV64Counter();

  00660	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 1804 :                         else

  00665	eb 05		 jmp	 SHORT $LN34@PMC_DivRem
$LN33@PMC_DivRem:

; 1805 :                             IncrementDIV32Counter();

  00667	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN34@PMC_DivRem:

; 1806 : #endif
; 1807 :                         if (q != nullptr)

  0066c	48 83 bd 30 07
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00674	74 11		 je	 SHORT $LN35@PMC_DivRem

; 1808 :                             *q = temp_q;

  00676	48 8b 85 30 07
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0067d	48 8b 8d a8 03
	00 00		 mov	 rcx, QWORD PTR temp_q$40[rbp]
  00684	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN35@PMC_DivRem:

; 1809 :                         return (temp_r);

  00687	48 8b 85 88 03
	00 00		 mov	 rax, QWORD PTR temp_r$39[rbp]
$LN31@PMC_DivRem:
$LN12@PMC_DivRem:
$LN9@PMC_DivRem:
$LN6@PMC_DivRem:
$LN1@PMC_DivRem:
$LN36@PMC_DivRem:

; 1810 :                     }
; 1811 :                 }
; 1812 : 
; 1813 :             }
; 1814 :         }
; 1815 :     }

  0068e	48 8b f8	 mov	 rdi, rax
  00691	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  00695	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z$rtcFrameData
  0069c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006a1	48 8b c7	 mov	 rax, rdi
  006a4	48 8b 8d f0 06
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  006ab	48 33 cd	 xor	 rcx, rbp
  006ae	e8 00 00 00 00	 call	 __security_check_cookie
  006b3	48 8d a5 08 07
	00 00		 lea	 rsp, QWORD PTR [rbp+1800]
  006ba	5f		 pop	 rdi
  006bb	5d		 pop	 rbp
  006bc	c3		 ret	 0
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YA_K_KPEAU__tag_PMC_HANDLE_UINT@1234@PEA_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
_TEXT	SEGMENT
nv$ = 8
u_bit_count$4 = 40
v_bit_count$5 = 72
temp_r$6 = 104
temp_q$7 = 136
$T8 = 360
$T9 = 440
$T10 = 520
u$ = 624
v$ = 632
q$ = 640
?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X, COMDAT

; 1444 :     {

$LN18:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 9e 00 00 00	 mov	 ecx, 158		; 0000009eH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	8b 8c 24 98 02
	00 00		 mov	 ecx, DWORD PTR [rsp+664]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00039	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1445 :         if (sizeof(__UNIT_TYPE) < sizeof(u))

  0003e	33 c0		 xor	 eax, eax
  00040	85 c0		 test	 eax, eax
  00042	74 2d		 je	 SHORT $LN2@PMC_DivRem

; 1446 :         {
; 1447 :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1448 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_I_X;1");

  00044	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EA@MCJPOPJG@?$AAp?$AAm?$AAc?$AA_?$AAd?$AAi?$AAv?$AAr?$AAe?$AAm?$AA?4?$AAc?$AAp?$AAp?$AA?$DL@
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
  00052	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00059	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00065	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0006c	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_DivRem:

; 1449 :         }
; 1450 :         if (v == nullptr)

  00071	48 83 bd 78 02
	00 00 00	 cmp	 QWORD PTR v$[rbp], 0
  00079	75 2d		 jne	 SHORT $LN3@PMC_DivRem

; 1451 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0007b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13JAOPNPKD@?$AAv@
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00089	48 8d 8d b8 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00090	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0009c	48 8d 8d b8 01
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  000a3	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_DivRem:

; 1452 :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  000a8	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR v$[rbp]
  000af	48 89 45 08	 mov	 QWORD PTR nv$[rbp], rax

; 1453 :         CheckNumber(nv);

  000b3	48 8b 4d 08	 mov	 rcx, QWORD PTR nv$[rbp]
  000b7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 1454 :         if (nv->IS_ZERO)

  000bc	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  000c0	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000c3	83 e0 01	 and	 eax, 1
  000c6	85 c0		 test	 eax, eax
  000c8	74 26		 je	 SHORT $LN4@PMC_DivRem

; 1455 :         {
; 1456 :             // v が 0 である場合
; 1457 : 
; 1458 :             // 0 による除算はエラーで返す
; 1459 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BGDHBHIM@?$AA0?$AAk?$PP?$II?$PP?$IL?$AAd?$PP?$JH?$AAL?$AAL?$PP?$IP?$PP?$IM?$PP?$II?$AAF?$AAh?$AAW?$AA?$HO@
  000d1	48 8d 8d 08 02
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  000d8	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  000e4	48 8d 8d 08 02
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  000eb	e8 00 00 00 00	 call	 _CxxThrowException
$LN4@PMC_DivRem:

; 1460 :         }
; 1461 :         if (u == 0)

  000f0	83 bd 70 02 00
	00 00		 cmp	 DWORD PTR u$[rbp], 0
  000f7	75 23		 jne	 SHORT $LN5@PMC_DivRem

; 1462 :         {
; 1463 :             // u が 0 である場合
; 1464 : 
; 1465 :             // q = 0, r = 0 を返す
; 1466 :             if (q != nullptr)

  000f9	48 83 bd 80 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00101	74 0d		 je	 SHORT $LN7@PMC_DivRem

; 1467 :                 *q = 0;

  00103	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0010a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN7@PMC_DivRem:

; 1468 :             return (0);

  00110	33 c0		 xor	 eax, eax
  00112	e9 e8 00 00 00	 jmp	 $LN1@PMC_DivRem

; 1469 :         }
; 1470 :         else

  00117	e9 e3 00 00 00	 jmp	 $LN6@PMC_DivRem
$LN5@PMC_DivRem:

; 1471 :         {
; 1472 :             // u が 0 ではない場合
; 1473 : 
; 1474 :             if (nv->IS_ONE)

  0011c	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  00120	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00123	d1 e8		 shr	 eax, 1
  00125	83 e0 01	 and	 eax, 1
  00128	85 c0		 test	 eax, eax
  0012a	74 25		 je	 SHORT $LN8@PMC_DivRem

; 1475 :             {
; 1476 :                 // v が 1 である場合
; 1477 : 
; 1478 :                 // q = u, r = 0 を返す
; 1479 :                 if (q != nullptr)

  0012c	48 83 bd 80 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  00134	74 0f		 je	 SHORT $LN10@PMC_DivRem

; 1480 :                     *q = u;

  00136	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  0013d	8b 8d 70 02 00
	00		 mov	 ecx, DWORD PTR u$[rbp]
  00143	89 08		 mov	 DWORD PTR [rax], ecx
$LN10@PMC_DivRem:

; 1481 :                 return (0);

  00145	33 c0		 xor	 eax, eax
  00147	e9 b3 00 00 00	 jmp	 $LN1@PMC_DivRem

; 1482 :             }
; 1483 :             else

  0014c	e9 ae 00 00 00	 jmp	 $LN9@PMC_DivRem
$LN8@PMC_DivRem:

; 1484 :             {
; 1485 :                 // u と v がともに 0 ではない場合
; 1486 : 
; 1487 :                 // x と y の商・剰余を計算する
; 1488 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

  00151	8b 8d 70 02 00
	00		 mov	 ecx, DWORD PTR u$[rbp]
  00157	e8 00 00 00 00	 call	 _LZCNT_ALT_32
  0015c	48 98		 cdqe
  0015e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00163	48 2b c8	 sub	 rcx, rax
  00166	48 8b c1	 mov	 rax, rcx
  00169	48 89 45 28	 mov	 QWORD PTR u_bit_count$4[rbp], rax

; 1489 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  0016d	48 8b 45 08	 mov	 rax, QWORD PTR nv$[rbp]
  00171	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00175	48 89 45 48	 mov	 QWORD PTR v_bit_count$5[rbp], rax

; 1490 :                 if (u_bit_count < v_bit_count)

  00179	48 8b 45 48	 mov	 rax, QWORD PTR v_bit_count$5[rbp]
  0017d	48 39 45 28	 cmp	 QWORD PTR u_bit_count$4[rbp], rax
  00181	73 21		 jae	 SHORT $LN11@PMC_DivRem

; 1491 :                 {
; 1492 :                     // 明らかに u < v である場合
; 1493 : 
; 1494 :                     // q = 0, r = u を返す。
; 1495 :                     if (q != nullptr)

  00183	48 83 bd 80 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  0018b	74 0d		 je	 SHORT $LN13@PMC_DivRem

; 1496 :                         *q = 0;

  0018d	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  00194	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN13@PMC_DivRem:

; 1497 :                     return (u);

  0019a	8b 85 70 02 00
	00		 mov	 eax, DWORD PTR u$[rbp]
  001a0	eb 5d		 jmp	 SHORT $LN1@PMC_DivRem

; 1498 :                 }
; 1499 :                 else

  001a2	eb 5b		 jmp	 SHORT $LN12@PMC_DivRem
$LN11@PMC_DivRem:

; 1500 :                 {
; 1501 :                     // u のビット数が v のビット数以上である場合
; 1502 : 
; 1503 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1504 :                     __UNIT_TYPE temp_r;
; 1505 :                     __UNIT_TYPE temp_q = _DIVREM_UNIT(0, u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);

  001a4	b8 08 00 00 00	 mov	 eax, 8
  001a9	48 6b c0 00	 imul	 rax, rax, 0
  001ad	48 8b 4d 08	 mov	 rcx, QWORD PTR nv$[rbp]
  001b1	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  001b5	8b 95 70 02 00
	00		 mov	 edx, DWORD PTR u$[rbp]
  001bb	4c 8d 4d 68	 lea	 r9, QWORD PTR temp_r$6[rbp]
  001bf	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  001c3	33 c9		 xor	 ecx, ecx
  001c5	e8 00 00 00 00	 call	 _DIVREM_UNIT
  001ca	48 89 85 88 00
	00 00		 mov	 QWORD PTR temp_q$7[rbp], rax

; 1506 :                     if (q != nullptr)

  001d1	48 83 bd 80 02
	00 00 00	 cmp	 QWORD PTR q$[rbp], 0
  001d9	74 0f		 je	 SHORT $LN14@PMC_DivRem

; 1507 :                         *q = (_UINT32_T)temp_q;

  001db	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR q$[rbp]
  001e2	8b 8d 88 00 00
	00		 mov	 ecx, DWORD PTR temp_q$7[rbp]
  001e8	89 08		 mov	 DWORD PTR [rax], ecx
$LN14@PMC_DivRem:

; 1508 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1509 :                     if (sizeof(u) == sizeof(_UINT64_T))

  001ea	33 c0		 xor	 eax, eax
  001ec	85 c0		 test	 eax, eax
  001ee	74 07		 je	 SHORT $LN15@PMC_DivRem

; 1510 :                         IncrementDIV64Counter();

  001f0	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 1511 :                     else

  001f5	eb 05		 jmp	 SHORT $LN16@PMC_DivRem
$LN15@PMC_DivRem:

; 1512 :                         IncrementDIV32Counter();

  001f7	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN16@PMC_DivRem:

; 1513 : #endif
; 1514 :                     return ((_UINT32_T)temp_r);

  001fc	8b 45 68	 mov	 eax, DWORD PTR temp_r$6[rbp]
$LN12@PMC_DivRem:
$LN9@PMC_DivRem:
$LN6@PMC_DivRem:
$LN1@PMC_DivRem:
$LN17@PMC_DivRem:

; 1515 :                 }
; 1516 :             }
; 1517 :         }
; 1518 :     }

  001ff	48 8b f8	 mov	 rdi, rax
  00202	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00206	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z$rtcFrameData
  0020d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00212	48 8b c7	 mov	 rax, rdi
  00215	48 8d a5 58 02
	00 00		 lea	 rsp, QWORD PTR [rbp+600]
  0021c	5f		 pop	 rdi
  0021d	5d		 pop	 rbp
  0021e	c3		 ret	 0
?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YAIIPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
tv72 = 192
feature$ = 240
?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_DivRem, COMDAT

; 2235 :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2236 :         fp_DivRem_X_X = feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2 ? DivRem_X_X_using_ADX_MULX : DivRem_X_X_using_ADC_MUL;

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR feature$[rbp]
  0003d	8b 00		 mov	 eax, DWORD PTR [rax]
  0003f	d1 e8		 shr	 eax, 1
  00041	83 e0 01	 and	 eax, 1
  00044	85 c0		 test	 eax, eax
  00046	74 23		 je	 SHORT $LN3@Initialize
  00048	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR feature$[rbp]
  0004f	8b 00		 mov	 eax, DWORD PTR [rax]
  00051	c1 e8 03	 shr	 eax, 3
  00054	83 e0 01	 and	 eax, 1
  00057	85 c0		 test	 eax, eax
  00059	74 10		 je	 SHORT $LN3@Initialize
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADX_MULX
  00062	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00069	eb 0e		 jmp	 SHORT $LN4@Initialize
$LN3@Initialize:
  0006b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADC_MUL
  00072	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
$LN4@Initialize:
  00079	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  00080	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K01000@ZEA, rax

; 2237 :         return (PMC_STATUS_OK);

  00087	33 c0		 xor	 eax, eax

; 2238 :     }

  00089	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00090	5f		 pop	 rdi
  00091	5d		 pop	 rbp
  00092	c3		 ret	 0
?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_DivRem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z
_TEXT	SEGMENT
u_buf_2$ = 8
u_count_2$ = 40
v_buf_2$ = 72
v_count_2$ = 104
r$5 = 136
q$6 = 168
r$7 = 200
tv146 = 408
u_buf$ = 448
u_count$ = 456
v_buf$ = 464
v_count$ = 472
work_v_buf$ = 480
q_buf$ = 488
r_buf$ = 496
?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_X, COMDAT

; 352  :     {

$LN15:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  0001d	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR [rsp+520]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 353  :         __UNIT_TYPE* u_buf_2 = u_buf;

  00045	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0004c	48 89 45 08	 mov	 QWORD PTR u_buf_2$[rbp], rax

; 354  :         __UNIT_TYPE u_count_2 = u_count;

  00050	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR u_count$[rbp]
  00057	48 89 45 28	 mov	 QWORD PTR u_count_2$[rbp], rax

; 355  :         __UNIT_TYPE* v_buf_2 = v_buf;

  0005b	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR v_buf$[rbp]
  00062	48 89 45 48	 mov	 QWORD PTR v_buf_2$[rbp], rax

; 356  :         __UNIT_TYPE v_count_2 = v_count;

  00066	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR v_count$[rbp]
  0006d	48 89 45 68	 mov	 QWORD PTR v_count_2$[rbp], rax

; 357  :         if (v_count_2 == 1)

  00071	48 83 7d 68 01	 cmp	 QWORD PTR v_count_2$[rbp], 1
  00076	0f 85 29 01 00
	00		 jne	 $LN2@DivRem_X_X

; 358  :         {
; 359  :             if (u_count_2 == 1)

  0007c	48 83 7d 28 01	 cmp	 QWORD PTR u_count_2$[rbp], 1
  00081	0f 85 8f 00 00
	00		 jne	 $LN4@DivRem_X_X

; 360  :             {
; 361  :                 __UNIT_TYPE r;
; 362  :                 __UNIT_TYPE q = _DIVREM_UNIT(0, u_buf_2[0], v_buf_2[0], &r);

  00087	b8 08 00 00 00	 mov	 eax, 8
  0008c	48 6b c0 00	 imul	 rax, rax, 0
  00090	b9 08 00 00 00	 mov	 ecx, 8
  00095	48 6b c9 00	 imul	 rcx, rcx, 0
  00099	4c 8d 8d 88 00
	00 00		 lea	 r9, QWORD PTR r$5[rbp]
  000a0	48 8b 55 48	 mov	 rdx, QWORD PTR v_buf_2$[rbp]
  000a4	4c 8b 04 02	 mov	 r8, QWORD PTR [rdx+rax]
  000a8	48 8b 45 08	 mov	 rax, QWORD PTR u_buf_2$[rbp]
  000ac	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  000b0	33 c9		 xor	 ecx, ecx
  000b2	e8 00 00 00 00	 call	 _DIVREM_UNIT
  000b7	48 89 85 a8 00
	00 00		 mov	 QWORD PTR q$6[rbp], rax

; 363  :                 if (q_buf != nullptr)

  000be	48 83 bd e8 01
	00 00 00	 cmp	 QWORD PTR q_buf$[rbp], 0
  000c6	74 1b		 je	 SHORT $LN6@DivRem_X_X

; 364  :                     q_buf[0] = q;

  000c8	b8 08 00 00 00	 mov	 eax, 8
  000cd	48 6b c0 00	 imul	 rax, rax, 0
  000d1	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR q_buf$[rbp]
  000d8	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR q$6[rbp]
  000df	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
$LN6@DivRem_X_X:

; 365  :                 r_buf[0] = r;

  000e3	b8 08 00 00 00	 mov	 eax, 8
  000e8	48 6b c0 00	 imul	 rax, rax, 0
  000ec	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR r_buf$[rbp]
  000f3	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR r$5[rbp]
  000fa	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 366  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 367  :                 if (sizeof(r) == sizeof(_UINT64_T))

  000fe	33 c0		 xor	 eax, eax
  00100	83 f8 01	 cmp	 eax, 1
  00103	74 07		 je	 SHORT $LN7@DivRem_X_X

; 368  :                     IncrementDIV64Counter();

  00105	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 369  :                 else

  0010a	eb 05		 jmp	 SHORT $LN8@DivRem_X_X
$LN7@DivRem_X_X:

; 370  :                     IncrementDIV32Counter();

  0010c	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN8@DivRem_X_X:

; 371  : #endif
; 372  :             }
; 373  :             else

  00111	e9 8a 00 00 00	 jmp	 $LN5@DivRem_X_X
$LN4@DivRem_X_X:

; 374  :             {
; 375  :                 if (q_buf != nullptr)

  00116	48 83 bd e8 01
	00 00 00	 cmp	 QWORD PTR q_buf$[rbp], 0
  0011e	74 4e		 je	 SHORT $LN9@DivRem_X_X

; 376  :                 {
; 377  :                     __UNIT_TYPE r;
; 378  :                     DivRem_X_1W(u_buf_2, u_count_2, v_buf_2[0], q_buf, &r);

  00120	b8 08 00 00 00	 mov	 eax, 8
  00125	48 6b c0 00	 imul	 rax, rax, 0
  00129	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR r$7[rbp]
  00130	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00135	4c 8b 8d e8 01
	00 00		 mov	 r9, QWORD PTR q_buf$[rbp]
  0013c	48 8b 4d 48	 mov	 rcx, QWORD PTR v_buf_2$[rbp]
  00140	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  00144	48 8b 55 28	 mov	 rdx, QWORD PTR u_count_2$[rbp]
  00148	48 8b 4d 08	 mov	 rcx, QWORD PTR u_buf_2$[rbp]
  0014c	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W

; 379  :                     r_buf[0] = r;

  00151	b8 08 00 00 00	 mov	 eax, 8
  00156	48 6b c0 00	 imul	 rax, rax, 0
  0015a	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR r_buf$[rbp]
  00161	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR r$7[rbp]
  00168	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 380  :                 }
; 381  :                 else

  0016c	eb 32		 jmp	 SHORT $LN10@DivRem_X_X
$LN9@DivRem_X_X:

; 382  :                     r_buf[0] = Rem_X_1W(u_buf_2, u_count_2, v_buf_2[0]);

  0016e	b8 08 00 00 00	 mov	 eax, 8
  00173	48 6b c0 00	 imul	 rax, rax, 0
  00177	48 8b 4d 48	 mov	 rcx, QWORD PTR v_buf_2$[rbp]
  0017b	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  0017f	48 8b 55 28	 mov	 rdx, QWORD PTR u_count_2$[rbp]
  00183	48 8b 4d 08	 mov	 rcx, QWORD PTR u_buf_2$[rbp]
  00187	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  0018c	b9 08 00 00 00	 mov	 ecx, 8
  00191	48 6b c9 00	 imul	 rcx, rcx, 0
  00195	48 8b 95 f0 01
	00 00		 mov	 rdx, QWORD PTR r_buf$[rbp]
  0019c	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
$LN10@DivRem_X_X:
$LN5@DivRem_X_X:

; 383  :             }
; 384  :         }
; 385  :         else

  001a0	e9 90 00 00 00	 jmp	 $LN3@DivRem_X_X
$LN2@DivRem_X_X:

; 386  :         {
; 387  :             if (u_count_2 < v_count_2)

  001a5	48 8b 45 68	 mov	 rax, QWORD PTR v_count_2$[rbp]
  001a9	48 39 45 28	 cmp	 QWORD PTR u_count_2$[rbp], rax
  001ad	73 3e		 jae	 SHORT $LN11@DivRem_X_X

; 388  :             {
; 389  :                 if (q_buf != nullptr)

  001af	48 83 bd e8 01
	00 00 00	 cmp	 QWORD PTR q_buf$[rbp], 0
  001b7	74 18		 je	 SHORT $LN13@DivRem_X_X

; 390  :                     q_buf[0] = 0;

  001b9	b8 08 00 00 00	 mov	 eax, 8
  001be	48 6b c0 00	 imul	 rax, rax, 0
  001c2	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR q_buf$[rbp]
  001c9	48 c7 04 01 00
	00 00 00	 mov	 QWORD PTR [rcx+rax], 0
$LN13@DivRem_X_X:

; 391  :                 _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);

  001d1	4c 8b 85 c8 01
	00 00		 mov	 r8, QWORD PTR u_count$[rbp]
  001d8	48 8b 95 c0 01
	00 00		 mov	 rdx, QWORD PTR u_buf$[rbp]
  001df	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR r_buf$[rbp]
  001e6	e8 00 00 00 00	 call	 _COPY_MEMORY_UNIT

; 392  :             }
; 393  :             else

  001eb	eb 48		 jmp	 SHORT $LN12@DivRem_X_X
$LN11@DivRem_X_X:

; 394  :                 (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, work_v_buf, q_buf, r_buf);

  001ed	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPEA_K_K01000@ZEA
  001f4	48 89 85 98 01
	00 00		 mov	 QWORD PTR tv146[rbp], rax
  001fb	48 8b 85 f0 01
	00 00		 mov	 rax, QWORD PTR r_buf$[rbp]
  00202	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00207	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR q_buf$[rbp]
  0020e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00213	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR work_v_buf$[rbp]
  0021a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0021f	4c 8b 4d 68	 mov	 r9, QWORD PTR v_count_2$[rbp]
  00223	4c 8b 45 48	 mov	 r8, QWORD PTR v_buf_2$[rbp]
  00227	48 8b 55 28	 mov	 rdx, QWORD PTR u_count_2$[rbp]
  0022b	48 8b 4d 08	 mov	 rcx, QWORD PTR u_buf_2$[rbp]
  0022f	ff 95 98 01 00
	00		 call	 QWORD PTR tv146[rbp]
$LN12@DivRem_X_X:
$LN3@DivRem_X_X:

; 395  :         }
; 396  :     }

  00235	48 8d 4d c0	 lea	 rcx, QWORD PTR [rbp-64]
  00239	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z$rtcFrameData
  00240	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00245	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  0024c	5f		 pop	 rdi
  0024d	5d		 pop	 rbp
  0024e	c3		 ret	 0
?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPEA_K_K01000@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z
_TEXT	SEGMENT
up$ = 8
u_count$ = 40
dummy_q$ = 72
r$ = 104
count$ = 136
u_buf$ = 384
u_buf_len$ = 392
v$ = 400
?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z PROC ; Palmtree::Math::Core::Internal::Rem_X_1W, COMDAT

; 399  :     {

$LN22:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  0003b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 400  :         // u の最上位ワードは 0 でありうることに注意すること。
; 401  :         __UNIT_TYPE* up = u_buf + u_buf_len - 1;

  00040	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  00047	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  0004e	48 8d 44 c8 f8	 lea	 rax, QWORD PTR [rax+rcx*8-8]
  00053	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 402  :         __UNIT_TYPE u_count = u_buf_len;

  00057	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR u_buf_len$[rbp]
  0005e	48 89 45 28	 mov	 QWORD PTR u_count$[rbp], rax

; 403  :         __UNIT_TYPE dummy_q;
; 404  :         __UNIT_TYPE r = 0;

  00062	48 c7 45 68 00
	00 00 00	 mov	 QWORD PTR r$[rbp], 0

; 405  :         __UNIT_TYPE count = u_count >> 5;

  0006a	48 8b 45 28	 mov	 rax, QWORD PTR u_count$[rbp]
  0006e	48 c1 e8 05	 shr	 rax, 5
  00072	48 89 85 88 00
	00 00		 mov	 QWORD PTR count$[rbp], rax
$LN2@Rem_X_1W:

; 406  :         while (count != 0)

  00079	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR count$[rbp], 0
  00081	0f 84 61 05 00
	00		 je	 $LN3@Rem_X_1W

; 407  :         {
; 408  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  00087	b8 08 00 00 00	 mov	 eax, 8
  0008c	48 6b c0 00	 imul	 rax, rax, 0
  00090	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00094	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0009b	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0009f	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000a3	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  000a7	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  000ac	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 409  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 ff	 imul	 rax, rax, -1
  000b9	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  000bd	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  000c4	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  000c8	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000cc	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  000d0	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  000d5	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 410  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

  000d9	b8 08 00 00 00	 mov	 eax, 8
  000de	48 6b c0 fe	 imul	 rax, rax, -2
  000e2	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  000e6	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  000ed	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  000f1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000f5	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  000f9	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  000fe	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 411  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

  00102	b8 08 00 00 00	 mov	 eax, 8
  00107	48 6b c0 fd	 imul	 rax, rax, -3
  0010b	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0010f	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00116	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0011a	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0011e	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00122	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00127	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 412  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &dummy_q);

  0012b	b8 08 00 00 00	 mov	 eax, 8
  00130	48 6b c0 fc	 imul	 rax, rax, -4
  00134	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00138	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0013f	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00143	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00147	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0014b	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00150	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 413  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &dummy_q);

  00154	b8 08 00 00 00	 mov	 eax, 8
  00159	48 6b c0 fb	 imul	 rax, rax, -5
  0015d	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00161	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00168	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0016c	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00170	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00174	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00179	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 414  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &dummy_q);

  0017d	b8 08 00 00 00	 mov	 eax, 8
  00182	48 6b c0 fa	 imul	 rax, rax, -6
  00186	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0018a	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00191	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00195	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00199	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0019d	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  001a2	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 415  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &dummy_q);

  001a6	b8 08 00 00 00	 mov	 eax, 8
  001ab	48 6b c0 f9	 imul	 rax, rax, -7
  001af	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  001b3	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  001ba	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  001be	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001c2	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  001c6	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  001cb	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 416  :             r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &dummy_q);

  001cf	b8 08 00 00 00	 mov	 eax, 8
  001d4	48 6b c0 f8	 imul	 rax, rax, -8
  001d8	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  001dc	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  001e3	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  001e7	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001eb	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  001ef	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  001f4	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 417  :             r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &dummy_q);

  001f8	b8 08 00 00 00	 mov	 eax, 8
  001fd	48 6b c0 f7	 imul	 rax, rax, -9
  00201	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00205	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0020c	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00210	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00214	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00218	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0021d	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 418  :             r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &dummy_q);

  00221	b8 08 00 00 00	 mov	 eax, 8
  00226	48 6b c0 f6	 imul	 rax, rax, -10
  0022a	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0022e	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00235	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00239	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0023d	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00241	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00246	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 419  :             r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &dummy_q);

  0024a	b8 08 00 00 00	 mov	 eax, 8
  0024f	48 6b c0 f5	 imul	 rax, rax, -11
  00253	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00257	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0025e	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00262	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00266	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0026a	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0026f	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 420  :             r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &dummy_q);

  00273	b8 08 00 00 00	 mov	 eax, 8
  00278	48 6b c0 f4	 imul	 rax, rax, -12
  0027c	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00280	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00287	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0028b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0028f	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00293	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00298	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 421  :             r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &dummy_q);

  0029c	b8 08 00 00 00	 mov	 eax, 8
  002a1	48 6b c0 f3	 imul	 rax, rax, -13
  002a5	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  002a9	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  002b0	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  002b4	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002b8	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  002bc	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  002c1	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 422  :             r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &dummy_q);

  002c5	b8 08 00 00 00	 mov	 eax, 8
  002ca	48 6b c0 f2	 imul	 rax, rax, -14
  002ce	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  002d2	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  002d9	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  002dd	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002e1	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  002e5	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  002ea	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 423  :             r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &dummy_q);

  002ee	b8 08 00 00 00	 mov	 eax, 8
  002f3	48 6b c0 f1	 imul	 rax, rax, -15
  002f7	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  002fb	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00302	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00306	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0030a	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0030e	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00313	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 424  :             r = _DIVREM_SINGLE_UNIT(r, up[-16], v, &dummy_q);

  00317	b8 08 00 00 00	 mov	 eax, 8
  0031c	48 6b c0 f0	 imul	 rax, rax, -16
  00320	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00324	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0032b	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0032f	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00333	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00337	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0033c	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 425  :             r = _DIVREM_SINGLE_UNIT(r, up[-17], v, &dummy_q);

  00340	b8 08 00 00 00	 mov	 eax, 8
  00345	48 6b c0 ef	 imul	 rax, rax, -17
  00349	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0034d	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00354	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00358	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0035c	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00360	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00365	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 426  :             r = _DIVREM_SINGLE_UNIT(r, up[-18], v, &dummy_q);

  00369	b8 08 00 00 00	 mov	 eax, 8
  0036e	48 6b c0 ee	 imul	 rax, rax, -18
  00372	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00376	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0037d	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00381	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00385	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00389	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0038e	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 427  :             r = _DIVREM_SINGLE_UNIT(r, up[-19], v, &dummy_q);

  00392	b8 08 00 00 00	 mov	 eax, 8
  00397	48 6b c0 ed	 imul	 rax, rax, -19
  0039b	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0039f	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  003a6	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  003aa	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  003ae	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  003b2	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  003b7	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 428  :             r = _DIVREM_SINGLE_UNIT(r, up[-20], v, &dummy_q);

  003bb	b8 08 00 00 00	 mov	 eax, 8
  003c0	48 6b c0 ec	 imul	 rax, rax, -20
  003c4	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  003c8	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  003cf	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  003d3	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  003d7	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  003db	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  003e0	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 429  :             r = _DIVREM_SINGLE_UNIT(r, up[-21], v, &dummy_q);

  003e4	b8 08 00 00 00	 mov	 eax, 8
  003e9	48 6b c0 eb	 imul	 rax, rax, -21
  003ed	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  003f1	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  003f8	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  003fc	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00400	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00404	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00409	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 430  :             r = _DIVREM_SINGLE_UNIT(r, up[-22], v, &dummy_q);

  0040d	b8 08 00 00 00	 mov	 eax, 8
  00412	48 6b c0 ea	 imul	 rax, rax, -22
  00416	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0041a	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00421	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00425	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00429	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0042d	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00432	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 431  :             r = _DIVREM_SINGLE_UNIT(r, up[-23], v, &dummy_q);

  00436	b8 08 00 00 00	 mov	 eax, 8
  0043b	48 6b c0 e9	 imul	 rax, rax, -23
  0043f	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00443	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0044a	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0044e	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00452	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00456	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0045b	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 432  :             r = _DIVREM_SINGLE_UNIT(r, up[-24], v, &dummy_q);

  0045f	b8 08 00 00 00	 mov	 eax, 8
  00464	48 6b c0 e8	 imul	 rax, rax, -24
  00468	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0046c	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00473	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00477	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0047b	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0047f	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00484	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 433  :             r = _DIVREM_SINGLE_UNIT(r, up[-25], v, &dummy_q);

  00488	b8 08 00 00 00	 mov	 eax, 8
  0048d	48 6b c0 e7	 imul	 rax, rax, -25
  00491	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00495	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0049c	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  004a0	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  004a4	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  004a8	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  004ad	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 434  :             r = _DIVREM_SINGLE_UNIT(r, up[-26], v, &dummy_q);

  004b1	b8 08 00 00 00	 mov	 eax, 8
  004b6	48 6b c0 e6	 imul	 rax, rax, -26
  004ba	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  004be	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  004c5	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  004c9	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  004cd	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  004d1	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  004d6	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 435  :             r = _DIVREM_SINGLE_UNIT(r, up[-27], v, &dummy_q);

  004da	b8 08 00 00 00	 mov	 eax, 8
  004df	48 6b c0 e5	 imul	 rax, rax, -27
  004e3	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  004e7	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  004ee	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  004f2	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  004f6	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  004fa	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  004ff	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 436  :             r = _DIVREM_SINGLE_UNIT(r, up[-28], v, &dummy_q);

  00503	b8 08 00 00 00	 mov	 eax, 8
  00508	48 6b c0 e4	 imul	 rax, rax, -28
  0050c	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00510	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00517	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0051b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0051f	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00523	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00528	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 437  :             r = _DIVREM_SINGLE_UNIT(r, up[-29], v, &dummy_q);

  0052c	b8 08 00 00 00	 mov	 eax, 8
  00531	48 6b c0 e3	 imul	 rax, rax, -29
  00535	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00539	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00540	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00544	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00548	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0054c	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00551	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 438  :             r = _DIVREM_SINGLE_UNIT(r, up[-30], v, &dummy_q);

  00555	b8 08 00 00 00	 mov	 eax, 8
  0055a	48 6b c0 e2	 imul	 rax, rax, -30
  0055e	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00562	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00569	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0056d	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00571	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00575	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0057a	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 439  :             r = _DIVREM_SINGLE_UNIT(r, up[-31], v, &dummy_q);

  0057e	b8 08 00 00 00	 mov	 eax, 8
  00583	48 6b c0 e1	 imul	 rax, rax, -31
  00587	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0058b	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00592	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00596	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0059a	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0059e	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  005a3	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 440  :             up -= 32;

  005a7	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  005ab	48 2d 00 01 00
	00		 sub	 rax, 256		; 00000100H
  005b1	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 441  :             --count;

  005b5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  005bc	48 ff c8	 dec	 rax
  005bf	48 89 85 88 00
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 442  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 443  :             if (sizeof(r) == sizeof(_UINT64_T))

  005c6	33 c0		 xor	 eax, eax
  005c8	83 f8 01	 cmp	 eax, 1
  005cb	74 0c		 je	 SHORT $LN4@Rem_X_1W

; 444  :                 AddToDIV64Counter(32);

  005cd	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  005d2	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 445  :             else

  005d7	eb 0a		 jmp	 SHORT $LN5@Rem_X_1W
$LN4@Rem_X_1W:

; 446  :                 AddToDIV32Counter(32);

  005d9	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  005de	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
$LN5@Rem_X_1W:

; 447  : #endif
; 448  :         }

  005e3	e9 91 fa ff ff	 jmp	 $LN2@Rem_X_1W
$LN3@Rem_X_1W:

; 449  : 
; 450  :         if (u_count & 0x10)

  005e8	48 8b 45 28	 mov	 rax, QWORD PTR u_count$[rbp]
  005ec	48 83 e0 10	 and	 rax, 16
  005f0	48 85 c0	 test	 rax, rax
  005f3	0f 84 bb 02 00
	00		 je	 $LN6@Rem_X_1W

; 451  :         {
; 452  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  005f9	b8 08 00 00 00	 mov	 eax, 8
  005fe	48 6b c0 00	 imul	 rax, rax, 0
  00602	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00606	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0060d	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00611	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00615	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00619	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0061e	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 453  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  00622	b8 08 00 00 00	 mov	 eax, 8
  00627	48 6b c0 ff	 imul	 rax, rax, -1
  0062b	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0062f	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00636	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0063a	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0063e	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00642	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00647	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 454  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

  0064b	b8 08 00 00 00	 mov	 eax, 8
  00650	48 6b c0 fe	 imul	 rax, rax, -2
  00654	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00658	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0065f	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00663	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00667	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0066b	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00670	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 455  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

  00674	b8 08 00 00 00	 mov	 eax, 8
  00679	48 6b c0 fd	 imul	 rax, rax, -3
  0067d	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00681	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00688	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0068c	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00690	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00694	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00699	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 456  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &dummy_q);

  0069d	b8 08 00 00 00	 mov	 eax, 8
  006a2	48 6b c0 fc	 imul	 rax, rax, -4
  006a6	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  006aa	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  006b1	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  006b5	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  006b9	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  006bd	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  006c2	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 457  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &dummy_q);

  006c6	b8 08 00 00 00	 mov	 eax, 8
  006cb	48 6b c0 fb	 imul	 rax, rax, -5
  006cf	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  006d3	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  006da	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  006de	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  006e2	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  006e6	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  006eb	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 458  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &dummy_q);

  006ef	b8 08 00 00 00	 mov	 eax, 8
  006f4	48 6b c0 fa	 imul	 rax, rax, -6
  006f8	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  006fc	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00703	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00707	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0070b	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0070f	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00714	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 459  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &dummy_q);

  00718	b8 08 00 00 00	 mov	 eax, 8
  0071d	48 6b c0 f9	 imul	 rax, rax, -7
  00721	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00725	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0072c	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00730	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00734	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00738	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0073d	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 460  :             r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &dummy_q);

  00741	b8 08 00 00 00	 mov	 eax, 8
  00746	48 6b c0 f8	 imul	 rax, rax, -8
  0074a	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0074e	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00755	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00759	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0075d	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00761	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00766	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 461  :             r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &dummy_q);

  0076a	b8 08 00 00 00	 mov	 eax, 8
  0076f	48 6b c0 f7	 imul	 rax, rax, -9
  00773	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00777	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0077e	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00782	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00786	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0078a	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0078f	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 462  :             r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &dummy_q);

  00793	b8 08 00 00 00	 mov	 eax, 8
  00798	48 6b c0 f6	 imul	 rax, rax, -10
  0079c	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  007a0	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  007a7	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  007ab	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  007af	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  007b3	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  007b8	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 463  :             r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &dummy_q);

  007bc	b8 08 00 00 00	 mov	 eax, 8
  007c1	48 6b c0 f5	 imul	 rax, rax, -11
  007c5	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  007c9	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  007d0	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  007d4	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  007d8	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  007dc	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  007e1	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 464  :             r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &dummy_q);

  007e5	b8 08 00 00 00	 mov	 eax, 8
  007ea	48 6b c0 f4	 imul	 rax, rax, -12
  007ee	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  007f2	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  007f9	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  007fd	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00801	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00805	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0080a	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 465  :             r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &dummy_q);

  0080e	b8 08 00 00 00	 mov	 eax, 8
  00813	48 6b c0 f3	 imul	 rax, rax, -13
  00817	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0081b	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00822	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00826	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0082a	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0082e	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00833	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 466  :             r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &dummy_q);

  00837	b8 08 00 00 00	 mov	 eax, 8
  0083c	48 6b c0 f2	 imul	 rax, rax, -14
  00840	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00844	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0084b	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0084f	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00853	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00857	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0085c	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 467  :             r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &dummy_q);

  00860	b8 08 00 00 00	 mov	 eax, 8
  00865	48 6b c0 f1	 imul	 rax, rax, -15
  00869	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0086d	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00874	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00878	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0087c	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00880	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00885	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 468  :             up -= 16;

  00889	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0088d	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  00893	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 469  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 470  :             if (sizeof(r) == sizeof(_UINT64_T))

  00897	33 c0		 xor	 eax, eax
  00899	83 f8 01	 cmp	 eax, 1
  0089c	74 0c		 je	 SHORT $LN7@Rem_X_1W

; 471  :                 AddToDIV64Counter(16);

  0089e	b9 10 00 00 00	 mov	 ecx, 16
  008a3	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 472  :             else

  008a8	eb 0a		 jmp	 SHORT $LN8@Rem_X_1W
$LN7@Rem_X_1W:

; 473  :                 AddToDIV32Counter(16);

  008aa	b9 10 00 00 00	 mov	 ecx, 16
  008af	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
$LN8@Rem_X_1W:
$LN6@Rem_X_1W:

; 474  : #endif
; 475  :         }
; 476  : 
; 477  :         if (u_count & 0x8)

  008b4	48 8b 45 28	 mov	 rax, QWORD PTR u_count$[rbp]
  008b8	48 83 e0 08	 and	 rax, 8
  008bc	48 85 c0	 test	 rax, rax
  008bf	0f 84 71 01 00
	00		 je	 $LN9@Rem_X_1W

; 478  :         {
; 479  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  008c5	b8 08 00 00 00	 mov	 eax, 8
  008ca	48 6b c0 00	 imul	 rax, rax, 0
  008ce	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  008d2	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  008d9	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  008dd	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  008e1	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  008e5	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  008ea	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 480  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  008ee	b8 08 00 00 00	 mov	 eax, 8
  008f3	48 6b c0 ff	 imul	 rax, rax, -1
  008f7	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  008fb	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00902	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00906	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0090a	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0090e	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00913	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 481  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

  00917	b8 08 00 00 00	 mov	 eax, 8
  0091c	48 6b c0 fe	 imul	 rax, rax, -2
  00920	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00924	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0092b	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  0092f	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00933	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00937	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0093c	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 482  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

  00940	b8 08 00 00 00	 mov	 eax, 8
  00945	48 6b c0 fd	 imul	 rax, rax, -3
  00949	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0094d	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00954	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00958	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0095c	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00960	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00965	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 483  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &dummy_q);

  00969	b8 08 00 00 00	 mov	 eax, 8
  0096e	48 6b c0 fc	 imul	 rax, rax, -4
  00972	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00976	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0097d	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00981	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00985	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00989	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0098e	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 484  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &dummy_q);

  00992	b8 08 00 00 00	 mov	 eax, 8
  00997	48 6b c0 fb	 imul	 rax, rax, -5
  0099b	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  0099f	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  009a6	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  009aa	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  009ae	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  009b2	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  009b7	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 485  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &dummy_q);

  009bb	b8 08 00 00 00	 mov	 eax, 8
  009c0	48 6b c0 fa	 imul	 rax, rax, -6
  009c4	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  009c8	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  009cf	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  009d3	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  009d7	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  009db	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  009e0	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 486  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &dummy_q);

  009e4	b8 08 00 00 00	 mov	 eax, 8
  009e9	48 6b c0 f9	 imul	 rax, rax, -7
  009ed	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  009f1	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  009f8	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  009fc	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00a00	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00a04	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00a09	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 487  :             up -= 8;

  00a0d	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00a11	48 83 e8 40	 sub	 rax, 64			; 00000040H
  00a15	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 488  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 489  :             if (sizeof(r) == sizeof(_UINT64_T))

  00a19	33 c0		 xor	 eax, eax
  00a1b	83 f8 01	 cmp	 eax, 1
  00a1e	74 0c		 je	 SHORT $LN10@Rem_X_1W

; 490  :                 AddToDIV64Counter(8);

  00a20	b9 08 00 00 00	 mov	 ecx, 8
  00a25	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 491  :             else

  00a2a	eb 0a		 jmp	 SHORT $LN11@Rem_X_1W
$LN10@Rem_X_1W:

; 492  :                 AddToDIV32Counter(8);

  00a2c	b9 08 00 00 00	 mov	 ecx, 8
  00a31	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
$LN11@Rem_X_1W:
$LN9@Rem_X_1W:

; 493  : #endif
; 494  :         }
; 495  : 
; 496  :         if (u_count & 0x4)

  00a36	48 8b 45 28	 mov	 rax, QWORD PTR u_count$[rbp]
  00a3a	48 83 e0 04	 and	 rax, 4
  00a3e	48 85 c0	 test	 rax, rax
  00a41	0f 84 cd 00 00
	00		 je	 $LN12@Rem_X_1W

; 497  :         {
; 498  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  00a47	b8 08 00 00 00	 mov	 eax, 8
  00a4c	48 6b c0 00	 imul	 rax, rax, 0
  00a50	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00a54	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00a5b	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00a5f	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00a63	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00a67	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00a6c	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 499  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  00a70	b8 08 00 00 00	 mov	 eax, 8
  00a75	48 6b c0 ff	 imul	 rax, rax, -1
  00a79	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00a7d	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00a84	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00a88	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00a8c	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00a90	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00a95	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 500  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

  00a99	b8 08 00 00 00	 mov	 eax, 8
  00a9e	48 6b c0 fe	 imul	 rax, rax, -2
  00aa2	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00aa6	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00aad	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00ab1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00ab5	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00ab9	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00abe	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 501  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

  00ac2	b8 08 00 00 00	 mov	 eax, 8
  00ac7	48 6b c0 fd	 imul	 rax, rax, -3
  00acb	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00acf	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00ad6	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00ada	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00ade	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00ae2	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00ae7	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 502  :             up -= 4;

  00aeb	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00aef	48 83 e8 20	 sub	 rax, 32			; 00000020H
  00af3	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 503  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 504  :             if (sizeof(r) == sizeof(_UINT64_T))

  00af7	33 c0		 xor	 eax, eax
  00af9	83 f8 01	 cmp	 eax, 1
  00afc	74 0c		 je	 SHORT $LN13@Rem_X_1W

; 505  :                 AddToDIV64Counter(4);

  00afe	b9 04 00 00 00	 mov	 ecx, 4
  00b03	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 506  :             else

  00b08	eb 0a		 jmp	 SHORT $LN14@Rem_X_1W
$LN13@Rem_X_1W:

; 507  :                 AddToDIV32Counter(4);

  00b0a	b9 04 00 00 00	 mov	 ecx, 4
  00b0f	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
$LN14@Rem_X_1W:
$LN12@Rem_X_1W:

; 508  : #endif
; 509  :         }
; 510  : 
; 511  :         if (u_count & 0x2)

  00b14	48 8b 45 28	 mov	 rax, QWORD PTR u_count$[rbp]
  00b18	48 83 e0 02	 and	 rax, 2
  00b1c	48 85 c0	 test	 rax, rax
  00b1f	74 7b		 je	 SHORT $LN15@Rem_X_1W

; 512  :         {
; 513  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  00b21	b8 08 00 00 00	 mov	 eax, 8
  00b26	48 6b c0 00	 imul	 rax, rax, 0
  00b2a	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00b2e	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00b35	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00b39	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00b3d	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00b41	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00b46	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 514  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  00b4a	b8 08 00 00 00	 mov	 eax, 8
  00b4f	48 6b c0 ff	 imul	 rax, rax, -1
  00b53	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00b57	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00b5e	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00b62	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00b66	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00b6a	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00b6f	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 515  :             up -= 2;

  00b73	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00b77	48 83 e8 10	 sub	 rax, 16
  00b7b	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 516  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 517  :             if (sizeof(r) == sizeof(_UINT64_T))

  00b7f	33 c0		 xor	 eax, eax
  00b81	83 f8 01	 cmp	 eax, 1
  00b84	74 0c		 je	 SHORT $LN16@Rem_X_1W

; 518  :                 AddToDIV64Counter(2);

  00b86	b9 02 00 00 00	 mov	 ecx, 2
  00b8b	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 519  :             else

  00b90	eb 0a		 jmp	 SHORT $LN17@Rem_X_1W
$LN16@Rem_X_1W:

; 520  :                 AddToDIV32Counter(2);

  00b92	b9 02 00 00 00	 mov	 ecx, 2
  00b97	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
$LN17@Rem_X_1W:
$LN15@Rem_X_1W:

; 521  : #endif
; 522  :         }
; 523  : 
; 524  :         if (u_count & 0x1)

  00b9c	48 8b 45 28	 mov	 rax, QWORD PTR u_count$[rbp]
  00ba0	48 83 e0 01	 and	 rax, 1
  00ba4	48 85 c0	 test	 rax, rax
  00ba7	74 48		 je	 SHORT $LN18@Rem_X_1W

; 525  :         {
; 526  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  00ba9	b8 08 00 00 00	 mov	 eax, 8
  00bae	48 6b c0 00	 imul	 rax, rax, 0
  00bb2	4c 8d 4d 48	 lea	 r9, QWORD PTR dummy_q$[rbp]
  00bb6	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00bbd	48 8b 4d 08	 mov	 rcx, QWORD PTR up$[rbp]
  00bc1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00bc5	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00bc9	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00bce	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 527  :             up -= 1;

  00bd2	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00bd6	48 83 e8 08	 sub	 rax, 8
  00bda	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 528  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 529  :             if (sizeof(r) == sizeof(_UINT64_T))

  00bde	33 c0		 xor	 eax, eax
  00be0	83 f8 01	 cmp	 eax, 1
  00be3	74 07		 je	 SHORT $LN19@Rem_X_1W

; 530  :                 IncrementDIV64Counter();

  00be5	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 531  :             else

  00bea	eb 05		 jmp	 SHORT $LN20@Rem_X_1W
$LN19@Rem_X_1W:

; 532  :                 IncrementDIV32Counter();

  00bec	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN20@Rem_X_1W:
$LN18@Rem_X_1W:

; 533  : #endif
; 534  :         }
; 535  : 
; 536  :         return (r);

  00bf1	48 8b 45 68	 mov	 rax, QWORD PTR r$[rbp]

; 537  :     }

  00bf5	48 8b f8	 mov	 rdi, rax
  00bf8	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00bfc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z$rtcFrameData
  00c03	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00c08	48 8b c7	 mov	 rax, rdi
  00c0b	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00c12	5f		 pop	 rdi
  00c13	5d		 pop	 rbp
  00c14	c3		 ret	 0
?Rem_X_1W@Internal@Core@Math@Palmtree@@YA_KPEA_K_K1@Z ENDP ; Palmtree::Math::Core::Internal::Rem_X_1W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
;	COMDAT ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z
_TEXT	SEGMENT
up$ = 8
qp$ = 40
u_count$ = 72
r$ = 104
count$ = 136
u_buf$ = 384
u_buf_len$ = 392
v$ = 400
q_buf$ = 408
r_buf$ = 416
?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_1W, COMDAT

; 540  :     {

$LN25:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 62 00 00 00	 mov	 ecx, 98			; 00000062H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E17217E9_pmc_divrem@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 541  :         // u の最上位ワードは 0 でありうることに注意すること。
; 542  :         __UNIT_TYPE* up = u_buf + u_buf_len - 1;

  00045	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR u_buf$[rbp]
  0004c	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  00053	48 8d 44 c8 f8	 lea	 rax, QWORD PTR [rax+rcx*8-8]
  00058	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 543  :         __UNIT_TYPE* qp = q_buf + u_buf_len - 1;

  0005c	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR q_buf$[rbp]
  00063	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR u_buf_len$[rbp]
  0006a	48 8d 44 c8 f8	 lea	 rax, QWORD PTR [rax+rcx*8-8]
  0006f	48 89 45 28	 mov	 QWORD PTR qp$[rbp], rax

; 544  :         __UNIT_TYPE u_count = u_buf_len;

  00073	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR u_buf_len$[rbp]
  0007a	48 89 45 48	 mov	 QWORD PTR u_count$[rbp], rax

; 545  :         if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE))

  0007e	33 c0		 xor	 eax, eax
  00080	85 c0		 test	 eax, eax
  00082	74 2f		 je	 SHORT $LN6@DivRem_X_1
$LN2@DivRem_X_1:

; 546  :         {
; 547  :             while (*up == 0)

  00084	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00088	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0008c	75 25		 jne	 SHORT $LN3@DivRem_X_1

; 548  :             {
; 549  :                 --up;

  0008e	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00092	48 83 e8 08	 sub	 rax, 8
  00096	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 550  :                 --qp;

  0009a	48 8b 45 28	 mov	 rax, QWORD PTR qp$[rbp]
  0009e	48 83 e8 08	 sub	 rax, 8
  000a2	48 89 45 28	 mov	 QWORD PTR qp$[rbp], rax

; 551  :                 --u_count;

  000a6	48 8b 45 48	 mov	 rax, QWORD PTR u_count$[rbp]
  000aa	48 ff c8	 dec	 rax
  000ad	48 89 45 48	 mov	 QWORD PTR u_count$[rbp], rax

; 552  :             }

  000b1	eb d1		 jmp	 SHORT $LN2@DivRem_X_1
$LN3@DivRem_X_1:
$LN6@DivRem_X_1:

; 553  :         }
; 554  :         __UNIT_TYPE r = 0;

  000b3	48 c7 45 68 00
	00 00 00	 mov	 QWORD PTR r$[rbp], 0

; 555  :         __UNIT_TYPE count = u_count >> 5;

  000bb	48 8b 45 48	 mov	 rax, QWORD PTR u_count$[rbp]
  000bf	48 c1 e8 05	 shr	 rax, 5
  000c3	48 89 85 88 00
	00 00		 mov	 QWORD PTR count$[rbp], rax
$LN4@DivRem_X_1:

; 556  :         while (count != 0)

  000ca	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR count$[rbp], 0
  000d2	0f 84 af 07 00
	00		 je	 $LN5@DivRem_X_1

; 557  :         {
; 558  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  000d8	b8 08 00 00 00	 mov	 eax, 8
  000dd	48 6b c0 00	 imul	 rax, rax, 0
  000e1	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  000e5	48 03 c8	 add	 rcx, rax
  000e8	48 8b c1	 mov	 rax, rcx
  000eb	b9 08 00 00 00	 mov	 ecx, 8
  000f0	48 6b c9 00	 imul	 rcx, rcx, 0
  000f4	4c 8b c8	 mov	 r9, rax
  000f7	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  000fe	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00102	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00106	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0010a	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0010f	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 559  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

  00113	b8 08 00 00 00	 mov	 eax, 8
  00118	48 6b c0 ff	 imul	 rax, rax, -1
  0011c	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00120	48 03 c8	 add	 rcx, rax
  00123	48 8b c1	 mov	 rax, rcx
  00126	b9 08 00 00 00	 mov	 ecx, 8
  0012b	48 6b c9 ff	 imul	 rcx, rcx, -1
  0012f	4c 8b c8	 mov	 r9, rax
  00132	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00139	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0013d	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00141	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00145	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0014a	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 560  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

  0014e	b8 08 00 00 00	 mov	 eax, 8
  00153	48 6b c0 fe	 imul	 rax, rax, -2
  00157	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0015b	48 03 c8	 add	 rcx, rax
  0015e	48 8b c1	 mov	 rax, rcx
  00161	b9 08 00 00 00	 mov	 ecx, 8
  00166	48 6b c9 fe	 imul	 rcx, rcx, -2
  0016a	4c 8b c8	 mov	 r9, rax
  0016d	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00174	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00178	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0017c	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00180	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00185	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 561  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

  00189	b8 08 00 00 00	 mov	 eax, 8
  0018e	48 6b c0 fd	 imul	 rax, rax, -3
  00192	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00196	48 03 c8	 add	 rcx, rax
  00199	48 8b c1	 mov	 rax, rcx
  0019c	b9 08 00 00 00	 mov	 ecx, 8
  001a1	48 6b c9 fd	 imul	 rcx, rcx, -3
  001a5	4c 8b c8	 mov	 r9, rax
  001a8	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  001af	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  001b3	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  001b7	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  001bb	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  001c0	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 562  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

  001c4	b8 08 00 00 00	 mov	 eax, 8
  001c9	48 6b c0 fc	 imul	 rax, rax, -4
  001cd	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  001d1	48 03 c8	 add	 rcx, rax
  001d4	48 8b c1	 mov	 rax, rcx
  001d7	b9 08 00 00 00	 mov	 ecx, 8
  001dc	48 6b c9 fc	 imul	 rcx, rcx, -4
  001e0	4c 8b c8	 mov	 r9, rax
  001e3	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  001ea	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  001ee	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  001f2	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  001f6	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  001fb	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 563  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

  001ff	b8 08 00 00 00	 mov	 eax, 8
  00204	48 6b c0 fb	 imul	 rax, rax, -5
  00208	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0020c	48 03 c8	 add	 rcx, rax
  0020f	48 8b c1	 mov	 rax, rcx
  00212	b9 08 00 00 00	 mov	 ecx, 8
  00217	48 6b c9 fb	 imul	 rcx, rcx, -5
  0021b	4c 8b c8	 mov	 r9, rax
  0021e	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00225	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00229	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0022d	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00231	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00236	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 564  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

  0023a	b8 08 00 00 00	 mov	 eax, 8
  0023f	48 6b c0 fa	 imul	 rax, rax, -6
  00243	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00247	48 03 c8	 add	 rcx, rax
  0024a	48 8b c1	 mov	 rax, rcx
  0024d	b9 08 00 00 00	 mov	 ecx, 8
  00252	48 6b c9 fa	 imul	 rcx, rcx, -6
  00256	4c 8b c8	 mov	 r9, rax
  00259	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00260	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00264	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00268	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0026c	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00271	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 565  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

  00275	b8 08 00 00 00	 mov	 eax, 8
  0027a	48 6b c0 f9	 imul	 rax, rax, -7
  0027e	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00282	48 03 c8	 add	 rcx, rax
  00285	48 8b c1	 mov	 rax, rcx
  00288	b9 08 00 00 00	 mov	 ecx, 8
  0028d	48 6b c9 f9	 imul	 rcx, rcx, -7
  00291	4c 8b c8	 mov	 r9, rax
  00294	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0029b	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0029f	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  002a3	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  002a7	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  002ac	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 566  :             r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &qp[-8]);

  002b0	b8 08 00 00 00	 mov	 eax, 8
  002b5	48 6b c0 f8	 imul	 rax, rax, -8
  002b9	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  002bd	48 03 c8	 add	 rcx, rax
  002c0	48 8b c1	 mov	 rax, rcx
  002c3	b9 08 00 00 00	 mov	 ecx, 8
  002c8	48 6b c9 f8	 imul	 rcx, rcx, -8
  002cc	4c 8b c8	 mov	 r9, rax
  002cf	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  002d6	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  002da	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  002de	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  002e2	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  002e7	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 567  :             r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &qp[-9]);

  002eb	b8 08 00 00 00	 mov	 eax, 8
  002f0	48 6b c0 f7	 imul	 rax, rax, -9
  002f4	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  002f8	48 03 c8	 add	 rcx, rax
  002fb	48 8b c1	 mov	 rax, rcx
  002fe	b9 08 00 00 00	 mov	 ecx, 8
  00303	48 6b c9 f7	 imul	 rcx, rcx, -9
  00307	4c 8b c8	 mov	 r9, rax
  0030a	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00311	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00315	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00319	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0031d	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00322	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 568  :             r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &qp[-10]);

  00326	b8 08 00 00 00	 mov	 eax, 8
  0032b	48 6b c0 f6	 imul	 rax, rax, -10
  0032f	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00333	48 03 c8	 add	 rcx, rax
  00336	48 8b c1	 mov	 rax, rcx
  00339	b9 08 00 00 00	 mov	 ecx, 8
  0033e	48 6b c9 f6	 imul	 rcx, rcx, -10
  00342	4c 8b c8	 mov	 r9, rax
  00345	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0034c	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00350	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00354	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00358	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0035d	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 569  :             r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &qp[-11]);

  00361	b8 08 00 00 00	 mov	 eax, 8
  00366	48 6b c0 f5	 imul	 rax, rax, -11
  0036a	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0036e	48 03 c8	 add	 rcx, rax
  00371	48 8b c1	 mov	 rax, rcx
  00374	b9 08 00 00 00	 mov	 ecx, 8
  00379	48 6b c9 f5	 imul	 rcx, rcx, -11
  0037d	4c 8b c8	 mov	 r9, rax
  00380	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00387	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0038b	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0038f	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00393	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00398	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 570  :             r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &qp[-12]);

  0039c	b8 08 00 00 00	 mov	 eax, 8
  003a1	48 6b c0 f4	 imul	 rax, rax, -12
  003a5	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  003a9	48 03 c8	 add	 rcx, rax
  003ac	48 8b c1	 mov	 rax, rcx
  003af	b9 08 00 00 00	 mov	 ecx, 8
  003b4	48 6b c9 f4	 imul	 rcx, rcx, -12
  003b8	4c 8b c8	 mov	 r9, rax
  003bb	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  003c2	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  003c6	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  003ca	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  003ce	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  003d3	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 571  :             r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &qp[-13]);

  003d7	b8 08 00 00 00	 mov	 eax, 8
  003dc	48 6b c0 f3	 imul	 rax, rax, -13
  003e0	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  003e4	48 03 c8	 add	 rcx, rax
  003e7	48 8b c1	 mov	 rax, rcx
  003ea	b9 08 00 00 00	 mov	 ecx, 8
  003ef	48 6b c9 f3	 imul	 rcx, rcx, -13
  003f3	4c 8b c8	 mov	 r9, rax
  003f6	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  003fd	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00401	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00405	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00409	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0040e	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 572  :             r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &qp[-14]);

  00412	b8 08 00 00 00	 mov	 eax, 8
  00417	48 6b c0 f2	 imul	 rax, rax, -14
  0041b	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0041f	48 03 c8	 add	 rcx, rax
  00422	48 8b c1	 mov	 rax, rcx
  00425	b9 08 00 00 00	 mov	 ecx, 8
  0042a	48 6b c9 f2	 imul	 rcx, rcx, -14
  0042e	4c 8b c8	 mov	 r9, rax
  00431	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00438	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0043c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00440	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00444	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00449	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 573  :             r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &qp[-15]);

  0044d	b8 08 00 00 00	 mov	 eax, 8
  00452	48 6b c0 f1	 imul	 rax, rax, -15
  00456	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0045a	48 03 c8	 add	 rcx, rax
  0045d	48 8b c1	 mov	 rax, rcx
  00460	b9 08 00 00 00	 mov	 ecx, 8
  00465	48 6b c9 f1	 imul	 rcx, rcx, -15
  00469	4c 8b c8	 mov	 r9, rax
  0046c	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00473	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00477	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0047b	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0047f	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00484	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 574  :             r = _DIVREM_SINGLE_UNIT(r, up[-16], v, &qp[-16]);

  00488	b8 08 00 00 00	 mov	 eax, 8
  0048d	48 6b c0 f0	 imul	 rax, rax, -16
  00491	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00495	48 03 c8	 add	 rcx, rax
  00498	48 8b c1	 mov	 rax, rcx
  0049b	b9 08 00 00 00	 mov	 ecx, 8
  004a0	48 6b c9 f0	 imul	 rcx, rcx, -16
  004a4	4c 8b c8	 mov	 r9, rax
  004a7	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  004ae	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  004b2	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  004b6	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  004ba	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  004bf	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 575  :             r = _DIVREM_SINGLE_UNIT(r, up[-17], v, &qp[-17]);

  004c3	b8 08 00 00 00	 mov	 eax, 8
  004c8	48 6b c0 ef	 imul	 rax, rax, -17
  004cc	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  004d0	48 03 c8	 add	 rcx, rax
  004d3	48 8b c1	 mov	 rax, rcx
  004d6	b9 08 00 00 00	 mov	 ecx, 8
  004db	48 6b c9 ef	 imul	 rcx, rcx, -17
  004df	4c 8b c8	 mov	 r9, rax
  004e2	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  004e9	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  004ed	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  004f1	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  004f5	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  004fa	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 576  :             r = _DIVREM_SINGLE_UNIT(r, up[-18], v, &qp[-18]);

  004fe	b8 08 00 00 00	 mov	 eax, 8
  00503	48 6b c0 ee	 imul	 rax, rax, -18
  00507	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0050b	48 03 c8	 add	 rcx, rax
  0050e	48 8b c1	 mov	 rax, rcx
  00511	b9 08 00 00 00	 mov	 ecx, 8
  00516	48 6b c9 ee	 imul	 rcx, rcx, -18
  0051a	4c 8b c8	 mov	 r9, rax
  0051d	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00524	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00528	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0052c	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00530	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00535	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 577  :             r = _DIVREM_SINGLE_UNIT(r, up[-19], v, &qp[-19]);

  00539	b8 08 00 00 00	 mov	 eax, 8
  0053e	48 6b c0 ed	 imul	 rax, rax, -19
  00542	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00546	48 03 c8	 add	 rcx, rax
  00549	48 8b c1	 mov	 rax, rcx
  0054c	b9 08 00 00 00	 mov	 ecx, 8
  00551	48 6b c9 ed	 imul	 rcx, rcx, -19
  00555	4c 8b c8	 mov	 r9, rax
  00558	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0055f	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00563	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00567	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0056b	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00570	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 578  :             r = _DIVREM_SINGLE_UNIT(r, up[-20], v, &qp[-20]);

  00574	b8 08 00 00 00	 mov	 eax, 8
  00579	48 6b c0 ec	 imul	 rax, rax, -20
  0057d	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00581	48 03 c8	 add	 rcx, rax
  00584	48 8b c1	 mov	 rax, rcx
  00587	b9 08 00 00 00	 mov	 ecx, 8
  0058c	48 6b c9 ec	 imul	 rcx, rcx, -20
  00590	4c 8b c8	 mov	 r9, rax
  00593	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0059a	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0059e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  005a2	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  005a6	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  005ab	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 579  :             r = _DIVREM_SINGLE_UNIT(r, up[-21], v, &qp[-21]);

  005af	b8 08 00 00 00	 mov	 eax, 8
  005b4	48 6b c0 eb	 imul	 rax, rax, -21
  005b8	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  005bc	48 03 c8	 add	 rcx, rax
  005bf	48 8b c1	 mov	 rax, rcx
  005c2	b9 08 00 00 00	 mov	 ecx, 8
  005c7	48 6b c9 eb	 imul	 rcx, rcx, -21
  005cb	4c 8b c8	 mov	 r9, rax
  005ce	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  005d5	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  005d9	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  005dd	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  005e1	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  005e6	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 580  :             r = _DIVREM_SINGLE_UNIT(r, up[-22], v, &qp[-22]);

  005ea	b8 08 00 00 00	 mov	 eax, 8
  005ef	48 6b c0 ea	 imul	 rax, rax, -22
  005f3	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  005f7	48 03 c8	 add	 rcx, rax
  005fa	48 8b c1	 mov	 rax, rcx
  005fd	b9 08 00 00 00	 mov	 ecx, 8
  00602	48 6b c9 ea	 imul	 rcx, rcx, -22
  00606	4c 8b c8	 mov	 r9, rax
  00609	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00610	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00614	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00618	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0061c	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00621	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 581  :             r = _DIVREM_SINGLE_UNIT(r, up[-23], v, &qp[-23]);

  00625	b8 08 00 00 00	 mov	 eax, 8
  0062a	48 6b c0 e9	 imul	 rax, rax, -23
  0062e	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00632	48 03 c8	 add	 rcx, rax
  00635	48 8b c1	 mov	 rax, rcx
  00638	b9 08 00 00 00	 mov	 ecx, 8
  0063d	48 6b c9 e9	 imul	 rcx, rcx, -23
  00641	4c 8b c8	 mov	 r9, rax
  00644	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0064b	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0064f	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00653	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00657	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0065c	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 582  :             r = _DIVREM_SINGLE_UNIT(r, up[-24], v, &qp[-24]);

  00660	b8 08 00 00 00	 mov	 eax, 8
  00665	48 6b c0 e8	 imul	 rax, rax, -24
  00669	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0066d	48 03 c8	 add	 rcx, rax
  00670	48 8b c1	 mov	 rax, rcx
  00673	b9 08 00 00 00	 mov	 ecx, 8
  00678	48 6b c9 e8	 imul	 rcx, rcx, -24
  0067c	4c 8b c8	 mov	 r9, rax
  0067f	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00686	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0068a	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0068e	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00692	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00697	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 583  :             r = _DIVREM_SINGLE_UNIT(r, up[-25], v, &qp[-25]);

  0069b	b8 08 00 00 00	 mov	 eax, 8
  006a0	48 6b c0 e7	 imul	 rax, rax, -25
  006a4	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  006a8	48 03 c8	 add	 rcx, rax
  006ab	48 8b c1	 mov	 rax, rcx
  006ae	b9 08 00 00 00	 mov	 ecx, 8
  006b3	48 6b c9 e7	 imul	 rcx, rcx, -25
  006b7	4c 8b c8	 mov	 r9, rax
  006ba	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  006c1	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  006c5	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  006c9	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  006cd	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  006d2	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 584  :             r = _DIVREM_SINGLE_UNIT(r, up[-26], v, &qp[-26]);

  006d6	b8 08 00 00 00	 mov	 eax, 8
  006db	48 6b c0 e6	 imul	 rax, rax, -26
  006df	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  006e3	48 03 c8	 add	 rcx, rax
  006e6	48 8b c1	 mov	 rax, rcx
  006e9	b9 08 00 00 00	 mov	 ecx, 8
  006ee	48 6b c9 e6	 imul	 rcx, rcx, -26
  006f2	4c 8b c8	 mov	 r9, rax
  006f5	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  006fc	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00700	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00704	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00708	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0070d	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 585  :             r = _DIVREM_SINGLE_UNIT(r, up[-27], v, &qp[-27]);

  00711	b8 08 00 00 00	 mov	 eax, 8
  00716	48 6b c0 e5	 imul	 rax, rax, -27
  0071a	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0071e	48 03 c8	 add	 rcx, rax
  00721	48 8b c1	 mov	 rax, rcx
  00724	b9 08 00 00 00	 mov	 ecx, 8
  00729	48 6b c9 e5	 imul	 rcx, rcx, -27
  0072d	4c 8b c8	 mov	 r9, rax
  00730	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00737	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0073b	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0073f	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00743	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00748	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 586  :             r = _DIVREM_SINGLE_UNIT(r, up[-28], v, &qp[-28]);

  0074c	b8 08 00 00 00	 mov	 eax, 8
  00751	48 6b c0 e4	 imul	 rax, rax, -28
  00755	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00759	48 03 c8	 add	 rcx, rax
  0075c	48 8b c1	 mov	 rax, rcx
  0075f	b9 08 00 00 00	 mov	 ecx, 8
  00764	48 6b c9 e4	 imul	 rcx, rcx, -28
  00768	4c 8b c8	 mov	 r9, rax
  0076b	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00772	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00776	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0077a	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0077e	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00783	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 587  :             r = _DIVREM_SINGLE_UNIT(r, up[-29], v, &qp[-29]);

  00787	b8 08 00 00 00	 mov	 eax, 8
  0078c	48 6b c0 e3	 imul	 rax, rax, -29
  00790	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00794	48 03 c8	 add	 rcx, rax
  00797	48 8b c1	 mov	 rax, rcx
  0079a	b9 08 00 00 00	 mov	 ecx, 8
  0079f	48 6b c9 e3	 imul	 rcx, rcx, -29
  007a3	4c 8b c8	 mov	 r9, rax
  007a6	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  007ad	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  007b1	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  007b5	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  007b9	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  007be	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 588  :             r = _DIVREM_SINGLE_UNIT(r, up[-30], v, &qp[-30]);

  007c2	b8 08 00 00 00	 mov	 eax, 8
  007c7	48 6b c0 e2	 imul	 rax, rax, -30
  007cb	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  007cf	48 03 c8	 add	 rcx, rax
  007d2	48 8b c1	 mov	 rax, rcx
  007d5	b9 08 00 00 00	 mov	 ecx, 8
  007da	48 6b c9 e2	 imul	 rcx, rcx, -30
  007de	4c 8b c8	 mov	 r9, rax
  007e1	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  007e8	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  007ec	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  007f0	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  007f4	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  007f9	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 589  :             r = _DIVREM_SINGLE_UNIT(r, up[-31], v, &qp[-31]);

  007fd	b8 08 00 00 00	 mov	 eax, 8
  00802	48 6b c0 e1	 imul	 rax, rax, -31
  00806	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0080a	48 03 c8	 add	 rcx, rax
  0080d	48 8b c1	 mov	 rax, rcx
  00810	b9 08 00 00 00	 mov	 ecx, 8
  00815	48 6b c9 e1	 imul	 rcx, rcx, -31
  00819	4c 8b c8	 mov	 r9, rax
  0081c	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00823	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00827	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0082b	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0082f	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00834	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 590  :             up -= 32;

  00838	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0083c	48 2d 00 01 00
	00		 sub	 rax, 256		; 00000100H
  00842	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 591  :             qp -= 32;

  00846	48 8b 45 28	 mov	 rax, QWORD PTR qp$[rbp]
  0084a	48 2d 00 01 00
	00		 sub	 rax, 256		; 00000100H
  00850	48 89 45 28	 mov	 QWORD PTR qp$[rbp], rax

; 592  :             --count;

  00854	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  0085b	48 ff c8	 dec	 rax
  0085e	48 89 85 88 00
	00 00		 mov	 QWORD PTR count$[rbp], rax

; 593  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 594  :             if (sizeof(r) == sizeof(_UINT64_T))

  00865	33 c0		 xor	 eax, eax
  00867	83 f8 01	 cmp	 eax, 1
  0086a	74 0c		 je	 SHORT $LN7@DivRem_X_1

; 595  :                 AddToDIV64Counter(32);

  0086c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00871	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 596  :             else

  00876	eb 0a		 jmp	 SHORT $LN8@DivRem_X_1
$LN7@DivRem_X_1:

; 597  :                 AddToDIV32Counter(32);

  00878	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0087d	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
$LN8@DivRem_X_1:

; 598  : #endif
; 599  :         }

  00882	e9 43 f8 ff ff	 jmp	 $LN4@DivRem_X_1
$LN5@DivRem_X_1:

; 600  : 
; 601  :         if (u_count & 0x10)

  00887	48 8b 45 48	 mov	 rax, QWORD PTR u_count$[rbp]
  0088b	48 83 e0 10	 and	 rax, 16
  0088f	48 85 c0	 test	 rax, rax
  00892	0f 84 e9 03 00
	00		 je	 $LN9@DivRem_X_1

; 602  :         {
; 603  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  00898	b8 08 00 00 00	 mov	 eax, 8
  0089d	48 6b c0 00	 imul	 rax, rax, 0
  008a1	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  008a5	48 03 c8	 add	 rcx, rax
  008a8	48 8b c1	 mov	 rax, rcx
  008ab	b9 08 00 00 00	 mov	 ecx, 8
  008b0	48 6b c9 00	 imul	 rcx, rcx, 0
  008b4	4c 8b c8	 mov	 r9, rax
  008b7	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  008be	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  008c2	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  008c6	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  008ca	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  008cf	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 604  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

  008d3	b8 08 00 00 00	 mov	 eax, 8
  008d8	48 6b c0 ff	 imul	 rax, rax, -1
  008dc	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  008e0	48 03 c8	 add	 rcx, rax
  008e3	48 8b c1	 mov	 rax, rcx
  008e6	b9 08 00 00 00	 mov	 ecx, 8
  008eb	48 6b c9 ff	 imul	 rcx, rcx, -1
  008ef	4c 8b c8	 mov	 r9, rax
  008f2	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  008f9	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  008fd	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00901	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00905	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  0090a	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 605  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

  0090e	b8 08 00 00 00	 mov	 eax, 8
  00913	48 6b c0 fe	 imul	 rax, rax, -2
  00917	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0091b	48 03 c8	 add	 rcx, rax
  0091e	48 8b c1	 mov	 rax, rcx
  00921	b9 08 00 00 00	 mov	 ecx, 8
  00926	48 6b c9 fe	 imul	 rcx, rcx, -2
  0092a	4c 8b c8	 mov	 r9, rax
  0092d	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00934	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00938	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0093c	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00940	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00945	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 606  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

  00949	b8 08 00 00 00	 mov	 eax, 8
  0094e	48 6b c0 fd	 imul	 rax, rax, -3
  00952	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00956	48 03 c8	 add	 rcx, rax
  00959	48 8b c1	 mov	 rax, rcx
  0095c	b9 08 00 00 00	 mov	 ecx, 8
  00961	48 6b c9 fd	 imul	 rcx, rcx, -3
  00965	4c 8b c8	 mov	 r9, rax
  00968	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  0096f	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00973	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00977	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0097b	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00980	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 607  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

  00984	b8 08 00 00 00	 mov	 eax, 8
  00989	48 6b c0 fc	 imul	 rax, rax, -4
  0098d	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00991	48 03 c8	 add	 rcx, rax
  00994	48 8b c1	 mov	 rax, rcx
  00997	b9 08 00 00 00	 mov	 ecx, 8
  0099c	48 6b c9 fc	 imul	 rcx, rcx, -4
  009a0	4c 8b c8	 mov	 r9, rax
  009a3	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  009aa	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  009ae	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  009b2	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  009b6	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  009bb	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 608  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

  009bf	b8 08 00 00 00	 mov	 eax, 8
  009c4	48 6b c0 fb	 imul	 rax, rax, -5
  009c8	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  009cc	48 03 c8	 add	 rcx, rax
  009cf	48 8b c1	 mov	 rax, rcx
  009d2	b9 08 00 00 00	 mov	 ecx, 8
  009d7	48 6b c9 fb	 imul	 rcx, rcx, -5
  009db	4c 8b c8	 mov	 r9, rax
  009de	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  009e5	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  009e9	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  009ed	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  009f1	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  009f6	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 609  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

  009fa	b8 08 00 00 00	 mov	 eax, 8
  009ff	48 6b c0 fa	 imul	 rax, rax, -6
  00a03	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00a07	48 03 c8	 add	 rcx, rax
  00a0a	48 8b c1	 mov	 rax, rcx
  00a0d	b9 08 00 00 00	 mov	 ecx, 8
  00a12	48 6b c9 fa	 imul	 rcx, rcx, -6
  00a16	4c 8b c8	 mov	 r9, rax
  00a19	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00a20	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00a24	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00a28	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00a2c	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00a31	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 610  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

  00a35	b8 08 00 00 00	 mov	 eax, 8
  00a3a	48 6b c0 f9	 imul	 rax, rax, -7
  00a3e	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00a42	48 03 c8	 add	 rcx, rax
  00a45	48 8b c1	 mov	 rax, rcx
  00a48	b9 08 00 00 00	 mov	 ecx, 8
  00a4d	48 6b c9 f9	 imul	 rcx, rcx, -7
  00a51	4c 8b c8	 mov	 r9, rax
  00a54	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00a5b	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00a5f	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00a63	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00a67	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00a6c	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 611  :             r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &qp[-8]);

  00a70	b8 08 00 00 00	 mov	 eax, 8
  00a75	48 6b c0 f8	 imul	 rax, rax, -8
  00a79	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00a7d	48 03 c8	 add	 rcx, rax
  00a80	48 8b c1	 mov	 rax, rcx
  00a83	b9 08 00 00 00	 mov	 ecx, 8
  00a88	48 6b c9 f8	 imul	 rcx, rcx, -8
  00a8c	4c 8b c8	 mov	 r9, rax
  00a8f	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00a96	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00a9a	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00a9e	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00aa2	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00aa7	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 612  :             r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &qp[-9]);

  00aab	b8 08 00 00 00	 mov	 eax, 8
  00ab0	48 6b c0 f7	 imul	 rax, rax, -9
  00ab4	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00ab8	48 03 c8	 add	 rcx, rax
  00abb	48 8b c1	 mov	 rax, rcx
  00abe	b9 08 00 00 00	 mov	 ecx, 8
  00ac3	48 6b c9 f7	 imul	 rcx, rcx, -9
  00ac7	4c 8b c8	 mov	 r9, rax
  00aca	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00ad1	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00ad5	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00ad9	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00add	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00ae2	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 613  :             r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &qp[-10]);

  00ae6	b8 08 00 00 00	 mov	 eax, 8
  00aeb	48 6b c0 f6	 imul	 rax, rax, -10
  00aef	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00af3	48 03 c8	 add	 rcx, rax
  00af6	48 8b c1	 mov	 rax, rcx
  00af9	b9 08 00 00 00	 mov	 ecx, 8
  00afe	48 6b c9 f6	 imul	 rcx, rcx, -10
  00b02	4c 8b c8	 mov	 r9, rax
  00b05	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00b0c	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00b10	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00b14	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00b18	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00b1d	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 614  :             r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &qp[-11]);

  00b21	b8 08 00 00 00	 mov	 eax, 8
  00b26	48 6b c0 f5	 imul	 rax, rax, -11
  00b2a	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00b2e	48 03 c8	 add	 rcx, rax
  00b31	48 8b c1	 mov	 rax, rcx
  00b34	b9 08 00 00 00	 mov	 ecx, 8
  00b39	48 6b c9 f5	 imul	 rcx, rcx, -11
  00b3d	4c 8b c8	 mov	 r9, rax
  00b40	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00b47	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00b4b	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00b4f	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00b53	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00b58	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 615  :             r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &qp[-12]);

  00b5c	b8 08 00 00 00	 mov	 eax, 8
  00b61	48 6b c0 f4	 imul	 rax, rax, -12
  00b65	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00b69	48 03 c8	 add	 rcx, rax
  00b6c	48 8b c1	 mov	 rax, rcx
  00b6f	b9 08 00 00 00	 mov	 ecx, 8
  00b74	48 6b c9 f4	 imul	 rcx, rcx, -12
  00b78	4c 8b c8	 mov	 r9, rax
  00b7b	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00b82	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00b86	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00b8a	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00b8e	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00b93	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 616  :             r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &qp[-13]);

  00b97	b8 08 00 00 00	 mov	 eax, 8
  00b9c	48 6b c0 f3	 imul	 rax, rax, -13
  00ba0	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00ba4	48 03 c8	 add	 rcx, rax
  00ba7	48 8b c1	 mov	 rax, rcx
  00baa	b9 08 00 00 00	 mov	 ecx, 8
  00baf	48 6b c9 f3	 imul	 rcx, rcx, -13
  00bb3	4c 8b c8	 mov	 r9, rax
  00bb6	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00bbd	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00bc1	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00bc5	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00bc9	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00bce	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 617  :             r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &qp[-14]);

  00bd2	b8 08 00 00 00	 mov	 eax, 8
  00bd7	48 6b c0 f2	 imul	 rax, rax, -14
  00bdb	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00bdf	48 03 c8	 add	 rcx, rax
  00be2	48 8b c1	 mov	 rax, rcx
  00be5	b9 08 00 00 00	 mov	 ecx, 8
  00bea	48 6b c9 f2	 imul	 rcx, rcx, -14
  00bee	4c 8b c8	 mov	 r9, rax
  00bf1	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00bf8	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00bfc	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00c00	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00c04	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00c09	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 618  :             r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &qp[-15]);

  00c0d	b8 08 00 00 00	 mov	 eax, 8
  00c12	48 6b c0 f1	 imul	 rax, rax, -15
  00c16	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00c1a	48 03 c8	 add	 rcx, rax
  00c1d	48 8b c1	 mov	 rax, rcx
  00c20	b9 08 00 00 00	 mov	 ecx, 8
  00c25	48 6b c9 f1	 imul	 rcx, rcx, -15
  00c29	4c 8b c8	 mov	 r9, rax
  00c2c	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00c33	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00c37	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00c3b	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00c3f	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00c44	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 619  :             up -= 16;

  00c48	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00c4c	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  00c52	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 620  :             qp -= 16;

  00c56	48 8b 45 28	 mov	 rax, QWORD PTR qp$[rbp]
  00c5a	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  00c60	48 89 45 28	 mov	 QWORD PTR qp$[rbp], rax

; 621  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 622  :             if (sizeof(r) == sizeof(_UINT64_T))

  00c64	33 c0		 xor	 eax, eax
  00c66	83 f8 01	 cmp	 eax, 1
  00c69	74 0c		 je	 SHORT $LN10@DivRem_X_1

; 623  :                 AddToDIV64Counter(16);

  00c6b	b9 10 00 00 00	 mov	 ecx, 16
  00c70	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 624  :             else

  00c75	eb 0a		 jmp	 SHORT $LN11@DivRem_X_1
$LN10@DivRem_X_1:

; 625  :                 AddToDIV32Counter(16);

  00c77	b9 10 00 00 00	 mov	 ecx, 16
  00c7c	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
$LN11@DivRem_X_1:
$LN9@DivRem_X_1:

; 626  : #endif
; 627  :         }
; 628  : 
; 629  :         if (u_count & 0x8)

  00c81	48 8b 45 48	 mov	 rax, QWORD PTR u_count$[rbp]
  00c85	48 83 e0 08	 and	 rax, 8
  00c89	48 85 c0	 test	 rax, rax
  00c8c	0f 84 0d 02 00
	00		 je	 $LN12@DivRem_X_1

; 630  :         {
; 631  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  00c92	b8 08 00 00 00	 mov	 eax, 8
  00c97	48 6b c0 00	 imul	 rax, rax, 0
  00c9b	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00c9f	48 03 c8	 add	 rcx, rax
  00ca2	48 8b c1	 mov	 rax, rcx
  00ca5	b9 08 00 00 00	 mov	 ecx, 8
  00caa	48 6b c9 00	 imul	 rcx, rcx, 0
  00cae	4c 8b c8	 mov	 r9, rax
  00cb1	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00cb8	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00cbc	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00cc0	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00cc4	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00cc9	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 632  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

  00ccd	b8 08 00 00 00	 mov	 eax, 8
  00cd2	48 6b c0 ff	 imul	 rax, rax, -1
  00cd6	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00cda	48 03 c8	 add	 rcx, rax
  00cdd	48 8b c1	 mov	 rax, rcx
  00ce0	b9 08 00 00 00	 mov	 ecx, 8
  00ce5	48 6b c9 ff	 imul	 rcx, rcx, -1
  00ce9	4c 8b c8	 mov	 r9, rax
  00cec	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00cf3	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00cf7	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00cfb	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00cff	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00d04	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 633  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

  00d08	b8 08 00 00 00	 mov	 eax, 8
  00d0d	48 6b c0 fe	 imul	 rax, rax, -2
  00d11	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00d15	48 03 c8	 add	 rcx, rax
  00d18	48 8b c1	 mov	 rax, rcx
  00d1b	b9 08 00 00 00	 mov	 ecx, 8
  00d20	48 6b c9 fe	 imul	 rcx, rcx, -2
  00d24	4c 8b c8	 mov	 r9, rax
  00d27	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00d2e	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00d32	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00d36	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00d3a	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00d3f	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 634  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

  00d43	b8 08 00 00 00	 mov	 eax, 8
  00d48	48 6b c0 fd	 imul	 rax, rax, -3
  00d4c	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00d50	48 03 c8	 add	 rcx, rax
  00d53	48 8b c1	 mov	 rax, rcx
  00d56	b9 08 00 00 00	 mov	 ecx, 8
  00d5b	48 6b c9 fd	 imul	 rcx, rcx, -3
  00d5f	4c 8b c8	 mov	 r9, rax
  00d62	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00d69	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00d6d	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00d71	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00d75	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00d7a	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 635  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

  00d7e	b8 08 00 00 00	 mov	 eax, 8
  00d83	48 6b c0 fc	 imul	 rax, rax, -4
  00d87	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00d8b	48 03 c8	 add	 rcx, rax
  00d8e	48 8b c1	 mov	 rax, rcx
  00d91	b9 08 00 00 00	 mov	 ecx, 8
  00d96	48 6b c9 fc	 imul	 rcx, rcx, -4
  00d9a	4c 8b c8	 mov	 r9, rax
  00d9d	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00da4	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00da8	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00dac	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00db0	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00db5	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 636  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

  00db9	b8 08 00 00 00	 mov	 eax, 8
  00dbe	48 6b c0 fb	 imul	 rax, rax, -5
  00dc2	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00dc6	48 03 c8	 add	 rcx, rax
  00dc9	48 8b c1	 mov	 rax, rcx
  00dcc	b9 08 00 00 00	 mov	 ecx, 8
  00dd1	48 6b c9 fb	 imul	 rcx, rcx, -5
  00dd5	4c 8b c8	 mov	 r9, rax
  00dd8	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00ddf	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00de3	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00de7	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00deb	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00df0	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 637  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

  00df4	b8 08 00 00 00	 mov	 eax, 8
  00df9	48 6b c0 fa	 imul	 rax, rax, -6
  00dfd	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00e01	48 03 c8	 add	 rcx, rax
  00e04	48 8b c1	 mov	 rax, rcx
  00e07	b9 08 00 00 00	 mov	 ecx, 8
  00e0c	48 6b c9 fa	 imul	 rcx, rcx, -6
  00e10	4c 8b c8	 mov	 r9, rax
  00e13	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00e1a	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00e1e	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00e22	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00e26	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00e2b	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 638  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

  00e2f	b8 08 00 00 00	 mov	 eax, 8
  00e34	48 6b c0 f9	 imul	 rax, rax, -7
  00e38	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00e3c	48 03 c8	 add	 rcx, rax
  00e3f	48 8b c1	 mov	 rax, rcx
  00e42	b9 08 00 00 00	 mov	 ecx, 8
  00e47	48 6b c9 f9	 imul	 rcx, rcx, -7
  00e4b	4c 8b c8	 mov	 r9, rax
  00e4e	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00e55	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00e59	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00e5d	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00e61	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00e66	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 639  :             up -= 8;

  00e6a	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00e6e	48 83 e8 40	 sub	 rax, 64			; 00000040H
  00e72	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 640  :             qp -= 8;

  00e76	48 8b 45 28	 mov	 rax, QWORD PTR qp$[rbp]
  00e7a	48 83 e8 40	 sub	 rax, 64			; 00000040H
  00e7e	48 89 45 28	 mov	 QWORD PTR qp$[rbp], rax

; 641  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 642  :             if (sizeof(r) == sizeof(_UINT64_T))

  00e82	33 c0		 xor	 eax, eax
  00e84	83 f8 01	 cmp	 eax, 1
  00e87	74 0c		 je	 SHORT $LN13@DivRem_X_1

; 643  :                 AddToDIV64Counter(8);

  00e89	b9 08 00 00 00	 mov	 ecx, 8
  00e8e	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 644  :             else

  00e93	eb 0a		 jmp	 SHORT $LN14@DivRem_X_1
$LN13@DivRem_X_1:

; 645  :                 AddToDIV32Counter(8);

  00e95	b9 08 00 00 00	 mov	 ecx, 8
  00e9a	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
$LN14@DivRem_X_1:
$LN12@DivRem_X_1:

; 646  : #endif
; 647  :         }
; 648  : 
; 649  :         if (u_count & 0x4)

  00e9f	48 8b 45 48	 mov	 rax, QWORD PTR u_count$[rbp]
  00ea3	48 83 e0 04	 and	 rax, 4
  00ea7	48 85 c0	 test	 rax, rax
  00eaa	0f 84 21 01 00
	00		 je	 $LN15@DivRem_X_1

; 650  :         {
; 651  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  00eb0	b8 08 00 00 00	 mov	 eax, 8
  00eb5	48 6b c0 00	 imul	 rax, rax, 0
  00eb9	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00ebd	48 03 c8	 add	 rcx, rax
  00ec0	48 8b c1	 mov	 rax, rcx
  00ec3	b9 08 00 00 00	 mov	 ecx, 8
  00ec8	48 6b c9 00	 imul	 rcx, rcx, 0
  00ecc	4c 8b c8	 mov	 r9, rax
  00ecf	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00ed6	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00eda	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00ede	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00ee2	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00ee7	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 652  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

  00eeb	b8 08 00 00 00	 mov	 eax, 8
  00ef0	48 6b c0 ff	 imul	 rax, rax, -1
  00ef4	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00ef8	48 03 c8	 add	 rcx, rax
  00efb	48 8b c1	 mov	 rax, rcx
  00efe	b9 08 00 00 00	 mov	 ecx, 8
  00f03	48 6b c9 ff	 imul	 rcx, rcx, -1
  00f07	4c 8b c8	 mov	 r9, rax
  00f0a	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00f11	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00f15	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00f19	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00f1d	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00f22	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 653  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

  00f26	b8 08 00 00 00	 mov	 eax, 8
  00f2b	48 6b c0 fe	 imul	 rax, rax, -2
  00f2f	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00f33	48 03 c8	 add	 rcx, rax
  00f36	48 8b c1	 mov	 rax, rcx
  00f39	b9 08 00 00 00	 mov	 ecx, 8
  00f3e	48 6b c9 fe	 imul	 rcx, rcx, -2
  00f42	4c 8b c8	 mov	 r9, rax
  00f45	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00f4c	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00f50	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00f54	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00f58	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00f5d	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 654  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

  00f61	b8 08 00 00 00	 mov	 eax, 8
  00f66	48 6b c0 fd	 imul	 rax, rax, -3
  00f6a	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00f6e	48 03 c8	 add	 rcx, rax
  00f71	48 8b c1	 mov	 rax, rcx
  00f74	b9 08 00 00 00	 mov	 ecx, 8
  00f79	48 6b c9 fd	 imul	 rcx, rcx, -3
  00f7d	4c 8b c8	 mov	 r9, rax
  00f80	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  00f87	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00f8b	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  00f8f	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  00f93	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  00f98	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 655  :             up -= 4;

  00f9c	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  00fa0	48 83 e8 20	 sub	 rax, 32			; 00000020H
  00fa4	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 656  :             qp -= 4;

  00fa8	48 8b 45 28	 mov	 rax, QWORD PTR qp$[rbp]
  00fac	48 83 e8 20	 sub	 rax, 32			; 00000020H
  00fb0	48 89 45 28	 mov	 QWORD PTR qp$[rbp], rax

; 657  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 658  :             if (sizeof(r) == sizeof(_UINT64_T))

  00fb4	33 c0		 xor	 eax, eax
  00fb6	83 f8 01	 cmp	 eax, 1
  00fb9	74 0c		 je	 SHORT $LN16@DivRem_X_1

; 659  :                 AddToDIV64Counter(4);

  00fbb	b9 04 00 00 00	 mov	 ecx, 4
  00fc0	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 660  :             else

  00fc5	eb 0a		 jmp	 SHORT $LN17@DivRem_X_1
$LN16@DivRem_X_1:

; 661  :                 AddToDIV32Counter(4);

  00fc7	b9 04 00 00 00	 mov	 ecx, 4
  00fcc	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
$LN17@DivRem_X_1:
$LN15@DivRem_X_1:

; 662  : #endif
; 663  :         }
; 664  : 
; 665  :         if (u_count & 0x2)

  00fd1	48 8b 45 48	 mov	 rax, QWORD PTR u_count$[rbp]
  00fd5	48 83 e0 02	 and	 rax, 2
  00fd9	48 85 c0	 test	 rax, rax
  00fdc	0f 84 ab 00 00
	00		 je	 $LN18@DivRem_X_1

; 666  :         {
; 667  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  00fe2	b8 08 00 00 00	 mov	 eax, 8
  00fe7	48 6b c0 00	 imul	 rax, rax, 0
  00feb	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  00fef	48 03 c8	 add	 rcx, rax
  00ff2	48 8b c1	 mov	 rax, rcx
  00ff5	b9 08 00 00 00	 mov	 ecx, 8
  00ffa	48 6b c9 00	 imul	 rcx, rcx, 0
  00ffe	4c 8b c8	 mov	 r9, rax
  01001	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  01008	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0100c	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  01010	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  01014	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  01019	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 668  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

  0101d	b8 08 00 00 00	 mov	 eax, 8
  01022	48 6b c0 ff	 imul	 rax, rax, -1
  01026	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  0102a	48 03 c8	 add	 rcx, rax
  0102d	48 8b c1	 mov	 rax, rcx
  01030	b9 08 00 00 00	 mov	 ecx, 8
  01035	48 6b c9 ff	 imul	 rcx, rcx, -1
  01039	4c 8b c8	 mov	 r9, rax
  0103c	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  01043	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  01047	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  0104b	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0104f	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  01054	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 669  :             up -= 2;

  01058	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  0105c	48 83 e8 10	 sub	 rax, 16
  01060	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 670  :             qp -= 2;

  01064	48 8b 45 28	 mov	 rax, QWORD PTR qp$[rbp]
  01068	48 83 e8 10	 sub	 rax, 16
  0106c	48 89 45 28	 mov	 QWORD PTR qp$[rbp], rax

; 671  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 672  :             if (sizeof(r) == sizeof(_UINT64_T))

  01070	33 c0		 xor	 eax, eax
  01072	83 f8 01	 cmp	 eax, 1
  01075	74 0c		 je	 SHORT $LN19@DivRem_X_1

; 673  :                 AddToDIV64Counter(2);

  01077	b9 02 00 00 00	 mov	 ecx, 2
  0107c	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 674  :             else

  01081	eb 0a		 jmp	 SHORT $LN20@DivRem_X_1
$LN19@DivRem_X_1:

; 675  :                 AddToDIV32Counter(2);

  01083	b9 02 00 00 00	 mov	 ecx, 2
  01088	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
$LN20@DivRem_X_1:
$LN18@DivRem_X_1:

; 676  : #endif
; 677  :         }
; 678  : 
; 679  :         if (u_count & 0x1)

  0108d	48 8b 45 48	 mov	 rax, QWORD PTR u_count$[rbp]
  01091	48 83 e0 01	 and	 rax, 1
  01095	48 85 c0	 test	 rax, rax
  01098	74 66		 je	 SHORT $LN21@DivRem_X_1

; 680  :         {
; 681  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  0109a	b8 08 00 00 00	 mov	 eax, 8
  0109f	48 6b c0 00	 imul	 rax, rax, 0
  010a3	48 8b 4d 28	 mov	 rcx, QWORD PTR qp$[rbp]
  010a7	48 03 c8	 add	 rcx, rax
  010aa	48 8b c1	 mov	 rax, rcx
  010ad	b9 08 00 00 00	 mov	 ecx, 8
  010b2	48 6b c9 00	 imul	 rcx, rcx, 0
  010b6	4c 8b c8	 mov	 r9, rax
  010b9	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR v$[rbp]
  010c0	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  010c4	48 8b 14 08	 mov	 rdx, QWORD PTR [rax+rcx]
  010c8	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  010cc	e8 00 00 00 00	 call	 _DIVREM_SINGLE_UNIT
  010d1	48 89 45 68	 mov	 QWORD PTR r$[rbp], rax

; 682  :             up -= 1;

  010d5	48 8b 45 08	 mov	 rax, QWORD PTR up$[rbp]
  010d9	48 83 e8 08	 sub	 rax, 8
  010dd	48 89 45 08	 mov	 QWORD PTR up$[rbp], rax

; 683  :             qp -= 1;

  010e1	48 8b 45 28	 mov	 rax, QWORD PTR qp$[rbp]
  010e5	48 83 e8 08	 sub	 rax, 8
  010e9	48 89 45 28	 mov	 QWORD PTR qp$[rbp], rax

; 684  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 685  :             if (sizeof(r) == sizeof(_UINT64_T))

  010ed	33 c0		 xor	 eax, eax
  010ef	83 f8 01	 cmp	 eax, 1
  010f2	74 07		 je	 SHORT $LN22@DivRem_X_1

; 686  :                 IncrementDIV64Counter();

  010f4	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 687  :             else

  010f9	eb 05		 jmp	 SHORT $LN23@DivRem_X_1
$LN22@DivRem_X_1:

; 688  :                 IncrementDIV32Counter();

  010fb	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN23@DivRem_X_1:
$LN21@DivRem_X_1:

; 689  : #endif
; 690  :         }
; 691  : 
; 692  :         *r_buf = r;

  01100	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR r_buf$[rbp]
  01107	48 8b 4d 68	 mov	 rcx, QWORD PTR r$[rbp]
  0110b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 693  :     }

  0110e	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  01115	5f		 pop	 rdi
  01116	5d		 pop	 rbp
  01117	c3		 ret	 0
?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPEA_K_K100@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_1W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT

; 295  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 296  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT

; 291  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 290  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 291  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 292  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT

; 286  :         {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  0004c	4c 8b 8d 10 01
	00 00		 mov	 r9, QWORD PTR data$[rbp]
  00053	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0005a	ba 00 ff ff ff	 mov	 edx, -256		; ffffffffffffff00H
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0006b	90		 npad	 1

; 286  :         {

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 287  :         }

  0007d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException, COMDAT

; 181  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 182  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1DivisionByZeroException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException, COMDAT

; 177  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 176  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 177  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 178  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException, COMDAT

; 172  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)

  00047	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0004e	ba fb ff ff ff	 mov	 edx, -5
  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005f	90		 npad	 1

; 172  :         {

  00060	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
  0006e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 173  :         }

  00071	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00078	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007f	5f		 pop	 rdi
  00080	5d		 pop	 rbp
  00081	c3		 ret	 0
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0DivisionByZeroException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT

; 124  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 125  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT

; 120  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 119  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 120  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 121  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT

; 115  :         {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  0004c	4c 8b 8d 10 01
	00 00		 mov	 r9, QWORD PTR param_name$[rbp]
  00053	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0005a	ba fe ff ff ff	 mov	 edx, -2
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0006b	90		 npad	 1

; 115  :         {

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 116  :         }

  0007d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT

; 70   :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 62   :         Exception(const Exception& p) noexcept(true)

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@XZ ; std::exception::exception
  00053	90		 npad	 1
  00054	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00062	48 89 08	 mov	 QWORD PTR [rax], rcx

; 63   :         {
; 64   :             _code = p._code;

  00065	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00073	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00076	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 65   :             _message = p._message;

  00079	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00087	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0008b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 66   :             _data = p._data;

  0008f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00096	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0009d	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  000a1	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 67   :         }

  000a5	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ac	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b3	5f		 pop	 rdi
  000b4	5d		 pop	 rbp
  000b5	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00038	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0004a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004f	90		 npad	 1
  00050	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00057	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@XZ ; std::exception::exception
  0005c	90		 npad	 1
  0005d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0006b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 55   :         {
; 56   :             _code = code;

  0006e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00075	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR code$[rbp]
  0007b	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 57   :             _message = message;

  0007e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0008c	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 58   :             _data = data;

  00090	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00097	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0009e	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 59   :         }

  000a2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b0	5f		 pop	 rdi
  000b1	5d		 pop	 rbp
  000b2	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00033	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00045	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004a	90		 npad	 1
  0004b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@XZ ; std::exception::exception
  00057	90		 npad	 1
  00058	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00066	48 89 08	 mov	 QWORD PTR [rax], rcx

; 48   :         {
; 49   :             _code = code;

  00069	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00070	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR code$[rbp]
  00076	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 50   :             _message = message;

  00079	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00087	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 51   :             _data = nullptr;

  0008b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00092	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 52   :         }

  0009a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a1	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a8	5f		 pop	 rdi
  000a9	5d		 pop	 rbp
  000aa	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 18 00 00 00	 mov	 edx, 24
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 90   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00042	74 14		 je	 SHORT $LN3@what
  00044	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  00056	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  0005f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  00066	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 92   :     }

  0006d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 85   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 86   :         __std_exception_destroy(&_Data);

  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 c0 08	 add	 rax, 8
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 __std_exception_destroy
  00066	90		 npad	 1

; 87   :     }

  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0exception@std@@QEAA@XZ PROC				; std::exception::exception, COMDAT

; 50   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 49   :         : _Data()

  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 c0 08	 add	 rax, 8
  0005e	48 8b f8	 mov	 rdi, rax
  00061	33 c0		 xor	 eax, eax
  00063	b9 10 00 00 00	 mov	 ecx, 16
  00068	f3 aa		 rep stosb

; 51   :     }

  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??0exception@std@@QEAA@XZ ENDP				; std::exception::exception
_TEXT	ENDS
END
