; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__331E732B_malloc@h DB 01H
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__2C63F5AA_cpuid@c DB 01H
msvcjmc	ENDS
PUBLIC	GetCPUInfo
PUBLIC	__JustMyCode_Default
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetCPUInfo DD imagerel $LN6
	DD	imagerel $LN6+543
	DD	imagerel $unwind$GetCPUInfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_BYTE DD imagerel _ZERO_MEMORY_BYTE
	DD	imagerel _ZERO_MEMORY_BYTE+87
	DD	imagerel $unwind$_ZERO_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cpuid DD	imagerel cpuid
	DD	imagerel cpuid+244
	DD	imagerel $unwind$cpuid
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cpuidex DD imagerel cpuidex
	DD	imagerel cpuidex+247
	DD	imagerel $unwind$cpuidex
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cpuidex DD 025064819H
	DD	011c2321H
	DD	070150022H
	DD	050133014H
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
cpuidex$rtcName$0 DB 072H
	DB	065H
	DB	067H
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+9
cpuidex$rtcVarDesc DD 028H
	DD	010H
	DQ	FLAT:cpuidex$rtcName$0
	ORG $+48
cpuidex$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:cpuidex$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cpuid DD 025064919H
	DD	011d2322H
	DD	070160022H
	DD	050143015H
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
cpuid$rtcName$0 DB 072H
	DB	065H
	DB	067H
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+9
cpuid$rtcVarDesc DD 028H
	DD	010H
	DQ	FLAT:cpuid$rtcName$0
	ORG $+48
cpuid$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:cpuid$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_BYTE DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetCPUInfo DD 035052a01H
	DD	010e3313H
	DD	07007003bH
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
GetCPUInfo$rtcName$0 DB 072H
	DB	065H
	DB	067H
	DB	05fH
	DB	065H
	DB	061H
	DB	078H
	DB	00H
GetCPUInfo$rtcName$1 DB 072H
	DB	065H
	DB	067H
	DB	05fH
	DB	065H
	DB	062H
	DB	078H
	DB	00H
GetCPUInfo$rtcName$2 DB 072H
	DB	065H
	DB	067H
	DB	05fH
	DB	065H
	DB	063H
	DB	078H
	DB	00H
GetCPUInfo$rtcName$3 DB 072H
	DB	065H
	DB	067H
	DB	05fH
	DB	065H
	DB	064H
	DB	078H
	DB	00H
GetCPUInfo$rtcVarDesc DD 094H
	DD	04H
	DQ	FLAT:GetCPUInfo$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:GetCPUInfo$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:GetCPUInfo$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:GetCPUInfo$rtcName$0
	ORG $+192
GetCPUInfo$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:GetCPUInfo$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.c
;	COMDAT cpuidex
_TEXT	SEGMENT
regbuf$ = 8
__$ArrayPad$ = 232
op$ = 272
subop$ = 280
reg_eax$ = 288
reg_ebx$ = 296
reg_ecx$ = 304
reg_edx$ = 312
cpuidex	PROC						; COMDAT

; 43   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rbx
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+312]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__2C63F5AA_cpuid@c
	call	__CheckForDebuggerJustMyCode

; 44   :     _UINT32_T regbuf[4];
; 45   :     __cpuidex(regbuf, op, subop);

	mov	eax, DWORD PTR op$[rbp]
	mov	ecx, DWORD PTR subop$[rbp]
	cpuid
	lea	r8, QWORD PTR regbuf$[rbp]
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx

; 46   :     *reg_eax = regbuf[0];

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR reg_eax$[rbp]
	mov	eax, DWORD PTR regbuf$[rbp+rax]
	mov	DWORD PTR [rcx], eax

; 47   :     *reg_ebx = regbuf[1];

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR reg_ebx$[rbp]
	mov	eax, DWORD PTR regbuf$[rbp+rax]
	mov	DWORD PTR [rcx], eax

; 48   :     *reg_ecx = regbuf[2];

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR reg_ecx$[rbp]
	mov	eax, DWORD PTR regbuf$[rbp+rax]
	mov	DWORD PTR [rcx], eax

; 49   :     *reg_edx = regbuf[3];

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR reg_edx$[rbp]
	mov	eax, DWORD PTR regbuf$[rbp+rax]
	mov	DWORD PTR [rcx], eax

; 50   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:cpuidex$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+240]
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
cpuidex	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.c
;	COMDAT cpuid
_TEXT	SEGMENT
regbuf$ = 8
__$ArrayPad$ = 232
op$ = 272
reg_eax$ = 280
reg_ebx$ = 288
reg_ecx$ = 296
reg_edx$ = 304
cpuid	PROC						; COMDAT

; 33   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rbx
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+312]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__2C63F5AA_cpuid@c
	call	__CheckForDebuggerJustMyCode

; 34   :     _UINT32_T regbuf[4];
; 35   :     __cpuid(regbuf, op);

	mov	eax, DWORD PTR op$[rbp]
	xor	ecx, ecx
	cpuid
	lea	r8, QWORD PTR regbuf$[rbp]
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx

; 36   :     *reg_eax = regbuf[0];

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR reg_eax$[rbp]
	mov	eax, DWORD PTR regbuf$[rbp+rax]
	mov	DWORD PTR [rcx], eax

; 37   :     *reg_ebx = regbuf[1];

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR reg_ebx$[rbp]
	mov	eax, DWORD PTR regbuf$[rbp+rax]
	mov	DWORD PTR [rcx], eax

; 38   :     *reg_ecx = regbuf[2];

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR reg_ecx$[rbp]
	mov	eax, DWORD PTR regbuf$[rbp+rax]
	mov	DWORD PTR [rcx], eax

; 39   :     *reg_edx = regbuf[3];

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR reg_edx$[rbp]
	mov	eax, DWORD PTR regbuf$[rbp+rax]
	mov	DWORD PTR [rcx], eax

; 40   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:cpuid$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+240]
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
cpuid	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_BYTE PROC					; COMDAT

; 87   :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 88   :         __stosb(d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosb

; 89   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.c
;	COMDAT GetCPUInfo
_TEXT	SEGMENT
reg_eax$ = 4
reg_ebx$ = 36
reg_ecx$ = 68
reg_edx$ = 100
max_function_no$ = 132
max_subleaf_no$ = 164
max_ex_function_no$ = 196
feature$ = 448
GetCPUInfo PROC						; COMDAT

; 53   : {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+504]
	lea	rcx, OFFSET FLAT:__2C63F5AA_cpuid@c
	call	__CheckForDebuggerJustMyCode

; 54   :     _UINT32_T reg_eax;
; 55   :     _UINT32_T reg_ebx;
; 56   :     _UINT32_T reg_ecx;
; 57   :     _UINT32_T reg_edx;
; 58   :     _UINT32_T max_function_no = 0;

	mov	DWORD PTR max_function_no$[rbp], 0

; 59   :     _UINT32_T max_subleaf_no = 0;

	mov	DWORD PTR max_subleaf_no$[rbp], 0

; 60   :     _UINT32_T max_ex_function_no = 0;

	mov	DWORD PTR max_ex_function_no$[rbp], 0

; 61   :     cpuid(0, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);

	lea	rax, QWORD PTR reg_edx$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR reg_ecx$[rbp]
	lea	r8, QWORD PTR reg_ebx$[rbp]
	lea	rdx, QWORD PTR reg_eax$[rbp]
	xor	ecx, ecx
	call	cpuid

; 62   :     max_function_no = reg_eax;

	mov	eax, DWORD PTR reg_eax$[rbp]
	mov	DWORD PTR max_function_no$[rbp], eax

; 63   :     _ZERO_MEMORY_BYTE(feature, sizeof(*feature));

	mov	edx, 4
	mov	rcx, QWORD PTR feature$[rbp]
	call	_ZERO_MEMORY_BYTE

; 64   :     if (max_function_no >= 1)

	cmp	DWORD PTR max_function_no$[rbp], 1
	jb	SHORT $LN2@GetCPUInfo

; 65   :     {
; 66   :         cpuid(1, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);

	lea	rax, QWORD PTR reg_edx$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR reg_ecx$[rbp]
	lea	r8, QWORD PTR reg_ebx$[rbp]
	lea	rdx, QWORD PTR reg_eax$[rbp]
	mov	ecx, 1
	call	cpuid

; 67   :         feature->PROCESSOR_FEATURE_POPCNT = (reg_ecx >> 23) & 1;

	mov	eax, DWORD PTR reg_ecx$[rbp]
	shr	eax, 23
	and	eax, 1
	and	eax, 1
	mov	rcx, QWORD PTR feature$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR feature$[rbp]
	mov	DWORD PTR [rcx], eax
$LN2@GetCPUInfo:

; 68   :     }
; 69   :     if (max_function_no >= 7)

	cmp	DWORD PTR max_function_no$[rbp], 7
	jb	$LN3@GetCPUInfo

; 70   :     {
; 71   :         cpuidex(7, 0, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);

	lea	rax, QWORD PTR reg_edx$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR reg_ecx$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR reg_ebx$[rbp]
	lea	r8, QWORD PTR reg_eax$[rbp]
	xor	edx, edx
	mov	ecx, 7
	call	cpuidex

; 72   :         max_subleaf_no = reg_eax;

	mov	eax, DWORD PTR reg_eax$[rbp]
	mov	DWORD PTR max_subleaf_no$[rbp], eax

; 73   :         feature->PROCESSOR_FEATURE_BMI1 = (reg_ebx >> 3) & 1;

	mov	eax, DWORD PTR reg_ebx$[rbp]
	shr	eax, 3
	and	eax, 1
	and	eax, 1
	shl	eax, 2
	mov	rcx, QWORD PTR feature$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -5					; fffffffbH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR feature$[rbp]
	mov	DWORD PTR [rcx], eax

; 74   :         feature->PROCESSOR_FEATURE_ADX = (reg_ebx >> 8) & 1;

	mov	eax, DWORD PTR reg_ebx$[rbp]
	shr	eax, 8
	and	eax, 1
	and	eax, 1
	shl	eax, 1
	mov	rcx, QWORD PTR feature$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -3					; fffffffdH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR feature$[rbp]
	mov	DWORD PTR [rcx], eax

; 75   :         feature->PROCESSOR_FEATURE_BMI2 = (reg_ebx >> 19) & 1;

	mov	eax, DWORD PTR reg_ebx$[rbp]
	shr	eax, 19
	and	eax, 1
	and	eax, 1
	shl	eax, 3
	mov	rcx, QWORD PTR feature$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -9					; fffffff7H
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR feature$[rbp]
	mov	DWORD PTR [rcx], eax
$LN3@GetCPUInfo:

; 76   :     }
; 77   :     cpuid(0x80000000, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);

	lea	rax, QWORD PTR reg_edx$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR reg_ecx$[rbp]
	lea	r8, QWORD PTR reg_ebx$[rbp]
	lea	rdx, QWORD PTR reg_eax$[rbp]
	mov	ecx, -2147483648			; 80000000H
	call	cpuid

; 78   :     max_ex_function_no = reg_eax;

	mov	eax, DWORD PTR reg_eax$[rbp]
	mov	DWORD PTR max_ex_function_no$[rbp], eax

; 79   :     if (max_ex_function_no >= 0x80000001)

	cmp	DWORD PTR max_ex_function_no$[rbp], -2147483647 ; 80000001H
	jb	SHORT $LN4@GetCPUInfo

; 80   :     {
; 81   :         cpuid(0x80000001, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);

	lea	rax, QWORD PTR reg_edx$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR reg_ecx$[rbp]
	lea	r8, QWORD PTR reg_ebx$[rbp]
	lea	rdx, QWORD PTR reg_eax$[rbp]
	mov	ecx, -2147483647			; 80000001H
	call	cpuid

; 82   :         feature->PROCESSOR_FEATURE_ABM = (reg_ecx >> 5) & 1;

	mov	eax, DWORD PTR reg_ecx$[rbp]
	shr	eax, 5
	and	eax, 1
	and	eax, 1
	shl	eax, 4
	mov	rcx, QWORD PTR feature$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -17				; ffffffefH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR feature$[rbp]
	mov	DWORD PTR [rcx], eax
$LN4@GetCPUInfo:

; 83   :     }
; 84   : }

	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:GetCPUInfo$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
GetCPUInfo ENDP
_TEXT	ENDS
END
