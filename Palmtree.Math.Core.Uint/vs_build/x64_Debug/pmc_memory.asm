; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	number_zero:BYTE:040H
COMM	number_one:BYTE:040H
COMM	hLocalHeap:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__AC713800_pmc_memory@c DB 01H
msvcjmc	ENDS
PUBLIC	AllocateHeapArea
PUBLIC	DeallocateHeapArea
PUBLIC	AllocateBlock
PUBLIC	DeallocateBlock
PUBLIC	CheckBlockLight
PUBLIC	AttatchNumber
PUBLIC	AllocateNumber
PUBLIC	DetatchNumber
PUBLIC	DeallocateNumber
PUBLIC	CommitNumber
PUBLIC	CheckNumber
PUBLIC	DuplicateNumber
PUBLIC	Initialize_Memory
PUBLIC	PMC_Dispose
PUBLIC	PMC_GetConstantValue_I
PUBLIC	__JustMyCode_Default
EXTRN	__imp_HeapCreate:PROC
EXTRN	__imp_HeapDestroy:PROC
EXTRN	__imp_HeapAlloc:PROC
EXTRN	__imp_HeapFree:PROC
EXTRN	__imp_GetTickCount64:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	configuration_info:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$AllocateHeapArea DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$AllocateHeapArea
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DeallocateHeapArea DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$DeallocateHeapArea
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AllocateBlock DD imagerel $LN7
	DD	imagerel $LN7+389
	DD	imagerel $unwind$AllocateBlock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DeallocateBlock DD imagerel $LN6
	DD	imagerel $LN6+164
	DD	imagerel $unwind$DeallocateBlock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CheckBlockLight DD imagerel $LN6
	DD	imagerel $LN6+199
	DD	imagerel $unwind$CheckBlockLight
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AttatchNumber DD imagerel $LN4
	DD	imagerel $LN4+130
	DD	imagerel $unwind$AttatchNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AllocateNumber DD imagerel $LN5
	DD	imagerel $LN5+186
	DD	imagerel $unwind$AllocateNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DetatchNumber DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$DetatchNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DeallocateNumber DD imagerel $LN5
	DD	imagerel $LN5+139
	DD	imagerel $unwind$DeallocateNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CommitNumber DD imagerel $LN13
	DD	imagerel $LN13+810
	DD	imagerel $unwind$CommitNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CheckNumber DD imagerel $LN8
	DD	imagerel $LN8+208
	DD	imagerel $unwind$CheckNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DuplicateNumber DD imagerel $LN6
	DD	imagerel $LN6+283
	DD	imagerel $unwind$DuplicateNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Memory DD imagerel $LN10
	DD	imagerel $LN10+253
	DD	imagerel $unwind$Initialize_Memory
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Dispose DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$PMC_Dispose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GetConstantValue_I DD imagerel $LN8
	DD	imagerel $LN8+146
	DD	imagerel $unwind$PMC_GetConstantValue_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_BYTE DD imagerel _ZERO_MEMORY_BYTE
	DD	imagerel _ZERO_MEMORY_BYTE+87
	DD	imagerel $unwind$_ZERO_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_16 DD imagerel _ZERO_MEMORY_16
	DD	imagerel _ZERO_MEMORY_16+88
	DD	imagerel $unwind$_ZERO_MEMORY_16
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_32 DD imagerel _ZERO_MEMORY_32
	DD	imagerel _ZERO_MEMORY_32+87
	DD	imagerel $unwind$_ZERO_MEMORY_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_64 DD imagerel _ZERO_MEMORY_64
	DD	imagerel _ZERO_MEMORY_64+88
	DD	imagerel $unwind$_ZERO_MEMORY_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_BYTE DD imagerel _FILL_MEMORY_BYTE
	DD	imagerel _FILL_MEMORY_BYTE+96
	DD	imagerel $unwind$_FILL_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_16 DD imagerel _FILL_MEMORY_16
	DD	imagerel _FILL_MEMORY_16+98
	DD	imagerel $unwind$_FILL_MEMORY_16
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_32 DD imagerel _FILL_MEMORY_32
	DD	imagerel _FILL_MEMORY_32+95
	DD	imagerel $unwind$_FILL_MEMORY_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_64 DD imagerel _FILL_MEMORY_64
	DD	imagerel _FILL_MEMORY_64+98
	DD	imagerel $unwind$_FILL_MEMORY_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_UNIT DD imagerel _FILL_MEMORY_UNIT
	DD	imagerel _FILL_MEMORY_UNIT+98
	DD	imagerel $unwind$_FILL_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_DIVIDE_CEILING_UNIT DD imagerel _DIVIDE_CEILING_UNIT
	DD	imagerel _DIVIDE_CEILING_UNIT+97
	DD	imagerel $unwind$_DIVIDE_CEILING_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ROTATE_L_UNIT DD imagerel _ROTATE_L_UNIT
	DD	imagerel _ROTATE_L_UNIT+87
	DD	imagerel $unwind$_ROTATE_L_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_TZCNT_ALT_UNIT DD imagerel _TZCNT_ALT_UNIT
	DD	imagerel _TZCNT_ALT_UNIT+120
	DD	imagerel $unwind$_TZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CalculateCheckCode DD imagerel CalculateCheckCode
	DD	imagerel CalculateCheckCode+2709
	DD	imagerel $unwind$CalculateCheckCode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CommitBlock DD imagerel CommitBlock
	DD	imagerel CommitBlock+174
	DD	imagerel $unwind$CommitBlock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CheckBlock DD imagerel CheckBlock
	DD	imagerel CheckBlock+199
	DD	imagerel $unwind$CheckBlock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ClearNumberHeader DD imagerel ClearNumberHeader
	DD	imagerel ClearNumberHeader+557
	DD	imagerel $unwind$ClearNumberHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$FillNumberHeader DD imagerel FillNumberHeader
	DD	imagerel FillNumberHeader+630
	DD	imagerel $unwind$FillNumberHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$InitializeNumber DD imagerel InitializeNumber
	DD	imagerel InitializeNumber+329
	DD	imagerel $unwind$InitializeNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CleanUpNumber DD imagerel CleanUpNumber
	DD	imagerel CleanUpNumber+120
	DD	imagerel $unwind$CleanUpNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetEffectiveBitLength DD imagerel GetEffectiveBitLength
	DD	imagerel GetEffectiveBitLength+270
	DD	imagerel $unwind$GetEffectiveBitLength
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetTrailingZeroBitCount DD imagerel GetTrailingZeroBitCount
	DD	imagerel GetTrailingZeroBitCount+180
	DD	imagerel $unwind$GetTrailingZeroBitCount
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetTrailingZeroBitCount DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetEffectiveBitLength DD 025053401H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CleanUpNumber DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$InitializeNumber DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
InitializeNumber$rtcName$0 DB 077H
	DB	06fH
	DB	072H
	DB	064H
	DB	05fH
	DB	063H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+5
InitializeNumber$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:InitializeNumber$rtcName$0
	ORG $+48
InitializeNumber$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:InitializeNumber$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$FillNumberHeader DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ClearNumberHeader DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CheckBlock DD 025052a01H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CommitBlock DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CalculateCheckCode DD 025052f01H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_TZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_TZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_TZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_TZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_TZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_TZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ROTATE_L_UNIT DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_DIVIDE_CEILING_UNIT DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_UNIT DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_64 DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_32 DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_16 DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_BYTE DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_64 DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_32 DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_16 DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_BYTE DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GetConstantValue_I DD 025052d01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Dispose DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Memory DD 025052a01H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DuplicateNumber DD 025052f01H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
DuplicateNumber$rtcName$0 DB 06fH
	DB	00H
	ORG $+14
DuplicateNumber$rtcVarDesc DD 068H
	DD	08H
	DQ	FLAT:DuplicateNumber$rtcName$0
	ORG $+48
DuplicateNumber$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:DuplicateNumber$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CheckNumber DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CommitNumber DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DeallocateNumber DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DetatchNumber DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AllocateNumber DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AttatchNumber DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CheckBlockLight DD 025052f01H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DeallocateBlock DD 025052f01H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AllocateBlock DD 025053401H
	DD	0118231dH
	DD	070110035H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DeallocateHeapArea DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AllocateHeapArea DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT GetTrailingZeroBitCount
_TEXT	SEGMENT
bit_count$ = 8
p$ = 256
word_count$ = 264
GetTrailingZeroBitCount PROC				; COMDAT

; 460  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 461  :     __UNIT_TYPE bit_count = 0;

	mov	QWORD PTR bit_count$[rbp], 0
$LN2@GetTrailin:

; 462  :     while (word_count > 0)

	cmp	QWORD PTR word_count$[rbp], 0
	jbe	SHORT $LN3@GetTrailin

; 463  :     {
; 464  :         --word_count;

	mov	rax, QWORD PTR word_count$[rbp]
	dec	rax
	mov	QWORD PTR word_count$[rbp], rax

; 465  :         if (*p != 0)

	mov	rax, QWORD PTR p$[rbp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN4@GetTrailin

; 466  :             return (bit_count + _TZCNT_ALT_UNIT(*p));

	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	_TZCNT_ALT_UNIT
	cdqe
	mov	rcx, QWORD PTR bit_count$[rbp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@GetTrailin
$LN4@GetTrailin:

; 467  :         bit_count += __UNIT_TYPE_BIT_COUNT;

	mov	rax, QWORD PTR bit_count$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR bit_count$[rbp], rax

; 468  :         ++p;

	mov	rax, QWORD PTR p$[rbp]
	add	rax, 8
	mov	QWORD PTR p$[rbp], rax

; 469  :     }

	jmp	SHORT $LN2@GetTrailin
$LN3@GetTrailin:

; 470  :     // このルートには到達しないはず
; 471  :     return (0);

	xor	eax, eax
$LN1@GetTrailin:

; 472  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
GetTrailingZeroBitCount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT GetEffectiveBitLength
_TEXT	SEGMENT
tv70 = 192
p$ = 240
word_count$ = 248
effective_word_count$ = 256
GetEffectiveBitLength PROC				; COMDAT

; 438  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 439  :     if (p == NULL)

	cmp	QWORD PTR p$[rbp], 0
	jne	SHORT $LN4@GetEffecti

; 440  :     {
; 441  :         *effective_word_count = 0;

	mov	rax, QWORD PTR effective_word_count$[rbp]
	mov	QWORD PTR [rax], 0

; 442  :         return (0);

	xor	eax, eax
	jmp	$LN1@GetEffecti
$LN4@GetEffecti:

; 443  :     }
; 444  :     p += word_count;

	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR word_count$[rbp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR p$[rbp], rax
$LN2@GetEffecti:

; 445  :     while (word_count != 0)

	cmp	QWORD PTR word_count$[rbp], 0
	je	SHORT $LN3@GetEffecti

; 446  :     {
; 447  :         --p;

	mov	rax, QWORD PTR p$[rbp]
	sub	rax, 8
	mov	QWORD PTR p$[rbp], rax

; 448  :         if (*p != 0)

	mov	rax, QWORD PTR p$[rbp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@GetEffecti

; 449  :         {
; 450  :             *effective_word_count = word_count;

	mov	rax, QWORD PTR effective_word_count$[rbp]
	mov	rcx, QWORD PTR word_count$[rbp]
	mov	QWORD PTR [rax], rcx

; 451  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	imul	rax, QWORD PTR word_count$[rbp], 64	; 00000040H
	mov	QWORD PTR tv70[rbp], rax
	mov	rcx, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rcx]
	call	_LZCNT_ALT_UNIT
	cdqe
	mov	rcx, QWORD PTR tv70[rbp]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@GetEffecti
$LN5@GetEffecti:

; 452  :         }
; 453  :         --word_count;

	mov	rax, QWORD PTR word_count$[rbp]
	dec	rax
	mov	QWORD PTR word_count$[rbp], rax

; 454  :     }

	jmp	SHORT $LN2@GetEffecti
$LN3@GetEffecti:

; 455  :     *effective_word_count = 0;

	mov	rax, QWORD PTR effective_word_count$[rbp]
	mov	QWORD PTR [rax], 0

; 456  :     return (0);

	xor	eax, eax
$LN1@GetEffecti:

; 457  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
GetEffectiveBitLength ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CleanUpNumber
_TEXT	SEGMENT
p$ = 224
CleanUpNumber PROC					; COMDAT

; 391  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 392  :     if (p->BLOCK != NULL)

	mov	rax, QWORD PTR p$[rbp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN2@CleanUpNum

; 393  :     {
; 394  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	rax, QWORD PTR p$[rbp]
	mov	rdx, QWORD PTR [rax+48]
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	DeallocateBlock

; 395  :         p->BLOCK = NULL;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax+56], 0
$LN2@CleanUpNum:

; 396  :     }
; 397  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
CleanUpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT InitializeNumber
_TEXT	SEGMENT
word_count$4 = 8
block$5 = 40
p$ = 288
bit_count$ = 296
light_check_code$ = 304
InitializeNumber PROC					; COMDAT

; 363  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 364  :     if (bit_count > 0)

	cmp	QWORD PTR bit_count$[rbp], 0
	jbe	$LN2@Initialize

; 365  :     {
; 366  :         __UNIT_TYPE word_count;
; 367  :         __UNIT_TYPE* block = AllocateBlock(bit_count, &word_count, light_check_code);

	mov	r8, QWORD PTR light_check_code$[rbp]
	lea	rdx, QWORD PTR word_count$4[rbp]
	mov	rcx, QWORD PTR bit_count$[rbp]
	call	AllocateBlock
	mov	QWORD PTR block$5[rbp], rax

; 368  :         if (block == NULL)

	cmp	QWORD PTR block$5[rbp], 0
	jne	SHORT $LN4@Initialize

; 369  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@Initialize
$LN4@Initialize:

; 370  :         ClearNumberHeader(p);

	mov	rcx, QWORD PTR p$[rbp]
	call	ClearNumberHeader

; 371  :         p->SIGNATURE1 = PMC_SIGNATURE;

	mov	rax, QWORD PTR p$[rbp]
	mov	DWORD PTR [rax], 1231244656		; 49634d70H

; 372  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;

	mov	rax, QWORD PTR p$[rbp]
	mov	DWORD PTR [rax+4], 1416522069		; 546e6955H

; 373  :         p->UNIT_BIT_COUNT = bit_count;

	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR bit_count$[rbp]
	mov	QWORD PTR [rax+16], rcx

; 374  :         p->BLOCK_COUNT = word_count;

	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR word_count$4[rbp]
	mov	QWORD PTR [rax+48], rcx

; 375  :         p->BLOCK = block;

	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR block$5[rbp]
	mov	QWORD PTR [rax+56], rcx

; 376  :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 377  :     else
; 378  :     {
; 379  :         // bit_count に 0 が与えられるのは、数値が 0 の場合。
; 380  :         ClearNumberHeader(p);

	mov	rcx, QWORD PTR p$[rbp]
	call	ClearNumberHeader

; 381  :         p->SIGNATURE1 = PMC_SIGNATURE;

	mov	rax, QWORD PTR p$[rbp]
	mov	DWORD PTR [rax], 1231244656		; 49634d70H

; 382  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;

	mov	rax, QWORD PTR p$[rbp]
	mov	DWORD PTR [rax+4], 1416522069		; 546e6955H

; 383  :         p->UNIT_BIT_COUNT = 0;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax+16], 0

; 384  :         p->BLOCK_COUNT = 0;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax+48], 0

; 385  :         p->BLOCK = NULL;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax+56], 0
$LN3@Initialize:

; 386  :     }
; 387  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Initialize:

; 388  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:InitializeNumber$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
InitializeNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT FillNumberHeader
_TEXT	SEGMENT
__p$1 = 8
__p$2 = 40
p$ = 288
FillNumberHeader PROC					; COMDAT

; 317  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 318  : #ifdef _M_IX64
; 319  :     if (sizeof(*p) == sizeof(_UINT64_T) * 8)

	xor	eax, eax
	cmp	eax, 1
	je	$LN2@FillNumber

; 320  :     {
; 321  :         _UINT64_T* __p = (_UINT64_T*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR __p$1[rbp], rax

; 322  :         __p[0] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 323  :         __p[1] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 324  :         __p[2] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 325  :         __p[3] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 326  :         __p[4] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 327  :         __p[5] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 328  :         __p[6] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 329  :         __p[7] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 330  :     }

	jmp	$LN3@FillNumber
$LN2@FillNumber:

; 331  :     else
; 332  :     {
; 333  : #endif
; 334  :         if (sizeof(*p) == sizeof(_UINT32_T) * 9)

	xor	eax, eax
	test	eax, eax
	je	$LN4@FillNumber

; 335  :         {
; 336  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR __p$2[rbp], rax

; 337  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 338  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 339  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 340  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 341  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 342  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 343  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 344  :             __p[7] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 345  :             __p[8] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 346  :         }

	jmp	SHORT $LN5@FillNumber
$LN4@FillNumber:

; 347  : #ifdef _M_IX64
; 348  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN6@FillNumber

; 349  :             _FILL_MEMORY_64((_UINT64_T*)p, DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT64_T));

	mov	r8d, 8
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	rcx, QWORD PTR p$[rbp]
	call	_FILL_MEMORY_64
	jmp	SHORT $LN7@FillNumber
$LN6@FillNumber:

; 350  : #endif
; 351  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN8@FillNumber

; 352  :             _FILL_MEMORY_32((_UINT32_T*)p, (_UINT32_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT32_T));

	mov	r8d, 16
	mov	edx, -858993460				; ccccccccH
	mov	rcx, QWORD PTR p$[rbp]
	call	_FILL_MEMORY_32
	jmp	SHORT $LN9@FillNumber
$LN8@FillNumber:

; 353  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN10@FillNumber

; 354  :             _FILL_MEMORY_16((_UINT16_T*)p, (_UINT16_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT16_T));

	mov	r8d, 32					; 00000020H
	mov	dx, 52428				; 0000ccccH
	mov	rcx, QWORD PTR p$[rbp]
	call	_FILL_MEMORY_16
	jmp	SHORT $LN11@FillNumber
$LN10@FillNumber:

; 355  :         else
; 356  :             _FILL_MEMORY_BYTE(p, (unsigned char)DEFAULT_MEMORY_DATA, sizeof(*p));

	mov	r8d, 64					; 00000040H
	mov	dl, 204					; 000000ccH
	mov	rcx, QWORD PTR p$[rbp]
	call	_FILL_MEMORY_BYTE
$LN11@FillNumber:
$LN9@FillNumber:
$LN7@FillNumber:
$LN5@FillNumber:
$LN3@FillNumber:

; 357  : #ifdef _M_IX64
; 358  :     }
; 359  : #endif
; 360  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
FillNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT ClearNumberHeader
_TEXT	SEGMENT
__p$1 = 8
__p$2 = 40
p$ = 288
ClearNumberHeader PROC					; COMDAT

; 271  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 272  : #ifdef _M_IX64
; 273  :     if (sizeof(*p) == sizeof(_UINT64_T) * 8)

	xor	eax, eax
	cmp	eax, 1
	je	$LN2@ClearNumbe

; 274  :     {
; 275  :         _UINT64_T* __p = (_UINT64_T*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR __p$1[rbp], rax

; 276  :         __p[0] = 0;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 277  :         __p[1] = 0;

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 278  :         __p[2] = 0;

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 279  :         __p[3] = 0;

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 280  :         __p[4] = 0;

	mov	eax, 8
	imul	rax, rax, 4
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 281  :         __p[5] = 0;

	mov	eax, 8
	imul	rax, rax, 5
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 282  :         __p[6] = 0;

	mov	eax, 8
	imul	rax, rax, 6
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 283  :         __p[7] = 0;

	mov	eax, 8
	imul	rax, rax, 7
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 284  :     }

	jmp	$LN3@ClearNumbe
$LN2@ClearNumbe:

; 285  :     else
; 286  :     {
; 287  : #endif
; 288  :         if (sizeof(*p) == sizeof(_UINT32_T) * 9)

	xor	eax, eax
	test	eax, eax
	je	$LN4@ClearNumbe

; 289  :         {
; 290  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR __p$2[rbp], rax

; 291  :             __p[0] = 0;

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 292  :             __p[1] = 0;

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 293  :             __p[2] = 0;

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 294  :             __p[3] = 0;

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 295  :             __p[4] = 0;

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 296  :             __p[5] = 0;

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 297  :             __p[6] = 0;

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 298  :             __p[7] = 0;

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 299  :             __p[8] = 0;

	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 300  :         }

	jmp	SHORT $LN5@ClearNumbe
$LN4@ClearNumbe:

; 301  : #ifdef _M_IX64
; 302  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN6@ClearNumbe

; 303  :             _ZERO_MEMORY_64((_UINT64_T*)p, sizeof(*p) / sizeof(_UINT64_T));

	mov	edx, 8
	mov	rcx, QWORD PTR p$[rbp]
	call	_ZERO_MEMORY_64
	jmp	SHORT $LN7@ClearNumbe
$LN6@ClearNumbe:

; 304  : #endif
; 305  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN8@ClearNumbe

; 306  :             _ZERO_MEMORY_32((_UINT32_T*)p, sizeof(*p) / sizeof(_UINT32_T));

	mov	edx, 16
	mov	rcx, QWORD PTR p$[rbp]
	call	_ZERO_MEMORY_32
	jmp	SHORT $LN9@ClearNumbe
$LN8@ClearNumbe:

; 307  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN10@ClearNumbe

; 308  :             _ZERO_MEMORY_16((_UINT16_T*)p, sizeof(*p) / sizeof(_UINT16_T));

	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR p$[rbp]
	call	_ZERO_MEMORY_16
	jmp	SHORT $LN11@ClearNumbe
$LN10@ClearNumbe:

; 309  :         else
; 310  :             _ZERO_MEMORY_BYTE(p, sizeof(*p));

	mov	edx, 64					; 00000040H
	mov	rcx, QWORD PTR p$[rbp]
	call	_ZERO_MEMORY_BYTE
$LN11@ClearNumbe:
$LN9@ClearNumbe:
$LN7@ClearNumbe:
$LN5@ClearNumbe:
$LN3@ClearNumbe:

; 311  : #ifdef _M_IX64
; 312  :     }
; 313  : #endif
; 314  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
ClearNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CheckBlock
_TEXT	SEGMENT
words$ = 8
code_desired$ = 40
code_actual$ = 72
buffer$ = 320
CheckBlock PROC						; COMDAT

; 234  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 235  : #ifdef _DEBUG
; 236  :     if (buffer == NULL)

	cmp	QWORD PTR buffer$[rbp], 0
	jne	SHORT $LN2@CheckBlock

; 237  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
$LN2@CheckBlock:

; 238  :     --buffer;

	mov	rax, QWORD PTR buffer$[rbp]
	sub	rax, 8
	mov	QWORD PTR buffer$[rbp], rax

; 239  :     __UNIT_TYPE words = buffer[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buffer$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR words$[rbp], rax

; 240  :     __UNIT_TYPE code_desired = buffer[words + 1];

	mov	rax, QWORD PTR buffer$[rbp]
	mov	rcx, QWORD PTR words$[rbp]
	mov	rax, QWORD PTR [rax+rcx*8+8]
	mov	QWORD PTR code_desired$[rbp], rax

; 241  :     __UNIT_TYPE code_actual = CalculateCheckCode(&buffer[1], words);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR buffer$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, QWORD PTR words$[rbp]
	mov	rcx, rax
	call	CalculateCheckCode
	mov	QWORD PTR code_actual$[rbp], rax

; 242  :     if (code_actual == code_desired)

	mov	rax, QWORD PTR code_desired$[rbp]
	cmp	QWORD PTR code_actual$[rbp], rax
	jne	SHORT $LN3@CheckBlock

; 243  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
	jmp	SHORT $LN4@CheckBlock
$LN3@CheckBlock:

; 244  :     else
; 245  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffffffffffeffH
$LN4@CheckBlock:
$LN1@CheckBlock:

; 246  : #else
; 247  :     return (PMC_STATUS_OK);
; 248  : #endif
; 249  : }

	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
CheckBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CommitBlock
_TEXT	SEGMENT
words$1 = 8
code$2 = 40
buffer$ = 288
CommitBlock PROC					; COMDAT

; 218  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 219  :     if (buffer != NULL)

	cmp	QWORD PTR buffer$[rbp], 0
	je	SHORT $LN2@CommitBloc

; 220  :     {
; 221  :         --buffer;

	mov	rax, QWORD PTR buffer$[rbp]
	sub	rax, 8
	mov	QWORD PTR buffer$[rbp], rax

; 222  :         __UNIT_TYPE words = buffer[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buffer$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR words$1[rbp], rax

; 223  : #ifdef _DEBUG
; 224  :         __UNIT_TYPE code = CalculateCheckCode(&buffer[1], words);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR buffer$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, QWORD PTR words$1[rbp]
	mov	rcx, rax
	call	CalculateCheckCode
	mov	QWORD PTR code$2[rbp], rax

; 225  : #else
; 226  :         __UNIT_TYPE code = 0;
; 227  : #endif
; 228  :         buffer[words + 1] = code;

	mov	rax, QWORD PTR buffer$[rbp]
	mov	rcx, QWORD PTR words$1[rbp]
	mov	rdx, QWORD PTR code$2[rbp]
	mov	QWORD PTR [rax+rcx*8+8], rdx
$LN2@CommitBloc:

; 229  :     }
; 230  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
CommitBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CalculateCheckCode
_TEXT	SEGMENT
code$ = 8
count$ = 40
p$ = 288
words$ = 296
CalculateCheckCode PROC					; COMDAT

; 53   : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 54   : 	__UNIT_TYPE code = CHECK_CODE_INIT;

	mov	rax, -8897841259083430780		; 8484848484848484H
	mov	QWORD PTR code$[rbp], rax

; 55   : 	
; 56   :     __UNIT_TYPE count = words >> 5;

	mov	rax, QWORD PTR words$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@CalculateC:

; 57   : 	while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	$LN3@CalculateC

; 58   : 	{
; 59   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 60   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 61   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 62   :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 63   :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 64   :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 65   :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 66   :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 67   :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 68   :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 69   :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 70   :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 71   :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 72   :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 73   :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 74   :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 75   :         code = _ROTATE_L_UNIT(code, 3) ^ p[16];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 76   :         code = _ROTATE_L_UNIT(code, 3) ^ p[17];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 77   :         code = _ROTATE_L_UNIT(code, 3) ^ p[18];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 78   :         code = _ROTATE_L_UNIT(code, 3) ^ p[19];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 79   :         code = _ROTATE_L_UNIT(code, 3) ^ p[20];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 80   :         code = _ROTATE_L_UNIT(code, 3) ^ p[21];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 81   :         code = _ROTATE_L_UNIT(code, 3) ^ p[22];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 82   :         code = _ROTATE_L_UNIT(code, 3) ^ p[23];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 83   :         code = _ROTATE_L_UNIT(code, 3) ^ p[24];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 84   :         code = _ROTATE_L_UNIT(code, 3) ^ p[25];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 85   :         code = _ROTATE_L_UNIT(code, 3) ^ p[26];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 86   :         code = _ROTATE_L_UNIT(code, 3) ^ p[27];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 87   :         code = _ROTATE_L_UNIT(code, 3) ^ p[28];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 88   :         code = _ROTATE_L_UNIT(code, 3) ^ p[29];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 89   :         code = _ROTATE_L_UNIT(code, 3) ^ p[30];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 90   :         code = _ROTATE_L_UNIT(code, 3) ^ p[31];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 91   :         p += 32;

	mov	rax, QWORD PTR p$[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR p$[rbp], rax

; 92   :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 93   :     }

	jmp	$LN2@CalculateC
$LN3@CalculateC:

; 94   : 
; 95   : 	if (words & 0x10)

	mov	rax, QWORD PTR words$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN4@CalculateC

; 96   : 	{
; 97   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 98   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 99   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 100  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 101  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 102  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 103  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 104  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 105  :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 106  :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 107  :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 108  :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 109  :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 110  :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 111  :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 112  :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 113  :         p += 16;

	mov	rax, QWORD PTR p$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR p$[rbp], rax
$LN4@CalculateC:

; 114  :     }
; 115  : 
; 116  :     if (words & 0x8)

	mov	rax, QWORD PTR words$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN5@CalculateC

; 117  :     {
; 118  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 119  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 120  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 121  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 122  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 123  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 124  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 125  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 126  :         p += 8;

	mov	rax, QWORD PTR p$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR p$[rbp], rax
$LN5@CalculateC:

; 127  :     }
; 128  : 
; 129  :     if (words & 0x4)

	mov	rax, QWORD PTR words$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN6@CalculateC

; 130  :     {
; 131  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 132  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 133  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 134  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 135  :         p += 4;

	mov	rax, QWORD PTR p$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR p$[rbp], rax
$LN6@CalculateC:

; 136  :     }
; 137  : 
; 138  :     if (words & 0x2)

	mov	rax, QWORD PTR words$[rbp]
	and	rax, 2
	test	rax, rax
	je	SHORT $LN7@CalculateC

; 139  :     {
; 140  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 141  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax

; 142  :         p += 2;

	mov	rax, QWORD PTR p$[rbp]
	add	rax, 16
	mov	QWORD PTR p$[rbp], rax
$LN7@CalculateC:

; 143  :     }
; 144  : 
; 145  :     if (words & 0x1)

	mov	rax, QWORD PTR words$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN8@CalculateC

; 146  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	mov	edx, 3
	mov	rcx, QWORD PTR code$[rbp]
	call	_ROTATE_L_UNIT
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rbp]
	xor	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR code$[rbp], rax
$LN8@CalculateC:

; 147  :     
; 148  :     return (code);

	mov	rax, QWORD PTR code$[rbp]

; 149  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
CalculateCheckCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _TZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_TZCNT_ALT_UNIT PROC					; COMDAT

; 702  :     {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 703  :         if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@TZCNT_ALT_

; 704  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN1@TZCNT_ALT_
$LN2@TZCNT_ALT_:

; 705  : #ifdef _M_IX86
; 706  :         _UINT32_T pos;
; 707  : #ifdef _MSC_VER
; 708  :         _BitScanForward(&pos, x);
; 709  : #elif defined(__GNUC__)
; 710  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 711  : #else
; 712  : #error unknown compiler
; 713  : #endif
; 714  : #elif defined(_M_X64)
; 715  : #ifdef _MSC_VER
; 716  :         _UINT32_T pos;
; 717  :         _BitScanForward64(&pos, x);

	mov	rax, QWORD PTR x$[rbp]
	bsf	rax, rax
	mov	DWORD PTR pos$[rbp], eax

; 718  : #elif defined(__GNUC__)
; 719  :         _UINT64_T pos;
; 720  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 721  : #else
; 722  : #error unknown compiler
; 723  : #endif
; 724  : #else
; 725  : #error unknown platform
; 726  : #endif
; 727  :         return (pos);

	mov	eax, DWORD PTR pos$[rbp]
$LN1@TZCNT_ALT_:

; 728  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_TZCNT_ALT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 622  :     {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 623  :         if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 624  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 625  : #ifdef _M_IX86
; 626  :         _UINT32_T pos;
; 627  : #ifdef _MSC_VER
; 628  :         _BitScanReverse(&pos, x);
; 629  : #elif defined(__GNUC__)
; 630  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 631  : #else
; 632  : #error unknown compiler
; 633  : #endif
; 634  : #elif defined(_M_X64)
; 635  : #ifdef _MSC_VER
; 636  :         _UINT32_T pos;
; 637  :         _BitScanReverse64(&pos, x);

	mov	rax, QWORD PTR x$[rbp]
	bsr	rax, rax
	mov	DWORD PTR pos$[rbp], eax

; 638  : #elif defined(__GNUC__)
; 639  :         _UINT64_T pos;
; 640  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 641  : #else
; 642  : #error unknown compiler
; 643  : #endif
; 644  : #else
; 645  : #error unknown platform
; 646  : #endif
; 647  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 63					; 0000003fH
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 648  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ROTATE_L_UNIT
_TEXT	SEGMENT
x$ = 224
count$ = 232
_ROTATE_L_UNIT PROC					; COMDAT

; 474  :     {

	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 475  : #ifdef _M_IX86
; 476  :         return (_rotl(x, count));
; 477  : #elif defined(_M_X64)
; 478  :         return (_rotl64(x, count));

	mov	eax, DWORD PTR count$[rbp]
	movzx	ecx, al
	mov	rax, QWORD PTR x$[rbp]
	rol	rax, cl

; 479  : #else
; 480  : #error unknown platform
; 481  : #endif
; 482  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 224
v$ = 232
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 186  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 187  :         return ((u + v - 1) / v);

	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	lea	rax, QWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	QWORD PTR v$[rbp]

; 188  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
x$ = 232
count$ = 240
_FILL_MEMORY_UNIT PROC					; COMDAT

; 159  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 160  : #ifdef _M_IX86
; 161  :         __stosd((unsigned long*)d, x, (unsigned long)count);
; 162  : #elif defined(_M_X64)
; 163  :         __stosq(d, x, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rax, QWORD PTR x$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep stosq

; 164  : #else
; 165  : #error unknown platform
; 166  : #endif
; 167  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FILL_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_64
_TEXT	SEGMENT
d$ = 224
x$ = 232
count$ = 240
_FILL_MEMORY_64 PROC					; COMDAT

; 153  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 154  :         __stosq(d, x, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rax, QWORD PTR x$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep stosq

; 155  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FILL_MEMORY_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_32
_TEXT	SEGMENT
d$ = 224
x$ = 232
count$ = 240
_FILL_MEMORY_32 PROC					; COMDAT

; 147  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 148  :         __stosd((unsigned long*)d, x, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	eax, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep stosd

; 149  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FILL_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_16
_TEXT	SEGMENT
d$ = 224
x$ = 232
count$ = 240
_FILL_MEMORY_16 PROC					; COMDAT

; 142  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 143  :         __stosw(d, x, count);

	mov	rdi, QWORD PTR d$[rbp]
	movzx	eax, WORD PTR x$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep stosw

; 144  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 224
x$ = 232
count$ = 240
_FILL_MEMORY_BYTE PROC					; COMDAT

; 137  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 138  :         __stosb(d, x, count);

	mov	rdi, QWORD PTR d$[rbp]
	movzx	eax, BYTE PTR x$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep stosb

; 139  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FILL_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_64
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_64 PROC					; COMDAT

; 103  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 104  :         __stosq(d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosq

; 105  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_32
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_32 PROC					; COMDAT

; 97   :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 98   :         __stosd((unsigned long*)d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosd

; 99   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_16
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_16 PROC					; COMDAT

; 92   :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 93   :         __stosw(d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosw

; 94   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_BYTE PROC					; COMDAT

; 87   :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 88   :         __stosb(d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosb

; 89   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT PROC					; COMDAT

; 59   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 60   : #ifdef _M_IX86
; 61   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 62   : #elif defined(_M_X64)
; 63   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsq

; 64   : #else
; 65   : #error unknown platform
; 66   : #endif
; 67   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT PMC_GetConstantValue_I
_TEXT	SEGMENT
tv64 = 192
type$ = 240
o$ = 248
PMC_GetConstantValue_I PROC				; COMDAT

; 550  : {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 551  :     switch (type)

	mov	eax, DWORD PTR type$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN4@PMC_GetCon
	cmp	DWORD PTR tv64[rbp], 2
	je	SHORT $LN5@PMC_GetCon
	jmp	SHORT $LN6@PMC_GetCon
$LN4@PMC_GetCon:

; 552  :     {
; 553  :     case PMC_CONSTANT_ZERO:
; 554  :         *o = (PMC_HANDLE_UINT)&number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 555  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN5@PMC_GetCon:

; 556  :     case PMC_CONSTANT_ONE:
; 557  :         *o = (PMC_HANDLE_UINT)&number_one;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_one
	mov	QWORD PTR [rax], rcx

; 558  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN6@PMC_GetCon:

; 559  :     default:
; 560  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_GetCon:

; 561  :     }
; 562  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
PMC_GetConstantValue_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT PMC_Dispose
_TEXT	SEGMENT
np$ = 8
result$ = 36
p$ = 288
PMC_Dispose PROC					; COMDAT

; 565  : {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 566  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 567  :     PMC_STATUS_CODE result = CheckNumber(np);

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax

; 568  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@PMC_Dispos

; 569  :         return;

	jmp	SHORT $LN1@PMC_Dispos
$LN2@PMC_Dispos:

; 570  :     DeallocateNumber(np);

	mov	rcx, QWORD PTR np$[rbp]
	call	DeallocateNumber
$LN1@PMC_Dispos:

; 571  :     return;
; 572  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_Dispose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT Initialize_Memory
_TEXT	SEGMENT
result$ = 4
number_zero_ok$ = 36
number_one_ok$ = 68
feature$ = 320
Initialize_Memory PROC					; COMDAT

; 575  : {

$LN10:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 576  :     PMC_STATUS_CODE result = PMC_STATUS_OK;

	mov	DWORD PTR result$[rbp], 0

; 577  : 
; 578  :     BOOL number_zero_ok = TRUE;

	mov	DWORD PTR number_zero_ok$[rbp], 1

; 579  :     BOOL number_one_ok = TRUE;

	mov	DWORD PTR number_one_ok$[rbp], 1

; 580  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN2@Initialize

; 581  :     {
; 582  :         result = AttatchNumber(&number_zero, 0);

	xor	edx, edx
	lea	rcx, OFFSET FLAT:number_zero
	call	AttatchNumber
	mov	DWORD PTR result$[rbp], eax

; 583  :         if (result == PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN3@Initialize

; 584  :         {
; 585  :             CommitNumber(&number_zero);

	lea	rcx, OFFSET FLAT:number_zero
	call	CommitNumber

; 586  :             number_zero_ok = TRUE;

	mov	DWORD PTR number_zero_ok$[rbp], 1
$LN3@Initialize:
$LN2@Initialize:

; 587  :         }
; 588  :     }
; 589  : 
; 590  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN4@Initialize

; 591  :     {
; 592  :         result = AttatchNumber(&number_one, 1);

	mov	edx, 1
	lea	rcx, OFFSET FLAT:number_one
	call	AttatchNumber
	mov	DWORD PTR result$[rbp], eax

; 593  :         if (result == PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN5@Initialize

; 594  :         {
; 595  :             number_one.BLOCK[0] = 1;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR number_one+56
	mov	QWORD PTR [rcx+rax], 1

; 596  :             CommitNumber(&number_one);

	lea	rcx, OFFSET FLAT:number_one
	call	CommitNumber

; 597  :             number_one_ok = TRUE;

	mov	DWORD PTR number_one_ok$[rbp], 1
$LN5@Initialize:
$LN4@Initialize:

; 598  :         }
; 599  :     }
; 600  : 
; 601  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@Initialize

; 602  :     {
; 603  :         if (number_zero_ok)

	cmp	DWORD PTR number_zero_ok$[rbp], 0
	je	SHORT $LN7@Initialize

; 604  :             DetatchNumber(&number_zero);

	lea	rcx, OFFSET FLAT:number_zero
	call	DetatchNumber
$LN7@Initialize:

; 605  :         if (number_one_ok)

	cmp	DWORD PTR number_one_ok$[rbp], 0
	je	SHORT $LN8@Initialize

; 606  :             DetatchNumber(&number_one);

	lea	rcx, OFFSET FLAT:number_one
	call	DetatchNumber
$LN8@Initialize:
$LN6@Initialize:

; 607  :     }
; 608  : 
; 609  :     return (result);

	mov	eax, DWORD PTR result$[rbp]

; 610  : }

	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
Initialize_Memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DuplicateNumber
_TEXT	SEGMENT
x_bit_count$ = 8
result$ = 36
o$ = 72
x$ = 320
op$ = 328
DuplicateNumber PROC					; COMDAT

; 527  : {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 528  :     if (x->IS_STATIC)

	mov	rax, QWORD PTR x$[rbp]
	mov	eax, DWORD PTR [rax+40]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@DuplicateN

; 529  :     {
; 530  :         *op = x;

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR x$[rbp]
	mov	QWORD PTR [rax], rcx

; 531  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DuplicateN
$LN2@DuplicateN:

; 532  :     }
; 533  :     if (x->IS_ZERO)

	mov	rax, QWORD PTR x$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@DuplicateN

; 534  :     {
; 535  :         *op = &number_zero;

	mov	rax, QWORD PTR op$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 536  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DuplicateN
$LN3@DuplicateN:

; 537  :     }
; 538  :     __UNIT_TYPE x_bit_count = x->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR x$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR x_bit_count$[rbp], rax

; 539  :     PMC_STATUS_CODE result;
; 540  :     NUMBER_HEADER* o;
; 541  :     if ((result = AllocateNumber(&o, x_bit_count, NULL)) != PMC_STATUS_OK)

	xor	r8d, r8d
	mov	rdx, QWORD PTR x_bit_count$[rbp]
	lea	rcx, QWORD PTR o$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@DuplicateN

; 542  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@DuplicateN
$LN4@DuplicateN:

; 543  :     _COPY_MEMORY_UNIT(o->BLOCK, x->BLOCK, _DIVIDE_CEILING_UNIT(x_bit_count, __UNIT_TYPE_BIT_COUNT));

	mov	edx, 64					; 00000040H
	mov	rcx, QWORD PTR x_bit_count$[rbp]
	call	_DIVIDE_CEILING_UNIT
	mov	r8, rax
	mov	rax, QWORD PTR x$[rbp]
	mov	rdx, QWORD PTR [rax+56]
	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	_COPY_MEMORY_UNIT

; 544  :     CommitNumber(o);

	mov	rcx, QWORD PTR o$[rbp]
	call	CommitNumber

; 545  :     *op = o;

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR o$[rbp]
	mov	QWORD PTR [rax], rcx

; 546  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@DuplicateN:

; 547  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:DuplicateNumber$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
DuplicateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CheckNumber
_TEXT	SEGMENT
result$1 = 4
desired_hash_code$2 = 40
p$ = 288
CheckNumber PROC					; COMDAT

; 508  : {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 509  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_UINT_SIGNATURE)

	mov	rax, QWORD PTR p$[rbp]
	cmp	DWORD PTR [rax], 1231244656		; 49634d70H
	jne	SHORT $LN3@CheckNumbe
	mov	rax, QWORD PTR p$[rbp]
	cmp	DWORD PTR [rax+4], 1416522069		; 546e6955H
	je	SHORT $LN2@CheckNumbe
$LN3@CheckNumbe:

; 510  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffffffffffeffH
	jmp	SHORT $LN1@CheckNumbe
$LN2@CheckNumbe:

; 511  :     if (!p->IS_ZERO)

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN4@CheckNumbe

; 512  :     {
; 513  :         PMC_STATUS_CODE result;
; 514  :         if ((result = CheckBlock(p->BLOCK)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CheckBlock
	mov	DWORD PTR result$1[rbp], eax
	cmp	DWORD PTR result$1[rbp], 0
	je	SHORT $LN5@CheckNumbe

; 515  :             return (result);

	mov	eax, DWORD PTR result$1[rbp]
	jmp	SHORT $LN1@CheckNumbe
$LN5@CheckNumbe:

; 516  : #ifdef _DEBUG
; 517  :         __UNIT_TYPE desired_hash_code = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	rax, QWORD PTR p$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CalculateCheckCode
	mov	QWORD PTR desired_hash_code$2[rbp], rax

; 518  :         if (desired_hash_code != p->HASH_CODE)

	mov	rax, QWORD PTR p$[rbp]
	mov	rax, QWORD PTR [rax+24]
	cmp	QWORD PTR desired_hash_code$2[rbp], rax
	je	SHORT $LN6@CheckNumbe

; 519  :             return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffffffffffeffH
	jmp	SHORT $LN1@CheckNumbe
$LN6@CheckNumbe:
$LN4@CheckNumbe:

; 520  : #endif
; 521  :     }
; 522  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CheckNumbe:

; 523  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
CheckNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CommitNumber
_TEXT	SEGMENT
tv186 = 192
tv169 = 192
tv138 = 192
p$ = 240
CommitNumber PROC					; COMDAT

; 475  : {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 476  :     CommitBlock(p->BLOCK);

	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CommitBlock

; 477  :     p->UNIT_BIT_COUNT = GetEffectiveBitLength(p->BLOCK, p->BLOCK_COUNT, &p->UNIT_WORD_COUNT);

	mov	rax, QWORD PTR p$[rbp]
	add	rax, 8
	mov	r8, rax
	mov	rax, QWORD PTR p$[rbp]
	mov	rdx, QWORD PTR [rax+48]
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	GetEffectiveBitLength
	mov	rcx, QWORD PTR p$[rbp]
	mov	QWORD PTR [rcx+16], rax

; 478  :     if (p->UNIT_BIT_COUNT <= 0)

	mov	rax, QWORD PTR p$[rbp]
	cmp	QWORD PTR [rax+16], 0
	ja	SHORT $LN2@CommitNumb

; 479  :     {
; 480  :         p->HASH_CODE = 0;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax+24], 0

; 481  :         p->IS_ZERO = TRUE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	or	eax, 2
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 482  :         p->IS_ONE = FALSE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	and	eax, -5					; fffffffbH
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 483  :         p->IS_EVEN = TRUE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	or	eax, 8
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 484  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax+32], 0

; 485  :         p->IS_POWER_OF_TWO = FALSE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	and	eax, -17				; ffffffefH
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 486  :     }

	jmp	$LN3@CommitNumb
$LN2@CommitNumb:

; 487  :     else if (p->UNIT_BIT_COUNT == 1)

	mov	rax, QWORD PTR p$[rbp]
	cmp	QWORD PTR [rax+16], 1
	jne	$LN4@CommitNumb

; 488  :     {
; 489  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	rax, QWORD PTR p$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CalculateCheckCode
	mov	rcx, QWORD PTR p$[rbp]
	mov	QWORD PTR [rcx+24], rax

; 490  :         p->IS_ZERO = FALSE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	and	eax, -3					; fffffffdH
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 491  :         p->IS_ONE = p->BLOCK[0] == 1; // 無条件でTRUEでも大丈夫だが念のため。

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	cmp	QWORD PTR [rax+rcx], 1
	jne	SHORT $LN7@CommitNumb
	mov	DWORD PTR tv138[rbp], 1
	jmp	SHORT $LN8@CommitNumb
$LN7@CommitNumb:
	mov	DWORD PTR tv138[rbp], 0
$LN8@CommitNumb:
	mov	eax, DWORD PTR tv138[rbp]
	and	eax, 1
	shl	eax, 2
	mov	rcx, QWORD PTR p$[rbp]
	mov	ecx, DWORD PTR [rcx+40]
	and	ecx, -5					; fffffffbH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 492  :         p->IS_EVEN = FALSE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	and	eax, -9					; fffffff7H
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 493  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax+32], 0

; 494  :         p->IS_POWER_OF_TWO = TRUE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	or	eax, 16
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 495  :     }

	jmp	$LN5@CommitNumb
$LN4@CommitNumb:

; 496  :     else
; 497  :     {
; 498  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	rax, QWORD PTR p$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	CalculateCheckCode
	mov	rcx, QWORD PTR p$[rbp]
	mov	QWORD PTR [rcx+24], rax

; 499  :         p->IS_ZERO = FALSE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	and	eax, -3					; fffffffdH
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 500  :         p->IS_ONE = FALSE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	and	eax, -5					; fffffffbH
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 501  :         p->IS_EVEN = !(p->BLOCK[0] & 1);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	rax, QWORD PTR [rcx+rax]
	and	rax, 1
	test	rax, rax
	jne	SHORT $LN9@CommitNumb
	mov	DWORD PTR tv169[rbp], 1
	jmp	SHORT $LN10@CommitNumb
$LN9@CommitNumb:
	mov	DWORD PTR tv169[rbp], 0
$LN10@CommitNumb:
	mov	eax, DWORD PTR tv169[rbp]
	and	eax, 1
	shl	eax, 3
	mov	rcx, QWORD PTR p$[rbp]
	mov	ecx, DWORD PTR [rcx+40]
	and	ecx, -9					; fffffff7H
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 502  :         p->TRAILING_ZERO_BITS_COUNT = GetTrailingZeroBitCount(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	rax, QWORD PTR p$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	GetTrailingZeroBitCount
	mov	rcx, QWORD PTR p$[rbp]
	mov	QWORD PTR [rcx+32], rax

; 503  :         p->IS_POWER_OF_TWO = p->TRAILING_ZERO_BITS_COUNT + 1 == p->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR p$[rbp]
	mov	rax, QWORD PTR [rax+32]
	inc	rax
	mov	rcx, QWORD PTR p$[rbp]
	cmp	rax, QWORD PTR [rcx+16]
	jne	SHORT $LN11@CommitNumb
	mov	DWORD PTR tv186[rbp], 1
	jmp	SHORT $LN12@CommitNumb
$LN11@CommitNumb:
	mov	DWORD PTR tv186[rbp], 0
$LN12@CommitNumb:
	mov	eax, DWORD PTR tv186[rbp]
	and	eax, 1
	shl	eax, 4
	mov	rcx, QWORD PTR p$[rbp]
	mov	ecx, DWORD PTR [rcx+40]
	and	ecx, -17				; ffffffefH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax
$LN5@CommitNumb:
$LN3@CommitNumb:

; 504  :     }
; 505  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
CommitNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DeallocateNumber
_TEXT	SEGMENT
p$ = 224
DeallocateNumber PROC					; COMDAT

; 429  : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 430  :     if (p == NULL || p->IS_STATIC)

	cmp	QWORD PTR p$[rbp], 0
	je	SHORT $LN3@Deallocate
	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@Deallocate
$LN3@Deallocate:

; 431  :         return;

	jmp	SHORT $LN1@Deallocate
$LN2@Deallocate:

; 432  :     CleanUpNumber(p);

	mov	rcx, QWORD PTR p$[rbp]
	call	CleanUpNumber

; 433  :     FillNumberHeader(p);

	mov	rcx, QWORD PTR p$[rbp]
	call	FillNumberHeader

; 434  :     HeapFree(hLocalHeap, 0, p);

	mov	r8, QWORD PTR p$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR hLocalHeap
	call	QWORD PTR __imp_HeapFree
$LN1@Deallocate:

; 435  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
DeallocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DetatchNumber
_TEXT	SEGMENT
p$ = 224
DetatchNumber PROC					; COMDAT

; 422  : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 423  :     if (p == NULL || !p->IS_STATIC)

	cmp	QWORD PTR p$[rbp], 0
	je	SHORT $LN3@DetatchNum
	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN2@DetatchNum
$LN3@DetatchNum:

; 424  :         return;

	jmp	SHORT $LN1@DetatchNum
$LN2@DetatchNum:

; 425  :     CleanUpNumber(p);

	mov	rcx, QWORD PTR p$[rbp]
	call	CleanUpNumber
$LN1@DetatchNum:

; 426  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
DetatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT AllocateNumber
_TEXT	SEGMENT
p$ = 8
result$ = 36
pp$ = 288
bit_count$ = 296
light_check_code$ = 304
AllocateNumber PROC					; COMDAT

; 409  : {

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 410  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	mov	r8d, 64					; 00000040H
	mov	edx, 8
	mov	rcx, QWORD PTR hLocalHeap
	call	QWORD PTR __imp_HeapAlloc
	mov	QWORD PTR p$[rbp], rax

; 411  :     if (p == NULL)

	cmp	QWORD PTR p$[rbp], 0
	jne	SHORT $LN2@AllocateNu

; 412  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	SHORT $LN1@AllocateNu
$LN2@AllocateNu:

; 413  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, light_check_code);

	mov	r8, QWORD PTR light_check_code$[rbp]
	mov	rdx, QWORD PTR bit_count$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	InitializeNumber
	mov	DWORD PTR result$[rbp], eax

; 414  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@AllocateNu

; 415  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@AllocateNu
$LN3@AllocateNu:

; 416  :     p->IS_STATIC = FALSE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	and	eax, -2					; fffffffeH
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 417  :     *pp = p;

	mov	rax, QWORD PTR pp$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax], rcx

; 418  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AllocateNu:

; 419  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
AllocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT AttatchNumber
_TEXT	SEGMENT
result$ = 4
p$ = 256
bit_count$ = 264
AttatchNumber PROC					; COMDAT

; 400  : {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 401  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, NULL);

	xor	r8d, r8d
	mov	rdx, QWORD PTR bit_count$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	InitializeNumber
	mov	DWORD PTR result$[rbp], eax

; 402  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@AttatchNum

; 403  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@AttatchNum
$LN2@AttatchNum:

; 404  :     p->IS_STATIC = TRUE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+40]
	or	eax, 1
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+40], eax

; 405  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AttatchNum:

; 406  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
AttatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CheckBlockLight
_TEXT	SEGMENT
words$ = 8
code_desired$ = 40
code_actual$ = 72
buffer$ = 320
code$ = 328
CheckBlockLight PROC					; COMDAT

; 253  : {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 254  : #ifdef _DEBUG
; 255  :     if (buffer == NULL)

	cmp	QWORD PTR buffer$[rbp], 0
	jne	SHORT $LN2@CheckBlock

; 256  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
$LN2@CheckBlock:

; 257  :     --buffer;

	mov	rax, QWORD PTR buffer$[rbp]
	sub	rax, 8
	mov	QWORD PTR buffer$[rbp], rax

; 258  :     __UNIT_TYPE words = buffer[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buffer$[rbp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR words$[rbp], rax

; 259  :     __UNIT_TYPE code_desired = buffer[words + 1] ^ (__UNIT_TYPE)&buffer[words + 1];

	mov	rax, QWORD PTR buffer$[rbp]
	mov	rcx, QWORD PTR words$[rbp]
	lea	rax, QWORD PTR [rax+rcx*8+8]
	mov	rcx, QWORD PTR buffer$[rbp]
	mov	rdx, QWORD PTR words$[rbp]
	mov	rcx, QWORD PTR [rcx+rdx*8+8]
	xor	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR code_desired$[rbp], rax

; 260  :     __UNIT_TYPE code_actual = code;

	mov	rax, QWORD PTR code$[rbp]
	mov	QWORD PTR code_actual$[rbp], rax

; 261  :     if (code_actual == code_desired)

	mov	rax, QWORD PTR code_desired$[rbp]
	cmp	QWORD PTR code_actual$[rbp], rax
	jne	SHORT $LN3@CheckBlock

; 262  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
	jmp	SHORT $LN4@CheckBlock
$LN3@CheckBlock:

; 263  :     else
; 264  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffffffffffeffH
$LN4@CheckBlock:
$LN1@CheckBlock:

; 265  : #else
; 266  :     return (PMC_STATUS_OK);
; 267  : #endif
; 268  : }

	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
CheckBlockLight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DeallocateBlock
_TEXT	SEGMENT
p$1 = 8
buffer$ = 256
buffer_words$ = 264
DeallocateBlock PROC					; COMDAT

; 198  : {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 199  : 	if (buffer != NULL)

	cmp	QWORD PTR buffer$[rbp], 0
	je	SHORT $LN2@Deallocate

; 200  : 	{
; 201  :         __UNIT_TYPE* p = buffer - 1;

	mov	rax, QWORD PTR buffer$[rbp]
	sub	rax, 8
	mov	QWORD PTR p$1[rbp], rax

; 202  :         if (*p != buffer_words)

	mov	rax, QWORD PTR p$1[rbp]
	mov	rcx, QWORD PTR buffer_words$[rbp]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN3@Deallocate

; 203  :         {
; 204  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 205  :         }

	jmp	SHORT $LN4@Deallocate
$LN3@Deallocate:

; 206  :         else
; 207  :         {
; 208  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 209  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	mov	rax, QWORD PTR buffer_words$[rbp]
	add	rax, 2
	mov	r8, rax
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	rcx, QWORD PTR p$1[rbp]
	call	_FILL_MEMORY_UNIT

; 210  :             // バッファを解放する。
; 211  :             HeapFree(hLocalHeap, 0, p);

	mov	r8, QWORD PTR p$1[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR hLocalHeap
	call	QWORD PTR __imp_HeapFree
$LN4@Deallocate:
$LN2@Deallocate:

; 212  :         }
; 213  : 	}
; 214  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
DeallocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT AllocateBlock
_TEXT	SEGMENT
words1$ = 8
words2$ = 40
bytes$ = 72
buffer$ = 104
r$ = 136
check_code$ = 168
tv88 = 376
bits$ = 416
allocated_block_words$ = 424
code$ = 432
AllocateBlock PROC					; COMDAT

; 156  : {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+456]
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 157  :     // 実際に獲得されるメモリ領域は「引数で渡されたワード数+2」のワード数となる。
; 158  :     // 最初のワードには獲得時に引数で渡されたワード数が格納される。
; 159  :     // 最後のワードには格納されている内容の正当性確認のための値が格納される。
; 160  :     // 2番目のワードへのポインタは呼び出し元に通知され利用される。
; 161  :     __UNIT_TYPE words1 = _DIVIDE_CEILING_UNIT(bits, __UNIT_TYPE_BIT_COUNT);

	mov	edx, 64					; 00000040H
	mov	rcx, QWORD PTR bits$[rbp]
	call	_DIVIDE_CEILING_UNIT
	mov	QWORD PTR words1$[rbp], rax

; 162  : 	__UNIT_TYPE words2 = words1 + 2;

	mov	rax, QWORD PTR words1$[rbp]
	add	rax, 2
	mov	QWORD PTR words2$[rbp], rax

; 163  : 	__UNIT_TYPE bytes = words2 * __UNIT_TYPE_BYTE_COUNT;

	mov	rax, QWORD PTR words2$[rbp]
	shl	rax, 3
	mov	QWORD PTR bytes$[rbp], rax

; 164  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	mov	r8, QWORD PTR bytes$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR hLocalHeap
	call	QWORD PTR __imp_HeapAlloc
	mov	QWORD PTR buffer$[rbp], rax

; 165  : 	if (buffer == NULL)

	cmp	QWORD PTR buffer$[rbp], 0
	jne	SHORT $LN2@AllocateBl

; 166  : 		return (NULL);

	xor	eax, eax
	jmp	$LN1@AllocateBl
$LN2@AllocateBl:

; 167  : 	buffer[0] = words1;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buffer$[rbp]
	mov	rdx, QWORD PTR words1$[rbp]
	mov	QWORD PTR [rcx+rax], rdx

; 168  :     *allocated_block_words = words1;

	mov	rax, QWORD PTR allocated_block_words$[rbp]
	mov	rcx, QWORD PTR words1$[rbp]
	mov	QWORD PTR [rax], rcx

; 169  : #ifdef _DEBUG
; 170  :     // 乱数もどきを生成する。
; 171  : #ifdef _M_IX86
; 172  :     __UNIT_TYPE r = GetTickCount();
; 173  : #elif defined(_M_IX64)
; 174  : #ifdef _MSC_VER
; 175  :     __UNIT_TYPE r = GetTickCount64();

	call	QWORD PTR __imp_GetTickCount64
	mov	QWORD PTR r$[rbp], rax

; 176  : #elif defined(__GNUC__)
; 177  :     _UINT32_T temp = GetTickCount();
; 178  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 179  : #else
; 180  : #error unknown compiler
; 181  : #endif
; 182  : #else
; 183  : #error unknown platform
; 184  : #endif
; 185  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;

	mov	eax, DWORD PTR configuration_info
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@AllocateBl
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR buffer$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, QWORD PTR words1$[rbp]
	mov	rcx, rax
	call	CalculateCheckCode
	mov	QWORD PTR tv88[rbp], rax
	jmp	SHORT $LN6@AllocateBl
$LN5@AllocateBl:
	mov	rax, -8897841259083430780		; 8484848484848484H
	mov	rcx, QWORD PTR r$[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv88[rbp], rax
$LN6@AllocateBl:
	mov	rax, QWORD PTR tv88[rbp]
	mov	QWORD PTR check_code$[rbp], rax

; 186  : #else
; 187  :     __UNIT_TYPE check_code = 0;
; 188  : #endif
; 189  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	mov	rax, QWORD PTR buffer$[rbp]
	mov	rcx, QWORD PTR words1$[rbp]
	lea	rax, QWORD PTR [rax+rcx*8+8]
	mov	rcx, QWORD PTR check_code$[rbp]
	xor	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR buffer$[rbp]
	mov	rdx, QWORD PTR words1$[rbp]
	mov	QWORD PTR [rcx+rdx*8+8], rax

; 190  :     if (code != NULL)

	cmp	QWORD PTR code$[rbp], 0
	je	SHORT $LN3@AllocateBl

; 191  :         *code = check_code;

	mov	rax, QWORD PTR code$[rbp]
	mov	rcx, QWORD PTR check_code$[rbp]
	mov	QWORD PTR [rax], rcx
$LN3@AllocateBl:

; 192  :     return (&buffer[1]);

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR buffer$[rbp]
	add	rcx, rax
	mov	rax, rcx
$LN1@AllocateBl:

; 193  : }

	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
AllocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DeallocateHeapArea
_TEXT	SEGMENT
DeallocateHeapArea PROC					; COMDAT

; 621  : {

$LN4:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 622  :     if (hLocalHeap != NULL)

	cmp	QWORD PTR hLocalHeap, 0
	je	SHORT $LN2@Deallocate

; 623  :     {
; 624  :         HeapDestroy(hLocalHeap);

	mov	rcx, QWORD PTR hLocalHeap
	call	QWORD PTR __imp_HeapDestroy

; 625  :         hLocalHeap = NULL;

	mov	QWORD PTR hLocalHeap, 0
$LN2@Deallocate:

; 626  :     }
; 627  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
DeallocateHeapArea ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT AllocateHeapArea
_TEXT	SEGMENT
AllocateHeapArea PROC					; COMDAT

; 613  : {

$LN4:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__AC713800_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 614  :     hLocalHeap = HeapCreate(0, 0x1000, 0);

	xor	r8d, r8d
	mov	edx, 4096				; 00001000H
	xor	ecx, ecx
	call	QWORD PTR __imp_HeapCreate
	mov	QWORD PTR hLocalHeap, rax

; 615  :     if (hLocalHeap == NULL)

	cmp	QWORD PTR hLocalHeap, 0
	jne	SHORT $LN2@AllocateHe

; 616  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@AllocateHe
$LN2@AllocateHe:

; 617  :     return (TRUE);

	mov	eax, 1
$LN1@AllocateHe:

; 618  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
AllocateHeapArea ENDP
_TEXT	ENDS
END
