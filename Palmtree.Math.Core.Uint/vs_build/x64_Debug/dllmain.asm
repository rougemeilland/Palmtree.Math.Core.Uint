; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__A6DAE95C_dllmain@c DB 01H
msvcjmc	ENDS
PUBLIC	DllMain
PUBLIC	__JustMyCode_Default
EXTRN	AllocateHeapArea:PROC
EXTRN	DeallocateHeapArea:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$DllMain DD imagerel $LN11
	DD	imagerel $LN11+169
	DD	imagerel $unwind$DllMain
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DllMain DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\dllmain.c
;	COMDAT DllMain
_TEXT	SEGMENT
result$ = 4
tv64 = 212
hinstDLL$ = 256
dwReason$ = 264
lpvReserved$ = 272
DllMain	PROC						; COMDAT

; 42   : {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__A6DAE95C_dllmain@c
	call	__CheckForDebuggerJustMyCode

; 43   : 	BOOL result = TRUE;

	mov	DWORD PTR result$[rbp], 1

; 44   : 	switch (dwReason)

	mov	eax, DWORD PTR dwReason$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN8@DllMain
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN4@DllMain
	cmp	DWORD PTR tv64[rbp], 2
	je	SHORT $LN6@DllMain
	cmp	DWORD PTR tv64[rbp], 3
	je	SHORT $LN7@DllMain
	jmp	SHORT $LN9@DllMain
$LN4@DllMain:

; 45   : 	{
; 46   :         case DLL_PROCESS_ATTACH: // DLLがプロセスのアドレス空間にマッピングされた。
; 47   :             if (!AllocateHeapArea())

	call	AllocateHeapArea
	test	eax, eax
	jne	SHORT $LN5@DllMain

; 48   :                 result = FALSE;

	mov	DWORD PTR result$[rbp], 0
$LN5@DllMain:

; 49   :             break;

	jmp	SHORT $LN2@DllMain
$LN6@DllMain:

; 50   : 
; 51   :         case DLL_THREAD_ATTACH: // スレッドが作成されようとしている。
; 52   :             break;

	jmp	SHORT $LN2@DllMain
$LN7@DllMain:

; 53   : 
; 54   :         case DLL_THREAD_DETACH: // スレッドが破棄されようとしている。
; 55   :             break;

	jmp	SHORT $LN2@DllMain
$LN8@DllMain:

; 56   : 
; 57   :         case DLL_PROCESS_DETACH: // DLLのマッピングが解除されようとしている。
; 58   :             DeallocateHeapArea();

	call	DeallocateHeapArea

; 59   :             break;

	jmp	SHORT $LN2@DllMain
$LN9@DllMain:

; 60   :         default:
; 61   :             result = FALSE;

	mov	DWORD PTR result$[rbp], 0
$LN2@DllMain:

; 62   :             break;
; 63   : 	}
; 64   : 	return (result);

	mov	eax, DWORD PTR result$[rbp]

; 65   : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
DllMain	ENDP
_TEXT	ENDS
END
