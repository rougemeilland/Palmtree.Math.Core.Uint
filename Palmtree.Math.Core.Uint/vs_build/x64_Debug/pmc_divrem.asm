; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E05E7037_autogenerated_inline_func@h DB 01H
__531E8CBE_pmc_divrem@c DB 01H
msvcjmc	ENDS
PUBLIC	DivRem_X_1W
PUBLIC	Rem_X_1W
PUBLIC	DivRem_X_X
PUBLIC	Initialize_DivRem
PUBLIC	PMC_DivRem_I_X
PUBLIC	PMC_DivRem_L_X
PUBLIC	PMC_DivRem_X_I
PUBLIC	PMC_DivRem_X_L
PUBLIC	PMC_DivRem_X_X
PUBLIC	__JustMyCode_Default
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	RightShift_Imp_DIV:PROC
EXTRN	LeftShift_Imp_DIV:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_RTC_UninitUse:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	number_zero:BYTE
EXTRN	statistics_info:BYTE
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
fp_DivRem_X_X DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DivRem_X_1W DD imagerel $LN25
	DD	imagerel $LN25+4174
	DD	imagerel $unwind$DivRem_X_1W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Rem_X_1W DD imagerel $LN25
	DD	imagerel $LN25+2933
	DD	imagerel $unwind$Rem_X_1W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DivRem_X_X DD imagerel $LN18
	DD	imagerel $LN18+638
	DD	imagerel $unwind$DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_DivRem DD imagerel $LN5
	DD	imagerel $LN5+147
	DD	imagerel $unwind$Initialize_DivRem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_I_X DD imagerel $LN20
	DD	imagerel $LN20+521
	DD	imagerel $unwind$PMC_DivRem_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_L_X DD imagerel $LN39
	DD	imagerel $LN39+1716
	DD	imagerel $unwind$PMC_DivRem_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_X_I DD imagerel $LN29
	DD	imagerel $LN29+892
	DD	imagerel $unwind$PMC_DivRem_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_X_L DD imagerel $LN78
	DD	imagerel $LN78+3018
	DD	imagerel $unwind$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_X_X DD imagerel $LN55
	DD	imagerel $LN55+2379
	DD	imagerel $unwind$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IncrementDIV32Counter DD imagerel IncrementDIV32Counter
	DD	imagerel IncrementDIV32Counter+62
	DD	imagerel $unwind$IncrementDIV32Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IncrementDIV64Counter DD imagerel IncrementDIV64Counter
	DD	imagerel IncrementDIV64Counter+62
	DD	imagerel $unwind$IncrementDIV64Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IncrementMULTI32Counter DD imagerel IncrementMULTI32Counter
	DD	imagerel IncrementMULTI32Counter+62
	DD	imagerel $unwind$IncrementMULTI32Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IncrementMULTI64Counter DD imagerel IncrementMULTI64Counter
	DD	imagerel IncrementMULTI64Counter+62
	DD	imagerel $unwind$IncrementMULTI64Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddToDIV32Counter DD imagerel AddToDIV32Counter
	DD	imagerel AddToDIV32Counter+78
	DD	imagerel $unwind$AddToDIV32Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddToDIV64Counter DD imagerel AddToDIV64Counter
	DD	imagerel AddToDIV64Counter+78
	DD	imagerel $unwind$AddToDIV64Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddToMULTI32Counter DD imagerel AddToMULTI32Counter
	DD	imagerel AddToMULTI32Counter+78
	DD	imagerel $unwind$AddToMULTI32Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddToMULTI64Counter DD imagerel AddToMULTI64Counter
	DD	imagerel AddToMULTI64Counter+78
	DD	imagerel $unwind$AddToMULTI64Counter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT_DIV DD imagerel _COPY_MEMORY_UNIT_DIV
	DD	imagerel _COPY_MEMORY_UNIT_DIV+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMWORDTODWORD DD imagerel _FROMWORDTODWORD
	DD	imagerel _FROMWORDTODWORD+85
	DD	imagerel $unwind$_FROMWORDTODWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FROMDWORDTOWORD DD imagerel _FROMDWORDTOWORD
	DD	imagerel _FROMDWORDTOWORD+95
	DD	imagerel $unwind$_FROMDWORDTOWORD
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_UNIT_DIV DD imagerel _ADD_UNIT_DIV
	DD	imagerel _ADD_UNIT_DIV+114
	DD	imagerel $unwind$_ADD_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADDX_UNIT_DIV DD imagerel _ADDX_UNIT_DIV
	DD	imagerel _ADDX_UNIT_DIV+117
	DD	imagerel $unwind$_ADDX_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_SUBTRUCT_UNIT_DIV DD imagerel _SUBTRUCT_UNIT_DIV
	DD	imagerel _SUBTRUCT_UNIT_DIV+114
	DD	imagerel $unwind$_SUBTRUCT_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLY_UNIT_DIV DD imagerel _MULTIPLY_UNIT_DIV
	DD	imagerel _MULTIPLY_UNIT_DIV+102
	DD	imagerel $unwind$_MULTIPLY_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLYX_UNIT_DIV DD imagerel _MULTIPLYX_UNIT_DIV
	DD	imagerel _MULTIPLYX_UNIT_DIV+102
	DD	imagerel $unwind$_MULTIPLYX_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_DIVREM_UNIT DD imagerel _DIVREM_UNIT
	DD	imagerel _DIVREM_UNIT+218
	DD	imagerel $unwind$_DIVREM_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_DIVREM_SINGLE_UNIT DD imagerel _DIVREM_SINGLE_UNIT
	DD	imagerel _DIVREM_SINGLE_UNIT+218
	DD	imagerel $unwind$_DIVREM_SINGLE_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_32 DD imagerel _LZCNT_ALT_32
	DD	imagerel _LZCNT_ALT_32+126
	DD	imagerel $unwind$_LZCNT_ALT_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT DD imagerel _LZCNT_ALT_UNIT
	DD	imagerel _LZCNT_ALT_UNIT+131
	DD	imagerel $unwind$_LZCNT_ALT_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_LZCNT_ALT_UNIT_DIV DD imagerel _LZCNT_ALT_UNIT_DIV
	DD	imagerel _LZCNT_ALT_UNIT_DIV+126
	DD	imagerel $unwind$_LZCNT_ALT_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_32WORDS_ADC_DIV DD imagerel _ADD_32WORDS_ADC_DIV
	DD	imagerel _ADD_32WORDS_ADC_DIV+2709
	DD	imagerel $unwind$_ADD_32WORDS_ADC_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_32WORDS_ADCX_DIV DD imagerel _ADD_32WORDS_ADCX_DIV
	DD	imagerel _ADD_32WORDS_ADCX_DIV+2709
	DD	imagerel $unwind$_ADD_32WORDS_ADCX_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_16WORDS_ADC_DIV DD imagerel _ADD_16WORDS_ADC_DIV
	DD	imagerel _ADD_16WORDS_ADC_DIV+1397
	DD	imagerel $unwind$_ADD_16WORDS_ADC_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_16WORDS_ADCX_DIV DD imagerel _ADD_16WORDS_ADCX_DIV
	DD	imagerel _ADD_16WORDS_ADCX_DIV+1397
	DD	imagerel $unwind$_ADD_16WORDS_ADCX_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_8WORDS_ADC_DIV DD imagerel _ADD_8WORDS_ADC_DIV
	DD	imagerel _ADD_8WORDS_ADC_DIV+741
	DD	imagerel $unwind$_ADD_8WORDS_ADC_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_8WORDS_ADCX_DIV DD imagerel _ADD_8WORDS_ADCX_DIV
	DD	imagerel _ADD_8WORDS_ADCX_DIV+741
	DD	imagerel $unwind$_ADD_8WORDS_ADCX_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_4WORDS_ADC_DIV DD imagerel _ADD_4WORDS_ADC_DIV
	DD	imagerel _ADD_4WORDS_ADC_DIV+413
	DD	imagerel $unwind$_ADD_4WORDS_ADC_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_4WORDS_ADCX_DIV DD imagerel _ADD_4WORDS_ADCX_DIV
	DD	imagerel _ADD_4WORDS_ADCX_DIV+413
	DD	imagerel $unwind$_ADD_4WORDS_ADCX_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_2WORDS_ADC_DIV DD imagerel _ADD_2WORDS_ADC_DIV
	DD	imagerel _ADD_2WORDS_ADC_DIV+249
	DD	imagerel $unwind$_ADD_2WORDS_ADC_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ADD_2WORDS_ADCX_DIV DD imagerel _ADD_2WORDS_ADCX_DIV
	DD	imagerel _ADD_2WORDS_ADCX_DIV+249
	DD	imagerel $unwind$_ADD_2WORDS_ADCX_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AsumeQ_ DD imagerel AsumeQ_
	DD	imagerel AsumeQ_+166
	DD	imagerel $unwind$AsumeQ_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CheckQ_ DD imagerel CheckQ_
	DD	imagerel CheckQ_+323
	DD	imagerel $unwind$CheckQ_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CheckQ_X DD imagerel CheckQ_X
	DD	imagerel CheckQ_X+323
	DD	imagerel $unwind$CheckQ_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CalculateQ_ DD imagerel CalculateQ_
	DD	imagerel CalculateQ_+370
	DD	imagerel $unwind$CalculateQ_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CalculateQ_X DD imagerel CalculateQ_X
	DD	imagerel CalculateQ_X+370
	DD	imagerel $unwind$CalculateQ_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DoBorrow DD imagerel DoBorrow
	DD	imagerel DoBorrow+198
	DD	imagerel $unwind$DoBorrow
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLY_DIGIT_UNIT_DIV DD imagerel _MULTIPLY_DIGIT_UNIT_DIV
	DD	imagerel _MULTIPLY_DIGIT_UNIT_DIV+224
	DD	imagerel $unwind$_MULTIPLY_DIGIT_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLYX_DIGIT_UNIT_DIV DD imagerel _MULTIPLYX_DIGIT_UNIT_DIV
	DD	imagerel _MULTIPLYX_DIGIT_UNIT_DIV+224
	DD	imagerel $unwind$_MULTIPLYX_DIGIT_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SubtructOneLine DD imagerel SubtructOneLine
	DD	imagerel SubtructOneLine+5427
	DD	imagerel $unwind$SubtructOneLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SubtructOneLineX DD imagerel SubtructOneLineX
	DD	imagerel SubtructOneLineX+5427
	DD	imagerel $unwind$SubtructOneLineX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DoCarry DD imagerel DoCarry
	DD	imagerel DoCarry+176
	DD	imagerel $unwind$DoCarry
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddOneLine DD imagerel AddOneLine
	DD	imagerel AddOneLine+591
	DD	imagerel $unwind$AddOneLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddOneLineX DD imagerel AddOneLineX
	DD	imagerel AddOneLineX+591
	DD	imagerel $unwind$AddOneLineX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DivRem_X_X_using_ADC_MUL DD imagerel DivRem_X_X_using_ADC_MUL
	DD	imagerel DivRem_X_X_using_ADC_MUL+627
	DD	imagerel $unwind$DivRem_X_X_using_ADC_MUL
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DivRem_X_X_using_ADX_MULX DD imagerel DivRem_X_X_using_ADX_MULX
	DD	imagerel DivRem_X_X_using_ADX_MULX+627
	DD	imagerel $unwind$DivRem_X_X_using_ADX_MULX
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DivRem_X_X_using_ADX_MULX DD 035053901H
	DD	011d3322H
	DD	07016002fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DivRem_X_X_using_ADC_MUL DD 035053901H
	DD	011d3322H
	DD	07016002fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddOneLineX DD 025053901H
	DD	011d2322H
	DD	070160031H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddOneLine DD 025053901H
	DD	011d2322H
	DD	070160031H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DoCarry DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SubtructOneLineX DD 035053901H
	DD	011d3322H
	DD	070160037H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
SubtructOneLineX$rtcName$0 DB 06bH
	DB	00H
	ORG $+14
SubtructOneLineX$rtcVarDesc DD 094H
	DD	04H
	DQ	FLAT:SubtructOneLineX$rtcName$0
	ORG $+48
SubtructOneLineX$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:SubtructOneLineX$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SubtructOneLine DD 035053901H
	DD	011d3322H
	DD	070160037H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
SubtructOneLine$rtcName$0 DB 06bH
	DB	00H
	ORG $+14
SubtructOneLine$rtcVarDesc DD 094H
	DD	04H
	DQ	FLAT:SubtructOneLine$rtcName$0
	ORG $+48
SubtructOneLine$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:SubtructOneLine$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLYX_DIGIT_UNIT_DIV DD 025053801H
	DD	011c2321H
	DD	070150025H
	DD	05014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_MULTIPLYX_DIGIT_UNIT_DIV$rtcName$0 DB 074H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
_MULTIPLYX_DIGIT_UNIT_DIV$rtcName$1 DB 074H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	00H
	ORG $+3
_MULTIPLYX_DIGIT_UNIT_DIV$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:_MULTIPLYX_DIGIT_UNIT_DIV$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:_MULTIPLYX_DIGIT_UNIT_DIV$rtcName$0
	ORG $+96
_MULTIPLYX_DIGIT_UNIT_DIV$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:_MULTIPLYX_DIGIT_UNIT_DIV$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLY_DIGIT_UNIT_DIV DD 025053801H
	DD	011c2321H
	DD	070150025H
	DD	05014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_MULTIPLY_DIGIT_UNIT_DIV$rtcName$0 DB 074H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
_MULTIPLY_DIGIT_UNIT_DIV$rtcName$1 DB 074H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	00H
	ORG $+3
_MULTIPLY_DIGIT_UNIT_DIV$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:_MULTIPLY_DIGIT_UNIT_DIV$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:_MULTIPLY_DIGIT_UNIT_DIV$rtcName$0
	ORG $+96
_MULTIPLY_DIGIT_UNIT_DIV$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:_MULTIPLY_DIGIT_UNIT_DIV$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DoBorrow DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CalculateQ_X DD 035053901H
	DD	011d3322H
	DD	07016003bH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CalculateQ_ DD 035053901H
	DD	011d3322H
	DD	07016003bH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CheckQ_X DD 025053601H
	DD	011b2320H
	DD	070140039H
	DD	05013H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
CheckQ_X$rtcName$0 DB 06cH
	DB	068H
	DB	05fH
	DB	06dH
	DB	069H
	DB	00H
	ORG $+2
CheckQ_X$rtcName$1 DB 072H
	DB	068H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+2
CheckQ_X$rtcName$2 DB 072H
	DB	068H
	DB	05fH
	DB	06dH
	DB	069H
	DB	00H
	ORG $+2
CheckQ_X$rtcName$3 DB 074H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
CheckQ_X$rtcVarDesc DD 0c4H
	DD	04H
	DQ	FLAT:CheckQ_X$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:CheckQ_X$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:CheckQ_X$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:CheckQ_X$rtcName$0
	ORG $+192
CheckQ_X$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:CheckQ_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CheckQ_ DD 025053601H
	DD	011b2320H
	DD	070140039H
	DD	05013H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
CheckQ_$rtcName$0 DB 06cH
	DB	068H
	DB	05fH
	DB	06dH
	DB	069H
	DB	00H
	ORG $+2
CheckQ_$rtcName$1 DB 072H
	DB	068H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+2
CheckQ_$rtcName$2 DB 072H
	DB	068H
	DB	05fH
	DB	06dH
	DB	069H
	DB	00H
	ORG $+2
CheckQ_$rtcName$3 DB 074H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
CheckQ_$rtcVarDesc DD 0c4H
	DD	04H
	DQ	FLAT:CheckQ_$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:CheckQ_$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:CheckQ_$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:CheckQ_$rtcName$0
	ORG $+192
CheckQ_$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:CheckQ_$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AsumeQ_ DD 025053101H
	DD	0116231bH
	DD	0700f0025H
	DD	0500eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
AsumeQ_$rtcName$0 DB 072H
	DB	00H
	ORG $+14
AsumeQ_$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:AsumeQ_$rtcName$0
	ORG $+48
AsumeQ_$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:AsumeQ_$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_2WORDS_ADCX_DIV DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_2WORDS_ADC_DIV DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_4WORDS_ADCX_DIV DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_4WORDS_ADC_DIV DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_8WORDS_ADCX_DIV DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_8WORDS_ADC_DIV DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_16WORDS_ADCX_DIV DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_16WORDS_ADC_DIV DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_32WORDS_ADCX_DIV DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_32WORDS_ADC_DIV DD 025053801H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT_DIV DD 025052801H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT_DIV$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT_DIV$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT_DIV$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT_DIV$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT_DIV$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_UNIT DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_UNIT$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_UNIT$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcName$0
	ORG $+48
_LZCNT_ALT_UNIT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_UNIT$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_LZCNT_ALT_32 DD 025052801H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
_LZCNT_ALT_32$rtcName$0 DB 070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
_LZCNT_ALT_32$rtcVarDesc DD 024H
	DD	04H
	DQ	FLAT:_LZCNT_ALT_32$rtcName$0
	ORG $+48
_LZCNT_ALT_32$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:_LZCNT_ALT_32$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_DIVREM_SINGLE_UNIT DD 025053601H
	DD	011b2320H
	DD	070140021H
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_DIVREM_UNIT DD 025053601H
	DD	011b2320H
	DD	070140021H
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLYX_UNIT_DIV DD 025053101H
	DD	0116231bH
	DD	0700f001dH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLY_UNIT_DIV DD 025053101H
	DD	0116231bH
	DD	0700f001dH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_SUBTRUCT_UNIT_DIV DD 025053701H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADDX_UNIT_DIV DD 025053701H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ADD_UNIT_DIV DD 025053701H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMDWORDTOWORD DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FROMWORDTODWORD DD 025052c01H
	DD	01112316H
	DD	0700a001dH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT_DIV DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddToMULTI64Counter DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddToMULTI32Counter DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddToDIV64Counter DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddToDIV32Counter DD 025052801H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IncrementMULTI64Counter DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IncrementMULTI32Counter DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IncrementDIV64Counter DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IncrementDIV32Counter DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_X_X DD 045053901H
	DD	011d4322H
	DD	07016009fH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_DivRem_X_X$rtcName$0 DB 06eH
	DB	071H
	DB	00H
	ORG $+1
PMC_DivRem_X_X$rtcName$1 DB 06eH
	DB	072H
	DB	00H
	ORG $+1
PMC_DivRem_X_X$rtcName$2 DB 06eH
	DB	071H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_DivRem_X_X$rtcName$3 DB 06eH
	DB	072H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_DivRem_X_X$rtcName$4 DB 06eH
	DB	072H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_DivRem_X_X$rtcName$5 DB 06eH
	DB	071H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_DivRem_X_X$rtcName$6 DB 06eH
	DB	072H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_DivRem_X_X$rtcName$7 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
PMC_DivRem_X_X$rtcName$8 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+7
PMC_DivRem_X_X$rtcName$9 DB 06eH
	DB	072H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_DivRem_X_X$rtcName$10 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
PMC_DivRem_X_X$rtcName$11 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+15
PMC_DivRem_X_X$rtcVarDesc DD 0328H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$11
	DD	0308H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$10
	DD	02e8H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$9
	DD	0288H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$8
	DD	0268H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$7
	DD	0248H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$6
	DD	0228H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$5
	DD	01c8H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$4
	DD	0188H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$3
	DD	0148H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$2
	DD	0c8H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$1
	DD	0a8H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_X$rtcName$0
	ORG $+576
PMC_DivRem_X_X$rtcFrameData DD 0cH
	DD	00H
	DQ	FLAT:PMC_DivRem_X_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_X_L DD 045053901H
	DD	011d4322H
	DD	0701600ddH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_DivRem_X_L$rtcName$0 DB 06eH
	DB	071H
	DB	00H
	ORG $+1
PMC_DivRem_X_L$rtcName$1 DB 076H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
PMC_DivRem_X_L$rtcName$3 DB 072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
PMC_DivRem_X_L$rtcName$2 DB 06eH
	DB	071H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+4
PMC_DivRem_X_L$rtcName$4 DB 06eH
	DB	071H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
PMC_DivRem_X_L$rtcName$5 DB 076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
PMC_DivRem_X_L$rtcName$6 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+5
PMC_DivRem_X_L$rtcName$7 DB 072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
PMC_DivRem_X_L$rtcName$8 DB 072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
PMC_DivRem_X_L$rtcName$9 DB 076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
PMC_DivRem_X_L$rtcName$10 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+5
PMC_DivRem_X_L$rtcName$11 DB 072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+5
PMC_DivRem_X_L$rtcName$12 DB 072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	077H
	DB	06fH
	DB	072H
	DB	064H
	DB	073H
	DB	00H
	ORG $+4
PMC_DivRem_X_L$rtcName$13 DB 06eH
	DB	071H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
PMC_DivRem_X_L$rtcName$14 DB 072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
PMC_DivRem_X_L$rtcFrameData DD 0fH
	DD	00H
	DQ	FLAT:PMC_DivRem_X_L$rtcVarDesc
	ORG $+8
PMC_DivRem_X_L$rtcVarDesc DD 0444H
	DD	04H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$14
	DD	0428H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$13
	DD	0388H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$12
	DD	0368H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$11
	DD	0348H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$10
	DD	0328H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$9
	DD	02c8H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$8
	DD	02a8H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$7
	DD	0288H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$6
	DD	0268H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$5
	DD	0248H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$4
	DD	0164H
	DD	04H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$3
	DD	0148H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$2
	DD	0c4H
	DD	04H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$1
	DD	088H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_L$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_X_I DD 035053801H
	DD	011c3321H
	DD	070150043H
	DD	05014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_DivRem_X_I$rtcName$0 DB 06eH
	DB	071H
	DB	00H
	ORG $+5
PMC_DivRem_X_I$rtcName$1 DB 06eH
	DB	071H
	DB	05fH
	DB	06cH
	DB	069H
	DB	067H
	DB	068H
	DB	074H
	DB	05fH
	DB	063H
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
PMC_DivRem_X_I$rtcName$2 DB 072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
PMC_DivRem_X_I$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:PMC_DivRem_X_I$rtcVarDesc
	ORG $+8
PMC_DivRem_X_I$rtcVarDesc DD 0114H
	DD	04H
	DQ	FLAT:PMC_DivRem_X_I$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_I$rtcName$1
	DD	078H
	DD	08H
	DQ	FLAT:PMC_DivRem_X_I$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_L_X DD 045054a19H
	DD	011d4322H
	DD	0701600a9H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0538H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_DivRem_L_X$rtcName$0 DB 075H
	DB	05fH
	DB	068H
	DB	069H
	DB	00H
	ORG $+3
PMC_DivRem_L_X$rtcName$1 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	072H
	DB	00H
	ORG $+1
PMC_DivRem_L_X$rtcName$2 DB 075H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
PMC_DivRem_L_X$rtcName$3 DB 071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
PMC_DivRem_L_X$rtcName$4 DB 072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
PMC_DivRem_L_X$rtcName$5 DB 075H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
PMC_DivRem_L_X$rtcName$6 DB 075H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
PMC_DivRem_L_X$rtcName$7 DB 071H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
PMC_DivRem_L_X$rtcName$8 DB 072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
PMC_DivRem_L_X$rtcName$9 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+1
PMC_DivRem_L_X$rtcName$10 DB 075H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+2
PMC_DivRem_L_X$rtcName$11 DB 072H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
PMC_DivRem_L_X$rtcName$12 DB 077H
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	076H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+1
PMC_DivRem_L_X$rtcName$13 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	072H
	DB	00H
	ORG $+5
PMC_DivRem_L_X$rtcVarDesc DD 0384H
	DD	04H
	DQ	FLAT:PMC_DivRem_L_X$rtcName$13
	DD	0328H
	DD	08H
	DQ	FLAT:PMC_DivRem_L_X$rtcName$12
	DD	02f8H
	DD	0cH
	DQ	FLAT:PMC_DivRem_L_X$rtcName$11
	DD	02d8H
	DD	08H
	DQ	FLAT:PMC_DivRem_L_X$rtcName$10
	DD	02b8H
	DD	08H
	DQ	FLAT:PMC_DivRem_L_X$rtcName$9
	DD	0288H
	DD	0cH
	DQ	FLAT:PMC_DivRem_L_X$rtcName$8
	DD	0258H
	DD	0cH
	DQ	FLAT:PMC_DivRem_L_X$rtcName$7
	DD	0238H
	DD	08H
	DQ	FLAT:PMC_DivRem_L_X$rtcName$6
	DD	01f8H
	DD	08H
	DQ	FLAT:PMC_DivRem_L_X$rtcName$5
	DD	01d4H
	DD	04H
	DQ	FLAT:PMC_DivRem_L_X$rtcName$4
	DD	01a8H
	DD	0cH
	DQ	FLAT:PMC_DivRem_L_X$rtcName$3
	DD	0188H
	DD	08H
	DQ	FLAT:PMC_DivRem_L_X$rtcName$2
	DD	0104H
	DD	04H
	DQ	FLAT:PMC_DivRem_L_X$rtcName$1
	DD	084H
	DD	04H
	DQ	FLAT:PMC_DivRem_L_X$rtcName$0
	ORG $+672
PMC_DivRem_L_X$rtcFrameData DD 0eH
	DD	00H
	DQ	FLAT:PMC_DivRem_L_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_I_X DD 025053701H
	DD	011c2321H
	DD	070150035H
	DD	05014H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_DivRem_I_X$rtcName$0 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	072H
	DB	00H
	ORG $+9
PMC_DivRem_I_X$rtcVarDesc DD 0a4H
	DD	04H
	DQ	FLAT:PMC_DivRem_I_X$rtcName$0
	ORG $+48
PMC_DivRem_I_X$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_DivRem_I_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_DivRem DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DivRem_X_X DD 045053901H
	DD	011d4322H
	DD	07016003dH
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
DivRem_X_X$rtcName$0 DB 072H
	DB	00H
	ORG $+2
DivRem_X_X$rtcName$1 DB 072H
	DB	00H
	ORG $+10
DivRem_X_X$rtcVarDesc DD 0104H
	DD	04H
	DQ	FLAT:DivRem_X_X$rtcName$1
	DD	0c4H
	DD	04H
	DQ	FLAT:DivRem_X_X$rtcName$0
	ORG $+96
DivRem_X_X$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:DivRem_X_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Rem_X_1W DD 025053401H
	DD	0118231dH
	DD	070110031H
	DD	05010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Rem_X_1W$rtcName$0 DB 064H
	DB	075H
	DB	06dH
	DB	06dH
	DB	079H
	DB	05fH
	DB	071H
	DB	00H
	ORG $+8
Rem_X_1W$rtcVarDesc DD 064H
	DD	04H
	DQ	FLAT:Rem_X_1W$rtcName$0
	ORG $+48
Rem_X_1W$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:Rem_X_1W$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DivRem_X_1W DD 025053901H
	DD	011d2322H
	DD	070160031H
	DD	05015H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_X_using_ADX_MULX
_TEXT	SEGMENT
d_factor$ = 4
work_u_buf$ = 40
q_index$ = 72
q_$1 = 100
u_buf$ = 352
u_buf_len$ = 360
v_buf$ = 368
v_buf_len$ = 376
work_v_buf$ = 384
q_buf$ = 392
r_buf$ = 400
DivRem_X_X_using_ADX_MULX PROC				; COMDAT

; 1122 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 1123 :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 1124 :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN9@DivRem_X_X
$LN2@DivRem_X_X:

; 1125 :     {
; 1126 :         while (u_buf[u_buf_len - 1] == 0)

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	cmp	DWORD PTR [rax+rcx*4-4], 0
	jne	SHORT $LN3@DivRem_X_X

; 1127 :             --u_buf_len;

	mov	rax, QWORD PTR u_buf_len$[rbp]
	dec	rax
	mov	QWORD PTR u_buf_len$[rbp], rax
	jmp	SHORT $LN2@DivRem_X_X
$LN3@DivRem_X_X:
$LN4@DivRem_X_X:

; 1128 :         while (v_buf[v_buf_len - 1] == 0)

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_len$[rbp]
	cmp	DWORD PTR [rax+rcx*4-4], 0
	jne	SHORT $LN5@DivRem_X_X

; 1129 :             --v_buf_len;

	mov	rax, QWORD PTR v_buf_len$[rbp]
	dec	rax
	mov	QWORD PTR v_buf_len$[rbp], rax
	jmp	SHORT $LN4@DivRem_X_X
$LN5@DivRem_X_X:
$LN9@DivRem_X_X:

; 1130 :     }
; 1131 : 
; 1132 : #ifdef _DEBUG
; 1133 :     if (v_buf[v_buf_len - 1] == 0)

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_len$[rbp]

; 1134 :     {
; 1135 :         ; // このルートには到達しないはず。デバッグ用。
; 1136 :     }
; 1137 : #endif
; 1138 : 
; 1139 : #ifdef DO_TRACE
; 1140 :     ReportLabel("uとvのシフト");
; 1141 :     ReportDump("u", (__UNIT_TYPE*)u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1142 :     ReportDump("v", (__UNIT_TYPE*)v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1143 : #endif
; 1144 : 
; 1145 :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_len$[rbp]
	mov	ecx, DWORD PTR [rax+rcx*4-4]
	call	_LZCNT_ALT_UNIT_DIV
	mov	DWORD PTR d_factor$[rbp], eax

; 1146 :     if (d_factor == 0)

	cmp	DWORD PTR d_factor$[rbp], 0
	jne	SHORT $LN11@DivRem_X_X

; 1147 :     {
; 1148 :         _COPY_MEMORY_UNIT_DIV(r_buf, u_buf, u_buf_len);

	mov	r8, QWORD PTR u_buf_len$[rbp]
	mov	rdx, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR r_buf$[rbp]
	call	_COPY_MEMORY_UNIT_DIV

; 1149 :         _COPY_MEMORY_UNIT_DIV(work_v_buf, v_buf, v_buf_len);

	mov	r8, QWORD PTR v_buf_len$[rbp]
	mov	rdx, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	_COPY_MEMORY_UNIT_DIV

; 1150 :         r_buf[u_buf_len] = 0;

	mov	rax, QWORD PTR r_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	mov	DWORD PTR [rax+rcx*4], 0

; 1151 :     }

	jmp	SHORT $LN12@DivRem_X_X
$LN11@DivRem_X_X:

; 1152 :     else
; 1153 :     {
; 1154 :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	mov	eax, DWORD PTR d_factor$[rbp]
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR r_buf$[rbp]
	mov	r8d, eax
	mov	rdx, QWORD PTR u_buf_len$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	call	LeftShift_Imp_DIV

; 1155 :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	mov	eax, DWORD PTR d_factor$[rbp]
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR work_v_buf$[rbp]
	mov	r8d, eax
	mov	rdx, QWORD PTR v_buf_len$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	call	LeftShift_Imp_DIV
$LN12@DivRem_X_X:

; 1156 :     }
; 1157 : #ifdef DO_TRACE
; 1158 :     ReportDump("⇒u", (__UNIT_TYPE*)r_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1159 :     ReportDump("⇒v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1160 : #endif
; 1161 : 
; 1162 :     __UNIT_TYPE_DIV* work_u_buf = r_buf;

	mov	rax, QWORD PTR r_buf$[rbp]
	mov	QWORD PTR work_u_buf$[rbp], rax

; 1163 :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	rax, QWORD PTR v_buf_len$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q_index$[rbp], rax
$LN6@DivRem_X_X:

; 1164 : 
; 1165 :     for (;;)
; 1166 :     {
; 1167 :         __UNIT_TYPE_DIV q_ = CalculateQ_X(work_u_buf, work_v_buf, v_buf_len, q_index);

	mov	r9, QWORD PTR q_index$[rbp]
	mov	r8, QWORD PTR v_buf_len$[rbp]
	mov	rdx, QWORD PTR work_v_buf$[rbp]
	mov	rcx, QWORD PTR work_u_buf$[rbp]
	call	CalculateQ_X
	mov	DWORD PTR q_$1[rbp], eax

; 1168 : 
; 1169 : #ifdef DO_TRACE
; 1170 :         ReportLabel("uの減算");
; 1171 :         ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1172 :         ReportDump("v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1173 :         ReportVar("q_", q_);
; 1174 : #endif
; 1175 :         if (SubtructOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	mov	eax, DWORD PTR q_$1[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR q_index$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR v_buf_len$[rbp]
	mov	r8, QWORD PTR work_v_buf$[rbp]
	mov	rdx, QWORD PTR u_buf_len$[rbp]
	mov	rcx, QWORD PTR work_u_buf$[rbp]
	call	SubtructOneLineX
	test	eax, eax
	je	SHORT $LN13@DivRem_X_X

; 1176 :         {
; 1177 : #ifdef DO_TRACE
; 1178 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1179 : #endif
; 1180 :             // 桁借りが発生した場合
; 1181 : 
; 1182 : #ifdef DO_TRACE
; 1183 :             ReportLabel("uの加え戻しとq_の更新");
; 1184 :             ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1185 : #endif
; 1186 :             --q_;

	mov	eax, DWORD PTR q_$1[rbp]
	dec	eax
	mov	DWORD PTR q_$1[rbp], eax

; 1187 :             AddOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	mov	rax, QWORD PTR q_index$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR v_buf_len$[rbp]
	mov	r8, QWORD PTR work_v_buf$[rbp]
	mov	rdx, QWORD PTR u_buf_len$[rbp]
	mov	rcx, QWORD PTR work_u_buf$[rbp]
	call	AddOneLineX
$LN13@DivRem_X_X:

; 1188 : #ifdef DO_TRACE
; 1189 :             ReportVar("q_", q_);
; 1190 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1191 : #endif
; 1192 :         }
; 1193 :         else
; 1194 :         {
; 1195 : #ifdef DO_TRACE
; 1196 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1197 : #endif
; 1198 :         }
; 1199 : 
; 1200 :         if (q_buf != NULL)

	cmp	QWORD PTR q_buf$[rbp], 0
	je	SHORT $LN15@DivRem_X_X

; 1201 :             q_buf[q_index] = q_;

	mov	rax, QWORD PTR q_buf$[rbp]
	mov	rcx, QWORD PTR q_index$[rbp]
	mov	edx, DWORD PTR q_$1[rbp]
	mov	DWORD PTR [rax+rcx*4], edx
$LN15@DivRem_X_X:

; 1202 : 
; 1203 : #ifdef DO_TRACE
; 1204 :         ReportLabel("qの現在値");
; 1205 :         ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1206 : #endif
; 1207 : 
; 1208 :         if (q_index == 0)

	cmp	QWORD PTR q_index$[rbp], 0
	jne	SHORT $LN16@DivRem_X_X

; 1209 :             break;

	jmp	SHORT $LN7@DivRem_X_X
$LN16@DivRem_X_X:

; 1210 :         --q_index;

	mov	rax, QWORD PTR q_index$[rbp]
	dec	rax
	mov	QWORD PTR q_index$[rbp], rax

; 1211 :     }

	jmp	$LN6@DivRem_X_X
$LN7@DivRem_X_X:

; 1212 : 
; 1213 :     if (d_factor > 0)

	cmp	DWORD PTR d_factor$[rbp], 0
	jbe	SHORT $LN17@DivRem_X_X

; 1214 :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	mov	eax, DWORD PTR d_factor$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	inc	rcx
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR work_u_buf$[rbp]
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR work_u_buf$[rbp]
	call	RightShift_Imp_DIV
$LN17@DivRem_X_X:

; 1215 : 
; 1216 : #ifdef DO_TRACE
; 1217 :     ReportLabel("計算終了");
; 1218 :     ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1219 :     ReportDump("r", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1220 : #endif
; 1221 : }

	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
DivRem_X_X_using_ADX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_X_using_ADC_MUL
_TEXT	SEGMENT
d_factor$ = 4
work_u_buf$ = 40
q_index$ = 72
q_$1 = 100
u_buf$ = 352
u_buf_len$ = 360
v_buf$ = 368
v_buf_len$ = 376
work_v_buf$ = 384
q_buf$ = 392
r_buf$ = 400
DivRem_X_X_using_ADC_MUL PROC				; COMDAT

; 1065 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 1066 :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 1067 :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN9@DivRem_X_X
$LN2@DivRem_X_X:

; 1068 :     {
; 1069 :         while (u_buf[u_buf_len - 1] == 0)

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	cmp	DWORD PTR [rax+rcx*4-4], 0
	jne	SHORT $LN3@DivRem_X_X

; 1070 :             --u_buf_len;

	mov	rax, QWORD PTR u_buf_len$[rbp]
	dec	rax
	mov	QWORD PTR u_buf_len$[rbp], rax
	jmp	SHORT $LN2@DivRem_X_X
$LN3@DivRem_X_X:
$LN4@DivRem_X_X:

; 1071 :         while (v_buf[v_buf_len - 1] == 0)

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_len$[rbp]
	cmp	DWORD PTR [rax+rcx*4-4], 0
	jne	SHORT $LN5@DivRem_X_X

; 1072 :             --v_buf_len;

	mov	rax, QWORD PTR v_buf_len$[rbp]
	dec	rax
	mov	QWORD PTR v_buf_len$[rbp], rax
	jmp	SHORT $LN4@DivRem_X_X
$LN5@DivRem_X_X:
$LN9@DivRem_X_X:

; 1073 :     }
; 1074 : 
; 1075 : #ifdef _DEBUG
; 1076 :     if (v_buf[v_buf_len - 1] == 0)

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_len$[rbp]

; 1077 :     {
; 1078 :         ; // このルートには到達しないはず。デバッグ用。
; 1079 :     }
; 1080 : #endif
; 1081 : 
; 1082 :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_len$[rbp]
	mov	ecx, DWORD PTR [rax+rcx*4-4]
	call	_LZCNT_ALT_UNIT_DIV
	mov	DWORD PTR d_factor$[rbp], eax

; 1083 :     if (d_factor == 0)

	cmp	DWORD PTR d_factor$[rbp], 0
	jne	SHORT $LN11@DivRem_X_X

; 1084 :     {
; 1085 :         _COPY_MEMORY_UNIT_DIV(r_buf, u_buf, u_buf_len);

	mov	r8, QWORD PTR u_buf_len$[rbp]
	mov	rdx, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR r_buf$[rbp]
	call	_COPY_MEMORY_UNIT_DIV

; 1086 :         _COPY_MEMORY_UNIT_DIV(work_v_buf, v_buf, v_buf_len);

	mov	r8, QWORD PTR v_buf_len$[rbp]
	mov	rdx, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR work_v_buf$[rbp]
	call	_COPY_MEMORY_UNIT_DIV

; 1087 :         r_buf[u_buf_len] = 0;

	mov	rax, QWORD PTR r_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	mov	DWORD PTR [rax+rcx*4], 0

; 1088 :     }

	jmp	SHORT $LN12@DivRem_X_X
$LN11@DivRem_X_X:

; 1089 :     else
; 1090 :     {
; 1091 :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	mov	eax, DWORD PTR d_factor$[rbp]
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR r_buf$[rbp]
	mov	r8d, eax
	mov	rdx, QWORD PTR u_buf_len$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	call	LeftShift_Imp_DIV

; 1092 :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	mov	eax, DWORD PTR d_factor$[rbp]
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR work_v_buf$[rbp]
	mov	r8d, eax
	mov	rdx, QWORD PTR v_buf_len$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	call	LeftShift_Imp_DIV
$LN12@DivRem_X_X:

; 1093 :     }
; 1094 : 
; 1095 :     __UNIT_TYPE_DIV* work_u_buf = r_buf;

	mov	rax, QWORD PTR r_buf$[rbp]
	mov	QWORD PTR work_u_buf$[rbp], rax

; 1096 :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	rax, QWORD PTR v_buf_len$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR q_index$[rbp], rax
$LN6@DivRem_X_X:

; 1097 : 
; 1098 :     for (;;)
; 1099 :     {
; 1100 :         __UNIT_TYPE_DIV q_ = CalculateQ_(work_u_buf, work_v_buf, v_buf_len, q_index);

	mov	r9, QWORD PTR q_index$[rbp]
	mov	r8, QWORD PTR v_buf_len$[rbp]
	mov	rdx, QWORD PTR work_v_buf$[rbp]
	mov	rcx, QWORD PTR work_u_buf$[rbp]
	call	CalculateQ_
	mov	DWORD PTR q_$1[rbp], eax

; 1101 : 
; 1102 : 
; 1103 :         if (SubtructOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	mov	eax, DWORD PTR q_$1[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR q_index$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR v_buf_len$[rbp]
	mov	r8, QWORD PTR work_v_buf$[rbp]
	mov	rdx, QWORD PTR u_buf_len$[rbp]
	mov	rcx, QWORD PTR work_u_buf$[rbp]
	call	SubtructOneLine
	test	eax, eax
	je	SHORT $LN13@DivRem_X_X

; 1104 :         {
; 1105 :             // 桁借りが発生した場合
; 1106 :             --q_;

	mov	eax, DWORD PTR q_$1[rbp]
	dec	eax
	mov	DWORD PTR q_$1[rbp], eax

; 1107 :             AddOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	mov	rax, QWORD PTR q_index$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR v_buf_len$[rbp]
	mov	r8, QWORD PTR work_v_buf$[rbp]
	mov	rdx, QWORD PTR u_buf_len$[rbp]
	mov	rcx, QWORD PTR work_u_buf$[rbp]
	call	AddOneLine
$LN13@DivRem_X_X:

; 1108 :         }
; 1109 : 
; 1110 :         if (q_buf != NULL)

	cmp	QWORD PTR q_buf$[rbp], 0
	je	SHORT $LN14@DivRem_X_X

; 1111 :             q_buf[q_index] = q_;

	mov	rax, QWORD PTR q_buf$[rbp]
	mov	rcx, QWORD PTR q_index$[rbp]
	mov	edx, DWORD PTR q_$1[rbp]
	mov	DWORD PTR [rax+rcx*4], edx
$LN14@DivRem_X_X:

; 1112 :         if (q_index == 0)

	cmp	QWORD PTR q_index$[rbp], 0
	jne	SHORT $LN15@DivRem_X_X

; 1113 :             break;

	jmp	SHORT $LN7@DivRem_X_X
$LN15@DivRem_X_X:

; 1114 :         --q_index;

	mov	rax, QWORD PTR q_index$[rbp]
	dec	rax
	mov	QWORD PTR q_index$[rbp], rax

; 1115 :     }

	jmp	$LN6@DivRem_X_X
$LN7@DivRem_X_X:

; 1116 : 
; 1117 :     if (d_factor > 0)

	cmp	DWORD PTR d_factor$[rbp], 0
	jbe	SHORT $LN16@DivRem_X_X

; 1118 :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	mov	eax, DWORD PTR d_factor$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	inc	rcx
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR work_u_buf$[rbp]
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR work_u_buf$[rbp]
	call	RightShift_Imp_DIV
$LN16@DivRem_X_X:

; 1119 : }

	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
DivRem_X_X_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT AddOneLineX
_TEXT	SEGMENT
u_ptr$ = 8
v_ptr$ = 40
v_count$ = 72
c$ = 100
count$ = 136
u_buf$ = 384
u_buf_len$ = 392
v_buf$ = 400
v_buf_len$ = 408
q_index$ = 416
AddOneLineX PROC					; COMDAT

; 999  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 1000 :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR q_index$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR u_ptr$[rbp], rax

; 1001 :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_ptr$[rbp], rax

; 1002 :     __UNIT_TYPE v_count = v_buf_len;

	mov	rax, QWORD PTR v_buf_len$[rbp]
	mov	QWORD PTR v_count$[rbp], rax

; 1003 :     char c = 0;

	mov	BYTE PTR c$[rbp], 0

; 1004 : 
; 1005 :     // まず 32 ワードずつ加算をする。
; 1006 :     __UNIT_TYPE count = v_count >> 5;

	mov	rax, QWORD PTR v_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@AddOneLine:

; 1007 :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	SHORT $LN3@AddOneLine

; 1008 :     {
; 1009 :         c = _ADD_32WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_32WORDS_ADCX_DIV
	mov	BYTE PTR c$[rbp], al

; 1010 :         u_ptr += 32;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR u_ptr$[rbp], rax

; 1011 :         v_ptr += 32;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR v_ptr$[rbp], rax

; 1012 :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 1013 :     }

	jmp	SHORT $LN2@AddOneLine
$LN3@AddOneLine:

; 1014 :     // この時点で未処理の桁は 32 ワード未満のはず
; 1015 : 
; 1016 :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 1017 :     if (v_count & 0x10)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	SHORT $LN4@AddOneLine

; 1018 :     {
; 1019 :         c = _ADD_16WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_16WORDS_ADCX_DIV
	mov	BYTE PTR c$[rbp], al

; 1020 :         u_ptr += 16;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR u_ptr$[rbp], rax

; 1021 :         v_ptr += 16;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR v_ptr$[rbp], rax
$LN4@AddOneLine:

; 1022 :     }
; 1023 :     // この時点で未処理の桁は 16 ワード未満のはず
; 1024 : 
; 1025 :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 1026 :     if (v_count & 0x8)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	SHORT $LN5@AddOneLine

; 1027 :     {
; 1028 :         c = _ADD_8WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_8WORDS_ADCX_DIV
	mov	BYTE PTR c$[rbp], al

; 1029 :         u_ptr += 8;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR u_ptr$[rbp], rax

; 1030 :         v_ptr += 8;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR v_ptr$[rbp], rax
$LN5@AddOneLine:

; 1031 :     }
; 1032 :     // この時点で未処理の桁は 8 ワード未満のはず
; 1033 : 
; 1034 :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 1035 :     if (v_count & 0x4)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	SHORT $LN6@AddOneLine

; 1036 :     {
; 1037 :         c = _ADD_4WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_4WORDS_ADCX_DIV
	mov	BYTE PTR c$[rbp], al

; 1038 :         u_ptr += 4;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 16
	mov	QWORD PTR u_ptr$[rbp], rax

; 1039 :         v_ptr += 4;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 16
	mov	QWORD PTR v_ptr$[rbp], rax
$LN6@AddOneLine:

; 1040 :     }
; 1041 :     // この時点で未処理の桁は 4 ワード未満のはず
; 1042 : 
; 1043 :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 1044 :     if (v_count & 0x2)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	SHORT $LN7@AddOneLine

; 1045 :     {
; 1046 :         c = _ADD_2WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_2WORDS_ADCX_DIV
	mov	BYTE PTR c$[rbp], al

; 1047 :         u_ptr += 2;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR u_ptr$[rbp], rax

; 1048 :         v_ptr += 2;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR v_ptr$[rbp], rax
$LN7@AddOneLine:

; 1049 :     }
; 1050 :     // この時点で未処理の桁は 2 ワード未満のはず
; 1051 : 
; 1052 :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 1053 :     if (v_count & 0x1)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN8@AddOneLine

; 1054 :     {
; 1055 :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	rax, QWORD PTR v_ptr$[rbp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	edx, DWORD PTR [rax]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1056 :         ++u_ptr;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR u_ptr$[rbp], rax

; 1057 :         ++v_ptr;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR v_ptr$[rbp], rax
$LN8@AddOneLine:

; 1058 :     }
; 1059 : 
; 1060 :     // 残りの桁の繰り上がりを計算する。
; 1061 :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4+4]
	sub	rax, QWORD PTR u_ptr$[rbp]
	sar	rax, 2
	mov	r8, rax
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	DoCarry

; 1062 : }

	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
AddOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT AddOneLine
_TEXT	SEGMENT
u_ptr$ = 8
v_ptr$ = 40
v_count$ = 72
c$ = 100
count$ = 136
u_buf$ = 384
u_buf_len$ = 392
v_buf$ = 400
v_buf_len$ = 408
q_index$ = 416
AddOneLine PROC						; COMDAT

; 933  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 934  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR q_index$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR u_ptr$[rbp], rax

; 935  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_ptr$[rbp], rax

; 936  :     __UNIT_TYPE v_count = v_buf_len;

	mov	rax, QWORD PTR v_buf_len$[rbp]
	mov	QWORD PTR v_count$[rbp], rax

; 937  :     char c = 0;

	mov	BYTE PTR c$[rbp], 0

; 938  : 
; 939  :     // まず 32 ワードずつ加算をする。
; 940  :     __UNIT_TYPE count = v_count >> 5;

	mov	rax, QWORD PTR v_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@AddOneLine:

; 941  :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	SHORT $LN3@AddOneLine

; 942  :     {
; 943  :         c = _ADD_32WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_32WORDS_ADC_DIV
	mov	BYTE PTR c$[rbp], al

; 944  :         u_ptr += 32;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR u_ptr$[rbp], rax

; 945  :         v_ptr += 32;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR v_ptr$[rbp], rax

; 946  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 947  :     }

	jmp	SHORT $LN2@AddOneLine
$LN3@AddOneLine:

; 948  :     // この時点で未処理の桁は 32 ワード未満のはず
; 949  : 
; 950  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 951  :     if (v_count & 0x10)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	SHORT $LN4@AddOneLine

; 952  :     {
; 953  :         c = _ADD_16WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_16WORDS_ADC_DIV
	mov	BYTE PTR c$[rbp], al

; 954  :         u_ptr += 16;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR u_ptr$[rbp], rax

; 955  :         v_ptr += 16;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR v_ptr$[rbp], rax
$LN4@AddOneLine:

; 956  :     }
; 957  :     // この時点で未処理の桁は 16 ワード未満のはず
; 958  : 
; 959  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 960  :     if (v_count & 0x8)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	SHORT $LN5@AddOneLine

; 961  :     {
; 962  :         c = _ADD_8WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_8WORDS_ADC_DIV
	mov	BYTE PTR c$[rbp], al

; 963  :         u_ptr += 8;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR u_ptr$[rbp], rax

; 964  :         v_ptr += 8;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR v_ptr$[rbp], rax
$LN5@AddOneLine:

; 965  :     }
; 966  :     // この時点で未処理の桁は 8 ワード未満のはず
; 967  : 
; 968  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 969  :     if (v_count & 0x4)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	SHORT $LN6@AddOneLine

; 970  :     {
; 971  :         c = _ADD_4WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_4WORDS_ADC_DIV
	mov	BYTE PTR c$[rbp], al

; 972  :         u_ptr += 4;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 16
	mov	QWORD PTR u_ptr$[rbp], rax

; 973  :         v_ptr += 4;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 16
	mov	QWORD PTR v_ptr$[rbp], rax
$LN6@AddOneLine:

; 974  :     }
; 975  :     // この時点で未処理の桁は 4 ワード未満のはず
; 976  : 
; 977  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 978  :     if (v_count & 0x2)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	SHORT $LN7@AddOneLine

; 979  :     {
; 980  :         c = _ADD_2WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8, QWORD PTR v_ptr$[rbp]
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_2WORDS_ADC_DIV
	mov	BYTE PTR c$[rbp], al

; 981  :         u_ptr += 2;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR u_ptr$[rbp], rax

; 982  :         v_ptr += 2;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR v_ptr$[rbp], rax
$LN7@AddOneLine:

; 983  :     }
; 984  :     // この時点で未処理の桁は 2 ワード未満のはず
; 985  : 
; 986  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 987  :     if (v_count & 0x1)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN8@AddOneLine

; 988  :     {
; 989  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	rax, QWORD PTR v_ptr$[rbp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	edx, DWORD PTR [rax]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 990  :         ++u_ptr;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR u_ptr$[rbp], rax

; 991  :         ++v_ptr;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR v_ptr$[rbp], rax
$LN8@AddOneLine:

; 992  :     }
; 993  : 
; 994  :     // 残りの桁の繰り上がりを計算する。
; 995  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4+4]
	sub	rax, QWORD PTR u_ptr$[rbp]
	sar	rax, 2
	mov	r8, rax
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	DoCarry

; 996  : }

	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
AddOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DoCarry
_TEXT	SEGMENT
c$ = 224
u_ptr$ = 232
u_count$ = 240
DoCarry	PROC						; COMDAT

; 904  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode
$LN2@DoCarry:

; 905  :     // 繰り上がりを続く限り行う
; 906  :     for (;;)
; 907  :     {
; 908  :         if (u_count <= 0)

	cmp	QWORD PTR u_count$[rbp], 0
	ja	SHORT $LN5@DoCarry

; 909  :         {
; 910  :             // u の最上位まで達してしまった場合
; 911  :             return;

	jmp	SHORT $LN1@DoCarry

; 912  :         }

	jmp	SHORT $LN6@DoCarry
$LN5@DoCarry:

; 913  :         else if (c)

	movsx	eax, BYTE PTR c$[rbp]
	test	eax, eax
	je	SHORT $LN7@DoCarry

; 914  :         {
; 915  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 916  : 
; 917  :             // 繰り上がりを継続する
; 918  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	xor	r8d, r8d
	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	edx, DWORD PTR [rax]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 919  :             ++u_ptr;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR u_ptr$[rbp], rax

; 920  :             --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax

; 921  :         }

	jmp	SHORT $LN8@DoCarry
$LN7@DoCarry:

; 922  :         else
; 923  :         {
; 924  :             // u の最上位に達しておらず、かつキャリーが立っていない場合
; 925  : 
; 926  :             // 繰り上がりを中断し、復帰する。
; 927  :             return;

	jmp	SHORT $LN1@DoCarry
$LN8@DoCarry:
$LN6@DoCarry:

; 928  :         }
; 929  :     }

	jmp	SHORT $LN2@DoCarry
$LN1@DoCarry:

; 930  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
DoCarry	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT SubtructOneLineX
_TEXT	SEGMENT
u_ptr$ = 8
v_ptr$ = 40
v_count$ = 72
k$ = 100
c$ = 132
count$ = 168
u_buf$ = 416
u_buf_len$ = 424
v_buf$ = 432
v_buf_len$ = 440
q_index$ = 448
q_$ = 456
SubtructOneLineX PROC					; COMDAT

; 753  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 754  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR q_index$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR u_ptr$[rbp], rax

; 755  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_ptr$[rbp], rax

; 756  :     __UNIT_TYPE v_count = v_buf_len;

	mov	rax, QWORD PTR v_buf_len$[rbp]
	mov	QWORD PTR v_count$[rbp], rax

; 757  :     __UNIT_TYPE_DIV k = 0;

	mov	DWORD PTR k$[rbp], 0

; 758  :     char c = 0;

	mov	BYTE PTR c$[rbp], 0

; 759  : 
; 760  :     __UNIT_TYPE count = v_count >> 5;

	mov	rax, QWORD PTR v_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@SubtructOn:

; 761  :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	$LN3@SubtructOn

; 762  :     {
; 763  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 764  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 765  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 766  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 767  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 768  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 769  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 770  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 771  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 772  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 773  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 774  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 775  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 776  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 777  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 778  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 779  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[16], q_, &u_ptr[16]);

	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 780  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[17], q_, &u_ptr[17]);

	mov	eax, 4
	imul	rax, rax, 17
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 781  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[18], q_, &u_ptr[18]);

	mov	eax, 4
	imul	rax, rax, 18
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 782  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[19], q_, &u_ptr[19]);

	mov	eax, 4
	imul	rax, rax, 19
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 783  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[20], q_, &u_ptr[20]);

	mov	eax, 4
	imul	rax, rax, 20
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 784  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[21], q_, &u_ptr[21]);

	mov	eax, 4
	imul	rax, rax, 21
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 785  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[22], q_, &u_ptr[22]);

	mov	eax, 4
	imul	rax, rax, 22
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 786  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[23], q_, &u_ptr[23]);

	mov	eax, 4
	imul	rax, rax, 23
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 787  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[24], q_, &u_ptr[24]);

	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 788  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[25], q_, &u_ptr[25]);

	mov	eax, 4
	imul	rax, rax, 25
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 789  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[26], q_, &u_ptr[26]);

	mov	eax, 4
	imul	rax, rax, 26
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 790  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[27], q_, &u_ptr[27]);

	mov	eax, 4
	imul	rax, rax, 27
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 791  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[28], q_, &u_ptr[28]);

	mov	eax, 4
	imul	rax, rax, 28
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 792  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[29], q_, &u_ptr[29]);

	mov	eax, 4
	imul	rax, rax, 29
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 793  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[30], q_, &u_ptr[30]);

	mov	eax, 4
	imul	rax, rax, 30
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 794  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[31], q_, &u_ptr[31]);

	mov	eax, 4
	imul	rax, rax, 31
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 795  :         u_ptr += 32;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR u_ptr$[rbp], rax

; 796  :         v_ptr += 32;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR v_ptr$[rbp], rax

; 797  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 798  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 799  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN4@SubtructOn

; 800  :             AddToMULTI64Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToMULTI64Counter
	jmp	SHORT $LN5@SubtructOn
$LN4@SubtructOn:

; 801  :         else
; 802  :             AddToMULTI32Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToMULTI32Counter
$LN5@SubtructOn:

; 803  : #endif
; 804  :     }

	jmp	$LN2@SubtructOn
$LN3@SubtructOn:

; 805  : 
; 806  :     if (v_count & 0x10)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN6@SubtructOn

; 807  :     {
; 808  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 809  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 810  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 811  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 812  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 813  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 814  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 815  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 816  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 817  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 818  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 819  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 820  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 821  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 822  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 823  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 824  :         u_ptr += 16;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR u_ptr$[rbp], rax

; 825  :         v_ptr += 16;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR v_ptr$[rbp], rax

; 826  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 827  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN7@SubtructOn

; 828  :             AddToMULTI64Counter(16);

	mov	ecx, 16
	call	AddToMULTI64Counter
	jmp	SHORT $LN8@SubtructOn
$LN7@SubtructOn:

; 829  :         else
; 830  :             AddToMULTI32Counter(16);

	mov	ecx, 16
	call	AddToMULTI32Counter
$LN8@SubtructOn:
$LN6@SubtructOn:

; 831  : #endif
; 832  :     }
; 833  : 
; 834  :     if (v_count & 0x8)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN9@SubtructOn

; 835  :     {
; 836  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 837  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 838  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 839  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 840  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 841  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 842  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 843  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 844  :         u_ptr += 8;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR u_ptr$[rbp], rax

; 845  :         v_ptr += 8;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR v_ptr$[rbp], rax

; 846  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 847  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN10@SubtructOn

; 848  :             AddToMULTI64Counter(8);

	mov	ecx, 8
	call	AddToMULTI64Counter
	jmp	SHORT $LN11@SubtructOn
$LN10@SubtructOn:

; 849  :         else
; 850  :             AddToMULTI32Counter(8);

	mov	ecx, 8
	call	AddToMULTI32Counter
$LN11@SubtructOn:
$LN9@SubtructOn:

; 851  : #endif
; 852  :     }
; 853  : 
; 854  :     if (v_count & 0x4)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN12@SubtructOn

; 855  :     {
; 856  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 857  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 858  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 859  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 860  :         u_ptr += 4;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 16
	mov	QWORD PTR u_ptr$[rbp], rax

; 861  :         v_ptr += 4;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 16
	mov	QWORD PTR v_ptr$[rbp], rax

; 862  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 863  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN13@SubtructOn

; 864  :             AddToMULTI64Counter(4);

	mov	ecx, 4
	call	AddToMULTI64Counter
	jmp	SHORT $LN14@SubtructOn
$LN13@SubtructOn:

; 865  :         else
; 866  :             AddToMULTI32Counter(4);

	mov	ecx, 4
	call	AddToMULTI32Counter
$LN14@SubtructOn:
$LN12@SubtructOn:

; 867  : #endif
; 868  :     }
; 869  : 
; 870  :     if (v_count & 0x2)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN15@SubtructOn

; 871  :     {
; 872  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 873  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 874  :         u_ptr += 2;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR u_ptr$[rbp], rax

; 875  :         v_ptr += 2;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR v_ptr$[rbp], rax

; 876  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 877  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN16@SubtructOn

; 878  :             AddToMULTI64Counter(2);

	mov	ecx, 2
	call	AddToMULTI64Counter
	jmp	SHORT $LN17@SubtructOn
$LN16@SubtructOn:

; 879  :         else
; 880  :             AddToMULTI32Counter(2);

	mov	ecx, 2
	call	AddToMULTI32Counter
$LN17@SubtructOn:
$LN15@SubtructOn:

; 881  : #endif
; 882  :     }
; 883  : 
; 884  :     if (v_count & 0x1)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN18@SubtructOn

; 885  :     {
; 886  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLYX_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 887  :         u_ptr += 1;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR u_ptr$[rbp], rax

; 888  :         v_ptr += 1;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR v_ptr$[rbp], rax

; 889  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 890  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN19@SubtructOn

; 891  :             IncrementMULTI64Counter();

	call	IncrementMULTI64Counter
	jmp	SHORT $LN20@SubtructOn
$LN19@SubtructOn:

; 892  :         else
; 893  :             IncrementMULTI32Counter();

	call	IncrementMULTI32Counter
$LN20@SubtructOn:
$LN18@SubtructOn:

; 894  : #endif
; 895  :     }
; 896  : 
; 897  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8d, DWORD PTR k$[rbp]
	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	edx, DWORD PTR [rax]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 898  :     u_ptr += 1;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR u_ptr$[rbp], rax

; 899  : 
; 900  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4+4]
	sub	rax, QWORD PTR u_ptr$[rbp]
	sar	rax, 2
	mov	r8, rax
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	DoBorrow

; 901  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:SubtructOneLineX$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
SubtructOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT SubtructOneLine
_TEXT	SEGMENT
u_ptr$ = 8
v_ptr$ = 40
v_count$ = 72
k$ = 100
c$ = 132
count$ = 168
u_buf$ = 416
u_buf_len$ = 424
v_buf$ = 432
v_buf_len$ = 440
q_index$ = 448
q_$ = 456
SubtructOneLine PROC					; COMDAT

; 602  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 603  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR q_index$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR u_ptr$[rbp], rax

; 604  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v_buf$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_ptr$[rbp], rax

; 605  :     __UNIT_TYPE v_count = v_buf_len;

	mov	rax, QWORD PTR v_buf_len$[rbp]
	mov	QWORD PTR v_count$[rbp], rax

; 606  :     __UNIT_TYPE_DIV k = 0;

	mov	DWORD PTR k$[rbp], 0

; 607  :     char c = 0;

	mov	BYTE PTR c$[rbp], 0

; 608  : 
; 609  :     __UNIT_TYPE count = v_count >> 5;

	mov	rax, QWORD PTR v_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN2@SubtructOn:

; 610  :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	$LN3@SubtructOn

; 611  :     {
; 612  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 613  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 614  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 615  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 616  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 617  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 618  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 619  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 620  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 621  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 622  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 623  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 624  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 625  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 626  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 627  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 628  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[16], q_, &u_ptr[16]);

	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 629  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[17], q_, &u_ptr[17]);

	mov	eax, 4
	imul	rax, rax, 17
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 630  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[18], q_, &u_ptr[18]);

	mov	eax, 4
	imul	rax, rax, 18
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 631  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[19], q_, &u_ptr[19]);

	mov	eax, 4
	imul	rax, rax, 19
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 632  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[20], q_, &u_ptr[20]);

	mov	eax, 4
	imul	rax, rax, 20
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 633  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[21], q_, &u_ptr[21]);

	mov	eax, 4
	imul	rax, rax, 21
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 634  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[22], q_, &u_ptr[22]);

	mov	eax, 4
	imul	rax, rax, 22
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 635  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[23], q_, &u_ptr[23]);

	mov	eax, 4
	imul	rax, rax, 23
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 636  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[24], q_, &u_ptr[24]);

	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 637  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[25], q_, &u_ptr[25]);

	mov	eax, 4
	imul	rax, rax, 25
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 638  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[26], q_, &u_ptr[26]);

	mov	eax, 4
	imul	rax, rax, 26
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 639  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[27], q_, &u_ptr[27]);

	mov	eax, 4
	imul	rax, rax, 27
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 640  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[28], q_, &u_ptr[28]);

	mov	eax, 4
	imul	rax, rax, 28
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 641  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[29], q_, &u_ptr[29]);

	mov	eax, 4
	imul	rax, rax, 29
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 642  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[30], q_, &u_ptr[30]);

	mov	eax, 4
	imul	rax, rax, 30
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 643  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[31], q_, &u_ptr[31]);

	mov	eax, 4
	imul	rax, rax, 31
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 644  :         u_ptr += 32;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR u_ptr$[rbp], rax

; 645  :         v_ptr += 32;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR v_ptr$[rbp], rax

; 646  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 647  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 648  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN4@SubtructOn

; 649  :             AddToMULTI64Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToMULTI64Counter
	jmp	SHORT $LN5@SubtructOn
$LN4@SubtructOn:

; 650  :         else
; 651  :             AddToMULTI32Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToMULTI32Counter
$LN5@SubtructOn:

; 652  : #endif
; 653  :     }

	jmp	$LN2@SubtructOn
$LN3@SubtructOn:

; 654  : 
; 655  :     if (v_count & 0x10)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN6@SubtructOn

; 656  :     {
; 657  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 658  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 659  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 660  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 661  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 662  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 663  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 664  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 665  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 666  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 667  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 668  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 669  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 670  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 671  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 672  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 673  :         u_ptr += 16;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR u_ptr$[rbp], rax

; 674  :         v_ptr += 16;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR v_ptr$[rbp], rax

; 675  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 676  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN7@SubtructOn

; 677  :             AddToMULTI64Counter(16);

	mov	ecx, 16
	call	AddToMULTI64Counter
	jmp	SHORT $LN8@SubtructOn
$LN7@SubtructOn:

; 678  :         else
; 679  :             AddToMULTI32Counter(16);

	mov	ecx, 16
	call	AddToMULTI32Counter
$LN8@SubtructOn:
$LN6@SubtructOn:

; 680  : #endif
; 681  :     }
; 682  : 
; 683  :     if (v_count & 0x8)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN9@SubtructOn

; 684  :     {
; 685  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 686  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 687  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 688  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 689  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 690  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 691  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 692  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 693  :         u_ptr += 8;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR u_ptr$[rbp], rax

; 694  :         v_ptr += 8;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR v_ptr$[rbp], rax

; 695  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 696  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN10@SubtructOn

; 697  :             AddToMULTI64Counter(8);

	mov	ecx, 8
	call	AddToMULTI64Counter
	jmp	SHORT $LN11@SubtructOn
$LN10@SubtructOn:

; 698  :         else
; 699  :             AddToMULTI32Counter(8);

	mov	ecx, 8
	call	AddToMULTI32Counter
$LN11@SubtructOn:
$LN9@SubtructOn:

; 700  : #endif
; 701  :     }
; 702  : 
; 703  :     if (v_count & 0x4)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN12@SubtructOn

; 704  :     {
; 705  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 706  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 707  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 708  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 709  :         u_ptr += 4;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 16
	mov	QWORD PTR u_ptr$[rbp], rax

; 710  :         v_ptr += 4;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 16
	mov	QWORD PTR v_ptr$[rbp], rax

; 711  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 712  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN13@SubtructOn

; 713  :             AddToMULTI64Counter(4);

	mov	ecx, 4
	call	AddToMULTI64Counter
	jmp	SHORT $LN14@SubtructOn
$LN13@SubtructOn:

; 714  :         else
; 715  :             AddToMULTI32Counter(4);

	mov	ecx, 4
	call	AddToMULTI32Counter
$LN14@SubtructOn:
$LN12@SubtructOn:

; 716  : #endif
; 717  :     }
; 718  : 
; 719  :     if (v_count & 0x2)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN15@SubtructOn

; 720  :     {
; 721  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 722  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 723  :         u_ptr += 2;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR u_ptr$[rbp], rax

; 724  :         v_ptr += 2;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR v_ptr$[rbp], rax

; 725  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 726  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN16@SubtructOn

; 727  :             AddToMULTI64Counter(2);

	mov	ecx, 2
	call	AddToMULTI64Counter
	jmp	SHORT $LN17@SubtructOn
$LN16@SubtructOn:

; 728  :         else
; 729  :             AddToMULTI32Counter(2);

	mov	ecx, 2
	call	AddToMULTI32Counter
$LN17@SubtructOn:
$LN15@SubtructOn:

; 730  : #endif
; 731  :     }
; 732  : 
; 733  :     if (v_count & 0x1)

	mov	rax, QWORD PTR v_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN18@SubtructOn

; 734  :     {
; 735  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR u_ptr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v_ptr$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR q_$[rbp]
	mov	r8, rcx
	lea	rdx, QWORD PTR k$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_MULTIPLY_DIGIT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 736  :         u_ptr += 1;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR u_ptr$[rbp], rax

; 737  :         v_ptr += 1;

	mov	rax, QWORD PTR v_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR v_ptr$[rbp], rax

; 738  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 739  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN19@SubtructOn

; 740  :             IncrementMULTI64Counter();

	call	IncrementMULTI64Counter
	jmp	SHORT $LN20@SubtructOn
$LN19@SubtructOn:

; 741  :         else
; 742  :             IncrementMULTI32Counter();

	call	IncrementMULTI32Counter
$LN20@SubtructOn:
$LN18@SubtructOn:

; 743  : #endif
; 744  :     }
; 745  : 
; 746  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	r9, QWORD PTR u_ptr$[rbp]
	mov	r8d, DWORD PTR k$[rbp]
	mov	rax, QWORD PTR u_ptr$[rbp]
	mov	edx, DWORD PTR [rax]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 747  :     u_ptr += 1;

	mov	rax, QWORD PTR u_ptr$[rbp]
	add	rax, 4
	mov	QWORD PTR u_ptr$[rbp], rax

; 748  : 
; 749  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4+4]
	sub	rax, QWORD PTR u_ptr$[rbp]
	sar	rax, 2
	mov	r8, rax
	mov	rdx, QWORD PTR u_ptr$[rbp]
	movzx	ecx, BYTE PTR c$[rbp]
	call	DoBorrow

; 750  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:SubtructOneLine$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
SubtructOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _MULTIPLYX_DIGIT_UNIT_DIV
_TEXT	SEGMENT
t_hi$ = 4
t_lo$ = 36
c$ = 288
k$ = 296
vp$ = 304
q_$ = 312
up$ = 320
_MULTIPLYX_DIGIT_UNIT_DIV PROC				; COMDAT

; 591  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 592  :     __UNIT_TYPE_DIV t_hi;
; 593  :     __UNIT_TYPE_DIV t_lo;
; 594  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	lea	r8, QWORD PTR t_hi$[rbp]
	mov	edx, DWORD PTR q_$[rbp]
	mov	rax, QWORD PTR vp$[rbp]
	mov	ecx, DWORD PTR [rax]
	call	_MULTIPLYX_UNIT_DIV
	mov	DWORD PTR t_lo$[rbp], eax

; 595  :     _ADDX_UNIT_DIV(_ADDX_UNIT_DIV(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

	lea	r9, QWORD PTR t_lo$[rbp]
	mov	rax, QWORD PTR k$[rbp]
	mov	r8d, DWORD PTR [rax]
	mov	edx, DWORD PTR t_lo$[rbp]
	xor	ecx, ecx
	call	_ADDX_UNIT_DIV
	lea	r9, QWORD PTR t_hi$[rbp]
	xor	r8d, r8d
	mov	edx, DWORD PTR t_hi$[rbp]
	movzx	ecx, al
	call	_ADDX_UNIT_DIV

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	r9, QWORD PTR up$[rbp]
	mov	r8d, DWORD PTR t_lo$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 597  :     *k = t_hi;

	mov	rax, QWORD PTR k$[rbp]
	mov	ecx, DWORD PTR t_hi$[rbp]
	mov	DWORD PTR [rax], ecx

; 598  :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 599  : }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_MULTIPLYX_DIGIT_UNIT_DIV$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
_MULTIPLYX_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _MULTIPLY_DIGIT_UNIT_DIV
_TEXT	SEGMENT
t_hi$ = 4
t_lo$ = 36
c$ = 288
k$ = 296
vp$ = 304
q_$ = 312
up$ = 320
_MULTIPLY_DIGIT_UNIT_DIV PROC				; COMDAT

; 580  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 581  :     __UNIT_TYPE_DIV t_hi;
; 582  :     __UNIT_TYPE_DIV t_lo;
; 583  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	lea	r8, QWORD PTR t_hi$[rbp]
	mov	edx, DWORD PTR q_$[rbp]
	mov	rax, QWORD PTR vp$[rbp]
	mov	ecx, DWORD PTR [rax]
	call	_MULTIPLY_UNIT_DIV
	mov	DWORD PTR t_lo$[rbp], eax

; 584  :     _ADD_UNIT_DIV(_ADD_UNIT_DIV(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

	lea	r9, QWORD PTR t_lo$[rbp]
	mov	rax, QWORD PTR k$[rbp]
	mov	r8d, DWORD PTR [rax]
	mov	edx, DWORD PTR t_lo$[rbp]
	xor	ecx, ecx
	call	_ADD_UNIT_DIV
	lea	r9, QWORD PTR t_hi$[rbp]
	xor	r8d, r8d
	mov	edx, DWORD PTR t_hi$[rbp]
	movzx	ecx, al
	call	_ADD_UNIT_DIV

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	r9, QWORD PTR up$[rbp]
	mov	r8d, DWORD PTR t_lo$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 586  :     *k = t_hi;

	mov	rax, QWORD PTR k$[rbp]
	mov	ecx, DWORD PTR t_hi$[rbp]
	mov	DWORD PTR [rax], ecx

; 587  :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 588  : }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_MULTIPLY_DIGIT_UNIT_DIV$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
_MULTIPLY_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DoBorrow
_TEXT	SEGMENT
c$ = 224
up$ = 232
u_count$ = 240
DoBorrow PROC						; COMDAT

; 540  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode
$LN2@DoBorrow:

; 541  :     // 桁借りを続く限り行う
; 542  :     for (;;)
; 543  :     {
; 544  :         if (u_count <= 0)

	cmp	QWORD PTR u_count$[rbp], 0
	ja	SHORT $LN5@DoBorrow

; 545  :         {
; 546  :             // u の最上位まで達してしまった場合
; 547  : 
; 548  :             if (c)

	movsx	eax, BYTE PTR c$[rbp]
	test	eax, eax
	je	SHORT $LN7@DoBorrow

; 549  :             {
; 550  :                 // かつそれでも桁借りを行う必要がある場合
; 551  : 
; 552  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 553  :                 return (TRUE);

	mov	eax, 1
	jmp	SHORT $LN1@DoBorrow
$LN7@DoBorrow:

; 554  :             }
; 555  : 
; 556  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 557  : 
; 558  :             return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@DoBorrow

; 559  :         }

	jmp	SHORT $LN6@DoBorrow
$LN5@DoBorrow:

; 560  :         else if (c)

	movsx	eax, BYTE PTR c$[rbp]
	test	eax, eax
	je	SHORT $LN8@DoBorrow

; 561  :         {
; 562  :             // u の最上位に達しておらず、かつボローが立っている場合
; 563  : 
; 564  :             // 桁借りを継続する
; 565  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	r9, QWORD PTR up$[rbp]
	xor	r8d, r8d
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_SUBTRUCT_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 566  :             ++up;

	mov	rax, QWORD PTR up$[rbp]
	add	rax, 4
	mov	QWORD PTR up$[rbp], rax

; 567  :             --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax

; 568  :         }

	jmp	SHORT $LN9@DoBorrow
$LN8@DoBorrow:

; 569  :         else
; 570  :         {
; 571  :             // u の最上位に達しておらず、かつボローが立っていない場合
; 572  : 
; 573  :             // 桁借りを中断し復帰する。
; 574  :             return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@DoBorrow
$LN9@DoBorrow:
$LN6@DoBorrow:

; 575  :         }
; 576  :     }

	jmp	SHORT $LN2@DoBorrow
$LN1@DoBorrow:

; 577  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
DoBorrow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CalculateQ_X
_TEXT	SEGMENT
u_index$ = 8
uj$ = 36
uj_1$ = 68
uj_2$ = 100
v1$ = 132
v2$ = 164
q_$ = 196
u_buf$ = 448
v_buf$ = 456
v_buf_len$ = 464
q_index$ = 472
CalculateQ_X PROC					; COMDAT

; 515  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+504]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 516  :     __UNIT_TYPE u_index = q_index + v_buf_len;

	mov	rax, QWORD PTR v_buf_len$[rbp]
	mov	rcx, QWORD PTR q_index$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_index$[rbp], rax

; 517  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_index$[rbp]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR uj$[rbp], eax

; 518  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_index$[rbp]
	mov	eax, DWORD PTR [rax+rcx*4-4]
	mov	DWORD PTR uj_1$[rbp], eax

; 519  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_index$[rbp]
	mov	eax, DWORD PTR [rax+rcx*4-8]
	mov	DWORD PTR uj_2$[rbp], eax

; 520  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_len$[rbp]
	mov	eax, DWORD PTR [rax+rcx*4-4]
	mov	DWORD PTR v1$[rbp], eax

; 521  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_len$[rbp]
	mov	eax, DWORD PTR [rax+rcx*4-8]
	mov	DWORD PTR v2$[rbp], eax

; 522  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);

	mov	r8d, DWORD PTR v1$[rbp]
	mov	edx, DWORD PTR uj_1$[rbp]
	mov	ecx, DWORD PTR uj$[rbp]
	call	AsumeQ_
	mov	DWORD PTR q_$[rbp], eax

; 523  : #ifdef DO_TRACE
; 524  :     ReportLabel("q_ の計算");
; 525  :     ReportVar("uj", uj);
; 526  :     ReportVar("uj1", uj_1);
; 527  :     ReportVar("v1", v1);
; 528  :     ReportVar("q_", q_);
; 529  : #endif
; 530  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR v2$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR v1$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR uj_2$[rbp]
	mov	r8d, DWORD PTR uj_1$[rbp]
	mov	edx, DWORD PTR uj$[rbp]
	mov	ecx, DWORD PTR q_$[rbp]
	call	CheckQ_X
	test	eax, eax
	jne	SHORT $LN2@CalculateQ

; 531  :         return (q_);

	mov	eax, DWORD PTR q_$[rbp]
	jmp	SHORT $LN1@CalculateQ
$LN2@CalculateQ:

; 532  :     --q_;

	mov	eax, DWORD PTR q_$[rbp]
	dec	eax
	mov	DWORD PTR q_$[rbp], eax

; 533  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR v2$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR v1$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR uj_2$[rbp]
	mov	r8d, DWORD PTR uj_1$[rbp]
	mov	edx, DWORD PTR uj$[rbp]
	mov	ecx, DWORD PTR q_$[rbp]
	call	CheckQ_X
	test	eax, eax
	jne	SHORT $LN3@CalculateQ

; 534  :         return (q_);

	mov	eax, DWORD PTR q_$[rbp]
	jmp	SHORT $LN1@CalculateQ
$LN3@CalculateQ:

; 535  :     --q_;

	mov	eax, DWORD PTR q_$[rbp]
	dec	eax
	mov	DWORD PTR q_$[rbp], eax

; 536  :     return (q_);

	mov	eax, DWORD PTR q_$[rbp]
$LN1@CalculateQ:

; 537  : }

	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
CalculateQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CalculateQ_
_TEXT	SEGMENT
u_index$ = 8
uj$ = 36
uj_1$ = 68
uj_2$ = 100
v1$ = 132
v2$ = 164
q_$ = 196
u_buf$ = 448
v_buf$ = 456
v_buf_len$ = 464
q_index$ = 472
CalculateQ_ PROC					; COMDAT

; 497  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+504]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 498  :     __UNIT_TYPE u_index = q_index + v_buf_len;

	mov	rax, QWORD PTR v_buf_len$[rbp]
	mov	rcx, QWORD PTR q_index$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_index$[rbp], rax

; 499  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_index$[rbp]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR uj$[rbp], eax

; 500  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_index$[rbp]
	mov	eax, DWORD PTR [rax+rcx*4-4]
	mov	DWORD PTR uj_1$[rbp], eax

; 501  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_index$[rbp]
	mov	eax, DWORD PTR [rax+rcx*4-8]
	mov	DWORD PTR uj_2$[rbp], eax

; 502  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_len$[rbp]
	mov	eax, DWORD PTR [rax+rcx*4-4]
	mov	DWORD PTR v1$[rbp], eax

; 503  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_len$[rbp]
	mov	eax, DWORD PTR [rax+rcx*4-8]
	mov	DWORD PTR v2$[rbp], eax

; 504  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);

	mov	r8d, DWORD PTR v1$[rbp]
	mov	edx, DWORD PTR uj_1$[rbp]
	mov	ecx, DWORD PTR uj$[rbp]
	call	AsumeQ_
	mov	DWORD PTR q_$[rbp], eax

; 505  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR v2$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR v1$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR uj_2$[rbp]
	mov	r8d, DWORD PTR uj_1$[rbp]
	mov	edx, DWORD PTR uj$[rbp]
	mov	ecx, DWORD PTR q_$[rbp]
	call	CheckQ_
	test	eax, eax
	jne	SHORT $LN2@CalculateQ

; 506  :         return (q_);

	mov	eax, DWORD PTR q_$[rbp]
	jmp	SHORT $LN1@CalculateQ
$LN2@CalculateQ:

; 507  :     --q_;

	mov	eax, DWORD PTR q_$[rbp]
	dec	eax
	mov	DWORD PTR q_$[rbp], eax

; 508  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	eax, DWORD PTR v2$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR v1$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR uj_2$[rbp]
	mov	r8d, DWORD PTR uj_1$[rbp]
	mov	edx, DWORD PTR uj$[rbp]
	mov	ecx, DWORD PTR q_$[rbp]
	call	CheckQ_
	test	eax, eax
	jne	SHORT $LN3@CalculateQ

; 509  :         return (q_);

	mov	eax, DWORD PTR q_$[rbp]
	jmp	SHORT $LN1@CalculateQ
$LN3@CalculateQ:

; 510  :     --q_;

	mov	eax, DWORD PTR q_$[rbp]
	dec	eax
	mov	DWORD PTR q_$[rbp], eax

; 511  :     return (q_);

	mov	eax, DWORD PTR q_$[rbp]
$LN1@CalculateQ:

; 512  : }

	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
CalculateQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CheckQ_X
_TEXT	SEGMENT
lh_mi$ = 4
lh_lo$ = 36
rh_hi$ = 68
rh_mi$ = 100
rh_lo$ = 132
t_hi$ = 164
t_mi$ = 196
tv88 = 404
q_$ = 448
uj$ = 456
uj_1$ = 464
uj_2$ = 472
v1$ = 480
v2$ = 488
CheckQ_X PROC						; COMDAT

; 440  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+488]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 441  : #ifdef DO_TRACE
; 442  :     ReportLabel("q_ の検査");
; 443  :     ReportVar("q_", q_);
; 444  :     ReportVar("uj", uj);
; 445  :     ReportVar("uj1", uj_1);
; 446  :     ReportVar("uj2", uj_2);
; 447  :     ReportVar("v1", v1);
; 448  :     ReportVar("v2", v2);
; 449  : #endif
; 450  :     __UNIT_TYPE_DIV lh_mi;
; 451  :     __UNIT_TYPE_DIV lh_lo = _MULTIPLYX_UNIT_DIV(v2, q_, &lh_mi);

	lea	r8, QWORD PTR lh_mi$[rbp]
	mov	edx, DWORD PTR q_$[rbp]
	mov	ecx, DWORD PTR v2$[rbp]
	call	_MULTIPLYX_UNIT_DIV
	mov	DWORD PTR lh_lo$[rbp], eax

; 452  :     __UNIT_TYPE_DIV rh_hi;
; 453  :     __UNIT_TYPE_DIV rh_mi;
; 454  :     __UNIT_TYPE_DIV rh_lo = uj_2;

	mov	eax, DWORD PTR uj_2$[rbp]
	mov	DWORD PTR rh_lo$[rbp], eax

; 455  :     __UNIT_TYPE_DIV t_hi;
; 456  :     __UNIT_TYPE_DIV t_mi = _MULTIPLYX_UNIT_DIV(q_, v1, &t_hi);

	lea	r8, QWORD PTR t_hi$[rbp]
	mov	edx, DWORD PTR v1$[rbp]
	mov	ecx, DWORD PTR q_$[rbp]
	call	_MULTIPLYX_UNIT_DIV
	mov	DWORD PTR t_mi$[rbp], eax

; 457  : 
; 458  :     _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, uj_1, t_mi, &rh_mi), uj, t_hi, &rh_hi);

	lea	r9, QWORD PTR rh_mi$[rbp]
	mov	r8d, DWORD PTR t_mi$[rbp]
	mov	edx, DWORD PTR uj_1$[rbp]
	xor	ecx, ecx
	call	_SUBTRUCT_UNIT_DIV
	lea	r9, QWORD PTR rh_hi$[rbp]
	mov	r8d, DWORD PTR t_hi$[rbp]
	mov	edx, DWORD PTR uj$[rbp]
	movzx	ecx, al
	call	_SUBTRUCT_UNIT_DIV

; 459  : 
; 460  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 461  :     if (sizeof(q_) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@CheckQ_X

; 462  :         AddToMULTI64Counter(2);

	mov	ecx, 2
	call	AddToMULTI64Counter
	jmp	SHORT $LN3@CheckQ_X
$LN2@CheckQ_X:

; 463  :     else
; 464  :         AddToMULTI32Counter(2);

	mov	ecx, 2
	call	AddToMULTI32Counter
$LN3@CheckQ_X:

; 465  : #endif
; 466  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$[rbp], 0
	jbe	SHORT $LN4@CheckQ_X

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@CheckQ_X

; 472  :     }

	jmp	SHORT $LN5@CheckQ_X
$LN4@CheckQ_X:

; 473  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR rh_mi$[rbp]
	cmp	DWORD PTR lh_mi$[rbp], eax
	jbe	SHORT $LN6@CheckQ_X

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);

	mov	eax, 1
	jmp	SHORT $LN1@CheckQ_X

; 479  :     }

	jmp	SHORT $LN7@CheckQ_X
$LN6@CheckQ_X:

; 480  :     else if (lh_mi < rh_mi)

	mov	eax, DWORD PTR rh_mi$[rbp]
	cmp	DWORD PTR lh_mi$[rbp], eax
	jae	SHORT $LN8@CheckQ_X

; 481  :     {
; 482  : #ifdef DO_TRACE
; 483  :         ReportVar("result", 0);
; 484  : #endif
; 485  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@CheckQ_X

; 486  :     }

	jmp	SHORT $LN9@CheckQ_X
$LN8@CheckQ_X:

; 487  :     else
; 488  :     {
; 489  : #ifdef DO_TRACE
; 490  :         ReportVar("result", lh_lo > rh_lo);
; 491  : #endif
; 492  :         return (lh_lo > rh_lo);

	mov	eax, DWORD PTR rh_lo$[rbp]
	cmp	DWORD PTR lh_lo$[rbp], eax
	jbe	SHORT $LN11@CheckQ_X
	mov	DWORD PTR tv88[rbp], 1
	jmp	SHORT $LN12@CheckQ_X
$LN11@CheckQ_X:
	mov	DWORD PTR tv88[rbp], 0
$LN12@CheckQ_X:
	mov	eax, DWORD PTR tv88[rbp]
$LN9@CheckQ_X:
$LN7@CheckQ_X:
$LN5@CheckQ_X:
$LN1@CheckQ_X:

; 493  :     }
; 494  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:CheckQ_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
CheckQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CheckQ_
_TEXT	SEGMENT
lh_mi$ = 4
lh_lo$ = 36
rh_hi$ = 68
rh_mi$ = 100
rh_lo$ = 132
t_hi$ = 164
t_mi$ = 196
tv88 = 404
q_$ = 448
uj$ = 456
uj_1$ = 464
uj_2$ = 472
v1$ = 480
v2$ = 488
CheckQ_	PROC						; COMDAT

; 413  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+488]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 414  :     __UNIT_TYPE_DIV lh_mi;
; 415  :     __UNIT_TYPE_DIV lh_lo = _MULTIPLY_UNIT_DIV(v2, q_, &lh_mi);

	lea	r8, QWORD PTR lh_mi$[rbp]
	mov	edx, DWORD PTR q_$[rbp]
	mov	ecx, DWORD PTR v2$[rbp]
	call	_MULTIPLY_UNIT_DIV
	mov	DWORD PTR lh_lo$[rbp], eax

; 416  :     __UNIT_TYPE_DIV rh_hi;
; 417  :     __UNIT_TYPE_DIV rh_mi;
; 418  :     __UNIT_TYPE_DIV rh_lo = uj_2;

	mov	eax, DWORD PTR uj_2$[rbp]
	mov	DWORD PTR rh_lo$[rbp], eax

; 419  :     __UNIT_TYPE_DIV t_hi;
; 420  :     __UNIT_TYPE_DIV t_mi = _MULTIPLY_UNIT_DIV(q_, v1, &t_hi);

	lea	r8, QWORD PTR t_hi$[rbp]
	mov	edx, DWORD PTR v1$[rbp]
	mov	ecx, DWORD PTR q_$[rbp]
	call	_MULTIPLY_UNIT_DIV
	mov	DWORD PTR t_mi$[rbp], eax

; 421  :     _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, uj_1, t_mi, &rh_mi), uj, t_hi, &rh_hi);

	lea	r9, QWORD PTR rh_mi$[rbp]
	mov	r8d, DWORD PTR t_mi$[rbp]
	mov	edx, DWORD PTR uj_1$[rbp]
	xor	ecx, ecx
	call	_SUBTRUCT_UNIT_DIV
	lea	r9, QWORD PTR rh_hi$[rbp]
	mov	r8d, DWORD PTR t_hi$[rbp]
	mov	edx, DWORD PTR uj$[rbp]
	movzx	ecx, al
	call	_SUBTRUCT_UNIT_DIV

; 422  : 
; 423  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 424  :     if (sizeof(q_) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@CheckQ_

; 425  :         AddToMULTI64Counter(2);

	mov	ecx, 2
	call	AddToMULTI64Counter
	jmp	SHORT $LN3@CheckQ_
$LN2@CheckQ_:

; 426  :     else
; 427  :         AddToMULTI32Counter(2);

	mov	ecx, 2
	call	AddToMULTI32Counter
$LN3@CheckQ_:

; 428  : #endif
; 429  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$[rbp], 0
	jbe	SHORT $LN4@CheckQ_

; 430  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@CheckQ_
	jmp	SHORT $LN5@CheckQ_
$LN4@CheckQ_:

; 431  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR rh_mi$[rbp]
	cmp	DWORD PTR lh_mi$[rbp], eax
	jbe	SHORT $LN6@CheckQ_

; 432  :         return (TRUE);

	mov	eax, 1
	jmp	SHORT $LN1@CheckQ_
	jmp	SHORT $LN7@CheckQ_
$LN6@CheckQ_:

; 433  :     else if (lh_mi < rh_mi)

	mov	eax, DWORD PTR rh_mi$[rbp]
	cmp	DWORD PTR lh_mi$[rbp], eax
	jae	SHORT $LN8@CheckQ_

; 434  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@CheckQ_
	jmp	SHORT $LN9@CheckQ_
$LN8@CheckQ_:

; 435  :     else
; 436  :         return (lh_lo > rh_lo);

	mov	eax, DWORD PTR rh_lo$[rbp]
	cmp	DWORD PTR lh_lo$[rbp], eax
	jbe	SHORT $LN11@CheckQ_
	mov	DWORD PTR tv88[rbp], 1
	jmp	SHORT $LN12@CheckQ_
$LN11@CheckQ_:
	mov	DWORD PTR tv88[rbp], 0
$LN12@CheckQ_:
	mov	eax, DWORD PTR tv88[rbp]
$LN9@CheckQ_:
$LN7@CheckQ_:
$LN5@CheckQ_:
$LN1@CheckQ_:

; 437  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:CheckQ_$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
CheckQ_	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT AsumeQ_
_TEXT	SEGMENT
r$ = 4
q$ = 36
uj$ = 288
uj_1$ = 296
v1$ = 304
AsumeQ_	PROC						; COMDAT

; 398  : {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 399  :     if (uj == v1)

	mov	eax, DWORD PTR v1$[rbp]
	cmp	DWORD PTR uj$[rbp], eax
	jne	SHORT $LN2@AsumeQ_

; 400  :         return (-1);

	mov	eax, -1					; ffffffffH
	jmp	SHORT $LN1@AsumeQ_
$LN2@AsumeQ_:

; 401  :     __UNIT_TYPE_DIV r;
; 402  :     __UNIT_TYPE_DIV q = _DIVREM_UNIT(uj, uj_1, v1, &r);

	lea	r9, QWORD PTR r$[rbp]
	mov	r8d, DWORD PTR v1$[rbp]
	mov	edx, DWORD PTR uj_1$[rbp]
	mov	ecx, DWORD PTR uj$[rbp]
	call	_DIVREM_UNIT
	mov	DWORD PTR q$[rbp], eax

; 403  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 404  :     if (sizeof(v1) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN3@AsumeQ_

; 405  :         IncrementDIV64Counter();

	call	IncrementDIV64Counter
	jmp	SHORT $LN4@AsumeQ_
$LN3@AsumeQ_:

; 406  :     else
; 407  :         IncrementDIV32Counter();

	call	IncrementDIV32Counter
$LN4@AsumeQ_:

; 408  : #endif
; 409  :     return (q);

	mov	eax, DWORD PTR q$[rbp]
$LN1@AsumeQ_:

; 410  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:AsumeQ_$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
AsumeQ_	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_2WORDS_ADCX_DIV PROC				; COMDAT

; 4543 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 4544 : #ifdef _MSC_VER
; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4546 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4547 : #elif defined(__GNUC__)
; 4548 : #ifdef _M_IX86
; 4549 :     __asm__ volatile (
; 4550 :         "addb\t$-1, %0\n\t"
; 4551 :         "movl\t(%1), %%ecx\n\t"
; 4552 :         "adcxl\t(%2), %%ecx\n\t"
; 4553 :         "movl\t%%ecx, (%3)\n\t"
; 4554 :         "movl\t4(%1), %%ecx\n\t"
; 4555 :         "adcxl\t4(%2), %%ecx\n\t"
; 4556 :         "movl\t%%ecx, 4(%3)\n\t"
; 4557 :         "setc\t%0"
; 4558 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4559 :         :
; 4560 :         : "cc", "memory", "%ecx"
; 4561 : );
; 4562 : #elif defined(_M_IX64)
; 4563 :     __asm__ volatile (
; 4564 :         "addb\t$-1, %0\n\t"
; 4565 :         "movq\t(%1), %%rcx\n\t"
; 4566 :         "adcxq\t(%2), %%rcx\n\t"
; 4567 :         "movq\t%%rcx, (%3)\n\t"
; 4568 :         "movq\t8(%1), %%rcx\n\t"
; 4569 :         "adcxq\t8(%2), %%rcx\n\t"
; 4570 :         "movq\t%%rcx, 8(%3)\n\t"
; 4571 :         "setc\t%0"
; 4572 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4573 :         :
; 4574 :         : "cc", "memory", "%rcx"
; 4575 : );
; 4576 : #else
; 4577 : #error unknown platform
; 4578 : #endif
; 4579 : #else
; 4580 : #error unknown compiler
; 4581 : #endif
; 4582 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 4583 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_2WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_2WORDS_ADC_DIV PROC				; COMDAT

; 4500 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 4501 : #ifdef _MSC_VER
; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4503 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4504 : #elif defined(__GNUC__)
; 4505 : #ifdef _M_IX86
; 4506 :     __asm__ volatile (
; 4507 :         "addb\t$-1, %0\n\t"
; 4508 :         "movl\t(%1), %%ecx\n\t"
; 4509 :         "adcl\t(%2), %%ecx\n\t"
; 4510 :         "movl\t%%ecx, (%3)\n\t"
; 4511 :         "movl\t4(%1), %%ecx\n\t"
; 4512 :         "adcl\t4(%2), %%ecx\n\t"
; 4513 :         "movl\t%%ecx, 4(%3)\n\t"
; 4514 :         "setc\t%0"
; 4515 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4516 :         :
; 4517 :         : "cc", "memory", "%ecx"
; 4518 : );
; 4519 : #elif defined(_M_IX64)
; 4520 :     __asm__ volatile (
; 4521 :         "addb\t$-1, %0\n\t"
; 4522 :         "movq\t(%1), %%rcx\n\t"
; 4523 :         "adcq\t(%2), %%rcx\n\t"
; 4524 :         "movq\t%%rcx, (%3)\n\t"
; 4525 :         "movq\t8(%1), %%rcx\n\t"
; 4526 :         "adcq\t8(%2), %%rcx\n\t"
; 4527 :         "movq\t%%rcx, 8(%3)\n\t"
; 4528 :         "setc\t%0"
; 4529 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4530 :         :
; 4531 :         : "cc", "memory", "%rcx"
; 4532 : );
; 4533 : #else
; 4534 : #error unknown platform
; 4535 : #endif
; 4536 : #else
; 4537 : #error unknown compiler
; 4538 : #endif
; 4539 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 4540 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_2WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_4WORDS_ADCX_DIV PROC				; COMDAT

; 4157 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 4158 : #ifdef _MSC_VER
; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4160 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4161 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4162 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4163 : #elif defined(__GNUC__)
; 4164 : #ifdef _M_IX86
; 4165 :     __asm__ volatile (
; 4166 :         "addb\t$-1, %0\n\t"
; 4167 :         "movl\t(%1), %%ecx\n\t"
; 4168 :         "adcxl\t(%2), %%ecx\n\t"
; 4169 :         "movl\t%%ecx, (%3)\n\t"
; 4170 :         "movl\t4(%1), %%ecx\n\t"
; 4171 :         "adcxl\t4(%2), %%ecx\n\t"
; 4172 :         "movl\t%%ecx, 4(%3)\n\t"
; 4173 :         "movl\t8(%1), %%ecx\n\t"
; 4174 :         "adcxl\t8(%2), %%ecx\n\t"
; 4175 :         "movl\t%%ecx, 8(%3)\n\t"
; 4176 :         "movl\t12(%1), %%ecx\n\t"
; 4177 :         "adcxl\t12(%2), %%ecx\n\t"
; 4178 :         "movl\t%%ecx, 12(%3)\n\t"
; 4179 :         "setc\t%0"
; 4180 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4181 :         :
; 4182 :         : "cc", "memory", "%ecx"
; 4183 : );
; 4184 : #elif defined(_M_IX64)
; 4185 :     __asm__ volatile (
; 4186 :         "addb\t$-1, %0\n\t"
; 4187 :         "movq\t(%1), %%rcx\n\t"
; 4188 :         "adcxq\t(%2), %%rcx\n\t"
; 4189 :         "movq\t%%rcx, (%3)\n\t"
; 4190 :         "movq\t8(%1), %%rcx\n\t"
; 4191 :         "adcxq\t8(%2), %%rcx\n\t"
; 4192 :         "movq\t%%rcx, 8(%3)\n\t"
; 4193 :         "movq\t16(%1), %%rcx\n\t"
; 4194 :         "adcxq\t16(%2), %%rcx\n\t"
; 4195 :         "movq\t%%rcx, 16(%3)\n\t"
; 4196 :         "movq\t24(%1), %%rcx\n\t"
; 4197 :         "adcxq\t24(%2), %%rcx\n\t"
; 4198 :         "movq\t%%rcx, 24(%3)\n\t"
; 4199 :         "setc\t%0"
; 4200 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4201 :         :
; 4202 :         : "cc", "memory", "%rcx"
; 4203 : );
; 4204 : #else
; 4205 : #error unknown platform
; 4206 : #endif
; 4207 : #else
; 4208 : #error unknown compiler
; 4209 : #endif
; 4210 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 4211 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_4WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_4WORDS_ADC_DIV PROC				; COMDAT

; 4100 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 4101 : #ifdef _MSC_VER
; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4103 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4104 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4105 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 4106 : #elif defined(__GNUC__)
; 4107 : #ifdef _M_IX86
; 4108 :     __asm__ volatile (
; 4109 :         "addb\t$-1, %0\n\t"
; 4110 :         "movl\t(%1), %%ecx\n\t"
; 4111 :         "adcl\t(%2), %%ecx\n\t"
; 4112 :         "movl\t%%ecx, (%3)\n\t"
; 4113 :         "movl\t4(%1), %%ecx\n\t"
; 4114 :         "adcl\t4(%2), %%ecx\n\t"
; 4115 :         "movl\t%%ecx, 4(%3)\n\t"
; 4116 :         "movl\t8(%1), %%ecx\n\t"
; 4117 :         "adcl\t8(%2), %%ecx\n\t"
; 4118 :         "movl\t%%ecx, 8(%3)\n\t"
; 4119 :         "movl\t12(%1), %%ecx\n\t"
; 4120 :         "adcl\t12(%2), %%ecx\n\t"
; 4121 :         "movl\t%%ecx, 12(%3)\n\t"
; 4122 :         "setc\t%0"
; 4123 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4124 :         :
; 4125 :         : "cc", "memory", "%ecx"
; 4126 : );
; 4127 : #elif defined(_M_IX64)
; 4128 :     __asm__ volatile (
; 4129 :         "addb\t$-1, %0\n\t"
; 4130 :         "movq\t(%1), %%rcx\n\t"
; 4131 :         "adcq\t(%2), %%rcx\n\t"
; 4132 :         "movq\t%%rcx, (%3)\n\t"
; 4133 :         "movq\t8(%1), %%rcx\n\t"
; 4134 :         "adcq\t8(%2), %%rcx\n\t"
; 4135 :         "movq\t%%rcx, 8(%3)\n\t"
; 4136 :         "movq\t16(%1), %%rcx\n\t"
; 4137 :         "adcq\t16(%2), %%rcx\n\t"
; 4138 :         "movq\t%%rcx, 16(%3)\n\t"
; 4139 :         "movq\t24(%1), %%rcx\n\t"
; 4140 :         "adcq\t24(%2), %%rcx\n\t"
; 4141 :         "movq\t%%rcx, 24(%3)\n\t"
; 4142 :         "setc\t%0"
; 4143 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4144 :         :
; 4145 :         : "cc", "memory", "%rcx"
; 4146 : );
; 4147 : #else
; 4148 : #error unknown platform
; 4149 : #endif
; 4150 : #else
; 4151 : #error unknown compiler
; 4152 : #endif
; 4153 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 4154 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_4WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_8WORDS_ADCX_DIV PROC				; COMDAT

; 3617 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 3618 : #ifdef _MSC_VER
; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3620 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3621 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3622 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3623 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	edx, 4
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	edx, 4
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	edx, 4
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	edx, 4
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3627 : #elif defined(__GNUC__)
; 3628 : #ifdef _M_IX86
; 3629 :     __asm__ volatile (
; 3630 :         "addb\t$-1, %0\n\t"
; 3631 :         "movl\t(%1), %%ecx\n\t"
; 3632 :         "adcxl\t(%2), %%ecx\n\t"
; 3633 :         "movl\t%%ecx, (%3)\n\t"
; 3634 :         "movl\t4(%1), %%ecx\n\t"
; 3635 :         "adcxl\t4(%2), %%ecx\n\t"
; 3636 :         "movl\t%%ecx, 4(%3)\n\t"
; 3637 :         "movl\t8(%1), %%ecx\n\t"
; 3638 :         "adcxl\t8(%2), %%ecx\n\t"
; 3639 :         "movl\t%%ecx, 8(%3)\n\t"
; 3640 :         "movl\t12(%1), %%ecx\n\t"
; 3641 :         "adcxl\t12(%2), %%ecx\n\t"
; 3642 :         "movl\t%%ecx, 12(%3)\n\t"
; 3643 :         "movl\t16(%1), %%ecx\n\t"
; 3644 :         "adcxl\t16(%2), %%ecx\n\t"
; 3645 :         "movl\t%%ecx, 16(%3)\n\t"
; 3646 :         "movl\t20(%1), %%ecx\n\t"
; 3647 :         "adcxl\t20(%2), %%ecx\n\t"
; 3648 :         "movl\t%%ecx, 20(%3)\n\t"
; 3649 :         "movl\t24(%1), %%ecx\n\t"
; 3650 :         "adcxl\t24(%2), %%ecx\n\t"
; 3651 :         "movl\t%%ecx, 24(%3)\n\t"
; 3652 :         "movl\t28(%1), %%ecx\n\t"
; 3653 :         "adcxl\t28(%2), %%ecx\n\t"
; 3654 :         "movl\t%%ecx, 28(%3)\n\t"
; 3655 :         "setc\t%0"
; 3656 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3657 :         :
; 3658 :         : "cc", "memory", "%ecx"
; 3659 : );
; 3660 : #elif defined(_M_IX64)
; 3661 :     __asm__ volatile (
; 3662 :         "addb\t$-1, %0\n\t"
; 3663 :         "movq\t(%1), %%rcx\n\t"
; 3664 :         "adcxq\t(%2), %%rcx\n\t"
; 3665 :         "movq\t%%rcx, (%3)\n\t"
; 3666 :         "movq\t8(%1), %%rcx\n\t"
; 3667 :         "adcxq\t8(%2), %%rcx\n\t"
; 3668 :         "movq\t%%rcx, 8(%3)\n\t"
; 3669 :         "movq\t16(%1), %%rcx\n\t"
; 3670 :         "adcxq\t16(%2), %%rcx\n\t"
; 3671 :         "movq\t%%rcx, 16(%3)\n\t"
; 3672 :         "movq\t24(%1), %%rcx\n\t"
; 3673 :         "adcxq\t24(%2), %%rcx\n\t"
; 3674 :         "movq\t%%rcx, 24(%3)\n\t"
; 3675 :         "movq\t32(%1), %%rcx\n\t"
; 3676 :         "adcxq\t32(%2), %%rcx\n\t"
; 3677 :         "movq\t%%rcx, 32(%3)\n\t"
; 3678 :         "movq\t40(%1), %%rcx\n\t"
; 3679 :         "adcxq\t40(%2), %%rcx\n\t"
; 3680 :         "movq\t%%rcx, 40(%3)\n\t"
; 3681 :         "movq\t48(%1), %%rcx\n\t"
; 3682 :         "adcxq\t48(%2), %%rcx\n\t"
; 3683 :         "movq\t%%rcx, 48(%3)\n\t"
; 3684 :         "movq\t56(%1), %%rcx\n\t"
; 3685 :         "adcxq\t56(%2), %%rcx\n\t"
; 3686 :         "movq\t%%rcx, 56(%3)\n\t"
; 3687 :         "setc\t%0"
; 3688 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3689 :         :
; 3690 :         : "cc", "memory", "%rcx"
; 3691 : );
; 3692 : #else
; 3693 : #error unknown platform
; 3694 : #endif
; 3695 : #else
; 3696 : #error unknown compiler
; 3697 : #endif
; 3698 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 3699 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_8WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_8WORDS_ADC_DIV PROC				; COMDAT

; 3532 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 3533 : #ifdef _MSC_VER
; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3535 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3536 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3537 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3538 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	edx, 4
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3539 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	edx, 4
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3540 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	edx, 4
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3541 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	edx, 4
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 3542 : #elif defined(__GNUC__)
; 3543 : #ifdef _M_IX86
; 3544 :     __asm__ volatile (
; 3545 :         "addb\t$-1, %0\n\t"
; 3546 :         "movl\t(%1), %%ecx\n\t"
; 3547 :         "adcl\t(%2), %%ecx\n\t"
; 3548 :         "movl\t%%ecx, (%3)\n\t"
; 3549 :         "movl\t4(%1), %%ecx\n\t"
; 3550 :         "adcl\t4(%2), %%ecx\n\t"
; 3551 :         "movl\t%%ecx, 4(%3)\n\t"
; 3552 :         "movl\t8(%1), %%ecx\n\t"
; 3553 :         "adcl\t8(%2), %%ecx\n\t"
; 3554 :         "movl\t%%ecx, 8(%3)\n\t"
; 3555 :         "movl\t12(%1), %%ecx\n\t"
; 3556 :         "adcl\t12(%2), %%ecx\n\t"
; 3557 :         "movl\t%%ecx, 12(%3)\n\t"
; 3558 :         "movl\t16(%1), %%ecx\n\t"
; 3559 :         "adcl\t16(%2), %%ecx\n\t"
; 3560 :         "movl\t%%ecx, 16(%3)\n\t"
; 3561 :         "movl\t20(%1), %%ecx\n\t"
; 3562 :         "adcl\t20(%2), %%ecx\n\t"
; 3563 :         "movl\t%%ecx, 20(%3)\n\t"
; 3564 :         "movl\t24(%1), %%ecx\n\t"
; 3565 :         "adcl\t24(%2), %%ecx\n\t"
; 3566 :         "movl\t%%ecx, 24(%3)\n\t"
; 3567 :         "movl\t28(%1), %%ecx\n\t"
; 3568 :         "adcl\t28(%2), %%ecx\n\t"
; 3569 :         "movl\t%%ecx, 28(%3)\n\t"
; 3570 :         "setc\t%0"
; 3571 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3572 :         :
; 3573 :         : "cc", "memory", "%ecx"
; 3574 : );
; 3575 : #elif defined(_M_IX64)
; 3576 :     __asm__ volatile (
; 3577 :         "addb\t$-1, %0\n\t"
; 3578 :         "movq\t(%1), %%rcx\n\t"
; 3579 :         "adcq\t(%2), %%rcx\n\t"
; 3580 :         "movq\t%%rcx, (%3)\n\t"
; 3581 :         "movq\t8(%1), %%rcx\n\t"
; 3582 :         "adcq\t8(%2), %%rcx\n\t"
; 3583 :         "movq\t%%rcx, 8(%3)\n\t"
; 3584 :         "movq\t16(%1), %%rcx\n\t"
; 3585 :         "adcq\t16(%2), %%rcx\n\t"
; 3586 :         "movq\t%%rcx, 16(%3)\n\t"
; 3587 :         "movq\t24(%1), %%rcx\n\t"
; 3588 :         "adcq\t24(%2), %%rcx\n\t"
; 3589 :         "movq\t%%rcx, 24(%3)\n\t"
; 3590 :         "movq\t32(%1), %%rcx\n\t"
; 3591 :         "adcq\t32(%2), %%rcx\n\t"
; 3592 :         "movq\t%%rcx, 32(%3)\n\t"
; 3593 :         "movq\t40(%1), %%rcx\n\t"
; 3594 :         "adcq\t40(%2), %%rcx\n\t"
; 3595 :         "movq\t%%rcx, 40(%3)\n\t"
; 3596 :         "movq\t48(%1), %%rcx\n\t"
; 3597 :         "adcq\t48(%2), %%rcx\n\t"
; 3598 :         "movq\t%%rcx, 48(%3)\n\t"
; 3599 :         "movq\t56(%1), %%rcx\n\t"
; 3600 :         "adcq\t56(%2), %%rcx\n\t"
; 3601 :         "movq\t%%rcx, 56(%3)\n\t"
; 3602 :         "setc\t%0"
; 3603 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3604 :         :
; 3605 :         : "cc", "memory", "%rcx"
; 3606 : );
; 3607 : #else
; 3608 : #error unknown platform
; 3609 : #endif
; 3610 : #else
; 3611 : #error unknown compiler
; 3612 : #endif
; 3613 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 3614 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_8WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_16WORDS_ADCX_DIV PROC				; COMDAT

; 2769 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 2770 : #ifdef _MSC_VER
; 2771 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2772 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2773 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2774 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2775 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	edx, 4
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2776 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	edx, 4
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2777 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	edx, 4
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2778 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	edx, 4
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2779 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	edx, 4
	imul	rdx, rdx, 8
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2780 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	edx, 4
	imul	rdx, rdx, 9
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2781 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	edx, 4
	imul	rdx, rdx, 10
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2782 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	edx, 4
	imul	rdx, rdx, 11
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2783 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	edx, 4
	imul	rdx, rdx, 12
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2784 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	edx, 4
	imul	rdx, rdx, 13
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2785 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	edx, 4
	imul	rdx, rdx, 14
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2786 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	edx, 4
	imul	rdx, rdx, 15
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2787 : #elif defined(__GNUC__)
; 2788 : #ifdef _M_IX86
; 2789 :     __asm__ volatile (
; 2790 :         "addb\t$-1, %0\n\t"
; 2791 :         "movl\t(%1), %%ecx\n\t"
; 2792 :         "adcxl\t(%2), %%ecx\n\t"
; 2793 :         "movl\t%%ecx, (%3)\n\t"
; 2794 :         "movl\t4(%1), %%ecx\n\t"
; 2795 :         "adcxl\t4(%2), %%ecx\n\t"
; 2796 :         "movl\t%%ecx, 4(%3)\n\t"
; 2797 :         "movl\t8(%1), %%ecx\n\t"
; 2798 :         "adcxl\t8(%2), %%ecx\n\t"
; 2799 :         "movl\t%%ecx, 8(%3)\n\t"
; 2800 :         "movl\t12(%1), %%ecx\n\t"
; 2801 :         "adcxl\t12(%2), %%ecx\n\t"
; 2802 :         "movl\t%%ecx, 12(%3)\n\t"
; 2803 :         "movl\t16(%1), %%ecx\n\t"
; 2804 :         "adcxl\t16(%2), %%ecx\n\t"
; 2805 :         "movl\t%%ecx, 16(%3)\n\t"
; 2806 :         "movl\t20(%1), %%ecx\n\t"
; 2807 :         "adcxl\t20(%2), %%ecx\n\t"
; 2808 :         "movl\t%%ecx, 20(%3)\n\t"
; 2809 :         "movl\t24(%1), %%ecx\n\t"
; 2810 :         "adcxl\t24(%2), %%ecx\n\t"
; 2811 :         "movl\t%%ecx, 24(%3)\n\t"
; 2812 :         "movl\t28(%1), %%ecx\n\t"
; 2813 :         "adcxl\t28(%2), %%ecx\n\t"
; 2814 :         "movl\t%%ecx, 28(%3)\n\t"
; 2815 :         "movl\t32(%1), %%ecx\n\t"
; 2816 :         "adcxl\t32(%2), %%ecx\n\t"
; 2817 :         "movl\t%%ecx, 32(%3)\n\t"
; 2818 :         "movl\t36(%1), %%ecx\n\t"
; 2819 :         "adcxl\t36(%2), %%ecx\n\t"
; 2820 :         "movl\t%%ecx, 36(%3)\n\t"
; 2821 :         "movl\t40(%1), %%ecx\n\t"
; 2822 :         "adcxl\t40(%2), %%ecx\n\t"
; 2823 :         "movl\t%%ecx, 40(%3)\n\t"
; 2824 :         "movl\t44(%1), %%ecx\n\t"
; 2825 :         "adcxl\t44(%2), %%ecx\n\t"
; 2826 :         "movl\t%%ecx, 44(%3)\n\t"
; 2827 :         "movl\t48(%1), %%ecx\n\t"
; 2828 :         "adcxl\t48(%2), %%ecx\n\t"
; 2829 :         "movl\t%%ecx, 48(%3)\n\t"
; 2830 :         "movl\t52(%1), %%ecx\n\t"
; 2831 :         "adcxl\t52(%2), %%ecx\n\t"
; 2832 :         "movl\t%%ecx, 52(%3)\n\t"
; 2833 :         "movl\t56(%1), %%ecx\n\t"
; 2834 :         "adcxl\t56(%2), %%ecx\n\t"
; 2835 :         "movl\t%%ecx, 56(%3)\n\t"
; 2836 :         "movl\t60(%1), %%ecx\n\t"
; 2837 :         "adcxl\t60(%2), %%ecx\n\t"
; 2838 :         "movl\t%%ecx, 60(%3)\n\t"
; 2839 :         "setc\t%0"
; 2840 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2841 :         :
; 2842 :         : "cc", "memory", "%ecx"
; 2843 : );
; 2844 : #elif defined(_M_IX64)
; 2845 :     __asm__ volatile (
; 2846 :         "addb\t$-1, %0\n\t"
; 2847 :         "movq\t(%1), %%rcx\n\t"
; 2848 :         "adcxq\t(%2), %%rcx\n\t"
; 2849 :         "movq\t%%rcx, (%3)\n\t"
; 2850 :         "movq\t8(%1), %%rcx\n\t"
; 2851 :         "adcxq\t8(%2), %%rcx\n\t"
; 2852 :         "movq\t%%rcx, 8(%3)\n\t"
; 2853 :         "movq\t16(%1), %%rcx\n\t"
; 2854 :         "adcxq\t16(%2), %%rcx\n\t"
; 2855 :         "movq\t%%rcx, 16(%3)\n\t"
; 2856 :         "movq\t24(%1), %%rcx\n\t"
; 2857 :         "adcxq\t24(%2), %%rcx\n\t"
; 2858 :         "movq\t%%rcx, 24(%3)\n\t"
; 2859 :         "movq\t32(%1), %%rcx\n\t"
; 2860 :         "adcxq\t32(%2), %%rcx\n\t"
; 2861 :         "movq\t%%rcx, 32(%3)\n\t"
; 2862 :         "movq\t40(%1), %%rcx\n\t"
; 2863 :         "adcxq\t40(%2), %%rcx\n\t"
; 2864 :         "movq\t%%rcx, 40(%3)\n\t"
; 2865 :         "movq\t48(%1), %%rcx\n\t"
; 2866 :         "adcxq\t48(%2), %%rcx\n\t"
; 2867 :         "movq\t%%rcx, 48(%3)\n\t"
; 2868 :         "movq\t56(%1), %%rcx\n\t"
; 2869 :         "adcxq\t56(%2), %%rcx\n\t"
; 2870 :         "movq\t%%rcx, 56(%3)\n\t"
; 2871 :         "movq\t64(%1), %%rcx\n\t"
; 2872 :         "adcxq\t64(%2), %%rcx\n\t"
; 2873 :         "movq\t%%rcx, 64(%3)\n\t"
; 2874 :         "movq\t72(%1), %%rcx\n\t"
; 2875 :         "adcxq\t72(%2), %%rcx\n\t"
; 2876 :         "movq\t%%rcx, 72(%3)\n\t"
; 2877 :         "movq\t80(%1), %%rcx\n\t"
; 2878 :         "adcxq\t80(%2), %%rcx\n\t"
; 2879 :         "movq\t%%rcx, 80(%3)\n\t"
; 2880 :         "movq\t88(%1), %%rcx\n\t"
; 2881 :         "adcxq\t88(%2), %%rcx\n\t"
; 2882 :         "movq\t%%rcx, 88(%3)\n\t"
; 2883 :         "movq\t96(%1), %%rcx\n\t"
; 2884 :         "adcxq\t96(%2), %%rcx\n\t"
; 2885 :         "movq\t%%rcx, 96(%3)\n\t"
; 2886 :         "movq\t104(%1), %%rcx\n\t"
; 2887 :         "adcxq\t104(%2), %%rcx\n\t"
; 2888 :         "movq\t%%rcx, 104(%3)\n\t"
; 2889 :         "movq\t112(%1), %%rcx\n\t"
; 2890 :         "adcxq\t112(%2), %%rcx\n\t"
; 2891 :         "movq\t%%rcx, 112(%3)\n\t"
; 2892 :         "movq\t120(%1), %%rcx\n\t"
; 2893 :         "adcxq\t120(%2), %%rcx\n\t"
; 2894 :         "movq\t%%rcx, 120(%3)\n\t"
; 2895 :         "setc\t%0"
; 2896 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2897 :         :
; 2898 :         : "cc", "memory", "%rcx"
; 2899 : );
; 2900 : #else
; 2901 : #error unknown platform
; 2902 : #endif
; 2903 : #else
; 2904 : #error unknown compiler
; 2905 : #endif
; 2906 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 2907 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_16WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_16WORDS_ADC_DIV PROC				; COMDAT

; 2628 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 2629 : #ifdef _MSC_VER
; 2630 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2631 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2632 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2633 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2634 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	edx, 4
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2635 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	edx, 4
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2636 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	edx, 4
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2637 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	edx, 4
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2638 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	edx, 4
	imul	rdx, rdx, 8
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2639 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	edx, 4
	imul	rdx, rdx, 9
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2640 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	edx, 4
	imul	rdx, rdx, 10
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2641 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	edx, 4
	imul	rdx, rdx, 11
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2642 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	edx, 4
	imul	rdx, rdx, 12
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2643 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	edx, 4
	imul	rdx, rdx, 13
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2644 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	edx, 4
	imul	rdx, rdx, 14
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2645 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	edx, 4
	imul	rdx, rdx, 15
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 2646 : #elif defined(__GNUC__)
; 2647 : #ifdef _M_IX86
; 2648 :     __asm__ volatile (
; 2649 :         "addb\t$-1, %0\n\t"
; 2650 :         "movl\t(%1), %%ecx\n\t"
; 2651 :         "adcl\t(%2), %%ecx\n\t"
; 2652 :         "movl\t%%ecx, (%3)\n\t"
; 2653 :         "movl\t4(%1), %%ecx\n\t"
; 2654 :         "adcl\t4(%2), %%ecx\n\t"
; 2655 :         "movl\t%%ecx, 4(%3)\n\t"
; 2656 :         "movl\t8(%1), %%ecx\n\t"
; 2657 :         "adcl\t8(%2), %%ecx\n\t"
; 2658 :         "movl\t%%ecx, 8(%3)\n\t"
; 2659 :         "movl\t12(%1), %%ecx\n\t"
; 2660 :         "adcl\t12(%2), %%ecx\n\t"
; 2661 :         "movl\t%%ecx, 12(%3)\n\t"
; 2662 :         "movl\t16(%1), %%ecx\n\t"
; 2663 :         "adcl\t16(%2), %%ecx\n\t"
; 2664 :         "movl\t%%ecx, 16(%3)\n\t"
; 2665 :         "movl\t20(%1), %%ecx\n\t"
; 2666 :         "adcl\t20(%2), %%ecx\n\t"
; 2667 :         "movl\t%%ecx, 20(%3)\n\t"
; 2668 :         "movl\t24(%1), %%ecx\n\t"
; 2669 :         "adcl\t24(%2), %%ecx\n\t"
; 2670 :         "movl\t%%ecx, 24(%3)\n\t"
; 2671 :         "movl\t28(%1), %%ecx\n\t"
; 2672 :         "adcl\t28(%2), %%ecx\n\t"
; 2673 :         "movl\t%%ecx, 28(%3)\n\t"
; 2674 :         "movl\t32(%1), %%ecx\n\t"
; 2675 :         "adcl\t32(%2), %%ecx\n\t"
; 2676 :         "movl\t%%ecx, 32(%3)\n\t"
; 2677 :         "movl\t36(%1), %%ecx\n\t"
; 2678 :         "adcl\t36(%2), %%ecx\n\t"
; 2679 :         "movl\t%%ecx, 36(%3)\n\t"
; 2680 :         "movl\t40(%1), %%ecx\n\t"
; 2681 :         "adcl\t40(%2), %%ecx\n\t"
; 2682 :         "movl\t%%ecx, 40(%3)\n\t"
; 2683 :         "movl\t44(%1), %%ecx\n\t"
; 2684 :         "adcl\t44(%2), %%ecx\n\t"
; 2685 :         "movl\t%%ecx, 44(%3)\n\t"
; 2686 :         "movl\t48(%1), %%ecx\n\t"
; 2687 :         "adcl\t48(%2), %%ecx\n\t"
; 2688 :         "movl\t%%ecx, 48(%3)\n\t"
; 2689 :         "movl\t52(%1), %%ecx\n\t"
; 2690 :         "adcl\t52(%2), %%ecx\n\t"
; 2691 :         "movl\t%%ecx, 52(%3)\n\t"
; 2692 :         "movl\t56(%1), %%ecx\n\t"
; 2693 :         "adcl\t56(%2), %%ecx\n\t"
; 2694 :         "movl\t%%ecx, 56(%3)\n\t"
; 2695 :         "movl\t60(%1), %%ecx\n\t"
; 2696 :         "adcl\t60(%2), %%ecx\n\t"
; 2697 :         "movl\t%%ecx, 60(%3)\n\t"
; 2698 :         "setc\t%0"
; 2699 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2700 :         :
; 2701 :         : "cc", "memory", "%ecx"
; 2702 : );
; 2703 : #elif defined(_M_IX64)
; 2704 :     __asm__ volatile (
; 2705 :         "addb\t$-1, %0\n\t"
; 2706 :         "movq\t(%1), %%rcx\n\t"
; 2707 :         "adcq\t(%2), %%rcx\n\t"
; 2708 :         "movq\t%%rcx, (%3)\n\t"
; 2709 :         "movq\t8(%1), %%rcx\n\t"
; 2710 :         "adcq\t8(%2), %%rcx\n\t"
; 2711 :         "movq\t%%rcx, 8(%3)\n\t"
; 2712 :         "movq\t16(%1), %%rcx\n\t"
; 2713 :         "adcq\t16(%2), %%rcx\n\t"
; 2714 :         "movq\t%%rcx, 16(%3)\n\t"
; 2715 :         "movq\t24(%1), %%rcx\n\t"
; 2716 :         "adcq\t24(%2), %%rcx\n\t"
; 2717 :         "movq\t%%rcx, 24(%3)\n\t"
; 2718 :         "movq\t32(%1), %%rcx\n\t"
; 2719 :         "adcq\t32(%2), %%rcx\n\t"
; 2720 :         "movq\t%%rcx, 32(%3)\n\t"
; 2721 :         "movq\t40(%1), %%rcx\n\t"
; 2722 :         "adcq\t40(%2), %%rcx\n\t"
; 2723 :         "movq\t%%rcx, 40(%3)\n\t"
; 2724 :         "movq\t48(%1), %%rcx\n\t"
; 2725 :         "adcq\t48(%2), %%rcx\n\t"
; 2726 :         "movq\t%%rcx, 48(%3)\n\t"
; 2727 :         "movq\t56(%1), %%rcx\n\t"
; 2728 :         "adcq\t56(%2), %%rcx\n\t"
; 2729 :         "movq\t%%rcx, 56(%3)\n\t"
; 2730 :         "movq\t64(%1), %%rcx\n\t"
; 2731 :         "adcq\t64(%2), %%rcx\n\t"
; 2732 :         "movq\t%%rcx, 64(%3)\n\t"
; 2733 :         "movq\t72(%1), %%rcx\n\t"
; 2734 :         "adcq\t72(%2), %%rcx\n\t"
; 2735 :         "movq\t%%rcx, 72(%3)\n\t"
; 2736 :         "movq\t80(%1), %%rcx\n\t"
; 2737 :         "adcq\t80(%2), %%rcx\n\t"
; 2738 :         "movq\t%%rcx, 80(%3)\n\t"
; 2739 :         "movq\t88(%1), %%rcx\n\t"
; 2740 :         "adcq\t88(%2), %%rcx\n\t"
; 2741 :         "movq\t%%rcx, 88(%3)\n\t"
; 2742 :         "movq\t96(%1), %%rcx\n\t"
; 2743 :         "adcq\t96(%2), %%rcx\n\t"
; 2744 :         "movq\t%%rcx, 96(%3)\n\t"
; 2745 :         "movq\t104(%1), %%rcx\n\t"
; 2746 :         "adcq\t104(%2), %%rcx\n\t"
; 2747 :         "movq\t%%rcx, 104(%3)\n\t"
; 2748 :         "movq\t112(%1), %%rcx\n\t"
; 2749 :         "adcq\t112(%2), %%rcx\n\t"
; 2750 :         "movq\t%%rcx, 112(%3)\n\t"
; 2751 :         "movq\t120(%1), %%rcx\n\t"
; 2752 :         "adcq\t120(%2), %%rcx\n\t"
; 2753 :         "movq\t%%rcx, 120(%3)\n\t"
; 2754 :         "setc\t%0"
; 2755 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2756 :         :
; 2757 :         : "cc", "memory", "%rcx"
; 2758 : );
; 2759 : #else
; 2760 : #error unknown platform
; 2761 : #endif
; 2762 : #else
; 2763 : #error unknown compiler
; 2764 : #endif
; 2765 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 2766 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_16WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_32WORDS_ADCX_DIV PROC				; COMDAT

; 1305 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 1306 : #ifdef _MSC_VER
; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1308 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1309 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1310 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1311 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	edx, 4
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	edx, 4
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	edx, 4
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	edx, 4
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	edx, 4
	imul	rdx, rdx, 8
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	edx, 4
	imul	rdx, rdx, 9
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	edx, 4
	imul	rdx, rdx, 10
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	edx, 4
	imul	rdx, rdx, 11
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	edx, 4
	imul	rdx, rdx, 12
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	edx, 4
	imul	rdx, rdx, 13
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	edx, 4
	imul	rdx, rdx, 14
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	edx, 4
	imul	rdx, rdx, 15
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 16
	mov	edx, 4
	imul	rdx, rdx, 16
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, 4
	imul	rax, rax, 17
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 17
	mov	edx, 4
	imul	rdx, rdx, 17
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, 4
	imul	rax, rax, 18
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 18
	mov	edx, 4
	imul	rdx, rdx, 18
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, 4
	imul	rax, rax, 19
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 19
	mov	edx, 4
	imul	rdx, rdx, 19
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, 4
	imul	rax, rax, 20
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 20
	mov	edx, 4
	imul	rdx, rdx, 20
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, 4
	imul	rax, rax, 21
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 21
	mov	edx, 4
	imul	rdx, rdx, 21
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, 4
	imul	rax, rax, 22
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 22
	mov	edx, 4
	imul	rdx, rdx, 22
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, 4
	imul	rax, rax, 23
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 23
	mov	edx, 4
	imul	rdx, rdx, 23
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 24
	mov	edx, 4
	imul	rdx, rdx, 24
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, 4
	imul	rax, rax, 25
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 25
	mov	edx, 4
	imul	rdx, rdx, 25
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, 4
	imul	rax, rax, 26
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 26
	mov	edx, 4
	imul	rdx, rdx, 26
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, 4
	imul	rax, rax, 27
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 27
	mov	edx, 4
	imul	rdx, rdx, 27
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, 4
	imul	rax, rax, 28
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 28
	mov	edx, 4
	imul	rdx, rdx, 28
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, 4
	imul	rax, rax, 29
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 29
	mov	edx, 4
	imul	rdx, rdx, 29
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, 4
	imul	rax, rax, 30
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 30
	mov	edx, 4
	imul	rdx, rdx, 30
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	eax, 4
	imul	rax, rax, 31
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 31
	mov	edx, 4
	imul	rdx, rdx, 31
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADDX_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1339 : #elif defined(__GNUC__)
; 1340 : #ifdef _M_IX86
; 1341 :     __asm__ volatile (
; 1342 :         "addb\t$-1, %0\n\t"
; 1343 :         "movl\t(%1), %%ecx\n\t"
; 1344 :         "adcxl\t(%2), %%ecx\n\t"
; 1345 :         "movl\t%%ecx, (%3)\n\t"
; 1346 :         "movl\t4(%1), %%ecx\n\t"
; 1347 :         "adcxl\t4(%2), %%ecx\n\t"
; 1348 :         "movl\t%%ecx, 4(%3)\n\t"
; 1349 :         "movl\t8(%1), %%ecx\n\t"
; 1350 :         "adcxl\t8(%2), %%ecx\n\t"
; 1351 :         "movl\t%%ecx, 8(%3)\n\t"
; 1352 :         "movl\t12(%1), %%ecx\n\t"
; 1353 :         "adcxl\t12(%2), %%ecx\n\t"
; 1354 :         "movl\t%%ecx, 12(%3)\n\t"
; 1355 :         "movl\t16(%1), %%ecx\n\t"
; 1356 :         "adcxl\t16(%2), %%ecx\n\t"
; 1357 :         "movl\t%%ecx, 16(%3)\n\t"
; 1358 :         "movl\t20(%1), %%ecx\n\t"
; 1359 :         "adcxl\t20(%2), %%ecx\n\t"
; 1360 :         "movl\t%%ecx, 20(%3)\n\t"
; 1361 :         "movl\t24(%1), %%ecx\n\t"
; 1362 :         "adcxl\t24(%2), %%ecx\n\t"
; 1363 :         "movl\t%%ecx, 24(%3)\n\t"
; 1364 :         "movl\t28(%1), %%ecx\n\t"
; 1365 :         "adcxl\t28(%2), %%ecx\n\t"
; 1366 :         "movl\t%%ecx, 28(%3)\n\t"
; 1367 :         "movl\t32(%1), %%ecx\n\t"
; 1368 :         "adcxl\t32(%2), %%ecx\n\t"
; 1369 :         "movl\t%%ecx, 32(%3)\n\t"
; 1370 :         "movl\t36(%1), %%ecx\n\t"
; 1371 :         "adcxl\t36(%2), %%ecx\n\t"
; 1372 :         "movl\t%%ecx, 36(%3)\n\t"
; 1373 :         "movl\t40(%1), %%ecx\n\t"
; 1374 :         "adcxl\t40(%2), %%ecx\n\t"
; 1375 :         "movl\t%%ecx, 40(%3)\n\t"
; 1376 :         "movl\t44(%1), %%ecx\n\t"
; 1377 :         "adcxl\t44(%2), %%ecx\n\t"
; 1378 :         "movl\t%%ecx, 44(%3)\n\t"
; 1379 :         "movl\t48(%1), %%ecx\n\t"
; 1380 :         "adcxl\t48(%2), %%ecx\n\t"
; 1381 :         "movl\t%%ecx, 48(%3)\n\t"
; 1382 :         "movl\t52(%1), %%ecx\n\t"
; 1383 :         "adcxl\t52(%2), %%ecx\n\t"
; 1384 :         "movl\t%%ecx, 52(%3)\n\t"
; 1385 :         "movl\t56(%1), %%ecx\n\t"
; 1386 :         "adcxl\t56(%2), %%ecx\n\t"
; 1387 :         "movl\t%%ecx, 56(%3)\n\t"
; 1388 :         "movl\t60(%1), %%ecx\n\t"
; 1389 :         "adcxl\t60(%2), %%ecx\n\t"
; 1390 :         "movl\t%%ecx, 60(%3)\n\t"
; 1391 :         "movl\t64(%1), %%ecx\n\t"
; 1392 :         "adcxl\t64(%2), %%ecx\n\t"
; 1393 :         "movl\t%%ecx, 64(%3)\n\t"
; 1394 :         "movl\t68(%1), %%ecx\n\t"
; 1395 :         "adcxl\t68(%2), %%ecx\n\t"
; 1396 :         "movl\t%%ecx, 68(%3)\n\t"
; 1397 :         "movl\t72(%1), %%ecx\n\t"
; 1398 :         "adcxl\t72(%2), %%ecx\n\t"
; 1399 :         "movl\t%%ecx, 72(%3)\n\t"
; 1400 :         "movl\t76(%1), %%ecx\n\t"
; 1401 :         "adcxl\t76(%2), %%ecx\n\t"
; 1402 :         "movl\t%%ecx, 76(%3)\n\t"
; 1403 :         "movl\t80(%1), %%ecx\n\t"
; 1404 :         "adcxl\t80(%2), %%ecx\n\t"
; 1405 :         "movl\t%%ecx, 80(%3)\n\t"
; 1406 :         "movl\t84(%1), %%ecx\n\t"
; 1407 :         "adcxl\t84(%2), %%ecx\n\t"
; 1408 :         "movl\t%%ecx, 84(%3)\n\t"
; 1409 :         "movl\t88(%1), %%ecx\n\t"
; 1410 :         "adcxl\t88(%2), %%ecx\n\t"
; 1411 :         "movl\t%%ecx, 88(%3)\n\t"
; 1412 :         "movl\t92(%1), %%ecx\n\t"
; 1413 :         "adcxl\t92(%2), %%ecx\n\t"
; 1414 :         "movl\t%%ecx, 92(%3)\n\t"
; 1415 :         "movl\t96(%1), %%ecx\n\t"
; 1416 :         "adcxl\t96(%2), %%ecx\n\t"
; 1417 :         "movl\t%%ecx, 96(%3)\n\t"
; 1418 :         "movl\t100(%1), %%ecx\n\t"
; 1419 :         "adcxl\t100(%2), %%ecx\n\t"
; 1420 :         "movl\t%%ecx, 100(%3)\n\t"
; 1421 :         "movl\t104(%1), %%ecx\n\t"
; 1422 :         "adcxl\t104(%2), %%ecx\n\t"
; 1423 :         "movl\t%%ecx, 104(%3)\n\t"
; 1424 :         "movl\t108(%1), %%ecx\n\t"
; 1425 :         "adcxl\t108(%2), %%ecx\n\t"
; 1426 :         "movl\t%%ecx, 108(%3)\n\t"
; 1427 :         "movl\t112(%1), %%ecx\n\t"
; 1428 :         "adcxl\t112(%2), %%ecx\n\t"
; 1429 :         "movl\t%%ecx, 112(%3)\n\t"
; 1430 :         "movl\t116(%1), %%ecx\n\t"
; 1431 :         "adcxl\t116(%2), %%ecx\n\t"
; 1432 :         "movl\t%%ecx, 116(%3)\n\t"
; 1433 :         "movl\t120(%1), %%ecx\n\t"
; 1434 :         "adcxl\t120(%2), %%ecx\n\t"
; 1435 :         "movl\t%%ecx, 120(%3)\n\t"
; 1436 :         "movl\t124(%1), %%ecx\n\t"
; 1437 :         "adcxl\t124(%2), %%ecx\n\t"
; 1438 :         "movl\t%%ecx, 124(%3)\n\t"
; 1439 :         "setc\t%0"
; 1440 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1441 :         :
; 1442 :         : "cc", "memory", "%ecx"
; 1443 : );
; 1444 : #elif defined(_M_IX64)
; 1445 :     __asm__ volatile (
; 1446 :         "addb\t$-1, %0\n\t"
; 1447 :         "movq\t(%1), %%rcx\n\t"
; 1448 :         "adcxq\t(%2), %%rcx\n\t"
; 1449 :         "movq\t%%rcx, (%3)\n\t"
; 1450 :         "movq\t8(%1), %%rcx\n\t"
; 1451 :         "adcxq\t8(%2), %%rcx\n\t"
; 1452 :         "movq\t%%rcx, 8(%3)\n\t"
; 1453 :         "movq\t16(%1), %%rcx\n\t"
; 1454 :         "adcxq\t16(%2), %%rcx\n\t"
; 1455 :         "movq\t%%rcx, 16(%3)\n\t"
; 1456 :         "movq\t24(%1), %%rcx\n\t"
; 1457 :         "adcxq\t24(%2), %%rcx\n\t"
; 1458 :         "movq\t%%rcx, 24(%3)\n\t"
; 1459 :         "movq\t32(%1), %%rcx\n\t"
; 1460 :         "adcxq\t32(%2), %%rcx\n\t"
; 1461 :         "movq\t%%rcx, 32(%3)\n\t"
; 1462 :         "movq\t40(%1), %%rcx\n\t"
; 1463 :         "adcxq\t40(%2), %%rcx\n\t"
; 1464 :         "movq\t%%rcx, 40(%3)\n\t"
; 1465 :         "movq\t48(%1), %%rcx\n\t"
; 1466 :         "adcxq\t48(%2), %%rcx\n\t"
; 1467 :         "movq\t%%rcx, 48(%3)\n\t"
; 1468 :         "movq\t56(%1), %%rcx\n\t"
; 1469 :         "adcxq\t56(%2), %%rcx\n\t"
; 1470 :         "movq\t%%rcx, 56(%3)\n\t"
; 1471 :         "movq\t64(%1), %%rcx\n\t"
; 1472 :         "adcxq\t64(%2), %%rcx\n\t"
; 1473 :         "movq\t%%rcx, 64(%3)\n\t"
; 1474 :         "movq\t72(%1), %%rcx\n\t"
; 1475 :         "adcxq\t72(%2), %%rcx\n\t"
; 1476 :         "movq\t%%rcx, 72(%3)\n\t"
; 1477 :         "movq\t80(%1), %%rcx\n\t"
; 1478 :         "adcxq\t80(%2), %%rcx\n\t"
; 1479 :         "movq\t%%rcx, 80(%3)\n\t"
; 1480 :         "movq\t88(%1), %%rcx\n\t"
; 1481 :         "adcxq\t88(%2), %%rcx\n\t"
; 1482 :         "movq\t%%rcx, 88(%3)\n\t"
; 1483 :         "movq\t96(%1), %%rcx\n\t"
; 1484 :         "adcxq\t96(%2), %%rcx\n\t"
; 1485 :         "movq\t%%rcx, 96(%3)\n\t"
; 1486 :         "movq\t104(%1), %%rcx\n\t"
; 1487 :         "adcxq\t104(%2), %%rcx\n\t"
; 1488 :         "movq\t%%rcx, 104(%3)\n\t"
; 1489 :         "movq\t112(%1), %%rcx\n\t"
; 1490 :         "adcxq\t112(%2), %%rcx\n\t"
; 1491 :         "movq\t%%rcx, 112(%3)\n\t"
; 1492 :         "movq\t120(%1), %%rcx\n\t"
; 1493 :         "adcxq\t120(%2), %%rcx\n\t"
; 1494 :         "movq\t%%rcx, 120(%3)\n\t"
; 1495 :         "movq\t128(%1), %%rcx\n\t"
; 1496 :         "adcxq\t128(%2), %%rcx\n\t"
; 1497 :         "movq\t%%rcx, 128(%3)\n\t"
; 1498 :         "movq\t136(%1), %%rcx\n\t"
; 1499 :         "adcxq\t136(%2), %%rcx\n\t"
; 1500 :         "movq\t%%rcx, 136(%3)\n\t"
; 1501 :         "movq\t144(%1), %%rcx\n\t"
; 1502 :         "adcxq\t144(%2), %%rcx\n\t"
; 1503 :         "movq\t%%rcx, 144(%3)\n\t"
; 1504 :         "movq\t152(%1), %%rcx\n\t"
; 1505 :         "adcxq\t152(%2), %%rcx\n\t"
; 1506 :         "movq\t%%rcx, 152(%3)\n\t"
; 1507 :         "movq\t160(%1), %%rcx\n\t"
; 1508 :         "adcxq\t160(%2), %%rcx\n\t"
; 1509 :         "movq\t%%rcx, 160(%3)\n\t"
; 1510 :         "movq\t168(%1), %%rcx\n\t"
; 1511 :         "adcxq\t168(%2), %%rcx\n\t"
; 1512 :         "movq\t%%rcx, 168(%3)\n\t"
; 1513 :         "movq\t176(%1), %%rcx\n\t"
; 1514 :         "adcxq\t176(%2), %%rcx\n\t"
; 1515 :         "movq\t%%rcx, 176(%3)\n\t"
; 1516 :         "movq\t184(%1), %%rcx\n\t"
; 1517 :         "adcxq\t184(%2), %%rcx\n\t"
; 1518 :         "movq\t%%rcx, 184(%3)\n\t"
; 1519 :         "movq\t192(%1), %%rcx\n\t"
; 1520 :         "adcxq\t192(%2), %%rcx\n\t"
; 1521 :         "movq\t%%rcx, 192(%3)\n\t"
; 1522 :         "movq\t200(%1), %%rcx\n\t"
; 1523 :         "adcxq\t200(%2), %%rcx\n\t"
; 1524 :         "movq\t%%rcx, 200(%3)\n\t"
; 1525 :         "movq\t208(%1), %%rcx\n\t"
; 1526 :         "adcxq\t208(%2), %%rcx\n\t"
; 1527 :         "movq\t%%rcx, 208(%3)\n\t"
; 1528 :         "movq\t216(%1), %%rcx\n\t"
; 1529 :         "adcxq\t216(%2), %%rcx\n\t"
; 1530 :         "movq\t%%rcx, 216(%3)\n\t"
; 1531 :         "movq\t224(%1), %%rcx\n\t"
; 1532 :         "adcxq\t224(%2), %%rcx\n\t"
; 1533 :         "movq\t%%rcx, 224(%3)\n\t"
; 1534 :         "movq\t232(%1), %%rcx\n\t"
; 1535 :         "adcxq\t232(%2), %%rcx\n\t"
; 1536 :         "movq\t%%rcx, 232(%3)\n\t"
; 1537 :         "movq\t240(%1), %%rcx\n\t"
; 1538 :         "adcxq\t240(%2), %%rcx\n\t"
; 1539 :         "movq\t%%rcx, 240(%3)\n\t"
; 1540 :         "movq\t248(%1), %%rcx\n\t"
; 1541 :         "adcxq\t248(%2), %%rcx\n\t"
; 1542 :         "movq\t%%rcx, 248(%3)\n\t"
; 1543 :         "setc\t%0"
; 1544 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1545 :         :
; 1546 :         : "cc", "memory", "%rcx"
; 1547 : );
; 1548 : #else
; 1549 : #error unknown platform
; 1550 : #endif
; 1551 : #else
; 1552 : #error unknown compiler
; 1553 : #endif
; 1554 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 1555 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_32WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 224
xp$ = 232
yp$ = 240
zp$ = 248
_ADD_32WORDS_ADC_DIV PROC				; COMDAT

; 1052 : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__E05E7037_autogenerated_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 1053 : #ifdef _MSC_VER
; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1055 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1056 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 4
	imul	rdx, rdx, 2
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1057 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 4
	imul	rdx, rdx, 3
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1058 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	edx, 4
	imul	rdx, rdx, 4
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1059 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	edx, 4
	imul	rdx, rdx, 5
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1060 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	edx, 4
	imul	rdx, rdx, 6
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1061 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	edx, 4
	imul	rdx, rdx, 7
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1062 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	edx, 4
	imul	rdx, rdx, 8
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1063 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	edx, 4
	imul	rdx, rdx, 9
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1064 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	edx, 4
	imul	rdx, rdx, 10
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1065 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	edx, 4
	imul	rdx, rdx, 11
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1066 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	edx, 4
	imul	rdx, rdx, 12
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1067 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	edx, 4
	imul	rdx, rdx, 13
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1068 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	edx, 4
	imul	rdx, rdx, 14
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1069 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	edx, 4
	imul	rdx, rdx, 15
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1070 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 16
	mov	edx, 4
	imul	rdx, rdx, 16
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1071 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, 4
	imul	rax, rax, 17
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 17
	mov	edx, 4
	imul	rdx, rdx, 17
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1072 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, 4
	imul	rax, rax, 18
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 18
	mov	edx, 4
	imul	rdx, rdx, 18
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1073 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, 4
	imul	rax, rax, 19
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 19
	mov	edx, 4
	imul	rdx, rdx, 19
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1074 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, 4
	imul	rax, rax, 20
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 20
	mov	edx, 4
	imul	rdx, rdx, 20
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1075 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, 4
	imul	rax, rax, 21
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 21
	mov	edx, 4
	imul	rdx, rdx, 21
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1076 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, 4
	imul	rax, rax, 22
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 22
	mov	edx, 4
	imul	rdx, rdx, 22
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1077 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, 4
	imul	rax, rax, 23
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 23
	mov	edx, 4
	imul	rdx, rdx, 23
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1078 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 24
	mov	edx, 4
	imul	rdx, rdx, 24
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1079 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, 4
	imul	rax, rax, 25
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 25
	mov	edx, 4
	imul	rdx, rdx, 25
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1080 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, 4
	imul	rax, rax, 26
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 26
	mov	edx, 4
	imul	rdx, rdx, 26
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1081 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, 4
	imul	rax, rax, 27
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 27
	mov	edx, 4
	imul	rdx, rdx, 27
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1082 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, 4
	imul	rax, rax, 28
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 28
	mov	edx, 4
	imul	rdx, rdx, 28
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1083 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, 4
	imul	rax, rax, 29
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 29
	mov	edx, 4
	imul	rdx, rdx, 29
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1084 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, 4
	imul	rax, rax, 30
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 30
	mov	edx, 4
	imul	rdx, rdx, 30
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1085 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	eax, 4
	imul	rax, rax, 31
	mov	rcx, QWORD PTR zp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 31
	mov	edx, 4
	imul	rdx, rdx, 31
	mov	r9, rax
	mov	rax, QWORD PTR yp$[rbp]
	mov	r8d, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR xp$[rbp]
	mov	edx, DWORD PTR [rax+rdx]
	movzx	ecx, BYTE PTR c$[rbp]
	call	_ADD_UNIT_DIV
	mov	BYTE PTR c$[rbp], al

; 1086 : #elif defined(__GNUC__)
; 1087 : #ifdef _M_IX86
; 1088 :     __asm__ volatile (
; 1089 :         "addb\t$-1, %0\n\t"
; 1090 :         "movl\t(%1), %%ecx\n\t"
; 1091 :         "adcl\t(%2), %%ecx\n\t"
; 1092 :         "movl\t%%ecx, (%3)\n\t"
; 1093 :         "movl\t4(%1), %%ecx\n\t"
; 1094 :         "adcl\t4(%2), %%ecx\n\t"
; 1095 :         "movl\t%%ecx, 4(%3)\n\t"
; 1096 :         "movl\t8(%1), %%ecx\n\t"
; 1097 :         "adcl\t8(%2), %%ecx\n\t"
; 1098 :         "movl\t%%ecx, 8(%3)\n\t"
; 1099 :         "movl\t12(%1), %%ecx\n\t"
; 1100 :         "adcl\t12(%2), %%ecx\n\t"
; 1101 :         "movl\t%%ecx, 12(%3)\n\t"
; 1102 :         "movl\t16(%1), %%ecx\n\t"
; 1103 :         "adcl\t16(%2), %%ecx\n\t"
; 1104 :         "movl\t%%ecx, 16(%3)\n\t"
; 1105 :         "movl\t20(%1), %%ecx\n\t"
; 1106 :         "adcl\t20(%2), %%ecx\n\t"
; 1107 :         "movl\t%%ecx, 20(%3)\n\t"
; 1108 :         "movl\t24(%1), %%ecx\n\t"
; 1109 :         "adcl\t24(%2), %%ecx\n\t"
; 1110 :         "movl\t%%ecx, 24(%3)\n\t"
; 1111 :         "movl\t28(%1), %%ecx\n\t"
; 1112 :         "adcl\t28(%2), %%ecx\n\t"
; 1113 :         "movl\t%%ecx, 28(%3)\n\t"
; 1114 :         "movl\t32(%1), %%ecx\n\t"
; 1115 :         "adcl\t32(%2), %%ecx\n\t"
; 1116 :         "movl\t%%ecx, 32(%3)\n\t"
; 1117 :         "movl\t36(%1), %%ecx\n\t"
; 1118 :         "adcl\t36(%2), %%ecx\n\t"
; 1119 :         "movl\t%%ecx, 36(%3)\n\t"
; 1120 :         "movl\t40(%1), %%ecx\n\t"
; 1121 :         "adcl\t40(%2), %%ecx\n\t"
; 1122 :         "movl\t%%ecx, 40(%3)\n\t"
; 1123 :         "movl\t44(%1), %%ecx\n\t"
; 1124 :         "adcl\t44(%2), %%ecx\n\t"
; 1125 :         "movl\t%%ecx, 44(%3)\n\t"
; 1126 :         "movl\t48(%1), %%ecx\n\t"
; 1127 :         "adcl\t48(%2), %%ecx\n\t"
; 1128 :         "movl\t%%ecx, 48(%3)\n\t"
; 1129 :         "movl\t52(%1), %%ecx\n\t"
; 1130 :         "adcl\t52(%2), %%ecx\n\t"
; 1131 :         "movl\t%%ecx, 52(%3)\n\t"
; 1132 :         "movl\t56(%1), %%ecx\n\t"
; 1133 :         "adcl\t56(%2), %%ecx\n\t"
; 1134 :         "movl\t%%ecx, 56(%3)\n\t"
; 1135 :         "movl\t60(%1), %%ecx\n\t"
; 1136 :         "adcl\t60(%2), %%ecx\n\t"
; 1137 :         "movl\t%%ecx, 60(%3)\n\t"
; 1138 :         "movl\t64(%1), %%ecx\n\t"
; 1139 :         "adcl\t64(%2), %%ecx\n\t"
; 1140 :         "movl\t%%ecx, 64(%3)\n\t"
; 1141 :         "movl\t68(%1), %%ecx\n\t"
; 1142 :         "adcl\t68(%2), %%ecx\n\t"
; 1143 :         "movl\t%%ecx, 68(%3)\n\t"
; 1144 :         "movl\t72(%1), %%ecx\n\t"
; 1145 :         "adcl\t72(%2), %%ecx\n\t"
; 1146 :         "movl\t%%ecx, 72(%3)\n\t"
; 1147 :         "movl\t76(%1), %%ecx\n\t"
; 1148 :         "adcl\t76(%2), %%ecx\n\t"
; 1149 :         "movl\t%%ecx, 76(%3)\n\t"
; 1150 :         "movl\t80(%1), %%ecx\n\t"
; 1151 :         "adcl\t80(%2), %%ecx\n\t"
; 1152 :         "movl\t%%ecx, 80(%3)\n\t"
; 1153 :         "movl\t84(%1), %%ecx\n\t"
; 1154 :         "adcl\t84(%2), %%ecx\n\t"
; 1155 :         "movl\t%%ecx, 84(%3)\n\t"
; 1156 :         "movl\t88(%1), %%ecx\n\t"
; 1157 :         "adcl\t88(%2), %%ecx\n\t"
; 1158 :         "movl\t%%ecx, 88(%3)\n\t"
; 1159 :         "movl\t92(%1), %%ecx\n\t"
; 1160 :         "adcl\t92(%2), %%ecx\n\t"
; 1161 :         "movl\t%%ecx, 92(%3)\n\t"
; 1162 :         "movl\t96(%1), %%ecx\n\t"
; 1163 :         "adcl\t96(%2), %%ecx\n\t"
; 1164 :         "movl\t%%ecx, 96(%3)\n\t"
; 1165 :         "movl\t100(%1), %%ecx\n\t"
; 1166 :         "adcl\t100(%2), %%ecx\n\t"
; 1167 :         "movl\t%%ecx, 100(%3)\n\t"
; 1168 :         "movl\t104(%1), %%ecx\n\t"
; 1169 :         "adcl\t104(%2), %%ecx\n\t"
; 1170 :         "movl\t%%ecx, 104(%3)\n\t"
; 1171 :         "movl\t108(%1), %%ecx\n\t"
; 1172 :         "adcl\t108(%2), %%ecx\n\t"
; 1173 :         "movl\t%%ecx, 108(%3)\n\t"
; 1174 :         "movl\t112(%1), %%ecx\n\t"
; 1175 :         "adcl\t112(%2), %%ecx\n\t"
; 1176 :         "movl\t%%ecx, 112(%3)\n\t"
; 1177 :         "movl\t116(%1), %%ecx\n\t"
; 1178 :         "adcl\t116(%2), %%ecx\n\t"
; 1179 :         "movl\t%%ecx, 116(%3)\n\t"
; 1180 :         "movl\t120(%1), %%ecx\n\t"
; 1181 :         "adcl\t120(%2), %%ecx\n\t"
; 1182 :         "movl\t%%ecx, 120(%3)\n\t"
; 1183 :         "movl\t124(%1), %%ecx\n\t"
; 1184 :         "adcl\t124(%2), %%ecx\n\t"
; 1185 :         "movl\t%%ecx, 124(%3)\n\t"
; 1186 :         "setc\t%0"
; 1187 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1188 :         :
; 1189 :         : "cc", "memory", "%ecx"
; 1190 : );
; 1191 : #elif defined(_M_IX64)
; 1192 :     __asm__ volatile (
; 1193 :         "addb\t$-1, %0\n\t"
; 1194 :         "movq\t(%1), %%rcx\n\t"
; 1195 :         "adcq\t(%2), %%rcx\n\t"
; 1196 :         "movq\t%%rcx, (%3)\n\t"
; 1197 :         "movq\t8(%1), %%rcx\n\t"
; 1198 :         "adcq\t8(%2), %%rcx\n\t"
; 1199 :         "movq\t%%rcx, 8(%3)\n\t"
; 1200 :         "movq\t16(%1), %%rcx\n\t"
; 1201 :         "adcq\t16(%2), %%rcx\n\t"
; 1202 :         "movq\t%%rcx, 16(%3)\n\t"
; 1203 :         "movq\t24(%1), %%rcx\n\t"
; 1204 :         "adcq\t24(%2), %%rcx\n\t"
; 1205 :         "movq\t%%rcx, 24(%3)\n\t"
; 1206 :         "movq\t32(%1), %%rcx\n\t"
; 1207 :         "adcq\t32(%2), %%rcx\n\t"
; 1208 :         "movq\t%%rcx, 32(%3)\n\t"
; 1209 :         "movq\t40(%1), %%rcx\n\t"
; 1210 :         "adcq\t40(%2), %%rcx\n\t"
; 1211 :         "movq\t%%rcx, 40(%3)\n\t"
; 1212 :         "movq\t48(%1), %%rcx\n\t"
; 1213 :         "adcq\t48(%2), %%rcx\n\t"
; 1214 :         "movq\t%%rcx, 48(%3)\n\t"
; 1215 :         "movq\t56(%1), %%rcx\n\t"
; 1216 :         "adcq\t56(%2), %%rcx\n\t"
; 1217 :         "movq\t%%rcx, 56(%3)\n\t"
; 1218 :         "movq\t64(%1), %%rcx\n\t"
; 1219 :         "adcq\t64(%2), %%rcx\n\t"
; 1220 :         "movq\t%%rcx, 64(%3)\n\t"
; 1221 :         "movq\t72(%1), %%rcx\n\t"
; 1222 :         "adcq\t72(%2), %%rcx\n\t"
; 1223 :         "movq\t%%rcx, 72(%3)\n\t"
; 1224 :         "movq\t80(%1), %%rcx\n\t"
; 1225 :         "adcq\t80(%2), %%rcx\n\t"
; 1226 :         "movq\t%%rcx, 80(%3)\n\t"
; 1227 :         "movq\t88(%1), %%rcx\n\t"
; 1228 :         "adcq\t88(%2), %%rcx\n\t"
; 1229 :         "movq\t%%rcx, 88(%3)\n\t"
; 1230 :         "movq\t96(%1), %%rcx\n\t"
; 1231 :         "adcq\t96(%2), %%rcx\n\t"
; 1232 :         "movq\t%%rcx, 96(%3)\n\t"
; 1233 :         "movq\t104(%1), %%rcx\n\t"
; 1234 :         "adcq\t104(%2), %%rcx\n\t"
; 1235 :         "movq\t%%rcx, 104(%3)\n\t"
; 1236 :         "movq\t112(%1), %%rcx\n\t"
; 1237 :         "adcq\t112(%2), %%rcx\n\t"
; 1238 :         "movq\t%%rcx, 112(%3)\n\t"
; 1239 :         "movq\t120(%1), %%rcx\n\t"
; 1240 :         "adcq\t120(%2), %%rcx\n\t"
; 1241 :         "movq\t%%rcx, 120(%3)\n\t"
; 1242 :         "movq\t128(%1), %%rcx\n\t"
; 1243 :         "adcq\t128(%2), %%rcx\n\t"
; 1244 :         "movq\t%%rcx, 128(%3)\n\t"
; 1245 :         "movq\t136(%1), %%rcx\n\t"
; 1246 :         "adcq\t136(%2), %%rcx\n\t"
; 1247 :         "movq\t%%rcx, 136(%3)\n\t"
; 1248 :         "movq\t144(%1), %%rcx\n\t"
; 1249 :         "adcq\t144(%2), %%rcx\n\t"
; 1250 :         "movq\t%%rcx, 144(%3)\n\t"
; 1251 :         "movq\t152(%1), %%rcx\n\t"
; 1252 :         "adcq\t152(%2), %%rcx\n\t"
; 1253 :         "movq\t%%rcx, 152(%3)\n\t"
; 1254 :         "movq\t160(%1), %%rcx\n\t"
; 1255 :         "adcq\t160(%2), %%rcx\n\t"
; 1256 :         "movq\t%%rcx, 160(%3)\n\t"
; 1257 :         "movq\t168(%1), %%rcx\n\t"
; 1258 :         "adcq\t168(%2), %%rcx\n\t"
; 1259 :         "movq\t%%rcx, 168(%3)\n\t"
; 1260 :         "movq\t176(%1), %%rcx\n\t"
; 1261 :         "adcq\t176(%2), %%rcx\n\t"
; 1262 :         "movq\t%%rcx, 176(%3)\n\t"
; 1263 :         "movq\t184(%1), %%rcx\n\t"
; 1264 :         "adcq\t184(%2), %%rcx\n\t"
; 1265 :         "movq\t%%rcx, 184(%3)\n\t"
; 1266 :         "movq\t192(%1), %%rcx\n\t"
; 1267 :         "adcq\t192(%2), %%rcx\n\t"
; 1268 :         "movq\t%%rcx, 192(%3)\n\t"
; 1269 :         "movq\t200(%1), %%rcx\n\t"
; 1270 :         "adcq\t200(%2), %%rcx\n\t"
; 1271 :         "movq\t%%rcx, 200(%3)\n\t"
; 1272 :         "movq\t208(%1), %%rcx\n\t"
; 1273 :         "adcq\t208(%2), %%rcx\n\t"
; 1274 :         "movq\t%%rcx, 208(%3)\n\t"
; 1275 :         "movq\t216(%1), %%rcx\n\t"
; 1276 :         "adcq\t216(%2), %%rcx\n\t"
; 1277 :         "movq\t%%rcx, 216(%3)\n\t"
; 1278 :         "movq\t224(%1), %%rcx\n\t"
; 1279 :         "adcq\t224(%2), %%rcx\n\t"
; 1280 :         "movq\t%%rcx, 224(%3)\n\t"
; 1281 :         "movq\t232(%1), %%rcx\n\t"
; 1282 :         "adcq\t232(%2), %%rcx\n\t"
; 1283 :         "movq\t%%rcx, 232(%3)\n\t"
; 1284 :         "movq\t240(%1), %%rcx\n\t"
; 1285 :         "adcq\t240(%2), %%rcx\n\t"
; 1286 :         "movq\t%%rcx, 240(%3)\n\t"
; 1287 :         "movq\t248(%1), %%rcx\n\t"
; 1288 :         "adcq\t248(%2), %%rcx\n\t"
; 1289 :         "movq\t%%rcx, 248(%3)\n\t"
; 1290 :         "setc\t%0"
; 1291 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1292 :         :
; 1293 :         : "cc", "memory", "%rcx"
; 1294 : );
; 1295 : #else
; 1296 : #error unknown platform
; 1297 : #endif
; 1298 : #else
; 1299 : #error unknown compiler
; 1300 : #endif
; 1301 :     return (c);

	movzx	eax, BYTE PTR c$[rbp]

; 1302 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_32WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT_DIV
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT_DIV PROC				; COMDAT

; 652  :     {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 653  :         if (x == 0)

	cmp	DWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 654  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 655  : #ifdef _M_IX86
; 656  :         _UINT32_T pos;
; 657  : #ifdef _MSC_VER
; 658  :         _BitScanReverse(&pos, x);
; 659  : #elif defined(__GNUC__)
; 660  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 661  : #else
; 662  : #error unknown compiler
; 663  : #endif
; 664  : #elif defined(_M_X64)
; 665  : #ifdef _MSC_VER
; 666  :         _UINT32_T pos;
; 667  :         _BitScanReverse(&pos, x);

	mov	eax, DWORD PTR x$[rbp]
	bsr	eax, eax
	mov	DWORD PTR pos$[rbp], eax

; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 31
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 678  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_UNIT_DIV$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :     {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 624  :         if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);
; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);

	mov	rax, QWORD PTR x$[rbp]
	bsr	rax, rax
	mov	DWORD PTR pos$[rbp], eax

; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 63					; 0000003fH
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 649  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_UNIT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
pos$ = 4
x$ = 256
_LZCNT_ALT_32 PROC					; COMDAT

; 590  :     {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 591  :         if (x == 0)

	cmp	DWORD PTR x$[rbp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	mov	eax, DWORD PTR x$[rbp]
	bsr	eax, eax
	mov	DWORD PTR pos$[rbp], eax

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, 31
	sub	rcx, rax
	mov	rax, rcx
$LN1@LZCNT_ALT_:

; 602  :     }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:_LZCNT_ALT_32$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVREM_SINGLE_UNIT
_TEXT	SEGMENT
t$1 = 8
tv71 = 216
tv68 = 216
r$ = 256
u$ = 264
v$ = 272
q$ = 280
_DIVREM_SINGLE_UNIT PROC				; COMDAT

; 422  :     {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 423  : #ifdef _MSC_VER
; 424  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@DIVREM_SIN

; 425  :         {
; 426  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 427  :             _UINT64_T t = _FROMWORDTODWORD(r, u);

	mov	edx, DWORD PTR u$[rbp]
	mov	ecx, DWORD PTR r$[rbp]
	call	_FROMWORDTODWORD
	mov	QWORD PTR t$1[rbp], rax

; 428  :             *q = (_UINT32_T)(t / v);

	mov	eax, DWORD PTR v$[rbp]
	mov	QWORD PTR tv68[rbp], rax
	xor	edx, edx
	mov	rax, QWORD PTR t$1[rbp]
	mov	rcx, QWORD PTR tv68[rbp]
	div	rcx
	mov	rcx, QWORD PTR q$[rbp]
	mov	DWORD PTR [rcx], eax

; 429  :             return ((_UINT32_T)(t % v));

	mov	eax, DWORD PTR v$[rbp]
	mov	QWORD PTR tv71[rbp], rax
	xor	edx, edx
	mov	rax, QWORD PTR t$1[rbp]
	mov	rcx, QWORD PTR tv71[rbp]
	div	rcx
	mov	rax, rdx
	jmp	SHORT $LN1@DIVREM_SIN

; 430  :         }

	jmp	SHORT $LN3@DIVREM_SIN
$LN2@DIVREM_SIN:

; 431  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN4@DIVREM_SIN

; 432  :         {
; 433  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 434  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 435  :             // ・128bit 整数のデータ型が用意されていない。
; 436  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 437  :             *q = 0;

	mov	rax, QWORD PTR q$[rbp]
	mov	DWORD PTR [rax], 0

; 438  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@DIVREM_SIN

; 439  :         }

	jmp	SHORT $LN5@DIVREM_SIN
$LN4@DIVREM_SIN:

; 440  :         else
; 441  :         {
; 442  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 443  :             *q = 0;

	mov	rax, QWORD PTR q$[rbp]
	mov	DWORD PTR [rax], 0

; 444  :             return (0);

	xor	eax, eax
$LN5@DIVREM_SIN:
$LN3@DIVREM_SIN:
$LN1@DIVREM_SIN:

; 445  :         }
; 446  : #elif defined(__GNUC__)
; 447  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 448  :             __asm__("divl %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 449  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 450  :             __asm__("divq %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 451  :         else
; 452  :         {
; 453  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 454  :             *q = 0;
; 455  :             r = 0;
; 456  :         }
; 457  :         return (r);
; 458  : #else
; 459  : #error unknown compiler
; 460  : #endif
; 461  :     }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_DIVREM_SINGLE_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVREM_UNIT
_TEXT	SEGMENT
t$1 = 8
tv71 = 216
tv68 = 216
u_high$ = 256
u_low$ = 264
v$ = 272
r$ = 280
_DIVREM_UNIT PROC					; COMDAT

; 378  :     {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 379  : #ifdef _MSC_VER
; 380  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@DIVREM_UNI

; 381  :         {
; 382  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 383  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);

	mov	edx, DWORD PTR u_low$[rbp]
	mov	ecx, DWORD PTR u_high$[rbp]
	call	_FROMWORDTODWORD
	mov	QWORD PTR t$1[rbp], rax

; 384  :             *r = (_UINT32_T)(t % v);

	mov	eax, DWORD PTR v$[rbp]
	mov	QWORD PTR tv68[rbp], rax
	xor	edx, edx
	mov	rax, QWORD PTR t$1[rbp]
	mov	rcx, QWORD PTR tv68[rbp]
	div	rcx
	mov	rax, rdx
	mov	rcx, QWORD PTR r$[rbp]
	mov	DWORD PTR [rcx], eax

; 385  :             return ((_UINT32_T)(t / v));

	mov	eax, DWORD PTR v$[rbp]
	mov	QWORD PTR tv71[rbp], rax
	xor	edx, edx
	mov	rax, QWORD PTR t$1[rbp]
	mov	rcx, QWORD PTR tv71[rbp]
	div	rcx
	jmp	SHORT $LN1@DIVREM_UNI

; 386  :         }

	jmp	SHORT $LN3@DIVREM_UNI
$LN2@DIVREM_UNI:

; 387  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN4@DIVREM_UNI

; 388  :         {
; 389  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 390  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 391  :             // ・128bit 整数のデータ型が用意されていない。
; 392  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 393  :             *r = 0;

	mov	rax, QWORD PTR r$[rbp]
	mov	DWORD PTR [rax], 0

; 394  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@DIVREM_UNI

; 395  :         }

	jmp	SHORT $LN5@DIVREM_UNI
$LN4@DIVREM_UNI:

; 396  :         else
; 397  :         {
; 398  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 399  :             *r = 0;

	mov	rax, QWORD PTR r$[rbp]
	mov	DWORD PTR [rax], 0

; 400  :             return (0);

	xor	eax, eax
$LN5@DIVREM_UNI:
$LN3@DIVREM_UNI:
$LN1@DIVREM_UNI:

; 401  :         }
; 402  : #elif defined(__GNUC__)
; 403  :         __UNIT_TYPE q;
; 404  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 405  :             __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 406  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 407  :             __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 408  :         else
; 409  :         {
; 410  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 411  :             *r = 0;
; 412  :             q = 0;
; 413  :         }
; 414  :         return (q);
; 415  : #else
; 416  : #error unknown compiler
; 417  : #endif
; 418  :     }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
_DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLYX_UNIT_DIV
_TEXT	SEGMENT
u$ = 224
v$ = 232
w_hi$ = 240
_MULTIPLYX_UNIT_DIV PROC				; COMDAT

; 356  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 357  : #ifdef _MSC_VER
; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR u$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	imul	rax, rcx
	mov	rdx, QWORD PTR w_hi$[rbp]
	mov	rcx, rax
	call	_FROMDWORDTOWORD

; 359  : #elif defined(__GNUC__)
; 360  : #ifdef _M_IX86
; 361  :         _UINT32_T w_lo;
; 362  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 363  :         return (w_lo);
; 364  : #elif defined(_M_X64)
; 365  :         _UINT64_T w_lo;
; 366  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 367  :         return (w_lo);
; 368  : #else
; 369  : #error unknown platform
; 370  : #endif
; 371  : #else
; 372  : #error unknown compiler
; 373  : #endif
; 374  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_MULTIPLYX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLY_UNIT_DIV
_TEXT	SEGMENT
u$ = 224
v$ = 232
w_hi$ = 240
_MULTIPLY_UNIT_DIV PROC					; COMDAT

; 310  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 311  : #ifdef _MSC_VER
; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR u$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	imul	rax, rcx
	mov	rdx, QWORD PTR w_hi$[rbp]
	mov	rcx, rax
	call	_FROMDWORDTOWORD

; 313  : #elif defined(__GNUC__)
; 314  : #ifdef _M_IX86
; 315  :         _UINT32_T w_lo;
; 316  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 317  :         return (w_lo);
; 318  : #elif defined(_M_X64)
; 319  :         return (_umul128(u, v, w_hi));
; 320  : #else
; 321  : #error unknown platform
; 322  : #endif
; 323  : #else
; 324  : #error unknown compiler
; 325  : #endif
; 326  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_MULTIPLY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _SUBTRUCT_UNIT_DIV
_TEXT	SEGMENT
borrow$ = 224
u$ = 232
v$ = 240
w$ = 248
_SUBTRUCT_UNIT_DIV PROC					; COMDAT

; 274  :     {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 275  : #ifdef _MSC_VER
; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, DWORD PTR u$[rbp]
	movzx	ecx, BYTE PTR borrow$[rbp]
	add	cl, -1
	sbb	eax, DWORD PTR v$[rbp]
	setb	cl
	mov	rdx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rdx], eax
	movzx	eax, cl

; 277  : #elif defined(__GNUC__)
; 278  : #ifdef _M_IX86
; 279  :         return (_subborrow_u32(borrow, u, v, w));
; 280  : #elif defined(_M_X64)
; 281  :         return (_subborrow_u64(borrow, u, v, w));
; 282  : #else
; 283  : #error unknown platform
; 284  : #endif
; 285  : #else
; 286  : #error unknown compiler
; 287  : #endif
; 288  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_SUBTRUCT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT_DIV
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADDX_UNIT_DIV PROC					; COMDAT

; 246  :     {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 247  : #ifdef _MSC_VER
; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, DWORD PTR u$[rbp]
	movzx	ecx, BYTE PTR carry$[rbp]
	add	cl, -1
	adcx	eax, DWORD PTR v$[rbp]
	setb	cl
	mov	rdx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rdx], eax
	movzx	eax, cl

; 249  : #elif defined(__GNUC__)
; 250  : #ifdef _M_IX86
; 251  :         return (_addcarryx_u32(carry, u, v, w));
; 252  : #elif defined(_M_X64)
; 253  :         return (_addcarryx_u64(carry, u, v, w));
; 254  : #else
; 255  : #error unknown platform
; 256  : #endif
; 257  : #else
; 258  : #error unknown compiler
; 259  : #endif
; 260  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADDX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT_DIV
_TEXT	SEGMENT
carry$ = 224
u$ = 232
v$ = 240
w$ = 248
_ADD_UNIT_DIV PROC					; COMDAT

; 218  :     {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 219  : #ifdef _MSC_VER
; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	eax, DWORD PTR u$[rbp]
	movzx	ecx, BYTE PTR carry$[rbp]
	add	cl, -1
	adc	eax, DWORD PTR v$[rbp]
	setb	cl
	mov	rdx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rdx], eax
	movzx	eax, cl

; 221  : #elif defined(__GNUC__)
; 222  : #ifdef _M_IX86
; 223  :         return (_addcarry_u32(carry, u, v, w));
; 224  : #elif defined(_M_X64)
; 225  :         return (_addcarry_u64(carry, u, v, w));
; 226  : #else
; 227  : #error unknown platform
; 228  : #endif
; 229  : #else
; 230  : #error unknown compiler
; 231  : #endif
; 232  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ADD_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 224
result_high$ = 232
_FROMDWORDTOWORD PROC					; COMDAT

; 176  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, QWORD PTR value$[rbp]
	shr	rax, 32					; 00000020H
	mov	rcx, QWORD PTR result_high$[rbp]
	mov	DWORD PTR [rcx], eax

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR value$[rbp]

; 179  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMWORDTODWORD
_TEXT	SEGMENT
value_high$ = 224
value_low$ = 232
_FROMWORDTODWORD PROC					; COMDAT

; 171  :     {

	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR value_high$[rbp]
	shl	rax, 32					; 00000020H
	mov	ecx, DWORD PTR value_low$[rbp]
	or	rax, rcx

; 173  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT_DIV
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT_DIV PROC				; COMDAT

; 71   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 72   : #ifdef _M_IX86
; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 74   : #elif defined(_M_X64)
; 75   : #ifdef _MSC_VER
; 76   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR count$[rbp]
	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	ecx, eax
	rep movsd

; 77   : #elif defined(__GNUC__)
; 78   :         __movsq(d, s, count);
; 79   : #else
; 80   : #error unknown compiler
; 81   : #endif
; 82   : #else
; 83   : #error unknown platform
; 84   : #endif
; 85   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsq

; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI64Counter
_TEXT	SEGMENT
value$ = 224
AddToMULTI64Counter PROC				; COMDAT

; 359  :     {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
	call	__CheckForDebuggerJustMyCode

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lea	rax, OFFSET FLAT:statistics_info
	mov	ecx, DWORD PTR value$[rbp]
	lock add DWORD PTR [rax], ecx

; 361  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI32Counter
_TEXT	SEGMENT
value$ = 224
AddToMULTI32Counter PROC				; COMDAT

; 353  :     {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
	call	__CheckForDebuggerJustMyCode

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lea	rax, OFFSET FLAT:statistics_info+4
	mov	ecx, DWORD PTR value$[rbp]
	lock add DWORD PTR [rax], ecx

; 355  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToDIV64Counter
_TEXT	SEGMENT
value$ = 224
AddToDIV64Counter PROC					; COMDAT

; 347  :     {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
	call	__CheckForDebuggerJustMyCode

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

	lea	rax, OFFSET FLAT:statistics_info+8
	mov	ecx, DWORD PTR value$[rbp]
	lock add DWORD PTR [rax], ecx

; 349  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
AddToDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToDIV32Counter
_TEXT	SEGMENT
value$ = 224
AddToDIV32Counter PROC					; COMDAT

; 341  :     {

	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
	call	__CheckForDebuggerJustMyCode

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	lea	rax, OFFSET FLAT:statistics_info+12
	mov	ecx, DWORD PTR value$[rbp]
	lock add DWORD PTR [rax], ecx

; 343  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
AddToDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI64Counter
_TEXT	SEGMENT
IncrementMULTI64Counter PROC				; COMDAT

; 336  :     {

	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
	call	__CheckForDebuggerJustMyCode

; 337  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lea	rax, OFFSET FLAT:statistics_info
	lock inc DWORD PTR [rax]

; 338  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI32Counter
_TEXT	SEGMENT
IncrementMULTI32Counter PROC				; COMDAT

; 330  :     {

	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
	call	__CheckForDebuggerJustMyCode

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lea	rax, OFFSET FLAT:statistics_info+4
	lock inc DWORD PTR [rax]

; 332  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementDIV64Counter
_TEXT	SEGMENT
IncrementDIV64Counter PROC				; COMDAT

; 324  :     {

	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
	call	__CheckForDebuggerJustMyCode

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lea	rax, OFFSET FLAT:statistics_info+8
	lock inc DWORD PTR [rax]

; 326  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
IncrementDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementDIV32Counter
_TEXT	SEGMENT
IncrementDIV32Counter PROC				; COMDAT

; 318  :     {

	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__BB6D3116_pmc_uint_internal@h
	call	__CheckForDebuggerJustMyCode

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lea	rax, OFFSET FLAT:statistics_info+12
	lock inc DWORD PTR [rax]

; 320  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
IncrementDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_X_X
_TEXT	SEGMENT
nu$ = 8
nv$ = 40
result$ = 68
nq$ = 104
nr$ = 136
u_bit_count$15 = 168
v_bit_count$16 = 200
q_bit_count$17 = 232
nq_light_check_code$18 = 264
r_bit_count$19 = 296
nr_light_check_code$20 = 328
r_bit_count$21 = 360
nr_light_check_code$22 = 392
q_bit_count$23 = 424
r_bit_count$24 = 456
nq_light_check_code$25 = 488
nr_light_check_code$26 = 520
work_v_buf_code$27 = 552
work_v_buf_words$28 = 584
work_v_buf$29 = 616
r_bit_count$30 = 648
nr_light_check_code$31 = 680
work_v_buf_code$32 = 712
work_v_buf_words$33 = 744
work_v_buf$34 = 776
tv296 = 1176
tv241 = 1176
tv191 = 1176
tv152 = 1176
tv94 = 1176
tv80 = 1176
tv195 = 1184
tv156 = 1184
u$ = 1232
v$ = 1240
q$ = 1248
r$ = 1256
PMC_DivRem_X_X PROC					; COMDAT

; 1838 : {

$LN55:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1272				; 000004f8H
	lea	rbp, QWORD PTR [rsp+64]
	mov	rdi, rsp
	mov	ecx, 318				; 0000013eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1304]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 1839 :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_DivRem

; 1840 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 1841 :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_DivRem

; 1842 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 1843 :     if (r == NULL)

	cmp	QWORD PTR r$[rbp], 0
	jne	SHORT $LN4@PMC_DivRem

; 1844 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 1845 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 1846 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 1847 :     PMC_STATUS_CODE result;
; 1848 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_DivRem

; 1849 :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 1850 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_DivRem

; 1851 :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1852 :     if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@PMC_DivRem

; 1853 :     {
; 1854 :         // v が 0 である場合
; 1855 : 
; 1856 :         // 0 による除算はエラーで返す
; 1857 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1858 :     }
; 1859 :     NUMBER_HEADER* nq;
; 1860 :     NUMBER_HEADER* nr;
; 1861 :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN8@PMC_DivRem

; 1862 :     {
; 1863 :         // u が 0 である場合
; 1864 : 
; 1865 :         // q = 0, r = 0 を返す
; 1866 :         nq = q != NULL ? &number_zero : NULL;

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN51@PMC_DivRem
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR tv80[rbp], rax
	jmp	SHORT $LN52@PMC_DivRem
$LN51@PMC_DivRem:
	mov	QWORD PTR tv80[rbp], 0
$LN52@PMC_DivRem:
	mov	rax, QWORD PTR tv80[rbp]
	mov	QWORD PTR nq$[rbp], rax

; 1867 :         nr = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nr$[rbp], rax

; 1868 :     }

	jmp	$LN9@PMC_DivRem
$LN8@PMC_DivRem:

; 1869 :     else
; 1870 :     {
; 1871 :         // u が 0 ではない場合
; 1872 : 
; 1873 :         if (nv->IS_ONE)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@PMC_DivRem

; 1874 :         {
; 1875 :             // v が 1 である場合
; 1876 : 
; 1877 :             // q = u, r = 0 を返す
; 1878 :             if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN12@PMC_DivRem

; 1879 :             {
; 1880 :                 if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR nu$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_DivRem

; 1881 :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN14@PMC_DivRem:

; 1882 :             }

	jmp	SHORT $LN13@PMC_DivRem
$LN12@PMC_DivRem:

; 1883 :             else
; 1884 :                 nq = NULL;

	mov	QWORD PTR nq$[rbp], 0
$LN13@PMC_DivRem:

; 1885 :             nr = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nr$[rbp], rax

; 1886 :         }

	jmp	$LN11@PMC_DivRem
$LN10@PMC_DivRem:

; 1887 :         else
; 1888 :         {
; 1889 :             // u > 0 かつ v > 1 である場合
; 1890 : 
; 1891 :             // x と y の商・剰余を計算する
; 1892 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR u_bit_count$15[rbp], rax

; 1893 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR v_bit_count$16[rbp], rax

; 1894 :             if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$16[rbp]
	cmp	QWORD PTR u_bit_count$15[rbp], rax
	jae	SHORT $LN15@PMC_DivRem

; 1895 :             {
; 1896 :                 // 明らかに u < v である場合
; 1897 : 
; 1898 :                 // q = 0, r = u を返す。
; 1899 :                 nq = q != NULL ? &number_zero : NULL;

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN53@PMC_DivRem
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR tv94[rbp], rax
	jmp	SHORT $LN54@PMC_DivRem
$LN53@PMC_DivRem:
	mov	QWORD PTR tv94[rbp], 0
$LN54@PMC_DivRem:
	mov	rax, QWORD PTR tv94[rbp]
	mov	QWORD PTR nq$[rbp], rax

; 1900 :                 if ((result = DuplicateNumber(nu, &nr)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nr$[rbp]
	mov	rcx, QWORD PTR nu$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN17@PMC_DivRem

; 1901 :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN17@PMC_DivRem:

; 1902 :             }

	jmp	$LN16@PMC_DivRem
$LN15@PMC_DivRem:

; 1903 :             else if (v_bit_count <= sizeof(__UNIT_TYPE_DIV) * 8)

	cmp	QWORD PTR v_bit_count$16[rbp], 32	; 00000020H
	ja	$LN18@PMC_DivRem

; 1904 :             {
; 1905 :                 // 除数が 1 ワードで表現できる場合
; 1906 : 
; 1907 :                 if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	$LN20@PMC_DivRem

; 1908 :                 {
; 1909 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	rax, QWORD PTR v_bit_count$16[rbp]
	mov	rcx, QWORD PTR u_bit_count$15[rbp]
	sub	rcx, rax
	mov	rax, rcx
	add	rax, 65					; 00000041H
	mov	QWORD PTR q_bit_count$17[rbp], rax

; 1910 :                     __UNIT_TYPE nq_light_check_code;
; 1911 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nq_light_check_code$18[rbp]
	mov	rdx, QWORD PTR q_bit_count$17[rbp]
	lea	rcx, QWORD PTR nq$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN22@PMC_DivRem

; 1912 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN22@PMC_DivRem:

; 1913 :                     __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE_DIV) * 8;

	mov	QWORD PTR r_bit_count$19[rbp], 32	; 00000020H

; 1914 :                     __UNIT_TYPE nr_light_check_code;
; 1915 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nr_light_check_code$20[rbp]
	mov	rdx, QWORD PTR r_bit_count$19[rbp]
	lea	rcx, QWORD PTR nr$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN23@PMC_DivRem

; 1916 :                     {
; 1917 :                         DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1918 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN23@PMC_DivRem:

; 1919 :                     }
; 1920 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)nv->BLOCK[0], (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	eax, 8
	imul	rax, rax, 0
	mov	QWORD PTR tv152[rbp], rax
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rdx, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rdx+16]
	shl	rdx, 3
	mov	QWORD PTR tv156[rbp], rdx
	xor	edx, edx
	mov	r8, QWORD PTR tv156[rbp]
	mov	rax, r8
	mov	r8d, 4
	div	r8
	mov	rdx, QWORD PTR nr$[rbp]
	mov	rdx, QWORD PTR [rdx+64]
	mov	QWORD PTR [rsp+32], rdx
	mov	rdx, QWORD PTR nq$[rbp]
	mov	r9, QWORD PTR [rdx+64]
	mov	rdx, QWORD PTR tv152[rbp]
	mov	r8d, DWORD PTR [rcx+rdx]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	DivRem_X_1W

; 1921 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nq_light_check_code$18[rbp]
	mov	rax, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN24@PMC_DivRem

; 1922 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN24@PMC_DivRem:

; 1923 :                     if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nr_light_check_code$20[rbp]
	mov	rax, QWORD PTR nr$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN25@PMC_DivRem

; 1924 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN25@PMC_DivRem:

; 1925 :                     CommitNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp]
	call	CommitNumber

; 1926 :                     CommitNumber(nr);

	mov	rcx, QWORD PTR nr$[rbp]
	call	CommitNumber

; 1927 :                     if (nq->IS_ZERO)

	mov	rax, QWORD PTR nq$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN26@PMC_DivRem

; 1928 :                     {
; 1929 :                         DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1930 :                         nq = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nq$[rbp], rax
$LN26@PMC_DivRem:

; 1931 :                     }
; 1932 :                     if (nr->IS_ZERO)

	mov	rax, QWORD PTR nr$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN27@PMC_DivRem

; 1933 :                     {
; 1934 :                         DeallocateNumber(nr);

	mov	rcx, QWORD PTR nr$[rbp]
	call	DeallocateNumber

; 1935 :                         nr = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nr$[rbp], rax
$LN27@PMC_DivRem:

; 1936 :                     }
; 1937 :                 }

	jmp	$LN21@PMC_DivRem
$LN20@PMC_DivRem:

; 1938 :                 else
; 1939 :                 {
; 1940 :                     __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE_DIV) * 8;

	mov	QWORD PTR r_bit_count$21[rbp], 32	; 00000020H

; 1941 :                     __UNIT_TYPE nr_light_check_code;
; 1942 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nr_light_check_code$22[rbp]
	mov	rdx, QWORD PTR r_bit_count$21[rbp]
	lea	rcx, QWORD PTR nr$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN28@PMC_DivRem

; 1943 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN28@PMC_DivRem:

; 1944 :                     ((__UNIT_TYPE_DIV*)nr->BLOCK)[0] = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)nv->BLOCK[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	QWORD PTR tv191[rbp], rax
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rdx, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rdx+16]
	shl	rdx, 3
	mov	QWORD PTR tv195[rbp], rdx
	xor	edx, edx
	mov	r8, QWORD PTR tv195[rbp]
	mov	rax, r8
	mov	r8d, 4
	div	r8
	mov	rdx, QWORD PTR tv191[rbp]
	mov	r8d, DWORD PTR [rcx+rdx]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	Rem_X_1W
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR nr$[rbp]
	mov	rdx, QWORD PTR [rdx+64]
	mov	DWORD PTR [rcx+rdx], eax

; 1945 :                     nq = NULL;

	mov	QWORD PTR nq$[rbp], 0

; 1946 :                     if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nr_light_check_code$22[rbp]
	mov	rax, QWORD PTR nr$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN29@PMC_DivRem

; 1947 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN29@PMC_DivRem:

; 1948 :                     CommitNumber(nr);

	mov	rcx, QWORD PTR nr$[rbp]
	call	CommitNumber

; 1949 :                     if (nr->IS_ZERO)

	mov	rax, QWORD PTR nr$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN30@PMC_DivRem

; 1950 :                     {
; 1951 :                         DeallocateNumber(nr);

	mov	rcx, QWORD PTR nr$[rbp]
	call	DeallocateNumber

; 1952 :                         nr = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nr$[rbp], rax
$LN30@PMC_DivRem:
$LN21@PMC_DivRem:

; 1953 :                     }
; 1954 :                 }
; 1955 :             }

	jmp	$LN19@PMC_DivRem
$LN18@PMC_DivRem:

; 1956 :             else
; 1957 :             {
; 1958 :                 // 除数を表現するのに 2 ワード以上必要な場合
; 1959 :                 if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	$LN31@PMC_DivRem

; 1960 :                 {
; 1961 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	rax, QWORD PTR v_bit_count$16[rbp]
	mov	rcx, QWORD PTR u_bit_count$15[rbp]
	sub	rcx, rax
	mov	rax, rcx
	add	rax, 65					; 00000041H
	mov	QWORD PTR q_bit_count$23[rbp], rax

; 1962 :                     __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	rax, QWORD PTR u_bit_count$15[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR r_bit_count$24[rbp], rax

; 1963 :                     __UNIT_TYPE nq_light_check_code;
; 1964 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nq_light_check_code$25[rbp]
	mov	rdx, QWORD PTR q_bit_count$23[rbp]
	lea	rcx, QWORD PTR nq$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN33@PMC_DivRem

; 1965 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN33@PMC_DivRem:

; 1966 :                     __UNIT_TYPE nr_light_check_code;
; 1967 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nr_light_check_code$26[rbp]
	mov	rdx, QWORD PTR r_bit_count$24[rbp]
	lea	rcx, QWORD PTR nr$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN34@PMC_DivRem

; 1968 :                     {
; 1969 :                         DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1970 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN34@PMC_DivRem:

; 1971 :                     }
; 1972 :                     __UNIT_TYPE work_v_buf_code;
; 1973 :                     __UNIT_TYPE work_v_buf_words;
; 1974 :                     __UNIT_TYPE_DIV* work_v_buf = (__UNIT_TYPE_DIV*)AllocateBlock(nv->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	mov	rax, QWORD PTR nv$[rbp]
	imul	rax, QWORD PTR [rax+16], 64		; 00000040H
	lea	r8, QWORD PTR work_v_buf_code$27[rbp]
	lea	rdx, QWORD PTR work_v_buf_words$28[rbp]
	mov	rcx, rax
	call	AllocateBlock
	mov	QWORD PTR work_v_buf$29[rbp], rax

; 1975 :                     if (work_v_buf == NULL)

	cmp	QWORD PTR work_v_buf$29[rbp], 0
	jne	SHORT $LN35@PMC_DivRem

; 1976 :                     {
; 1977 :                         DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1978 :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@PMC_DivRem
$LN35@PMC_DivRem:

; 1979 :                     }
; 1980 : 
; 1981 :                     (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	QWORD PTR tv241[rbp], rax
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	shl	rcx, 3
	xor	edx, edx
	mov	rax, rcx
	mov	ecx, 4
	div	rcx
	mov	rcx, QWORD PTR nr$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR work_v_buf$29[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv241[rbp]
	mov	r9, rcx
	mov	rcx, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rcx+64]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	QWORD PTR fp_DivRem_X_X

; 1982 :                     if ((result = CheckBlockLight((__UNIT_TYPE*)work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$27[rbp]
	mov	rcx, QWORD PTR work_v_buf$29[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN36@PMC_DivRem

; 1983 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN36@PMC_DivRem:

; 1984 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nq_light_check_code$25[rbp]
	mov	rax, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN37@PMC_DivRem

; 1985 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN37@PMC_DivRem:

; 1986 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nq_light_check_code$25[rbp]
	mov	rax, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN38@PMC_DivRem

; 1987 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN38@PMC_DivRem:

; 1988 :                     DeallocateBlock((__UNIT_TYPE*)work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$28[rbp]
	mov	rcx, QWORD PTR work_v_buf$29[rbp]
	call	DeallocateBlock

; 1989 :                     CommitNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp]
	call	CommitNumber

; 1990 :                     CommitNumber(nr);

	mov	rcx, QWORD PTR nr$[rbp]
	call	CommitNumber

; 1991 :                     if (nq->IS_ZERO)

	mov	rax, QWORD PTR nq$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN39@PMC_DivRem

; 1992 :                     {
; 1993 :                         DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1994 :                         nq = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nq$[rbp], rax
$LN39@PMC_DivRem:

; 1995 :                     }
; 1996 :                     if (nr->IS_ZERO)

	mov	rax, QWORD PTR nr$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN40@PMC_DivRem

; 1997 :                     {
; 1998 :                         DeallocateNumber(nr);

	mov	rcx, QWORD PTR nr$[rbp]
	call	DeallocateNumber

; 1999 :                         nr = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nr$[rbp], rax
$LN40@PMC_DivRem:

; 2000 :                     }
; 2001 :                 }

	jmp	$LN32@PMC_DivRem
$LN31@PMC_DivRem:

; 2002 :                 else
; 2003 :                 {
; 2004 :                     __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	rax, QWORD PTR u_bit_count$15[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR r_bit_count$30[rbp], rax

; 2005 :                     __UNIT_TYPE nr_light_check_code;
; 2006 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nr_light_check_code$31[rbp]
	mov	rdx, QWORD PTR r_bit_count$30[rbp]
	lea	rcx, QWORD PTR nr$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN41@PMC_DivRem

; 2007 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN41@PMC_DivRem:

; 2008 :                     __UNIT_TYPE work_v_buf_code;
; 2009 :                     __UNIT_TYPE work_v_buf_words;
; 2010 :                     __UNIT_TYPE_DIV* work_v_buf = (__UNIT_TYPE_DIV*)AllocateBlock(nv->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	mov	rax, QWORD PTR nv$[rbp]
	imul	rax, QWORD PTR [rax+16], 64		; 00000040H
	lea	r8, QWORD PTR work_v_buf_code$32[rbp]
	lea	rdx, QWORD PTR work_v_buf_words$33[rbp]
	mov	rcx, rax
	call	AllocateBlock
	mov	QWORD PTR work_v_buf$34[rbp], rax

; 2011 :                     if (work_v_buf == NULL)

	cmp	QWORD PTR work_v_buf$34[rbp], 0
	jne	SHORT $LN42@PMC_DivRem

; 2012 :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@PMC_DivRem
$LN42@PMC_DivRem:

; 2013 : 
; 2014 :                     (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, NULL, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	QWORD PTR tv296[rbp], rax
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	shl	rcx, 3
	xor	edx, edx
	mov	rax, rcx
	mov	ecx, 4
	div	rcx
	mov	rcx, QWORD PTR nr$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], 0
	mov	rcx, QWORD PTR work_v_buf$34[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv296[rbp]
	mov	r9, rcx
	mov	rcx, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rcx+64]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	QWORD PTR fp_DivRem_X_X

; 2015 :                     nq = NULL;

	mov	QWORD PTR nq$[rbp], 0

; 2016 :                     if ((result = CheckBlockLight((__UNIT_TYPE*)work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$32[rbp]
	mov	rcx, QWORD PTR work_v_buf$34[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN43@PMC_DivRem

; 2017 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN43@PMC_DivRem:

; 2018 :                     if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nr_light_check_code$31[rbp]
	mov	rax, QWORD PTR nr$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN44@PMC_DivRem

; 2019 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN44@PMC_DivRem:

; 2020 :                     DeallocateBlock((__UNIT_TYPE*)work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$33[rbp]
	mov	rcx, QWORD PTR work_v_buf$34[rbp]
	call	DeallocateBlock

; 2021 :                     CommitNumber(nr);

	mov	rcx, QWORD PTR nr$[rbp]
	call	CommitNumber

; 2022 :                     if (nr->IS_ZERO)

	mov	rax, QWORD PTR nr$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN45@PMC_DivRem

; 2023 :                     {
; 2024 :                         DeallocateNumber(nr);

	mov	rcx, QWORD PTR nr$[rbp]
	call	DeallocateNumber

; 2025 :                         nr = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nr$[rbp], rax
$LN45@PMC_DivRem:
$LN32@PMC_DivRem:
$LN19@PMC_DivRem:
$LN16@PMC_DivRem:
$LN11@PMC_DivRem:
$LN9@PMC_DivRem:

; 2026 :                     }
; 2027 :                 }
; 2028 :             }
; 2029 :         }
; 2030 :     }
; 2031 :     if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN46@PMC_DivRem

; 2032 :         *q = (PMC_HANDLE_UINT)nq;

	mov	rax, QWORD PTR q$[rbp]
	mov	rcx, QWORD PTR nq$[rbp]
	mov	QWORD PTR [rax], rcx
$LN46@PMC_DivRem:

; 2033 :     *r = (PMC_HANDLE_UINT)nr;

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR nr$[rbp]
	mov	QWORD PTR [rax], rcx

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN47@PMC_DivRem

; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR q$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN48@PMC_DivRem

; 2038 :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_DivRem
$LN48@PMC_DivRem:
$LN47@PMC_DivRem:

; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN49@PMC_DivRem

; 2041 :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_DivRem
$LN49@PMC_DivRem:

; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 2044 : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:PMC_DivRem_X_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+1208]
	pop	rdi
	pop	rbp
	ret	0
PMC_DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_X_L
_TEXT	SEGMENT
nu$ = 8
result$ = 36
nq$ = 72
u_bit_count$18 = 104
v_hi$19 = 132
v_lo$20 = 164
v_bit_count$21 = 200
q_bit_count$22 = 232
nq_light_check_code$23 = 264
r_buf$24 = 292
r_buf$25 = 324
v_bit_count$26 = 360
r_lo$27 = 392
r_hi$28 = 424
q_bit_count$29 = 456
r_bit_count$30 = 488
nq_light_check_code$31 = 520
v_buf$32 = 552
work_v_buf$33 = 584
r_buf_code$34 = 616
r_buf_words$35 = 648
r_buf$36 = 680
r_bit_count$37 = 712
v_buf$38 = 744
work_v_buf$39 = 776
r_buf_code$40 = 808
r_buf_words$41 = 840
r_buf$42 = 872
u_bit_count$43 = 904
v_bit_count$44 = 936
q_bit_count$45 = 968
nq_light_check_code$46 = 1000
r_buf$47 = 1028
r_buf$48 = 1060
$T49 = 1668
tv313 = 1688
tv188 = 1688
tv175 = 1688
tv94 = 1688
tv75 = 1688
u$ = 1728
v$ = 1736
q$ = 1744
r$ = 1752
PMC_DivRem_X_L PROC					; COMDAT

; 1605 : {

$LN78:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1768				; 000006e8H
	lea	rbp, QWORD PTR [rsp+64]
	mov	rdi, rsp
	mov	ecx, 442				; 000001baH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1800]
	mov	BYTE PTR $T49[rbp], 0
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 1606 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(v))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_DivRem

; 1607 :     {
; 1608 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1609 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 1610 :     }
; 1611 :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_DivRem

; 1612 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 1613 :     if (r == NULL)

	cmp	QWORD PTR r$[rbp], 0
	jne	SHORT $LN4@PMC_DivRem

; 1614 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 1615 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 1616 :     PMC_STATUS_CODE result;
; 1617 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_DivRem

; 1618 :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 1619 :     if (v == 0)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN6@PMC_DivRem

; 1620 :     {
; 1621 :         // v が 0 である場合
; 1622 : 
; 1623 :         // 0 による除算はエラーで返す
; 1624 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1625 :     }
; 1626 :     NUMBER_HEADER* nq;
; 1627 :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@PMC_DivRem

; 1628 :     {
; 1629 :         // x が 0 である場合
; 1630 : 
; 1631 :         // q = 0, r = 0 を返す
; 1632 :         nq = q != NULL ? &number_zero : NULL;

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN49@PMC_DivRem
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR tv75[rbp], rax
	jmp	SHORT $LN50@PMC_DivRem
$LN49@PMC_DivRem:
	mov	QWORD PTR tv75[rbp], 0
$LN50@PMC_DivRem:
	mov	BYTE PTR $T49[rbp], 1
	mov	rax, QWORD PTR tv75[rbp]
	mov	QWORD PTR nq$[rbp], rax

; 1633 :         *r = 0;

	mov	rax, QWORD PTR r$[rbp]
	mov	QWORD PTR [rax], 0

; 1634 :     }

	jmp	$LN8@PMC_DivRem
$LN7@PMC_DivRem:

; 1635 :     else
; 1636 :     {
; 1637 :         // u が 0 ではない場合
; 1638 : 
; 1639 :         if (v == 1)

	cmp	QWORD PTR v$[rbp], 1
	jne	SHORT $LN9@PMC_DivRem

; 1640 :         {
; 1641 :             // v が 1 である場合
; 1642 : 
; 1643 :             // q = u, r = 0 を返す
; 1644 :             if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN11@PMC_DivRem

; 1645 :             {
; 1646 :                 if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	mov	BYTE PTR $T49[rbp], 1
	lea	rdx, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR nu$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_DivRem

; 1647 :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN13@PMC_DivRem:

; 1648 :             }

	jmp	SHORT $LN12@PMC_DivRem
$LN11@PMC_DivRem:

; 1649 :             else
; 1650 :                 nq = NULL;

	mov	BYTE PTR $T49[rbp], 1
	mov	QWORD PTR nq$[rbp], 0
$LN12@PMC_DivRem:

; 1651 :             *r = 0;

	mov	rax, QWORD PTR r$[rbp]
	mov	QWORD PTR [rax], 0

; 1652 :         }

	jmp	$LN10@PMC_DivRem
$LN9@PMC_DivRem:

; 1653 :         else
; 1654 :         {
; 1655 :             // u > 0 かつ v > 1 である場合
; 1656 : 
; 1657 :             // u と v の商・剰余を計算する
; 1658 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR u_bit_count$18[rbp], rax

; 1659 :             if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))

	xor	eax, eax
	cmp	eax, 1
	je	$LN14@PMC_DivRem

; 1660 :             {
; 1661 :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 1662 :                 _UINT32_T v_hi;
; 1663 :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	rdx, QWORD PTR v_hi$19[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	_FROMDWORDTOWORD
	mov	DWORD PTR v_lo$20[rbp], eax

; 1664 :                 if (v_hi == 0)

	cmp	DWORD PTR v_hi$19[rbp], 0
	jne	$LN16@PMC_DivRem

; 1665 :                 {
; 1666 :                     // v の値が 32bit で表現可能な場合
; 1667 :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR v_lo$20[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$21[rbp], rax

; 1668 :                     if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$21[rbp]
	cmp	QWORD PTR u_bit_count$18[rbp], rax
	jae	SHORT $LN18@PMC_DivRem

; 1669 :                     {
; 1670 :                         // 明らかに u < v である場合
; 1671 : 
; 1672 :                         // q = 0, r = u を返す。
; 1673 :                         nq = q != NULL ? &number_zero : NULL;

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN51@PMC_DivRem
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR tv94[rbp], rax
	jmp	SHORT $LN52@PMC_DivRem
$LN51@PMC_DivRem:
	mov	QWORD PTR tv94[rbp], 0
$LN52@PMC_DivRem:
	mov	BYTE PTR $T49[rbp], 1
	mov	rax, QWORD PTR tv94[rbp]
	mov	QWORD PTR nq$[rbp], rax

; 1674 :                         *r = nu->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rdx, QWORD PTR r$[rbp]
	mov	rax, QWORD PTR [rax+rcx]
	mov	QWORD PTR [rdx], rax

; 1675 :                     }

	jmp	$LN19@PMC_DivRem
$LN18@PMC_DivRem:

; 1676 :                     else
; 1677 :                     {
; 1678 :                         if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	$LN20@PMC_DivRem

; 1679 :                         {
; 1680 :                             __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	rax, QWORD PTR v_bit_count$21[rbp]
	mov	rcx, QWORD PTR u_bit_count$18[rbp]
	sub	rcx, rax
	mov	rax, rcx
	add	rax, 65					; 00000041H
	mov	QWORD PTR q_bit_count$22[rbp], rax

; 1681 :                             __UNIT_TYPE nq_light_check_code;
; 1682 :                             if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	mov	BYTE PTR $T49[rbp], 1
	lea	r8, QWORD PTR nq_light_check_code$23[rbp]
	mov	rdx, QWORD PTR q_bit_count$22[rbp]
	lea	rcx, QWORD PTR nq$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN22@PMC_DivRem

; 1683 :                                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN22@PMC_DivRem:

; 1684 :                             __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR r_buf$24[rbp], 0

; 1685 :                             DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_lo, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN59@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN59@PMC_DivRem:
	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	lea	rcx, QWORD PTR r_buf$24[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR nq$[rbp]
	mov	r9, QWORD PTR [rcx+64]
	mov	r8d, DWORD PTR v_lo$20[rbp]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	DivRem_X_1W

; 1686 :                             if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN60@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN60@PMC_DivRem:
	mov	rdx, QWORD PTR nq_light_check_code$23[rbp]
	mov	rax, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN23@PMC_DivRem

; 1687 :                                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN23@PMC_DivRem:

; 1688 :                             CommitNumber(nq);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN61@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN61@PMC_DivRem:
	mov	rcx, QWORD PTR nq$[rbp]
	call	CommitNumber

; 1689 :                             *r = r_buf;

	mov	eax, DWORD PTR r_buf$24[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax

; 1690 :                             if (nq->IS_ZERO)

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN62@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN62@PMC_DivRem:
	mov	rax, QWORD PTR nq$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN24@PMC_DivRem

; 1691 :                             {
; 1692 :                                 DeallocateNumber(nq);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN63@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN63@PMC_DivRem:
	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1693 :                                 nq = &number_zero;

	mov	BYTE PTR $T49[rbp], 1
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nq$[rbp], rax
$LN24@PMC_DivRem:

; 1694 :                             }
; 1695 :                         }

	jmp	SHORT $LN21@PMC_DivRem
$LN20@PMC_DivRem:

; 1696 :                         else
; 1697 :                         {
; 1698 :                             __UNIT_TYPE_DIV r_buf = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_lo);

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	r8d, DWORD PTR v_lo$20[rbp]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	Rem_X_1W
	mov	DWORD PTR r_buf$25[rbp], eax

; 1699 :                             nq = NULL;

	mov	BYTE PTR $T49[rbp], 1
	mov	QWORD PTR nq$[rbp], 0

; 1700 :                             *r = r_buf;

	mov	eax, DWORD PTR r_buf$25[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax
$LN21@PMC_DivRem:
$LN19@PMC_DivRem:

; 1701 :                         }
; 1702 :                     }
; 1703 :                 }

	jmp	$LN17@PMC_DivRem
$LN16@PMC_DivRem:

; 1704 :                 else
; 1705 :                 {
; 1706 :                     // v の値が 32bit では表現できない場合
; 1707 :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	ecx, DWORD PTR v_hi$19[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$26[rbp], rax

; 1708 :                     if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$26[rbp]
	cmp	QWORD PTR u_bit_count$18[rbp], rax
	jae	$LN25@PMC_DivRem

; 1709 :                     {
; 1710 :                         // 明らかに u < v である場合
; 1711 : 
; 1712 :                         // q = 0, r = u を返す。
; 1713 :                         nq = q != NULL ? &number_zero : NULL;

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN53@PMC_DivRem
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR tv175[rbp], rax
	jmp	SHORT $LN54@PMC_DivRem
$LN53@PMC_DivRem:
	mov	QWORD PTR tv175[rbp], 0
$LN54@PMC_DivRem:
	mov	BYTE PTR $T49[rbp], 1
	mov	rax, QWORD PTR tv175[rbp]
	mov	QWORD PTR nq$[rbp], rax

; 1714 :                         if (sizeof(v) == sizeof(__UNIT_TYPE))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN27@PMC_DivRem

; 1715 :                             *r = nu->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rdx, QWORD PTR r$[rbp]
	mov	rax, QWORD PTR [rax+rcx]
	mov	QWORD PTR [rdx], rax
	jmp	SHORT $LN28@PMC_DivRem
$LN27@PMC_DivRem:

; 1716 :                         else
; 1717 :                         {
; 1718 :                             __UNIT_TYPE r_lo = nu->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax+rcx]
	mov	QWORD PTR r_lo$27[rbp], rax

; 1719 :                             __UNIT_TYPE r_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] : 0;

	mov	rax, QWORD PTR nu$[rbp]
	cmp	QWORD PTR [rax+16], 1
	jbe	SHORT $LN55@PMC_DivRem
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax+rcx]
	mov	QWORD PTR tv188[rbp], rax
	jmp	SHORT $LN56@PMC_DivRem
$LN55@PMC_DivRem:
	mov	QWORD PTR tv188[rbp], 0
$LN56@PMC_DivRem:
	mov	rax, QWORD PTR tv188[rbp]
	mov	QWORD PTR r_hi$28[rbp], rax

; 1720 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo);

	mov	edx, DWORD PTR r_lo$27[rbp]
	mov	ecx, DWORD PTR r_hi$28[rbp]
	call	_FROMWORDTODWORD
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax
$LN28@PMC_DivRem:

; 1721 :                         }
; 1722 :                     }

	jmp	$LN26@PMC_DivRem
$LN25@PMC_DivRem:

; 1723 :                     else
; 1724 :                     {
; 1725 :                         if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	$LN29@PMC_DivRem

; 1726 :                         {
; 1727 :                             __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	rax, QWORD PTR v_bit_count$26[rbp]
	mov	rcx, QWORD PTR u_bit_count$18[rbp]
	sub	rcx, rax
	mov	rax, rcx
	add	rax, 65					; 00000041H
	mov	QWORD PTR q_bit_count$29[rbp], rax

; 1728 :                             __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	rax, QWORD PTR u_bit_count$18[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR r_bit_count$30[rbp], rax

; 1729 :                             __UNIT_TYPE nq_light_check_code;
; 1730 :                             if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	mov	BYTE PTR $T49[rbp], 1
	lea	r8, QWORD PTR nq_light_check_code$31[rbp]
	mov	rdx, QWORD PTR q_bit_count$29[rbp]
	lea	rcx, QWORD PTR nq$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN31@PMC_DivRem

; 1731 :                                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN31@PMC_DivRem:

; 1732 :                             __UNIT_TYPE_DIV v_buf[] = { v_lo, v_hi };

	mov	eax, DWORD PTR v_lo$20[rbp]
	mov	DWORD PTR v_buf$32[rbp], eax
	mov	eax, DWORD PTR v_hi$19[rbp]
	mov	DWORD PTR v_buf$32[rbp+4], eax

; 1733 :                             __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };

	mov	DWORD PTR work_v_buf$33[rbp], 0
	mov	DWORD PTR work_v_buf$33[rbp+4], 0

; 1734 :                             __UNIT_TYPE r_buf_code;
; 1735 :                             __UNIT_TYPE r_buf_words;
; 1736 :                             __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(r_bit_count, &r_buf_words, &r_buf_code);

	lea	r8, QWORD PTR r_buf_code$34[rbp]
	lea	rdx, QWORD PTR r_buf_words$35[rbp]
	mov	rcx, QWORD PTR r_bit_count$30[rbp]
	call	AllocateBlock
	mov	QWORD PTR r_buf$36[rbp], rax

; 1737 :                             if (r_buf == NULL)

	cmp	QWORD PTR r_buf$36[rbp], 0
	jne	SHORT $LN32@PMC_DivRem

; 1738 :                             {
; 1739 :                                 DeallocateNumber(nq);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN64@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN64@PMC_DivRem:
	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1740 :                                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@PMC_DivRem
$LN32@PMC_DivRem:

; 1741 :                             }
; 1742 :                             (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, r_buf);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN65@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN65@PMC_DivRem:
	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	rcx, QWORD PTR r_buf$36[rbp]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rsp+40], rcx
	lea	rcx, QWORD PTR work_v_buf$33[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 2
	lea	r8, QWORD PTR v_buf$32[rbp]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	QWORD PTR fp_DivRem_X_X

; 1743 :                             if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN66@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN66@PMC_DivRem:
	mov	rdx, QWORD PTR nq_light_check_code$31[rbp]
	mov	rax, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN33@PMC_DivRem

; 1744 :                                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN33@PMC_DivRem:

; 1745 :                             if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR r_buf_code$34[rbp]
	mov	rcx, QWORD PTR r_buf$36[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN34@PMC_DivRem

; 1746 :                                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN34@PMC_DivRem:

; 1747 :                             CommitNumber(nq);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN67@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN67@PMC_DivRem:
	mov	rcx, QWORD PTR nq$[rbp]
	call	CommitNumber

; 1748 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR r_buf$36[rbp]
	mov	edx, DWORD PTR [rdx+rax]
	mov	rax, QWORD PTR r_buf$36[rbp]
	mov	ecx, DWORD PTR [rax+rcx]
	call	_FROMWORDTODWORD
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax

; 1749 :                             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	rdx, QWORD PTR r_buf_words$35[rbp]
	mov	rcx, QWORD PTR r_buf$36[rbp]
	call	DeallocateBlock

; 1750 :                             if (nq->IS_ZERO)

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN68@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN68@PMC_DivRem:
	mov	rax, QWORD PTR nq$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN35@PMC_DivRem

; 1751 :                             {
; 1752 :                                 DeallocateNumber(nq);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN69@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN69@PMC_DivRem:
	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1753 :                                 nq = &number_zero;

	mov	BYTE PTR $T49[rbp], 1
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nq$[rbp], rax
$LN35@PMC_DivRem:

; 1754 :                             }
; 1755 :                         }

	jmp	$LN30@PMC_DivRem
$LN29@PMC_DivRem:

; 1756 :                         else
; 1757 :                         {
; 1758 :                             __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	rax, QWORD PTR u_bit_count$18[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR r_bit_count$37[rbp], rax

; 1759 :                             __UNIT_TYPE_DIV v_buf[] = { v_lo, v_hi };

	mov	eax, DWORD PTR v_lo$20[rbp]
	mov	DWORD PTR v_buf$38[rbp], eax
	mov	eax, DWORD PTR v_hi$19[rbp]
	mov	DWORD PTR v_buf$38[rbp+4], eax

; 1760 :                             __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };

	mov	DWORD PTR work_v_buf$39[rbp], 0
	mov	DWORD PTR work_v_buf$39[rbp+4], 0

; 1761 :                             __UNIT_TYPE r_buf_code;
; 1762 :                             __UNIT_TYPE r_buf_words;
; 1763 :                             __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(r_bit_count, &r_buf_words, &r_buf_code);

	lea	r8, QWORD PTR r_buf_code$40[rbp]
	lea	rdx, QWORD PTR r_buf_words$41[rbp]
	mov	rcx, QWORD PTR r_bit_count$37[rbp]
	call	AllocateBlock
	mov	QWORD PTR r_buf$42[rbp], rax

; 1764 :                             if (r_buf == NULL)

	cmp	QWORD PTR r_buf$42[rbp], 0
	jne	SHORT $LN36@PMC_DivRem

; 1765 :                             {
; 1766 :                                 DeallocateNumber(nq);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN70@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN70@PMC_DivRem:
	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1767 :                                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN1@PMC_DivRem
$LN36@PMC_DivRem:

; 1768 :                             }
; 1769 :                             (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, NULL, r_buf);

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	rcx, QWORD PTR r_buf$42[rbp]
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], 0
	lea	rcx, QWORD PTR work_v_buf$39[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 2
	lea	r8, QWORD PTR v_buf$38[rbp]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	QWORD PTR fp_DivRem_X_X

; 1770 :                             if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR r_buf_code$40[rbp]
	mov	rcx, QWORD PTR r_buf$42[rbp]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN37@PMC_DivRem

; 1771 :                                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN37@PMC_DivRem:

; 1772 :                             nq = NULL;

	mov	BYTE PTR $T49[rbp], 1
	mov	QWORD PTR nq$[rbp], 0

; 1773 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR r_buf$42[rbp]
	mov	edx, DWORD PTR [rdx+rax]
	mov	rax, QWORD PTR r_buf$42[rbp]
	mov	ecx, DWORD PTR [rax+rcx]
	call	_FROMWORDTODWORD
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax

; 1774 :                             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	rdx, QWORD PTR r_buf_words$41[rbp]
	mov	rcx, QWORD PTR r_buf$42[rbp]
	call	DeallocateBlock
$LN30@PMC_DivRem:
$LN26@PMC_DivRem:
$LN17@PMC_DivRem:

; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :             }

	jmp	$LN15@PMC_DivRem
$LN14@PMC_DivRem:

; 1779 :             else
; 1780 :             {
; 1781 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1782 : 
; 1783 :                 // x と y の商・剰余を計算する
; 1784 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR u_bit_count$43[rbp], rax

; 1785 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	rcx, QWORD PTR v$[rbp]
	call	_LZCNT_ALT_UNIT
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$44[rbp], rax

; 1786 :                 if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$44[rbp]
	cmp	QWORD PTR u_bit_count$43[rbp], rax
	jae	SHORT $LN38@PMC_DivRem

; 1787 :                 {
; 1788 :                     // 明らかに u < v である場合
; 1789 : 
; 1790 :                     // q = 0, r = u を返す。
; 1791 :                     nq = q != NULL ? &number_zero : NULL;

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN57@PMC_DivRem
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR tv313[rbp], rax
	jmp	SHORT $LN58@PMC_DivRem
$LN57@PMC_DivRem:
	mov	QWORD PTR tv313[rbp], 0
$LN58@PMC_DivRem:
	mov	BYTE PTR $T49[rbp], 1
	mov	rax, QWORD PTR tv313[rbp]
	mov	QWORD PTR nq$[rbp], rax

; 1792 :                     *r = nu->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rdx, QWORD PTR r$[rbp]
	mov	rax, QWORD PTR [rax+rcx]
	mov	QWORD PTR [rdx], rax

; 1793 :                 }

	jmp	$LN39@PMC_DivRem
$LN38@PMC_DivRem:

; 1794 :                 else
; 1795 :                 {
; 1796 :                     if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	$LN40@PMC_DivRem

; 1797 :                     {
; 1798 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	rax, QWORD PTR v_bit_count$44[rbp]
	mov	rcx, QWORD PTR u_bit_count$43[rbp]
	sub	rcx, rax
	mov	rax, rcx
	add	rax, 65					; 00000041H
	mov	QWORD PTR q_bit_count$45[rbp], rax

; 1799 :                         __UNIT_TYPE nq_light_check_code;
; 1800 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	mov	BYTE PTR $T49[rbp], 1
	lea	r8, QWORD PTR nq_light_check_code$46[rbp]
	mov	rdx, QWORD PTR q_bit_count$45[rbp]
	lea	rcx, QWORD PTR nq$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN42@PMC_DivRem

; 1801 :                             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN42@PMC_DivRem:

; 1802 :                         __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR r_buf$47[rbp], 0

; 1803 :                         DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN71@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN71@PMC_DivRem:
	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	lea	rcx, QWORD PTR r_buf$47[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR nq$[rbp]
	mov	r9, QWORD PTR [rcx+64]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	DivRem_X_1W

; 1804 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN72@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN72@PMC_DivRem:
	mov	rdx, QWORD PTR nq_light_check_code$46[rbp]
	mov	rax, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN43@PMC_DivRem

; 1805 :                             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN43@PMC_DivRem:

; 1806 :                         CommitNumber(nq);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN73@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN73@PMC_DivRem:
	mov	rcx, QWORD PTR nq$[rbp]
	call	CommitNumber

; 1807 :                         *r = r_buf;

	mov	eax, DWORD PTR r_buf$47[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax

; 1808 :                         if (nq->IS_ZERO)

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN74@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN74@PMC_DivRem:
	mov	rax, QWORD PTR nq$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN44@PMC_DivRem

; 1809 :                         {
; 1810 :                             DeallocateNumber(nq);

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN75@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN75@PMC_DivRem:
	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1811 :                             nq = &number_zero;

	mov	BYTE PTR $T49[rbp], 1
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nq$[rbp], rax
$LN44@PMC_DivRem:

; 1812 :                         }
; 1813 :                     }

	jmp	SHORT $LN41@PMC_DivRem
$LN40@PMC_DivRem:

; 1814 :                     else
; 1815 :                     {
; 1816 :                         __UNIT_TYPE_DIV r_buf = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v);

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	r8d, DWORD PTR v$[rbp]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	Rem_X_1W
	mov	DWORD PTR r_buf$48[rbp], eax

; 1817 :                         nq = NULL;

	mov	BYTE PTR $T49[rbp], 1
	mov	QWORD PTR nq$[rbp], 0

; 1818 :                         *r = r_buf;

	mov	eax, DWORD PTR r_buf$48[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax
$LN41@PMC_DivRem:
$LN39@PMC_DivRem:
$LN15@PMC_DivRem:
$LN10@PMC_DivRem:
$LN8@PMC_DivRem:

; 1819 :                     }
; 1820 :                 }
; 1821 :             }
; 1822 : 
; 1823 :         }
; 1824 :     }
; 1825 :     if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN45@PMC_DivRem

; 1826 :         *q = (PMC_HANDLE_UINT)nq;

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN76@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN76@PMC_DivRem:
	mov	rax, QWORD PTR q$[rbp]
	mov	rcx, QWORD PTR nq$[rbp]
	mov	QWORD PTR [rax], rcx
$LN45@PMC_DivRem:

; 1827 : #ifdef _DEBUG
; 1828 :     if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN46@PMC_DivRem

; 1829 :     {
; 1830 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)

	cmp	BYTE PTR $T49[rbp], 0
	jne	SHORT $LN77@PMC_DivRem
	lea	rcx, OFFSET FLAT:PMC_DivRem_X_L$rtcName$0
	call	_RTC_UninitUse
$LN77@PMC_DivRem:
	mov	rcx, QWORD PTR nq$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN47@PMC_DivRem

; 1831 :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_DivRem
$LN47@PMC_DivRem:
$LN46@PMC_DivRem:

; 1832 :     }
; 1833 : #endif
; 1834 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 1835 : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:PMC_DivRem_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+1704]
	pop	rdi
	pop	rbp
	ret	0
PMC_DivRem_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_X_I
_TEXT	SEGMENT
nu$ = 8
result$ = 36
nq$ = 72
u_bit_count$6 = 104
v_bit_count$7 = 136
q_bit_count$8 = 168
nq_light_check_code$9 = 200
r_buf$10 = 228
r_buf$11 = 260
tv89 = 472
tv75 = 472
u$ = 512
v$ = 520
q$ = 528
r$ = 536
PMC_DivRem_X_I PROC					; COMDAT

; 1306 : {

$LN29:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 536				; 00000218H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+568]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 1307 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_DivRem

; 1308 :     {
; 1309 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1310 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 1311 :     }
; 1312 :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN3@PMC_DivRem

; 1313 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 1314 :     if (r == NULL)

	cmp	QWORD PTR r$[rbp], 0
	jne	SHORT $LN4@PMC_DivRem

; 1315 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 1316 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 1317 :     PMC_STATUS_CODE result;
; 1318 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_DivRem

; 1319 :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 1320 :     if (v == 0)

	cmp	DWORD PTR v$[rbp], 0
	jne	SHORT $LN6@PMC_DivRem

; 1321 :     {
; 1322 :         // v が 0 である場合
; 1323 : 
; 1324 :         // 0 による除算はエラーで返す
; 1325 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1326 :     }
; 1327 :     NUMBER_HEADER* nq;
; 1328 :     if (nu->IS_ZERO)

	mov	rax, QWORD PTR nu$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@PMC_DivRem

; 1329 :     {
; 1330 :         // u が 0 である場合
; 1331 : 
; 1332 :         // q = 0, r = 0 を返す
; 1333 :         
; 1334 :         nq = q != NULL ? &number_zero : NULL;

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN25@PMC_DivRem
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR tv75[rbp], rax
	jmp	SHORT $LN26@PMC_DivRem
$LN25@PMC_DivRem:
	mov	QWORD PTR tv75[rbp], 0
$LN26@PMC_DivRem:
	mov	rax, QWORD PTR tv75[rbp]
	mov	QWORD PTR nq$[rbp], rax

; 1335 :         *r = 0;

	mov	rax, QWORD PTR r$[rbp]
	mov	DWORD PTR [rax], 0

; 1336 :     }

	jmp	$LN8@PMC_DivRem
$LN7@PMC_DivRem:

; 1337 :     else
; 1338 :     {
; 1339 :         // u が 0 ではない場合
; 1340 : 
; 1341 :         if (v == 1)

	cmp	DWORD PTR v$[rbp], 1
	jne	SHORT $LN9@PMC_DivRem

; 1342 :         {
; 1343 :             // v が 1 である場合
; 1344 : 
; 1345 :             // q = u, r = 0 を返す
; 1346 :             if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN11@PMC_DivRem

; 1347 :             {
; 1348 :                 if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR nu$[rbp]
	call	DuplicateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_DivRem

; 1349 :                     return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN13@PMC_DivRem:

; 1350 :             }

	jmp	SHORT $LN12@PMC_DivRem
$LN11@PMC_DivRem:

; 1351 :             else
; 1352 :                 nq = NULL;

	mov	QWORD PTR nq$[rbp], 0
$LN12@PMC_DivRem:

; 1353 :             *r = 0;

	mov	rax, QWORD PTR r$[rbp]
	mov	DWORD PTR [rax], 0

; 1354 :         }

	jmp	$LN10@PMC_DivRem
$LN9@PMC_DivRem:

; 1355 :         else
; 1356 :         {
; 1357 :             // u と v がともに 0 ではない場合
; 1358 : 
; 1359 :             // x と y の商・剰余を計算する
; 1360 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR u_bit_count$6[rbp], rax

; 1361 :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR v$[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_bit_count$7[rbp], rax

; 1362 :             if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$7[rbp]
	cmp	QWORD PTR u_bit_count$6[rbp], rax
	jae	SHORT $LN14@PMC_DivRem

; 1363 :             {
; 1364 :                 // 明らかに u < v である場合
; 1365 : 
; 1366 :                 // q = 0, r = u を返す。
; 1367 :                 nq = q != NULL ? &number_zero : NULL;

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN27@PMC_DivRem
	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR tv89[rbp], rax
	jmp	SHORT $LN28@PMC_DivRem
$LN27@PMC_DivRem:
	mov	QWORD PTR tv89[rbp], 0
$LN28@PMC_DivRem:
	mov	rax, QWORD PTR tv89[rbp]
	mov	QWORD PTR nq$[rbp], rax

; 1368 :                 *r = (_UINT32_T)nu->BLOCK[0];

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rdx, QWORD PTR r$[rbp]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR [rdx], eax

; 1369 :             }

	jmp	$LN15@PMC_DivRem
$LN14@PMC_DivRem:

; 1370 :             else
; 1371 :             {
; 1372 :                 if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	$LN16@PMC_DivRem

; 1373 :                 {
; 1374 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	rax, QWORD PTR v_bit_count$7[rbp]
	mov	rcx, QWORD PTR u_bit_count$6[rbp]
	sub	rcx, rax
	mov	rax, rcx
	add	rax, 65					; 00000041H
	mov	QWORD PTR q_bit_count$8[rbp], rax

; 1375 :                     __UNIT_TYPE nq_light_check_code;
; 1376 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nq_light_check_code$9[rbp]
	mov	rdx, QWORD PTR q_bit_count$8[rbp]
	lea	rcx, QWORD PTR nq$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN18@PMC_DivRem

; 1377 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN18@PMC_DivRem:

; 1378 :                     __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR r_buf$10[rbp], 0

; 1379 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	lea	rcx, QWORD PTR r_buf$10[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR nq$[rbp]
	mov	r9, QWORD PTR [rcx+64]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	DivRem_X_1W

; 1380 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR nq_light_check_code$9[rbp]
	mov	rax, QWORD PTR nq$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	CheckBlockLight
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN19@PMC_DivRem

; 1381 :                         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN19@PMC_DivRem:

; 1382 :                     CommitNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp]
	call	CommitNumber

; 1383 :                     *r = (_UINT32_T)r_buf;

	mov	rax, QWORD PTR r$[rbp]
	mov	ecx, DWORD PTR r_buf$10[rbp]
	mov	DWORD PTR [rax], ecx

; 1384 :                     if (nq->IS_ZERO)

	mov	rax, QWORD PTR nq$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN20@PMC_DivRem

; 1385 :                     {
; 1386 :                         DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp]
	call	DeallocateNumber

; 1387 :                         nq = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nq$[rbp], rax
$LN20@PMC_DivRem:

; 1388 :                     }
; 1389 :                 }

	jmp	SHORT $LN17@PMC_DivRem
$LN16@PMC_DivRem:

; 1390 :                 else
; 1391 :                 {
; 1392 :                     __UNIT_TYPE_DIV r_buf = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v);

	mov	rax, QWORD PTR nu$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	r8d, DWORD PTR v$[rbp]
	mov	rdx, rax
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+64]
	call	Rem_X_1W
	mov	DWORD PTR r_buf$11[rbp], eax

; 1393 :                     nq = NULL;

	mov	QWORD PTR nq$[rbp], 0

; 1394 :                     *r = (_UINT32_T)r_buf;

	mov	rax, QWORD PTR r$[rbp]
	mov	ecx, DWORD PTR r_buf$11[rbp]
	mov	DWORD PTR [rax], ecx
$LN17@PMC_DivRem:
$LN15@PMC_DivRem:
$LN10@PMC_DivRem:
$LN8@PMC_DivRem:

; 1395 :                 }
; 1396 :             }
; 1397 :         }
; 1398 :     }
; 1399 :     if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN21@PMC_DivRem

; 1400 :         *q = (PMC_HANDLE_UINT)nq;

	mov	rax, QWORD PTR q$[rbp]
	mov	rcx, QWORD PTR nq$[rbp]
	mov	QWORD PTR [rax], rcx
$LN21@PMC_DivRem:

; 1401 : #ifdef _DEBUG
; 1402 :     if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN22@PMC_DivRem

; 1403 :     {
; 1404 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN23@PMC_DivRem

; 1405 :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_DivRem
$LN23@PMC_DivRem:
$LN22@PMC_DivRem:

; 1406 :     }
; 1407 : #endif
; 1408 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 1409 : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:PMC_DivRem_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+488]
	pop	rdi
	pop	rbp
	ret	0
PMC_DivRem_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_L_X
_TEXT	SEGMENT
nv$ = 8
result$ = 36
u_hi$17 = 68
u_lo$18 = 100
u_bit_count$19 = 136
v_bit_count$20 = 168
temp_r$21 = 196
temp_q$22 = 228
u_bit_count$23 = 264
v_bit_count$24 = 296
u_buf$25 = 328
q_buf$26 = 360
r_buf$27 = 404
u_buf$28 = 440
r_buf$29 = 468
u_buf$30 = 504
q_buf$31 = 536
r_buf$32 = 584
work_v_buf$33 = 632
u_buf$34 = 664
r_buf$35 = 696
work_v_buf$36 = 744
u_bit_count$37 = 776
v_bit_count$38 = 808
temp_r$39 = 836
temp_q$40 = 868
__$ArrayPad$ = 1272
u$ = 1312
v$ = 1320
q$ = 1328
r$ = 1336
PMC_DivRem_L_X PROC					; COMDAT

; 1412 : {

$LN39:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1352				; 00000548H
	lea	rbp, QWORD PTR [rsp+64]
	mov	rdi, rsp
	mov	ecx, 338				; 00000152H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1384]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 1413 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(u))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_DivRem

; 1414 :     {
; 1415 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1416 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 1417 :     }
; 1418 :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_DivRem

; 1419 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 1420 :     if (r == NULL)

	cmp	QWORD PTR r$[rbp], 0
	jne	SHORT $LN4@PMC_DivRem

; 1421 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 1422 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 1423 :     PMC_STATUS_CODE result;
; 1424 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_DivRem

; 1425 :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 1426 :     if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_DivRem

; 1427 :     {
; 1428 :         // v が 0 である場合
; 1429 : 
; 1430 :         // 0 による除算はエラーで返す
; 1431 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1432 :     }
; 1433 :     if (u == 0)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN7@PMC_DivRem

; 1434 :     {
; 1435 :         // x が 0 である場合
; 1436 : 
; 1437 :         // q = 0, r = 0 を返す
; 1438 :         if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN9@PMC_DivRem

; 1439 :             *q = 0;

	mov	rax, QWORD PTR q$[rbp]
	mov	QWORD PTR [rax], 0
$LN9@PMC_DivRem:

; 1440 :         *r = 0;

	mov	rax, QWORD PTR r$[rbp]
	mov	QWORD PTR [rax], 0

; 1441 :     }

	jmp	$LN8@PMC_DivRem
$LN7@PMC_DivRem:

; 1442 :     else
; 1443 :     {
; 1444 :         // u が 0 ではない場合
; 1445 : 
; 1446 :         if (nv->IS_ONE)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@PMC_DivRem

; 1447 :         {
; 1448 :             // v が 1 である場合
; 1449 : 
; 1450 :             // q = u, r = 0 を返す
; 1451 :             if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN12@PMC_DivRem

; 1452 :                 *q = u;

	mov	rax, QWORD PTR q$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	QWORD PTR [rax], rcx
$LN12@PMC_DivRem:

; 1453 :             *r = 0;

	mov	rax, QWORD PTR r$[rbp]
	mov	QWORD PTR [rax], 0

; 1454 :         }

	jmp	$LN11@PMC_DivRem
$LN10@PMC_DivRem:

; 1455 :         else
; 1456 :         {
; 1457 :             // u > 0 かつ v > 1 である場合
; 1458 : 
; 1459 :             // u と v の商・剰余を計算する
; 1460 :             if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))

	xor	eax, eax
	cmp	eax, 1
	je	$LN13@PMC_DivRem

; 1461 :             {
; 1462 :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 1463 :                 _UINT32_T u_hi;
; 1464 :                 _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);

	lea	rdx, QWORD PTR u_hi$17[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	_FROMDWORDTOWORD
	mov	DWORD PTR u_lo$18[rbp], eax

; 1465 :                 if (u_hi == 0)

	cmp	DWORD PTR u_hi$17[rbp], 0
	jne	$LN15@PMC_DivRem

; 1466 :                 {
; 1467 :                     // u の値が 32bit で表現可能な場合
; 1468 :                     __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

	mov	ecx, DWORD PTR u_lo$18[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_bit_count$19[rbp], rax

; 1469 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR v_bit_count$20[rbp], rax

; 1470 :                     if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$20[rbp]
	cmp	QWORD PTR u_bit_count$19[rbp], rax
	jae	SHORT $LN17@PMC_DivRem

; 1471 :                     {
; 1472 :                         // 明らかに u < v である場合
; 1473 : 
; 1474 :                         // q = 0, r = u を返す。
; 1475 :                         if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN19@PMC_DivRem

; 1476 :                             *q = 0;

	mov	rax, QWORD PTR q$[rbp]
	mov	QWORD PTR [rax], 0
$LN19@PMC_DivRem:

; 1477 :                         *r = u_lo;

	mov	eax, DWORD PTR u_lo$18[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax

; 1478 :                     }

	jmp	SHORT $LN18@PMC_DivRem
$LN17@PMC_DivRem:

; 1479 :                     else
; 1480 :                     {
; 1481 :                         // u のビット数が v のビット数以上である場合
; 1482 : 
; 1483 :                         // u は 32bit で表現できるので、v も 32bit で表現できる。
; 1484 :                         __UNIT_TYPE_DIV temp_r;
; 1485 :                         __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	lea	r9, QWORD PTR temp_r$21[rbp]
	mov	r8d, DWORD PTR [rcx+rax]
	mov	edx, DWORD PTR u_lo$18[rbp]
	xor	ecx, ecx
	call	_DIVREM_UNIT
	mov	DWORD PTR temp_q$22[rbp], eax

; 1486 :                         if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN20@PMC_DivRem

; 1487 :                             *q = temp_q;

	mov	eax, DWORD PTR temp_q$22[rbp]
	mov	rcx, QWORD PTR q$[rbp]
	mov	QWORD PTR [rcx], rax
$LN20@PMC_DivRem:

; 1488 :                         *r = temp_r;

	mov	eax, DWORD PTR temp_r$21[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax

; 1489 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1490 :                         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN21@PMC_DivRem

; 1491 :                             IncrementDIV64Counter();

	call	IncrementDIV64Counter
	jmp	SHORT $LN22@PMC_DivRem
$LN21@PMC_DivRem:

; 1492 :                         else
; 1493 :                             IncrementDIV32Counter();

	call	IncrementDIV32Counter
$LN22@PMC_DivRem:
$LN18@PMC_DivRem:

; 1494 : #endif
; 1495 :                     }
; 1496 :                 }

	jmp	$LN16@PMC_DivRem
$LN15@PMC_DivRem:

; 1497 :                 else
; 1498 :                 {
; 1499 :                     // v の値が 32bit では表現できない場合
; 1500 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

	mov	ecx, DWORD PTR u_hi$17[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_bit_count$23[rbp], rax

; 1501 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR v_bit_count$24[rbp], rax

; 1502 :                     if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$24[rbp]
	cmp	QWORD PTR u_bit_count$23[rbp], rax
	jae	SHORT $LN23@PMC_DivRem

; 1503 :                     {
; 1504 :                         // 明らかに u < v である場合
; 1505 : 
; 1506 :                         // q = 0, r = u を返す。
; 1507 :                         if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN25@PMC_DivRem

; 1508 :                             *q = 0;

	mov	rax, QWORD PTR q$[rbp]
	mov	QWORD PTR [rax], 0
$LN25@PMC_DivRem:

; 1509 :                         *r = u;

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	QWORD PTR [rax], rcx

; 1510 :                     }

	jmp	$LN24@PMC_DivRem
$LN23@PMC_DivRem:

; 1511 :                     else
; 1512 :                     {
; 1513 :                         // u のビット長が 33 以上 64 以下であり、かつ、u のビット長が v のビット長以上(v のビット長は多くとも64以下)である場合
; 1514 : 
; 1515 :                         if (nv->UNIT_BIT_COUNT <= sizeof(__UNIT_TYPE_DIV) * 8)

	mov	rax, QWORD PTR nv$[rbp]
	cmp	QWORD PTR [rax+24], 32			; 00000020H
	ja	$LN26@PMC_DivRem

; 1516 :                         {
; 1517 :                             // v が 32bit で表現できる場合
; 1518 : 
; 1519 :                             if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	$LN28@PMC_DivRem

; 1520 :                             {
; 1521 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };

	mov	eax, DWORD PTR u_lo$18[rbp]
	mov	DWORD PTR u_buf$25[rbp], eax
	mov	eax, DWORD PTR u_hi$17[rbp]
	mov	DWORD PTR u_buf$25[rbp+4], eax

; 1522 :                                 __UNIT_TYPE_DIV q_buf[] = { 0, 0, 0 };

	mov	DWORD PTR q_buf$26[rbp], 0
	mov	DWORD PTR q_buf$26[rbp+4], 0
	mov	DWORD PTR q_buf$26[rbp+8], 0

; 1523 :                                 __UNIT_TYPE_DIV r_buf;
; 1524 : 
; 1525 :                                 DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0], q_buf, &r_buf);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	lea	rdx, QWORD PTR r_buf$27[rbp]
	mov	QWORD PTR [rsp+32], rdx
	lea	r9, QWORD PTR q_buf$26[rbp]
	mov	r8d, DWORD PTR [rcx+rax]
	mov	edx, 2
	lea	rcx, QWORD PTR u_buf$25[rbp]
	call	DivRem_X_1W

; 1526 : 
; 1527 :                                 *q = _FROMWORDTODWORD(q_buf[1], q_buf[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR q_buf$26[rbp+rax]
	mov	ecx, DWORD PTR q_buf$26[rbp+rcx]
	call	_FROMWORDTODWORD
	mov	rcx, QWORD PTR q$[rbp]
	mov	QWORD PTR [rcx], rax

; 1528 :                                 *r = r_buf;

	mov	eax, DWORD PTR r_buf$27[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax

; 1529 :                             }

	jmp	SHORT $LN29@PMC_DivRem
$LN28@PMC_DivRem:

; 1530 :                             else
; 1531 :                             {
; 1532 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };

	mov	eax, DWORD PTR u_lo$18[rbp]
	mov	DWORD PTR u_buf$28[rbp], eax
	mov	eax, DWORD PTR u_hi$17[rbp]
	mov	DWORD PTR u_buf$28[rbp+4], eax

; 1533 :                                 __UNIT_TYPE_DIV r_buf = Rem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0]);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	r8d, DWORD PTR [rcx+rax]
	mov	edx, 2
	lea	rcx, QWORD PTR u_buf$28[rbp]
	call	Rem_X_1W
	mov	DWORD PTR r_buf$29[rbp], eax

; 1534 :                                 *r = r_buf;

	mov	eax, DWORD PTR r_buf$29[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax
$LN29@PMC_DivRem:

; 1535 :                             }
; 1536 :                         }

	jmp	$LN27@PMC_DivRem
$LN26@PMC_DivRem:

; 1537 :                         else
; 1538 :                         {
; 1539 :                             // v が 32bit では表現できない場合
; 1540 : 
; 1541 :                             // この場合、2 ワード / 2 ワード の除算となるため、_DIVREM_UNIT 単発では計算できない。
; 1542 :                             if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	$LN30@PMC_DivRem

; 1543 :                             {
; 1544 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };

	mov	eax, DWORD PTR u_lo$18[rbp]
	mov	DWORD PTR u_buf$30[rbp], eax
	mov	eax, DWORD PTR u_hi$17[rbp]
	mov	DWORD PTR u_buf$30[rbp+4], eax

; 1545 :                                 __UNIT_TYPE_DIV q_buf[] = { 0, 0, 0 };// 演算結果を格納するためには u のビット数 - v のビット数 + 1 ビットだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	DWORD PTR q_buf$31[rbp], 0
	mov	DWORD PTR q_buf$31[rbp+4], 0
	mov	DWORD PTR q_buf$31[rbp+8], 0

; 1546 :                                 __UNIT_TYPE_DIV r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	DWORD PTR r_buf$32[rbp], 0
	mov	DWORD PTR r_buf$32[rbp+4], 0
	mov	DWORD PTR r_buf$32[rbp+8], 0

; 1547 :                                 __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };

	mov	DWORD PTR work_v_buf$33[rbp], 0
	mov	DWORD PTR work_v_buf$33[rbp+4], 0

; 1548 :                                 (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, q_buf, r_buf);

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	lea	rcx, QWORD PTR r_buf$32[rbp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, QWORD PTR q_buf$31[rbp]
	mov	QWORD PTR [rsp+40], rcx
	lea	rcx, QWORD PTR work_v_buf$33[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rax
	mov	rax, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rax+64]
	mov	edx, 2
	lea	rcx, QWORD PTR u_buf$30[rbp]
	call	QWORD PTR fp_DivRem_X_X

; 1549 :                                 *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR q_buf$31[rbp+rax]
	mov	ecx, DWORD PTR q_buf$31[rbp+rcx]
	call	_FROMWORDTODWORD
	mov	rcx, QWORD PTR q$[rbp]
	mov	QWORD PTR [rcx], rax

; 1550 :                                 *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR r_buf$32[rbp+rax]
	mov	ecx, DWORD PTR r_buf$32[rbp+rcx]
	call	_FROMWORDTODWORD
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax

; 1551 :                             }

	jmp	$LN31@PMC_DivRem
$LN30@PMC_DivRem:

; 1552 :                             else
; 1553 :                             {
; 1554 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };

	mov	eax, DWORD PTR u_lo$18[rbp]
	mov	DWORD PTR u_buf$34[rbp], eax
	mov	eax, DWORD PTR u_hi$17[rbp]
	mov	DWORD PTR u_buf$34[rbp+4], eax

; 1555 :                                 __UNIT_TYPE_DIV r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	DWORD PTR r_buf$35[rbp], 0
	mov	DWORD PTR r_buf$35[rbp+4], 0
	mov	DWORD PTR r_buf$35[rbp+8], 0

; 1556 :                                 __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };

	mov	DWORD PTR work_v_buf$36[rbp], 0
	mov	DWORD PTR work_v_buf$36[rbp+4], 0

; 1557 :                                 (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, NULL, r_buf);

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+16]
	shl	rax, 3
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	lea	rcx, QWORD PTR r_buf$35[rbp]
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], 0
	lea	rcx, QWORD PTR work_v_buf$36[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rax
	mov	rax, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rax+64]
	mov	edx, 2
	lea	rcx, QWORD PTR u_buf$34[rbp]
	call	QWORD PTR fp_DivRem_X_X

; 1558 :                                 *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR r_buf$35[rbp+rax]
	mov	ecx, DWORD PTR r_buf$35[rbp+rcx]
	call	_FROMWORDTODWORD
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax
$LN31@PMC_DivRem:
$LN27@PMC_DivRem:
$LN24@PMC_DivRem:
$LN16@PMC_DivRem:

; 1559 :                             }
; 1560 :                         }
; 1561 :                     }
; 1562 :                 }
; 1563 :             }

	jmp	$LN14@PMC_DivRem
$LN13@PMC_DivRem:

; 1564 :             else
; 1565 :             {
; 1566 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1567 : 
; 1568 :                 // x と y の商・剰余を計算する
; 1569 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);

	mov	rcx, QWORD PTR u$[rbp]
	call	_LZCNT_ALT_UNIT
	cdqe
	mov	ecx, 64					; 00000040H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_bit_count$37[rbp], rax

; 1570 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR v_bit_count$38[rbp], rax

; 1571 :                 if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$38[rbp]
	cmp	QWORD PTR u_bit_count$37[rbp], rax
	jae	SHORT $LN32@PMC_DivRem

; 1572 :                 {
; 1573 :                     // 明らかに u < v である場合
; 1574 : 
; 1575 :                     // q = 0, r = u を返す。
; 1576 :                     if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN34@PMC_DivRem

; 1577 :                         *q = 0;

	mov	rax, QWORD PTR q$[rbp]
	mov	QWORD PTR [rax], 0
$LN34@PMC_DivRem:

; 1578 :                     *r = u;

	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	QWORD PTR [rax], rcx

; 1579 :                 }

	jmp	SHORT $LN33@PMC_DivRem
$LN32@PMC_DivRem:

; 1580 :                 else
; 1581 :                 {
; 1582 :                     // u のビット数が v のビット数以上である場合
; 1583 : 
; 1584 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1585 :                     __UNIT_TYPE_DIV temp_r;
; 1586 :                     __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE_DIV)u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	lea	r9, QWORD PTR temp_r$39[rbp]
	mov	r8d, DWORD PTR [rcx+rax]
	mov	edx, DWORD PTR u$[rbp]
	xor	ecx, ecx
	call	_DIVREM_UNIT
	mov	DWORD PTR temp_q$40[rbp], eax

; 1587 :                     if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN35@PMC_DivRem

; 1588 :                         *q = temp_q;

	mov	eax, DWORD PTR temp_q$40[rbp]
	mov	rcx, QWORD PTR q$[rbp]
	mov	QWORD PTR [rcx], rax
$LN35@PMC_DivRem:

; 1589 :                     *r = temp_r;

	mov	eax, DWORD PTR temp_r$39[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	mov	QWORD PTR [rcx], rax

; 1590 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1591 :                     if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN36@PMC_DivRem

; 1592 :                         IncrementDIV64Counter();

	call	IncrementDIV64Counter
	jmp	SHORT $LN37@PMC_DivRem
$LN36@PMC_DivRem:

; 1593 :                     else
; 1594 :                         IncrementDIV32Counter();

	call	IncrementDIV32Counter
$LN37@PMC_DivRem:
$LN33@PMC_DivRem:
$LN14@PMC_DivRem:
$LN11@PMC_DivRem:
$LN8@PMC_DivRem:

; 1595 : #endif
; 1596 :                 }
; 1597 :             }
; 1598 : 
; 1599 :         }
; 1600 :     }
; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 1602 : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:PMC_DivRem_L_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1288]
	pop	rdi
	pop	rbp
	ret	0
PMC_DivRem_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_I_X
_TEXT	SEGMENT
nv$ = 8
result$ = 36
u_bit_count$4 = 72
v_bit_count$5 = 104
temp_r$6 = 132
temp_q$7 = 164
u$ = 416
v$ = 424
q$ = 432
r$ = 440
PMC_DivRem_I_X PROC					; COMDAT

; 1224 : {

$LN20:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+456]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 1225 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@PMC_DivRem

; 1226 :     {
; 1227 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1228 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 1229 :     }
; 1230 :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_DivRem

; 1231 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 1232 :     if (r == NULL)

	cmp	QWORD PTR r$[rbp], 0
	jne	SHORT $LN4@PMC_DivRem

; 1233 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 1234 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 1235 :     PMC_STATUS_CODE result;
; 1236 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_DivRem

; 1237 :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 1238 :     if (nv->IS_ZERO)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_DivRem

; 1239 :     {
; 1240 :         // v が 0 である場合
; 1241 : 
; 1242 :         // 0 による除算はエラーで返す
; 1243 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1244 :     }
; 1245 :     if (u == 0)

	cmp	DWORD PTR u$[rbp], 0
	jne	SHORT $LN7@PMC_DivRem

; 1246 :     {
; 1247 :         // u が 0 である場合
; 1248 : 
; 1249 :         // q = 0, r = 0 を返す
; 1250 :         if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN9@PMC_DivRem

; 1251 :             *q = 0;

	mov	rax, QWORD PTR q$[rbp]
	mov	DWORD PTR [rax], 0
$LN9@PMC_DivRem:

; 1252 :         *r = 0;

	mov	rax, QWORD PTR r$[rbp]
	mov	DWORD PTR [rax], 0

; 1253 :     }

	jmp	$LN8@PMC_DivRem
$LN7@PMC_DivRem:

; 1254 :     else
; 1255 :     {
; 1256 :         // u が 0 ではない場合
; 1257 : 
; 1258 :         if (nv->IS_ONE)

	mov	rax, QWORD PTR nv$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@PMC_DivRem

; 1259 :         {
; 1260 :             // v が 1 である場合
; 1261 : 
; 1262 :             // q = u, r = 0 を返す
; 1263 :             if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN12@PMC_DivRem

; 1264 :                 *q = u;

	mov	rax, QWORD PTR q$[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	mov	DWORD PTR [rax], ecx
$LN12@PMC_DivRem:

; 1265 :             *r = 0;

	mov	rax, QWORD PTR r$[rbp]
	mov	DWORD PTR [rax], 0

; 1266 :         }

	jmp	$LN11@PMC_DivRem
$LN10@PMC_DivRem:

; 1267 :         else
; 1268 :         {
; 1269 :             // u と v がともに 0 ではない場合
; 1270 : 
; 1271 :             // x と y の商・剰余を計算する
; 1272 :             __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

	mov	ecx, DWORD PTR u$[rbp]
	call	_LZCNT_ALT_32
	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u_bit_count$4[rbp], rax

; 1273 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR nv$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR v_bit_count$5[rbp], rax

; 1274 :             if (u_bit_count < v_bit_count)

	mov	rax, QWORD PTR v_bit_count$5[rbp]
	cmp	QWORD PTR u_bit_count$4[rbp], rax
	jae	SHORT $LN13@PMC_DivRem

; 1275 :             {
; 1276 :                 // 明らかに u < v である場合
; 1277 : 
; 1278 :                 // q = 0, r = u を返す。
; 1279 :                 if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN15@PMC_DivRem

; 1280 :                     *q = 0;

	mov	rax, QWORD PTR q$[rbp]
	mov	DWORD PTR [rax], 0
$LN15@PMC_DivRem:

; 1281 :                 *r = u;

	mov	rax, QWORD PTR r$[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	mov	DWORD PTR [rax], ecx

; 1282 :             }

	jmp	SHORT $LN14@PMC_DivRem
$LN13@PMC_DivRem:

; 1283 :             else
; 1284 :             {
; 1285 :                 // u のビット数が v のビット数以上である場合
; 1286 :                 
; 1287 :                 // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1288 :                 __UNIT_TYPE_DIV temp_r;
; 1289 :                 __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	lea	r9, QWORD PTR temp_r$6[rbp]
	mov	r8d, DWORD PTR [rcx+rax]
	mov	edx, DWORD PTR u$[rbp]
	xor	ecx, ecx
	call	_DIVREM_UNIT
	mov	DWORD PTR temp_q$7[rbp], eax

; 1290 :                 if (q != NULL)

	cmp	QWORD PTR q$[rbp], 0
	je	SHORT $LN16@PMC_DivRem

; 1291 :                     *q = temp_q;

	mov	rax, QWORD PTR q$[rbp]
	mov	ecx, DWORD PTR temp_q$7[rbp]
	mov	DWORD PTR [rax], ecx
$LN16@PMC_DivRem:

; 1292 :                 *r = temp_r;

	mov	rax, QWORD PTR r$[rbp]
	mov	ecx, DWORD PTR temp_r$6[rbp]
	mov	DWORD PTR [rax], ecx

; 1293 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1294 :                 if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN17@PMC_DivRem

; 1295 :                     IncrementDIV64Counter();

	call	IncrementDIV64Counter
	jmp	SHORT $LN18@PMC_DivRem
$LN17@PMC_DivRem:

; 1296 :                 else
; 1297 :                     IncrementDIV32Counter();

	call	IncrementDIV32Counter
$LN18@PMC_DivRem:
$LN14@PMC_DivRem:
$LN11@PMC_DivRem:
$LN8@PMC_DivRem:

; 1298 : #endif
; 1299 :             }
; 1300 :         }
; 1301 :     }
; 1302 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 1303 : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_DivRem_I_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
PMC_DivRem_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT Initialize_DivRem
_TEXT	SEGMENT
tv72 = 192
feature$ = 240
Initialize_DivRem PROC					; COMDAT

; 2047 : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 2048 :     fp_DivRem_X_X = feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2 ? DivRem_X_X_using_ADX_MULX : DivRem_X_X_using_ADC_MUL;

	mov	rax, QWORD PTR feature$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@Initialize
	mov	rax, QWORD PTR feature$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 3
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@Initialize
	lea	rax, OFFSET FLAT:DivRem_X_X_using_ADX_MULX
	mov	QWORD PTR tv72[rbp], rax
	jmp	SHORT $LN4@Initialize
$LN3@Initialize:
	lea	rax, OFFSET FLAT:DivRem_X_X_using_ADC_MUL
	mov	QWORD PTR tv72[rbp], rax
$LN4@Initialize:
	mov	rax, QWORD PTR tv72[rbp]
	mov	QWORD PTR fp_DivRem_X_X, rax

; 2049 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 2050 : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
Initialize_DivRem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_X
_TEXT	SEGMENT
u_buf_2$ = 8
u_count_2$ = 40
v_buf_2$ = 72
v_count_2$ = 104
r$5 = 132
q$6 = 164
r$7 = 196
u_buf$ = 448
u_count$ = 456
v_buf$ = 464
v_count$ = 472
work_v_buf$ = 480
q_buf$ = 488
r_buf$ = 496
DivRem_X_X PROC						; COMDAT

; 39   : {

$LN18:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 488				; 000001e8H
	lea	rbp, QWORD PTR [rsp+64]
	mov	rdi, rsp
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+520]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 40   :     __UNIT_TYPE_DIV* u_buf_2 = (__UNIT_TYPE_DIV*)u_buf;

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	QWORD PTR u_buf_2$[rbp], rax

; 41   :     __UNIT_TYPE u_count_2 = u_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));

	mov	rax, QWORD PTR u_count$[rbp]
	shl	rax, 1
	mov	QWORD PTR u_count_2$[rbp], rax

; 42   :     __UNIT_TYPE_DIV* v_buf_2 = (__UNIT_TYPE_DIV*)v_buf;

	mov	rax, QWORD PTR v_buf$[rbp]
	mov	QWORD PTR v_buf_2$[rbp], rax

; 43   :     __UNIT_TYPE v_count_2 = v_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));

	mov	rax, QWORD PTR v_count$[rbp]
	shl	rax, 1
	mov	QWORD PTR v_count_2$[rbp], rax

; 44   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@DivRem_X_X

; 45   :     {
; 46   :         if (u_buf_2[u_count_2 - 1] == 0)

	mov	rax, QWORD PTR u_buf_2$[rbp]
	mov	rcx, QWORD PTR u_count_2$[rbp]
	cmp	DWORD PTR [rax+rcx*4-4], 0
	jne	SHORT $LN3@DivRem_X_X

; 47   :             --u_count_2;

	mov	rax, QWORD PTR u_count_2$[rbp]
	dec	rax
	mov	QWORD PTR u_count_2$[rbp], rax
$LN3@DivRem_X_X:

; 48   :         if (v_buf_2[v_count_2 - 1] == 0)

	mov	rax, QWORD PTR v_buf_2$[rbp]
	mov	rcx, QWORD PTR v_count_2$[rbp]
	cmp	DWORD PTR [rax+rcx*4-4], 0
	jne	SHORT $LN4@DivRem_X_X

; 49   :             --v_count_2;

	mov	rax, QWORD PTR v_count_2$[rbp]
	dec	rax
	mov	QWORD PTR v_count_2$[rbp], rax
$LN4@DivRem_X_X:
$LN2@DivRem_X_X:

; 50   :     }
; 51   :     if (v_count_2 == 1)

	cmp	QWORD PTR v_count_2$[rbp], 1
	jne	$LN5@DivRem_X_X

; 52   :     {
; 53   :         if (u_count_2 == 1)

	cmp	QWORD PTR u_count_2$[rbp], 1
	jne	$LN7@DivRem_X_X

; 54   :         {
; 55   :             __UNIT_TYPE_DIV r;
; 56   :             __UNIT_TYPE_DIV q = _DIVREM_UNIT(0, u_buf_2[0], v_buf_2[0], &r);

	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	lea	r9, QWORD PTR r$5[rbp]
	mov	rdx, QWORD PTR v_buf_2$[rbp]
	mov	r8d, DWORD PTR [rdx+rax]
	mov	rax, QWORD PTR u_buf_2$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	xor	ecx, ecx
	call	_DIVREM_UNIT
	mov	DWORD PTR q$6[rbp], eax

; 57   :             if (q_buf != NULL)

	cmp	QWORD PTR q_buf$[rbp], 0
	je	SHORT $LN9@DivRem_X_X

; 58   :                 q_buf[0] = q;

	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR q$6[rbp]
	mov	rdx, QWORD PTR q_buf$[rbp]
	mov	QWORD PTR [rdx+rax], rcx
$LN9@DivRem_X_X:

; 59   :             r_buf[0] = r;

	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR r$5[rbp]
	mov	rdx, QWORD PTR r_buf$[rbp]
	mov	QWORD PTR [rdx+rax], rcx

; 60   : #ifdef ENABLED_PERFORMANCE_COUNTER
; 61   :             if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN10@DivRem_X_X

; 62   :                 IncrementDIV64Counter();

	call	IncrementDIV64Counter
	jmp	SHORT $LN11@DivRem_X_X
$LN10@DivRem_X_X:

; 63   :             else
; 64   :                 IncrementDIV32Counter();

	call	IncrementDIV32Counter
$LN11@DivRem_X_X:

; 65   : #endif
; 66   :         }

	jmp	$LN8@DivRem_X_X
$LN7@DivRem_X_X:

; 67   :         else
; 68   :         {
; 69   :             if (q_buf != NULL)

	cmp	QWORD PTR q_buf$[rbp], 0
	je	SHORT $LN12@DivRem_X_X

; 70   :             {
; 71   :                 __UNIT_TYPE_DIV r;
; 72   :                 DivRem_X_1W(u_buf_2, u_count_2, v_buf_2[0], (__UNIT_TYPE_DIV*)q_buf, &r);

	mov	eax, 4
	imul	rax, rax, 0
	lea	rcx, QWORD PTR r$7[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR q_buf$[rbp]
	mov	rcx, QWORD PTR v_buf_2$[rbp]
	mov	r8d, DWORD PTR [rcx+rax]
	mov	rdx, QWORD PTR u_count_2$[rbp]
	mov	rcx, QWORD PTR u_buf_2$[rbp]
	call	DivRem_X_1W

; 73   :                 r_buf[0] = r;

	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR r$7[rbp]
	mov	rdx, QWORD PTR r_buf$[rbp]
	mov	QWORD PTR [rdx+rax], rcx

; 74   :             }

	jmp	SHORT $LN13@DivRem_X_X
$LN12@DivRem_X_X:

; 75   :             else
; 76   :                 r_buf[0] = Rem_X_1W(u_buf_2, u_count_2, v_buf_2[0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v_buf_2$[rbp]
	mov	r8d, DWORD PTR [rcx+rax]
	mov	rdx, QWORD PTR u_count_2$[rbp]
	mov	rcx, QWORD PTR u_buf_2$[rbp]
	call	Rem_X_1W
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	eax, eax
	mov	rdx, QWORD PTR r_buf$[rbp]
	mov	QWORD PTR [rdx+rcx], rax
$LN13@DivRem_X_X:
$LN8@DivRem_X_X:

; 77   :         }
; 78   :     }

	jmp	$LN6@DivRem_X_X
$LN5@DivRem_X_X:

; 79   :     else
; 80   :     {
; 81   :         if (u_count_2 < v_count_2)

	mov	rax, QWORD PTR v_count_2$[rbp]
	cmp	QWORD PTR u_count_2$[rbp], rax
	jae	SHORT $LN14@DivRem_X_X

; 82   :         {
; 83   :             if (q_buf != NULL)

	cmp	QWORD PTR q_buf$[rbp], 0
	je	SHORT $LN16@DivRem_X_X

; 84   :                 q_buf[0] = 0;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q_buf$[rbp]
	mov	QWORD PTR [rcx+rax], 0
$LN16@DivRem_X_X:

; 85   :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);

	mov	r8, QWORD PTR u_count$[rbp]
	mov	rdx, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR r_buf$[rbp]
	call	_COPY_MEMORY_UNIT

; 86   :         }

	jmp	SHORT $LN15@DivRem_X_X
$LN14@DivRem_X_X:

; 87   :         else
; 88   :             (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, (__UNIT_TYPE_DIV*)work_v_buf, (__UNIT_TYPE_DIV*)q_buf, (__UNIT_TYPE_DIV*)r_buf);

	mov	rax, QWORD PTR r_buf$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR q_buf$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR work_v_buf$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR v_count_2$[rbp]
	mov	r8, QWORD PTR v_buf_2$[rbp]
	mov	rdx, QWORD PTR u_count_2$[rbp]
	mov	rcx, QWORD PTR u_buf_2$[rbp]
	call	QWORD PTR fp_DivRem_X_X
$LN15@DivRem_X_X:
$LN6@DivRem_X_X:

; 89   :     }
; 90   : }

	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:DivRem_X_X$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT Rem_X_1W
_TEXT	SEGMENT
up$ = 8
u_count$ = 40
dummy_q$ = 68
r$ = 100
count$ = 136
u_buf$ = 384
u_buf_len$ = 392
v$ = 400
Rem_X_1W PROC						; COMDAT

; 93   : {

$LN25:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 94   :     // u の最上位ワードは 0 でありうることに注意すること。
; 95   :     __UNIT_TYPE_DIV* up = u_buf + u_buf_len - 1;

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4-4]
	mov	QWORD PTR up$[rbp], rax

; 96   :     __UNIT_TYPE u_count = u_buf_len;

	mov	rax, QWORD PTR u_buf_len$[rbp]
	mov	QWORD PTR u_count$[rbp], rax

; 97   :     __UNIT_TYPE_DIV dummy_q;
; 98   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN6@Rem_X_1W
$LN2@Rem_X_1W:

; 99   :     {
; 100  :         while (*up == 0)

	mov	rax, QWORD PTR up$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@Rem_X_1W

; 101  :         {
; 102  :             --up;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 4
	mov	QWORD PTR up$[rbp], rax

; 103  :             --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax

; 104  :         }

	jmp	SHORT $LN2@Rem_X_1W
$LN3@Rem_X_1W:
$LN6@Rem_X_1W:

; 105  :     }
; 106  :     __UNIT_TYPE_DIV r = 0;

	mov	DWORD PTR r$[rbp], 0

; 107  :     __UNIT_TYPE count = u_count >> 5;

	mov	rax, QWORD PTR u_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN4@Rem_X_1W:

; 108  :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	$LN5@Rem_X_1W

; 109  :     {
; 110  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, 0
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 111  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -1
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 112  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -2
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 113  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -3
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 114  :         r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -4
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 115  :         r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -5
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 116  :         r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -6
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 117  :         r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -7
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 118  :         r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -8
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 119  :         r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -9
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 120  :         r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -10
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 121  :         r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -11
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 122  :         r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -12
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 123  :         r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -13
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 124  :         r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -14
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 125  :         r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -15
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 126  :         r = _DIVREM_SINGLE_UNIT(r, up[-16], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -16
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 127  :         r = _DIVREM_SINGLE_UNIT(r, up[-17], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -17
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 128  :         r = _DIVREM_SINGLE_UNIT(r, up[-18], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -18
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 129  :         r = _DIVREM_SINGLE_UNIT(r, up[-19], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -19
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 130  :         r = _DIVREM_SINGLE_UNIT(r, up[-20], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -20
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 131  :         r = _DIVREM_SINGLE_UNIT(r, up[-21], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -21
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 132  :         r = _DIVREM_SINGLE_UNIT(r, up[-22], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -22
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 133  :         r = _DIVREM_SINGLE_UNIT(r, up[-23], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -23
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 134  :         r = _DIVREM_SINGLE_UNIT(r, up[-24], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -24
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 135  :         r = _DIVREM_SINGLE_UNIT(r, up[-25], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -25
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 136  :         r = _DIVREM_SINGLE_UNIT(r, up[-26], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -26
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 137  :         r = _DIVREM_SINGLE_UNIT(r, up[-27], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -27
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 138  :         r = _DIVREM_SINGLE_UNIT(r, up[-28], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -28
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 139  :         r = _DIVREM_SINGLE_UNIT(r, up[-29], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -29
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 140  :         r = _DIVREM_SINGLE_UNIT(r, up[-30], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -30
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 141  :         r = _DIVREM_SINGLE_UNIT(r, up[-31], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -31
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 142  :         up -= 32;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 128				; 00000080H
	mov	QWORD PTR up$[rbp], rax

; 143  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 144  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 145  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN7@Rem_X_1W

; 146  :             AddToDIV64Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToDIV64Counter
	jmp	SHORT $LN8@Rem_X_1W
$LN7@Rem_X_1W:

; 147  :         else
; 148  :             AddToDIV32Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToDIV32Counter
$LN8@Rem_X_1W:

; 149  : #endif
; 150  :     }

	jmp	$LN4@Rem_X_1W
$LN5@Rem_X_1W:

; 151  : 
; 152  :     if (u_count & 0x10)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN9@Rem_X_1W

; 153  :     {
; 154  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, 0
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 155  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -1
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 156  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -2
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 157  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -3
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 158  :         r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -4
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 159  :         r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -5
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 160  :         r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -6
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 161  :         r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -7
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 162  :         r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -8
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 163  :         r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -9
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 164  :         r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -10
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 165  :         r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -11
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 166  :         r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -12
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 167  :         r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -13
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 168  :         r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -14
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 169  :         r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -15
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 170  :         up -= 16;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 64					; 00000040H
	mov	QWORD PTR up$[rbp], rax

; 171  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 172  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN10@Rem_X_1W

; 173  :             AddToDIV64Counter(16);

	mov	ecx, 16
	call	AddToDIV64Counter
	jmp	SHORT $LN11@Rem_X_1W
$LN10@Rem_X_1W:

; 174  :         else
; 175  :             AddToDIV32Counter(16);

	mov	ecx, 16
	call	AddToDIV32Counter
$LN11@Rem_X_1W:
$LN9@Rem_X_1W:

; 176  : #endif
; 177  :     }
; 178  : 
; 179  :     if (u_count & 0x8)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN12@Rem_X_1W

; 180  :     {
; 181  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, 0
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 182  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -1
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 183  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -2
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 184  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -3
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 185  :         r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -4
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 186  :         r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -5
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 187  :         r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -6
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 188  :         r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -7
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 189  :         up -= 8;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR up$[rbp], rax

; 190  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 191  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN13@Rem_X_1W

; 192  :             AddToDIV64Counter(8);

	mov	ecx, 8
	call	AddToDIV64Counter
	jmp	SHORT $LN14@Rem_X_1W
$LN13@Rem_X_1W:

; 193  :         else
; 194  :             AddToDIV32Counter(8);

	mov	ecx, 8
	call	AddToDIV32Counter
$LN14@Rem_X_1W:
$LN12@Rem_X_1W:

; 195  : #endif
; 196  :     }
; 197  : 
; 198  :     if (u_count & 0x4)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN15@Rem_X_1W

; 199  :     {
; 200  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, 0
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 201  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -1
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 202  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -2
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 203  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -3
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 204  :         up -= 4;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 16
	mov	QWORD PTR up$[rbp], rax

; 205  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 206  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN16@Rem_X_1W

; 207  :             AddToDIV64Counter(4);

	mov	ecx, 4
	call	AddToDIV64Counter
	jmp	SHORT $LN17@Rem_X_1W
$LN16@Rem_X_1W:

; 208  :         else
; 209  :             AddToDIV32Counter(4);

	mov	ecx, 4
	call	AddToDIV32Counter
$LN17@Rem_X_1W:
$LN15@Rem_X_1W:

; 210  : #endif
; 211  :     }
; 212  : 
; 213  :     if (u_count & 0x2)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	SHORT $LN18@Rem_X_1W

; 214  :     {
; 215  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, 0
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 216  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, -1
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 217  :         up -= 2;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 8
	mov	QWORD PTR up$[rbp], rax

; 218  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 219  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN19@Rem_X_1W

; 220  :             AddToDIV64Counter(2);

	mov	ecx, 2
	call	AddToDIV64Counter
	jmp	SHORT $LN20@Rem_X_1W
$LN19@Rem_X_1W:

; 221  :         else
; 222  :             AddToDIV32Counter(2);

	mov	ecx, 2
	call	AddToDIV32Counter
$LN20@Rem_X_1W:
$LN18@Rem_X_1W:

; 223  : #endif
; 224  :     }
; 225  : 
; 226  :     if (u_count & 0x1)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN21@Rem_X_1W

; 227  :     {
; 228  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

	mov	eax, 4
	imul	rax, rax, 0
	lea	r9, QWORD PTR dummy_q$[rbp]
	mov	r8d, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 229  :         up -= 1;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 4
	mov	QWORD PTR up$[rbp], rax

; 230  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 231  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN22@Rem_X_1W

; 232  :             IncrementDIV64Counter();

	call	IncrementDIV64Counter
	jmp	SHORT $LN23@Rem_X_1W
$LN22@Rem_X_1W:

; 233  :         else
; 234  :             IncrementDIV32Counter();

	call	IncrementDIV32Counter
$LN23@Rem_X_1W:
$LN21@Rem_X_1W:

; 235  : #endif
; 236  :     }
; 237  : 
; 238  :     return (r);

	mov	eax, DWORD PTR r$[rbp]

; 239  : }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:Rem_X_1W$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
Rem_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_1W
_TEXT	SEGMENT
up$ = 8
qp$ = 40
u_count$ = 72
r$ = 100
count$ = 136
u_buf$ = 384
u_buf_len$ = 392
v$ = 400
q_buf$ = 408
r_buf$ = 416
DivRem_X_1W PROC					; COMDAT

; 242  : {

$LN25:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__531E8CBE_pmc_divrem@c
	call	__CheckForDebuggerJustMyCode

; 243  :     // u の最上位ワードは 0 でありうることに注意すること。
; 244  :     __UNIT_TYPE_DIV* up = u_buf + u_buf_len - 1;

	mov	rax, QWORD PTR u_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4-4]
	mov	QWORD PTR up$[rbp], rax

; 245  :     __UNIT_TYPE_DIV* qp = q_buf + u_buf_len - 1;

	mov	rax, QWORD PTR q_buf$[rbp]
	mov	rcx, QWORD PTR u_buf_len$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4-4]
	mov	QWORD PTR qp$[rbp], rax

; 246  :     __UNIT_TYPE u_count = u_buf_len;

	mov	rax, QWORD PTR u_buf_len$[rbp]
	mov	QWORD PTR u_count$[rbp], rax

; 247  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN6@DivRem_X_1
$LN2@DivRem_X_1:

; 248  :     {
; 249  :         while (*up == 0)

	mov	rax, QWORD PTR up$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@DivRem_X_1

; 250  :         {
; 251  :             --up;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 4
	mov	QWORD PTR up$[rbp], rax

; 252  :             --qp;

	mov	rax, QWORD PTR qp$[rbp]
	sub	rax, 4
	mov	QWORD PTR qp$[rbp], rax

; 253  :             --u_count;

	mov	rax, QWORD PTR u_count$[rbp]
	dec	rax
	mov	QWORD PTR u_count$[rbp], rax

; 254  :         }

	jmp	SHORT $LN2@DivRem_X_1
$LN3@DivRem_X_1:
$LN6@DivRem_X_1:

; 255  :     }
; 256  :     __UNIT_TYPE_DIV r = 0;

	mov	DWORD PTR r$[rbp], 0

; 257  :     __UNIT_TYPE count = u_count >> 5;

	mov	rax, QWORD PTR u_count$[rbp]
	shr	rax, 5
	mov	QWORD PTR count$[rbp], rax
$LN4@DivRem_X_1:

; 258  :     while (count != 0)

	cmp	QWORD PTR count$[rbp], 0
	je	$LN5@DivRem_X_1

; 259  :     {
; 260  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 261  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 262  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -2
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 263  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -3
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 264  :         r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

	mov	eax, 4
	imul	rax, rax, -4
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -4
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 265  :         r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

	mov	eax, 4
	imul	rax, rax, -5
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -5
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 266  :         r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

	mov	eax, 4
	imul	rax, rax, -6
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -6
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 267  :         r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

	mov	eax, 4
	imul	rax, rax, -7
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -7
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 268  :         r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &qp[-8]);

	mov	eax, 4
	imul	rax, rax, -8
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -8
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 269  :         r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &qp[-9]);

	mov	eax, 4
	imul	rax, rax, -9
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -9
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 270  :         r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &qp[-10]);

	mov	eax, 4
	imul	rax, rax, -10
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -10
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 271  :         r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &qp[-11]);

	mov	eax, 4
	imul	rax, rax, -11
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -11
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 272  :         r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &qp[-12]);

	mov	eax, 4
	imul	rax, rax, -12
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -12
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 273  :         r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &qp[-13]);

	mov	eax, 4
	imul	rax, rax, -13
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -13
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 274  :         r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &qp[-14]);

	mov	eax, 4
	imul	rax, rax, -14
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -14
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 275  :         r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &qp[-15]);

	mov	eax, 4
	imul	rax, rax, -15
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -15
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 276  :         r = _DIVREM_SINGLE_UNIT(r, up[-16], v, &qp[-16]);

	mov	eax, 4
	imul	rax, rax, -16
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -16
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 277  :         r = _DIVREM_SINGLE_UNIT(r, up[-17], v, &qp[-17]);

	mov	eax, 4
	imul	rax, rax, -17
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -17
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 278  :         r = _DIVREM_SINGLE_UNIT(r, up[-18], v, &qp[-18]);

	mov	eax, 4
	imul	rax, rax, -18
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -18
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 279  :         r = _DIVREM_SINGLE_UNIT(r, up[-19], v, &qp[-19]);

	mov	eax, 4
	imul	rax, rax, -19
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -19
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 280  :         r = _DIVREM_SINGLE_UNIT(r, up[-20], v, &qp[-20]);

	mov	eax, 4
	imul	rax, rax, -20
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -20
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 281  :         r = _DIVREM_SINGLE_UNIT(r, up[-21], v, &qp[-21]);

	mov	eax, 4
	imul	rax, rax, -21
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -21
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 282  :         r = _DIVREM_SINGLE_UNIT(r, up[-22], v, &qp[-22]);

	mov	eax, 4
	imul	rax, rax, -22
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -22
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 283  :         r = _DIVREM_SINGLE_UNIT(r, up[-23], v, &qp[-23]);

	mov	eax, 4
	imul	rax, rax, -23
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -23
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 284  :         r = _DIVREM_SINGLE_UNIT(r, up[-24], v, &qp[-24]);

	mov	eax, 4
	imul	rax, rax, -24
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -24
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 285  :         r = _DIVREM_SINGLE_UNIT(r, up[-25], v, &qp[-25]);

	mov	eax, 4
	imul	rax, rax, -25
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -25
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 286  :         r = _DIVREM_SINGLE_UNIT(r, up[-26], v, &qp[-26]);

	mov	eax, 4
	imul	rax, rax, -26
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -26
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 287  :         r = _DIVREM_SINGLE_UNIT(r, up[-27], v, &qp[-27]);

	mov	eax, 4
	imul	rax, rax, -27
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -27
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 288  :         r = _DIVREM_SINGLE_UNIT(r, up[-28], v, &qp[-28]);

	mov	eax, 4
	imul	rax, rax, -28
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -28
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 289  :         r = _DIVREM_SINGLE_UNIT(r, up[-29], v, &qp[-29]);

	mov	eax, 4
	imul	rax, rax, -29
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -29
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 290  :         r = _DIVREM_SINGLE_UNIT(r, up[-30], v, &qp[-30]);

	mov	eax, 4
	imul	rax, rax, -30
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -30
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 291  :         r = _DIVREM_SINGLE_UNIT(r, up[-31], v, &qp[-31]);

	mov	eax, 4
	imul	rax, rax, -31
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -31
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 292  :         up -= 32;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 128				; 00000080H
	mov	QWORD PTR up$[rbp], rax

; 293  :         qp -= 32;

	mov	rax, QWORD PTR qp$[rbp]
	sub	rax, 128				; 00000080H
	mov	QWORD PTR qp$[rbp], rax

; 294  :         --count;

	mov	rax, QWORD PTR count$[rbp]
	dec	rax
	mov	QWORD PTR count$[rbp], rax

; 295  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 296  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN7@DivRem_X_1

; 297  :             AddToDIV64Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToDIV64Counter
	jmp	SHORT $LN8@DivRem_X_1
$LN7@DivRem_X_1:

; 298  :         else
; 299  :             AddToDIV32Counter(32);

	mov	ecx, 32					; 00000020H
	call	AddToDIV32Counter
$LN8@DivRem_X_1:

; 300  : #endif
; 301  :     }

	jmp	$LN4@DivRem_X_1
$LN5@DivRem_X_1:

; 302  : 
; 303  :     if (u_count & 0x10)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 16
	test	rax, rax
	je	$LN9@DivRem_X_1

; 304  :     {
; 305  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 306  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 307  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -2
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 308  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -3
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 309  :         r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

	mov	eax, 4
	imul	rax, rax, -4
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -4
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 310  :         r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

	mov	eax, 4
	imul	rax, rax, -5
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -5
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 311  :         r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

	mov	eax, 4
	imul	rax, rax, -6
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -6
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 312  :         r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

	mov	eax, 4
	imul	rax, rax, -7
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -7
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 313  :         r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &qp[-8]);

	mov	eax, 4
	imul	rax, rax, -8
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -8
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 314  :         r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &qp[-9]);

	mov	eax, 4
	imul	rax, rax, -9
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -9
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 315  :         r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &qp[-10]);

	mov	eax, 4
	imul	rax, rax, -10
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -10
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 316  :         r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &qp[-11]);

	mov	eax, 4
	imul	rax, rax, -11
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -11
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 317  :         r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &qp[-12]);

	mov	eax, 4
	imul	rax, rax, -12
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -12
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 318  :         r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &qp[-13]);

	mov	eax, 4
	imul	rax, rax, -13
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -13
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 319  :         r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &qp[-14]);

	mov	eax, 4
	imul	rax, rax, -14
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -14
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 320  :         r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &qp[-15]);

	mov	eax, 4
	imul	rax, rax, -15
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -15
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 321  :         up -= 16;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 64					; 00000040H
	mov	QWORD PTR up$[rbp], rax

; 322  :         qp -= 16;

	mov	rax, QWORD PTR qp$[rbp]
	sub	rax, 64					; 00000040H
	mov	QWORD PTR qp$[rbp], rax

; 323  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 324  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN10@DivRem_X_1

; 325  :             AddToDIV64Counter(16);

	mov	ecx, 16
	call	AddToDIV64Counter
	jmp	SHORT $LN11@DivRem_X_1
$LN10@DivRem_X_1:

; 326  :         else
; 327  :             AddToDIV32Counter(16);

	mov	ecx, 16
	call	AddToDIV32Counter
$LN11@DivRem_X_1:
$LN9@DivRem_X_1:

; 328  : #endif
; 329  :     }
; 330  : 
; 331  :     if (u_count & 0x8)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 8
	test	rax, rax
	je	$LN12@DivRem_X_1

; 332  :     {
; 333  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 334  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 335  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -2
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 336  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -3
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 337  :         r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

	mov	eax, 4
	imul	rax, rax, -4
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -4
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 338  :         r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

	mov	eax, 4
	imul	rax, rax, -5
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -5
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 339  :         r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

	mov	eax, 4
	imul	rax, rax, -6
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -6
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 340  :         r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

	mov	eax, 4
	imul	rax, rax, -7
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -7
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 341  :         up -= 8;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR up$[rbp], rax

; 342  :         qp -= 8;

	mov	rax, QWORD PTR qp$[rbp]
	sub	rax, 32					; 00000020H
	mov	QWORD PTR qp$[rbp], rax

; 343  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 344  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN13@DivRem_X_1

; 345  :             AddToDIV64Counter(8);

	mov	ecx, 8
	call	AddToDIV64Counter
	jmp	SHORT $LN14@DivRem_X_1
$LN13@DivRem_X_1:

; 346  :         else
; 347  :             AddToDIV32Counter(8);

	mov	ecx, 8
	call	AddToDIV32Counter
$LN14@DivRem_X_1:
$LN12@DivRem_X_1:

; 348  : #endif
; 349  :     }
; 350  : 
; 351  :     if (u_count & 0x4)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 4
	test	rax, rax
	je	$LN15@DivRem_X_1

; 352  :     {
; 353  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 354  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 355  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -2
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 356  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

	mov	eax, 4
	imul	rax, rax, -3
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -3
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 357  :         up -= 4;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 16
	mov	QWORD PTR up$[rbp], rax

; 358  :         qp -= 4;

	mov	rax, QWORD PTR qp$[rbp]
	sub	rax, 16
	mov	QWORD PTR qp$[rbp], rax

; 359  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 360  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN16@DivRem_X_1

; 361  :             AddToDIV64Counter(4);

	mov	ecx, 4
	call	AddToDIV64Counter
	jmp	SHORT $LN17@DivRem_X_1
$LN16@DivRem_X_1:

; 362  :         else
; 363  :             AddToDIV32Counter(4);

	mov	ecx, 4
	call	AddToDIV32Counter
$LN17@DivRem_X_1:
$LN15@DivRem_X_1:

; 364  : #endif
; 365  :     }
; 366  : 
; 367  :     if (u_count & 0x2)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 2
	test	rax, rax
	je	$LN18@DivRem_X_1

; 368  :     {
; 369  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 370  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 371  :         up -= 2;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 8
	mov	QWORD PTR up$[rbp], rax

; 372  :         qp -= 2;

	mov	rax, QWORD PTR qp$[rbp]
	sub	rax, 8
	mov	QWORD PTR qp$[rbp], rax

; 373  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 374  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN19@DivRem_X_1

; 375  :             AddToDIV64Counter(2);

	mov	ecx, 2
	call	AddToDIV64Counter
	jmp	SHORT $LN20@DivRem_X_1
$LN19@DivRem_X_1:

; 376  :         else
; 377  :             AddToDIV32Counter(2);

	mov	ecx, 2
	call	AddToDIV32Counter
$LN20@DivRem_X_1:
$LN18@DivRem_X_1:

; 378  : #endif
; 379  :     }
; 380  : 
; 381  :     if (u_count & 0x1)

	mov	rax, QWORD PTR u_count$[rbp]
	and	rax, 1
	test	rax, rax
	je	SHORT $LN21@DivRem_X_1

; 382  :     {
; 383  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR qp$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	r9, rax
	mov	r8d, DWORD PTR v$[rbp]
	mov	rax, QWORD PTR up$[rbp]
	mov	edx, DWORD PTR [rax+rcx]
	mov	ecx, DWORD PTR r$[rbp]
	call	_DIVREM_SINGLE_UNIT
	mov	DWORD PTR r$[rbp], eax

; 384  :         up -= 1;

	mov	rax, QWORD PTR up$[rbp]
	sub	rax, 4
	mov	QWORD PTR up$[rbp], rax

; 385  :         qp -= 1;

	mov	rax, QWORD PTR qp$[rbp]
	sub	rax, 4
	mov	QWORD PTR qp$[rbp], rax

; 386  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 387  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN22@DivRem_X_1

; 388  :             IncrementDIV64Counter();

	call	IncrementDIV64Counter
	jmp	SHORT $LN23@DivRem_X_1
$LN22@DivRem_X_1:

; 389  :         else
; 390  :             IncrementDIV32Counter();

	call	IncrementDIV32Counter
$LN23@DivRem_X_1:
$LN21@DivRem_X_1:

; 391  : #endif
; 392  :     }
; 393  : 
; 394  :     *r_buf = r;

	mov	rax, QWORD PTR r_buf$[rbp]
	mov	ecx, DWORD PTR r$[rbp]
	mov	DWORD PTR [rax], ecx

; 395  : }

	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
DivRem_X_1W ENDP
_TEXT	ENDS
END
