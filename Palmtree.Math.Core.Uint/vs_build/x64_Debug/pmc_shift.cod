; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__BCD96457_pmc_shift@cpp DB 01H
msvcjmc	ENDS
PUBLIC	??0exception@std@@QEAA@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
PUBLIC	?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
PUBLIC	?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Shift
PUBLIC	?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
PUBLIC	?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@ ; `string'
PUBLIC	??_C@_1EG@JMDKLBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAh?$AAi?$AAf?$AAt?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP@ ; `string'
PUBLIC	_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_13ICFKHAEN@?$AAu@				; `string'
PUBLIC	??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ ; `string'
PUBLIC	??_C@_1EA@IHJNEJEM@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0exception@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+179
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+182
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z DD imagerel $LN16
	DD	imagerel $LN16+8020
	DD	imagerel $unwind$?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z DD imagerel $LN15
	DD	imagerel $LN15+7986
	DD	imagerel $unwind$?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z DD imagerel $LN9
	DD	imagerel $LN9+400
	DD	imagerel $unwind$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA DD imagerel ?dtor$0@?0??PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z DD imagerel $LN9
	DD	imagerel $LN9+400
	DD	imagerel $unwind$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA DD imagerel ?dtor$0@?0??PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+100
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_UNIT DD imagerel _ZERO_MEMORY_UNIT
	DD	imagerel _ZERO_MEMORY_UNIT+88
	DD	imagerel $unwind$_ZERO_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GET_ABS_32 DD imagerel GET_ABS_32
	DD	imagerel GET_ABS_32+175
	DD	imagerel $unwind$GET_ABS_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD imagerel ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	imagerel ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z+389
	DD	imagerel $unwind$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA DD imagerel ?dtor$0@?0??PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD imagerel ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	imagerel ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z+360
	DD	imagerel $unwind$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA DD imagerel ?dtor$0@?0??PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA
	DD	imagerel ?dtor$0@?0??PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 01H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1EA@IHJNEJEM@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@
CONST	SEGMENT
??_C@_1EA@IHJNEJEM@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'a', 00H, 'd', 00H, 'd', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M'
	DB	00H, 'C', 00H, '_', 00H, 'L', 00H, 'e', 00H, 'f', 00H, 't', 00H
	DB	'S', 00H, 'h', 00H, 'i', 00H, 'f', 00H, 't', 00H, '_', 00H, 'X'
	DB	00H, '_', 00H, 'I', 00H, ';', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
CONST	SEGMENT
??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ DB 015H
	DB	'_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_13ICFKHAEN@?$AAu@
CONST	SEGMENT
??_C@_13ICFKHAEN@?$AAu@ DB 'u', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1EG@JMDKLBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAh?$AAi?$AAf?$AAt?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP@
CONST	SEGMENT
??_C@_1EG@JMDKLBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAh?$AAi?$AAf?$AAt?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 'h', 00H, 'i', 00H
	DB	'f', 00H, 't', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';'
	DB	00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, 'S', 00H, 'h', 00H, 'i', 00H, 'f'
	DB	00H, 't', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ';', 00H
	DB	'1', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
CONST	SEGMENT
??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@ DB 088H
	DB	'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H, '0k00RT', 090H
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT _CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DQ	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DQ	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DQ	FLAT:??_EException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD imagerel ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z+144
	DD	00H
	DD	imagerel ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z+312
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD 035053911H
	DD	01123317H
	DD	0700b003bH
	DD	0500aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcVarDesc DD 038H ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
	DD	020H
	DQ	FLAT:?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcName$0
	ORG $+48
?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
	DD	00H
	DQ	FLAT:?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcVarDesc
$cppxdata$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	01b8H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD imagerel ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z+188
	DD	00H
	DD	imagerel ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z+341
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD 035053911H
	DD	01123317H
	DD	0700b003bH
	DD	0500aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+11
?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcVarDesc DD 058H ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
	DD	020H
	DQ	FLAT:?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcName$0
	ORG $+48
?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcFrameData DD 01H ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
	DD	00H
	DQ	FLAT:?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcVarDesc
$cppxdata$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
	DD	01b8H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GET_ABS_32 DD 025052d01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_UNIT DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z DD imagerel ?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z+205
	DD	00H
	DD	imagerel ?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z+352
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z DD 025053911H
	DD	01122317H
	DD	0700b0051H
	DD	0500aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcName$1 DB 06eH ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+1
?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcVarDesc DD 084H ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
	DD	01H
	DQ	FLAT:?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcName$0
	ORG $+96
?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
	DD	00H
	DQ	FLAT:?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcVarDesc
$cppxdata$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
	DD	0268H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z DD imagerel ?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z+205
	DD	00H
	DD	imagerel ?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z+352
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z DD 025053911H
	DD	01122317H
	DD	0700b0051H
	DD	0500aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcName$0 DB 072H ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
	DB	06fH
	DB	06fH
	DB	074H
	DB	00H
	ORG $+3
?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcName$1 DB 06eH ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+1
?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcVarDesc DD 084H ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
	DD	01H
	DQ	FLAT:?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcName$0
	ORG $+96
?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcFrameData DD 02H ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
	DD	00H
	DQ	FLAT:?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcVarDesc
$cppxdata$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
	DD	0268H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z DD 025053901H
	DD	011d2322H
	DD	070160041H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z DD 025053901H
	DD	011d2322H
	DD	070160045H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+108
	DD	00H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+125
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+91
	DD	00H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+108
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+108
	DD	00H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+125
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 025053f19H
	DD	0118231dH
	DD	070110021H
	DD	05010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+84
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+165
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 025053a19H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z+93
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z+162
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 025054319H
	DD	011c2321H
	DD	070150021H
	DD	05014H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1exception@std@@UEAA@XZ DD imagerel ??1exception@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1exception@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1exception@std@@UEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1exception@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0exception@std@@QEAA@XZ DD imagerel ??0exception@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0exception@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0exception@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0exception@std@@QEAA@XZ
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
_TEXT	SEGMENT
root$4 = 8
u_bit_count$5 = 72
w_bit_count$6 = 104
w$7 = 136
$T8 = 360
$T9 = 392
u$ = 448
n$ = 456
?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp, COMDAT

; 332  :     {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  00012	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+504]
  0002e	48 c7 85 88 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T9[rbp], -2
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BCD96457_pmc_shift@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 333  :         if (u->IS_ZERO)

  00045	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004c	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0004f	83 e0 01	 and	 eax, 1
  00052	85 c0		 test	 eax, eax
  00054	74 11		 je	 SHORT $LN2@PMC_LeftSh

; 334  :             return (&number_zero);

  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0005d	e9 e6 00 00 00	 jmp	 $LN1@PMC_LeftSh
  00062	e9 e1 00 00 00	 jmp	 $LN1@PMC_LeftSh
$LN2@PMC_LeftSh:

; 335  :         else if (n == 0)

  00067	83 bd c8 01 00
	00 00		 cmp	 DWORD PTR n$[rbp], 0
  0006e	75 16		 jne	 SHORT $LN4@PMC_LeftSh

; 336  :             return (DuplicateNumber(u));

  00070	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  00077	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0007c	e9 c7 00 00 00	 jmp	 $LN1@PMC_LeftSh

; 337  :         else

  00081	e9 c2 00 00 00	 jmp	 $LN1@PMC_LeftSh
$LN4@PMC_LeftSh:

; 338  :         {
; 339  :             ResourceHolderUINT root;

  00086	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  0008a	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0008f	90		 npad	 1

; 340  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00090	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00097	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0009b	48 89 45 48	 mov	 QWORD PTR u_bit_count$5[rbp], rax

; 341  :             __UNIT_TYPE w_bit_count = u_bit_count + n;

  0009f	8b 85 c8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000a5	48 8b 4d 48	 mov	 rcx, QWORD PTR u_bit_count$5[rbp]
  000a9	48 03 c8	 add	 rcx, rax
  000ac	48 8b c1	 mov	 rax, rcx
  000af	48 89 45 68	 mov	 QWORD PTR w_bit_count$6[rbp], rax

; 342  :             NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000b3	48 8b 55 68	 mov	 rdx, QWORD PTR w_bit_count$6[rbp]
  000b7	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  000bb	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000c0	48 89 85 88 00
	00 00		 mov	 QWORD PTR w$7[rbp], rax

; 343  :             LeftShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, n, w->BLOCK, FALSE);

  000c7	8b 85 c8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000cd	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000d5	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR w$7[rbp]
  000dc	4c 8b 49 40	 mov	 r9, QWORD PTR [rcx+64]
  000e0	44 8b c0	 mov	 r8d, eax
  000e3	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000ea	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  000ee	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000f5	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  000f9	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp

; 344  :             root.CheckNumber(w);

  000fe	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR w$7[rbp]
  00105	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00109	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 345  :             CommitNumber(w);

  0010e	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR w$7[rbp]
  00115	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 346  :             root.UnlinkNumber(w);

  0011a	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR w$7[rbp]
  00121	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00125	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 347  :             return (w);

  0012a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR w$7[rbp]
  00131	48 89 85 68 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  00138	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  0013c	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00141	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]
$LN1@PMC_LeftSh:

; 348  :         }
; 349  :     }

  00148	48 8b f8	 mov	 rdi, rax
  0014b	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0014f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcFrameData
  00156	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0015b	48 8b c7	 mov	 rax, rdi
  0015e	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  00165	5f		 pop	 rdi
  00166	5d		 pop	 rbp
  00167	c3		 ret	 0
?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$4 = 8
u_bit_count$5 = 72
w_bit_count$6 = 104
w$7 = 136
$T8 = 360
$T9 = 392
u$ = 448
n$ = 456
?dtor$0@?0??PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
root$4 = 8
u_bit_count$5 = 72
w_bit_count$6 = 104
w$7 = 136
$T8 = 360
$T9 = 392
u$ = 448
n$ = 456
?dtor$0@?0??PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR root$4[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z
_TEXT	SEGMENT
u_bit_count$4 = 8
root$5 = 40
w_bit_count$6 = 104
w$7 = 136
$T8 = 360
$T9 = 392
u$ = 448
n$ = 456
?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp, COMDAT

; 307  :     {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  00012	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+504]
  0002e	48 c7 85 88 01
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T9[rbp], -2
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BCD96457_pmc_shift@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 308  :         if (u->IS_ZERO)

  00045	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0004c	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0004f	83 e0 01	 and	 eax, 1
  00052	85 c0		 test	 eax, eax
  00054	74 11		 je	 SHORT $LN2@PMC_RightS

; 309  :             return (&number_zero);

  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0005d	e9 03 01 00 00	 jmp	 $LN1@PMC_RightS
  00062	e9 fe 00 00 00	 jmp	 $LN1@PMC_RightS
$LN2@PMC_RightS:

; 310  :         else if (n == 0)

  00067	83 bd c8 01 00
	00 00		 cmp	 DWORD PTR n$[rbp], 0
  0006e	75 16		 jne	 SHORT $LN4@PMC_RightS

; 311  :             return (DuplicateNumber(u));

  00070	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR u$[rbp]
  00077	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0007c	e9 e4 00 00 00	 jmp	 $LN1@PMC_RightS

; 312  :         else

  00081	e9 df 00 00 00	 jmp	 $LN1@PMC_RightS
$LN4@PMC_RightS:

; 313  :         {
; 314  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00086	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  0008d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00091	48 89 45 08	 mov	 QWORD PTR u_bit_count$4[rbp], rax

; 315  :             if (u_bit_count <= n)

  00095	8b 85 c8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  0009b	48 39 45 08	 cmp	 QWORD PTR u_bit_count$4[rbp], rax
  0009f	77 11		 ja	 SHORT $LN6@PMC_RightS

; 316  :                 return (&number_zero);

  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  000a8	e9 b8 00 00 00	 jmp	 $LN1@PMC_RightS

; 317  :             else

  000ad	e9 b3 00 00 00	 jmp	 $LN1@PMC_RightS
$LN6@PMC_RightS:

; 318  :             {
; 319  :                 ResourceHolderUINT root;

  000b2	48 8d 4d 28	 lea	 rcx, QWORD PTR root$5[rbp]
  000b6	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000bb	90		 npad	 1

; 320  :                 __UNIT_TYPE w_bit_count = u_bit_count - n;

  000bc	8b 85 c8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000c2	48 8b 4d 08	 mov	 rcx, QWORD PTR u_bit_count$4[rbp]
  000c6	48 2b c8	 sub	 rcx, rax
  000c9	48 8b c1	 mov	 rax, rcx
  000cc	48 89 45 68	 mov	 QWORD PTR w_bit_count$6[rbp], rax

; 321  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000d0	48 8b 55 68	 mov	 rdx, QWORD PTR w_bit_count$6[rbp]
  000d4	48 8d 4d 28	 lea	 rcx, QWORD PTR root$5[rbp]
  000d8	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000dd	48 89 85 88 00
	00 00		 mov	 QWORD PTR w$7[rbp], rax

; 322  :                 RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, n, w->BLOCK, FALSE);

  000e4	8b 85 c8 01 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000ea	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000f2	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR w$7[rbp]
  000f9	4c 8b 49 40	 mov	 r9, QWORD PTR [rcx+64]
  000fd	44 8b c0	 mov	 r8d, eax
  00100	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00107	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  0010b	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  00112	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00116	e8 00 00 00 00	 call	 ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp

; 323  :                 root.CheckNumber(w);

  0011b	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR w$7[rbp]
  00122	48 8d 4d 28	 lea	 rcx, QWORD PTR root$5[rbp]
  00126	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 324  :                 CommitNumber(w);

  0012b	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR w$7[rbp]
  00132	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 325  :                 root.UnlinkNumber(w);

  00137	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR w$7[rbp]
  0013e	48 8d 4d 28	 lea	 rcx, QWORD PTR root$5[rbp]
  00142	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 326  :                 return (w);

  00147	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR w$7[rbp]
  0014e	48 89 85 68 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  00155	48 8d 4d 28	 lea	 rcx, QWORD PTR root$5[rbp]
  00159	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0015e	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]
$LN1@PMC_RightS:

; 327  :             }
; 328  :         }
; 329  :     }

  00165	48 8b f8	 mov	 rdi, rax
  00168	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0016c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z$rtcFrameData
  00173	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00178	48 8b c7	 mov	 rax, rdi
  0017b	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  00182	5f		 pop	 rdi
  00183	5d		 pop	 rbp
  00184	c3		 ret	 0
?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$4 = 8
root$5 = 40
w_bit_count$6 = 104
w$7 = 136
$T8 = 360
$T9 = 392
u$ = 448
n$ = 456
?dtor$0@?0??PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$5[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
u_bit_count$4 = 8
root$5 = 40
w_bit_count$6 = 104
w$7 = 136
$T8 = 360
$T9 = 392
u$ = 448
n$ = 456
?dtor$0@?0??PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$5[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT GET_ABS_32
_TEXT	SEGMENT
tv68 = 192
u$ = 240
sign$ = 248
GET_ABS_32 PROC						; COMDAT

; 582  :         {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR [rsp+280]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00034	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 583  :             if (u > 0)

  00039	83 bd f0 00 00
	00 00		 cmp	 DWORD PTR u$[rbp], 0
  00040	7e 14		 jle	 SHORT $LN2@GET_ABS_32

; 584  :             {
; 585  :                 *sign = 1;

  00042	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR sign$[rbp]
  00049	c6 00 01	 mov	 BYTE PTR [rax], 1

; 586  :                 return ((_UINT32_T)u);

  0004c	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR u$[rbp]
  00052	eb 51		 jmp	 SHORT $LN1@GET_ABS_32
  00054	eb 4f		 jmp	 SHORT $LN3@GET_ABS_32
$LN2@GET_ABS_32:

; 587  :             }
; 588  :             else if (u == 0)

  00056	83 bd f0 00 00
	00 00		 cmp	 DWORD PTR u$[rbp], 0
  0005d	75 10		 jne	 SHORT $LN4@GET_ABS_32

; 589  :             {
; 590  :                 *sign = 0;

  0005f	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR sign$[rbp]
  00066	c6 00 00	 mov	 BYTE PTR [rax], 0

; 591  :                 return (0);

  00069	33 c0		 xor	 eax, eax
  0006b	eb 38		 jmp	 SHORT $LN1@GET_ABS_32

; 592  :             }
; 593  :             else

  0006d	eb 36		 jmp	 SHORT $LN5@GET_ABS_32
$LN4@GET_ABS_32:

; 594  :             {
; 595  :                 *sign = -1;

  0006f	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR sign$[rbp]
  00076	c6 00 ff	 mov	 BYTE PTR [rax], -1

; 596  :                 return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

  00079	81 bd f0 00 00
	00 00 00 00 80	 cmp	 DWORD PTR u$[rbp], -2147483648 ; 80000000H
  00083	75 0c		 jne	 SHORT $LN7@GET_ABS_32
  00085	c7 85 c0 00 00
	00 00 00 00 80	 mov	 DWORD PTR tv68[rbp], -2147483648 ; 80000000H
  0008f	eb 0e		 jmp	 SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
  00091	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR u$[rbp]
  00097	f7 d8		 neg	 eax
  00099	89 85 c0 00 00
	00		 mov	 DWORD PTR tv68[rbp], eax
$LN8@GET_ABS_32:
  0009f	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
$LN5@GET_ABS_32:
$LN3@GET_ABS_32:
$LN1@GET_ABS_32:

; 597  :             }
; 598  :         }

  000a5	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000ac	5f		 pop	 rdi
  000ad	5d		 pop	 rbp
  000ae	c3		 ret	 0
GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_UNIT PROC					; COMDAT

; 96   :         {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  00036	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 97   : #ifdef _M_IX86
; 98   :             __stosd((unsigned long*)d, 0, (unsigned long)count);
; 99   : #elif defined(_M_X64)
; 100  :             __stosq(d, 0, count);

  0003b	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR d$[rbp]
  00042	33 c0		 xor	 eax, eax
  00044	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR count$[rbp]
  0004b	f3 48 ab	 rep stosq

; 101  : #else
; 102  : #error unknown platform
; 103  : #endif
; 104  :         }

  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
_ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_UNIT PROC					; COMDAT

; 63   :         {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8b fc	 mov	 rdi, rsp
  00021	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);

  00041	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR d$[rbp]
  00048	48 8b b5 e8 00
	00 00		 mov	 rsi, QWORD PTR s$[rbp]
  0004f	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR count$[rbp]
  00056	f3 48 a5	 rep movsq

; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  00059	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  00060	5f		 pop	 rdi
  00061	5e		 pop	 rsi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
_TEXT	SEGMENT
nu$ = 8
root$ = 40
n_sign$ = 100
n_abs$ = 132
w$ = 168
$T5 = 392
$T6 = 472
$T7 = 552
$T8 = 584
tv91 = 600
u$ = 640
n$ = 648
?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z PROC ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I, COMDAT

; 375  :     {

$LN9:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 88 02
	00 00		 sub	 rsp, 648		; 00000288H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+680]
  0002e	48 c7 85 48 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T8[rbp], -2
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BCD96457_pmc_shift@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 376  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

  00045	33 c0		 xor	 eax, eax
  00047	85 c0		 test	 eax, eax
  00049	74 2d		 je	 SHORT $LN2@PMC_LeftSh

; 377  :         {
; 378  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 379  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_LeftShift_X_I;1");

  0004b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EA@IHJNEJEM@?$AAp?$AAm?$AAc?$AA_?$AAa?$AAd?$AAd?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP?$AAM?$AAC@
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
  00059	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00060	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0006c	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00073	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_LeftSh:

; 380  :         }
; 381  :         if (u == nullptr)

  00078	48 83 bd 80 02
	00 00 00	 cmp	 QWORD PTR u$[rbp], 0
  00080	75 2d		 jne	 SHORT $LN3@PMC_LeftSh

; 382  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00082	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13ICFKHAEN@?$AAu@
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00090	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00097	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a3	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000aa	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_LeftSh:

; 383  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  000af	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000b6	48 89 45 08	 mov	 QWORD PTR nu$[rbp], rax

; 384  :         CheckNumber(nu);

  000ba	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  000be	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 385  :         ResourceHolderUINT root;

  000c3	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  000c7	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000cc	90		 npad	 1

; 386  :         char n_sign;
; 387  :         _UINT32_T n_abs = GET_ABS_32(n, &n_sign);

  000cd	48 8d 55 64	 lea	 rdx, QWORD PTR n_sign$[rbp]
  000d1	8b 8d 88 02 00
	00		 mov	 ecx, DWORD PTR n$[rbp]
  000d7	e8 00 00 00 00	 call	 GET_ABS_32
  000dc	89 85 84 00 00
	00		 mov	 DWORD PTR n_abs$[rbp], eax

; 388  :         NUMBER_HEADER* w = n_sign >= 0 ? PMC_LeftShift_X_I_Imp(nu, n_abs) : PMC_RightShift_X_I_Imp(nu, n_abs);

  000e2	0f be 45 64	 movsx	 eax, BYTE PTR n_sign$[rbp]
  000e6	85 c0		 test	 eax, eax
  000e8	7c 18		 jl	 SHORT $LN5@PMC_LeftSh
  000ea	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR n_abs$[rbp]
  000f0	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  000f4	e8 00 00 00 00	 call	 ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
  000f9	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  00100	eb 16		 jmp	 SHORT $LN6@PMC_LeftSh
$LN5@PMC_LeftSh:
  00102	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR n_abs$[rbp]
  00108	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  0010c	e8 00 00 00 00	 call	 ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
  00111	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv91[rbp], rax
$LN6@PMC_LeftSh:
  00118	48 8b 85 58 02
	00 00		 mov	 rax, QWORD PTR tv91[rbp]
  0011f	48 89 85 a8 00
	00 00		 mov	 QWORD PTR w$[rbp], rax

; 389  :         root.HookNumber(w);

  00126	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  0012d	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00131	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 390  : #ifdef _DEBUG
; 391  :         CheckNumber(w);

  00136	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR w$[rbp]
  0013d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 392  : #endif
; 393  :         root.UnlinkNumber(w);

  00142	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00149	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0014d	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 394  :         return ((PMC_HANDLE_UINT)w);

  00152	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR w$[rbp]
  00159	48 89 85 28 02
	00 00		 mov	 QWORD PTR $T7[rbp], rax
  00160	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00164	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00169	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR $T7[rbp]

; 395  :     }

  00170	48 8b f8	 mov	 rdi, rax
  00173	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcFrameData
  0017e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00183	48 8b c7	 mov	 rax, rdi
  00186	48 8d a5 68 02
	00 00		 lea	 rsp, QWORD PTR [rbp+616]
  0018d	5f		 pop	 rdi
  0018e	5d		 pop	 rbp
  0018f	c3		 ret	 0
$LN8@PMC_LeftSh:
?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z ENDP ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
nu$ = 8
root$ = 40
n_sign$ = 100
n_abs$ = 132
w$ = 168
$T5 = 392
$T6 = 472
$T7 = 552
$T8 = 584
tv91 = 600
u$ = 640
n$ = 648
?dtor$0@?0??PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_LeftShift_X_I'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_LeftShift_X_I'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nu$ = 8
root$ = 40
n_sign$ = 100
n_abs$ = 132
w$ = 168
$T5 = 392
$T6 = 472
$T7 = 552
$T8 = 584
tv91 = 600
u$ = 640
n$ = 648
?dtor$0@?0??PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_LeftShift_X_I'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_LeftShift_X_I'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z
_TEXT	SEGMENT
nu$ = 8
root$ = 40
n_sign$ = 100
n_abs$ = 132
w$ = 168
$T5 = 392
$T6 = 472
$T7 = 552
$T8 = 584
tv91 = 600
u$ = 640
n$ = 648
?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z PROC ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I, COMDAT

; 352  :     {

$LN9:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 88 02
	00 00		 sub	 rsp, 648		; 00000288H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+680]
  0002e	48 c7 85 48 02
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T8[rbp], -2
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BCD96457_pmc_shift@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 353  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

  00045	33 c0		 xor	 eax, eax
  00047	85 c0		 test	 eax, eax
  00049	74 2d		 je	 SHORT $LN2@PMC_RightS

; 354  :         {
; 355  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 356  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_shift.cpp;PMC_RightShift_X_I;1");

  0004b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EG@JMDKLBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAh?$AAi?$AAf?$AAt?$AA?4?$AAc?$AAp?$AAp?$AA?$DL?$AAP@
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@CNOPPENL@?$PP?$II?$AA?$BP?$AAW?$AAf?$AAD?$AAj?$AAD?$PP?$LD?$PP?$PM?$PP?I?$AAk?$AA0?$AAT?$AAW?$AA?$HO@
  00059	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00060	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0006c	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00073	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@PMC_RightS:

; 357  :         }
; 358  :         if (u == nullptr)

  00078	48 83 bd 80 02
	00 00 00	 cmp	 QWORD PTR u$[rbp], 0
  00080	75 2d		 jne	 SHORT $LN3@PMC_RightS

; 359  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00082	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13ICFKHAEN@?$AAu@
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00090	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00097	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a3	48 8d 8d d8 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000aa	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@PMC_RightS:

; 360  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  000af	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR u$[rbp]
  000b6	48 89 45 08	 mov	 QWORD PTR nu$[rbp], rax

; 361  :         CheckNumber(nu);

  000ba	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  000be	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 362  :         ResourceHolderUINT root;

  000c3	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  000c7	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000cc	90		 npad	 1

; 363  :         char n_sign;
; 364  :         _UINT32_T n_abs = GET_ABS_32(n, &n_sign);

  000cd	48 8d 55 64	 lea	 rdx, QWORD PTR n_sign$[rbp]
  000d1	8b 8d 88 02 00
	00		 mov	 ecx, DWORD PTR n$[rbp]
  000d7	e8 00 00 00 00	 call	 GET_ABS_32
  000dc	89 85 84 00 00
	00		 mov	 DWORD PTR n_abs$[rbp], eax

; 365  :         NUMBER_HEADER* w = n_sign >= 0 ? PMC_RightShift_X_I_Imp(nu, n_abs) : PMC_LeftShift_X_I_Imp(nu, n_abs);

  000e2	0f be 45 64	 movsx	 eax, BYTE PTR n_sign$[rbp]
  000e6	85 c0		 test	 eax, eax
  000e8	7c 18		 jl	 SHORT $LN5@PMC_RightS
  000ea	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR n_abs$[rbp]
  000f0	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  000f4	e8 00 00 00 00	 call	 ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
  000f9	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv91[rbp], rax
  00100	eb 16		 jmp	 SHORT $LN6@PMC_RightS
$LN5@PMC_RightS:
  00102	8b 95 84 00 00
	00		 mov	 edx, DWORD PTR n_abs$[rbp]
  00108	48 8b 4d 08	 mov	 rcx, QWORD PTR nu$[rbp]
  0010c	e8 00 00 00 00	 call	 ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPEAU__tag_NUMBER_HEADER@1234@PEAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
  00111	48 89 85 58 02
	00 00		 mov	 QWORD PTR tv91[rbp], rax
$LN6@PMC_RightS:
  00118	48 8b 85 58 02
	00 00		 mov	 rax, QWORD PTR tv91[rbp]
  0011f	48 89 85 a8 00
	00 00		 mov	 QWORD PTR w$[rbp], rax

; 366  :         root.HookNumber(w);

  00126	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  0012d	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00131	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 367  : #ifdef _DEBUG
; 368  :         CheckNumber(w);

  00136	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR w$[rbp]
  0013d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber

; 369  : #endif
; 370  :         root.UnlinkNumber(w);

  00142	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00149	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  0014d	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 371  :         return ((PMC_HANDLE_UINT)w);

  00152	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR w$[rbp]
  00159	48 89 85 28 02
	00 00		 mov	 QWORD PTR $T7[rbp], rax
  00160	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00164	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00169	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR $T7[rbp]

; 372  :     }

  00170	48 8b f8	 mov	 rdi, rax
  00173	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z$rtcFrameData
  0017e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00183	48 8b c7	 mov	 rax, rdi
  00186	48 8d a5 68 02
	00 00		 lea	 rsp, QWORD PTR [rbp+616]
  0018d	5f		 pop	 rdi
  0018e	5d		 pop	 rbp
  0018f	c3		 ret	 0
$LN8@PMC_RightS:
?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z ENDP ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
nu$ = 8
root$ = 40
n_sign$ = 100
n_abs$ = 132
w$ = 168
$T5 = 392
$T6 = 472
$T7 = 552
$T8 = 584
tv91 = 600
u$ = 640
n$ = 648
?dtor$0@?0??PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_RightShift_X_I'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_RightShift_X_I'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nu$ = 8
root$ = 40
n_sign$ = 100
n_abs$ = 132
w$ = 168
$T5 = 392
$T6 = 472
$T7 = 552
$T8 = 584
tv91 = 600
u$ = 640
n$ = 648
?dtor$0@?0??PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_RightShift_X_I'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR root$[rbp]
  00018	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YAPEAU__tag_PMC_HANDLE_UINT@1234@PEAU51234@H@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_RightShift_X_I'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
feature$ = 224
?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Shift, COMDAT

; 398  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BCD96457_pmc_shift@cpp
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 399  :         return (PMC_STATUS_OK);

  00036	33 c0		 xor	 eax, eax

; 400  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Shift
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z
_TEXT	SEGMENT
pp$ = 8
p_count$ = 40
op$ = 72
n_word_count$ = 104
n_lshift_bit_count$ = 136
n_rshift_bit_count$1 = 168
temp$2 = 200
work$3 = 232
count$4 = 264
p$ = 512
p_word_count$ = 520
n$ = 528
o$ = 536
padding_zero$ = 544
?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z PROC ; Palmtree::Math::Core::Internal::LeftShift_Imp, COMDAT

; 172  :     {

$LN15:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR [rsp+552]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BCD96457_pmc_shift@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 173  :         __UNIT_TYPE* pp = p;

  00045	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR p$[rbp]
  0004c	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 174  :         __UNIT_TYPE p_count = p_word_count;

  00050	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR p_word_count$[rbp]
  00057	48 89 45 28	 mov	 QWORD PTR p_count$[rbp], rax

; 175  :         __UNIT_TYPE* op = o;

  0005b	48 8b 85 18 02
	00 00		 mov	 rax, QWORD PTR o$[rbp]
  00062	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax

; 176  :         __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

  00066	33 d2		 xor	 edx, edx
  00068	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR n$[rbp]
  0006f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00074	48 f7 f1	 div	 rcx
  00077	48 89 45 68	 mov	 QWORD PTR n_word_count$[rbp], rax

; 177  :         __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

  0007b	33 d2		 xor	 edx, edx
  0007d	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR n$[rbp]
  00084	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00089	48 f7 f1	 div	 rcx
  0008c	48 8b c2	 mov	 rax, rdx
  0008f	48 89 85 88 00
	00 00		 mov	 QWORD PTR n_lshift_bit_count$[rbp], rax

; 178  :         if (n_lshift_bit_count == 0)

  00096	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR n_lshift_bit_count$[rbp], 0
  0009e	75 37		 jne	 SHORT $LN4@LeftShift_

; 179  :         {
; 180  :             // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 181  :             _COPY_MEMORY_UNIT(op + n_word_count, pp, p_count);

  000a0	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  000a4	48 8b 4d 68	 mov	 rcx, QWORD PTR n_word_count$[rbp]
  000a8	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  000ac	4c 8b 45 28	 mov	 r8, QWORD PTR p_count$[rbp]
  000b0	48 8b 55 08	 mov	 rdx, QWORD PTR pp$[rbp]
  000b4	48 8b c8	 mov	 rcx, rax
  000b7	e8 00 00 00 00	 call	 _COPY_MEMORY_UNIT

; 182  :             if (padding_zero)

  000bc	83 bd 20 02 00
	00 00		 cmp	 DWORD PTR padding_zero$[rbp], 0
  000c3	74 0d		 je	 SHORT $LN6@LeftShift_

; 183  :                 _ZERO_MEMORY_UNIT(op, n_word_count);

  000c5	48 8b 55 68	 mov	 rdx, QWORD PTR n_word_count$[rbp]
  000c9	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  000cd	e8 00 00 00 00	 call	 _ZERO_MEMORY_UNIT
$LN6@LeftShift_:

; 184  :         }
; 185  :         else

  000d2	e9 51 1e 00 00	 jmp	 $LN5@LeftShift_
$LN4@LeftShift_:

; 186  :         {
; 187  :             __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;

  000d7	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  000dc	48 2b 85 88 00
	00 00		 sub	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  000e3	48 89 85 a8 00
	00 00		 mov	 QWORD PTR n_rshift_bit_count$1[rbp], rax

; 188  :             pp += p_count - 1;

  000ea	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  000ee	48 8b 4d 28	 mov	 rcx, QWORD PTR p_count$[rbp]
  000f2	48 8d 44 c8 f8	 lea	 rax, QWORD PTR [rax+rcx*8-8]
  000f7	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 189  :             op += p_count + n_word_count;

  000fb	48 8b 45 68	 mov	 rax, QWORD PTR n_word_count$[rbp]
  000ff	48 8b 4d 28	 mov	 rcx, QWORD PTR p_count$[rbp]
  00103	48 03 c8	 add	 rcx, rax
  00106	48 8b c1	 mov	 rax, rcx
  00109	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0010d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00111	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax

; 190  :             p_count -= 1;

  00115	48 8b 45 28	 mov	 rax, QWORD PTR p_count$[rbp]
  00119	48 ff c8	 dec	 rax
  0011c	48 89 45 28	 mov	 QWORD PTR p_count$[rbp], rax

; 191  :             __UNIT_TYPE temp = *pp;

  00120	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  00124	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00127	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax

; 192  :             __UNIT_TYPE work = temp >> n_rshift_bit_count;

  0012e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00135	0f b6 c8	 movzx	 ecx, al
  00138	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0013f	48 d3 e8	 shr	 rax, cl
  00142	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax

; 193  :             if (work != 0)

  00149	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR work$3[rbp], 0
  00151	74 0e		 je	 SHORT $LN7@LeftShift_

; 194  :                 *op = work;

  00153	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  00157	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0015e	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN7@LeftShift_:

; 195  :             --pp;

  00161	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  00165	48 83 e8 08	 sub	 rax, 8
  00169	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 196  :             --op;

  0016d	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  00171	48 83 e8 08	 sub	 rax, 8
  00175	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax

; 197  : 
; 198  :             __UNIT_TYPE count = p_count >> 5;

  00179	48 8b 45 28	 mov	 rax, QWORD PTR p_count$[rbp]
  0017d	48 c1 e8 05	 shr	 rax, 5
  00181	48 89 85 08 01
	00 00		 mov	 QWORD PTR count$4[rbp], rax
$LN2@LeftShift_:

; 199  :             while (count != 0)

  00188	48 83 bd 08 01
	00 00 00	 cmp	 QWORD PTR count$4[rbp], 0
  00190	0f 84 92 0e 00
	00		 je	 $LN3@LeftShift_

; 200  :             {
; 201  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  00196	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  0019d	0f b6 c8	 movzx	 ecx, al
  001a0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  001a7	48 d3 e0	 shl	 rax, cl
  001aa	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  001b1	b8 08 00 00 00	 mov	 eax, 8
  001b6	48 6b c0 00	 imul	 rax, rax, 0
  001ba	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  001be	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  001c2	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  001c9	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  001d0	0f b6 c8	 movzx	 ecx, al
  001d3	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  001da	48 d3 e8	 shr	 rax, cl
  001dd	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  001e4	48 0b c8	 or	 rcx, rax
  001e7	48 8b c1	 mov	 rax, rcx
  001ea	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  001f1	b8 08 00 00 00	 mov	 eax, 8
  001f6	48 6b c0 00	 imul	 rax, rax, 0
  001fa	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  001fe	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00205	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 202  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  00209	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00210	0f b6 c8	 movzx	 ecx, al
  00213	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0021a	48 d3 e0	 shl	 rax, cl
  0021d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00224	b8 08 00 00 00	 mov	 eax, 8
  00229	48 6b c0 ff	 imul	 rax, rax, -1
  0022d	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00231	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00235	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0023c	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00243	0f b6 c8	 movzx	 ecx, al
  00246	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0024d	48 d3 e8	 shr	 rax, cl
  00250	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00257	48 0b c8	 or	 rcx, rax
  0025a	48 8b c1	 mov	 rax, rcx
  0025d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00264	b8 08 00 00 00	 mov	 eax, 8
  00269	48 6b c0 ff	 imul	 rax, rax, -1
  0026d	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00271	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00278	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 203  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  0027c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00283	0f b6 c8	 movzx	 ecx, al
  00286	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0028d	48 d3 e0	 shl	 rax, cl
  00290	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00297	b8 08 00 00 00	 mov	 eax, 8
  0029c	48 6b c0 fe	 imul	 rax, rax, -2
  002a0	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  002a4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  002a8	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  002af	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  002b6	0f b6 c8	 movzx	 ecx, al
  002b9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  002c0	48 d3 e8	 shr	 rax, cl
  002c3	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  002ca	48 0b c8	 or	 rcx, rax
  002cd	48 8b c1	 mov	 rax, rcx
  002d0	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  002d7	b8 08 00 00 00	 mov	 eax, 8
  002dc	48 6b c0 fe	 imul	 rax, rax, -2
  002e0	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  002e4	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  002eb	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 204  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  002ef	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  002f6	0f b6 c8	 movzx	 ecx, al
  002f9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00300	48 d3 e0	 shl	 rax, cl
  00303	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0030a	b8 08 00 00 00	 mov	 eax, 8
  0030f	48 6b c0 fd	 imul	 rax, rax, -3
  00313	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00317	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0031b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00322	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00329	0f b6 c8	 movzx	 ecx, al
  0032c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00333	48 d3 e8	 shr	 rax, cl
  00336	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0033d	48 0b c8	 or	 rcx, rax
  00340	48 8b c1	 mov	 rax, rcx
  00343	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0034a	b8 08 00 00 00	 mov	 eax, 8
  0034f	48 6b c0 fd	 imul	 rax, rax, -3
  00353	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00357	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0035e	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 205  :                 work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

  00362	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00369	0f b6 c8	 movzx	 ecx, al
  0036c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00373	48 d3 e0	 shl	 rax, cl
  00376	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0037d	b8 08 00 00 00	 mov	 eax, 8
  00382	48 6b c0 fc	 imul	 rax, rax, -4
  00386	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0038a	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0038e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00395	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  0039c	0f b6 c8	 movzx	 ecx, al
  0039f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  003a6	48 d3 e8	 shr	 rax, cl
  003a9	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  003b0	48 0b c8	 or	 rcx, rax
  003b3	48 8b c1	 mov	 rax, rcx
  003b6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  003bd	b8 08 00 00 00	 mov	 eax, 8
  003c2	48 6b c0 fc	 imul	 rax, rax, -4
  003c6	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  003ca	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  003d1	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 206  :                 work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

  003d5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  003dc	0f b6 c8	 movzx	 ecx, al
  003df	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  003e6	48 d3 e0	 shl	 rax, cl
  003e9	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  003f0	b8 08 00 00 00	 mov	 eax, 8
  003f5	48 6b c0 fb	 imul	 rax, rax, -5
  003f9	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  003fd	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00401	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00408	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  0040f	0f b6 c8	 movzx	 ecx, al
  00412	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00419	48 d3 e8	 shr	 rax, cl
  0041c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00423	48 0b c8	 or	 rcx, rax
  00426	48 8b c1	 mov	 rax, rcx
  00429	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00430	b8 08 00 00 00	 mov	 eax, 8
  00435	48 6b c0 fb	 imul	 rax, rax, -5
  00439	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0043d	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00444	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 207  :                 work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

  00448	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  0044f	0f b6 c8	 movzx	 ecx, al
  00452	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00459	48 d3 e0	 shl	 rax, cl
  0045c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00463	b8 08 00 00 00	 mov	 eax, 8
  00468	48 6b c0 fa	 imul	 rax, rax, -6
  0046c	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00470	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00474	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0047b	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00482	0f b6 c8	 movzx	 ecx, al
  00485	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0048c	48 d3 e8	 shr	 rax, cl
  0048f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00496	48 0b c8	 or	 rcx, rax
  00499	48 8b c1	 mov	 rax, rcx
  0049c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  004a3	b8 08 00 00 00	 mov	 eax, 8
  004a8	48 6b c0 fa	 imul	 rax, rax, -6
  004ac	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  004b0	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  004b7	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 208  :                 work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

  004bb	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  004c2	0f b6 c8	 movzx	 ecx, al
  004c5	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  004cc	48 d3 e0	 shl	 rax, cl
  004cf	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  004d6	b8 08 00 00 00	 mov	 eax, 8
  004db	48 6b c0 f9	 imul	 rax, rax, -7
  004df	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  004e3	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  004e7	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  004ee	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  004f5	0f b6 c8	 movzx	 ecx, al
  004f8	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  004ff	48 d3 e8	 shr	 rax, cl
  00502	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00509	48 0b c8	 or	 rcx, rax
  0050c	48 8b c1	 mov	 rax, rcx
  0050f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00516	b8 08 00 00 00	 mov	 eax, 8
  0051b	48 6b c0 f9	 imul	 rax, rax, -7
  0051f	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00523	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0052a	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 209  :                 work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

  0052e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00535	0f b6 c8	 movzx	 ecx, al
  00538	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0053f	48 d3 e0	 shl	 rax, cl
  00542	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00549	b8 08 00 00 00	 mov	 eax, 8
  0054e	48 6b c0 f8	 imul	 rax, rax, -8
  00552	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00556	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0055a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00561	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00568	0f b6 c8	 movzx	 ecx, al
  0056b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00572	48 d3 e8	 shr	 rax, cl
  00575	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0057c	48 0b c8	 or	 rcx, rax
  0057f	48 8b c1	 mov	 rax, rcx
  00582	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00589	b8 08 00 00 00	 mov	 eax, 8
  0058e	48 6b c0 f8	 imul	 rax, rax, -8
  00592	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00596	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0059d	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 210  :                 work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

  005a1	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  005a8	0f b6 c8	 movzx	 ecx, al
  005ab	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  005b2	48 d3 e0	 shl	 rax, cl
  005b5	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  005bc	b8 08 00 00 00	 mov	 eax, 8
  005c1	48 6b c0 f7	 imul	 rax, rax, -9
  005c5	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  005c9	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  005cd	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  005d4	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  005db	0f b6 c8	 movzx	 ecx, al
  005de	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  005e5	48 d3 e8	 shr	 rax, cl
  005e8	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  005ef	48 0b c8	 or	 rcx, rax
  005f2	48 8b c1	 mov	 rax, rcx
  005f5	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  005fc	b8 08 00 00 00	 mov	 eax, 8
  00601	48 6b c0 f7	 imul	 rax, rax, -9
  00605	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00609	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00610	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 211  :                 work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

  00614	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  0061b	0f b6 c8	 movzx	 ecx, al
  0061e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00625	48 d3 e0	 shl	 rax, cl
  00628	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0062f	b8 08 00 00 00	 mov	 eax, 8
  00634	48 6b c0 f6	 imul	 rax, rax, -10
  00638	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0063c	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00640	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00647	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  0064e	0f b6 c8	 movzx	 ecx, al
  00651	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00658	48 d3 e8	 shr	 rax, cl
  0065b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00662	48 0b c8	 or	 rcx, rax
  00665	48 8b c1	 mov	 rax, rcx
  00668	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0066f	b8 08 00 00 00	 mov	 eax, 8
  00674	48 6b c0 f6	 imul	 rax, rax, -10
  00678	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0067c	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00683	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 212  :                 work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

  00687	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  0068e	0f b6 c8	 movzx	 ecx, al
  00691	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00698	48 d3 e0	 shl	 rax, cl
  0069b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  006a2	b8 08 00 00 00	 mov	 eax, 8
  006a7	48 6b c0 f5	 imul	 rax, rax, -11
  006ab	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  006af	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  006b3	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  006ba	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  006c1	0f b6 c8	 movzx	 ecx, al
  006c4	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  006cb	48 d3 e8	 shr	 rax, cl
  006ce	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  006d5	48 0b c8	 or	 rcx, rax
  006d8	48 8b c1	 mov	 rax, rcx
  006db	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  006e2	b8 08 00 00 00	 mov	 eax, 8
  006e7	48 6b c0 f5	 imul	 rax, rax, -11
  006eb	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  006ef	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  006f6	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 213  :                 work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

  006fa	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00701	0f b6 c8	 movzx	 ecx, al
  00704	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0070b	48 d3 e0	 shl	 rax, cl
  0070e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00715	b8 08 00 00 00	 mov	 eax, 8
  0071a	48 6b c0 f4	 imul	 rax, rax, -12
  0071e	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00722	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00726	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0072d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00734	0f b6 c8	 movzx	 ecx, al
  00737	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0073e	48 d3 e8	 shr	 rax, cl
  00741	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00748	48 0b c8	 or	 rcx, rax
  0074b	48 8b c1	 mov	 rax, rcx
  0074e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00755	b8 08 00 00 00	 mov	 eax, 8
  0075a	48 6b c0 f4	 imul	 rax, rax, -12
  0075e	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00762	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00769	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 214  :                 work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

  0076d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00774	0f b6 c8	 movzx	 ecx, al
  00777	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0077e	48 d3 e0	 shl	 rax, cl
  00781	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00788	b8 08 00 00 00	 mov	 eax, 8
  0078d	48 6b c0 f3	 imul	 rax, rax, -13
  00791	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00795	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00799	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  007a0	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  007a7	0f b6 c8	 movzx	 ecx, al
  007aa	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  007b1	48 d3 e8	 shr	 rax, cl
  007b4	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  007bb	48 0b c8	 or	 rcx, rax
  007be	48 8b c1	 mov	 rax, rcx
  007c1	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  007c8	b8 08 00 00 00	 mov	 eax, 8
  007cd	48 6b c0 f3	 imul	 rax, rax, -13
  007d1	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  007d5	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  007dc	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 215  :                 work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

  007e0	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  007e7	0f b6 c8	 movzx	 ecx, al
  007ea	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  007f1	48 d3 e0	 shl	 rax, cl
  007f4	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  007fb	b8 08 00 00 00	 mov	 eax, 8
  00800	48 6b c0 f2	 imul	 rax, rax, -14
  00804	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00808	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0080c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00813	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  0081a	0f b6 c8	 movzx	 ecx, al
  0081d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00824	48 d3 e8	 shr	 rax, cl
  00827	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0082e	48 0b c8	 or	 rcx, rax
  00831	48 8b c1	 mov	 rax, rcx
  00834	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0083b	b8 08 00 00 00	 mov	 eax, 8
  00840	48 6b c0 f2	 imul	 rax, rax, -14
  00844	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00848	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0084f	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 216  :                 work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

  00853	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  0085a	0f b6 c8	 movzx	 ecx, al
  0085d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00864	48 d3 e0	 shl	 rax, cl
  00867	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0086e	b8 08 00 00 00	 mov	 eax, 8
  00873	48 6b c0 f1	 imul	 rax, rax, -15
  00877	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0087b	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0087f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00886	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  0088d	0f b6 c8	 movzx	 ecx, al
  00890	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00897	48 d3 e8	 shr	 rax, cl
  0089a	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  008a1	48 0b c8	 or	 rcx, rax
  008a4	48 8b c1	 mov	 rax, rcx
  008a7	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  008ae	b8 08 00 00 00	 mov	 eax, 8
  008b3	48 6b c0 f1	 imul	 rax, rax, -15
  008b7	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  008bb	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  008c2	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 217  :                 work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

  008c6	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  008cd	0f b6 c8	 movzx	 ecx, al
  008d0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  008d7	48 d3 e0	 shl	 rax, cl
  008da	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  008e1	b8 08 00 00 00	 mov	 eax, 8
  008e6	48 6b c0 f0	 imul	 rax, rax, -16
  008ea	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  008ee	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  008f2	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  008f9	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00900	0f b6 c8	 movzx	 ecx, al
  00903	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0090a	48 d3 e8	 shr	 rax, cl
  0090d	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00914	48 0b c8	 or	 rcx, rax
  00917	48 8b c1	 mov	 rax, rcx
  0091a	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00921	b8 08 00 00 00	 mov	 eax, 8
  00926	48 6b c0 f0	 imul	 rax, rax, -16
  0092a	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0092e	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00935	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 218  :                 work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

  00939	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00940	0f b6 c8	 movzx	 ecx, al
  00943	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0094a	48 d3 e0	 shl	 rax, cl
  0094d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00954	b8 08 00 00 00	 mov	 eax, 8
  00959	48 6b c0 ef	 imul	 rax, rax, -17
  0095d	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00961	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00965	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0096c	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00973	0f b6 c8	 movzx	 ecx, al
  00976	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0097d	48 d3 e8	 shr	 rax, cl
  00980	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00987	48 0b c8	 or	 rcx, rax
  0098a	48 8b c1	 mov	 rax, rcx
  0098d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00994	b8 08 00 00 00	 mov	 eax, 8
  00999	48 6b c0 ef	 imul	 rax, rax, -17
  0099d	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  009a1	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  009a8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 219  :                 work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

  009ac	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  009b3	0f b6 c8	 movzx	 ecx, al
  009b6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  009bd	48 d3 e0	 shl	 rax, cl
  009c0	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  009c7	b8 08 00 00 00	 mov	 eax, 8
  009cc	48 6b c0 ee	 imul	 rax, rax, -18
  009d0	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  009d4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  009d8	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  009df	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  009e6	0f b6 c8	 movzx	 ecx, al
  009e9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  009f0	48 d3 e8	 shr	 rax, cl
  009f3	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  009fa	48 0b c8	 or	 rcx, rax
  009fd	48 8b c1	 mov	 rax, rcx
  00a00	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00a07	b8 08 00 00 00	 mov	 eax, 8
  00a0c	48 6b c0 ee	 imul	 rax, rax, -18
  00a10	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00a14	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00a1b	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 220  :                 work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

  00a1f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00a26	0f b6 c8	 movzx	 ecx, al
  00a29	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00a30	48 d3 e0	 shl	 rax, cl
  00a33	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00a3a	b8 08 00 00 00	 mov	 eax, 8
  00a3f	48 6b c0 ed	 imul	 rax, rax, -19
  00a43	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00a47	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00a4b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00a52	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00a59	0f b6 c8	 movzx	 ecx, al
  00a5c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00a63	48 d3 e8	 shr	 rax, cl
  00a66	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00a6d	48 0b c8	 or	 rcx, rax
  00a70	48 8b c1	 mov	 rax, rcx
  00a73	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00a7a	b8 08 00 00 00	 mov	 eax, 8
  00a7f	48 6b c0 ed	 imul	 rax, rax, -19
  00a83	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00a87	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00a8e	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 221  :                 work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

  00a92	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00a99	0f b6 c8	 movzx	 ecx, al
  00a9c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00aa3	48 d3 e0	 shl	 rax, cl
  00aa6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00aad	b8 08 00 00 00	 mov	 eax, 8
  00ab2	48 6b c0 ec	 imul	 rax, rax, -20
  00ab6	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00aba	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00abe	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00ac5	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00acc	0f b6 c8	 movzx	 ecx, al
  00acf	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00ad6	48 d3 e8	 shr	 rax, cl
  00ad9	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00ae0	48 0b c8	 or	 rcx, rax
  00ae3	48 8b c1	 mov	 rax, rcx
  00ae6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00aed	b8 08 00 00 00	 mov	 eax, 8
  00af2	48 6b c0 ec	 imul	 rax, rax, -20
  00af6	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00afa	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00b01	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 222  :                 work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

  00b05	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00b0c	0f b6 c8	 movzx	 ecx, al
  00b0f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00b16	48 d3 e0	 shl	 rax, cl
  00b19	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00b20	b8 08 00 00 00	 mov	 eax, 8
  00b25	48 6b c0 eb	 imul	 rax, rax, -21
  00b29	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00b2d	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00b31	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00b38	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00b3f	0f b6 c8	 movzx	 ecx, al
  00b42	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00b49	48 d3 e8	 shr	 rax, cl
  00b4c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00b53	48 0b c8	 or	 rcx, rax
  00b56	48 8b c1	 mov	 rax, rcx
  00b59	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00b60	b8 08 00 00 00	 mov	 eax, 8
  00b65	48 6b c0 eb	 imul	 rax, rax, -21
  00b69	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00b6d	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00b74	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 223  :                 work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

  00b78	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00b7f	0f b6 c8	 movzx	 ecx, al
  00b82	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00b89	48 d3 e0	 shl	 rax, cl
  00b8c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00b93	b8 08 00 00 00	 mov	 eax, 8
  00b98	48 6b c0 ea	 imul	 rax, rax, -22
  00b9c	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00ba0	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00ba4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00bab	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00bb2	0f b6 c8	 movzx	 ecx, al
  00bb5	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00bbc	48 d3 e8	 shr	 rax, cl
  00bbf	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00bc6	48 0b c8	 or	 rcx, rax
  00bc9	48 8b c1	 mov	 rax, rcx
  00bcc	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00bd3	b8 08 00 00 00	 mov	 eax, 8
  00bd8	48 6b c0 ea	 imul	 rax, rax, -22
  00bdc	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00be0	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00be7	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 224  :                 work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

  00beb	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00bf2	0f b6 c8	 movzx	 ecx, al
  00bf5	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00bfc	48 d3 e0	 shl	 rax, cl
  00bff	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00c06	b8 08 00 00 00	 mov	 eax, 8
  00c0b	48 6b c0 e9	 imul	 rax, rax, -23
  00c0f	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00c13	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00c17	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00c1e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00c25	0f b6 c8	 movzx	 ecx, al
  00c28	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00c2f	48 d3 e8	 shr	 rax, cl
  00c32	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00c39	48 0b c8	 or	 rcx, rax
  00c3c	48 8b c1	 mov	 rax, rcx
  00c3f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00c46	b8 08 00 00 00	 mov	 eax, 8
  00c4b	48 6b c0 e9	 imul	 rax, rax, -23
  00c4f	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00c53	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00c5a	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 225  :                 work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

  00c5e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00c65	0f b6 c8	 movzx	 ecx, al
  00c68	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00c6f	48 d3 e0	 shl	 rax, cl
  00c72	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00c79	b8 08 00 00 00	 mov	 eax, 8
  00c7e	48 6b c0 e8	 imul	 rax, rax, -24
  00c82	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00c86	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00c8a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00c91	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00c98	0f b6 c8	 movzx	 ecx, al
  00c9b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00ca2	48 d3 e8	 shr	 rax, cl
  00ca5	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00cac	48 0b c8	 or	 rcx, rax
  00caf	48 8b c1	 mov	 rax, rcx
  00cb2	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00cb9	b8 08 00 00 00	 mov	 eax, 8
  00cbe	48 6b c0 e8	 imul	 rax, rax, -24
  00cc2	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00cc6	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00ccd	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 226  :                 work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

  00cd1	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00cd8	0f b6 c8	 movzx	 ecx, al
  00cdb	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00ce2	48 d3 e0	 shl	 rax, cl
  00ce5	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00cec	b8 08 00 00 00	 mov	 eax, 8
  00cf1	48 6b c0 e7	 imul	 rax, rax, -25
  00cf5	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00cf9	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00cfd	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00d04	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00d0b	0f b6 c8	 movzx	 ecx, al
  00d0e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00d15	48 d3 e8	 shr	 rax, cl
  00d18	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00d1f	48 0b c8	 or	 rcx, rax
  00d22	48 8b c1	 mov	 rax, rcx
  00d25	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00d2c	b8 08 00 00 00	 mov	 eax, 8
  00d31	48 6b c0 e7	 imul	 rax, rax, -25
  00d35	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00d39	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00d40	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 227  :                 work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

  00d44	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00d4b	0f b6 c8	 movzx	 ecx, al
  00d4e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00d55	48 d3 e0	 shl	 rax, cl
  00d58	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00d5f	b8 08 00 00 00	 mov	 eax, 8
  00d64	48 6b c0 e6	 imul	 rax, rax, -26
  00d68	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00d6c	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00d70	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00d77	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00d7e	0f b6 c8	 movzx	 ecx, al
  00d81	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00d88	48 d3 e8	 shr	 rax, cl
  00d8b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00d92	48 0b c8	 or	 rcx, rax
  00d95	48 8b c1	 mov	 rax, rcx
  00d98	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00d9f	b8 08 00 00 00	 mov	 eax, 8
  00da4	48 6b c0 e6	 imul	 rax, rax, -26
  00da8	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00dac	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00db3	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 228  :                 work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

  00db7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00dbe	0f b6 c8	 movzx	 ecx, al
  00dc1	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00dc8	48 d3 e0	 shl	 rax, cl
  00dcb	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00dd2	b8 08 00 00 00	 mov	 eax, 8
  00dd7	48 6b c0 e5	 imul	 rax, rax, -27
  00ddb	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00ddf	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00de3	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00dea	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00df1	0f b6 c8	 movzx	 ecx, al
  00df4	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00dfb	48 d3 e8	 shr	 rax, cl
  00dfe	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00e05	48 0b c8	 or	 rcx, rax
  00e08	48 8b c1	 mov	 rax, rcx
  00e0b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00e12	b8 08 00 00 00	 mov	 eax, 8
  00e17	48 6b c0 e5	 imul	 rax, rax, -27
  00e1b	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00e1f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00e26	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 229  :                 work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

  00e2a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00e31	0f b6 c8	 movzx	 ecx, al
  00e34	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00e3b	48 d3 e0	 shl	 rax, cl
  00e3e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00e45	b8 08 00 00 00	 mov	 eax, 8
  00e4a	48 6b c0 e4	 imul	 rax, rax, -28
  00e4e	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00e52	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00e56	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00e5d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00e64	0f b6 c8	 movzx	 ecx, al
  00e67	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00e6e	48 d3 e8	 shr	 rax, cl
  00e71	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00e78	48 0b c8	 or	 rcx, rax
  00e7b	48 8b c1	 mov	 rax, rcx
  00e7e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00e85	b8 08 00 00 00	 mov	 eax, 8
  00e8a	48 6b c0 e4	 imul	 rax, rax, -28
  00e8e	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00e92	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00e99	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 230  :                 work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

  00e9d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00ea4	0f b6 c8	 movzx	 ecx, al
  00ea7	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00eae	48 d3 e0	 shl	 rax, cl
  00eb1	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00eb8	b8 08 00 00 00	 mov	 eax, 8
  00ebd	48 6b c0 e3	 imul	 rax, rax, -29
  00ec1	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00ec5	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00ec9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00ed0	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00ed7	0f b6 c8	 movzx	 ecx, al
  00eda	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00ee1	48 d3 e8	 shr	 rax, cl
  00ee4	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00eeb	48 0b c8	 or	 rcx, rax
  00eee	48 8b c1	 mov	 rax, rcx
  00ef1	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00ef8	b8 08 00 00 00	 mov	 eax, 8
  00efd	48 6b c0 e3	 imul	 rax, rax, -29
  00f01	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00f05	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00f0c	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 231  :                 work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

  00f10	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00f17	0f b6 c8	 movzx	 ecx, al
  00f1a	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00f21	48 d3 e0	 shl	 rax, cl
  00f24	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00f2b	b8 08 00 00 00	 mov	 eax, 8
  00f30	48 6b c0 e2	 imul	 rax, rax, -30
  00f34	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00f38	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00f3c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00f43	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00f4a	0f b6 c8	 movzx	 ecx, al
  00f4d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00f54	48 d3 e8	 shr	 rax, cl
  00f57	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00f5e	48 0b c8	 or	 rcx, rax
  00f61	48 8b c1	 mov	 rax, rcx
  00f64	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00f6b	b8 08 00 00 00	 mov	 eax, 8
  00f70	48 6b c0 e2	 imul	 rax, rax, -30
  00f74	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00f78	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00f7f	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 232  :                 work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

  00f83	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  00f8a	0f b6 c8	 movzx	 ecx, al
  00f8d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00f94	48 d3 e0	 shl	 rax, cl
  00f97	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00f9e	b8 08 00 00 00	 mov	 eax, 8
  00fa3	48 6b c0 e1	 imul	 rax, rax, -31
  00fa7	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00fab	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00faf	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00fb6	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  00fbd	0f b6 c8	 movzx	 ecx, al
  00fc0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00fc7	48 d3 e8	 shr	 rax, cl
  00fca	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00fd1	48 0b c8	 or	 rcx, rax
  00fd4	48 8b c1	 mov	 rax, rcx
  00fd7	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00fde	b8 08 00 00 00	 mov	 eax, 8
  00fe3	48 6b c0 e1	 imul	 rax, rax, -31
  00fe7	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00feb	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00ff2	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 233  :                 pp -= 32;

  00ff6	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  00ffa	48 2d 00 01 00
	00		 sub	 rax, 256		; 00000100H
  01000	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 234  :                 op -= 32;

  01004	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01008	48 2d 00 01 00
	00		 sub	 rax, 256		; 00000100H
  0100e	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax

; 235  :                 --count;

  01012	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR count$4[rbp]
  01019	48 ff c8	 dec	 rax
  0101c	48 89 85 08 01
	00 00		 mov	 QWORD PTR count$4[rbp], rax

; 236  :             }

  01023	e9 60 f1 ff ff	 jmp	 $LN2@LeftShift_
$LN3@LeftShift_:

; 237  : 
; 238  :             if (p_count & 0x10)

  01028	48 8b 45 28	 mov	 rax, QWORD PTR p_count$[rbp]
  0102c	48 83 e0 10	 and	 rax, 16
  01030	48 85 c0	 test	 rax, rax
  01033	0f 84 4c 07 00
	00		 je	 $LN8@LeftShift_

; 239  :             {
; 240  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  01039	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01040	0f b6 c8	 movzx	 ecx, al
  01043	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0104a	48 d3 e0	 shl	 rax, cl
  0104d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01054	b8 08 00 00 00	 mov	 eax, 8
  01059	48 6b c0 00	 imul	 rax, rax, 0
  0105d	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01061	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01065	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0106c	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01073	0f b6 c8	 movzx	 ecx, al
  01076	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0107d	48 d3 e8	 shr	 rax, cl
  01080	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01087	48 0b c8	 or	 rcx, rax
  0108a	48 8b c1	 mov	 rax, rcx
  0108d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01094	b8 08 00 00 00	 mov	 eax, 8
  01099	48 6b c0 00	 imul	 rax, rax, 0
  0109d	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  010a1	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  010a8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 241  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  010ac	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  010b3	0f b6 c8	 movzx	 ecx, al
  010b6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  010bd	48 d3 e0	 shl	 rax, cl
  010c0	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  010c7	b8 08 00 00 00	 mov	 eax, 8
  010cc	48 6b c0 ff	 imul	 rax, rax, -1
  010d0	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  010d4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  010d8	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  010df	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  010e6	0f b6 c8	 movzx	 ecx, al
  010e9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  010f0	48 d3 e8	 shr	 rax, cl
  010f3	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  010fa	48 0b c8	 or	 rcx, rax
  010fd	48 8b c1	 mov	 rax, rcx
  01100	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01107	b8 08 00 00 00	 mov	 eax, 8
  0110c	48 6b c0 ff	 imul	 rax, rax, -1
  01110	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01114	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0111b	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 242  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  0111f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01126	0f b6 c8	 movzx	 ecx, al
  01129	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01130	48 d3 e0	 shl	 rax, cl
  01133	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0113a	b8 08 00 00 00	 mov	 eax, 8
  0113f	48 6b c0 fe	 imul	 rax, rax, -2
  01143	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01147	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0114b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01152	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01159	0f b6 c8	 movzx	 ecx, al
  0115c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01163	48 d3 e8	 shr	 rax, cl
  01166	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0116d	48 0b c8	 or	 rcx, rax
  01170	48 8b c1	 mov	 rax, rcx
  01173	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0117a	b8 08 00 00 00	 mov	 eax, 8
  0117f	48 6b c0 fe	 imul	 rax, rax, -2
  01183	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01187	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0118e	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 243  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  01192	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01199	0f b6 c8	 movzx	 ecx, al
  0119c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  011a3	48 d3 e0	 shl	 rax, cl
  011a6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  011ad	b8 08 00 00 00	 mov	 eax, 8
  011b2	48 6b c0 fd	 imul	 rax, rax, -3
  011b6	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  011ba	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  011be	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  011c5	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  011cc	0f b6 c8	 movzx	 ecx, al
  011cf	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  011d6	48 d3 e8	 shr	 rax, cl
  011d9	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  011e0	48 0b c8	 or	 rcx, rax
  011e3	48 8b c1	 mov	 rax, rcx
  011e6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  011ed	b8 08 00 00 00	 mov	 eax, 8
  011f2	48 6b c0 fd	 imul	 rax, rax, -3
  011f6	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  011fa	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01201	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 244  :                 work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

  01205	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  0120c	0f b6 c8	 movzx	 ecx, al
  0120f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01216	48 d3 e0	 shl	 rax, cl
  01219	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01220	b8 08 00 00 00	 mov	 eax, 8
  01225	48 6b c0 fc	 imul	 rax, rax, -4
  01229	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0122d	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01231	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01238	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  0123f	0f b6 c8	 movzx	 ecx, al
  01242	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01249	48 d3 e8	 shr	 rax, cl
  0124c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01253	48 0b c8	 or	 rcx, rax
  01256	48 8b c1	 mov	 rax, rcx
  01259	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01260	b8 08 00 00 00	 mov	 eax, 8
  01265	48 6b c0 fc	 imul	 rax, rax, -4
  01269	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0126d	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01274	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 245  :                 work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

  01278	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  0127f	0f b6 c8	 movzx	 ecx, al
  01282	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01289	48 d3 e0	 shl	 rax, cl
  0128c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01293	b8 08 00 00 00	 mov	 eax, 8
  01298	48 6b c0 fb	 imul	 rax, rax, -5
  0129c	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  012a0	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  012a4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  012ab	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  012b2	0f b6 c8	 movzx	 ecx, al
  012b5	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  012bc	48 d3 e8	 shr	 rax, cl
  012bf	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  012c6	48 0b c8	 or	 rcx, rax
  012c9	48 8b c1	 mov	 rax, rcx
  012cc	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  012d3	b8 08 00 00 00	 mov	 eax, 8
  012d8	48 6b c0 fb	 imul	 rax, rax, -5
  012dc	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  012e0	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  012e7	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 246  :                 work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

  012eb	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  012f2	0f b6 c8	 movzx	 ecx, al
  012f5	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  012fc	48 d3 e0	 shl	 rax, cl
  012ff	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01306	b8 08 00 00 00	 mov	 eax, 8
  0130b	48 6b c0 fa	 imul	 rax, rax, -6
  0130f	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01313	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01317	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0131e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01325	0f b6 c8	 movzx	 ecx, al
  01328	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0132f	48 d3 e8	 shr	 rax, cl
  01332	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01339	48 0b c8	 or	 rcx, rax
  0133c	48 8b c1	 mov	 rax, rcx
  0133f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01346	b8 08 00 00 00	 mov	 eax, 8
  0134b	48 6b c0 fa	 imul	 rax, rax, -6
  0134f	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01353	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0135a	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 247  :                 work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

  0135e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01365	0f b6 c8	 movzx	 ecx, al
  01368	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0136f	48 d3 e0	 shl	 rax, cl
  01372	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01379	b8 08 00 00 00	 mov	 eax, 8
  0137e	48 6b c0 f9	 imul	 rax, rax, -7
  01382	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01386	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0138a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01391	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01398	0f b6 c8	 movzx	 ecx, al
  0139b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  013a2	48 d3 e8	 shr	 rax, cl
  013a5	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  013ac	48 0b c8	 or	 rcx, rax
  013af	48 8b c1	 mov	 rax, rcx
  013b2	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  013b9	b8 08 00 00 00	 mov	 eax, 8
  013be	48 6b c0 f9	 imul	 rax, rax, -7
  013c2	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  013c6	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  013cd	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 248  :                 work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

  013d1	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  013d8	0f b6 c8	 movzx	 ecx, al
  013db	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  013e2	48 d3 e0	 shl	 rax, cl
  013e5	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  013ec	b8 08 00 00 00	 mov	 eax, 8
  013f1	48 6b c0 f8	 imul	 rax, rax, -8
  013f5	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  013f9	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  013fd	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01404	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  0140b	0f b6 c8	 movzx	 ecx, al
  0140e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01415	48 d3 e8	 shr	 rax, cl
  01418	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0141f	48 0b c8	 or	 rcx, rax
  01422	48 8b c1	 mov	 rax, rcx
  01425	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0142c	b8 08 00 00 00	 mov	 eax, 8
  01431	48 6b c0 f8	 imul	 rax, rax, -8
  01435	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01439	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01440	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 249  :                 work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

  01444	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  0144b	0f b6 c8	 movzx	 ecx, al
  0144e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01455	48 d3 e0	 shl	 rax, cl
  01458	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0145f	b8 08 00 00 00	 mov	 eax, 8
  01464	48 6b c0 f7	 imul	 rax, rax, -9
  01468	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0146c	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01470	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01477	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  0147e	0f b6 c8	 movzx	 ecx, al
  01481	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01488	48 d3 e8	 shr	 rax, cl
  0148b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01492	48 0b c8	 or	 rcx, rax
  01495	48 8b c1	 mov	 rax, rcx
  01498	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0149f	b8 08 00 00 00	 mov	 eax, 8
  014a4	48 6b c0 f7	 imul	 rax, rax, -9
  014a8	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  014ac	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  014b3	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 250  :                 work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

  014b7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  014be	0f b6 c8	 movzx	 ecx, al
  014c1	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  014c8	48 d3 e0	 shl	 rax, cl
  014cb	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  014d2	b8 08 00 00 00	 mov	 eax, 8
  014d7	48 6b c0 f6	 imul	 rax, rax, -10
  014db	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  014df	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  014e3	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  014ea	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  014f1	0f b6 c8	 movzx	 ecx, al
  014f4	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  014fb	48 d3 e8	 shr	 rax, cl
  014fe	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01505	48 0b c8	 or	 rcx, rax
  01508	48 8b c1	 mov	 rax, rcx
  0150b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01512	b8 08 00 00 00	 mov	 eax, 8
  01517	48 6b c0 f6	 imul	 rax, rax, -10
  0151b	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0151f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01526	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 251  :                 work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

  0152a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01531	0f b6 c8	 movzx	 ecx, al
  01534	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0153b	48 d3 e0	 shl	 rax, cl
  0153e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01545	b8 08 00 00 00	 mov	 eax, 8
  0154a	48 6b c0 f5	 imul	 rax, rax, -11
  0154e	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01552	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01556	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0155d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01564	0f b6 c8	 movzx	 ecx, al
  01567	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0156e	48 d3 e8	 shr	 rax, cl
  01571	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01578	48 0b c8	 or	 rcx, rax
  0157b	48 8b c1	 mov	 rax, rcx
  0157e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01585	b8 08 00 00 00	 mov	 eax, 8
  0158a	48 6b c0 f5	 imul	 rax, rax, -11
  0158e	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01592	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01599	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 252  :                 work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

  0159d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  015a4	0f b6 c8	 movzx	 ecx, al
  015a7	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  015ae	48 d3 e0	 shl	 rax, cl
  015b1	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  015b8	b8 08 00 00 00	 mov	 eax, 8
  015bd	48 6b c0 f4	 imul	 rax, rax, -12
  015c1	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  015c5	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  015c9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  015d0	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  015d7	0f b6 c8	 movzx	 ecx, al
  015da	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  015e1	48 d3 e8	 shr	 rax, cl
  015e4	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  015eb	48 0b c8	 or	 rcx, rax
  015ee	48 8b c1	 mov	 rax, rcx
  015f1	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  015f8	b8 08 00 00 00	 mov	 eax, 8
  015fd	48 6b c0 f4	 imul	 rax, rax, -12
  01601	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01605	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0160c	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 253  :                 work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

  01610	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01617	0f b6 c8	 movzx	 ecx, al
  0161a	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01621	48 d3 e0	 shl	 rax, cl
  01624	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0162b	b8 08 00 00 00	 mov	 eax, 8
  01630	48 6b c0 f3	 imul	 rax, rax, -13
  01634	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01638	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0163c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01643	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  0164a	0f b6 c8	 movzx	 ecx, al
  0164d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01654	48 d3 e8	 shr	 rax, cl
  01657	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0165e	48 0b c8	 or	 rcx, rax
  01661	48 8b c1	 mov	 rax, rcx
  01664	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0166b	b8 08 00 00 00	 mov	 eax, 8
  01670	48 6b c0 f3	 imul	 rax, rax, -13
  01674	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01678	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0167f	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 254  :                 work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

  01683	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  0168a	0f b6 c8	 movzx	 ecx, al
  0168d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01694	48 d3 e0	 shl	 rax, cl
  01697	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0169e	b8 08 00 00 00	 mov	 eax, 8
  016a3	48 6b c0 f2	 imul	 rax, rax, -14
  016a7	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  016ab	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  016af	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  016b6	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  016bd	0f b6 c8	 movzx	 ecx, al
  016c0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  016c7	48 d3 e8	 shr	 rax, cl
  016ca	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  016d1	48 0b c8	 or	 rcx, rax
  016d4	48 8b c1	 mov	 rax, rcx
  016d7	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  016de	b8 08 00 00 00	 mov	 eax, 8
  016e3	48 6b c0 f2	 imul	 rax, rax, -14
  016e7	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  016eb	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  016f2	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 255  :                 work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

  016f6	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  016fd	0f b6 c8	 movzx	 ecx, al
  01700	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01707	48 d3 e0	 shl	 rax, cl
  0170a	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01711	b8 08 00 00 00	 mov	 eax, 8
  01716	48 6b c0 f1	 imul	 rax, rax, -15
  0171a	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0171e	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01722	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01729	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01730	0f b6 c8	 movzx	 ecx, al
  01733	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0173a	48 d3 e8	 shr	 rax, cl
  0173d	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01744	48 0b c8	 or	 rcx, rax
  01747	48 8b c1	 mov	 rax, rcx
  0174a	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01751	b8 08 00 00 00	 mov	 eax, 8
  01756	48 6b c0 f1	 imul	 rax, rax, -15
  0175a	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0175e	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01765	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 256  :                 pp -= 16;

  01769	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  0176d	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  01773	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 257  :                 op -= 16;

  01777	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  0177b	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  01781	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax
$LN8@LeftShift_:

; 258  :             }
; 259  : 
; 260  :             if (p_count & 0x8)

  01785	48 8b 45 28	 mov	 rax, QWORD PTR p_count$[rbp]
  01789	48 83 e0 08	 and	 rax, 8
  0178d	48 85 c0	 test	 rax, rax
  01790	0f 84 b0 03 00
	00		 je	 $LN9@LeftShift_

; 261  :             {
; 262  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  01796	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  0179d	0f b6 c8	 movzx	 ecx, al
  017a0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  017a7	48 d3 e0	 shl	 rax, cl
  017aa	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  017b1	b8 08 00 00 00	 mov	 eax, 8
  017b6	48 6b c0 00	 imul	 rax, rax, 0
  017ba	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  017be	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  017c2	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  017c9	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  017d0	0f b6 c8	 movzx	 ecx, al
  017d3	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  017da	48 d3 e8	 shr	 rax, cl
  017dd	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  017e4	48 0b c8	 or	 rcx, rax
  017e7	48 8b c1	 mov	 rax, rcx
  017ea	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  017f1	b8 08 00 00 00	 mov	 eax, 8
  017f6	48 6b c0 00	 imul	 rax, rax, 0
  017fa	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  017fe	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01805	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 263  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  01809	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01810	0f b6 c8	 movzx	 ecx, al
  01813	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0181a	48 d3 e0	 shl	 rax, cl
  0181d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01824	b8 08 00 00 00	 mov	 eax, 8
  01829	48 6b c0 ff	 imul	 rax, rax, -1
  0182d	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01831	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01835	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0183c	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01843	0f b6 c8	 movzx	 ecx, al
  01846	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0184d	48 d3 e8	 shr	 rax, cl
  01850	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01857	48 0b c8	 or	 rcx, rax
  0185a	48 8b c1	 mov	 rax, rcx
  0185d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01864	b8 08 00 00 00	 mov	 eax, 8
  01869	48 6b c0 ff	 imul	 rax, rax, -1
  0186d	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01871	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01878	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 264  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  0187c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01883	0f b6 c8	 movzx	 ecx, al
  01886	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0188d	48 d3 e0	 shl	 rax, cl
  01890	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01897	b8 08 00 00 00	 mov	 eax, 8
  0189c	48 6b c0 fe	 imul	 rax, rax, -2
  018a0	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  018a4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  018a8	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  018af	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  018b6	0f b6 c8	 movzx	 ecx, al
  018b9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  018c0	48 d3 e8	 shr	 rax, cl
  018c3	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  018ca	48 0b c8	 or	 rcx, rax
  018cd	48 8b c1	 mov	 rax, rcx
  018d0	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  018d7	b8 08 00 00 00	 mov	 eax, 8
  018dc	48 6b c0 fe	 imul	 rax, rax, -2
  018e0	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  018e4	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  018eb	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 265  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  018ef	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  018f6	0f b6 c8	 movzx	 ecx, al
  018f9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01900	48 d3 e0	 shl	 rax, cl
  01903	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0190a	b8 08 00 00 00	 mov	 eax, 8
  0190f	48 6b c0 fd	 imul	 rax, rax, -3
  01913	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01917	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0191b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01922	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01929	0f b6 c8	 movzx	 ecx, al
  0192c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01933	48 d3 e8	 shr	 rax, cl
  01936	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0193d	48 0b c8	 or	 rcx, rax
  01940	48 8b c1	 mov	 rax, rcx
  01943	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0194a	b8 08 00 00 00	 mov	 eax, 8
  0194f	48 6b c0 fd	 imul	 rax, rax, -3
  01953	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01957	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0195e	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 266  :                 work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

  01962	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01969	0f b6 c8	 movzx	 ecx, al
  0196c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01973	48 d3 e0	 shl	 rax, cl
  01976	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0197d	b8 08 00 00 00	 mov	 eax, 8
  01982	48 6b c0 fc	 imul	 rax, rax, -4
  01986	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0198a	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0198e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01995	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  0199c	0f b6 c8	 movzx	 ecx, al
  0199f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  019a6	48 d3 e8	 shr	 rax, cl
  019a9	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  019b0	48 0b c8	 or	 rcx, rax
  019b3	48 8b c1	 mov	 rax, rcx
  019b6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  019bd	b8 08 00 00 00	 mov	 eax, 8
  019c2	48 6b c0 fc	 imul	 rax, rax, -4
  019c6	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  019ca	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  019d1	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 267  :                 work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

  019d5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  019dc	0f b6 c8	 movzx	 ecx, al
  019df	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  019e6	48 d3 e0	 shl	 rax, cl
  019e9	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  019f0	b8 08 00 00 00	 mov	 eax, 8
  019f5	48 6b c0 fb	 imul	 rax, rax, -5
  019f9	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  019fd	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01a01	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01a08	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01a0f	0f b6 c8	 movzx	 ecx, al
  01a12	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01a19	48 d3 e8	 shr	 rax, cl
  01a1c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01a23	48 0b c8	 or	 rcx, rax
  01a26	48 8b c1	 mov	 rax, rcx
  01a29	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01a30	b8 08 00 00 00	 mov	 eax, 8
  01a35	48 6b c0 fb	 imul	 rax, rax, -5
  01a39	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01a3d	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01a44	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 268  :                 work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

  01a48	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01a4f	0f b6 c8	 movzx	 ecx, al
  01a52	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01a59	48 d3 e0	 shl	 rax, cl
  01a5c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01a63	b8 08 00 00 00	 mov	 eax, 8
  01a68	48 6b c0 fa	 imul	 rax, rax, -6
  01a6c	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01a70	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01a74	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01a7b	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01a82	0f b6 c8	 movzx	 ecx, al
  01a85	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01a8c	48 d3 e8	 shr	 rax, cl
  01a8f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01a96	48 0b c8	 or	 rcx, rax
  01a99	48 8b c1	 mov	 rax, rcx
  01a9c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01aa3	b8 08 00 00 00	 mov	 eax, 8
  01aa8	48 6b c0 fa	 imul	 rax, rax, -6
  01aac	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01ab0	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01ab7	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 269  :                 work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

  01abb	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01ac2	0f b6 c8	 movzx	 ecx, al
  01ac5	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01acc	48 d3 e0	 shl	 rax, cl
  01acf	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01ad6	b8 08 00 00 00	 mov	 eax, 8
  01adb	48 6b c0 f9	 imul	 rax, rax, -7
  01adf	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01ae3	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01ae7	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01aee	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01af5	0f b6 c8	 movzx	 ecx, al
  01af8	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01aff	48 d3 e8	 shr	 rax, cl
  01b02	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01b09	48 0b c8	 or	 rcx, rax
  01b0c	48 8b c1	 mov	 rax, rcx
  01b0f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01b16	b8 08 00 00 00	 mov	 eax, 8
  01b1b	48 6b c0 f9	 imul	 rax, rax, -7
  01b1f	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01b23	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01b2a	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 270  :                 pp -= 8;

  01b2e	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  01b32	48 83 e8 40	 sub	 rax, 64			; 00000040H
  01b36	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 271  :                 op -= 8;

  01b3a	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01b3e	48 83 e8 40	 sub	 rax, 64			; 00000040H
  01b42	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax
$LN9@LeftShift_:

; 272  :             }
; 273  : 
; 274  :             if (p_count & 0x4)

  01b46	48 8b 45 28	 mov	 rax, QWORD PTR p_count$[rbp]
  01b4a	48 83 e0 04	 and	 rax, 4
  01b4e	48 85 c0	 test	 rax, rax
  01b51	0f 84 e4 01 00
	00		 je	 $LN10@LeftShift_

; 275  :             {
; 276  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  01b57	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01b5e	0f b6 c8	 movzx	 ecx, al
  01b61	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01b68	48 d3 e0	 shl	 rax, cl
  01b6b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01b72	b8 08 00 00 00	 mov	 eax, 8
  01b77	48 6b c0 00	 imul	 rax, rax, 0
  01b7b	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01b7f	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01b83	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01b8a	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01b91	0f b6 c8	 movzx	 ecx, al
  01b94	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01b9b	48 d3 e8	 shr	 rax, cl
  01b9e	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01ba5	48 0b c8	 or	 rcx, rax
  01ba8	48 8b c1	 mov	 rax, rcx
  01bab	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01bb2	b8 08 00 00 00	 mov	 eax, 8
  01bb7	48 6b c0 00	 imul	 rax, rax, 0
  01bbb	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01bbf	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01bc6	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 277  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  01bca	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01bd1	0f b6 c8	 movzx	 ecx, al
  01bd4	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01bdb	48 d3 e0	 shl	 rax, cl
  01bde	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01be5	b8 08 00 00 00	 mov	 eax, 8
  01bea	48 6b c0 ff	 imul	 rax, rax, -1
  01bee	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01bf2	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01bf6	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01bfd	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01c04	0f b6 c8	 movzx	 ecx, al
  01c07	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01c0e	48 d3 e8	 shr	 rax, cl
  01c11	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01c18	48 0b c8	 or	 rcx, rax
  01c1b	48 8b c1	 mov	 rax, rcx
  01c1e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01c25	b8 08 00 00 00	 mov	 eax, 8
  01c2a	48 6b c0 ff	 imul	 rax, rax, -1
  01c2e	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01c32	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01c39	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 278  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  01c3d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01c44	0f b6 c8	 movzx	 ecx, al
  01c47	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01c4e	48 d3 e0	 shl	 rax, cl
  01c51	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01c58	b8 08 00 00 00	 mov	 eax, 8
  01c5d	48 6b c0 fe	 imul	 rax, rax, -2
  01c61	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01c65	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01c69	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01c70	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01c77	0f b6 c8	 movzx	 ecx, al
  01c7a	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01c81	48 d3 e8	 shr	 rax, cl
  01c84	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01c8b	48 0b c8	 or	 rcx, rax
  01c8e	48 8b c1	 mov	 rax, rcx
  01c91	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01c98	b8 08 00 00 00	 mov	 eax, 8
  01c9d	48 6b c0 fe	 imul	 rax, rax, -2
  01ca1	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01ca5	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01cac	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 279  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  01cb0	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01cb7	0f b6 c8	 movzx	 ecx, al
  01cba	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01cc1	48 d3 e0	 shl	 rax, cl
  01cc4	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01ccb	b8 08 00 00 00	 mov	 eax, 8
  01cd0	48 6b c0 fd	 imul	 rax, rax, -3
  01cd4	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01cd8	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01cdc	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01ce3	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01cea	0f b6 c8	 movzx	 ecx, al
  01ced	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01cf4	48 d3 e8	 shr	 rax, cl
  01cf7	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01cfe	48 0b c8	 or	 rcx, rax
  01d01	48 8b c1	 mov	 rax, rcx
  01d04	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01d0b	b8 08 00 00 00	 mov	 eax, 8
  01d10	48 6b c0 fd	 imul	 rax, rax, -3
  01d14	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01d18	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01d1f	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 280  :                 pp -= 4;

  01d23	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  01d27	48 83 e8 20	 sub	 rax, 32			; 00000020H
  01d2b	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 281  :                 op -= 4;

  01d2f	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01d33	48 83 e8 20	 sub	 rax, 32			; 00000020H
  01d37	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax
$LN10@LeftShift_:

; 282  :             }
; 283  : 
; 284  :             if (p_count & 0x2)

  01d3b	48 8b 45 28	 mov	 rax, QWORD PTR p_count$[rbp]
  01d3f	48 83 e0 02	 and	 rax, 2
  01d43	48 85 c0	 test	 rax, rax
  01d46	0f 84 fe 00 00
	00		 je	 $LN11@LeftShift_

; 285  :             {
; 286  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  01d4c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01d53	0f b6 c8	 movzx	 ecx, al
  01d56	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01d5d	48 d3 e0	 shl	 rax, cl
  01d60	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01d67	b8 08 00 00 00	 mov	 eax, 8
  01d6c	48 6b c0 00	 imul	 rax, rax, 0
  01d70	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01d74	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01d78	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01d7f	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01d86	0f b6 c8	 movzx	 ecx, al
  01d89	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01d90	48 d3 e8	 shr	 rax, cl
  01d93	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01d9a	48 0b c8	 or	 rcx, rax
  01d9d	48 8b c1	 mov	 rax, rcx
  01da0	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01da7	b8 08 00 00 00	 mov	 eax, 8
  01dac	48 6b c0 00	 imul	 rax, rax, 0
  01db0	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01db4	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01dbb	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 287  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  01dbf	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01dc6	0f b6 c8	 movzx	 ecx, al
  01dc9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01dd0	48 d3 e0	 shl	 rax, cl
  01dd3	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01dda	b8 08 00 00 00	 mov	 eax, 8
  01ddf	48 6b c0 ff	 imul	 rax, rax, -1
  01de3	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01de7	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01deb	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01df2	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01df9	0f b6 c8	 movzx	 ecx, al
  01dfc	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01e03	48 d3 e8	 shr	 rax, cl
  01e06	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01e0d	48 0b c8	 or	 rcx, rax
  01e10	48 8b c1	 mov	 rax, rcx
  01e13	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01e1a	b8 08 00 00 00	 mov	 eax, 8
  01e1f	48 6b c0 ff	 imul	 rax, rax, -1
  01e23	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01e27	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01e2e	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 288  :                 pp -= 2;

  01e32	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  01e36	48 83 e8 10	 sub	 rax, 16
  01e3a	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 289  :                 op -= 2;

  01e3e	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01e42	48 83 e8 10	 sub	 rax, 16
  01e46	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax
$LN11@LeftShift_:

; 290  :             }
; 291  : 
; 292  :             if (p_count & 0x1)

  01e4a	48 8b 45 28	 mov	 rax, QWORD PTR p_count$[rbp]
  01e4e	48 83 e0 01	 and	 rax, 1
  01e52	48 85 c0	 test	 rax, rax
  01e55	0f 84 8b 00 00
	00		 je	 $LN12@LeftShift_

; 293  :             {
; 294  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  01e5b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01e62	0f b6 c8	 movzx	 ecx, al
  01e65	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01e6c	48 d3 e0	 shl	 rax, cl
  01e6f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01e76	b8 08 00 00 00	 mov	 eax, 8
  01e7b	48 6b c0 00	 imul	 rax, rax, 0
  01e7f	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01e83	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01e87	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01e8e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$1[rbp]
  01e95	0f b6 c8	 movzx	 ecx, al
  01e98	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01e9f	48 d3 e8	 shr	 rax, cl
  01ea2	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01ea9	48 0b c8	 or	 rcx, rax
  01eac	48 8b c1	 mov	 rax, rcx
  01eaf	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01eb6	b8 08 00 00 00	 mov	 eax, 8
  01ebb	48 6b c0 00	 imul	 rax, rax, 0
  01ebf	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01ec3	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01eca	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 295  :                 pp -= 1;

  01ece	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  01ed2	48 83 e8 08	 sub	 rax, 8
  01ed6	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 296  :                 op -= 1;

  01eda	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01ede	48 83 e8 08	 sub	 rax, 8
  01ee2	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax
$LN12@LeftShift_:

; 297  :             }
; 298  :             work = temp << n_lshift_bit_count;

  01ee6	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$[rbp]
  01eed	0f b6 c8	 movzx	 ecx, al
  01ef0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01ef7	48 d3 e0	 shl	 rax, cl
  01efa	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax

; 299  :             *op = work;

  01f01	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01f05	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01f0c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 300  : 
; 301  :             if (padding_zero)

  01f0f	83 bd 20 02 00
	00 00		 cmp	 DWORD PTR padding_zero$[rbp], 0
  01f16	74 10		 je	 SHORT $LN13@LeftShift_

; 302  :                 _ZERO_MEMORY_UNIT(o, n_word_count);

  01f18	48 8b 55 68	 mov	 rdx, QWORD PTR n_word_count$[rbp]
  01f1c	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR o$[rbp]
  01f23	e8 00 00 00 00	 call	 _ZERO_MEMORY_UNIT
$LN13@LeftShift_:
$LN5@LeftShift_:

; 303  :         }
; 304  :     }

  01f28	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  01f2f	5f		 pop	 rdi
  01f30	5d		 pop	 rbp
  01f31	c3		 ret	 0
?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ENDP ; Palmtree::Math::Core::Internal::LeftShift_Imp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
;	COMDAT ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z
_TEXT	SEGMENT
pp$ = 8
p_count$ = 40
op$ = 72
n_word_count$ = 104
n_rshift_bit_count$ = 136
n_lshift_bit_count$1 = 168
temp$2 = 200
work$3 = 232
t_count$4 = 264
count$5 = 296
tv85 = 504
p$ = 544
p_word_count$ = 552
n$ = 560
o$ = 568
padding_zero$ = 576
?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z PROC ; Palmtree::Math::Core::Internal::RightShift_Imp, COMDAT

; 37   :     {

$LN16:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8b fc	 mov	 rdi, rsp
  00025	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BCD96457_pmc_shift@cpp
  00040	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 38   :         __UNIT_TYPE* pp = p;

  00045	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR p$[rbp]
  0004c	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 39   :         __UNIT_TYPE p_count = p_word_count;

  00050	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR p_word_count$[rbp]
  00057	48 89 45 28	 mov	 QWORD PTR p_count$[rbp], rax

; 40   :         __UNIT_TYPE* op = o;

  0005b	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR o$[rbp]
  00062	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax

; 41   :         // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 42   :         __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

  00066	33 d2		 xor	 edx, edx
  00068	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR n$[rbp]
  0006f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00074	48 f7 f1	 div	 rcx
  00077	48 89 45 68	 mov	 QWORD PTR n_word_count$[rbp], rax

; 43   :         __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

  0007b	33 d2		 xor	 edx, edx
  0007d	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR n$[rbp]
  00084	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00089	48 f7 f1	 div	 rcx
  0008c	48 8b c2	 mov	 rax, rdx
  0008f	48 89 85 88 00
	00 00		 mov	 QWORD PTR n_rshift_bit_count$[rbp], rax

; 44   :         if (n_rshift_bit_count == 0)

  00096	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR n_rshift_bit_count$[rbp], 0
  0009e	75 5a		 jne	 SHORT $LN4@RightShift

; 45   :         {
; 46   :             // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 47   :             _COPY_MEMORY_UNIT(op, pp + n_word_count, p_count - n_word_count);

  000a0	48 8b 45 68	 mov	 rax, QWORD PTR n_word_count$[rbp]
  000a4	48 8b 4d 28	 mov	 rcx, QWORD PTR p_count$[rbp]
  000a8	48 2b c8	 sub	 rcx, rax
  000ab	48 8b c1	 mov	 rax, rcx
  000ae	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  000b2	48 8b 55 68	 mov	 rdx, QWORD PTR n_word_count$[rbp]
  000b6	48 8d 0c d1	 lea	 rcx, QWORD PTR [rcx+rdx*8]
  000ba	4c 8b c0	 mov	 r8, rax
  000bd	48 8b d1	 mov	 rdx, rcx
  000c0	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  000c4	e8 00 00 00 00	 call	 _COPY_MEMORY_UNIT

; 48   :             if (padding_zero)

  000c9	83 bd 40 02 00
	00 00		 cmp	 DWORD PTR padding_zero$[rbp], 0
  000d0	74 23		 je	 SHORT $LN6@RightShift

; 49   :                 _ZERO_MEMORY_UNIT(op + p_count - n_word_count, n_word_count);

  000d2	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  000d6	48 8b 4d 28	 mov	 rcx, QWORD PTR p_count$[rbp]
  000da	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  000de	48 8b 4d 68	 mov	 rcx, QWORD PTR n_word_count$[rbp]
  000e2	48 c1 e1 03	 shl	 rcx, 3
  000e6	48 2b c1	 sub	 rax, rcx
  000e9	48 8b 55 68	 mov	 rdx, QWORD PTR n_word_count$[rbp]
  000ed	48 8b c8	 mov	 rcx, rax
  000f0	e8 00 00 00 00	 call	 _ZERO_MEMORY_UNIT
$LN6@RightShift:

; 50   :         }
; 51   :         else

  000f5	e9 50 1e 00 00	 jmp	 $LN5@RightShift
$LN4@RightShift:

; 52   :         {
; 53   :             pp += n_word_count;

  000fa	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  000fe	48 8b 4d 68	 mov	 rcx, QWORD PTR n_word_count$[rbp]
  00102	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  00106	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 54   :             __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;

  0010a	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0010f	48 2b 85 88 00
	00 00		 sub	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00116	48 89 85 a8 00
	00 00		 mov	 QWORD PTR n_lshift_bit_count$1[rbp], rax

; 55   :             // p_count - n_word_count 回繰り返し
; 56   : 
; 57   :             __UNIT_TYPE temp = *pp++;

  0011d	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  00121	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00124	48 89 85 f8 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  0012b	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  0012f	48 83 c0 08	 add	 rax, 8
  00133	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax
  00137	48 8b 85 f8 01
	00 00		 mov	 rax, QWORD PTR tv85[rbp]
  0013e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax

; 58   :             __UNIT_TYPE work;
; 59   :             __UNIT_TYPE t_count = p_count - n_word_count - 1;

  00145	48 8b 45 68	 mov	 rax, QWORD PTR n_word_count$[rbp]
  00149	48 8b 4d 28	 mov	 rcx, QWORD PTR p_count$[rbp]
  0014d	48 2b c8	 sub	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	48 ff c8	 dec	 rax
  00156	48 89 85 08 01
	00 00		 mov	 QWORD PTR t_count$4[rbp], rax

; 60   : 
; 61   :             __UNIT_TYPE count = t_count >> 5;

  0015d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR t_count$4[rbp]
  00164	48 c1 e8 05	 shr	 rax, 5
  00168	48 89 85 28 01
	00 00		 mov	 QWORD PTR count$5[rbp], rax
$LN2@RightShift:

; 62   :             while (count > 0)

  0016f	48 83 bd 28 01
	00 00 00	 cmp	 QWORD PTR count$5[rbp], 0
  00177	0f 86 92 0e 00
	00		 jbe	 $LN3@RightShift

; 63   :             {
; 64   :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  0017d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00184	0f b6 c8	 movzx	 ecx, al
  00187	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0018e	48 d3 e8	 shr	 rax, cl
  00191	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00198	b8 08 00 00 00	 mov	 eax, 8
  0019d	48 6b c0 00	 imul	 rax, rax, 0
  001a1	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  001a5	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  001a9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  001b0	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  001b7	0f b6 c8	 movzx	 ecx, al
  001ba	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  001c1	48 d3 e0	 shl	 rax, cl
  001c4	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  001cb	48 0b c8	 or	 rcx, rax
  001ce	48 8b c1	 mov	 rax, rcx
  001d1	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  001d8	b8 08 00 00 00	 mov	 eax, 8
  001dd	48 6b c0 00	 imul	 rax, rax, 0
  001e1	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  001e5	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  001ec	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 65   :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  001f0	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  001f7	0f b6 c8	 movzx	 ecx, al
  001fa	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00201	48 d3 e8	 shr	 rax, cl
  00204	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0020b	b8 08 00 00 00	 mov	 eax, 8
  00210	48 6b c0 01	 imul	 rax, rax, 1
  00214	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00218	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0021c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00223	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0022a	0f b6 c8	 movzx	 ecx, al
  0022d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00234	48 d3 e0	 shl	 rax, cl
  00237	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0023e	48 0b c8	 or	 rcx, rax
  00241	48 8b c1	 mov	 rax, rcx
  00244	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0024b	b8 08 00 00 00	 mov	 eax, 8
  00250	48 6b c0 01	 imul	 rax, rax, 1
  00254	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00258	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0025f	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 66   :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

  00263	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0026a	0f b6 c8	 movzx	 ecx, al
  0026d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00274	48 d3 e8	 shr	 rax, cl
  00277	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0027e	b8 08 00 00 00	 mov	 eax, 8
  00283	48 6b c0 02	 imul	 rax, rax, 2
  00287	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0028b	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0028f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00296	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0029d	0f b6 c8	 movzx	 ecx, al
  002a0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  002a7	48 d3 e0	 shl	 rax, cl
  002aa	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  002b1	48 0b c8	 or	 rcx, rax
  002b4	48 8b c1	 mov	 rax, rcx
  002b7	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  002be	b8 08 00 00 00	 mov	 eax, 8
  002c3	48 6b c0 02	 imul	 rax, rax, 2
  002c7	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  002cb	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  002d2	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 67   :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

  002d6	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  002dd	0f b6 c8	 movzx	 ecx, al
  002e0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  002e7	48 d3 e8	 shr	 rax, cl
  002ea	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  002f1	b8 08 00 00 00	 mov	 eax, 8
  002f6	48 6b c0 03	 imul	 rax, rax, 3
  002fa	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  002fe	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00302	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00309	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00310	0f b6 c8	 movzx	 ecx, al
  00313	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0031a	48 d3 e0	 shl	 rax, cl
  0031d	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00324	48 0b c8	 or	 rcx, rax
  00327	48 8b c1	 mov	 rax, rcx
  0032a	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00331	b8 08 00 00 00	 mov	 eax, 8
  00336	48 6b c0 03	 imul	 rax, rax, 3
  0033a	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0033e	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00345	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 68   :                 work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

  00349	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00350	0f b6 c8	 movzx	 ecx, al
  00353	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0035a	48 d3 e8	 shr	 rax, cl
  0035d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00364	b8 08 00 00 00	 mov	 eax, 8
  00369	48 6b c0 04	 imul	 rax, rax, 4
  0036d	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00371	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00375	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0037c	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00383	0f b6 c8	 movzx	 ecx, al
  00386	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0038d	48 d3 e0	 shl	 rax, cl
  00390	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00397	48 0b c8	 or	 rcx, rax
  0039a	48 8b c1	 mov	 rax, rcx
  0039d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  003a4	b8 08 00 00 00	 mov	 eax, 8
  003a9	48 6b c0 04	 imul	 rax, rax, 4
  003ad	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  003b1	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  003b8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 69   :                 work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

  003bc	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  003c3	0f b6 c8	 movzx	 ecx, al
  003c6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  003cd	48 d3 e8	 shr	 rax, cl
  003d0	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  003d7	b8 08 00 00 00	 mov	 eax, 8
  003dc	48 6b c0 05	 imul	 rax, rax, 5
  003e0	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  003e4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  003e8	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  003ef	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  003f6	0f b6 c8	 movzx	 ecx, al
  003f9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00400	48 d3 e0	 shl	 rax, cl
  00403	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0040a	48 0b c8	 or	 rcx, rax
  0040d	48 8b c1	 mov	 rax, rcx
  00410	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00417	b8 08 00 00 00	 mov	 eax, 8
  0041c	48 6b c0 05	 imul	 rax, rax, 5
  00420	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00424	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0042b	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 70   :                 work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

  0042f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00436	0f b6 c8	 movzx	 ecx, al
  00439	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00440	48 d3 e8	 shr	 rax, cl
  00443	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0044a	b8 08 00 00 00	 mov	 eax, 8
  0044f	48 6b c0 06	 imul	 rax, rax, 6
  00453	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00457	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0045b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00462	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00469	0f b6 c8	 movzx	 ecx, al
  0046c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00473	48 d3 e0	 shl	 rax, cl
  00476	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0047d	48 0b c8	 or	 rcx, rax
  00480	48 8b c1	 mov	 rax, rcx
  00483	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0048a	b8 08 00 00 00	 mov	 eax, 8
  0048f	48 6b c0 06	 imul	 rax, rax, 6
  00493	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00497	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0049e	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 71   :                 work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

  004a2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  004a9	0f b6 c8	 movzx	 ecx, al
  004ac	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  004b3	48 d3 e8	 shr	 rax, cl
  004b6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  004bd	b8 08 00 00 00	 mov	 eax, 8
  004c2	48 6b c0 07	 imul	 rax, rax, 7
  004c6	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  004ca	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  004ce	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  004d5	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  004dc	0f b6 c8	 movzx	 ecx, al
  004df	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  004e6	48 d3 e0	 shl	 rax, cl
  004e9	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  004f0	48 0b c8	 or	 rcx, rax
  004f3	48 8b c1	 mov	 rax, rcx
  004f6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  004fd	b8 08 00 00 00	 mov	 eax, 8
  00502	48 6b c0 07	 imul	 rax, rax, 7
  00506	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0050a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00511	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 72   :                 work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

  00515	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0051c	0f b6 c8	 movzx	 ecx, al
  0051f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00526	48 d3 e8	 shr	 rax, cl
  00529	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00530	b8 08 00 00 00	 mov	 eax, 8
  00535	48 6b c0 08	 imul	 rax, rax, 8
  00539	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0053d	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00541	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00548	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0054f	0f b6 c8	 movzx	 ecx, al
  00552	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00559	48 d3 e0	 shl	 rax, cl
  0055c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00563	48 0b c8	 or	 rcx, rax
  00566	48 8b c1	 mov	 rax, rcx
  00569	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00570	b8 08 00 00 00	 mov	 eax, 8
  00575	48 6b c0 08	 imul	 rax, rax, 8
  00579	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0057d	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00584	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 73   :                 work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

  00588	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0058f	0f b6 c8	 movzx	 ecx, al
  00592	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00599	48 d3 e8	 shr	 rax, cl
  0059c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  005a3	b8 08 00 00 00	 mov	 eax, 8
  005a8	48 6b c0 09	 imul	 rax, rax, 9
  005ac	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  005b0	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  005b4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  005bb	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  005c2	0f b6 c8	 movzx	 ecx, al
  005c5	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  005cc	48 d3 e0	 shl	 rax, cl
  005cf	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  005d6	48 0b c8	 or	 rcx, rax
  005d9	48 8b c1	 mov	 rax, rcx
  005dc	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  005e3	b8 08 00 00 00	 mov	 eax, 8
  005e8	48 6b c0 09	 imul	 rax, rax, 9
  005ec	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  005f0	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  005f7	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 74   :                 work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

  005fb	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00602	0f b6 c8	 movzx	 ecx, al
  00605	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0060c	48 d3 e8	 shr	 rax, cl
  0060f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00616	b8 08 00 00 00	 mov	 eax, 8
  0061b	48 6b c0 0a	 imul	 rax, rax, 10
  0061f	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00623	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00627	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0062e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00635	0f b6 c8	 movzx	 ecx, al
  00638	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0063f	48 d3 e0	 shl	 rax, cl
  00642	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00649	48 0b c8	 or	 rcx, rax
  0064c	48 8b c1	 mov	 rax, rcx
  0064f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00656	b8 08 00 00 00	 mov	 eax, 8
  0065b	48 6b c0 0a	 imul	 rax, rax, 10
  0065f	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00663	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0066a	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 75   :                 work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

  0066e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00675	0f b6 c8	 movzx	 ecx, al
  00678	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0067f	48 d3 e8	 shr	 rax, cl
  00682	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00689	b8 08 00 00 00	 mov	 eax, 8
  0068e	48 6b c0 0b	 imul	 rax, rax, 11
  00692	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00696	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0069a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  006a1	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  006a8	0f b6 c8	 movzx	 ecx, al
  006ab	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  006b2	48 d3 e0	 shl	 rax, cl
  006b5	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  006bc	48 0b c8	 or	 rcx, rax
  006bf	48 8b c1	 mov	 rax, rcx
  006c2	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  006c9	b8 08 00 00 00	 mov	 eax, 8
  006ce	48 6b c0 0b	 imul	 rax, rax, 11
  006d2	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  006d6	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  006dd	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 76   :                 work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

  006e1	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  006e8	0f b6 c8	 movzx	 ecx, al
  006eb	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  006f2	48 d3 e8	 shr	 rax, cl
  006f5	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  006fc	b8 08 00 00 00	 mov	 eax, 8
  00701	48 6b c0 0c	 imul	 rax, rax, 12
  00705	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00709	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0070d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00714	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0071b	0f b6 c8	 movzx	 ecx, al
  0071e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00725	48 d3 e0	 shl	 rax, cl
  00728	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0072f	48 0b c8	 or	 rcx, rax
  00732	48 8b c1	 mov	 rax, rcx
  00735	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0073c	b8 08 00 00 00	 mov	 eax, 8
  00741	48 6b c0 0c	 imul	 rax, rax, 12
  00745	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00749	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00750	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 77   :                 work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

  00754	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0075b	0f b6 c8	 movzx	 ecx, al
  0075e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00765	48 d3 e8	 shr	 rax, cl
  00768	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0076f	b8 08 00 00 00	 mov	 eax, 8
  00774	48 6b c0 0d	 imul	 rax, rax, 13
  00778	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0077c	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00780	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00787	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0078e	0f b6 c8	 movzx	 ecx, al
  00791	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00798	48 d3 e0	 shl	 rax, cl
  0079b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  007a2	48 0b c8	 or	 rcx, rax
  007a5	48 8b c1	 mov	 rax, rcx
  007a8	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  007af	b8 08 00 00 00	 mov	 eax, 8
  007b4	48 6b c0 0d	 imul	 rax, rax, 13
  007b8	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  007bc	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  007c3	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 78   :                 work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

  007c7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  007ce	0f b6 c8	 movzx	 ecx, al
  007d1	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  007d8	48 d3 e8	 shr	 rax, cl
  007db	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  007e2	b8 08 00 00 00	 mov	 eax, 8
  007e7	48 6b c0 0e	 imul	 rax, rax, 14
  007eb	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  007ef	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  007f3	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  007fa	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00801	0f b6 c8	 movzx	 ecx, al
  00804	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0080b	48 d3 e0	 shl	 rax, cl
  0080e	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00815	48 0b c8	 or	 rcx, rax
  00818	48 8b c1	 mov	 rax, rcx
  0081b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00822	b8 08 00 00 00	 mov	 eax, 8
  00827	48 6b c0 0e	 imul	 rax, rax, 14
  0082b	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0082f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00836	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 79   :                 work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

  0083a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00841	0f b6 c8	 movzx	 ecx, al
  00844	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0084b	48 d3 e8	 shr	 rax, cl
  0084e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00855	b8 08 00 00 00	 mov	 eax, 8
  0085a	48 6b c0 0f	 imul	 rax, rax, 15
  0085e	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00862	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00866	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0086d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00874	0f b6 c8	 movzx	 ecx, al
  00877	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0087e	48 d3 e0	 shl	 rax, cl
  00881	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00888	48 0b c8	 or	 rcx, rax
  0088b	48 8b c1	 mov	 rax, rcx
  0088e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00895	b8 08 00 00 00	 mov	 eax, 8
  0089a	48 6b c0 0f	 imul	 rax, rax, 15
  0089e	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  008a2	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  008a9	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 80   :                 work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;

  008ad	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  008b4	0f b6 c8	 movzx	 ecx, al
  008b7	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  008be	48 d3 e8	 shr	 rax, cl
  008c1	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  008c8	b8 08 00 00 00	 mov	 eax, 8
  008cd	48 6b c0 10	 imul	 rax, rax, 16
  008d1	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  008d5	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  008d9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  008e0	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  008e7	0f b6 c8	 movzx	 ecx, al
  008ea	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  008f1	48 d3 e0	 shl	 rax, cl
  008f4	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  008fb	48 0b c8	 or	 rcx, rax
  008fe	48 8b c1	 mov	 rax, rcx
  00901	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00908	b8 08 00 00 00	 mov	 eax, 8
  0090d	48 6b c0 10	 imul	 rax, rax, 16
  00911	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00915	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0091c	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 81   :                 work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;

  00920	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00927	0f b6 c8	 movzx	 ecx, al
  0092a	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00931	48 d3 e8	 shr	 rax, cl
  00934	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0093b	b8 08 00 00 00	 mov	 eax, 8
  00940	48 6b c0 11	 imul	 rax, rax, 17
  00944	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00948	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0094c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00953	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0095a	0f b6 c8	 movzx	 ecx, al
  0095d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00964	48 d3 e0	 shl	 rax, cl
  00967	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0096e	48 0b c8	 or	 rcx, rax
  00971	48 8b c1	 mov	 rax, rcx
  00974	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0097b	b8 08 00 00 00	 mov	 eax, 8
  00980	48 6b c0 11	 imul	 rax, rax, 17
  00984	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00988	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0098f	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 82   :                 work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;

  00993	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0099a	0f b6 c8	 movzx	 ecx, al
  0099d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  009a4	48 d3 e8	 shr	 rax, cl
  009a7	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  009ae	b8 08 00 00 00	 mov	 eax, 8
  009b3	48 6b c0 12	 imul	 rax, rax, 18
  009b7	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  009bb	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  009bf	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  009c6	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  009cd	0f b6 c8	 movzx	 ecx, al
  009d0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  009d7	48 d3 e0	 shl	 rax, cl
  009da	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  009e1	48 0b c8	 or	 rcx, rax
  009e4	48 8b c1	 mov	 rax, rcx
  009e7	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  009ee	b8 08 00 00 00	 mov	 eax, 8
  009f3	48 6b c0 12	 imul	 rax, rax, 18
  009f7	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  009fb	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00a02	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 83   :                 work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;

  00a06	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00a0d	0f b6 c8	 movzx	 ecx, al
  00a10	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00a17	48 d3 e8	 shr	 rax, cl
  00a1a	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00a21	b8 08 00 00 00	 mov	 eax, 8
  00a26	48 6b c0 13	 imul	 rax, rax, 19
  00a2a	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00a2e	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00a32	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00a39	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00a40	0f b6 c8	 movzx	 ecx, al
  00a43	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00a4a	48 d3 e0	 shl	 rax, cl
  00a4d	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00a54	48 0b c8	 or	 rcx, rax
  00a57	48 8b c1	 mov	 rax, rcx
  00a5a	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00a61	b8 08 00 00 00	 mov	 eax, 8
  00a66	48 6b c0 13	 imul	 rax, rax, 19
  00a6a	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00a6e	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00a75	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 84   :                 work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;

  00a79	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00a80	0f b6 c8	 movzx	 ecx, al
  00a83	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00a8a	48 d3 e8	 shr	 rax, cl
  00a8d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00a94	b8 08 00 00 00	 mov	 eax, 8
  00a99	48 6b c0 14	 imul	 rax, rax, 20
  00a9d	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00aa1	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00aa5	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00aac	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00ab3	0f b6 c8	 movzx	 ecx, al
  00ab6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00abd	48 d3 e0	 shl	 rax, cl
  00ac0	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00ac7	48 0b c8	 or	 rcx, rax
  00aca	48 8b c1	 mov	 rax, rcx
  00acd	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00ad4	b8 08 00 00 00	 mov	 eax, 8
  00ad9	48 6b c0 14	 imul	 rax, rax, 20
  00add	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00ae1	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00ae8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 85   :                 work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;

  00aec	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00af3	0f b6 c8	 movzx	 ecx, al
  00af6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00afd	48 d3 e8	 shr	 rax, cl
  00b00	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00b07	b8 08 00 00 00	 mov	 eax, 8
  00b0c	48 6b c0 15	 imul	 rax, rax, 21
  00b10	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00b14	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00b18	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00b1f	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00b26	0f b6 c8	 movzx	 ecx, al
  00b29	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00b30	48 d3 e0	 shl	 rax, cl
  00b33	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00b3a	48 0b c8	 or	 rcx, rax
  00b3d	48 8b c1	 mov	 rax, rcx
  00b40	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00b47	b8 08 00 00 00	 mov	 eax, 8
  00b4c	48 6b c0 15	 imul	 rax, rax, 21
  00b50	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00b54	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00b5b	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 86   :                 work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;

  00b5f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00b66	0f b6 c8	 movzx	 ecx, al
  00b69	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00b70	48 d3 e8	 shr	 rax, cl
  00b73	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00b7a	b8 08 00 00 00	 mov	 eax, 8
  00b7f	48 6b c0 16	 imul	 rax, rax, 22
  00b83	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00b87	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00b8b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00b92	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00b99	0f b6 c8	 movzx	 ecx, al
  00b9c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00ba3	48 d3 e0	 shl	 rax, cl
  00ba6	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00bad	48 0b c8	 or	 rcx, rax
  00bb0	48 8b c1	 mov	 rax, rcx
  00bb3	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00bba	b8 08 00 00 00	 mov	 eax, 8
  00bbf	48 6b c0 16	 imul	 rax, rax, 22
  00bc3	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00bc7	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00bce	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 87   :                 work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;

  00bd2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00bd9	0f b6 c8	 movzx	 ecx, al
  00bdc	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00be3	48 d3 e8	 shr	 rax, cl
  00be6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00bed	b8 08 00 00 00	 mov	 eax, 8
  00bf2	48 6b c0 17	 imul	 rax, rax, 23
  00bf6	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00bfa	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00bfe	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00c05	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00c0c	0f b6 c8	 movzx	 ecx, al
  00c0f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00c16	48 d3 e0	 shl	 rax, cl
  00c19	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00c20	48 0b c8	 or	 rcx, rax
  00c23	48 8b c1	 mov	 rax, rcx
  00c26	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00c2d	b8 08 00 00 00	 mov	 eax, 8
  00c32	48 6b c0 17	 imul	 rax, rax, 23
  00c36	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00c3a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00c41	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 88   :                 work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;

  00c45	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00c4c	0f b6 c8	 movzx	 ecx, al
  00c4f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00c56	48 d3 e8	 shr	 rax, cl
  00c59	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00c60	b8 08 00 00 00	 mov	 eax, 8
  00c65	48 6b c0 18	 imul	 rax, rax, 24
  00c69	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00c6d	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00c71	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00c78	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00c7f	0f b6 c8	 movzx	 ecx, al
  00c82	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00c89	48 d3 e0	 shl	 rax, cl
  00c8c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00c93	48 0b c8	 or	 rcx, rax
  00c96	48 8b c1	 mov	 rax, rcx
  00c99	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00ca0	b8 08 00 00 00	 mov	 eax, 8
  00ca5	48 6b c0 18	 imul	 rax, rax, 24
  00ca9	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00cad	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00cb4	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 89   :                 work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;

  00cb8	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00cbf	0f b6 c8	 movzx	 ecx, al
  00cc2	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00cc9	48 d3 e8	 shr	 rax, cl
  00ccc	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00cd3	b8 08 00 00 00	 mov	 eax, 8
  00cd8	48 6b c0 19	 imul	 rax, rax, 25
  00cdc	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00ce0	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00ce4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00ceb	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00cf2	0f b6 c8	 movzx	 ecx, al
  00cf5	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00cfc	48 d3 e0	 shl	 rax, cl
  00cff	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00d06	48 0b c8	 or	 rcx, rax
  00d09	48 8b c1	 mov	 rax, rcx
  00d0c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00d13	b8 08 00 00 00	 mov	 eax, 8
  00d18	48 6b c0 19	 imul	 rax, rax, 25
  00d1c	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00d20	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00d27	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 90   :                 work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;

  00d2b	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00d32	0f b6 c8	 movzx	 ecx, al
  00d35	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00d3c	48 d3 e8	 shr	 rax, cl
  00d3f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00d46	b8 08 00 00 00	 mov	 eax, 8
  00d4b	48 6b c0 1a	 imul	 rax, rax, 26
  00d4f	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00d53	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00d57	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00d5e	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00d65	0f b6 c8	 movzx	 ecx, al
  00d68	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00d6f	48 d3 e0	 shl	 rax, cl
  00d72	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00d79	48 0b c8	 or	 rcx, rax
  00d7c	48 8b c1	 mov	 rax, rcx
  00d7f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00d86	b8 08 00 00 00	 mov	 eax, 8
  00d8b	48 6b c0 1a	 imul	 rax, rax, 26
  00d8f	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00d93	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00d9a	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 91   :                 work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;

  00d9e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00da5	0f b6 c8	 movzx	 ecx, al
  00da8	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00daf	48 d3 e8	 shr	 rax, cl
  00db2	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00db9	b8 08 00 00 00	 mov	 eax, 8
  00dbe	48 6b c0 1b	 imul	 rax, rax, 27
  00dc2	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00dc6	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00dca	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00dd1	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00dd8	0f b6 c8	 movzx	 ecx, al
  00ddb	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00de2	48 d3 e0	 shl	 rax, cl
  00de5	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00dec	48 0b c8	 or	 rcx, rax
  00def	48 8b c1	 mov	 rax, rcx
  00df2	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00df9	b8 08 00 00 00	 mov	 eax, 8
  00dfe	48 6b c0 1b	 imul	 rax, rax, 27
  00e02	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00e06	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00e0d	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 92   :                 work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;

  00e11	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00e18	0f b6 c8	 movzx	 ecx, al
  00e1b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00e22	48 d3 e8	 shr	 rax, cl
  00e25	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00e2c	b8 08 00 00 00	 mov	 eax, 8
  00e31	48 6b c0 1c	 imul	 rax, rax, 28
  00e35	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00e39	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00e3d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00e44	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00e4b	0f b6 c8	 movzx	 ecx, al
  00e4e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00e55	48 d3 e0	 shl	 rax, cl
  00e58	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00e5f	48 0b c8	 or	 rcx, rax
  00e62	48 8b c1	 mov	 rax, rcx
  00e65	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00e6c	b8 08 00 00 00	 mov	 eax, 8
  00e71	48 6b c0 1c	 imul	 rax, rax, 28
  00e75	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00e79	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00e80	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 93   :                 work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;

  00e84	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00e8b	0f b6 c8	 movzx	 ecx, al
  00e8e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00e95	48 d3 e8	 shr	 rax, cl
  00e98	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00e9f	b8 08 00 00 00	 mov	 eax, 8
  00ea4	48 6b c0 1d	 imul	 rax, rax, 29
  00ea8	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00eac	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00eb0	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00eb7	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00ebe	0f b6 c8	 movzx	 ecx, al
  00ec1	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00ec8	48 d3 e0	 shl	 rax, cl
  00ecb	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00ed2	48 0b c8	 or	 rcx, rax
  00ed5	48 8b c1	 mov	 rax, rcx
  00ed8	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00edf	b8 08 00 00 00	 mov	 eax, 8
  00ee4	48 6b c0 1d	 imul	 rax, rax, 29
  00ee8	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00eec	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00ef3	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 94   :                 work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;

  00ef7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00efe	0f b6 c8	 movzx	 ecx, al
  00f01	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00f08	48 d3 e8	 shr	 rax, cl
  00f0b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00f12	b8 08 00 00 00	 mov	 eax, 8
  00f17	48 6b c0 1e	 imul	 rax, rax, 30
  00f1b	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00f1f	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00f23	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00f2a	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00f31	0f b6 c8	 movzx	 ecx, al
  00f34	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00f3b	48 d3 e0	 shl	 rax, cl
  00f3e	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00f45	48 0b c8	 or	 rcx, rax
  00f48	48 8b c1	 mov	 rax, rcx
  00f4b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00f52	b8 08 00 00 00	 mov	 eax, 8
  00f57	48 6b c0 1e	 imul	 rax, rax, 30
  00f5b	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00f5f	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00f66	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 95   :                 work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;

  00f6a	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  00f71	0f b6 c8	 movzx	 ecx, al
  00f74	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00f7b	48 d3 e8	 shr	 rax, cl
  00f7e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00f85	b8 08 00 00 00	 mov	 eax, 8
  00f8a	48 6b c0 1f	 imul	 rax, rax, 31
  00f8e	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  00f92	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00f96	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  00f9d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  00fa4	0f b6 c8	 movzx	 ecx, al
  00fa7	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  00fae	48 d3 e0	 shl	 rax, cl
  00fb1	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  00fb8	48 0b c8	 or	 rcx, rax
  00fbb	48 8b c1	 mov	 rax, rcx
  00fbe	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  00fc5	b8 08 00 00 00	 mov	 eax, 8
  00fca	48 6b c0 1f	 imul	 rax, rax, 31
  00fce	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  00fd2	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  00fd9	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 96   :                 --count;

  00fdd	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR count$5[rbp]
  00fe4	48 ff c8	 dec	 rax
  00fe7	48 89 85 28 01
	00 00		 mov	 QWORD PTR count$5[rbp], rax

; 97   :                 pp += 32;

  00fee	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  00ff2	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00ff8	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 98   :                 op += 32;

  00ffc	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01000	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  01006	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax

; 99   :             }

  0100a	e9 60 f1 ff ff	 jmp	 $LN2@RightShift
$LN3@RightShift:

; 100  : 
; 101  :             if (t_count & 0x10)

  0100f	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR t_count$4[rbp]
  01016	48 83 e0 10	 and	 rax, 16
  0101a	48 85 c0	 test	 rax, rax
  0101d	0f 84 4c 07 00
	00		 je	 $LN7@RightShift

; 102  :             {
; 103  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  01023	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0102a	0f b6 c8	 movzx	 ecx, al
  0102d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01034	48 d3 e8	 shr	 rax, cl
  01037	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0103e	b8 08 00 00 00	 mov	 eax, 8
  01043	48 6b c0 00	 imul	 rax, rax, 0
  01047	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0104b	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0104f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01056	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0105d	0f b6 c8	 movzx	 ecx, al
  01060	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01067	48 d3 e0	 shl	 rax, cl
  0106a	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01071	48 0b c8	 or	 rcx, rax
  01074	48 8b c1	 mov	 rax, rcx
  01077	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0107e	b8 08 00 00 00	 mov	 eax, 8
  01083	48 6b c0 00	 imul	 rax, rax, 0
  01087	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0108b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01092	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 104  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  01096	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0109d	0f b6 c8	 movzx	 ecx, al
  010a0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  010a7	48 d3 e8	 shr	 rax, cl
  010aa	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  010b1	b8 08 00 00 00	 mov	 eax, 8
  010b6	48 6b c0 01	 imul	 rax, rax, 1
  010ba	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  010be	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  010c2	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  010c9	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  010d0	0f b6 c8	 movzx	 ecx, al
  010d3	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  010da	48 d3 e0	 shl	 rax, cl
  010dd	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  010e4	48 0b c8	 or	 rcx, rax
  010e7	48 8b c1	 mov	 rax, rcx
  010ea	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  010f1	b8 08 00 00 00	 mov	 eax, 8
  010f6	48 6b c0 01	 imul	 rax, rax, 1
  010fa	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  010fe	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01105	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 105  :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

  01109	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01110	0f b6 c8	 movzx	 ecx, al
  01113	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0111a	48 d3 e8	 shr	 rax, cl
  0111d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01124	b8 08 00 00 00	 mov	 eax, 8
  01129	48 6b c0 02	 imul	 rax, rax, 2
  0112d	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01131	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01135	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0113c	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01143	0f b6 c8	 movzx	 ecx, al
  01146	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0114d	48 d3 e0	 shl	 rax, cl
  01150	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01157	48 0b c8	 or	 rcx, rax
  0115a	48 8b c1	 mov	 rax, rcx
  0115d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01164	b8 08 00 00 00	 mov	 eax, 8
  01169	48 6b c0 02	 imul	 rax, rax, 2
  0116d	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01171	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01178	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 106  :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

  0117c	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01183	0f b6 c8	 movzx	 ecx, al
  01186	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0118d	48 d3 e8	 shr	 rax, cl
  01190	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01197	b8 08 00 00 00	 mov	 eax, 8
  0119c	48 6b c0 03	 imul	 rax, rax, 3
  011a0	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  011a4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  011a8	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  011af	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  011b6	0f b6 c8	 movzx	 ecx, al
  011b9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  011c0	48 d3 e0	 shl	 rax, cl
  011c3	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  011ca	48 0b c8	 or	 rcx, rax
  011cd	48 8b c1	 mov	 rax, rcx
  011d0	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  011d7	b8 08 00 00 00	 mov	 eax, 8
  011dc	48 6b c0 03	 imul	 rax, rax, 3
  011e0	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  011e4	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  011eb	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 107  :                 work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

  011ef	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  011f6	0f b6 c8	 movzx	 ecx, al
  011f9	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01200	48 d3 e8	 shr	 rax, cl
  01203	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0120a	b8 08 00 00 00	 mov	 eax, 8
  0120f	48 6b c0 04	 imul	 rax, rax, 4
  01213	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01217	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0121b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01222	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01229	0f b6 c8	 movzx	 ecx, al
  0122c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01233	48 d3 e0	 shl	 rax, cl
  01236	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0123d	48 0b c8	 or	 rcx, rax
  01240	48 8b c1	 mov	 rax, rcx
  01243	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0124a	b8 08 00 00 00	 mov	 eax, 8
  0124f	48 6b c0 04	 imul	 rax, rax, 4
  01253	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01257	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0125e	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 108  :                 work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

  01262	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01269	0f b6 c8	 movzx	 ecx, al
  0126c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01273	48 d3 e8	 shr	 rax, cl
  01276	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0127d	b8 08 00 00 00	 mov	 eax, 8
  01282	48 6b c0 05	 imul	 rax, rax, 5
  01286	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0128a	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0128e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01295	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0129c	0f b6 c8	 movzx	 ecx, al
  0129f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  012a6	48 d3 e0	 shl	 rax, cl
  012a9	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  012b0	48 0b c8	 or	 rcx, rax
  012b3	48 8b c1	 mov	 rax, rcx
  012b6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  012bd	b8 08 00 00 00	 mov	 eax, 8
  012c2	48 6b c0 05	 imul	 rax, rax, 5
  012c6	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  012ca	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  012d1	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 109  :                 work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

  012d5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  012dc	0f b6 c8	 movzx	 ecx, al
  012df	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  012e6	48 d3 e8	 shr	 rax, cl
  012e9	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  012f0	b8 08 00 00 00	 mov	 eax, 8
  012f5	48 6b c0 06	 imul	 rax, rax, 6
  012f9	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  012fd	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01301	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01308	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0130f	0f b6 c8	 movzx	 ecx, al
  01312	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01319	48 d3 e0	 shl	 rax, cl
  0131c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01323	48 0b c8	 or	 rcx, rax
  01326	48 8b c1	 mov	 rax, rcx
  01329	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01330	b8 08 00 00 00	 mov	 eax, 8
  01335	48 6b c0 06	 imul	 rax, rax, 6
  01339	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0133d	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01344	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 110  :                 work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

  01348	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0134f	0f b6 c8	 movzx	 ecx, al
  01352	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01359	48 d3 e8	 shr	 rax, cl
  0135c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01363	b8 08 00 00 00	 mov	 eax, 8
  01368	48 6b c0 07	 imul	 rax, rax, 7
  0136c	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01370	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01374	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0137b	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01382	0f b6 c8	 movzx	 ecx, al
  01385	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0138c	48 d3 e0	 shl	 rax, cl
  0138f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01396	48 0b c8	 or	 rcx, rax
  01399	48 8b c1	 mov	 rax, rcx
  0139c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  013a3	b8 08 00 00 00	 mov	 eax, 8
  013a8	48 6b c0 07	 imul	 rax, rax, 7
  013ac	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  013b0	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  013b7	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 111  :                 work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

  013bb	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  013c2	0f b6 c8	 movzx	 ecx, al
  013c5	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  013cc	48 d3 e8	 shr	 rax, cl
  013cf	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  013d6	b8 08 00 00 00	 mov	 eax, 8
  013db	48 6b c0 08	 imul	 rax, rax, 8
  013df	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  013e3	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  013e7	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  013ee	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  013f5	0f b6 c8	 movzx	 ecx, al
  013f8	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  013ff	48 d3 e0	 shl	 rax, cl
  01402	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01409	48 0b c8	 or	 rcx, rax
  0140c	48 8b c1	 mov	 rax, rcx
  0140f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01416	b8 08 00 00 00	 mov	 eax, 8
  0141b	48 6b c0 08	 imul	 rax, rax, 8
  0141f	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01423	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0142a	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 112  :                 work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

  0142e	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01435	0f b6 c8	 movzx	 ecx, al
  01438	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0143f	48 d3 e8	 shr	 rax, cl
  01442	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01449	b8 08 00 00 00	 mov	 eax, 8
  0144e	48 6b c0 09	 imul	 rax, rax, 9
  01452	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01456	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0145a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01461	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01468	0f b6 c8	 movzx	 ecx, al
  0146b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01472	48 d3 e0	 shl	 rax, cl
  01475	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0147c	48 0b c8	 or	 rcx, rax
  0147f	48 8b c1	 mov	 rax, rcx
  01482	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01489	b8 08 00 00 00	 mov	 eax, 8
  0148e	48 6b c0 09	 imul	 rax, rax, 9
  01492	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01496	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0149d	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 113  :                 work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

  014a1	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  014a8	0f b6 c8	 movzx	 ecx, al
  014ab	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  014b2	48 d3 e8	 shr	 rax, cl
  014b5	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  014bc	b8 08 00 00 00	 mov	 eax, 8
  014c1	48 6b c0 0a	 imul	 rax, rax, 10
  014c5	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  014c9	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  014cd	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  014d4	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  014db	0f b6 c8	 movzx	 ecx, al
  014de	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  014e5	48 d3 e0	 shl	 rax, cl
  014e8	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  014ef	48 0b c8	 or	 rcx, rax
  014f2	48 8b c1	 mov	 rax, rcx
  014f5	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  014fc	b8 08 00 00 00	 mov	 eax, 8
  01501	48 6b c0 0a	 imul	 rax, rax, 10
  01505	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01509	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01510	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 114  :                 work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

  01514	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0151b	0f b6 c8	 movzx	 ecx, al
  0151e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01525	48 d3 e8	 shr	 rax, cl
  01528	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0152f	b8 08 00 00 00	 mov	 eax, 8
  01534	48 6b c0 0b	 imul	 rax, rax, 11
  01538	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0153c	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01540	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01547	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0154e	0f b6 c8	 movzx	 ecx, al
  01551	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01558	48 d3 e0	 shl	 rax, cl
  0155b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01562	48 0b c8	 or	 rcx, rax
  01565	48 8b c1	 mov	 rax, rcx
  01568	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0156f	b8 08 00 00 00	 mov	 eax, 8
  01574	48 6b c0 0b	 imul	 rax, rax, 11
  01578	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0157c	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01583	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 115  :                 work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

  01587	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0158e	0f b6 c8	 movzx	 ecx, al
  01591	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01598	48 d3 e8	 shr	 rax, cl
  0159b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  015a2	b8 08 00 00 00	 mov	 eax, 8
  015a7	48 6b c0 0c	 imul	 rax, rax, 12
  015ab	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  015af	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  015b3	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  015ba	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  015c1	0f b6 c8	 movzx	 ecx, al
  015c4	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  015cb	48 d3 e0	 shl	 rax, cl
  015ce	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  015d5	48 0b c8	 or	 rcx, rax
  015d8	48 8b c1	 mov	 rax, rcx
  015db	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  015e2	b8 08 00 00 00	 mov	 eax, 8
  015e7	48 6b c0 0c	 imul	 rax, rax, 12
  015eb	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  015ef	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  015f6	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 116  :                 work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

  015fa	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01601	0f b6 c8	 movzx	 ecx, al
  01604	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0160b	48 d3 e8	 shr	 rax, cl
  0160e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01615	b8 08 00 00 00	 mov	 eax, 8
  0161a	48 6b c0 0d	 imul	 rax, rax, 13
  0161e	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01622	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01626	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0162d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01634	0f b6 c8	 movzx	 ecx, al
  01637	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0163e	48 d3 e0	 shl	 rax, cl
  01641	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01648	48 0b c8	 or	 rcx, rax
  0164b	48 8b c1	 mov	 rax, rcx
  0164e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01655	b8 08 00 00 00	 mov	 eax, 8
  0165a	48 6b c0 0d	 imul	 rax, rax, 13
  0165e	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01662	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01669	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 117  :                 work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

  0166d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01674	0f b6 c8	 movzx	 ecx, al
  01677	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0167e	48 d3 e8	 shr	 rax, cl
  01681	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01688	b8 08 00 00 00	 mov	 eax, 8
  0168d	48 6b c0 0e	 imul	 rax, rax, 14
  01691	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01695	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01699	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  016a0	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  016a7	0f b6 c8	 movzx	 ecx, al
  016aa	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  016b1	48 d3 e0	 shl	 rax, cl
  016b4	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  016bb	48 0b c8	 or	 rcx, rax
  016be	48 8b c1	 mov	 rax, rcx
  016c1	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  016c8	b8 08 00 00 00	 mov	 eax, 8
  016cd	48 6b c0 0e	 imul	 rax, rax, 14
  016d1	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  016d5	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  016dc	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 118  :                 work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

  016e0	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  016e7	0f b6 c8	 movzx	 ecx, al
  016ea	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  016f1	48 d3 e8	 shr	 rax, cl
  016f4	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  016fb	b8 08 00 00 00	 mov	 eax, 8
  01700	48 6b c0 0f	 imul	 rax, rax, 15
  01704	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01708	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0170c	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01713	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  0171a	0f b6 c8	 movzx	 ecx, al
  0171d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01724	48 d3 e0	 shl	 rax, cl
  01727	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0172e	48 0b c8	 or	 rcx, rax
  01731	48 8b c1	 mov	 rax, rcx
  01734	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0173b	b8 08 00 00 00	 mov	 eax, 8
  01740	48 6b c0 0f	 imul	 rax, rax, 15
  01744	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01748	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0174f	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 119  :                 pp += 16;

  01753	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  01757	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0175d	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 120  :                 op += 16;

  01761	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01765	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0176b	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax
$LN7@RightShift:

; 121  :             }
; 122  : 
; 123  :             if (t_count & 0x8)

  0176f	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR t_count$4[rbp]
  01776	48 83 e0 08	 and	 rax, 8
  0177a	48 85 c0	 test	 rax, rax
  0177d	0f 84 b0 03 00
	00		 je	 $LN8@RightShift

; 124  :             {
; 125  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  01783	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  0178a	0f b6 c8	 movzx	 ecx, al
  0178d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01794	48 d3 e8	 shr	 rax, cl
  01797	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0179e	b8 08 00 00 00	 mov	 eax, 8
  017a3	48 6b c0 00	 imul	 rax, rax, 0
  017a7	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  017ab	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  017af	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  017b6	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  017bd	0f b6 c8	 movzx	 ecx, al
  017c0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  017c7	48 d3 e0	 shl	 rax, cl
  017ca	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  017d1	48 0b c8	 or	 rcx, rax
  017d4	48 8b c1	 mov	 rax, rcx
  017d7	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  017de	b8 08 00 00 00	 mov	 eax, 8
  017e3	48 6b c0 00	 imul	 rax, rax, 0
  017e7	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  017eb	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  017f2	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 126  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  017f6	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  017fd	0f b6 c8	 movzx	 ecx, al
  01800	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01807	48 d3 e8	 shr	 rax, cl
  0180a	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01811	b8 08 00 00 00	 mov	 eax, 8
  01816	48 6b c0 01	 imul	 rax, rax, 1
  0181a	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  0181e	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01822	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01829	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01830	0f b6 c8	 movzx	 ecx, al
  01833	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0183a	48 d3 e0	 shl	 rax, cl
  0183d	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01844	48 0b c8	 or	 rcx, rax
  01847	48 8b c1	 mov	 rax, rcx
  0184a	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01851	b8 08 00 00 00	 mov	 eax, 8
  01856	48 6b c0 01	 imul	 rax, rax, 1
  0185a	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  0185e	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01865	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 127  :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

  01869	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01870	0f b6 c8	 movzx	 ecx, al
  01873	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  0187a	48 d3 e8	 shr	 rax, cl
  0187d	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01884	b8 08 00 00 00	 mov	 eax, 8
  01889	48 6b c0 02	 imul	 rax, rax, 2
  0188d	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01891	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01895	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0189c	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  018a3	0f b6 c8	 movzx	 ecx, al
  018a6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  018ad	48 d3 e0	 shl	 rax, cl
  018b0	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  018b7	48 0b c8	 or	 rcx, rax
  018ba	48 8b c1	 mov	 rax, rcx
  018bd	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  018c4	b8 08 00 00 00	 mov	 eax, 8
  018c9	48 6b c0 02	 imul	 rax, rax, 2
  018cd	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  018d1	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  018d8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 128  :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

  018dc	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  018e3	0f b6 c8	 movzx	 ecx, al
  018e6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  018ed	48 d3 e8	 shr	 rax, cl
  018f0	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  018f7	b8 08 00 00 00	 mov	 eax, 8
  018fc	48 6b c0 03	 imul	 rax, rax, 3
  01900	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01904	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01908	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  0190f	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01916	0f b6 c8	 movzx	 ecx, al
  01919	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01920	48 d3 e0	 shl	 rax, cl
  01923	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0192a	48 0b c8	 or	 rcx, rax
  0192d	48 8b c1	 mov	 rax, rcx
  01930	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01937	b8 08 00 00 00	 mov	 eax, 8
  0193c	48 6b c0 03	 imul	 rax, rax, 3
  01940	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01944	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  0194b	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 129  :                 work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

  0194f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01956	0f b6 c8	 movzx	 ecx, al
  01959	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01960	48 d3 e8	 shr	 rax, cl
  01963	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  0196a	b8 08 00 00 00	 mov	 eax, 8
  0196f	48 6b c0 04	 imul	 rax, rax, 4
  01973	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01977	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0197b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01982	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01989	0f b6 c8	 movzx	 ecx, al
  0198c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01993	48 d3 e0	 shl	 rax, cl
  01996	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  0199d	48 0b c8	 or	 rcx, rax
  019a0	48 8b c1	 mov	 rax, rcx
  019a3	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  019aa	b8 08 00 00 00	 mov	 eax, 8
  019af	48 6b c0 04	 imul	 rax, rax, 4
  019b3	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  019b7	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  019be	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 130  :                 work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

  019c2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  019c9	0f b6 c8	 movzx	 ecx, al
  019cc	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  019d3	48 d3 e8	 shr	 rax, cl
  019d6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  019dd	b8 08 00 00 00	 mov	 eax, 8
  019e2	48 6b c0 05	 imul	 rax, rax, 5
  019e6	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  019ea	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  019ee	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  019f5	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  019fc	0f b6 c8	 movzx	 ecx, al
  019ff	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01a06	48 d3 e0	 shl	 rax, cl
  01a09	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01a10	48 0b c8	 or	 rcx, rax
  01a13	48 8b c1	 mov	 rax, rcx
  01a16	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01a1d	b8 08 00 00 00	 mov	 eax, 8
  01a22	48 6b c0 05	 imul	 rax, rax, 5
  01a26	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01a2a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01a31	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 131  :                 work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

  01a35	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01a3c	0f b6 c8	 movzx	 ecx, al
  01a3f	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01a46	48 d3 e8	 shr	 rax, cl
  01a49	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01a50	b8 08 00 00 00	 mov	 eax, 8
  01a55	48 6b c0 06	 imul	 rax, rax, 6
  01a59	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01a5d	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01a61	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01a68	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01a6f	0f b6 c8	 movzx	 ecx, al
  01a72	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01a79	48 d3 e0	 shl	 rax, cl
  01a7c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01a83	48 0b c8	 or	 rcx, rax
  01a86	48 8b c1	 mov	 rax, rcx
  01a89	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01a90	b8 08 00 00 00	 mov	 eax, 8
  01a95	48 6b c0 06	 imul	 rax, rax, 6
  01a99	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01a9d	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01aa4	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 132  :                 work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

  01aa8	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01aaf	0f b6 c8	 movzx	 ecx, al
  01ab2	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01ab9	48 d3 e8	 shr	 rax, cl
  01abc	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01ac3	b8 08 00 00 00	 mov	 eax, 8
  01ac8	48 6b c0 07	 imul	 rax, rax, 7
  01acc	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01ad0	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01ad4	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01adb	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01ae2	0f b6 c8	 movzx	 ecx, al
  01ae5	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01aec	48 d3 e0	 shl	 rax, cl
  01aef	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01af6	48 0b c8	 or	 rcx, rax
  01af9	48 8b c1	 mov	 rax, rcx
  01afc	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01b03	b8 08 00 00 00	 mov	 eax, 8
  01b08	48 6b c0 07	 imul	 rax, rax, 7
  01b0c	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01b10	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01b17	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 133  :                 pp += 8;

  01b1b	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  01b1f	48 83 c0 40	 add	 rax, 64			; 00000040H
  01b23	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 134  :                 op += 8;

  01b27	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01b2b	48 83 c0 40	 add	 rax, 64			; 00000040H
  01b2f	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax
$LN8@RightShift:

; 135  :             }
; 136  : 
; 137  :             if (t_count & 0x4)

  01b33	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR t_count$4[rbp]
  01b3a	48 83 e0 04	 and	 rax, 4
  01b3e	48 85 c0	 test	 rax, rax
  01b41	0f 84 e4 01 00
	00		 je	 $LN9@RightShift

; 138  :             {
; 139  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  01b47	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01b4e	0f b6 c8	 movzx	 ecx, al
  01b51	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01b58	48 d3 e8	 shr	 rax, cl
  01b5b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01b62	b8 08 00 00 00	 mov	 eax, 8
  01b67	48 6b c0 00	 imul	 rax, rax, 0
  01b6b	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01b6f	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01b73	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01b7a	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01b81	0f b6 c8	 movzx	 ecx, al
  01b84	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01b8b	48 d3 e0	 shl	 rax, cl
  01b8e	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01b95	48 0b c8	 or	 rcx, rax
  01b98	48 8b c1	 mov	 rax, rcx
  01b9b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01ba2	b8 08 00 00 00	 mov	 eax, 8
  01ba7	48 6b c0 00	 imul	 rax, rax, 0
  01bab	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01baf	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01bb6	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 140  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  01bba	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01bc1	0f b6 c8	 movzx	 ecx, al
  01bc4	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01bcb	48 d3 e8	 shr	 rax, cl
  01bce	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01bd5	b8 08 00 00 00	 mov	 eax, 8
  01bda	48 6b c0 01	 imul	 rax, rax, 1
  01bde	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01be2	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01be6	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01bed	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01bf4	0f b6 c8	 movzx	 ecx, al
  01bf7	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01bfe	48 d3 e0	 shl	 rax, cl
  01c01	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01c08	48 0b c8	 or	 rcx, rax
  01c0b	48 8b c1	 mov	 rax, rcx
  01c0e	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01c15	b8 08 00 00 00	 mov	 eax, 8
  01c1a	48 6b c0 01	 imul	 rax, rax, 1
  01c1e	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01c22	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01c29	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 141  :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

  01c2d	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01c34	0f b6 c8	 movzx	 ecx, al
  01c37	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01c3e	48 d3 e8	 shr	 rax, cl
  01c41	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01c48	b8 08 00 00 00	 mov	 eax, 8
  01c4d	48 6b c0 02	 imul	 rax, rax, 2
  01c51	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01c55	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01c59	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01c60	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01c67	0f b6 c8	 movzx	 ecx, al
  01c6a	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01c71	48 d3 e0	 shl	 rax, cl
  01c74	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01c7b	48 0b c8	 or	 rcx, rax
  01c7e	48 8b c1	 mov	 rax, rcx
  01c81	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01c88	b8 08 00 00 00	 mov	 eax, 8
  01c8d	48 6b c0 02	 imul	 rax, rax, 2
  01c91	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01c95	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01c9c	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 142  :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

  01ca0	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01ca7	0f b6 c8	 movzx	 ecx, al
  01caa	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01cb1	48 d3 e8	 shr	 rax, cl
  01cb4	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01cbb	b8 08 00 00 00	 mov	 eax, 8
  01cc0	48 6b c0 03	 imul	 rax, rax, 3
  01cc4	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01cc8	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01ccc	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01cd3	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01cda	0f b6 c8	 movzx	 ecx, al
  01cdd	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01ce4	48 d3 e0	 shl	 rax, cl
  01ce7	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01cee	48 0b c8	 or	 rcx, rax
  01cf1	48 8b c1	 mov	 rax, rcx
  01cf4	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01cfb	b8 08 00 00 00	 mov	 eax, 8
  01d00	48 6b c0 03	 imul	 rax, rax, 3
  01d04	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01d08	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01d0f	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 143  :                 pp += 4;

  01d13	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  01d17	48 83 c0 20	 add	 rax, 32			; 00000020H
  01d1b	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 144  :                 op += 4;

  01d1f	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01d23	48 83 c0 20	 add	 rax, 32			; 00000020H
  01d27	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax
$LN9@RightShift:

; 145  :             }
; 146  : 
; 147  :             if (t_count & 0x2)

  01d2b	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR t_count$4[rbp]
  01d32	48 83 e0 02	 and	 rax, 2
  01d36	48 85 c0	 test	 rax, rax
  01d39	0f 84 fe 00 00
	00		 je	 $LN10@RightShift

; 148  :             {
; 149  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  01d3f	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01d46	0f b6 c8	 movzx	 ecx, al
  01d49	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01d50	48 d3 e8	 shr	 rax, cl
  01d53	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01d5a	b8 08 00 00 00	 mov	 eax, 8
  01d5f	48 6b c0 00	 imul	 rax, rax, 0
  01d63	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01d67	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01d6b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01d72	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01d79	0f b6 c8	 movzx	 ecx, al
  01d7c	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01d83	48 d3 e0	 shl	 rax, cl
  01d86	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01d8d	48 0b c8	 or	 rcx, rax
  01d90	48 8b c1	 mov	 rax, rcx
  01d93	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01d9a	b8 08 00 00 00	 mov	 eax, 8
  01d9f	48 6b c0 00	 imul	 rax, rax, 0
  01da3	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01da7	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01dae	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 150  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  01db2	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01db9	0f b6 c8	 movzx	 ecx, al
  01dbc	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01dc3	48 d3 e8	 shr	 rax, cl
  01dc6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01dcd	b8 08 00 00 00	 mov	 eax, 8
  01dd2	48 6b c0 01	 imul	 rax, rax, 1
  01dd6	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01dda	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01dde	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01de5	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01dec	0f b6 c8	 movzx	 ecx, al
  01def	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01df6	48 d3 e0	 shl	 rax, cl
  01df9	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01e00	48 0b c8	 or	 rcx, rax
  01e03	48 8b c1	 mov	 rax, rcx
  01e06	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01e0d	b8 08 00 00 00	 mov	 eax, 8
  01e12	48 6b c0 01	 imul	 rax, rax, 1
  01e16	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01e1a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01e21	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 151  :                 pp += 2;

  01e25	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  01e29	48 83 c0 10	 add	 rax, 16
  01e2d	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 152  :                 op += 2;

  01e31	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01e35	48 83 c0 10	 add	 rax, 16
  01e39	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax
$LN10@RightShift:

; 153  :             }
; 154  : 
; 155  :             if (t_count & 0x1)

  01e3d	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR t_count$4[rbp]
  01e44	48 83 e0 01	 and	 rax, 1
  01e48	48 85 c0	 test	 rax, rax
  01e4b	0f 84 8b 00 00
	00		 je	 $LN11@RightShift

; 156  :             {
; 157  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  01e51	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01e58	0f b6 c8	 movzx	 ecx, al
  01e5b	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01e62	48 d3 e8	 shr	 rax, cl
  01e65	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01e6c	b8 08 00 00 00	 mov	 eax, 8
  01e71	48 6b c0 00	 imul	 rax, rax, 0
  01e75	48 8b 4d 08	 mov	 rcx, QWORD PTR pp$[rbp]
  01e79	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  01e7d	48 89 85 c8 00
	00 00		 mov	 QWORD PTR temp$2[rbp], rax
  01e84	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR n_lshift_bit_count$1[rbp]
  01e8b	0f b6 c8	 movzx	 ecx, al
  01e8e	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01e95	48 d3 e0	 shl	 rax, cl
  01e98	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01e9f	48 0b c8	 or	 rcx, rax
  01ea2	48 8b c1	 mov	 rax, rcx
  01ea5	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax
  01eac	b8 08 00 00 00	 mov	 eax, 8
  01eb1	48 6b c0 00	 imul	 rax, rax, 0
  01eb5	48 8b 4d 48	 mov	 rcx, QWORD PTR op$[rbp]
  01eb9	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR work$3[rbp]
  01ec0	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 158  :                 pp += 1;

  01ec4	48 8b 45 08	 mov	 rax, QWORD PTR pp$[rbp]
  01ec8	48 83 c0 08	 add	 rax, 8
  01ecc	48 89 45 08	 mov	 QWORD PTR pp$[rbp], rax

; 159  :                 op += 1;

  01ed0	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01ed4	48 83 c0 08	 add	 rax, 8
  01ed8	48 89 45 48	 mov	 QWORD PTR op$[rbp], rax
$LN11@RightShift:

; 160  :             }
; 161  : 
; 162  :             work = temp >> n_rshift_bit_count;

  01edc	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR n_rshift_bit_count$[rbp]
  01ee3	0f b6 c8	 movzx	 ecx, al
  01ee6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR temp$2[rbp]
  01eed	48 d3 e8	 shr	 rax, cl
  01ef0	48 89 85 e8 00
	00 00		 mov	 QWORD PTR work$3[rbp], rax

; 163  :             if (work != 0 || padding_zero)

  01ef7	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR work$3[rbp], 0
  01eff	75 09		 jne	 SHORT $LN13@RightShift
  01f01	83 bd 40 02 00
	00 00		 cmp	 DWORD PTR padding_zero$[rbp], 0
  01f08	74 0e		 je	 SHORT $LN12@RightShift
$LN13@RightShift:

; 164  :                 *op = work;

  01f0a	48 8b 45 48	 mov	 rax, QWORD PTR op$[rbp]
  01f0e	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR work$3[rbp]
  01f15	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN12@RightShift:

; 165  : 
; 166  :             if (padding_zero)

  01f18	83 bd 40 02 00
	00 00		 cmp	 DWORD PTR padding_zero$[rbp], 0
  01f1f	74 29		 je	 SHORT $LN14@RightShift

; 167  :                 _ZERO_MEMORY_UNIT(o + p_word_count - n_word_count, n_word_count);

  01f21	48 8b 85 38 02
	00 00		 mov	 rax, QWORD PTR o$[rbp]
  01f28	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR p_word_count$[rbp]
  01f2f	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  01f33	48 8b 4d 68	 mov	 rcx, QWORD PTR n_word_count$[rbp]
  01f37	48 c1 e1 03	 shl	 rcx, 3
  01f3b	48 2b c1	 sub	 rax, rcx
  01f3e	48 8b 55 68	 mov	 rdx, QWORD PTR n_word_count$[rbp]
  01f42	48 8b c8	 mov	 rcx, rax
  01f45	e8 00 00 00 00	 call	 _ZERO_MEMORY_UNIT
$LN14@RightShift:
$LN5@RightShift:

; 168  :         }
; 169  :     }

  01f4a	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  01f51	5f		 pop	 rdi
  01f52	5d		 pop	 rbp
  01f53	c3		 ret	 0
?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPEA_K_K10H@Z ENDP ; Palmtree::Math::Core::Internal::RightShift_Imp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT

; 295  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 296  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT

; 291  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 290  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 291  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 292  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT

; 286  :         {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  0004c	4c 8b 8d 10 01
	00 00		 mov	 r9, QWORD PTR data$[rbp]
  00053	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0005a	ba 00 ff ff ff	 mov	 edx, -256		; ffffffffffffff00H
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0006b	90		 npad	 1

; 286  :         {

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 287  :         }

  0007d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
data$ = 272
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT

; 124  :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 125  :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT

; 120  :         {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1

; 119  :             : Exception(p)

  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0005a	90		 npad	 1

; 120  :         {

  0005b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00069	48 89 08	 mov	 QWORD PTR [rax], rcx

; 121  :         }

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT

; 115  :         {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8b fc	 mov	 rdi, rsp
  00020	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00034	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00046	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004b	90		 npad	 1

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  0004c	4c 8b 8d 10 01
	00 00		 mov	 r9, QWORD PTR param_name$[rbp]
  00053	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR message$[rbp]
  0005a	ba fe ff ff ff	 mov	 edx, -2
  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0006b	90		 npad	 1

; 115  :         {

  0006c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 116  :         }

  0007d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00084	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
message$ = 264
param_name$ = 272
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT

; 70   :         {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         }

  00053	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0005f	90		 npad	 1
  00060	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 62   :         Exception(const Exception& p) noexcept(true)

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002f	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  00041	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00046	90		 npad	 1
  00047	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@XZ ; std::exception::exception
  00053	90		 npad	 1
  00054	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00062	48 89 08	 mov	 QWORD PTR [rax], rcx

; 63   :         {
; 64   :             _code = p._code;

  00065	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00073	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00076	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 65   :             _message = p._message;

  00079	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00080	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00087	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0008b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 66   :             _data = p._data;

  0008f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00096	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0009d	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  000a1	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 67   :         }

  000a5	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ac	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b3	5f		 pop	 rdi
  000b4	5d		 pop	 rbp
  000b5	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
p$ = 264
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8b fc	 mov	 rdi, rsp
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00038	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__802FEEC0_pmc_exception@h
  0004a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004f	90		 npad	 1
  00050	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00057	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@XZ ; std::exception::exception
  0005c	90		 npad	 1
  0005d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0006b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 55   :         {
; 56   :             _code = code;

  0006e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00075	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR code$[rbp]
  0007b	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 57   :             _message = message;

  0007e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00085	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  0008c	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 58   :             _data = data;

  00090	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00097	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR data$[rbp]
  0009e	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 59   :         }

  000a2	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a9	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b0	5f		 pop	 rdi
  000b1	5d		 pop	 rbp
  000b2	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
code$ = 264
message$ = 272
data$ = 280
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR [rsp+264]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0003a	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 11		 je	 SHORT $LN2@scalar
  00047	ba 18 00 00 00	 mov	 edx, 24
  0004c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00053	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 90   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR [rsp+280]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  00031	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00036	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00042	74 14		 je	 SHORT $LN3@what
  00044	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  00056	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  0005f	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  00066	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 92   :     }

  0006d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 85   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 86   :         __std_exception_destroy(&_Data);

  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 c0 08	 add	 rax, 8
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 __std_exception_destroy
  00066	90		 npad	 1

; 87   :     }

  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??0exception@std@@QEAA@XZ PROC				; std::exception::exception, COMDAT

; 50   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002a	48 c7 85 c8 00
	00 00 fe ff ff
	ff		 mov	 QWORD PTR $T1[rbp], -2
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__9BB4E194_vcruntime_exception@h
  0003c	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00041	90		 npad	 1
  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00050	48 89 08	 mov	 QWORD PTR [rax], rcx

; 49   :         : _Data()

  00053	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 83 c0 08	 add	 rax, 8
  0005e	48 8b f8	 mov	 rdi, rax
  00061	33 c0		 xor	 eax, eax
  00063	b9 10 00 00 00	 mov	 ecx, 16
  00068	f3 aa		 rep stosb

; 51   :     }

  0006a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??0exception@std@@QEAA@XZ ENDP				; std::exception::exception
_TEXT	ENDS
END
