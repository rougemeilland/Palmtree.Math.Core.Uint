; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\TEST_op_Subtruct.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__630249ED_pmc_uint_debug@h DB 01H
__029660FF_test_op_subtruct@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_PMC_Subtruct_I_X
PUBLIC	_TEST_PMC_Subtruct_L_X
PUBLIC	_TEST_PMC_Subtruct_X_I
PUBLIC	_TEST_PMC_Subtruct_X_L
PUBLIC	_TEST_PMC_Subtruct_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG94980 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94981 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94982 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'I', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG94983 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94985 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94986 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95009 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95010 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95011 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'L', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95012 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95014 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95015 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95043 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95044 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95045 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95046 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95048 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95049 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95050 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95051 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95080 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95081 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95082 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95083 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95085 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95086 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95087 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95088 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95121 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95122 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95123 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95124 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95125 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95126 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95128 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95129 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95130 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95131 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'S', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_debug.h
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC

; 151  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __630249ED_pmc_uint_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 152  :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 153  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 154  :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 155  :     {
; 156  :         if (*buffer1 != *buffer2)

	mov	ecx, DWORD PTR _buffer1$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _buffer2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN5@EQUALS_MEM

; 157  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 158  :         ++buffer1;

	mov	edx, DWORD PTR _buffer1$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer1$[ebp], edx

; 159  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 160  :         --count1;

	mov	ecx, DWORD PTR _count1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count1$[ebp], ecx

; 161  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 162  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 163  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_subtruct.c
_TEXT	SEGMENT
tv177 = -352						; size = 4
tv162 = -348						; size = 4
tv142 = -344						; size = 4
tv92 = -340						; size = 4
tv74 = -336						; size = 4
_z_result$ = -332					; size = 4
_y_result$ = -328					; size = 4
_x_result$ = -324					; size = 4
_result$ = -320						; size = 4
_actual_z_buf_size$ = -312				; size = 4
_actual_z_buf$ = -300					; size = 256
_z$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y_buf$ = 28						; size = 4
_y_buf_size$ = 32					; size = 4
_desired_result_code$ = 36				; size = 4
_desired_z_buf$ = 40					; size = 4
_desired_z_buf_size$ = 44				; size = 4
_TEST_PMC_Subtruct_X_X PROC

; 109  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __029660FF_test_op_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 110  :     PMC_HANDLE_UINT x;
; 111  :     PMC_HANDLE_UINT y;
; 112  :     PMC_HANDLE_UINT z;
; 113  :     unsigned char actual_z_buf[256];
; 114  :     size_t actual_z_buf_size;
; 115  :     PMC_STATUS_CODE result;
; 116  :     PMC_STATUS_CODE x_result;
; 117  :     PMC_STATUS_CODE y_result;
; 118  :     PMC_STATUS_CODE z_result;
; 119  :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_X (%d.%d)", no, 1), (x_result = ep->FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN7@TEST_PMC_S
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_S
$LN7@TEST_PMC_S:
	mov	DWORD PTR tv74[ebp], 0
$LN8@TEST_PMC_S:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG95121
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95122
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 120  :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_X (%d.%d)", no, 2), (y_result = ep->FromByteArray(y_buf, y_buf_size, &y)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", y_result));

	mov	esi, esp
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _y_result$[ebp], eax
	cmp	DWORD PTR _y_result$[ebp], 0
	jne	SHORT $LN9@TEST_PMC_S
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_S
$LN9@TEST_PMC_S:
	mov	DWORD PTR tv92[ebp], 0
$LN10@TEST_PMC_S:
	mov	edx, DWORD PTR _y_result$[ebp]
	push	edx
	push	OFFSET $SG95123
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95124
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 121  :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_X (%d.%d)", no, 3), (z_result = ep->Subtruct_X_X(x, y, &z)) == desired_result_code, FormatTestMesssage(L"PMC_Subtruct_X_Xの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	mov	edx, DWORD PTR _z_result$[ebp]
	cmp	edx, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN11@TEST_PMC_S
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN12@TEST_PMC_S
$LN11@TEST_PMC_S:
	mov	DWORD PTR tv142[ebp], 0
$LN12@TEST_PMC_S:
	mov	eax, DWORD PTR _z_result$[ebp]
	push	eax
	push	OFFSET $SG95125
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv142[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95126
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 122  :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	$LN2@TEST_PMC_S

; 123  :     {
; 124  :         TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_X (%d.%d)", no, 4), (result = ep->ToByteArray(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	ecx, DWORD PTR _actual_z_buf_size$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _actual_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN13@TEST_PMC_S
	mov	DWORD PTR tv162[ebp], 1
	jmp	SHORT $LN14@TEST_PMC_S
$LN13@TEST_PMC_S:
	mov	DWORD PTR tv162[ebp], 0
$LN14@TEST_PMC_S:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG95128
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv162[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95129
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 125  :         TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _desired_z_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN15@TEST_PMC_S
	mov	DWORD PTR tv177[ebp], 1
	jmp	SHORT $LN16@TEST_PMC_S
$LN15@TEST_PMC_S:
	mov	DWORD PTR tv177[ebp], 0
$LN16@TEST_PMC_S:
	push	OFFSET $SG95130
	mov	edx, DWORD PTR tv177[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95131
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_S:

; 126  :     }
; 127  :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_S

; 128  :         ep->Dispose(z);

	mov	esi, esp
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_S:

; 129  :     if (y_result == PMC_STATUS_OK)

	cmp	DWORD PTR _y_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_S

; 130  :         ep->Dispose(y);

	mov	esi, esp
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@TEST_PMC_S:

; 131  :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_S

; 132  :         ep->Dispose(x);

	mov	esi, esp
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_S:

; 133  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@TEST_PMC_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@TEST_PMC_S:
	DD	5
	DD	$LN22@TEST_PMC_S
$LN22@TEST_PMC_S:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN17@TEST_PMC_S
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN18@TEST_PMC_S
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN19@TEST_PMC_S
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN20@TEST_PMC_S
	DD	-312					; fffffec8H
	DD	4
	DD	$LN21@TEST_PMC_S
$LN21@TEST_PMC_S:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN20@TEST_PMC_S:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN19@TEST_PMC_S:
	DB	122					; 0000007aH
	DB	0
$LN18@TEST_PMC_S:
	DB	121					; 00000079H
	DB	0
$LN17@TEST_PMC_S:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Subtruct_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_subtruct.c
_TEXT	SEGMENT
tv159 = -332						; size = 4
tv144 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_z_result$ = -316					; size = 4
_x_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_z_buf_size$ = -300				; size = 4
_actual_z_buf$ = -288					; size = 256
_z$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 8
_desired_result_code$ = 36				; size = 4
_desired_z_buf$ = 40					; size = 4
_desired_z_buf_size$ = 44				; size = 4
_TEST_PMC_Subtruct_X_L PROC

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __029660FF_test_op_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 88   :     PMC_HANDLE_UINT x;
; 89   :     PMC_HANDLE_UINT z;
; 90   :     unsigned char actual_z_buf[256];
; 91   :     size_t actual_z_buf_size;
; 92   :     PMC_STATUS_CODE result;
; 93   :     PMC_STATUS_CODE x_result;
; 94   :     PMC_STATUS_CODE z_result;
; 95   :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_L (%d.%d)", no, 1), (x_result = ep->FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_S
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_S
$LN6@TEST_PMC_S:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_S:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG95080
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95081
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 96   :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_L (%d.%d)", no, 2), (z_result = ep->Subtruct_X_L(x, y, &z)) == desired_result_code, FormatTestMesssage(L"PMC_Subtruct_X_Lの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	mov	eax, DWORD PTR _z_result$[ebp]
	cmp	eax, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN8@TEST_PMC_S
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_S
$LN8@TEST_PMC_S:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_PMC_S:
	mov	ecx, DWORD PTR _z_result$[ebp]
	push	ecx
	push	OFFSET $SG95082
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv92[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95083
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 97   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	$LN2@TEST_PMC_S

; 98   :     {
; 99   :         TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_L (%d.%d)", no, 3), (result = ep->ToByteArray(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	edx, DWORD PTR _actual_z_buf_size$[ebp]
	push	edx
	push	256					; 00000100H
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_S
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_S
$LN10@TEST_PMC_S:
	mov	DWORD PTR tv144[ebp], 0
$LN11@TEST_PMC_S:
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	push	OFFSET $SG95085
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv144[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95086
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 100  :         TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, L"データの内容が一致しない");

	mov	edx, DWORD PTR _desired_z_buf_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _desired_z_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _actual_z_buf_size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _actual_z_buf$[ebp]
	push	edx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_S
	mov	DWORD PTR tv159[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_S
$LN12@TEST_PMC_S:
	mov	DWORD PTR tv159[ebp], 0
$LN13@TEST_PMC_S:
	push	OFFSET $SG95087
	mov	eax, DWORD PTR tv159[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95088
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_S:

; 101  :     }
; 102  :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_S

; 103  :         ep->Dispose(z);

	mov	esi, esp
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_S:

; 104  :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_S

; 105  :         ep->Dispose(x);

	mov	esi, esp
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_S:

; 106  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TEST_PMC_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@TEST_PMC_S:
	DD	4
	DD	$LN18@TEST_PMC_S
$LN18@TEST_PMC_S:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@TEST_PMC_S
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@TEST_PMC_S
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN16@TEST_PMC_S
	DD	-300					; fffffed4H
	DD	4
	DD	$LN17@TEST_PMC_S
$LN17@TEST_PMC_S:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN16@TEST_PMC_S:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN15@TEST_PMC_S:
	DB	122					; 0000007aH
	DB	0
$LN14@TEST_PMC_S:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Subtruct_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_subtruct.c
_TEXT	SEGMENT
tv159 = -332						; size = 4
tv144 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_z_result$ = -316					; size = 4
_x_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_z_buf_size$ = -300				; size = 4
_actual_z_buf$ = -288					; size = 256
_z$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 4
_desired_result_code$ = 32				; size = 4
_desired_z_buf$ = 36					; size = 4
_desired_z_buf_size$ = 40				; size = 4
_TEST_PMC_Subtruct_X_I PROC

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __029660FF_test_op_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 66   :     PMC_HANDLE_UINT x;
; 67   :     PMC_HANDLE_UINT z;
; 68   :     unsigned char actual_z_buf[256];
; 69   :     size_t actual_z_buf_size;
; 70   :     PMC_STATUS_CODE result;
; 71   :     PMC_STATUS_CODE x_result;
; 72   :     PMC_STATUS_CODE z_result;
; 73   :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_I (%d.%d)", no, 1), (x_result = ep->FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_S
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_S
$LN6@TEST_PMC_S:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_S:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG95043
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95044
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 74   :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_I (%d.%d)", no, 2), (z_result = ep->Subtruct_X_I(x, y, &z)) == desired_result_code, FormatTestMesssage(L"PMC_Subtruct_X_Iの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	mov	edx, DWORD PTR _z_result$[ebp]
	cmp	edx, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN8@TEST_PMC_S
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_S
$LN8@TEST_PMC_S:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_PMC_S:
	mov	eax, DWORD PTR _z_result$[ebp]
	push	eax
	push	OFFSET $SG95045
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95046
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 75   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	$LN2@TEST_PMC_S

; 76   :     {
; 77   :         TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_I (%d.%d)", no, 3), (result = ep->ToByteArray(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	ecx, DWORD PTR _actual_z_buf_size$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _actual_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_S
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_S
$LN10@TEST_PMC_S:
	mov	DWORD PTR tv144[ebp], 0
$LN11@TEST_PMC_S:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG95048
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv144[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95049
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 78   :         TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _desired_z_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_S
	mov	DWORD PTR tv159[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_S
$LN12@TEST_PMC_S:
	mov	DWORD PTR tv159[ebp], 0
$LN13@TEST_PMC_S:
	push	OFFSET $SG95050
	mov	edx, DWORD PTR tv159[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95051
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_S:

; 79   :     }
; 80   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_S

; 81   :         ep->Dispose(z);

	mov	esi, esp
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_S:

; 82   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_S

; 83   :         ep->Dispose(x);

	mov	esi, esp
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_S:

; 84   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TEST_PMC_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@TEST_PMC_S:
	DD	4
	DD	$LN18@TEST_PMC_S
$LN18@TEST_PMC_S:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@TEST_PMC_S
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@TEST_PMC_S
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN16@TEST_PMC_S
	DD	-300					; fffffed4H
	DD	4
	DD	$LN17@TEST_PMC_S
$LN17@TEST_PMC_S:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN16@TEST_PMC_S:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN15@TEST_PMC_S:
	DB	122					; 0000007aH
	DB	0
$LN14@TEST_PMC_S:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Subtruct_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_subtruct.c
_TEXT	SEGMENT
tv135 = -48						; size = 4
tv92 = -44						; size = 4
tv74 = -40						; size = 4
_v_result$ = -36					; size = 4
_result$ = -32						; size = 4
_actual_w$ = -24					; size = 8
_v$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 8
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_result_code$ = 36				; size = 4
_desired_w$ = 40					; size = 8
_TEST_PMC_Subtruct_L_X PROC

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __029660FF_test_op_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 50   :     PMC_HANDLE_UINT v;
; 51   :     unsigned __int64 actual_w;
; 52   :     PMC_STATUS_CODE result;
; 53   :     PMC_STATUS_CODE v_result;
; 54   :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_L_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN5@TEST_PMC_S
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_PMC_S
$LN5@TEST_PMC_S:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_PMC_S:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG95009
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95010
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 55   :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_L_X (%d.%d)", no, 2), (result = ep->Subtruct_L_X(u, v, &actual_w)) == desired_result_code, FormatTestMesssage(L"PMC_Subtruct_L_Xの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	mov	eax, DWORD PTR _result$[ebp]
	cmp	eax, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN7@TEST_PMC_S
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_S
$LN7@TEST_PMC_S:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_PMC_S:
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	push	OFFSET $SG95011
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv92[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95012
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 56   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_S

; 57   :     {
; 58   :         TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_L_X (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	edx, DWORD PTR _actual_w$[ebp]
	cmp	edx, DWORD PTR _desired_w$[ebp]
	jne	SHORT $LN9@TEST_PMC_S
	mov	eax, DWORD PTR _actual_w$[ebp+4]
	cmp	eax, DWORD PTR _desired_w$[ebp+4]
	jne	SHORT $LN9@TEST_PMC_S
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_S
$LN9@TEST_PMC_S:
	mov	DWORD PTR tv135[ebp], 0
$LN10@TEST_PMC_S:
	push	OFFSET $SG95014
	mov	ecx, DWORD PTR tv135[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95015
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_S:

; 59   :     }
; 60   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_S

; 61   :         ep->Dispose(v);

	mov	esi, esp
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_S:

; 62   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@TEST_PMC_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@TEST_PMC_S:
	DD	2
	DD	$LN13@TEST_PMC_S
$LN13@TEST_PMC_S:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN11@TEST_PMC_S
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN12@TEST_PMC_S
$LN12@TEST_PMC_S:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
$LN11@TEST_PMC_S:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_Subtruct_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_subtruct.c
_TEXT	SEGMENT
tv135 = -44						; size = 4
tv92 = -40						; size = 4
tv74 = -36						; size = 4
_v_result$ = -32					; size = 4
_result$ = -28						; size = 4
_actual_w$ = -20					; size = 4
_v$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 4
_v_buf$ = 24						; size = 4
_v_buf_size$ = 28					; size = 4
_desired_result_code$ = 32				; size = 4
_desired_w$ = 36					; size = 4
_TEST_PMC_Subtruct_I_X PROC

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __029660FF_test_op_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 34   :     PMC_HANDLE_UINT v;
; 35   :     unsigned __int32 actual_w;
; 36   :     PMC_STATUS_CODE result;
; 37   :     PMC_STATUS_CODE v_result;
; 38   :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_I_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN5@TEST_PMC_S
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_PMC_S
$LN5@TEST_PMC_S:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_PMC_S:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG94980
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94981
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 39   :     TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_I_X (%d.%d)", no, 2), (result = ep->Subtruct_I_X(u, v, &actual_w)) == desired_result_code, FormatTestMesssage(L"PMC_Subtruct_I_Xの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	mov	edx, DWORD PTR _result$[ebp]
	cmp	edx, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN7@TEST_PMC_S
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_S
$LN7@TEST_PMC_S:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_PMC_S:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG94982
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94983
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 40   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_S

; 41   :     {
; 42   :         TEST_Assert(env, FormatTestLabel(L"PMC_Subtruct_I_X (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _actual_w$[ebp]
	cmp	ecx, DWORD PTR _desired_w$[ebp]
	jne	SHORT $LN9@TEST_PMC_S
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_S
$LN9@TEST_PMC_S:
	mov	DWORD PTR tv135[ebp], 0
$LN10@TEST_PMC_S:
	push	OFFSET $SG94985
	mov	edx, DWORD PTR tv135[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG94986
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_S:

; 43   :     }
; 44   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_S

; 45   :         ep->Dispose(v);

	mov	esi, esp
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_S:

; 46   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@TEST_PMC_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@TEST_PMC_S:
	DD	2
	DD	$LN13@TEST_PMC_S
$LN13@TEST_PMC_S:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN11@TEST_PMC_S
	DD	-20					; ffffffecH
	DD	4
	DD	$LN12@TEST_PMC_S
$LN12@TEST_PMC_S:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
$LN11@TEST_PMC_S:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_Subtruct_I_X ENDP
_TEXT	ENDS
END
