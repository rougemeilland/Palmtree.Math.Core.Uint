; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_memory.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_number_zero:BYTE:028H
COMM	_number_one:BYTE:028H
COMM	_hLocalHeap:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__AC713800_pmc_memory@c DB 01H
msvcjmc	ENDS
PUBLIC	_AllocateHeapArea
PUBLIC	_DeallocateHeapArea
PUBLIC	_AllocateBlock
PUBLIC	_DeallocateBlock
PUBLIC	_CheckBlockLight
PUBLIC	_AttatchNumber
PUBLIC	_AllocateNumber
PUBLIC	_DetatchNumber
PUBLIC	_DeallocateNumber
PUBLIC	_CommitNumber
PUBLIC	_CheckNumber
PUBLIC	_DuplicateNumber
PUBLIC	_InitializeChainBuffer
PUBLIC	_CleanUpChainBuffer
PUBLIC	_AllocateChainedBuffer
PUBLIC	_CheckChainedBuffer
PUBLIC	_DeallocateChainedBuffer
PUBLIC	_Initialize_Memory
PUBLIC	_PMC_Dispose@4
PUBLIC	_PMC_GetConstantValue_I@8
PUBLIC	__JustMyCode_Default
EXTRN	__imp__HeapCreate@12:PROC
EXTRN	__imp__HeapDestroy@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aullrem:PROC
EXTRN	_configuration_info:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_tag$ = -4						; size = 4
_header$ = 8						; size = 4
_DeallocateChainedBuffer_Imp PROC

; 612  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 613  :     __CHAIN_BUFFER_TAG* tag = &header->tag;

	mov	eax, DWORD PTR _header$[ebp]
	mov	DWORD PTR _tag$[ebp], eax

; 614  :     tag->next->prev = tag->prev;

	mov	ecx, DWORD PTR _tag$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _tag$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 615  :     tag->prev->next = tag->next;

	mov	edx, DWORD PTR _tag$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _tag$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 616  : #ifdef _DEBUG
; 617  :     _FILL_MEMORY_32((_UINT32_T*)header, 0xcccccccc, (sizeof(*header) + header->header.body.user_data_size + sizeof(_UINT32_T)) / sizeof(_UINT32_T));

	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 20					; 00000014H
	shr	ecx, 2
	push	ecx
	push	-858993460				; ccccccccH
	mov	edx, DWORD PTR _header$[ebp]
	push	edx
	call	__FILL_MEMORY_32
	add	esp, 12					; 0000000cH

; 618  : #endif
; 619  :     HeapFree(hLocalHeap, 0, tag);

	mov	esi, esp
	mov	eax, DWORD PTR _tag$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hLocalHeap
	push	ecx
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 620  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeallocateChainedBuffer_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_temp_r$1 = -20						; size = 4
_code2$ = -12						; size = 4
_code1$ = -8						; size = 4
_user_data_size$ = -4					; size = 4
_header$ = 8						; size = 4
_CheckChainedBuffer_Imp PROC

; 596  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 597  : #ifdef _DEBUG
; 598  :     size_t user_data_size = header->header.body.user_data_size;

	mov	eax, DWORD PTR _header$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _user_data_size$[ebp], ecx

; 599  :     _UINT32_T code1 = header->header.body.check_code;

	mov	edx, DWORD PTR _header$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _code1$[ebp], eax

; 600  :     _UINT32_T code2 = *(_UINT32_T*)((unsigned char*)header + sizeof(*header) + user_data_size);

	mov	ecx, DWORD PTR _header$[ebp]
	add	ecx, DWORD PTR _user_data_size$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _code2$[ebp], edx

; 601  :     if (code1 != code2)

	mov	eax, DWORD PTR _code1$[ebp]
	cmp	eax, DWORD PTR _code2$[ebp]
	je	SHORT $LN1@CheckChain

; 602  :     {
; 603  :         // コードが一致していない場合 ≒ バッファオーバーランが発生している場合
; 604  : 
; 605  :         __UNIT_TYPE_DIV temp_r;
; 606  :         _DIVREM_UNIT(0, 1, 0, &temp_r);// 故意にゼロ除算例外を発生させる

	lea	ecx, DWORD PTR _temp_r$1[ebp]
	push	ecx
	push	0
	push	1
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
$LN1@CheckChain:

; 607  :     }
; 608  : #endif
; 609  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@CheckChain
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@CheckChain:
	DD	1
	DD	$LN5@CheckChain
$LN5@CheckChain:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@CheckChain
$LN4@CheckChain:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	0
_CheckChainedBuffer_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_bit_count$ = -4					; size = 4
_p$ = 8							; size = 4
_word_count$ = 12					; size = 4
_GetTrailingZeroBitCount PROC

; 465  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 466  :     __UNIT_TYPE bit_count = 0;

	mov	DWORD PTR _bit_count$[ebp], 0
$LN2@GetTrailin:

; 467  :     while (word_count > 0)

	cmp	DWORD PTR _word_count$[ebp], 0
	jbe	SHORT $LN3@GetTrailin

; 468  :     {
; 469  :         --word_count;

	mov	eax, DWORD PTR _word_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _word_count$[ebp], eax

; 470  :         if (*p != 0)

	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@GetTrailin

; 471  :             return (bit_count + _TZCNT_ALT_UNIT(*p));

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__TZCNT_ALT_UNIT
	add	esp, 4
	add	eax, DWORD PTR _bit_count$[ebp]
	jmp	SHORT $LN1@GetTrailin
$LN4@GetTrailin:

; 472  :         bit_count += __UNIT_TYPE_BIT_COUNT;

	mov	ecx, DWORD PTR _bit_count$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _bit_count$[ebp], ecx

; 473  :         ++p;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx

; 474  :     }

	jmp	SHORT $LN2@GetTrailin
$LN3@GetTrailin:

; 475  :     // このルートには到達しないはず
; 476  :     return (0);

	xor	eax, eax
$LN1@GetTrailin:

; 477  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetTrailingZeroBitCount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_word_count$ = 12					; size = 4
_effective_word_count$ = 16				; size = 4
_GetEffectiveBitLength PROC

; 443  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 444  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN4@GetEffecti

; 445  :     {
; 446  :         *effective_word_count = 0;

	mov	eax, DWORD PTR _effective_word_count$[ebp]
	mov	DWORD PTR [eax], 0

; 447  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GetEffecti
$LN4@GetEffecti:

; 448  :     }
; 449  :     p += word_count;

	mov	ecx, DWORD PTR _word_count$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _p$[ebp], eax
$LN2@GetEffecti:

; 450  :     while (word_count != 0)

	cmp	DWORD PTR _word_count$[ebp], 0
	je	SHORT $LN3@GetEffecti

; 451  :     {
; 452  :         --p;

	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 453  :         if (*p != 0)

	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN5@GetEffecti

; 454  :         {
; 455  :             *effective_word_count = word_count;

	mov	eax, DWORD PTR _effective_word_count$[ebp]
	mov	ecx, DWORD PTR _word_count$[ebp]
	mov	DWORD PTR [eax], ecx

; 456  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	mov	esi, DWORD PTR _word_count$[ebp]
	shl	esi, 5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	sub	esi, eax
	mov	eax, esi
	jmp	SHORT $LN1@GetEffecti
$LN5@GetEffecti:

; 457  :         }
; 458  :         --word_count;

	mov	ecx, DWORD PTR _word_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _word_count$[ebp], ecx

; 459  :     }

	jmp	SHORT $LN2@GetEffecti
$LN3@GetEffecti:

; 460  :     *effective_word_count = 0;

	mov	edx, DWORD PTR _effective_word_count$[ebp]
	mov	DWORD PTR [edx], 0

; 461  :     return (0);

	xor	eax, eax
$LN1@GetEffecti:

; 462  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_GetEffectiveBitLength ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CleanUpNumber PROC

; 396  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 397  :     if (p->BLOCK != NULL)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN1@CleanUpNum

; 398  :     {
; 399  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 400  :         p->BLOCK = NULL;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+36], 0
$LN1@CleanUpNum:

; 401  :     }
; 402  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_CleanUpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_block$1 = -16						; size = 4
_word_count$2 = -8					; size = 4
_p$ = 8							; size = 4
_bit_count$ = 12					; size = 4
_light_check_code$ = 16					; size = 4
_InitializeNumber PROC

; 368  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 369  :     if (bit_count > 0)

	cmp	DWORD PTR _bit_count$[ebp], 0
	jbe	SHORT $LN2@Initialize

; 370  :     {
; 371  :         __UNIT_TYPE word_count;
; 372  :         __UNIT_TYPE* block = AllocateBlock(bit_count, &word_count, light_check_code);

	mov	eax, DWORD PTR _light_check_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _word_count$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _bit_count$[ebp]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _block$1[ebp], eax

; 373  :         if (block == NULL)

	cmp	DWORD PTR _block$1[ebp], 0
	jne	SHORT $LN4@Initialize

; 374  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -6					; fffffffaH
	jmp	SHORT $LN1@Initialize
$LN4@Initialize:

; 375  :         ClearNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ClearNumberHeader
	add	esp, 4

; 376  :         p->SIGNATURE1 = PMC_SIGNATURE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 1231244656		; 49634d70H

; 377  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], 1416522069		; 546e6955H

; 378  :         p->UNIT_BIT_COUNT = bit_count;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _bit_count$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 379  :         p->BLOCK_COUNT = word_count;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _word_count$2[ebp]
	mov	DWORD PTR [edx+32], eax

; 380  :         p->BLOCK = block;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _block$1[ebp]
	mov	DWORD PTR [ecx+36], edx

; 381  :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 382  :     else
; 383  :     {
; 384  :         // bit_count に 0 が与えられるのは、数値が 0 の場合。
; 385  :         ClearNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ClearNumberHeader
	add	esp, 4

; 386  :         p->SIGNATURE1 = PMC_SIGNATURE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 1231244656		; 49634d70H

; 387  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], 1416522069		; 546e6955H

; 388  :         p->UNIT_BIT_COUNT = 0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], 0

; 389  :         p->BLOCK_COUNT = 0;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 390  :         p->BLOCK = NULL;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+36], 0
$LN3@Initialize:

; 391  :     }
; 392  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Initialize:

; 393  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Initialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@Initialize:
	DD	1
	DD	$LN7@Initialize
$LN7@Initialize:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@Initialize
$LN6@Initialize:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_InitializeNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
___p$1 = -4						; size = 4
_p$ = 8							; size = 4
_FillNumberHeader PROC

; 320  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 321  : #ifdef _M_IX64
; 322  :     if (sizeof(*p) == sizeof(_UINT64_T) * 9)
; 323  :     {
; 324  :         _UINT64_T* __p = (_UINT64_T*)p;
; 325  :         __p[0] = DEFAULT_MEMORY_DATA;
; 326  :         __p[1] = DEFAULT_MEMORY_DATA;
; 327  :         __p[2] = DEFAULT_MEMORY_DATA;
; 328  :         __p[3] = DEFAULT_MEMORY_DATA;
; 329  :         __p[4] = DEFAULT_MEMORY_DATA;
; 330  :         __p[5] = DEFAULT_MEMORY_DATA;
; 331  :         __p[6] = DEFAULT_MEMORY_DATA;
; 332  :         __p[7] = DEFAULT_MEMORY_DATA;
; 333  :         __p[8] = DEFAULT_MEMORY_DATA;
; 334  :     }
; 335  :     else
; 336  :     {
; 337  : #endif
; 338  :         if (sizeof(*p) == sizeof(_UINT32_T) * 10)

	mov	eax, 1
	test	eax, eax
	je	$LN2@FillNumber

; 339  :         {
; 340  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR ___p$1[ebp], ecx

; 341  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 342  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], -858993460		; ccccccccH

; 343  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 344  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 345  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 346  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 347  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 348  :             __p[7] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 349  :             __p[8] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], -858993460		; ccccccccH

; 350  :             __p[9] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], -858993460		; ccccccccH

; 351  :         }

	jmp	SHORT $LN1@FillNumber
$LN2@FillNumber:

; 352  : #ifdef _M_IX64
; 353  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 354  :             _FILL_MEMORY_64((_UINT64_T*)p, DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT64_T));
; 355  : #endif
; 356  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN4@FillNumber

; 357  :             _FILL_MEMORY_32((_UINT32_T*)p, (_UINT32_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT32_T));

	push	10					; 0000000aH
	push	-858993460				; ccccccccH
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	__FILL_MEMORY_32
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@FillNumber
$LN4@FillNumber:

; 358  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@FillNumber

; 359  :             _FILL_MEMORY_16((_UINT16_T*)p, (_UINT16_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT16_T));

	push	20					; 00000014H
	push	52428					; 0000ccccH
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	__FILL_MEMORY_16
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@FillNumber
$LN6@FillNumber:

; 360  :         else
; 361  :             _FILL_MEMORY_BYTE(p, (unsigned char)DEFAULT_MEMORY_DATA, sizeof(*p));

	push	40					; 00000028H
	push	204					; 000000ccH
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	__FILL_MEMORY_BYTE
	add	esp, 12					; 0000000cH
$LN1@FillNumber:

; 362  : #ifdef _M_IX64
; 363  :     }
; 364  : #endif
; 365  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FillNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
___p$1 = -4						; size = 4
_p$ = 8							; size = 4
_ClearNumberHeader PROC

; 272  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 273  : #ifdef _M_IX64
; 274  :     if (sizeof(*p) == sizeof(_UINT64_T) * 9)
; 275  :     {
; 276  :         _UINT64_T* __p = (_UINT64_T*)p;
; 277  :         __p[0] = 0;
; 278  :         __p[1] = 0;
; 279  :         __p[2] = 0;
; 280  :         __p[3] = 0;
; 281  :         __p[4] = 0;
; 282  :         __p[5] = 0;
; 283  :         __p[6] = 0;
; 284  :         __p[7] = 0;
; 285  :         __p[8] = 0;
; 286  :     }
; 287  :     else
; 288  :     {
; 289  : #endif
; 290  :         if (sizeof(*p) == sizeof(_UINT32_T) * 10)

	mov	eax, 1
	test	eax, eax
	je	$LN2@ClearNumbe

; 291  :         {
; 292  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR ___p$1[ebp], ecx

; 293  :             __p[0] = 0;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 294  :             __p[1] = 0;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], 0

; 295  :             __p[2] = 0;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 296  :             __p[3] = 0;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 297  :             __p[4] = 0;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 298  :             __p[5] = 0;

	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 299  :             __p[6] = 0;

	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 300  :             __p[7] = 0;

	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 301  :             __p[8] = 0;

	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], 0

; 302  :             __p[9] = 0;

	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], 0

; 303  :         }

	jmp	SHORT $LN1@ClearNumbe
$LN2@ClearNumbe:

; 304  : #ifdef _M_IX64
; 305  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 306  :             _ZERO_MEMORY_64((_UINT64_T*)p, sizeof(*p) / sizeof(_UINT64_T));
; 307  : #endif
; 308  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN4@ClearNumbe

; 309  :             _ZERO_MEMORY_32((_UINT32_T*)p, sizeof(*p) / sizeof(_UINT32_T));

	push	10					; 0000000aH
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	__ZERO_MEMORY_32
	add	esp, 8
	jmp	SHORT $LN1@ClearNumbe
$LN4@ClearNumbe:

; 310  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@ClearNumbe

; 311  :             _ZERO_MEMORY_16((_UINT16_T*)p, sizeof(*p) / sizeof(_UINT16_T));

	push	20					; 00000014H
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	__ZERO_MEMORY_16
	add	esp, 8
	jmp	SHORT $LN1@ClearNumbe
$LN6@ClearNumbe:

; 312  :         else
; 313  :             _ZERO_MEMORY_BYTE(p, sizeof(*p));

	push	40					; 00000028H
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	__ZERO_MEMORY_BYTE
	add	esp, 8
$LN1@ClearNumbe:

; 314  : #ifdef _M_IX64
; 315  :     }
; 316  : #endif
; 317  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ClearNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_code_actual$ = -12					; size = 4
_code_desired$ = -8					; size = 4
_words$ = -4						; size = 4
_buffer$ = 8						; size = 4
_CheckBlock PROC

; 235  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 236  : #ifdef _DEBUG
; 237  :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@CheckBlock

; 238  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
$LN2@CheckBlock:

; 239  :     --buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _buffer$[ebp], eax

; 240  :     __UNIT_TYPE words = buffer[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _words$[ebp], ecx

; 241  :     __UNIT_TYPE code_desired = buffer[words + 1];

	mov	edx, DWORD PTR _words$[ebp]
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR _code_desired$[ebp], ecx

; 242  :     __UNIT_TYPE code_actual = CalculateCheckCode(&buffer[1], words);

	mov	edx, DWORD PTR _words$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR _code_actual$[ebp], eax

; 243  :     if (code_actual == code_desired)

	mov	ecx, DWORD PTR _code_actual$[ebp]
	cmp	ecx, DWORD PTR _code_desired$[ebp]
	jne	SHORT $LN3@CheckBlock

; 244  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
	jmp	SHORT $LN1@CheckBlock
$LN3@CheckBlock:

; 245  :     else
; 246  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
$LN1@CheckBlock:

; 247  : #else
; 248  :     return (PMC_STATUS_OK);
; 249  : #endif
; 250  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_code$1 = -8						; size = 4
_words$2 = -4						; size = 4
_buffer$ = 8						; size = 4
_CommitBlock PROC

; 219  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 220  :     if (buffer != NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN1@CommitBloc

; 221  :     {
; 222  :         --buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _buffer$[ebp], eax

; 223  :         __UNIT_TYPE words = buffer[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _words$2[ebp], ecx

; 224  : #ifdef _DEBUG
; 225  :         __UNIT_TYPE code = CalculateCheckCode(&buffer[1], words);

	mov	edx, DWORD PTR _words$2[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR _code$1[ebp], eax

; 226  : #else
; 227  :         __UNIT_TYPE code = 0;
; 228  : #endif
; 229  :         buffer[words + 1] = code;

	mov	ecx, DWORD PTR _words$2[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR _code$1[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax
$LN1@CommitBloc:

; 230  :     }
; 231  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CommitBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_code$ = -4						; size = 4
_p$ = 8							; size = 4
_words$ = 12						; size = 4
_CalculateCheckCode PROC

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 54   : 	__UNIT_TYPE code = CHECK_CODE_INIT;

	mov	DWORD PTR _code$[ebp], -2071690108	; 84848484H

; 55   : 	
; 56   :     __UNIT_TYPE count = words >> 5;

	mov	eax, DWORD PTR _words$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@CalculateC:

; 57   : 	while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	$LN3@CalculateC

; 58   : 	{
; 59   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 60   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 61   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 62   :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 63   :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 64   :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 65   :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 66   :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 67   :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 68   :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 69   :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 70   :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 71   :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 72   :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 73   :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 74   :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 75   :         code = _ROTATE_L_UNIT(code, 3) ^ p[16];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 76   :         code = _ROTATE_L_UNIT(code, 3) ^ p[17];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 17
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 77   :         code = _ROTATE_L_UNIT(code, 3) ^ p[18];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 18
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 78   :         code = _ROTATE_L_UNIT(code, 3) ^ p[19];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 79   :         code = _ROTATE_L_UNIT(code, 3) ^ p[20];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 20
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 80   :         code = _ROTATE_L_UNIT(code, 3) ^ p[21];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 21
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 81   :         code = _ROTATE_L_UNIT(code, 3) ^ p[22];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 82   :         code = _ROTATE_L_UNIT(code, 3) ^ p[23];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 23
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 83   :         code = _ROTATE_L_UNIT(code, 3) ^ p[24];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 24
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 84   :         code = _ROTATE_L_UNIT(code, 3) ^ p[25];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 85   :         code = _ROTATE_L_UNIT(code, 3) ^ p[26];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 26
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 86   :         code = _ROTATE_L_UNIT(code, 3) ^ p[27];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 27
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 87   :         code = _ROTATE_L_UNIT(code, 3) ^ p[28];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 88   :         code = _ROTATE_L_UNIT(code, 3) ^ p[29];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 29
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 89   :         code = _ROTATE_L_UNIT(code, 3) ^ p[30];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 30
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 90   :         code = _ROTATE_L_UNIT(code, 3) ^ p[31];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 91   :         p += 32;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _p$[ebp], edx

; 92   :         --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 93   :     }

	jmp	$LN2@CalculateC
$LN3@CalculateC:

; 94   : 
; 95   : 	if (words & 0x10)

	mov	ecx, DWORD PTR _words$[ebp]
	and	ecx, 16					; 00000010H
	je	$LN4@CalculateC

; 96   : 	{
; 97   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 98   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 99   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 100  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 101  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 102  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 103  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 104  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 105  :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 106  :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 107  :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 108  :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 109  :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 110  :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 111  :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 112  :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 113  :         p += 16;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _p$[ebp], edx
$LN4@CalculateC:

; 114  :     }
; 115  : 
; 116  :     if (words & 0x8)

	mov	eax, DWORD PTR _words$[ebp]
	and	eax, 8
	je	$LN5@CalculateC

; 117  :     {
; 118  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 119  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 120  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 121  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 122  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 123  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 124  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 125  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 126  :         p += 8;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _p$[ebp], edx
$LN5@CalculateC:

; 127  :     }
; 128  : 
; 129  :     if (words & 0x4)

	mov	eax, DWORD PTR _words$[ebp]
	and	eax, 4
	je	$LN6@CalculateC

; 130  :     {
; 131  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 132  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 133  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 134  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 135  :         p += 4;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], edx
$LN6@CalculateC:

; 136  :     }
; 137  : 
; 138  :     if (words & 0x2)

	mov	eax, DWORD PTR _words$[ebp]
	and	eax, 2
	je	SHORT $LN7@CalculateC

; 139  :     {
; 140  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 141  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 142  :         p += 2;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	mov	DWORD PTR _p$[ebp], eax
$LN7@CalculateC:

; 143  :     }
; 144  : 
; 145  :     if (words & 0x1)

	mov	ecx, DWORD PTR _words$[ebp]
	and	ecx, 1
	je	SHORT $LN8@CalculateC

; 146  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax
$LN8@CalculateC:

; 147  :     
; 148  :     return (code);

	mov	eax, DWORD PTR _code$[ebp]

; 149  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateCheckCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__TZCNT_ALT_UNIT PROC

; 703  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 704  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@TZCNT_ALT_

; 705  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@TZCNT_ALT_
$LN2@TZCNT_ALT_:

; 706  : #ifdef _M_IX86
; 707  :         _UINT32_T pos;
; 708  : #ifdef _MSC_VER
; 709  :         _BitScanForward(&pos, x);

	bsf	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 710  : #elif defined(__GNUC__)
; 711  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 712  : #else
; 713  : #error unknown compiler
; 714  : #endif
; 715  : #elif defined(_M_X64)
; 716  : #ifdef _MSC_VER
; 717  :         _UINT32_T pos;
; 718  :         _BitScanForward64(&pos, x);
; 719  : #elif defined(__GNUC__)
; 720  :         _UINT64_T pos;
; 721  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 722  : #else
; 723  : #error unknown compiler
; 724  : #endif
; 725  : #else
; 726  : #error unknown platform
; 727  : #endif
; 728  :         return (pos);

	mov	eax, DWORD PTR _pos$[ebp]
$LN1@TZCNT_ALT_:

; 729  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@TZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@TZCNT_ALT_:
	DD	1
	DD	$LN5@TZCNT_ALT_
$LN5@TZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@TZCNT_ALT_
$LN4@TZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 623  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 624  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 649  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
_count$ = 12						; size = 4
__ROTATE_L_UNIT PROC

; 475  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 476  : #ifdef _M_IX86
; 477  :         return (_rotl(x, count));

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rol	eax, cl

; 478  : #elif defined(_M_X64)
; 479  :         return (_rotl64(x, count));
; 480  : #else
; 481  : #error unknown platform
; 482  : #endif
; 483  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_t$1 = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC

; 378  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 379  : #ifdef _MSC_VER
; 380  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DIVREM_UNI

; 381  :         {
; 382  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 383  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);

	mov	ecx, DWORD PTR _u_low$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_high$[ebp]
	push	edx
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	DWORD PTR _t$1[ebp], eax
	mov	DWORD PTR _t$1[ebp+4], edx

; 384  :             *r = (_UINT32_T)(t % v);

	mov	eax, DWORD PTR _v$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _t$1[ebp+4]
	push	edx
	mov	eax, DWORD PTR _t$1[ebp]
	push	eax
	call	__aullrem
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], eax

; 385  :             return ((_UINT32_T)(t / v));

	mov	edx, DWORD PTR _v$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _t$1[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _t$1[ebp]
	push	edx
	call	__aulldiv
	jmp	SHORT $LN1@DIVREM_UNI

; 386  :         }

	jmp	SHORT $LN1@DIVREM_UNI
$LN2@DIVREM_UNI:

; 387  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN4@DIVREM_UNI

; 388  :         {
; 389  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 390  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 391  :             // ・128bit 整数のデータ型が用意されていない。
; 392  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 393  :             *r = 0;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], 0

; 394  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@DIVREM_UNI

; 395  :         }

	jmp	SHORT $LN1@DIVREM_UNI
$LN4@DIVREM_UNI:

; 396  :         else
; 397  :         {
; 398  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 399  :             *r = 0;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], 0

; 400  :             return (0);

	xor	eax, eax
$LN1@DIVREM_UNI:

; 401  :         }
; 402  : #elif defined(__GNUC__)
; 403  :         __UNIT_TYPE q;
; 404  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 405  :             __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 406  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 407  :             __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 408  :         else
; 409  :         {
; 410  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 411  :             *r = 0;
; 412  :             q = 0;
; 413  :         }
; 414  :         return (q);
; 415  : #else
; 416  : #error unknown compiler
; 417  : #endif
; 418  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_SIZE PROC

; 192  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 193  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 194  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 187  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 188  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 189  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC

; 171  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	edx, edx
	mov	eax, DWORD PTR _value_high$[ebp]
	mov	cl, 32					; 00000020H
	call	__allshl
	xor	ecx, ecx
	or	eax, DWORD PTR _value_low$[ebp]
	or	edx, ecx

; 173  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_UNIT PROC

; 160  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 161  : #ifdef _M_IX86
; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 163  : #elif defined(_M_X64)
; 164  :         __stosq(d, x, count);
; 165  : #else
; 166  : #error unknown platform
; 167  : #endif
; 168  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_32 PROC

; 148  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 149  :         __stosd((unsigned long*)d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 150  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 2
_count$ = 16						; size = 4
__FILL_MEMORY_16 PROC

; 143  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 144  :         __stosw(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	ax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 145  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 1
_count$ = 16						; size = 4
__FILL_MEMORY_BYTE PROC

; 138  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 139  :         __stosb(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	al, BYTE PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosb

; 140  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_32 PROC

; 98   :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 99   :         __stosd((unsigned long*)d, 0, count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 100  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_16 PROC

; 93   :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 94   :         __stosw(d, 0, count);

	xor	eax, eax
	mov	edi, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 95   :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC

; 88   :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 89   :         __stosb(d, 0, count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	al, al
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosb

; 90   :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 60   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);
; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
tv64 = -4						; size = 4
_type$ = 8						; size = 4
_o$ = 12						; size = 4
_PMC_GetConstantValue_I@8 PROC

; 554  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 555  :     switch (type)

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN4@PMC_GetCon
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN5@PMC_GetCon
	jmp	SHORT $LN6@PMC_GetCon
$LN4@PMC_GetCon:

; 556  :     {
; 557  :     case PMC_CONSTANT_ZERO:
; 558  :         *o = (PMC_HANDLE_UINT)&number_zero;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [ecx], OFFSET _number_zero

; 559  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN5@PMC_GetCon:

; 560  :     case PMC_CONSTANT_ONE:
; 561  :         *o = (PMC_HANDLE_UINT)&number_one;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_one

; 562  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN6@PMC_GetCon:

; 563  :     default:
; 564  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_GetCon:

; 565  :     }
; 566  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_PMC_GetConstantValue_I@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_result$ = -8						; size = 4
_np$ = -4						; size = 4
_p$ = 8							; size = 4
_PMC_Dispose@4 PROC

; 569  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 570  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], eax

; 571  :     PMC_STATUS_CODE result = CheckNumber(np);

	mov	ecx, DWORD PTR _np$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax

; 572  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@PMC_Dispos

; 573  :         return;

	jmp	SHORT $LN1@PMC_Dispos
$LN2@PMC_Dispos:

; 574  :     DeallocateNumber(np);

	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4
$LN1@PMC_Dispos:

; 575  :     return;
; 576  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_PMC_Dispose@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_number_one_ok$ = -12					; size = 4
_number_zero_ok$ = -8					; size = 4
_result$ = -4						; size = 4
_feature$ = 8						; size = 4
_Initialize_Memory PROC

; 687  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 688  :     PMC_STATUS_CODE result = PMC_STATUS_OK;

	mov	DWORD PTR _result$[ebp], 0

; 689  : 
; 690  :     BOOL number_zero_ok = TRUE;

	mov	DWORD PTR _number_zero_ok$[ebp], 1

; 691  :     BOOL number_one_ok = TRUE;

	mov	DWORD PTR _number_one_ok$[ebp], 1

; 692  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@Initialize

; 693  :     {
; 694  :         result = AttatchNumber(&number_zero, 0);

	push	0
	push	OFFSET _number_zero
	call	_AttatchNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax

; 695  :         if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@Initialize

; 696  :         {
; 697  :             CommitNumber(&number_zero);

	push	OFFSET _number_zero
	call	_CommitNumber
	add	esp, 4

; 698  :             number_zero_ok = TRUE;

	mov	DWORD PTR _number_zero_ok$[ebp], 1
$LN2@Initialize:

; 699  :         }
; 700  :     }
; 701  : 
; 702  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@Initialize

; 703  :     {
; 704  :         result = AttatchNumber(&number_one, 1);

	push	1
	push	OFFSET _number_one
	call	_AttatchNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax

; 705  :         if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@Initialize

; 706  :         {
; 707  :             number_one.BLOCK[0] = 1;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _number_one+36
	mov	DWORD PTR [edx+ecx], 1

; 708  :             CommitNumber(&number_one);

	push	OFFSET _number_one
	call	_CommitNumber
	add	esp, 4

; 709  :             number_one_ok = TRUE;

	mov	DWORD PTR _number_one_ok$[ebp], 1
$LN4@Initialize:

; 710  :         }
; 711  :     }
; 712  : 
; 713  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@Initialize

; 714  :     {
; 715  :         if (number_zero_ok)

	cmp	DWORD PTR _number_zero_ok$[ebp], 0
	je	SHORT $LN7@Initialize

; 716  :             DetatchNumber(&number_zero);

	push	OFFSET _number_zero
	call	_DetatchNumber
	add	esp, 4
$LN7@Initialize:

; 717  :         if (number_one_ok)

	cmp	DWORD PTR _number_one_ok$[ebp], 0
	je	SHORT $LN6@Initialize

; 718  :             DetatchNumber(&number_one);

	push	OFFSET _number_one
	call	_DetatchNumber
	add	esp, 4
$LN6@Initialize:

; 719  :     }
; 720  :     return (result);

	mov	eax, DWORD PTR _result$[ebp]

; 721  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Initialize_Memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_temp_r$1 = -16						; size = 4
_tag$2 = -8						; size = 4
_header$ = -4						; size = 4
_root$ = 8						; size = 4
_buffer$ = 12						; size = 4
_DeallocateChainedBuffer PROC

; 663  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 664  :     struct __tag_CHAIN_BUFFER_HEADER* header = (struct __tag_CHAIN_BUFFER_HEADER*)buffer - 1;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _header$[ebp], eax

; 665  :     CheckChainedBuffer_Imp(header);

	mov	ecx, DWORD PTR _header$[ebp]
	push	ecx
	call	_CheckChainedBuffer_Imp
	add	esp, 4

; 666  : 
; 667  :     for (__CHAIN_BUFFER_TAG* tag = root->tag.next; tag != &root->tag; tag = tag->next)

	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tag$2[ebp], eax
	jmp	SHORT $LN4@Deallocate
$LN2@Deallocate:
	mov	ecx, DWORD PTR _tag$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tag$2[ebp], edx
$LN4@Deallocate:
	mov	eax, DWORD PTR _root$[ebp]
	cmp	DWORD PTR _tag$2[ebp], eax
	je	SHORT $LN3@Deallocate

; 668  :     {
; 669  :         if (tag == (__CHAIN_BUFFER_TAG*)header)

	mov	ecx, DWORD PTR _tag$2[ebp]
	cmp	ecx, DWORD PTR _header$[ebp]
	jne	SHORT $LN5@Deallocate

; 670  :         {
; 671  :             DeallocateChainedBuffer_Imp(header);

	mov	edx, DWORD PTR _header$[ebp]
	push	edx
	call	_DeallocateChainedBuffer_Imp
	add	esp, 4

; 672  :             return;

	jmp	SHORT $LN1@Deallocate
$LN5@Deallocate:

; 673  :         }
; 674  :     }

	jmp	SHORT $LN2@Deallocate
$LN3@Deallocate:

; 675  :     // 指定された領域のポインタがチェーンの中に見つからなかった場合
; 676  :     // 主原因は与えられたポインタが誤っているかあるいは二重解放であること
; 677  : 
; 678  :     {
; 679  :         __UNIT_TYPE_DIV temp_r;
; 680  :         _DIVREM_UNIT(0, 1, 0, &temp_r);// 故意にゼロ除算例外を発生させる

	lea	eax, DWORD PTR _temp_r$1[ebp]
	push	eax
	push	0
	push	1
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
$LN1@Deallocate:

; 681  :     }
; 682  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Deallocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@Deallocate:
	DD	1
	DD	$LN8@Deallocate
$LN8@Deallocate:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN7@Deallocate
$LN7@Deallocate:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	0
_DeallocateChainedBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_CheckChainedBuffer PROC

; 658  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 659  :     CheckChainedBuffer_Imp((struct __tag_CHAIN_BUFFER_HEADER*)buffer - 1);

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 16					; 00000010H
	push	eax
	call	_CheckChainedBuffer_Imp
	add	esp, 4

; 660  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_CheckChainedBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_buffer_header$ = -16					; size = 4
_code$ = -12						; size = 4
_buffer$ = -8						; size = 4
_user_data_size$ = -4					; size = 4
_root$ = 8						; size = 4
_size$ = 12						; size = 4
_AllocateChainedBuffer PROC

; 640  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 641  :     size_t user_data_size = _DIVIDE_CEILING_SIZE(size, sizeof(_UINT32_T)) * sizeof(_UINT32_T);

	push	4
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	__DIVIDE_CEILING_SIZE
	add	esp, 8
	shl	eax, 2
	mov	DWORD PTR _user_data_size$[ebp], eax

; 642  :     void* buffer = HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(struct __tag_CHAIN_BUFFER_HEADER) + user_data_size + sizeof(_UINT32_T));

	mov	ecx, DWORD PTR _user_data_size$[ebp]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	push	ecx
	push	8
	mov	edx, DWORD PTR _hLocalHeap
	push	edx
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buffer$[ebp], eax

; 643  :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@AllocateCh

; 644  :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@AllocateCh
$LN2@AllocateCh:

; 645  :     _UINT32_T code = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _code$[ebp], eax

; 646  :     struct __tag_CHAIN_BUFFER_HEADER* buffer_header = (struct __tag_CHAIN_BUFFER_HEADER*)buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _buffer_header$[ebp], eax

; 647  :     buffer_header->tag.prev = &root->tag;

	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR _buffer_header$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 648  :     buffer_header->tag.next = root->tag.next;

	mov	eax, DWORD PTR _buffer_header$[ebp]
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 649  :     root->tag.next->prev = &buffer_header->tag;

	mov	eax, DWORD PTR _buffer_header$[ebp]
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax

; 650  :     root->tag.next = &buffer_header->tag;

	mov	eax, DWORD PTR _buffer_header$[ebp]
	mov	ecx, DWORD PTR _root$[ebp]
	mov	DWORD PTR [ecx], eax

; 651  :     buffer_header->header.body.check_code = code;

	mov	edx, DWORD PTR _buffer_header$[ebp]
	mov	eax, DWORD PTR _code$[ebp]
	mov	DWORD PTR [edx+12], eax

; 652  :     buffer_header->header.body.user_data_size = user_data_size;

	mov	ecx, DWORD PTR _buffer_header$[ebp]
	mov	edx, DWORD PTR _user_data_size$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 653  :     *(_UINT32_T*)&((unsigned char*)buffer)[sizeof(struct __tag_CHAIN_BUFFER_HEADER) + user_data_size] = code;

	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, DWORD PTR _user_data_size$[ebp]
	mov	ecx, DWORD PTR _code$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 654  :     return (&((struct __tag_CHAIN_BUFFER_HEADER*)buffer)[1]);

	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _buffer$[ebp]
$LN1@AllocateCh:

; 655  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateChainedBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_p$1 = -8						; size = 4
_root_tag$ = -4						; size = 4
_root$ = 8						; size = 4
_CleanUpChainBuffer PROC

; 629  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 630  :     __CHAIN_BUFFER_TAG* root_tag = &root->tag;

	mov	eax, DWORD PTR _root$[ebp]
	mov	DWORD PTR _root_tag$[ebp], eax
$LN2@CleanUpCha:

; 631  :     while (root_tag->next != root_tag)

	mov	ecx, DWORD PTR _root_tag$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _root_tag$[ebp]
	je	SHORT $LN1@CleanUpCha

; 632  :     {
; 633  :         __CHAIN_BUFFER_TAG* p = root_tag->next;

	mov	eax, DWORD PTR _root_tag$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$1[ebp], ecx

; 634  :         CheckChainedBuffer_Imp((struct __tag_CHAIN_BUFFER_HEADER*)p);

	mov	edx, DWORD PTR _p$1[ebp]
	push	edx
	call	_CheckChainedBuffer_Imp
	add	esp, 4

; 635  :         DeallocateChainedBuffer_Imp((struct __tag_CHAIN_BUFFER_HEADER*)p);

	mov	eax, DWORD PTR _p$1[ebp]
	push	eax
	call	_DeallocateChainedBuffer_Imp
	add	esp, 4

; 636  :     }

	jmp	SHORT $LN2@CleanUpCha
$LN1@CleanUpCha:

; 637  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CleanUpChainBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_root$ = 8						; size = 4
_InitializeChainBuffer PROC

; 623  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 624  :     root->tag.next = &root->tag;

	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR _root$[ebp]
	mov	DWORD PTR [ecx], eax

; 625  :     root->tag.prev = &root->tag;

	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR _root$[ebp]
	mov	DWORD PTR [eax+4], edx

; 626  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_InitializeChainBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_o$ = -16						; size = 4
_result$ = -8						; size = 4
_x_bit_count$ = -4					; size = 4
_x$ = 8							; size = 4
_op$ = 12						; size = 4
_DuplicateNumber PROC

; 531  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 532  :     if (x->IS_STATIC)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 1
	je	SHORT $LN2@DuplicateN

; 533  :     {
; 534  :         *op = x;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx], eax

; 535  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DuplicateN
$LN2@DuplicateN:

; 536  :     }
; 537  :     if (x->IS_ZERO)

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN3@DuplicateN

; 538  :     {
; 539  :         *op = &number_zero;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 540  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DuplicateN
$LN3@DuplicateN:

; 541  :     }
; 542  :     __UNIT_TYPE x_bit_count = x->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _x_bit_count$[ebp], edx

; 543  :     PMC_STATUS_CODE result;
; 544  :     NUMBER_HEADER* o;
; 545  :     if ((result = AllocateNumber(&o, x_bit_count, NULL)) != PMC_STATUS_OK)

	push	0
	mov	eax, DWORD PTR _x_bit_count$[ebp]
	push	eax
	lea	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@DuplicateN

; 546  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@DuplicateN
$LN4@DuplicateN:

; 547  :     _COPY_MEMORY_UNIT(o->BLOCK, x->BLOCK, _DIVIDE_CEILING_UNIT(x_bit_count, __UNIT_TYPE_BIT_COUNT));

	push	32					; 00000020H
	mov	edx, DWORD PTR _x_bit_count$[ebp]
	push	edx
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 548  :     CommitNumber(o);

	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 549  :     *op = o;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], eax

; 550  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@DuplicateN:

; 551  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DuplicateN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@DuplicateN:
	DD	1
	DD	$LN7@DuplicateN
$LN7@DuplicateN:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN6@DuplicateN
$LN6@DuplicateN:
	DB	111					; 0000006fH
	DB	0
_DuplicateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_desired_hash_code$1 = -8				; size = 4
_result$2 = -4						; size = 4
_p$ = 8							; size = 4
_CheckNumber PROC

; 513  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 514  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_UINT_SIGNATURE)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], 1231244656		; 49634d70H
	jne	SHORT $LN3@CheckNumbe
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+8], 1416522069		; 546e6955H
	je	SHORT $LN2@CheckNumbe
$LN3@CheckNumbe:

; 515  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
	jmp	SHORT $LN1@CheckNumbe
$LN2@CheckNumbe:

; 516  :     if (!p->IS_ZERO)

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1
	jne	SHORT $LN4@CheckNumbe

; 517  :     {
; 518  :         PMC_STATUS_CODE result;
; 519  :         if ((result = CheckBlock(p->BLOCK)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_CheckBlock
	add	esp, 4
	mov	DWORD PTR _result$2[ebp], eax
	cmp	DWORD PTR _result$2[ebp], 0
	je	SHORT $LN5@CheckNumbe

; 520  :             return (result);

	mov	eax, DWORD PTR _result$2[ebp]
	jmp	SHORT $LN1@CheckNumbe
$LN5@CheckNumbe:

; 521  : #ifdef _DEBUG
; 522  :         __UNIT_TYPE desired_hash_code = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR _desired_hash_code$1[ebp], eax

; 523  :         if (desired_hash_code != p->HASH_CODE)

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _desired_hash_code$1[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	je	SHORT $LN4@CheckNumbe

; 524  :             return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
	jmp	SHORT $LN1@CheckNumbe
$LN4@CheckNumbe:

; 525  : #endif
; 526  :     }
; 527  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CheckNumbe:

; 528  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
tv186 = -12						; size = 4
tv169 = -8						; size = 4
tv138 = -4						; size = 4
_p$ = 8							; size = 4
_CommitNumber PROC

; 480  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 481  :     CommitBlock(p->BLOCK);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_CommitBlock
	add	esp, 4

; 482  :     p->UNIT_BIT_COUNT = GetEffectiveBitLength(p->BLOCK, p->BLOCK_COUNT, &p->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_GetEffectiveBitLength
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 483  :     if (p->UNIT_BIT_COUNT <= 0)

	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+16], 0
	ja	SHORT $LN2@CommitNumb

; 484  :     {
; 485  :         p->HASH_CODE = 0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+20], 0

; 486  :         p->IS_ZERO = TRUE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	or	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx

; 487  :         p->IS_ONE = FALSE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, -3					; fffffffdH
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx

; 488  :         p->IS_EVEN = TRUE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	or	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx

; 489  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 490  :         p->IS_POWER_OF_TWO = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, -9					; fffffff7H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax

; 491  :     }

	jmp	$LN1@CommitNumb
$LN2@CommitNumb:

; 492  :     else if (p->UNIT_BIT_COUNT == 1)

	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+16], 1
	jne	$LN4@CommitNumb

; 493  :     {
; 494  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 495  :         p->IS_ZERO = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax

; 496  :         p->IS_ONE = p->BLOCK[0] == 1; // 無条件でTRUEでも大丈夫だが念のため。

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	DWORD PTR [eax+edx], 1
	jne	SHORT $LN7@CommitNumb
	mov	DWORD PTR tv138[ebp], 1
	jmp	SHORT $LN8@CommitNumb
$LN7@CommitNumb:
	mov	DWORD PTR tv138[ebp], 0
$LN8@CommitNumb:
	mov	eax, DWORD PTR tv138[ebp]
	and	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, -3					; fffffffdH
	or	edx, eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx

; 497  :         p->IS_EVEN = FALSE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, -5					; fffffffbH
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx

; 498  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 499  :         p->IS_POWER_OF_TWO = TRUE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	or	eax, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax

; 500  :     }

	jmp	$LN1@CommitNumb
$LN4@CommitNumb:

; 501  :     else
; 502  :     {
; 503  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_CalculateCheckCode
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 504  :         p->IS_ZERO = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax

; 505  :         p->IS_ONE = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, -3					; fffffffdH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax

; 506  :         p->IS_EVEN = !(p->BLOCK[0] & 1);

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+eax]
	and	eax, 1
	jne	SHORT $LN9@CommitNumb
	mov	DWORD PTR tv169[ebp], 1
	jmp	SHORT $LN10@CommitNumb
$LN9@CommitNumb:
	mov	DWORD PTR tv169[ebp], 0
$LN10@CommitNumb:
	mov	ecx, DWORD PTR tv169[ebp]
	and	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, -5					; fffffffbH
	or	eax, ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax

; 507  :         p->TRAILING_ZERO_BITS_COUNT = GetTrailingZeroBitCount(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_GetTrailingZeroBitCount
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 508  :         p->IS_POWER_OF_TWO = p->TRAILING_ZERO_BITS_COUNT + 1 == p->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR [ecx+16]
	jne	SHORT $LN11@CommitNumb
	mov	DWORD PTR tv186[ebp], 1
	jmp	SHORT $LN12@CommitNumb
$LN11@CommitNumb:
	mov	DWORD PTR tv186[ebp], 0
$LN12@CommitNumb:
	mov	edx, DWORD PTR tv186[ebp]
	and	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, -9					; fffffff7H
	or	ecx, edx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@CommitNumb:

; 509  :     }
; 510  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CommitNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DeallocateNumber PROC

; 434  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 435  :     if (p == NULL || p->IS_STATIC)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Deallocate
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 1
	je	SHORT $LN2@Deallocate
$LN3@Deallocate:

; 436  :         return;

	jmp	SHORT $LN1@Deallocate
$LN2@Deallocate:

; 437  :     CleanUpNumber(p);

	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_CleanUpNumber
	add	esp, 4

; 438  :     FillNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_FillNumberHeader
	add	esp, 4

; 439  :     HeapFree(hLocalHeap, 0, p);

	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hLocalHeap
	push	edx
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Deallocate:

; 440  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DeallocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DetatchNumber PROC

; 427  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 428  :     if (p == NULL || !p->IS_STATIC)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@DetatchNum
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 1
	jne	SHORT $LN2@DetatchNum
$LN3@DetatchNum:

; 429  :         return;

	jmp	SHORT $LN1@DetatchNum
$LN2@DetatchNum:

; 430  :     CleanUpNumber(p);

	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_CleanUpNumber
	add	esp, 4
$LN1@DetatchNum:

; 431  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DetatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_result$ = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_bit_count$ = 12					; size = 4
_light_check_code$ = 16					; size = 4
_AllocateNumber PROC

; 414  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 415  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	mov	esi, esp
	push	40					; 00000028H
	push	8
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 416  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@AllocateNu

; 417  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -6					; fffffffaH
	jmp	SHORT $LN1@AllocateNu
$LN2@AllocateNu:

; 418  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, light_check_code);

	mov	ecx, DWORD PTR _light_check_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bit_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InitializeNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 419  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AllocateNu

; 420  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AllocateNu
$LN3@AllocateNu:

; 421  :     p->IS_STATIC = FALSE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+28], edx

; 422  :     *pp = p;

	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx

; 423  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AllocateNu:

; 424  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_p$ = 8							; size = 4
_bit_count$ = 12					; size = 4
_AttatchNumber PROC

; 405  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 406  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, NULL);

	push	0
	mov	eax, DWORD PTR _bit_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_InitializeNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 407  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AttatchNum

; 408  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AttatchNum
$LN2@AttatchNum:

; 409  :     p->IS_STATIC = TRUE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+28]
	or	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 410  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AttatchNum:

; 411  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AttatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_code_actual$ = -12					; size = 4
_code_desired$ = -8					; size = 4
_words$ = -4						; size = 4
_buffer$ = 8						; size = 4
_code$ = 12						; size = 4
_CheckBlockLight PROC

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 255  : #ifdef _DEBUG
; 256  :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@CheckBlock

; 257  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
$LN2@CheckBlock:

; 258  :     --buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _buffer$[ebp], eax

; 259  :     __UNIT_TYPE words = buffer[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _words$[ebp], ecx

; 260  :     __UNIT_TYPE code_desired = buffer[words + 1] ^ (__UNIT_TYPE)&buffer[words + 1];

	mov	edx, DWORD PTR _words$[ebp]
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+4]
	mov	edx, DWORD PTR _words$[ebp]
	mov	eax, DWORD PTR _buffer$[ebp]
	xor	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR _code_desired$[ebp], ecx

; 261  :     __UNIT_TYPE code_actual = code;

	mov	ecx, DWORD PTR _code$[ebp]
	mov	DWORD PTR _code_actual$[ebp], ecx

; 262  :     if (code_actual == code_desired)

	mov	edx, DWORD PTR _code_actual$[ebp]
	cmp	edx, DWORD PTR _code_desired$[ebp]
	jne	SHORT $LN3@CheckBlock

; 263  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
	jmp	SHORT $LN1@CheckBlock
$LN3@CheckBlock:

; 264  :     else
; 265  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
$LN1@CheckBlock:

; 266  : #else
; 267  :     return (PMC_STATUS_OK);
; 268  : #endif
; 269  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckBlockLight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_p$1 = -4						; size = 4
_buffer$ = 8						; size = 4
_buffer_words$ = 12					; size = 4
_DeallocateBlock PROC

; 199  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 200  : 	if (buffer != NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN1@Deallocate

; 201  : 	{
; 202  :         __UNIT_TYPE* p = buffer - 1;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _p$1[ebp], eax

; 203  :         if (*p != buffer_words)

	mov	ecx, DWORD PTR _p$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _buffer_words$[ebp]
	je	SHORT $LN3@Deallocate

; 204  :         {
; 205  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 206  :         }

	jmp	SHORT $LN1@Deallocate
$LN3@Deallocate:

; 207  :         else
; 208  :         {
; 209  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 210  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	mov	eax, DWORD PTR _buffer_words$[ebp]
	add	eax, 2
	push	eax
	push	-858993460				; ccccccccH
	mov	ecx, DWORD PTR _p$1[ebp]
	push	ecx
	call	__FILL_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 211  :             // バッファを解放する。
; 212  :             HeapFree(hLocalHeap, 0, p);

	mov	esi, esp
	mov	edx, DWORD PTR _p$1[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Deallocate:

; 213  :         }
; 214  : 	}
; 215  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeallocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
tv88 = -28						; size = 4
_check_code$ = -24					; size = 4
_r$ = -20						; size = 4
_buffer$ = -16						; size = 4
_bytes$ = -12						; size = 4
_words2$ = -8						; size = 4
_words1$ = -4						; size = 4
_bits$ = 8						; size = 4
_allocated_block_words$ = 12				; size = 4
_code$ = 16						; size = 4
_AllocateBlock PROC

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 158  :     // 実際に獲得されるメモリ領域は「引数で渡されたワード数+2」のワード数となる。
; 159  :     // 最初のワードには獲得時に引数で渡されたワード数が格納される。
; 160  :     // 最後のワードには格納されている内容の正当性確認のための値が格納される。
; 161  :     // 2番目のワードへのポインタは呼び出し元に通知され利用される。
; 162  :     __UNIT_TYPE words1 = _DIVIDE_CEILING_UNIT(bits, __UNIT_TYPE_BIT_COUNT);

	push	32					; 00000020H
	mov	eax, DWORD PTR _bits$[ebp]
	push	eax
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	mov	DWORD PTR _words1$[ebp], eax

; 163  : 	__UNIT_TYPE words2 = words1 + 2;

	mov	ecx, DWORD PTR _words1$[ebp]
	add	ecx, 2
	mov	DWORD PTR _words2$[ebp], ecx

; 164  : 	__UNIT_TYPE bytes = words2 * __UNIT_TYPE_BYTE_COUNT;

	mov	edx, DWORD PTR _words2$[ebp]
	shl	edx, 2
	mov	DWORD PTR _bytes$[ebp], edx

; 165  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	mov	esi, esp
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _hLocalHeap
	push	ecx
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buffer$[ebp], eax

; 166  : 	if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@AllocateBl

; 167  : 		return (NULL);

	xor	eax, eax
	jmp	$LN1@AllocateBl
$LN2@AllocateBl:

; 168  : 	buffer[0] = words1;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR _words1$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 169  :     *allocated_block_words = words1;

	mov	eax, DWORD PTR _allocated_block_words$[ebp]
	mov	ecx, DWORD PTR _words1$[ebp]
	mov	DWORD PTR [eax], ecx

; 170  : #ifdef _DEBUG
; 171  :     // 乱数もどきを生成する。
; 172  : #ifdef _M_IX86
; 173  :     __UNIT_TYPE r = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$[ebp], eax

; 174  : #elif defined(_M_IX64)
; 175  : #ifdef _MSC_VER
; 176  :     __UNIT_TYPE r = GetTickCount64();
; 177  : #elif defined(__GNUC__)
; 178  :     _UINT32_T temp = GetTickCount();
; 179  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 180  : #else
; 181  : #error unknown compiler
; 182  : #endif
; 183  : #else
; 184  : #error unknown platform
; 185  : #endif
; 186  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;

	mov	edx, DWORD PTR _configuration_info
	and	edx, 1
	je	SHORT $LN5@AllocateBl
	mov	eax, DWORD PTR _words1$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN6@AllocateBl
$LN5@AllocateBl:
	mov	edx, DWORD PTR _r$[ebp]
	or	edx, -2071690108			; 84848484H
	mov	DWORD PTR tv88[ebp], edx
$LN6@AllocateBl:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR _check_code$[ebp], eax

; 187  : #else
; 188  :     __UNIT_TYPE check_code = 0;
; 189  : #endif
; 190  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	mov	ecx, DWORD PTR _words1$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	xor	eax, DWORD PTR _check_code$[ebp]
	mov	ecx, DWORD PTR _words1$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax

; 191  :     if (code != NULL)

	cmp	DWORD PTR _code$[ebp], 0
	je	SHORT $LN3@AllocateBl

; 192  :         *code = check_code;

	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _check_code$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AllocateBl:

; 193  :     return (&buffer[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _buffer$[ebp]
$LN1@AllocateBl:

; 194  : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_DeallocateHeapArea PROC

; 732  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 733  :     if (hLocalHeap != NULL)

	cmp	DWORD PTR _hLocalHeap, 0
	je	SHORT $LN1@Deallocate

; 734  :     {
; 735  :         HeapDestroy(hLocalHeap);

	mov	esi, esp
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapDestroy@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 736  :         hLocalHeap = NULL;

	mov	DWORD PTR _hLocalHeap, 0
$LN1@Deallocate:

; 737  :     }
; 738  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DeallocateHeapArea ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
_TEXT	SEGMENT
_AllocateHeapArea PROC

; 724  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __AC713800_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 725  :     hLocalHeap = HeapCreate(0, 0x1000, 0);

	mov	esi, esp
	push	0
	push	4096					; 00001000H
	push	0
	call	DWORD PTR __imp__HeapCreate@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hLocalHeap, eax

; 726  :     if (hLocalHeap == NULL)

	cmp	DWORD PTR _hLocalHeap, 0
	jne	SHORT $LN2@AllocateHe

; 727  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@AllocateHe
$LN2@AllocateHe:

; 728  :     return (TRUE);

	mov	eax, 1
$LN1@AllocateHe:

; 729  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AllocateHeapArea ENDP
_TEXT	ENDS
END
