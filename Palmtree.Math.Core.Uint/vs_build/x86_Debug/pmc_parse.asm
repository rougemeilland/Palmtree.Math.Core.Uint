; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_parse.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__4CD8546F_pmc_parse@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_Parse
PUBLIC	_PMC_TryParse@16
PUBLIC	_PMC_TryParseForSINT@20
PUBLIC	__JustMyCode_Default
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_InitializeNumberFormatoInfo:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_default_number_format_option DB 0c0H DUP (?)
_fp_MultiplyAndAdd DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_mask$1 = -8						; size = 4
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_PMC_TryParse_Imp PROC

; 1292 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1293 :     PMC_STATUS_CODE result;
; 1294 :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 512				; 00000200H
	je	SHORT $LN2@PMC_TryPar

; 1295 :     {
; 1296 :         // 16進数の場合
; 1297 : 
; 1298 :         // 許可されている組み合わせのフラグ
; 1299 :         _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE;

	mov	DWORD PTR _mask$1[ebp], 515		; 00000203H

; 1300 : 
; 1301 :         // 許可されていないフラグが指定されていればエラー
; 1302 :         if (number_styles & ~mask)

	mov	ecx, DWORD PTR _mask$1[ebp]
	not	ecx
	and	ecx, DWORD PTR _number_styles$[ebp]
	je	SHORT $LN4@PMC_TryPar

; 1303 :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_TryPar
$LN4@PMC_TryPar:

; 1304 : 
; 1305 :         if ((result = TryParseX(source, number_styles, format_option, o_sign, o_abs)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _o_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _o_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format_option$[ebp]
	push	ecx
	mov	edx, DWORD PTR _number_styles$[ebp]
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_TryParseX
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_TryPar

; 1306 :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN5@PMC_TryPar:

; 1307 :     }

	jmp	SHORT $LN3@PMC_TryPar
$LN2@PMC_TryPar:

; 1308 :     else
; 1309 :     {
; 1310 :         // 10進数の場合
; 1311 :         if ((result = TryParseDN(source, number_styles, format_option, o_sign, o_abs)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _o_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o_sign$[ebp]
	push	edx
	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	mov	ecx, DWORD PTR _number_styles$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	_TryParseDN
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@PMC_TryPar

; 1312 :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN3@PMC_TryPar:

; 1313 :     }
; 1314 : #ifdef _DEBUG
; 1315 :     if ((result = CheckNumber(*o_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o_abs$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_TryPar

; 1316 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN7@PMC_TryPar:

; 1317 : #endif
; 1318 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_TryPar:

; 1319 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_PMC_TryParse_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
tv95 = -80						; size = 4
_count$1 = -76						; size = 4
_p$2 = -72						; size = 4
_carry$3 = -65						; size = 1
_padding$4 = -64					; size = 4
_lzcnt$5 = -60						; size = 4
_o_light_check_code$ = -52				; size = 4
_o_bit_count$ = -44					; size = 4
_result_parsing$ = -40					; size = 4
_int_part_buf$ = -36					; size = 4
_int_part_buf_words$ = -28				; size = 4
_int_part_buf_code$ = -16				; size = 4
_source_len$ = -8					; size = 4
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_TryParseX PROC

; 1228 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1229 :     PMC_STATUS_CODE result;
; 1230 :     __UNIT_TYPE source_len = lstrlenW(source);

	mov	esi, esp
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_len$[ebp], eax

; 1231 :     __UNIT_TYPE int_part_buf_code;
; 1232 :     __UNIT_TYPE int_part_buf_words;
; 1233 :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	ecx, DWORD PTR _int_part_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _source_len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	shl	ecx, 3
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _int_part_buf$[ebp], eax

; 1234 :     if (int_part_buf == NULL)

	cmp	DWORD PTR _int_part_buf$[ebp], 0
	jne	SHORT $LN4@TryParseX

; 1235 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseX
$LN4@TryParseX:

; 1236 :     int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf);

	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	mov	ecx, DWORD PTR _number_styles$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	_ParseAsHexNumberString
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result_parsing$[ebp], eax

; 1237 :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _int_part_buf_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@TryParseX

; 1238 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseX
$LN5@TryParseX:

; 1239 :     if (!result_parsing || int_part_buf[0] == L'\0')

	cmp	DWORD PTR _result_parsing$[ebp], 0
	je	SHORT $LN7@TryParseX
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN6@TryParseX
$LN7@TryParseX:

; 1240 :     {
; 1241 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 1242 :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseX
$LN6@TryParseX:

; 1243 :     }
; 1244 : 
; 1245 :     // 先頭 1 文字が 8～F であれば負数とみなす
; 1246 :     *o_sign = ParseHexDigit(int_part_buf[0]) >= 8 ? -1 : 1;

	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	cmp	eax, 8
	jl	SHORT $LN14@TryParseX
	mov	DWORD PTR tv95[ebp], -1
	jmp	SHORT $LN15@TryParseX
$LN14@TryParseX:
	mov	DWORD PTR tv95[ebp], 1
$LN15@TryParseX:
	mov	eax, DWORD PTR _o_sign$[ebp]
	mov	cl, BYTE PTR tv95[ebp]
	mov	BYTE PTR [eax], cl

; 1247 : 
; 1248 :     __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

	mov	esi, esp
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	shl	eax, 2
	mov	DWORD PTR _o_bit_count$[ebp], eax

; 1249 :     __UNIT_TYPE o_light_check_code;
; 1250 :     if ((result = AllocateNumber(o_abs, o_bit_count, &o_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _o_light_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o_bit_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o_abs$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@TryParseX

; 1251 :     {
; 1252 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 1253 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseX
$LN8@TryParseX:

; 1254 :     }
; 1255 :     BuildBinaryFromHexString(int_part_buf, (*o_abs)->BLOCK);

	mov	edx, DWORD PTR _o_abs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	_BuildBinaryFromHexString
	add	esp, 8

; 1256 :     if ((result = CheckBlockLight((*o_abs)->BLOCK, o_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o_light_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o_abs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@TryParseX

; 1257 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseX
$LN9@TryParseX:

; 1258 :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	ecx, DWORD PTR _int_part_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 1259 :     if (*o_sign < 0)

	mov	eax, DWORD PTR _o_sign$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jge	$LN10@TryParseX

; 1260 :     {
; 1261 :         // 負数の場合
; 1262 : 
; 1263 :         int lzcnt = o_bit_count % __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _o_bit_count$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _lzcnt$5[ebp], edx

; 1264 :         if (lzcnt != 0)

	cmp	DWORD PTR _lzcnt$5[ebp], 0
	je	SHORT $LN11@TryParseX

; 1265 :         {
; 1266 :             __UNIT_TYPE padding = (__UNIT_TYPE)-1 << lzcnt;

	or	edx, -1
	mov	ecx, DWORD PTR _lzcnt$5[ebp]
	shl	edx, cl
	mov	DWORD PTR _padding$4[ebp], edx

; 1267 :             (*o_abs)->BLOCK[(*o_abs)->BLOCK_COUNT - 1] |= padding;

	mov	eax, DWORD PTR _o_abs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _o_abs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [ecx+36]
	mov	ecx, DWORD PTR [eax+edx*4-4]
	or	ecx, DWORD PTR _padding$4[ebp]
	mov	edx, DWORD PTR _o_abs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _o_abs$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+32]
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR [eax+edx*4-4], ecx
$LN11@TryParseX:

; 1268 :         }
; 1269 : 
; 1270 :         // 配列 (*o_abs)->BLOCK の内容をビット反転してインクリメントする
; 1271 :         char carry = 1;

	mov	BYTE PTR _carry$3[ebp], 1

; 1272 :         __UNIT_TYPE* p = (*o_abs)->BLOCK;

	mov	ecx, DWORD PTR _o_abs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _p$2[ebp], eax

; 1273 :         __UNIT_TYPE count = (*o_abs)->BLOCK_COUNT;

	mov	ecx, DWORD PTR _o_abs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _count$1[ebp], eax
$LN2@TryParseX:

; 1274 :         while (count > 0)

	cmp	DWORD PTR _count$1[ebp], 0
	jbe	SHORT $LN10@TryParseX

; 1275 :         {
; 1276 :             carry = _ADD_UNIT(carry, ~*p, 0, p);

	mov	ecx, DWORD PTR _p$2[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _p$2[ebp]
	mov	eax, DWORD PTR [edx]
	not	eax
	push	eax
	movzx	ecx, BYTE PTR _carry$3[ebp]
	push	ecx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _carry$3[ebp], al

; 1277 :             ++p;

	mov	edx, DWORD PTR _p$2[ebp]
	add	edx, 4
	mov	DWORD PTR _p$2[ebp], edx

; 1278 :             --count;

	mov	eax, DWORD PTR _count$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$1[ebp], eax

; 1279 :         }

	jmp	SHORT $LN2@TryParseX
$LN10@TryParseX:

; 1280 :     }
; 1281 :     CommitNumber(*o_abs);

	mov	ecx, DWORD PTR _o_abs$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CommitNumber
	add	esp, 4

; 1282 :     if ((*o_abs)->IS_ZERO)

	mov	eax, DWORD PTR _o_abs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN12@TryParseX

; 1283 :     {
; 1284 :         DeallocateNumber(*o_abs);

	mov	eax, DWORD PTR _o_abs$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 1285 :         *o_sign = 0;

	mov	edx, DWORD PTR _o_sign$[ebp]
	mov	BYTE PTR [edx], 0

; 1286 :         *o_abs = &number_zero;

	mov	eax, DWORD PTR _o_abs$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
$LN12@TryParseX:

; 1287 :     }
; 1288 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@TryParseX:

; 1289 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@TryParseX
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@TryParseX:
	DD	3
	DD	$LN19@TryParseX
$LN19@TryParseX:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN16@TryParseX
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN17@TryParseX
	DD	-52					; ffffffccH
	DD	4
	DD	$LN18@TryParseX
$LN18@TryParseX:
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN17@TryParseX:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN16@TryParseX:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TryParseX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_r$ = -20						; size = 4
_out_ptr$ = -16						; size = 4
_in_ptr$ = -12						; size = 4
_source_count$ = -8					; size = 4
_word_digit_count$ = -4					; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_BuildBinaryFromHexString PROC

; 1207 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1208 :     int word_digit_count = __UNIT_TYPE_BIT_COUNT / 4;

	mov	DWORD PTR _word_digit_count$[ebp], 8

; 1209 :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	esi, esp
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_count$[ebp], eax

; 1210 :     wchar_t* in_ptr = source;

	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 1211 :     __UNIT_TYPE* out_ptr = out_buf + _DIVIDE_CEILING_UNIT(source_count, word_digit_count) - 1;

	mov	edx, DWORD PTR _word_digit_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _source_count$[ebp]
	push	eax
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	mov	ecx, DWORD PTR _out_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR _out_ptr$[ebp], edx

; 1212 :     int r = source_count % word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	xor	edx, edx
	div	DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 1213 :     if (r > 0)

	cmp	DWORD PTR _r$[ebp], 0
	jle	SHORT $LN2@BuildBinar

; 1214 :     {
; 1215 :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	push	ecx
	call	_BuildLeading1WordFromHexString
	add	esp, 8
	mov	edx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _out_ptr$[ebp]
	sub	eax, 4
	mov	DWORD PTR _out_ptr$[ebp], eax

; 1216 :         in_ptr += r;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _in_ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _in_ptr$[ebp], eax

; 1217 :         source_count -= r;

	mov	ecx, DWORD PTR _source_count$[ebp]
	sub	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR _source_count$[ebp], ecx
$LN2@BuildBinar:

; 1218 :     }
; 1219 :     while (source_count > 0)

	cmp	DWORD PTR _source_count$[ebp], 0
	jbe	SHORT $LN1@BuildBinar

; 1220 :     {
; 1221 :         *out_ptr-- = Build1WordFromHexString(in_ptr);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	push	edx
	call	_Build1WordFromHexString
	add	esp, 4
	mov	ecx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _out_ptr$[ebp]
	sub	edx, 4
	mov	DWORD PTR _out_ptr$[ebp], edx

; 1222 :         in_ptr += word_digit_count;

	mov	eax, DWORD PTR _word_digit_count$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _in_ptr$[ebp], edx

; 1223 :         source_count -= word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	sub	eax, DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _source_count$[ebp], eax

; 1224 :     }

	jmp	SHORT $LN2@BuildBinar
$LN1@BuildBinar:

; 1225 : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildBinaryFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
tv191 = -36						; size = 2
tv184 = -34						; size = 2
tv178 = -32						; size = 2
tv171 = -30						; size = 2
tv165 = -28						; size = 2
tv159 = -26						; size = 2
tv153 = -24						; size = 2
tv146 = -22						; size = 2
tv140 = -20						; size = 2
tv134 = -18						; size = 2
tv128 = -16						; size = 2
tv90 = -14						; size = 2
tv84 = -12						; size = 2
tv78 = -10						; size = 2
tv72 = -8						; size = 2
tv66 = -6						; size = 2
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_Build1WordFromHexString PROC

; 1174 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1175 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv66[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv66[ebp]
	push	eax
	call	_ParseHexDigit
	add	esp, 4
	mov	DWORD PTR _x$[ebp], eax

; 1176 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

	xor	ecx, ecx
	je	$LN2@Build1Word

; 1177 :     {
; 1178 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv72[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv72[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1179 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv78[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv78[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1180 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv84[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv84[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1181 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv90[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv90[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1182 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv128[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv128[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1183 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv134[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv134[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1184 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv140[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv140[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1185 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv146[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv146[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN2@Build1Word:

; 1186 :     }
; 1187 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	$LN3@Build1Word

; 1188 :     {
; 1189 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv153[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv153[ebp]
	push	eax
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1190 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv159[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv159[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1191 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv165[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv165[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1192 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv171[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv171[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN3@Build1Word:

; 1193 :     }
; 1194 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@Build1Word

; 1195 :     {
; 1196 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv178[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 1197 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv184[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv184[ebp]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN4@Build1Word:

; 1198 :     }
; 1199 :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@Build1Word

; 1200 :     {
; 1201 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv191[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv191[ebp]
	push	eax
	call	_ParseHexDigit
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN5@Build1Word:

; 1202 :     }
; 1203 :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 1204 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Build1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
_BuildLeading1WordFromHexString PROC

; 1160 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1161 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_ParseHexDigit
	add	esp, 4
	mov	DWORD PTR _x$[ebp], eax

; 1162 :     ++in_ptr;

	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 1163 :     --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN2@BuildLeadi:

; 1164 :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@BuildLeadi

; 1165 :     {
; 1166 :         x = x * 16 + ParseHexDigit(*in_ptr);

	mov	esi, DWORD PTR _x$[ebp]
	shl	esi, 4
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	call	_ParseHexDigit
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _x$[ebp], esi

; 1167 :         ++in_ptr;

	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 1168 :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 1169 :     }

	jmp	SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 1170 :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 1171 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildLeading1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_no_light_check_code$ = -136				; size = 4
_o_bit_count$ = -128					; size = 4
_bin_buf_count$ = -120					; size = 4
_bin_buf$ = -112					; size = 4
_bin_buf_words$ = -104					; size = 4
_bin_buf_code$ = -92					; size = 4
_frac_ptr$ = -84					; size = 4
_d_ptr$1 = -80						; size = 4
_s_ptr$2 = -76						; size = 4
_result_parsing$ = -72					; size = 4
_frac_part_buf$ = -68					; size = 4
_frac_part_buf_words$ = -60				; size = 4
_frac_part_buf_code$ = -48				; size = 4
_int_part_buf$ = -40					; size = 4
_int_part_buf_words$ = -32				; size = 4
_int_part_buf_code$ = -20				; size = 4
_source_len$ = -12					; size = 4
_word_digit_count$ = -8					; size = 4
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_TryParseDN PROC

; 1021 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-140]
	mov	ecx, 35					; 00000023H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1022 :     PMC_STATUS_CODE result;
; 1023 : #ifdef _M_IX86
; 1024 :     int word_digit_count = 9;

	mov	DWORD PTR _word_digit_count$[ebp], 9

; 1025 : #elif defined(_M_IX64)
; 1026 :     int word_digit_count = 19;
; 1027 : #else
; 1028 : #error unknown platform
; 1029 : #endif
; 1030 :     __UNIT_TYPE source_len = lstrlenW(source);

	mov	esi, esp
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_len$[ebp], eax

; 1031 : 
; 1032 :     __UNIT_TYPE int_part_buf_code;
; 1033 :     __UNIT_TYPE int_part_buf_words;
; 1034 :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	ecx, DWORD PTR _int_part_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _source_len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	shl	ecx, 3
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _int_part_buf$[ebp], eax

; 1035 :     if (int_part_buf == NULL)

	cmp	DWORD PTR _int_part_buf$[ebp], 0
	jne	SHORT $LN9@TryParseDN

; 1036 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseDN
$LN9@TryParseDN:

; 1037 : 
; 1038 :     __UNIT_TYPE frac_part_buf_code;
; 1039 :     __UNIT_TYPE frac_part_buf_words;
; 1040 :     wchar_t* frac_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &frac_part_buf_words, &frac_part_buf_code);

	lea	edx, DWORD PTR _frac_part_buf_code$[ebp]
	push	edx
	lea	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source_len$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	shl	edx, 3
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _frac_part_buf$[ebp], eax

; 1041 :     if (frac_part_buf == NULL)

	cmp	DWORD PTR _frac_part_buf$[ebp], 0
	jne	SHORT $LN10@TryParseDN

; 1042 :     {
; 1043 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 1044 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseDN
$LN10@TryParseDN:

; 1045 :     }
; 1046 :     int result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, o_sign, int_part_buf, frac_part_buf);

	mov	edx, DWORD PTR _frac_part_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o_sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format_option$[ebp]
	push	edx
	mov	eax, DWORD PTR _number_styles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	call	_ParseAsDecimalNumberString
	add	esp, 24					; 00000018H
	mov	DWORD PTR _result_parsing$[ebp], eax

; 1047 :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _int_part_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@TryParseDN

; 1048 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN11@TryParseDN:

; 1049 :     if ((result = CheckBlockLight((__UNIT_TYPE*)frac_part_buf, frac_part_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _frac_part_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frac_part_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@TryParseDN

; 1050 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN12@TryParseDN:

; 1051 :     if (!result_parsing)

	cmp	DWORD PTR _result_parsing$[ebp], 0
	jne	SHORT $LN13@TryParseDN

; 1052 :     {
; 1053 :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 1054 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 1055 :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN13@TryParseDN:

; 1056 :     }
; 1057 :     // 整数部と小数部がともに空ならばエラーとする
; 1058 :     if (int_part_buf[0] == L'\0' && frac_part_buf[0] == L'\0')

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN14@TryParseDN
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN14@TryParseDN

; 1059 :     {
; 1060 :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 1061 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 1062 :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN14@TryParseDN:

; 1063 :     }
; 1064 : 
; 1065 :     if (int_part_buf[0] == L'0')

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN15@TryParseDN

; 1066 :     {
; 1067 :         // 整数部の先行する 0 を削除する
; 1068 :         wchar_t* s_ptr = int_part_buf;

	mov	edx, DWORD PTR _int_part_buf$[ebp]
	mov	DWORD PTR _s_ptr$2[ebp], edx

; 1069 :         wchar_t* d_ptr = int_part_buf;

	mov	eax, DWORD PTR _int_part_buf$[ebp]
	mov	DWORD PTR _d_ptr$1[ebp], eax
$LN2@TryParseDN:

; 1070 :         while (*s_ptr == L'0')

	mov	ecx, DWORD PTR _s_ptr$2[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 48					; 00000030H
	jne	SHORT $LN6@TryParseDN

; 1071 :             ++s_ptr;

	mov	eax, DWORD PTR _s_ptr$2[ebp]
	add	eax, 2
	mov	DWORD PTR _s_ptr$2[ebp], eax
	jmp	SHORT $LN2@TryParseDN
$LN6@TryParseDN:

; 1072 :         for (;;)
; 1073 :         {
; 1074 :             *d_ptr = *s_ptr;

	mov	ecx, DWORD PTR _d_ptr$1[ebp]
	mov	edx, DWORD PTR _s_ptr$2[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax

; 1075 :             if (*s_ptr == L'\0')

	mov	ecx, DWORD PTR _s_ptr$2[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	jne	SHORT $LN16@TryParseDN

; 1076 :                 break;

	jmp	SHORT $LN15@TryParseDN
$LN16@TryParseDN:

; 1077 :             ++s_ptr;

	mov	eax, DWORD PTR _s_ptr$2[ebp]
	add	eax, 2
	mov	DWORD PTR _s_ptr$2[ebp], eax

; 1078 :             ++d_ptr;

	mov	ecx, DWORD PTR _d_ptr$1[ebp]
	add	ecx, 2
	mov	DWORD PTR _d_ptr$1[ebp], ecx

; 1079 :         }

	jmp	SHORT $LN6@TryParseDN
$LN15@TryParseDN:

; 1080 :     }
; 1081 : 
; 1082 :     // 小数部の末尾の 0 を削除する
; 1083 :     wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

	mov	esi, esp
	mov	edx, DWORD PTR _frac_part_buf$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _frac_ptr$[ebp], edx
$LN7@TryParseDN:

; 1084 :     while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

	mov	eax, DWORD PTR _frac_ptr$[ebp]
	cmp	eax, DWORD PTR _frac_part_buf$[ebp]
	jbe	SHORT $LN8@TryParseDN
	mov	ecx, 2
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _frac_ptr$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN8@TryParseDN

; 1085 :         --frac_ptr;

	mov	edx, DWORD PTR _frac_ptr$[ebp]
	sub	edx, 2
	mov	DWORD PTR _frac_ptr$[ebp], edx
	jmp	SHORT $LN7@TryParseDN
$LN8@TryParseDN:

; 1086 :     *frac_ptr = L'\0';

	xor	eax, eax
	mov	ecx, DWORD PTR _frac_ptr$[ebp]
	mov	WORD PTR [ecx], ax

; 1087 : 
; 1088 :     // 小数部が 0 ではない場合、エラーとする
; 1089 :     if (frac_part_buf[0] != L'\0')

	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN17@TryParseDN

; 1090 :     {
; 1091 :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 1092 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 1093 :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN17@TryParseDN:

; 1094 :     }
; 1095 : 
; 1096 :     if (int_part_buf[0] == L'\0')

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN18@TryParseDN

; 1097 :     {
; 1098 :         // 整数部が空である場合
; 1099 :         
; 1100 :         // 符号を 0 に 修正する
; 1101 :         *o_sign = 0;

	mov	edx, DWORD PTR _o_sign$[ebp]
	mov	BYTE PTR [edx], 0

; 1102 : 
; 1103 :         // 整数部に 0 を設定する
; 1104 :         int_part_buf[0] = L'0';

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, 48					; 00000030H
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	mov	WORD PTR [eax+ecx], dx

; 1105 :         int_part_buf[1] = L'\0';

	mov	ecx, 2
	shl	ecx, 0
	xor	edx, edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	mov	WORD PTR [eax+ecx], dx
$LN18@TryParseDN:

; 1106 :     }
; 1107 : 
; 1108 :     // 小数部は捨てる
; 1109 :     DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	ecx, DWORD PTR _frac_part_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frac_part_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 1110 : 
; 1111 :     __UNIT_TYPE bin_buf_code;
; 1112 :     __UNIT_TYPE bin_buf_words;
; 1113 :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	lea	eax, DWORD PTR _bin_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bin_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _word_digit_count$[ebp]
	push	edx
	mov	esi, esp
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__DIVIDE_CEILING_SIZE
	add	esp, 8
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bin_buf$[ebp], eax

; 1114 :     if (bin_buf == NULL)

	cmp	DWORD PTR _bin_buf$[ebp], 0
	jne	SHORT $LN19@TryParseDN

; 1115 :     {
; 1116 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	ecx, DWORD PTR _int_part_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 1117 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseDN
$LN19@TryParseDN:

; 1118 :     }
; 1119 :     __UNIT_TYPE bin_buf_count;
; 1120 :     BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count, format_option->NativeDigits);

	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 146				; 00000092H
	push	eax
	lea	ecx, DWORD PTR _bin_buf_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bin_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_BuildBinaryFromDecimalString
	add	esp, 16					; 00000010H

; 1121 :     if ((result = CheckBlockLight(bin_buf, bin_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _bin_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bin_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@TryParseDN

; 1122 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN20@TryParseDN:

; 1123 :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 1124 : 
; 1125 :     __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;

	mov	edx, DWORD PTR _bin_buf_count$[ebp]
	shl	edx, 5
	mov	DWORD PTR _o_bit_count$[ebp], edx

; 1126 :     __UNIT_TYPE no_light_check_code;
; 1127 :     if ((result = AllocateNumber(o_abs, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no_light_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o_bit_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o_abs$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@TryParseDN

; 1128 :     {
; 1129 :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	eax, DWORD PTR _bin_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bin_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 1130 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN21@TryParseDN:

; 1131 :     }
; 1132 : 
; 1133 :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o_abs)->BLOCK)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _o_abs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _bin_buf_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _bin_buf$[ebp]
	push	eax
	call	_ConvertCardinalNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@TryParseDN

; 1134 :     {
; 1135 :         DeallocateNumber(*o_abs);

	mov	ecx, DWORD PTR _o_abs$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 1136 :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	eax, DWORD PTR _bin_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bin_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 1137 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN22@TryParseDN:

; 1138 :     }
; 1139 :     if ((result = CheckBlockLight((*o_abs)->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _no_light_check_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _o_abs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@TryParseDN

; 1140 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN23@TryParseDN:

; 1141 :     DeallocateBlock(bin_buf, bin_buf_words);

	mov	eax, DWORD PTR _bin_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bin_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 1142 :     CommitNumber(*o_abs);

	mov	edx, DWORD PTR _o_abs$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CommitNumber
	add	esp, 4

; 1143 :     if ((*o_abs)->IS_ZERO)

	mov	ecx, DWORD PTR _o_abs$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	and	eax, 1
	je	SHORT $LN24@TryParseDN

; 1144 :     {
; 1145 :         DeallocateNumber(*o_abs);

	mov	ecx, DWORD PTR _o_abs$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 1146 :         *o_abs = &number_zero;

	mov	eax, DWORD PTR _o_abs$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
$LN24@TryParseDN:

; 1147 :     }
; 1148 : #ifdef _DEBUG
; 1149 :     if (*o_sign != 0 && *o_sign != 1 && *o_sign != -1)

	mov	ecx, DWORD PTR _o_sign$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN25@TryParseDN
	mov	eax, DWORD PTR _o_sign$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 1
	je	SHORT $LN25@TryParseDN
	mov	edx, DWORD PTR _o_sign$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, -1
	je	SHORT $LN25@TryParseDN

; 1150 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@TryParseDN
$LN25@TryParseDN:

; 1151 :     if (*o_sign == 0 && !(*o_abs)->IS_ZERO)

	mov	ecx, DWORD PTR _o_sign$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN26@TryParseDN
	mov	eax, DWORD PTR _o_abs$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	jne	SHORT $LN26@TryParseDN

; 1152 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@TryParseDN
$LN26@TryParseDN:

; 1153 :     if (*o_sign != 0 && (*o_abs)->IS_ZERO)

	mov	eax, DWORD PTR _o_sign$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN27@TryParseDN
	mov	edx, DWORD PTR _o_abs$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN27@TryParseDN

; 1154 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@TryParseDN
$LN27@TryParseDN:

; 1155 : #endif
; 1156 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@TryParseDN:

; 1157 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@TryParseDN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 140				; 0000008cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN38@TryParseDN:
	DD	8
	DD	$LN37@TryParseDN
$LN37@TryParseDN:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN29@TryParseDN
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN30@TryParseDN
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN31@TryParseDN
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN32@TryParseDN
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN33@TryParseDN
	DD	-104					; ffffff98H
	DD	4
	DD	$LN34@TryParseDN
	DD	-120					; ffffff88H
	DD	4
	DD	$LN35@TryParseDN
	DD	-136					; ffffff78H
	DD	4
	DD	$LN36@TryParseDN
$LN36@TryParseDN:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN35@TryParseDN:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN34@TryParseDN:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN33@TryParseDN:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN32@TryParseDN:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN31@TryParseDN:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN30@TryParseDN:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN29@TryParseDN:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TryParseDN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_w_tail$1 = -40						; size = 4
_work_buf_count$ = -36					; size = 4
_work_buf$ = -32					; size = 4
_work_buf_words$ = -24					; size = 4
_work_buf_code$ = -12					; size = 4
_result$ = -4						; size = 4
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_ConvertCardinalNumber PROC

; 993  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 994  :     PMC_STATUS_CODE result;
; 995  :     __UNIT_TYPE work_buf_code;
; 996  :     __UNIT_TYPE work_buf_words;
; 997  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	lea	eax, DWORD PTR _work_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _work_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in_buf_count$[ebp]
	add	edx, 1
	shl	edx, 5
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf$[ebp], eax

; 998  :     if (work_buf == NULL)

	cmp	DWORD PTR _work_buf$[ebp], 0
	jne	SHORT $LN4@ConvertCar

; 999  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ConvertCar
$LN4@ConvertCar:

; 1000 : 
; 1001 :     __UNIT_TYPE work_buf_count = 1;

	mov	DWORD PTR _work_buf_count$[ebp], 1

; 1002 :     work_buf[0] = in_buf[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _work_buf$[ebp]
	mov	esi, DWORD PTR _in_buf$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx

; 1003 :     ++in_buf;

	mov	edx, DWORD PTR _in_buf$[ebp]
	add	edx, 4
	mov	DWORD PTR _in_buf$[ebp], edx

; 1004 :     --in_buf_count;

	mov	eax, DWORD PTR _in_buf_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _in_buf_count$[ebp], eax
$LN2@ConvertCar:

; 1005 : 
; 1006 :     while (in_buf_count > 0)

	cmp	DWORD PTR _in_buf_count$[ebp], 0
	jbe	SHORT $LN3@ConvertCar

; 1007 :     {
; 1008 :         __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

	mov	esi, esp
	mov	ecx, DWORD PTR _in_buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _work_buf_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_buf$[ebp]
	push	ecx
	call	DWORD PTR _fp_MultiplyAndAdd
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_tail$1[ebp], eax

; 1009 :         work_buf_count = w_tail - work_buf;

	mov	edx, DWORD PTR _w_tail$1[ebp]
	sub	edx, DWORD PTR _work_buf$[ebp]
	sar	edx, 2
	mov	DWORD PTR _work_buf_count$[ebp], edx

; 1010 :         ++in_buf;

	mov	eax, DWORD PTR _in_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _in_buf$[ebp], eax

; 1011 :         --in_buf_count;

	mov	ecx, DWORD PTR _in_buf_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _in_buf_count$[ebp], ecx

; 1012 :     }

	jmp	SHORT $LN2@ConvertCar
$LN3@ConvertCar:

; 1013 :     if ((result = CheckBlockLight(work_buf, work_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@ConvertCar

; 1014 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@ConvertCar
$LN5@ConvertCar:

; 1015 :     _COPY_MEMORY_UNIT(out_buf, work_buf, work_buf_count);

	mov	ecx, DWORD PTR _work_buf_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _out_buf$[ebp]
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 1016 :     DeallocateBlock(work_buf, work_buf_words);

	mov	ecx, DWORD PTR _work_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 1017 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@ConvertCar:

; 1018 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ConvertCar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@ConvertCar:
	DD	2
	DD	$LN9@ConvertCar
$LN9@ConvertCar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@ConvertCar
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@ConvertCar
$LN8@ConvertCar:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN7@ConvertCar:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ConvertCardinalNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
_MultiplyAndAdd_using_ADCX_MULX PROC

; 850  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 851  :     __UNIT_TYPE k = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _k$[ebp], eax

; 852  :     __UNIT_TYPE count = u_count >> 5;

	mov	ecx, DWORD PTR _u_count$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _count$[ebp], ecx
$LN2@MultiplyAn:

; 853  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN3@MultiplyAn

; 854  :     {
; 855  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 856  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 857  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 858  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 859  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 860  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 861  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	edx, 4
	imul	eax, edx, 6
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 862  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	eax, 4
	imul	ecx, eax, 7
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 863  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 864  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 865  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	ecx, 4
	imul	edx, ecx, 10
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 866  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	edx, 4
	imul	eax, edx, 11
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 867  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 868  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	ecx, 4
	imul	edx, ecx, 13
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 869  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	edx, 4
	imul	eax, edx, 14
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 870  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 871  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[16], &u_buf[16]);

	mov	ecx, 4
	shl	ecx, 4
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 4
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 872  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[17], &u_buf[17]);

	mov	eax, 4
	imul	ecx, eax, 17
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 17
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 873  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[18], &u_buf[18]);

	mov	ecx, 4
	imul	edx, ecx, 18
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 874  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[19], &u_buf[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 875  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[20], &u_buf[20]);

	mov	eax, 4
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 20
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 876  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[21], &u_buf[21]);

	mov	ecx, 4
	imul	edx, ecx, 21
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 877  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[22], &u_buf[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 878  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[23], &u_buf[23]);

	mov	eax, 4
	imul	ecx, eax, 23
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 23
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 879  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[24], &u_buf[24]);

	mov	ecx, 4
	imul	edx, ecx, 24
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 880  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[25], &u_buf[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 881  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[26], &u_buf[26]);

	mov	eax, 4
	imul	ecx, eax, 26
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 26
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 882  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[27], &u_buf[27]);

	mov	ecx, 4
	imul	edx, ecx, 27
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 883  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[28], &u_buf[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 884  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[29], &u_buf[29]);

	mov	eax, 4
	imul	ecx, eax, 29
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 29
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 885  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[30], &u_buf[30]);

	mov	ecx, 4
	imul	edx, ecx, 30
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 886  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[31], &u_buf[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 887  :         u_buf += 32;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _u_buf$[ebp], eax

; 888  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 889  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 890  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@MultiplyAn

; 891  :             AddToMULTI32Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN5@MultiplyAn
$LN4@MultiplyAn:

; 892  :         else
; 893  :             AddToMULTI64Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN5@MultiplyAn:

; 894  : #endif
; 895  :     }

	jmp	$LN2@MultiplyAn
$LN3@MultiplyAn:

; 896  : 
; 897  :     if (u_count & 0x10)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 16					; 00000010H
	je	$LN6@MultiplyAn

; 898  :     {
; 899  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 900  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 901  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 902  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 903  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 904  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 905  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 906  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 907  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 908  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 909  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 910  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 911  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 912  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 913  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 914  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 915  :         u_buf += 16;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _u_buf$[ebp], eax

; 916  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 917  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@MultiplyAn

; 918  :             AddToMULTI32Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN6@MultiplyAn
$LN7@MultiplyAn:

; 919  :         else
; 920  :             AddToMULTI64Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN6@MultiplyAn:

; 921  : #endif
; 922  :     }
; 923  : 
; 924  :     if (u_count & 0x8)

	mov	edx, DWORD PTR _u_count$[ebp]
	and	edx, 8
	je	$LN9@MultiplyAn

; 925  :     {
; 926  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 927  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 928  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 929  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	edx, 4
	imul	eax, edx, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 930  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 931  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	edx, 4
	imul	eax, edx, 5
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 932  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 933  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 934  :         u_buf += 8;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _u_buf$[ebp], edx

; 935  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 936  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@MultiplyAn

; 937  :             AddToMULTI32Counter(8);

	push	8
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN9@MultiplyAn
$LN10@MultiplyAn:

; 938  :         else
; 939  :             AddToMULTI64Counter(8);

	push	8
	call	_AddToMULTI64Counter
	add	esp, 4
$LN9@MultiplyAn:

; 940  : #endif
; 941  :     }
; 942  : 
; 943  :     if (u_count & 0x4)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 4
	je	$LN12@MultiplyAn

; 944  :     {
; 945  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 946  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 947  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 948  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 949  :         u_buf += 4;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _u_buf$[ebp], edx

; 950  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 951  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN13@MultiplyAn

; 952  :             AddToMULTI32Counter(4);

	push	4
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN12@MultiplyAn
$LN13@MultiplyAn:

; 953  :         else
; 954  :             AddToMULTI64Counter(4);

	push	4
	call	_AddToMULTI64Counter
	add	esp, 4
$LN12@MultiplyAn:

; 955  : #endif
; 956  :     }
; 957  : 
; 958  :     if (u_count & 0x2)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 2
	je	SHORT $LN15@MultiplyAn

; 959  :     {
; 960  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 961  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 962  :         u_buf += 2;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 8
	mov	DWORD PTR _u_buf$[ebp], edx

; 963  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 964  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN16@MultiplyAn

; 965  :             AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN15@MultiplyAn
$LN16@MultiplyAn:

; 966  :         else
; 967  :             AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
$LN15@MultiplyAn:

; 968  : #endif
; 969  :     }
; 970  : 
; 971  :     if (u_count & 0x1)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 1
	je	SHORT $LN18@MultiplyAn

; 972  :     {
; 973  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 974  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax

; 975  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 976  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@MultiplyAn

; 977  :             IncrementMULTI32Counter();

	call	_IncrementMULTI32Counter
	jmp	SHORT $LN18@MultiplyAn
$LN19@MultiplyAn:

; 978  :         else
; 979  :             IncrementMULTI64Counter();

	call	_IncrementMULTI64Counter
$LN18@MultiplyAn:

; 980  : #endif
; 981  :     }
; 982  : 
; 983  :     if (k > 0)

	cmp	DWORD PTR _k$[ebp], 0
	jbe	SHORT $LN21@MultiplyAn

; 984  :     {
; 985  :         u_buf[0] = k;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 986  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax
$LN21@MultiplyAn:

; 987  :     }
; 988  : 
; 989  :     return (u_buf);

	mov	eax, DWORD PTR _u_buf$[ebp]

; 990  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MultiplyAndAdd_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
_MultiplyAndAdd_using_ADC_MUL PROC

; 707  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 708  :     __UNIT_TYPE k = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _k$[ebp], eax

; 709  :     __UNIT_TYPE count = u_count >> 5;

	mov	ecx, DWORD PTR _u_count$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _count$[ebp], ecx
$LN2@MultiplyAn:

; 710  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN3@MultiplyAn

; 711  :     {
; 712  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 713  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 714  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 715  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 716  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 717  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 718  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	edx, 4
	imul	eax, edx, 6
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 719  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	eax, 4
	imul	ecx, eax, 7
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 720  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 721  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 722  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

	mov	ecx, 4
	imul	edx, ecx, 10
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 723  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

	mov	edx, 4
	imul	eax, edx, 11
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 724  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 725  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

	mov	ecx, 4
	imul	edx, ecx, 13
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 726  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

	mov	edx, 4
	imul	eax, edx, 14
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 727  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 728  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[16], &u_buf[16]);

	mov	ecx, 4
	shl	ecx, 4
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 4
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 729  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[17], &u_buf[17]);

	mov	eax, 4
	imul	ecx, eax, 17
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 17
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 730  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[18], &u_buf[18]);

	mov	ecx, 4
	imul	edx, ecx, 18
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 731  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[19], &u_buf[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 732  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[20], &u_buf[20]);

	mov	eax, 4
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 20
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 733  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[21], &u_buf[21]);

	mov	ecx, 4
	imul	edx, ecx, 21
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 734  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[22], &u_buf[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 735  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[23], &u_buf[23]);

	mov	eax, 4
	imul	ecx, eax, 23
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 23
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 736  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[24], &u_buf[24]);

	mov	ecx, 4
	imul	edx, ecx, 24
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 737  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[25], &u_buf[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 738  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[26], &u_buf[26]);

	mov	eax, 4
	imul	ecx, eax, 26
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 26
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 739  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[27], &u_buf[27]);

	mov	ecx, 4
	imul	edx, ecx, 27
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 740  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[28], &u_buf[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 741  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[29], &u_buf[29]);

	mov	eax, 4
	imul	ecx, eax, 29
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 29
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 742  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[30], &u_buf[30]);

	mov	ecx, 4
	imul	edx, ecx, 30
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 743  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[31], &u_buf[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 744  :         u_buf += 32;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _u_buf$[ebp], eax

; 745  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 746  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 747  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@MultiplyAn

; 748  :             AddToMULTI32Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN5@MultiplyAn
$LN4@MultiplyAn:

; 749  :         else
; 750  :             AddToMULTI64Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN5@MultiplyAn:

; 751  : #endif
; 752  :     }

	jmp	$LN2@MultiplyAn
$LN3@MultiplyAn:

; 753  : 
; 754  :     if (u_count & 0x10)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 16					; 00000010H
	je	$LN6@MultiplyAn

; 755  :     {
; 756  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 757  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 758  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 759  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 760  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 761  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 762  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 763  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 764  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 765  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 766  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 767  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 768  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 769  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 770  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 771  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 772  :         u_buf += 16;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _u_buf$[ebp], eax

; 773  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 774  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@MultiplyAn

; 775  :             AddToMULTI32Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN6@MultiplyAn
$LN7@MultiplyAn:

; 776  :         else
; 777  :             AddToMULTI64Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN6@MultiplyAn:

; 778  : #endif
; 779  :     }
; 780  : 
; 781  :     if (u_count & 0x8)

	mov	edx, DWORD PTR _u_count$[ebp]
	and	edx, 8
	je	$LN9@MultiplyAn

; 782  :     {
; 783  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 784  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 785  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 786  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	edx, 4
	imul	eax, edx, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 787  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 788  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	edx, 4
	imul	eax, edx, 5
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 789  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 790  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 791  :         u_buf += 8;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _u_buf$[ebp], edx

; 792  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 793  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@MultiplyAn

; 794  :             AddToMULTI32Counter(8);

	push	8
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN9@MultiplyAn
$LN10@MultiplyAn:

; 795  :         else
; 796  :             AddToMULTI64Counter(8);

	push	8
	call	_AddToMULTI64Counter
	add	esp, 4
$LN9@MultiplyAn:

; 797  : #endif
; 798  :     }
; 799  : 
; 800  :     if (u_count & 0x4)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 4
	je	$LN12@MultiplyAn

; 801  :     {
; 802  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 803  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 804  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 805  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 806  :         u_buf += 4;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _u_buf$[ebp], edx

; 807  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 808  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN13@MultiplyAn

; 809  :             AddToMULTI32Counter(4);

	push	4
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN12@MultiplyAn
$LN13@MultiplyAn:

; 810  :         else
; 811  :             AddToMULTI64Counter(4);

	push	4
	call	_AddToMULTI64Counter
	add	esp, 4
$LN12@MultiplyAn:

; 812  : #endif
; 813  :     }
; 814  : 
; 815  :     if (u_count & 0x2)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 2
	je	SHORT $LN15@MultiplyAn

; 816  :     {
; 817  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 818  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 819  :         u_buf += 2;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 8
	mov	DWORD PTR _u_buf$[ebp], edx

; 820  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 821  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN16@MultiplyAn

; 822  :             AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN15@MultiplyAn
$LN16@MultiplyAn:

; 823  :         else
; 824  :             AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
$LN15@MultiplyAn:

; 825  : #endif
; 826  :     }
; 827  : 
; 828  :     if (u_count & 0x1)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 1
	je	SHORT $LN18@MultiplyAn

; 829  :     {
; 830  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 831  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax

; 832  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 833  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@MultiplyAn

; 834  :             IncrementMULTI32Counter();

	call	_IncrementMULTI32Counter
	jmp	SHORT $LN18@MultiplyAn
$LN19@MultiplyAn:

; 835  :         else
; 836  :             IncrementMULTI64Counter();

	call	_IncrementMULTI64Counter
$LN18@MultiplyAn:

; 837  : #endif
; 838  :     }
; 839  : 
; 840  :     if (k > 0)

	cmp	DWORD PTR _k$[ebp], 0
	jbe	SHORT $LN21@MultiplyAn

; 841  :     {
; 842  :         u_buf[0] = k;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 843  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax
$LN21@MultiplyAn:

; 844  :     }
; 845  : 
; 846  :     return (u_buf);

	mov	eax, DWORD PTR _u_buf$[ebp]

; 847  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MultiplyAndAdd_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_t_lo$ = -20						; size = 4
_t_hi$ = -12						; size = 4
_base_value$ = -4					; size = 4
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
_MultiplyAndAdd1Word_using_ADCX_MULX PROC

; 692  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 693  : #ifdef _M_IX86
; 694  :     __UNIT_TYPE base_value = 1000000000U; // 10^9

	mov	DWORD PTR _base_value$[ebp], 1000000000	; 3b9aca00H

; 695  : #elif defined(_M_IX64)
; 696  :     __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19
; 697  : #else
; 698  : #error unknown platform
; 699  : #endif
; 700  :     __UNIT_TYPE t_hi;
; 701  :     __UNIT_TYPE t_lo = _MULTIPLYX_UNIT(u, base_value, &t_hi);

	lea	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base_value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	__MULTIPLYX_UNIT
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_lo$[ebp], eax

; 702  :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t_lo$[ebp]
	push	ecx
	push	0
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	movzx	edx, al
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H

; 703  :     return (k);

	mov	eax, DWORD PTR _k$[ebp]

; 704  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MultiplyAn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@MultiplyAn:
	DD	1
	DD	$LN4@MultiplyAn
$LN4@MultiplyAn:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@MultiplyAn
$LN3@MultiplyAn:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_MultiplyAndAdd1Word_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_t_lo$ = -20						; size = 4
_t_hi$ = -12						; size = 4
_base_value$ = -4					; size = 4
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
_MultiplyAndAdd1Word_using_ADC_MUL PROC

; 677  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 678  : #ifdef _M_IX86
; 679  :     __UNIT_TYPE base_value = 1000000000U; // 10^9

	mov	DWORD PTR _base_value$[ebp], 1000000000	; 3b9aca00H

; 680  : #elif defined(_M_IX64)
; 681  :     __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19
; 682  : #else
; 683  : #error unknown platform
; 684  : #endif
; 685  :     __UNIT_TYPE t_hi;
; 686  :     __UNIT_TYPE t_lo = _MULTIPLY_UNIT(u, base_value, &t_hi);

	lea	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base_value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	__MULTIPLY_UNIT
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_lo$[ebp], eax

; 687  :     _ADD_UNIT(_ADD_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t_lo$[ebp]
	push	ecx
	push	0
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	movzx	edx, al
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H

; 688  :     return (k);

	mov	eax, DWORD PTR _k$[ebp]

; 689  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MultiplyAn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@MultiplyAn:
	DD	1
	DD	$LN4@MultiplyAn
$LN4@MultiplyAn:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@MultiplyAn
$LN3@MultiplyAn:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_MultiplyAndAdd1Word_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_r$ = -20						; size = 4
_source_count$ = -16					; size = 4
_out_ptr$ = -12						; size = 4
_in_ptr$ = -8						; size = 4
_word_digit_count$ = -4					; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_out_buf_count$ = 16					; size = 4
_native_digits$ = 20					; size = 4
_BuildBinaryFromDecimalString PROC

; 649  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 650  : #ifdef _M_IX86
; 651  :     int word_digit_count = 9;

	mov	DWORD PTR _word_digit_count$[ebp], 9

; 652  : #elif defined(_M_IX64)
; 653  :     int word_digit_count = 19;
; 654  : #else
; 655  : #error unknown platform
; 656  : #endif
; 657  :     wchar_t* in_ptr = source;

	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _in_ptr$[ebp], eax

; 658  :     __UNIT_TYPE* out_ptr = out_buf;

	mov	ecx, DWORD PTR _out_buf$[ebp]
	mov	DWORD PTR _out_ptr$[ebp], ecx

; 659  :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	esi, esp
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_count$[ebp], eax

; 660  :     int r = source_count % word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	xor	edx, edx
	div	DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 661  :     if (r > 0)

	cmp	DWORD PTR _r$[ebp], 0
	jle	SHORT $LN2@BuildBinar

; 662  :     {
; 663  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r, native_digits);

	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	push	edx
	call	_BuildLeading1WordFromDecimalString
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _out_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _out_ptr$[ebp], edx

; 664  :         in_ptr += r;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _in_ptr$[ebp], edx

; 665  :         source_count -= r;

	mov	eax, DWORD PTR _source_count$[ebp]
	sub	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR _source_count$[ebp], eax
$LN2@BuildBinar:

; 666  :     }
; 667  :     while (source_count > 0)

	cmp	DWORD PTR _source_count$[ebp], 0
	jbe	SHORT $LN3@BuildBinar

; 668  :     {
; 669  :         *out_ptr++ = Build1WordFromDecimalString(in_ptr, native_digits);

	mov	ecx, DWORD PTR _native_digits$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	push	edx
	call	_Build1WordFromDecimalString
	add	esp, 8
	mov	ecx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _out_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _out_ptr$[ebp], edx

; 670  :         in_ptr += word_digit_count;

	mov	eax, DWORD PTR _word_digit_count$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _in_ptr$[ebp], edx

; 671  :         source_count -= word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	sub	eax, DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _source_count$[ebp], eax

; 672  :     }

	jmp	SHORT $LN2@BuildBinar
$LN3@BuildBinar:

; 673  :     *out_buf_count = out_ptr - out_buf;

	mov	ecx, DWORD PTR _out_ptr$[ebp]
	sub	ecx, DWORD PTR _out_buf$[ebp]
	sar	ecx, 2
	mov	edx, DWORD PTR _out_buf_count$[ebp]
	mov	DWORD PTR [edx], ecx

; 674  : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildBinaryFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
tv228 = -42						; size = 2
tv220 = -40						; size = 2
tv213 = -38						; size = 2
tv205 = -36						; size = 2
tv198 = -34						; size = 2
tv191 = -32						; size = 2
tv184 = -30						; size = 2
tv177 = -28						; size = 2
tv169 = -26						; size = 2
tv162 = -24						; size = 2
tv155 = -22						; size = 2
tv148 = -20						; size = 2
tv141 = -18						; size = 2
tv134 = -16						; size = 2
tv95 = -14						; size = 2
tv88 = -12						; size = 2
tv81 = -10						; size = 2
tv74 = -8						; size = 2
tv67 = -6						; size = 2
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_native_digits$ = 12					; size = 4
_Build1WordFromDecimalString PROC

; 612  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 613  :     __UNIT_TYPE x = ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv67[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv67[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax

; 614  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

	xor	edx, edx
	je	$LN2@Build1Word

; 615  :     {
; 616  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv74[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv74[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 617  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv81[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv81[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 618  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv88[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv88[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 619  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv95[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv95[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 620  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv134[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv134[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 621  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv141[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv141[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 622  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv148[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv148[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 623  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv155[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv155[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 624  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv162[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv162[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 625  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv169[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv169[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx
$LN2@Build1Word:

; 626  :     }
; 627  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	$LN3@Build1Word

; 628  :     {
; 629  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	ecx, DWORD PTR _in_ptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv177[ebp], dx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax
	mov	ecx, DWORD PTR _native_digits$[ebp]
	push	ecx
	movzx	edx, WORD PTR tv177[ebp]
	push	edx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	ecx, DWORD PTR _x$[ebp], 10
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 630  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv184[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	mov	edx, DWORD PTR _native_digits$[ebp]
	push	edx
	movzx	eax, WORD PTR tv184[ebp]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	imul	ecx, DWORD PTR _x$[ebp], 10
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 631  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv191[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	mov	edx, DWORD PTR _native_digits$[ebp]
	push	edx
	movzx	eax, WORD PTR tv191[ebp]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	imul	ecx, DWORD PTR _x$[ebp], 10
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 632  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv198[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	mov	edx, DWORD PTR _native_digits$[ebp]
	push	edx
	movzx	eax, WORD PTR tv198[ebp]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	imul	ecx, DWORD PTR _x$[ebp], 10
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 633  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv205[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	mov	edx, DWORD PTR _native_digits$[ebp]
	push	edx
	movzx	eax, WORD PTR tv205[ebp]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	imul	ecx, DWORD PTR _x$[ebp], 10
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN3@Build1Word:

; 634  :     }
; 635  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@Build1Word

; 636  :     {
; 637  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv213[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv213[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 638  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv220[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv220[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx
$LN4@Build1Word:

; 639  :     }
; 640  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@Build1Word

; 641  :     {
; 642  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	ecx, DWORD PTR _in_ptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv228[ebp], dx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax
	mov	ecx, DWORD PTR _native_digits$[ebp]
	push	ecx
	movzx	edx, WORD PTR tv228[ebp]
	push	edx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	ecx, DWORD PTR _x$[ebp], 10
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN5@Build1Word:

; 643  :     }
; 644  :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 645  : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Build1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
tv69 = -6						; size = 2
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
_native_digits$ = 16					; size = 4
_BuildLeading1WordFromDecimalString PROC

; 601  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 602  :     __UNIT_TYPE x = 0;

	mov	DWORD PTR _x$[ebp], 0
$LN2@BuildLeadi:

; 603  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@BuildLeadi

; 604  :     {
; 605  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv69[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	mov	eax, DWORD PTR _native_digits$[ebp]
	push	eax
	movzx	ecx, WORD PTR tv69[ebp]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	imul	edx, DWORD PTR _x$[ebp], 10
	add	edx, eax
	mov	DWORD PTR _x$[ebp], edx

; 606  :         --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 607  :     }

	jmp	SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 608  :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 609  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildLeading1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_state$ = -116						; size = 108
__$ArrayPad$ = -4					; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_int_part_buf$ = 20					; size = 4
_ParseAsHexNumberString PROC

; 586  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 587  :     struct __tag_PARSER_STATE state;
; 588  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, NULL);

	push	0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format_option$[ebp]
	push	ecx
	mov	edx, DWORD PTR _number_styles$[ebp]
	push	edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_InitializeParserState
	add	esp, 24					; 00000018H

; 589  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 1
	je	SHORT $LN2@ParseAsHex

; 590  :         SkipSpace(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_SkipSpace
	add	esp, 4
$LN2@ParseAsHex:

; 591  :     ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4

; 592  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 2
	je	SHORT $LN3@ParseAsHex

; 593  :         SkipSpace(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_SkipSpace
	add	esp, 4
$LN3@ParseAsHex:

; 594  :     if (*state.IN_PTR != L'\0')

	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN4@ParseAsHex

; 595  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsHex
$LN4@ParseAsHex:

; 596  :     FinalizeParserState(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_FinalizeParserState
	add	esp, 4

; 597  :     return (1);

	mov	eax, 1
$LN1@ParseAsHex:

; 598  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ParseAsHex
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@ParseAsHex:
	DD	1
	DD	$LN7@ParseAsHex
$LN7@ParseAsHex:
	DD	-116					; ffffff8cH
	DD	108					; 0000006cH
	DD	$LN6@ParseAsHex
$LN6@ParseAsHex:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_ParseAsHexNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
tv627 = -124						; size = 4
_state$ = -116						; size = 108
__$ArrayPad$ = -4					; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_sign$ = 20						; size = 4
_int_part_buf$ = 24					; size = 4
_frac_part_buf$ = 28					; size = 4
_ParseAsDecimalNumberString PROC

; 217  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	edi
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 31					; 0000001fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 218  :     /*
; 219  :       想定している書式：
; 220  : 
; 221  :         $ -n
; 222  :         $ n
; 223  :         $-n
; 224  :         $n
; 225  :         $n-
; 226  :         ($ n)
; 227  :         ($n)
; 228  :         (n $)
; 229  :         (n)
; 230  :         -$ n
; 231  :         -$n
; 232  :         -n
; 233  :         -n $
; 234  :         -n$
; 235  :         n $
; 236  :         n $-
; 237  :         n -
; 238  :         n$
; 239  :         n$-
; 240  :         n-
; 241  :         n-$
; 242  :     */
; 243  :     struct __tag_PARSER_STATE state;
; 244  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, frac_part_buf);

	mov	eax, DWORD PTR _frac_part_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format_option$[ebp]
	push	edx
	mov	eax, DWORD PTR _number_styles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_InitializeParserState
	add	esp, 24					; 00000018H

; 245  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 1
	je	SHORT $LN2@ParseAsDec

; 246  :         SkipSpace(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_SkipSpace
	add	esp, 4
$LN2@ParseAsDec:

; 247  :     if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 256				; 00000100H
	je	$LN3@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+10]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN3@ParseAsDec

; 248  :     {
; 249  :         state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+16]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 250  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 1
	je	SHORT $LN5@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN5@ParseAsDec

; 251  :             state.IN_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 2
	mov	DWORD PTR _state$[ebp], edx
$LN5@ParseAsDec:

; 252  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 4
	je	$LN6@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+42]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@ParseAsDec

; 253  :         {
; 254  :             state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 255  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+48]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 256  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	eax, DWORD PTR _state$[ebp+20]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN8@ParseAsDec

; 257  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN8@ParseAsDec:

; 258  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN9@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+64]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@ParseAsDec

; 259  :             {
; 260  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+72]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 261  :                 ParseAsFractionPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN9@ParseAsDec:

; 262  :             }
; 263  :         }

	jmp	$LN7@ParseAsDec
$LN6@ParseAsDec:

; 264  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 4
	je	$LN10@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+52]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@ParseAsDec

; 265  :         {
; 266  :             state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 267  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+60]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 268  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	edx, DWORD PTR _state$[ebp+20]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN12@ParseAsDec

; 269  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN12@ParseAsDec:

; 270  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN13@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+64]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@ParseAsDec

; 271  :             {
; 272  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+72]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 273  :                 ParseAsFractionPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN13@ParseAsDec:

; 274  :             }
; 275  :         }

	jmp	$LN7@ParseAsDec
$LN10@ParseAsDec:

; 276  :         else
; 277  :         {
; 278  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	ecx, DWORD PTR _state$[ebp+20]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN14@ParseAsDec

; 279  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN14@ParseAsDec:

; 280  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN15@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+64]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@ParseAsDec

; 281  :             {
; 282  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+72]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 283  :                 ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN15@ParseAsDec:

; 284  :             }
; 285  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN16@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+42]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@ParseAsDec

; 286  :             {
; 287  :                 state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 288  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+48]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 289  :             }

	jmp	SHORT $LN7@ParseAsDec
$LN16@ParseAsDec:

; 290  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN7@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+52]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@ParseAsDec

; 291  :             {
; 292  :                 state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 293  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+60]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx
$LN7@ParseAsDec:

; 294  :             }
; 295  :             else
; 296  :             {
; 297  :             }
; 298  :         }
; 299  :     }

	jmp	$LN4@ParseAsDec
$LN3@ParseAsDec:

; 300  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && *state.IN_PTR == L'(')

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 16					; 00000010H
	je	$LN20@ParseAsDec
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 40					; 00000028H
	jne	$LN20@ParseAsDec

; 301  :     {
; 302  :         state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 303  :         state.IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 2
	mov	DWORD PTR _state$[ebp], eax

; 304  : 
; 305  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	$LN22@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN22@ParseAsDec

; 306  :         {
; 307  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 308  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 1
	je	SHORT $LN24@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN24@ParseAsDec

; 309  :                 state.IN_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 2
	mov	DWORD PTR _state$[ebp], ecx
$LN24@ParseAsDec:

; 310  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	edx, DWORD PTR _state$[ebp+20]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN25@ParseAsDec

; 311  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN25@ParseAsDec:

; 312  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN26@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+64]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN26@ParseAsDec

; 313  :             {
; 314  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+72]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 315  :                 ParseAsFractionPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN26@ParseAsDec:

; 316  :             }
; 317  :         }

	jmp	$LN23@ParseAsDec
$LN22@ParseAsDec:

; 318  :         else
; 319  :         {
; 320  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	ecx, DWORD PTR _state$[ebp+20]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN27@ParseAsDec

; 321  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN27@ParseAsDec:

; 322  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN28@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+64]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN28@ParseAsDec

; 323  :             {
; 324  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+72]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 325  :                 ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN28@ParseAsDec:

; 326  :             }
; 327  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 2
	je	SHORT $LN23@ParseAsDec
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN23@ParseAsDec

; 328  :             {
; 329  :                 state.IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 2
	mov	DWORD PTR _state$[ebp], eax

; 330  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN23@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN23@ParseAsDec

; 331  :                     state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN23@ParseAsDec:

; 332  :             }
; 333  :         }
; 334  :         if (*state.IN_PTR != L')')

	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 41					; 00000029H
	je	SHORT $LN31@ParseAsDec

; 335  :             return (0);

	xor	eax, eax
	jmp	$LN1@ParseAsDec
$LN31@ParseAsDec:

; 336  :         state.IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 2
	mov	DWORD PTR _state$[ebp], eax

; 337  :     }

	jmp	$LN4@ParseAsDec
$LN20@ParseAsDec:

; 338  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 4
	je	$LN32@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+42]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN32@ParseAsDec

; 339  :     {
; 340  :         state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 341  :         state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+48]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 342  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	$LN34@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN34@ParseAsDec

; 343  :         {
; 344  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 345  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 1
	je	SHORT $LN36@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN36@ParseAsDec

; 346  :                 state.IN_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 2
	mov	DWORD PTR _state$[ebp], ecx
$LN36@ParseAsDec:

; 347  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	edx, DWORD PTR _state$[ebp+20]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN37@ParseAsDec

; 348  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN37@ParseAsDec:

; 349  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN38@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+64]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN38@ParseAsDec

; 350  :             {
; 351  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+72]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 352  :                 ParseAsFractionPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN38@ParseAsDec:

; 353  :             }
; 354  :         }

	jmp	$LN35@ParseAsDec
$LN34@ParseAsDec:

; 355  :         else
; 356  :         {
; 357  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	ecx, DWORD PTR _state$[ebp+20]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN39@ParseAsDec

; 358  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN39@ParseAsDec:

; 359  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN40@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+64]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN40@ParseAsDec

; 360  :             {
; 361  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+72]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 362  :                 ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN40@ParseAsDec:

; 363  :             }
; 364  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 2
	je	SHORT $LN41@ParseAsDec
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN41@ParseAsDec

; 365  :             {
; 366  :                 state.IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 2
	mov	DWORD PTR _state$[ebp], eax

; 367  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN43@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN43@ParseAsDec

; 368  :                     state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN43@ParseAsDec:

; 369  :             }

	jmp	SHORT $LN35@ParseAsDec
$LN41@ParseAsDec:

; 370  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN35@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN35@ParseAsDec

; 371  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN35@ParseAsDec:

; 372  :             else
; 373  :             {
; 374  :             }
; 375  :         }
; 376  :     }

	jmp	$LN4@ParseAsDec
$LN32@ParseAsDec:

; 377  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 4
	je	$LN46@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+52]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN46@ParseAsDec

; 378  :     {
; 379  :         state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 380  :         state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+48]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 381  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	$LN48@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN48@ParseAsDec

; 382  :         {
; 383  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 384  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 1
	je	SHORT $LN50@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN50@ParseAsDec

; 385  :                 state.IN_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 2
	mov	DWORD PTR _state$[ebp], ecx
$LN50@ParseAsDec:

; 386  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	edx, DWORD PTR _state$[ebp+20]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN51@ParseAsDec

; 387  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN51@ParseAsDec:

; 388  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN52@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+64]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN52@ParseAsDec

; 389  :             {
; 390  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+72]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 391  :                 ParseAsFractionPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN52@ParseAsDec:

; 392  :             }
; 393  :         }

	jmp	$LN49@ParseAsDec
$LN48@ParseAsDec:

; 394  :         else
; 395  :         {
; 396  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	ecx, DWORD PTR _state$[ebp+20]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN53@ParseAsDec

; 397  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN53@ParseAsDec:

; 398  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN54@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+64]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN54@ParseAsDec

; 399  :             {
; 400  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+72]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 401  :                 ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN54@ParseAsDec:

; 402  :             }
; 403  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 2
	je	SHORT $LN55@ParseAsDec
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN55@ParseAsDec

; 404  :             {
; 405  :                 state.IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 2
	mov	DWORD PTR _state$[ebp], eax

; 406  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN57@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN57@ParseAsDec

; 407  :                     state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN57@ParseAsDec:

; 408  :             }

	jmp	SHORT $LN49@ParseAsDec
$LN55@ParseAsDec:

; 409  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN49@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN49@ParseAsDec

; 410  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN49@ParseAsDec:

; 411  :             else
; 412  :             {
; 413  :             }
; 414  :         }
; 415  :     }

	jmp	$LN4@ParseAsDec
$LN46@ParseAsDec:

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	ecx, DWORD PTR _state$[ebp+20]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	$LN60@ParseAsDec

; 417  :     {
; 418  :         ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4

; 419  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN62@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+64]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN62@ParseAsDec

; 420  :         {
; 421  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+72]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 422  :             ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN62@ParseAsDec:

; 423  :         }
; 424  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 2
	je	$LN63@ParseAsDec
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 32					; 00000020H
	jne	$LN63@ParseAsDec

; 425  :         {
; 426  :             state.IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 2
	mov	DWORD PTR _state$[ebp], eax

; 427  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN65@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN65@ParseAsDec

; 428  :             {
; 429  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 430  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN67@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+42]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN67@ParseAsDec

; 431  :                 {
; 432  :                     state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 433  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+48]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 434  :                 }

	jmp	SHORT $LN68@ParseAsDec
$LN67@ParseAsDec:

; 435  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN68@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+52]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN68@ParseAsDec

; 436  :                 {
; 437  :                     state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 438  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+60]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN68@ParseAsDec:

; 439  :                 }
; 440  :                 else
; 441  :                 {
; 442  :                 }
; 443  :             }

	jmp	SHORT $LN66@ParseAsDec
$LN65@ParseAsDec:

; 444  :             else
; 445  :             {
; 446  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN71@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+42]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN71@ParseAsDec

; 447  :                 {
; 448  :                     state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 449  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+48]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 450  :                 }

	jmp	SHORT $LN66@ParseAsDec
$LN71@ParseAsDec:

; 451  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN66@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+52]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN66@ParseAsDec

; 452  :                 {
; 453  :                     state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 454  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+60]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN66@ParseAsDec:

; 455  :                 }
; 456  :                 else
; 457  :                 {
; 458  :                 }
; 459  :             }
; 460  :         }

	jmp	$LN64@ParseAsDec
$LN63@ParseAsDec:

; 461  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN75@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN75@ParseAsDec

; 462  :         {
; 463  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 464  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN77@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+42]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN77@ParseAsDec

; 465  :             {
; 466  :                 state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 467  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+48]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 468  :             }

	jmp	SHORT $LN78@ParseAsDec
$LN77@ParseAsDec:

; 469  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN78@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+52]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN78@ParseAsDec

; 470  :             {
; 471  :                 state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 472  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+60]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN78@ParseAsDec:

; 473  :             }
; 474  :             else
; 475  :             {
; 476  :             }
; 477  :         }

	jmp	$LN64@ParseAsDec
$LN75@ParseAsDec:

; 478  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN81@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+42]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN81@ParseAsDec

; 479  :         {
; 480  :             state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 481  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+48]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 482  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN83@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN83@ParseAsDec

; 483  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN83@ParseAsDec:

; 484  :         }

	jmp	SHORT $LN64@ParseAsDec
$LN81@ParseAsDec:

; 485  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN64@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+52]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN64@ParseAsDec

; 486  :         {
; 487  :             state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 488  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+60]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 489  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 256				; 00000100H
	je	SHORT $LN64@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+10]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN64@ParseAsDec

; 490  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+16]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN64@ParseAsDec:

; 491  :         }
; 492  :         else
; 493  :         {
; 494  :         }
; 495  :     }

	jmp	$LN4@ParseAsDec
$LN60@ParseAsDec:

; 496  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 32					; 00000020H
	je	$LN87@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+64]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	$LN87@ParseAsDec

; 497  :     {
; 498  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+72]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 499  :         ParseAsFractionPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4

; 500  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 2
	je	$LN89@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	$LN89@ParseAsDec

; 501  :         {
; 502  :             state.IN_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 2
	mov	DWORD PTR _state$[ebp], edx

; 503  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 256				; 00000100H
	je	SHORT $LN91@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+10]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN91@ParseAsDec

; 504  :             {
; 505  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+16]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 506  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN93@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+42]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN93@ParseAsDec

; 507  :                 {
; 508  :                     state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 509  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+48]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 510  :                 }

	jmp	SHORT $LN94@ParseAsDec
$LN93@ParseAsDec:

; 511  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN94@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+52]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN94@ParseAsDec

; 512  :                 {
; 513  :                     state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 514  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+60]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx
$LN94@ParseAsDec:

; 515  :                 }
; 516  :                 else
; 517  :                 {
; 518  :                 }
; 519  :             }

	jmp	SHORT $LN92@ParseAsDec
$LN91@ParseAsDec:

; 520  :             else
; 521  :             {
; 522  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN97@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+42]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN97@ParseAsDec

; 523  :                 {
; 524  :                     state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 525  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+48]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 526  :                 }

	jmp	SHORT $LN92@ParseAsDec
$LN97@ParseAsDec:

; 527  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN92@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+52]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN92@ParseAsDec

; 528  :                 {
; 529  :                     state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 530  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+60]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx
$LN92@ParseAsDec:

; 531  :                 }
; 532  :                 else
; 533  :                 {
; 534  :                 }
; 535  :             }
; 536  :         }

	jmp	$LN90@ParseAsDec
$LN89@ParseAsDec:

; 537  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 256				; 00000100H
	je	SHORT $LN101@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+10]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN101@ParseAsDec

; 538  :         {
; 539  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+16]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 540  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN103@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+42]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN103@ParseAsDec

; 541  :             {
; 542  :                 state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 543  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+48]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 544  :             }

	jmp	SHORT $LN104@ParseAsDec
$LN103@ParseAsDec:

; 545  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN104@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+52]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN104@ParseAsDec

; 546  :             {
; 547  :                 state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 548  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+60]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx
$LN104@ParseAsDec:

; 549  :             }
; 550  :             else
; 551  :             {
; 552  :             }
; 553  :         }

	jmp	$LN90@ParseAsDec
$LN101@ParseAsDec:

; 554  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN107@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+42]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN107@ParseAsDec

; 555  :         {
; 556  :             state.SIGN = 1;

	mov	BYTE PTR _state$[ebp+8], 1

; 557  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+48]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 558  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 256				; 00000100H
	je	SHORT $LN109@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+10]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN109@ParseAsDec

; 559  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+16]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx
$LN109@ParseAsDec:

; 560  :         }

	jmp	SHORT $LN90@ParseAsDec
$LN107@ParseAsDec:

; 561  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN90@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+52]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN90@ParseAsDec

; 562  :         {
; 563  :             state.SIGN = -1;

	mov	BYTE PTR _state$[ebp+8], -1

; 564  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+60]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 565  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 256				; 00000100H
	je	SHORT $LN90@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+10]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN90@ParseAsDec

; 566  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+16]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx
$LN90@ParseAsDec:

; 567  :         }
; 568  :         else
; 569  :         {
; 570  :         }
; 571  :     }

	jmp	SHORT $LN4@ParseAsDec
$LN87@ParseAsDec:

; 572  :     else
; 573  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsDec
$LN4@ParseAsDec:

; 574  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 2
	je	SHORT $LN113@ParseAsDec

; 575  :         SkipSpace(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_SkipSpace
	add	esp, 4
$LN113@ParseAsDec:

; 576  :     if (*state.IN_PTR != L'\0')

	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	test	eax, eax
	je	SHORT $LN114@ParseAsDec

; 577  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsDec
$LN114@ParseAsDec:

; 578  :     FinalizeParserState(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_FinalizeParserState
	add	esp, 4

; 579  :     // 明示的に負の符号が与えられていた場合は負数、そうではない場合は正数とみなす
; 580  :     *sign = state.SIGN < 0 ? -1 : 1;

	movsx	edx, BYTE PTR _state$[ebp+8]
	test	edx, edx
	jge	SHORT $LN116@ParseAsDec
	mov	DWORD PTR tv627[ebp], -1
	jmp	SHORT $LN117@ParseAsDec
$LN116@ParseAsDec:
	mov	DWORD PTR tv627[ebp], 1
$LN117@ParseAsDec:
	mov	eax, DWORD PTR _sign$[ebp]
	mov	cl, BYTE PTR tv627[ebp]
	mov	BYTE PTR [eax], cl

; 581  :     return (1);

	mov	eax, 1
$LN1@ParseAsDec:

; 582  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN120@ParseAsDec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN120@ParseAsDec:
	DD	1
	DD	$LN119@ParseAsDec
$LN119@ParseAsDec:
	DD	-116					; ffffff8cH
	DD	108					; 0000006cH
	DD	$LN118@ParseAsDec
$LN118@ParseAsDec:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_ParseAsDecimalNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_ParseAsFractionPartNumberSequence PROC

; 195  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@ParseAsFra:

; 196  :     for (;;)
; 197  :     {
; 198  :         if (ParseDecimalDigit(*state->IN_PTR, state->NATIVE_DIGITS) >= 0)

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN5@ParseAsFra

; 199  :         {
; 200  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	dx, WORD PTR [edx]
	mov	WORD PTR [ecx], dx

; 201  :             state->FRAC_PART_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+104], ecx

; 202  :             state->IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx

; 203  :         }

	jmp	SHORT $LN6@ParseAsFra
$LN5@ParseAsFra:

; 204  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit( *state->IN_PTR) >= 0)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 512				; 00000200H
	je	SHORT $LN7@ParseAsFra
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_ParseHexDigit
	add	esp, 4
	test	eax, eax
	jl	SHORT $LN7@ParseAsFra

; 205  :         {
; 206  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [edx], ax

; 207  :             state->FRAC_PART_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+104], edx

; 208  :             state->IN_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], edx

; 209  :         }

	jmp	SHORT $LN6@ParseAsFra
$LN7@ParseAsFra:

; 210  :         else
; 211  :             break;

	jmp	SHORT $LN1@ParseAsFra
$LN6@ParseAsFra:

; 212  :     }

	jmp	$LN4@ParseAsFra
$LN1@ParseAsFra:

; 213  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ParseAsFractionPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_ParseAsIntegerPartNumberSequence PROC

; 170  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@ParseAsInt:

; 171  :     for (;;)
; 172  :     {
; 173  :         if (ParseDecimalDigit(*state->IN_PTR, state->NATIVE_DIGITS) >= 0)

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_ParseDecimalDigit
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN5@ParseAsInt

; 174  :         {
; 175  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	dx, WORD PTR [edx]
	mov	WORD PTR [ecx], dx

; 176  :             state->INT_PART_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+100], ecx

; 177  :             state->IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx

; 178  :         }

	jmp	$LN6@ParseAsInt
$LN5@ParseAsInt:

; 179  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit(*state->IN_PTR) >= 0)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 512				; 00000200H
	je	SHORT $LN7@ParseAsInt
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_ParseHexDigit
	add	esp, 4
	test	eax, eax
	jl	SHORT $LN7@ParseAsInt

; 180  :         {
; 181  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [edx], ax

; 182  :             state->INT_PART_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+100], edx

; 183  :             state->IN_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], edx

; 184  :         }

	jmp	SHORT $LN6@ParseAsInt
$LN7@ParseAsInt:

; 185  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && StartsWith(state->IN_PTR, state->GROUP_SEPARATOR))

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 64					; 00000040H
	je	SHORT $LN9@ParseAsInt
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@ParseAsInt

; 186  :             state->IN_PTR += state->GROUP_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN6@ParseAsInt
$LN9@ParseAsInt:

; 187  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && state->SECONDARY_GROUP_SEPARATOR_LENGTH > 0 && StartsWith(state->IN_PTR, state->SECONDARY_GROUP_SEPARATOR))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 64					; 00000040H
	je	SHORT $LN11@ParseAsInt
	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+96], 0
	jle	SHORT $LN11@ParseAsInt
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 88					; 00000058H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@ParseAsInt

; 188  :             state->IN_PTR += state->SECONDARY_GROUP_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN6@ParseAsInt
$LN11@ParseAsInt:

; 189  :         else
; 190  :             break;

	jmp	SHORT $LN1@ParseAsInt
$LN6@ParseAsInt:

; 191  :     }

	jmp	$LN4@ParseAsInt
$LN1@ParseAsInt:

; 192  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ParseAsIntegerPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_c$ = 8							; size = 2
_ParseHexDigit PROC

; 157  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 158  :     if (c >= L'0' && c <= L'9')

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN2@ParseHexDi
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN2@ParseHexDi

; 159  :         return (c - L'0');

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN1@ParseHexDi
$LN2@ParseHexDi:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	movzx	edx, WORD PTR _c$[ebp]
	cmp	edx, 97					; 00000061H
	jl	SHORT $LN3@ParseHexDi
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN3@ParseHexDi

; 162  :         return (c - L'a' + 10);

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 87					; 00000057H
	jmp	SHORT $LN1@ParseHexDi
$LN3@ParseHexDi:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN4@ParseHexDi
	movzx	edx, WORD PTR _c$[ebp]
	cmp	edx, 70					; 00000046H
	jg	SHORT $LN4@ParseHexDi

; 165  :         return (c - L'A' + 10);

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 55					; 00000037H
	jmp	SHORT $LN1@ParseHexDi
$LN4@ParseHexDi:

; 166  :     return (-1);

	or	eax, -1
$LN1@ParseHexDi:

; 167  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ParseHexDigit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_c$ = 8							; size = 2
_native_digits$ = 12					; size = 4
_ParseDecimalDigit PROC

; 130  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 131  :     if (c >= L'0' && c <= L'9')

	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN2@ParseDecim
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN2@ParseDecim

; 132  :         return (c - L'0');

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	jmp	$LN1@ParseDecim
$LN2@ParseDecim:

; 133  :     if (c == native_digits[0])

	movzx	edx, WORD PTR _c$[ebp]
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _native_digits$[ebp]
	movzx	ecx, WORD PTR [eax+ecx]
	cmp	edx, ecx
	jne	SHORT $LN3@ParseDecim

; 134  :         return (0);

	xor	eax, eax
	jmp	$LN1@ParseDecim
$LN3@ParseDecim:

; 135  :     if (c == native_digits[1])

	movzx	edx, WORD PTR _c$[ebp]
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _native_digits$[ebp]
	movzx	eax, WORD PTR [ecx+eax]
	cmp	edx, eax
	jne	SHORT $LN4@ParseDecim

; 136  :         return (1);

	mov	eax, 1
	jmp	$LN1@ParseDecim
$LN4@ParseDecim:

; 137  :     if (c == native_digits[2])

	movzx	ecx, WORD PTR _c$[ebp]
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _native_digits$[ebp]
	movzx	edx, WORD PTR [eax+edx]
	cmp	ecx, edx
	jne	SHORT $LN5@ParseDecim

; 138  :         return (2);

	mov	eax, 2
	jmp	$LN1@ParseDecim
$LN5@ParseDecim:

; 139  :     if (c == native_digits[3])

	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _native_digits$[ebp]
	movzx	edx, WORD PTR [ecx+edx]
	cmp	eax, edx
	jne	SHORT $LN6@ParseDecim

; 140  :         return (3);

	mov	eax, 3
	jmp	$LN1@ParseDecim
$LN6@ParseDecim:

; 141  :     if (c == native_digits[4])

	movzx	eax, WORD PTR _c$[ebp]
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _native_digits$[ebp]
	movzx	ecx, WORD PTR [edx+ecx]
	cmp	eax, ecx
	jne	SHORT $LN7@ParseDecim

; 142  :         return (4);

	mov	eax, 4
	jmp	$LN1@ParseDecim
$LN7@ParseDecim:

; 143  :     if (c == native_digits[5])

	movzx	edx, WORD PTR _c$[ebp]
	mov	eax, 2
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _native_digits$[ebp]
	movzx	ecx, WORD PTR [eax+ecx]
	cmp	edx, ecx
	jne	SHORT $LN8@ParseDecim

; 144  :         return (5);

	mov	eax, 5
	jmp	SHORT $LN1@ParseDecim
$LN8@ParseDecim:

; 145  :     if (c == native_digits[6])

	movzx	edx, WORD PTR _c$[ebp]
	mov	eax, 2
	imul	ecx, eax, 6
	mov	eax, DWORD PTR _native_digits$[ebp]
	movzx	ecx, WORD PTR [eax+ecx]
	cmp	edx, ecx
	jne	SHORT $LN9@ParseDecim

; 146  :         return (6);

	mov	eax, 6
	jmp	SHORT $LN1@ParseDecim
$LN9@ParseDecim:

; 147  :     if (c == native_digits[7])

	movzx	edx, WORD PTR _c$[ebp]
	mov	eax, 2
	imul	ecx, eax, 7
	mov	eax, DWORD PTR _native_digits$[ebp]
	movzx	ecx, WORD PTR [eax+ecx]
	cmp	edx, ecx
	jne	SHORT $LN10@ParseDecim

; 148  :         return (7);

	mov	eax, 7
	jmp	SHORT $LN1@ParseDecim
$LN10@ParseDecim:

; 149  :     if (c == native_digits[8])

	movzx	edx, WORD PTR _c$[ebp]
	mov	eax, 2
	shl	eax, 3
	mov	ecx, DWORD PTR _native_digits$[ebp]
	movzx	eax, WORD PTR [ecx+eax]
	cmp	edx, eax
	jne	SHORT $LN11@ParseDecim

; 150  :         return (8);

	mov	eax, 8
	jmp	SHORT $LN1@ParseDecim
$LN11@ParseDecim:

; 151  :     if (c == native_digits[9])

	movzx	ecx, WORD PTR _c$[ebp]
	mov	edx, 2
	imul	eax, edx, 9
	mov	edx, DWORD PTR _native_digits$[ebp]
	movzx	eax, WORD PTR [edx+eax]
	cmp	ecx, eax
	jne	SHORT $LN12@ParseDecim

; 152  :         return (9);

	mov	eax, 9
	jmp	SHORT $LN1@ParseDecim
$LN12@ParseDecim:

; 153  :     return (-1);

	or	eax, -1
$LN1@ParseDecim:

; 154  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ParseDecimalDigit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
tv67 = -4						; size = 4
_state$ = 8						; size = 4
_SkipSpace PROC

; 109  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@SkipSpace:

; 110  :     for (;;)
; 111  :     {
; 112  :         switch (*state->IN_PTR)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 9
	jl	SHORT $LN8@SkipSpace
	cmp	DWORD PTR tv67[ebp], 13			; 0000000dH
	jle	SHORT $LN7@SkipSpace
	cmp	DWORD PTR tv67[ebp], 32			; 00000020H
	je	SHORT $LN7@SkipSpace
	jmp	SHORT $LN8@SkipSpace
$LN7@SkipSpace:

; 113  :         {
; 114  :         case L' ':
; 115  :         case L'\t':
; 116  :         case L'\n':
; 117  :         case L'\r':
; 118  :         case L'\f':
; 119  :         case L'\v':
; 120  :             break;

	jmp	SHORT $LN5@SkipSpace
$LN8@SkipSpace:

; 121  : 
; 122  :         default:
; 123  :             return;

	jmp	SHORT $LN1@SkipSpace
$LN5@SkipSpace:

; 124  :         }
; 125  :         state->IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx

; 126  :     }

	jmp	SHORT $LN4@SkipSpace
$LN1@SkipSpace:

; 127  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SkipSpace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_FinalizeParserState PROC

; 101  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 102  :     *state->INT_PART_PTR = L'\0';

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	xor	edx, edx
	mov	WORD PTR [ecx], dx

; 103  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32					; 00000020H
	je	SHORT $LN1@FinalizePa

; 104  :         *state->FRAC_PART_PTR = L'\0';

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+104]
	xor	ecx, ecx
	mov	WORD PTR [eax], cx
$LN1@FinalizePa:

; 105  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FinalizeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
tv144 = -8						; size = 4
tv132 = -4						; size = 4
_state$ = 8						; size = 4
_in_ptr$ = 12						; size = 4
_number_styles$ = 16					; size = 4
_format_option$ = 20					; size = 4
_int_part_buf$ = 24					; size = 4
_frac_part_buf$ = 28					; size = 4
_InitializeParserState PROC

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 71   :     state->IN_PTR = in_ptr;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	mov	DWORD PTR [eax], ecx

; 72   :     state->NUMBER_STYLES = number_styles;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _number_styles$[ebp]
	mov	DWORD PTR [edx+4], eax

; 73   :     state->SIGN = 0;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	BYTE PTR [ecx+8], 0

; 74   :     lstrcpyW(state->CURRENCY_SYMBOL, format_option->CurrencySymbol);

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 140				; 0000008cH
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 10					; 0000000aH
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 75   :     state->CURRENCY_SYMBOL_LENGTH = lstrlenW(state->CURRENCY_SYMBOL);

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 10					; 0000000aH
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+16], eax

; 76   :     lstrcpyW(state->NATIVE_DIGITS, format_option->NativeDigits);

	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 146				; 00000092H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 77   :     lstrcpyW(state->POSITIVE_SIGN, format_option->PositiveSign);

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 174				; 000000aeH
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 42					; 0000002aH
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 78   :     state->POSITIVE_SIGN_LENGTH = lstrlenW(state->POSITIVE_SIGN);

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 42					; 0000002aH
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+48], eax

; 79   :     lstrcpyW(state->NEGATIVE_SIGN, format_option->NegativeSign);

	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 168				; 000000a8H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   :     state->NEGATIVE_SIGN_LENGTH = lstrlenW(state->NEGATIVE_SIGN);

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 52					; 00000034H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 81   :     lstrcpyW(state->DECIMAL_SEPARATOR, number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL ? format_option->Currency.DecimalSeparator : format_option->Number.DecimalSeparator);

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 256				; 00000100H
	je	SHORT $LN5@Initialize
	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 4
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN6@Initialize
$LN5@Initialize:
	mov	ecx, DWORD PTR _format_option$[ebp]
	add	ecx, 58					; 0000003aH
	mov	DWORD PTR tv132[ebp], ecx
$LN6@Initialize:
	mov	esi, esp
	mov	edx, DWORD PTR tv132[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 82   :     state->DECIMAL_SEPARATOR_LENGTH = lstrlenW(state->DECIMAL_SEPARATOR);

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 64					; 00000040H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+72], eax

; 83   :     lstrcpyW(state->GROUP_SEPARATOR, number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL ? format_option->Currency.GroupSeparator: format_option->Number.GroupSeparator);

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 256				; 00000100H
	je	SHORT $LN7@Initialize
	mov	ecx, DWORD PTR _format_option$[ebp]
	add	ecx, 10					; 0000000aH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN8@Initialize
$LN7@Initialize:
	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR tv144[ebp], edx
$LN8@Initialize:
	mov	esi, esp
	mov	eax, DWORD PTR tv144[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 84   :     state->GROUP_SEPARATOR_LENGTH = lstrlenW(state->GROUP_SEPARATOR);

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 76					; 0000004cH
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 85   :     if (state->GROUP_SEPARATOR[0] == L'\xa0' && state->GROUP_SEPARATOR[1] == L'\0')

	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx+eax+76]
	cmp	edx, 160				; 000000a0H
	jne	SHORT $LN2@Initialize
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx+eax+76]
	test	edx, edx
	jne	SHORT $LN2@Initialize

; 86   :     {
; 87   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\x20';

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, 32					; 00000020H
	mov	eax, DWORD PTR _state$[ebp]
	mov	WORD PTR [eax+ecx+88], dx

; 88   :         state->SECONDARY_GROUP_SEPARATOR[1] = L'\0';

	mov	ecx, 2
	shl	ecx, 0
	xor	edx, edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	WORD PTR [eax+ecx+88], dx

; 89   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+96], 1

; 90   :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 91   :     else
; 92   :     {
; 93   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\0';

	mov	edx, 2
	imul	eax, edx, 0
	xor	ecx, ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+eax+88], cx

; 94   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+96], 0
$LN3@Initialize:

; 95   :     }
; 96   :     state->INT_PART_PTR = int_part_buf;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	mov	DWORD PTR [ecx+100], edx

; 97   :     state->FRAC_PART_PTR = frac_part_buf;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	mov	DWORD PTR [eax+104], ecx

; 98   : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_InitializeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_StartsWith PROC

; 58   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@StartsWith:

; 59   :     while (*b != L'\0')

	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@StartsWith

; 60   :     {
; 61   :         if (*a != *b)

	mov	edx, DWORD PTR _a$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _b$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN4@StartsWith

; 62   :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@StartsWith
$LN4@StartsWith:

; 63   :         ++a;

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 2
	mov	DWORD PTR _a$[ebp], eax

; 64   :         ++b;

	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, 2
	mov	DWORD PTR _b$[ebp], ecx

; 65   :     }

	jmp	SHORT $LN2@StartsWith
$LN3@StartsWith:

; 66   :     return (1);

	mov	eax, 1
$LN1@StartsWith:

; 67   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_StartsWith ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC

; 329  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 330  : #ifdef _MSC_VER
; 331  : #ifdef _M_IX86
; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _w_hi$[ebp]
	push	eax
	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]
	push	edx
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH

; 333  : #elif defined(_M_X64)
; 334  :         return (_mulx_u64(u, v, w_hi));
; 335  : #else
; 336  : #error unknown platform
; 337  : #endif
; 338  : #elif defined(__GNUC__)
; 339  : #ifdef _M_IX86
; 340  :         _UINT32_T w_lo;
; 341  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 342  :         return (w_lo);
; 343  : #elif defined(_M_X64)
; 344  :         _UINT64_T w_lo;
; 345  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 346  :         return (w_lo);
; 347  : #else
; 348  : #error unknown platform
; 349  : #endif
; 350  : #else
; 351  : #error unknown compiler
; 352  : #endif
; 353  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC

; 291  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 292  : #ifdef _M_IX86
; 293  : #ifdef _MSC_VER
; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _w_hi$[ebp]
	push	eax
	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]
	push	edx
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH

; 295  : #elif defined(__GNUC__)
; 296  :         _UINT32_T w_lo;
; 297  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 298  :         return (w_lo);
; 299  : #else
; 300  : #error unknown compiler
; 301  : #endif
; 302  : #elif defined(_M_X64)
; 303  :         return (_umul128(u, v, w_hi));
; 304  : #else
; 305  : #error unknown platform
; 306  : #endif
; 307  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC

; 235  :     {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 236  : #ifdef _M_IX86
; 237  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adcx	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 238  : #elif defined(_M_X64)
; 239  :         return (_addcarryx_u64(carry, u, v, w));
; 240  : #else
; 241  : #error unknown platform
; 242  : #endif
; 243  :     }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC

; 207  :     {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 208  : #ifdef _M_IX86
; 209  :         return (_addcarry_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adc	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 210  : #elif defined(_M_X64)
; 211  :         return (_addcarry_u64(carry, u, v, w));
; 212  : #else
; 213  : #error unknown platform
; 214  : #endif
; 215  :     }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_SIZE PROC

; 192  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 193  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 194  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 187  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 188  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 189  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 176  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 179  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 60   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);
; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC

; 359  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 361  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC

; 353  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 355  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC

; 336  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 337  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 338  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC

; 330  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 332  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_no_abs$ = -12						; size = 4
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_PMC_TryParseForSINT@20 PROC

; 1345 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1346 :     PMC_STATUS_CODE result;
; 1347 :     if (source == NULL)

	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN2@PMC_TryPar

; 1348 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_TryPar
$LN2@PMC_TryPar:

; 1349 :     if (o_sign == NULL)

	cmp	DWORD PTR _o_sign$[ebp], 0
	jne	SHORT $LN3@PMC_TryPar

; 1350 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_TryPar
$LN3@PMC_TryPar:

; 1351 :     if (o_abs == NULL)

	cmp	DWORD PTR _o_abs$[ebp], 0
	jne	SHORT $LN4@PMC_TryPar

; 1352 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_TryPar
$LN4@PMC_TryPar:

; 1353 :     if (format_option == NULL)

	cmp	DWORD PTR _format_option$[ebp], 0
	jne	SHORT $LN5@PMC_TryPar

; 1354 :         format_option = &default_number_format_option;

	mov	DWORD PTR _format_option$[ebp], OFFSET _default_number_format_option
$LN5@PMC_TryPar:

; 1355 :     NUMBER_HEADER* no_abs;
; 1356 :     if ((result = PMC_TryParse_Imp(source, number_styles, format_option, o_sign, &no_abs)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o_sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format_option$[ebp]
	push	edx
	mov	eax, DWORD PTR _number_styles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	call	_PMC_TryParse_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_TryPar

; 1357 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN6@PMC_TryPar:

; 1358 :     *o_abs = (PMC_HANDLE_UINT)no_abs;

	mov	edx, DWORD PTR _o_abs$[ebp]
	mov	eax, DWORD PTR _no_abs$[ebp]
	mov	DWORD PTR [edx], eax

; 1359 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_TryPar:

; 1360 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@PMC_TryPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN10@PMC_TryPar:
	DD	1
	DD	$LN9@PMC_TryPar
$LN9@PMC_TryPar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@PMC_TryPar
$LN8@PMC_TryPar:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_PMC_TryParseForSINT@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_o_abs$ = -24						; size = 4
_o_sign$ = -9						; size = 1
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o$ = 20						; size = 4
_PMC_TryParse@16 PROC

; 1322 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1323 :     PMC_STATUS_CODE result;
; 1324 :     if (source == NULL)

	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN2@PMC_TryPar

; 1325 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_TryPar
$LN2@PMC_TryPar:

; 1326 :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN3@PMC_TryPar

; 1327 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_TryPar
$LN3@PMC_TryPar:

; 1328 :     if (format_option == NULL)

	cmp	DWORD PTR _format_option$[ebp], 0
	jne	SHORT $LN4@PMC_TryPar

; 1329 :         format_option = &default_number_format_option;

	mov	DWORD PTR _format_option$[ebp], OFFSET _default_number_format_option
$LN4@PMC_TryPar:

; 1330 :     char o_sign;
; 1331 :     NUMBER_HEADER* o_abs;
; 1332 :     if ((result = PMC_TryParse_Imp(source, number_styles, format_option, &o_sign, &o_abs)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _o_abs$[ebp]
	push	eax
	lea	ecx, DWORD PTR _o_sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format_option$[ebp]
	push	edx
	mov	eax, DWORD PTR _number_styles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	call	_PMC_TryParse_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_TryPar

; 1333 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN5@PMC_TryPar:

; 1334 :     if (o_sign < 0)

	movsx	edx, BYTE PTR _o_sign$[ebp]
	test	edx, edx
	jge	SHORT $LN6@PMC_TryPar

; 1335 :     {
; 1336 :         // 負数は表現できないのでエラーとする
; 1337 :         DeallocateNumber(o_abs);

	mov	eax, DWORD PTR _o_abs$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 1338 :         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@PMC_TryPar
$LN6@PMC_TryPar:

; 1339 :     }
; 1340 :     *o = (PMC_HANDLE_UINT)o_abs;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR _o_abs$[ebp]
	mov	DWORD PTR [ecx], edx

; 1341 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_TryPar:

; 1342 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@PMC_TryPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN11@PMC_TryPar:
	DD	2
	DD	$LN10@PMC_TryPar
$LN10@PMC_TryPar:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN8@PMC_TryPar
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@PMC_TryPar
$LN9@PMC_TryPar:
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN8@PMC_TryPar:
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
_PMC_TryParse@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Parse PROC

; 1363 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1364 :     InitializeNumberFormatoInfo(&default_number_format_option);

	push	OFFSET _default_number_format_option
	call	_InitializeNumberFormatoInfo
	add	esp, 4

; 1365 : 
; 1366 :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)

	mov	eax, DWORD PTR _feature$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@Initialize
	mov	edx, DWORD PTR _feature$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 3
	and	eax, 1
	je	SHORT $LN2@Initialize

; 1367 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;

	mov	DWORD PTR _fp_MultiplyAndAdd, OFFSET _MultiplyAndAdd_using_ADCX_MULX
	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 1368 :     else
; 1369 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;

	mov	DWORD PTR _fp_MultiplyAndAdd, OFFSET _MultiplyAndAdd_using_ADC_MUL
$LN3@Initialize:

; 1370 : 
; 1371 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1372 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Parse ENDP
_TEXT	ENDS
END
