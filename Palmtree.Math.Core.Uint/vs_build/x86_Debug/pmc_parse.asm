; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_parse.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__4CD8546F_pmc_parse@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_Parse
PUBLIC	_PMC_TryParse@16
PUBLIC	__JustMyCode_Default
EXTRN	__imp__lstrcpyA@8:PROC
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_default_number_format_option DB 028H DUP (?)
_fp_MultiplyAndAdd DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG95397 DB	',', 00H, 00H, 00H
$SG95398 DB	'.', 00H, 00H, 00H
$SG95399 DB	'3', 00H
	ORG $+2
$SG95400 DB	'+', 00H, 00H, 00H
$SG95401 DB	'-', 00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_o_light_check_code$ = -52				; size = 4
_o_bit_count$ = -44					; size = 4
_result_parsing$ = -40					; size = 4
_int_part_buf$ = -36					; size = 4
_int_part_buf_words$ = -28				; size = 4
_int_part_buf_code$ = -16				; size = 4
_source_len$ = -8					; size = 4
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o$ = 20						; size = 4
_TryParseX PROC

; 961  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 962  :     PMC_STATUS_CODE result;
; 963  :     __UNIT_TYPE source_len = lstrlenW(source);

	mov	esi, esp
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_len$[ebp], eax

; 964  :     __UNIT_TYPE int_part_buf_code;
; 965  :     __UNIT_TYPE int_part_buf_words;
; 966  :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	ecx, DWORD PTR _int_part_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _source_len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	shl	ecx, 3
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _int_part_buf$[ebp], eax

; 967  :     if (int_part_buf == NULL)

	cmp	DWORD PTR _int_part_buf$[ebp], 0
	jne	SHORT $LN2@TryParseX

; 968  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseX
$LN2@TryParseX:

; 969  :     int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf);

	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	mov	ecx, DWORD PTR _number_styles$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	_ParseAsHexNumberString
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result_parsing$[ebp], eax

; 970  :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _int_part_buf_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@TryParseX

; 971  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseX
$LN3@TryParseX:

; 972  :     if (!result_parsing || int_part_buf[0] == L'\0')

	cmp	DWORD PTR _result_parsing$[ebp], 0
	je	SHORT $LN5@TryParseX
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN4@TryParseX
$LN5@TryParseX:

; 973  :     {
; 974  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 975  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseX
$LN4@TryParseX:

; 976  :     }
; 977  :     __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

	mov	esi, esp
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	shl	eax, 2
	mov	DWORD PTR _o_bit_count$[ebp], eax

; 978  :     __UNIT_TYPE o_light_check_code;
; 979  :     if ((result = AllocateNumber(o, o_bit_count, &o_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _o_light_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o_bit_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@TryParseX

; 980  :     {
; 981  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 982  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@TryParseX
$LN6@TryParseX:

; 983  :     }
; 984  :     BuildBinaryFromHexString(int_part_buf, (*o)->BLOCK);

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	_BuildBinaryFromHexString
	add	esp, 8

; 985  :     if ((result = CheckBlockLight((*o)->BLOCK, o_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o_light_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@TryParseX

; 986  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@TryParseX
$LN7@TryParseX:

; 987  :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	ecx, DWORD PTR _int_part_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 988  :     CommitNumber(*o);

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 989  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@TryParseX:

; 990  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TryParseX
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@TryParseX:
	DD	3
	DD	$LN12@TryParseX
$LN12@TryParseX:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN9@TryParseX
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN10@TryParseX
	DD	-52					; ffffffccH
	DD	4
	DD	$LN11@TryParseX
$LN11@TryParseX:
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN10@TryParseX:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN9@TryParseX:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TryParseX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_r$ = -20						; size = 4
_out_ptr$ = -16						; size = 4
_in_ptr$ = -12						; size = 4
_source_count$ = -8					; size = 4
_word_digit_count$ = -4					; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_BuildBinaryFromHexString PROC

; 940  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 941  :     int word_digit_count = __UNIT_TYPE_BIT_COUNT / 4;

	mov	DWORD PTR _word_digit_count$[ebp], 8

; 942  :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	esi, esp
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_count$[ebp], eax

; 943  :     wchar_t* in_ptr = source;

	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 944  :     __UNIT_TYPE* out_ptr = out_buf + _DIVIDE_CEILING_UNIT(source_count, word_digit_count) - 1;

	mov	edx, DWORD PTR _word_digit_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _source_count$[ebp]
	push	eax
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	mov	ecx, DWORD PTR _out_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR _out_ptr$[ebp], edx

; 945  :     int r = source_count % word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	xor	edx, edx
	div	DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 946  :     if (r > 0)

	cmp	DWORD PTR _r$[ebp], 0
	jle	SHORT $LN2@BuildBinar

; 947  :     {
; 948  :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	push	ecx
	call	_BuildLeading1WordFromHexString
	add	esp, 8
	mov	edx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _out_ptr$[ebp]
	sub	eax, 4
	mov	DWORD PTR _out_ptr$[ebp], eax

; 949  :         in_ptr += r;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _in_ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _in_ptr$[ebp], eax

; 950  :         source_count -= r;

	mov	ecx, DWORD PTR _source_count$[ebp]
	sub	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR _source_count$[ebp], ecx
$LN2@BuildBinar:

; 951  :     }
; 952  :     while (source_count > 0)

	cmp	DWORD PTR _source_count$[ebp], 0
	jbe	SHORT $LN1@BuildBinar

; 953  :     {
; 954  :         *out_ptr-- = Build1WordFromHexString(in_ptr);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	push	edx
	call	_Build1WordFromHexString
	add	esp, 4
	mov	ecx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _out_ptr$[ebp]
	sub	edx, 4
	mov	DWORD PTR _out_ptr$[ebp], edx

; 955  :         in_ptr += word_digit_count;

	mov	eax, DWORD PTR _word_digit_count$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _in_ptr$[ebp], edx

; 956  :         source_count -= word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	sub	eax, DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _source_count$[ebp], eax

; 957  :     }

	jmp	SHORT $LN2@BuildBinar
$LN1@BuildBinar:

; 958  : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildBinaryFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
tv191 = -36						; size = 2
tv184 = -34						; size = 2
tv178 = -32						; size = 2
tv171 = -30						; size = 2
tv165 = -28						; size = 2
tv159 = -26						; size = 2
tv153 = -24						; size = 2
tv146 = -22						; size = 2
tv140 = -20						; size = 2
tv134 = -18						; size = 2
tv128 = -16						; size = 2
tv90 = -14						; size = 2
tv84 = -12						; size = 2
tv78 = -10						; size = 2
tv72 = -8						; size = 2
tv66 = -6						; size = 2
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_Build1WordFromHexString PROC

; 907  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 908  :     __UNIT_TYPE x = Parse1DigitFromHexChar(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv66[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv66[ebp]
	push	eax
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	DWORD PTR _x$[ebp], eax

; 909  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

	xor	ecx, ecx
	je	$LN2@Build1Word

; 910  :     {
; 911  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv72[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv72[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 912  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv78[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv78[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 913  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv84[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv84[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 914  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv90[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv90[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 915  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv128[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv128[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 916  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv134[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv134[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 917  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv140[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv140[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 918  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv146[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv146[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN2@Build1Word:

; 919  :     }
; 920  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	$LN3@Build1Word

; 921  :     {
; 922  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv153[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv153[ebp]
	push	eax
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 923  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv159[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv159[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 924  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv165[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv165[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 925  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv171[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv171[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN3@Build1Word:

; 926  :     }
; 927  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@Build1Word

; 928  :     {
; 929  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv178[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx

; 930  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv184[ebp], ax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
	movzx	edx, WORD PTR tv184[ebp]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN4@Build1Word:

; 931  :     }
; 932  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@Build1Word

; 933  :     {
; 934  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv191[ebp], cx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
	movzx	eax, WORD PTR tv191[ebp]
	push	eax
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	ecx, DWORD PTR _x$[ebp]
	shl	ecx, 4
	add	ecx, eax
	mov	DWORD PTR _x$[ebp], ecx
$LN5@Build1Word:

; 935  :     }
; 936  :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 937  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Build1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
_BuildLeading1WordFromHexString PROC

; 893  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 894  :     __UNIT_TYPE x = Parse1DigitFromHexChar(*in_ptr);

	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	mov	DWORD PTR _x$[ebp], eax

; 895  :     ++in_ptr;

	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 896  :     --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
$LN2@BuildLeadi:

; 897  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@BuildLeadi

; 898  :     {
; 899  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr);

	mov	esi, DWORD PTR _x$[ebp]
	shl	esi, 4
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	push	edx
	call	_Parse1DigitFromHexChar
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _x$[ebp], esi

; 900  :         ++in_ptr;

	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 901  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 902  :     }

	jmp	SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 903  :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 904  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildLeading1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
tv65 = -4						; size = 4
_c$ = 8							; size = 2
_Parse1DigitFromHexChar PROC

; 859  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 860  :     switch (c)

	movzx	eax, WORD PTR _c$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 54			; 00000036H
	ja	SHORT $LN7@Parse1Digi
	mov	edx, DWORD PTR tv65[ebp]
	movzx	eax, BYTE PTR $LN9@Parse1Digi[edx]
	jmp	DWORD PTR $LN10@Parse1Digi[eax*4]
$LN4@Parse1Digi:

; 861  :     {
; 862  :     case L'0':
; 863  :     case L'1':
; 864  :     case L'2':
; 865  :     case L'3':
; 866  :     case L'4':
; 867  :     case L'5':
; 868  :     case L'6':
; 869  :     case L'7':
; 870  :     case L'8':
; 871  :     case L'9':
; 872  :         return (c - L'0');

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN1@Parse1Digi
$LN5@Parse1Digi:

; 873  :     case L'a':
; 874  :     case L'b':
; 875  :     case L'c':
; 876  :     case L'd':
; 877  :     case L'e':
; 878  :     case L'f':
; 879  :         return (c - L'a' + 10);

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 87					; 00000057H
	jmp	SHORT $LN1@Parse1Digi
$LN6@Parse1Digi:

; 880  :     case L'A':
; 881  :     case L'B':
; 882  :     case L'C':
; 883  :     case L'D':
; 884  :     case L'E':
; 885  :     case L'F':
; 886  :         return (c - L'A' + 10);

	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 55					; 00000037H
	jmp	SHORT $LN1@Parse1Digi
$LN7@Parse1Digi:

; 887  :     default:
; 888  :         return ((_UINT32_T)-1);

	or	eax, -1
$LN1@Parse1Digi:

; 889  :     }
; 890  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@Parse1Digi:
	DD	$LN4@Parse1Digi
	DD	$LN6@Parse1Digi
	DD	$LN5@Parse1Digi
	DD	$LN7@Parse1Digi
$LN9@Parse1Digi:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
_Parse1DigitFromHexChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_no_light_check_code$ = -148				; size = 4
_o_bit_count$ = -140					; size = 4
_bin_buf_count$ = -132					; size = 4
_bin_buf$ = -124					; size = 4
_bin_buf_words$ = -116					; size = 4
_bin_buf_code$ = -104					; size = 4
_frac_ptr$ = -96					; size = 4
_d_ptr$1 = -92						; size = 4
_s_ptr$2 = -88						; size = 4
_result_parsing$ = -84					; size = 4
_sign$ = -76						; size = 4
_frac_part_buf$ = -68					; size = 4
_frac_part_buf_words$ = -60				; size = 4
_frac_part_buf_code$ = -48				; size = 4
_int_part_buf$ = -40					; size = 4
_int_part_buf_words$ = -32				; size = 4
_int_part_buf_code$ = -20				; size = 4
_source_len$ = -12					; size = 4
_word_digit_count$ = -8					; size = 4
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o$ = 20						; size = 4
_TryParseDN PROC

; 715  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-152]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 716  :     PMC_STATUS_CODE result;
; 717  : #ifdef _M_IX86
; 718  :     int word_digit_count = 9;

	mov	DWORD PTR _word_digit_count$[ebp], 9

; 719  : #elif defined(_M_IX64)
; 720  :     int word_digit_count = 19;
; 721  : #else
; 722  : #error unknown platform
; 723  : #endif
; 724  :     __UNIT_TYPE source_len = lstrlenW(source);

	mov	esi, esp
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_len$[ebp], eax

; 725  : 
; 726  :     __UNIT_TYPE int_part_buf_code;
; 727  :     __UNIT_TYPE int_part_buf_words;
; 728  :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	ecx, DWORD PTR _int_part_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _source_len$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	shl	ecx, 3
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _int_part_buf$[ebp], eax

; 729  :     if (int_part_buf == NULL)

	cmp	DWORD PTR _int_part_buf$[ebp], 0
	jne	SHORT $LN9@TryParseDN

; 730  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseDN
$LN9@TryParseDN:

; 731  : 
; 732  :     __UNIT_TYPE frac_part_buf_code;
; 733  :     __UNIT_TYPE frac_part_buf_words;
; 734  :     wchar_t* frac_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &frac_part_buf_words, &frac_part_buf_code);

	lea	edx, DWORD PTR _frac_part_buf_code$[ebp]
	push	edx
	lea	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source_len$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	shl	edx, 3
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _frac_part_buf$[ebp], eax

; 735  :     if (frac_part_buf == NULL)

	cmp	DWORD PTR _frac_part_buf$[ebp], 0
	jne	SHORT $LN10@TryParseDN

; 736  :     {
; 737  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 738  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseDN
$LN10@TryParseDN:

; 739  :     }
; 740  :     int sign;
; 741  :     int result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, &sign, int_part_buf, frac_part_buf);

	mov	edx, DWORD PTR _frac_part_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format_option$[ebp]
	push	edx
	mov	eax, DWORD PTR _number_styles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	call	_ParseAsDecimalNumberString
	add	esp, 24					; 00000018H
	mov	DWORD PTR _result_parsing$[ebp], eax

; 742  :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _int_part_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@TryParseDN

; 743  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN11@TryParseDN:

; 744  :     if ((result = CheckBlockLight((__UNIT_TYPE*)frac_part_buf, frac_part_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _frac_part_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _frac_part_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@TryParseDN

; 745  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN12@TryParseDN:

; 746  :     if (!result_parsing)

	cmp	DWORD PTR _result_parsing$[ebp], 0
	jne	SHORT $LN13@TryParseDN

; 747  :     {
; 748  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 749  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 750  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN13@TryParseDN:

; 751  :     }
; 752  :     // 整数部と小数部がともに空ならばエラーとする
; 753  :     if (int_part_buf[0] == L'\0' && frac_part_buf[0] == L'\0')

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN14@TryParseDN
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN14@TryParseDN

; 754  :     {
; 755  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 756  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 757  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN14@TryParseDN:

; 758  :     }
; 759  : 
; 760  :     if (int_part_buf[0] == L'0')

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN15@TryParseDN

; 761  :     {
; 762  :         // 整数部の先行する 0 を削除する
; 763  :         wchar_t* s_ptr = int_part_buf;

	mov	edx, DWORD PTR _int_part_buf$[ebp]
	mov	DWORD PTR _s_ptr$2[ebp], edx

; 764  :         wchar_t* d_ptr = int_part_buf;

	mov	eax, DWORD PTR _int_part_buf$[ebp]
	mov	DWORD PTR _d_ptr$1[ebp], eax
$LN2@TryParseDN:

; 765  :         while (*s_ptr == L'0')

	mov	ecx, DWORD PTR _s_ptr$2[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 48					; 00000030H
	jne	SHORT $LN6@TryParseDN

; 766  :             ++s_ptr;

	mov	eax, DWORD PTR _s_ptr$2[ebp]
	add	eax, 2
	mov	DWORD PTR _s_ptr$2[ebp], eax
	jmp	SHORT $LN2@TryParseDN
$LN6@TryParseDN:

; 767  :         for (;;)
; 768  :         {
; 769  :             *d_ptr = *s_ptr;

	mov	ecx, DWORD PTR _d_ptr$1[ebp]
	mov	edx, DWORD PTR _s_ptr$2[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax

; 770  :             if (*s_ptr == L'\0')

	mov	ecx, DWORD PTR _s_ptr$2[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	jne	SHORT $LN16@TryParseDN

; 771  :                 break;

	jmp	SHORT $LN15@TryParseDN
$LN16@TryParseDN:

; 772  :             ++s_ptr;

	mov	eax, DWORD PTR _s_ptr$2[ebp]
	add	eax, 2
	mov	DWORD PTR _s_ptr$2[ebp], eax

; 773  :             ++d_ptr;

	mov	ecx, DWORD PTR _d_ptr$1[ebp]
	add	ecx, 2
	mov	DWORD PTR _d_ptr$1[ebp], ecx

; 774  :         }

	jmp	SHORT $LN6@TryParseDN
$LN15@TryParseDN:

; 775  :     }
; 776  : 
; 777  :     // 小数部の末尾の 0 を削除する
; 778  :     wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

	mov	esi, esp
	mov	edx, DWORD PTR _frac_part_buf$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _frac_ptr$[ebp], edx
$LN7@TryParseDN:

; 779  :     while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

	mov	eax, DWORD PTR _frac_ptr$[ebp]
	cmp	eax, DWORD PTR _frac_part_buf$[ebp]
	jbe	SHORT $LN8@TryParseDN
	mov	ecx, 2
	imul	edx, ecx, -1
	mov	eax, DWORD PTR _frac_ptr$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN8@TryParseDN

; 780  :         --frac_ptr;

	mov	edx, DWORD PTR _frac_ptr$[ebp]
	sub	edx, 2
	mov	DWORD PTR _frac_ptr$[ebp], edx
	jmp	SHORT $LN7@TryParseDN
$LN8@TryParseDN:

; 781  :     *frac_ptr = L'\0';

	xor	eax, eax
	mov	ecx, DWORD PTR _frac_ptr$[ebp]
	mov	WORD PTR [ecx], ax

; 782  : 
; 783  :     // 小数部が 0 ではない場合、エラーとする
; 784  :     if (frac_part_buf[0] != L'\0')

	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	movzx	edx, WORD PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN17@TryParseDN

; 785  :     {
; 786  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	eax, DWORD PTR _frac_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 787  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 788  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN17@TryParseDN:

; 789  :     }
; 790  : 
; 791  :     if (sign < 0)

	cmp	DWORD PTR _sign$[ebp], 0
	jge	SHORT $LN18@TryParseDN

; 792  :     {
; 793  :         if (int_part_buf[0] == L'\0')

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	movzx	ecx, WORD PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN19@TryParseDN

; 794  :         {
; 795  :             // - 符号が与えられていてかつ整数部が 0 であるなら符号を修正する
; 796  :             sign = 0;

	mov	DWORD PTR _sign$[ebp], 0

; 797  :         }

	jmp	SHORT $LN18@TryParseDN
$LN19@TryParseDN:

; 798  :         else
; 799  :         {
; 800  :             // - 符号が与えられていてかつ整数部が 0 ではないなら、エラーとする
; 801  :             DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	edx, DWORD PTR _frac_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _frac_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 802  :             DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	ecx, DWORD PTR _int_part_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 803  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@TryParseDN
$LN18@TryParseDN:

; 804  :         }
; 805  :     }
; 806  : 
; 807  :     // 整数部が空である場合、1桁の 0 を設定する
; 808  :     if (int_part_buf[0] == L'\0')

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN21@TryParseDN

; 809  :     {
; 810  :         int_part_buf[0] = L'0';

	mov	ecx, 2
	imul	edx, ecx, 0
	mov	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	mov	WORD PTR [ecx+edx], ax

; 811  :         int_part_buf[1] = L'\0';

	mov	edx, 2
	shl	edx, 0
	xor	eax, eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	mov	WORD PTR [ecx+edx], ax
$LN21@TryParseDN:

; 812  :     }
; 813  : 
; 814  :     // 小数部は捨てる
; 815  :     DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	edx, DWORD PTR _frac_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _frac_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 816  : 
; 817  :     __UNIT_TYPE bin_buf_code;
; 818  :     __UNIT_TYPE bin_buf_words;
; 819  :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	lea	ecx, DWORD PTR _bin_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bin_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _word_digit_count$[ebp]
	push	eax
	mov	esi, esp
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	__DIVIDE_CEILING_SIZE
	add	esp, 8
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bin_buf$[ebp], eax

; 820  :     if (bin_buf == NULL)

	cmp	DWORD PTR _bin_buf$[ebp], 0
	jne	SHORT $LN22@TryParseDN

; 821  :     {
; 822  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	edx, DWORD PTR _int_part_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 823  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@TryParseDN
$LN22@TryParseDN:

; 824  :     }
; 825  :     __UNIT_TYPE bin_buf_count;
; 826  :     BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);

	lea	ecx, DWORD PTR _bin_buf_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bin_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	call	_BuildBinaryFromDecimalString
	add	esp, 12					; 0000000cH

; 827  :     if ((result = CheckBlockLight(bin_buf, bin_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _bin_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bin_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@TryParseDN

; 828  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN23@TryParseDN:

; 829  :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	eax, DWORD PTR _int_part_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 830  : 
; 831  :     __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;

	mov	edx, DWORD PTR _bin_buf_count$[ebp]
	shl	edx, 5
	mov	DWORD PTR _o_bit_count$[ebp], edx

; 832  :     __UNIT_TYPE no_light_check_code;
; 833  :     if ((result = AllocateNumber(o, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no_light_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o_bit_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@TryParseDN

; 834  :     {
; 835  :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	eax, DWORD PTR _bin_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bin_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 836  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@TryParseDN
$LN24@TryParseDN:

; 837  :     }
; 838  : 
; 839  :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o)->BLOCK)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _bin_buf_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _bin_buf$[ebp]
	push	eax
	call	_ConvertCardinalNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN25@TryParseDN

; 840  :     {
; 841  :         DeallocateNumber(*o);

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 842  :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	eax, DWORD PTR _bin_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bin_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 843  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@TryParseDN
$LN25@TryParseDN:

; 844  :     }
; 845  :     if ((result = CheckBlockLight((*o)->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _no_light_check_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@TryParseDN

; 846  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@TryParseDN
$LN26@TryParseDN:

; 847  :     DeallocateBlock(bin_buf, bin_buf_words);

	mov	eax, DWORD PTR _bin_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bin_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 848  :     CommitNumber(*o);

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CommitNumber
	add	esp, 4

; 849  :     if ((*o)->IS_ZERO)

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	shr	eax, 1
	and	eax, 1
	je	SHORT $LN27@TryParseDN

; 850  :     {
; 851  :         DeallocateNumber(*o);

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 852  :         *o = &number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
$LN27@TryParseDN:

; 853  :     }
; 854  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@TryParseDN:

; 855  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@TryParseDN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 152				; 00000098H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN39@TryParseDN:
	DD	9
	DD	$LN38@TryParseDN
$LN38@TryParseDN:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN29@TryParseDN
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN30@TryParseDN
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN31@TryParseDN
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN32@TryParseDN
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN33@TryParseDN
	DD	-104					; ffffff98H
	DD	4
	DD	$LN34@TryParseDN
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN35@TryParseDN
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN36@TryParseDN
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN37@TryParseDN
$LN37@TryParseDN:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN36@TryParseDN:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN35@TryParseDN:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN34@TryParseDN:
	DB	98					; 00000062H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN33@TryParseDN:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN32@TryParseDN:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN31@TryParseDN:
	DB	102					; 00000066H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN30@TryParseDN:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN29@TryParseDN:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TryParseDN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_w_tail$1 = -40						; size = 4
_work_buf_count$ = -36					; size = 4
_work_buf$ = -32					; size = 4
_work_buf_words$ = -24					; size = 4
_work_buf_code$ = -12					; size = 4
_result$ = -4						; size = 4
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_ConvertCardinalNumber PROC

; 687  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 688  :     PMC_STATUS_CODE result;
; 689  :     __UNIT_TYPE work_buf_code;
; 690  :     __UNIT_TYPE work_buf_words;
; 691  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	lea	eax, DWORD PTR _work_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _work_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in_buf_count$[ebp]
	add	edx, 1
	shl	edx, 5
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf$[ebp], eax

; 692  :     if (work_buf == NULL)

	cmp	DWORD PTR _work_buf$[ebp], 0
	jne	SHORT $LN4@ConvertCar

; 693  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ConvertCar
$LN4@ConvertCar:

; 694  : 
; 695  :     __UNIT_TYPE work_buf_count = 1;

	mov	DWORD PTR _work_buf_count$[ebp], 1

; 696  :     work_buf[0] = in_buf[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _work_buf$[ebp]
	mov	esi, DWORD PTR _in_buf$[ebp]
	mov	ecx, DWORD PTR [esi+ecx]
	mov	DWORD PTR [edx+eax], ecx

; 697  :     ++in_buf;

	mov	edx, DWORD PTR _in_buf$[ebp]
	add	edx, 4
	mov	DWORD PTR _in_buf$[ebp], edx

; 698  :     --in_buf_count;

	mov	eax, DWORD PTR _in_buf_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _in_buf_count$[ebp], eax
$LN2@ConvertCar:

; 699  : 
; 700  :     while (in_buf_count > 0)

	cmp	DWORD PTR _in_buf_count$[ebp], 0
	jbe	SHORT $LN3@ConvertCar

; 701  :     {
; 702  :         __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

	mov	esi, esp
	mov	ecx, DWORD PTR _in_buf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _work_buf_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_buf$[ebp]
	push	ecx
	call	DWORD PTR _fp_MultiplyAndAdd
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_tail$1[ebp], eax

; 703  :         work_buf_count = w_tail - work_buf;

	mov	edx, DWORD PTR _w_tail$1[ebp]
	sub	edx, DWORD PTR _work_buf$[ebp]
	sar	edx, 2
	mov	DWORD PTR _work_buf_count$[ebp], edx

; 704  :         ++in_buf;

	mov	eax, DWORD PTR _in_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _in_buf$[ebp], eax

; 705  :         --in_buf_count;

	mov	ecx, DWORD PTR _in_buf_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _in_buf_count$[ebp], ecx

; 706  :     }

	jmp	SHORT $LN2@ConvertCar
$LN3@ConvertCar:

; 707  :     if ((result = CheckBlockLight(work_buf, work_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@ConvertCar

; 708  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@ConvertCar
$LN5@ConvertCar:

; 709  :     _COPY_MEMORY_UNIT(out_buf, work_buf, work_buf_count);

	mov	ecx, DWORD PTR _work_buf_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _out_buf$[ebp]
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 710  :     DeallocateBlock(work_buf, work_buf_words);

	mov	ecx, DWORD PTR _work_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 711  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@ConvertCar:

; 712  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ConvertCar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@ConvertCar:
	DD	2
	DD	$LN9@ConvertCar
$LN9@ConvertCar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@ConvertCar
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@ConvertCar
$LN8@ConvertCar:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN7@ConvertCar:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ConvertCardinalNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
_MultiplyAndAdd_using_ADCX_MULX PROC

; 544  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 545  :     __UNIT_TYPE k = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _k$[ebp], eax

; 546  :     __UNIT_TYPE count = u_count >> 5;

	mov	ecx, DWORD PTR _u_count$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _count$[ebp], ecx
$LN2@MultiplyAn:

; 547  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN3@MultiplyAn

; 548  :     {
; 549  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 550  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 551  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 552  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 553  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 554  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 555  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	edx, 4
	imul	eax, edx, 6
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 556  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	eax, 4
	imul	ecx, eax, 7
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 557  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 558  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 559  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	ecx, 4
	imul	edx, ecx, 10
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 560  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	edx, 4
	imul	eax, edx, 11
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 561  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 562  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	ecx, 4
	imul	edx, ecx, 13
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 563  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	edx, 4
	imul	eax, edx, 14
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 564  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 565  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[16], &u_buf[16]);

	mov	ecx, 4
	shl	ecx, 4
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 4
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 566  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[17], &u_buf[17]);

	mov	eax, 4
	imul	ecx, eax, 17
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 17
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 567  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[18], &u_buf[18]);

	mov	ecx, 4
	imul	edx, ecx, 18
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 568  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[19], &u_buf[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 569  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[20], &u_buf[20]);

	mov	eax, 4
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 20
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 570  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[21], &u_buf[21]);

	mov	ecx, 4
	imul	edx, ecx, 21
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 571  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[22], &u_buf[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 572  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[23], &u_buf[23]);

	mov	eax, 4
	imul	ecx, eax, 23
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 23
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 573  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[24], &u_buf[24]);

	mov	ecx, 4
	imul	edx, ecx, 24
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 574  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[25], &u_buf[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 575  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[26], &u_buf[26]);

	mov	eax, 4
	imul	ecx, eax, 26
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 26
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 576  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[27], &u_buf[27]);

	mov	ecx, 4
	imul	edx, ecx, 27
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 577  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[28], &u_buf[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 578  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[29], &u_buf[29]);

	mov	eax, 4
	imul	ecx, eax, 29
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 29
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 579  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[30], &u_buf[30]);

	mov	ecx, 4
	imul	edx, ecx, 30
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 580  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[31], &u_buf[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 581  :         u_buf += 32;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _u_buf$[ebp], eax

; 582  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 583  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 584  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@MultiplyAn

; 585  :             AddToMULTI32Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN5@MultiplyAn
$LN4@MultiplyAn:

; 586  :         else
; 587  :             AddToMULTI64Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN5@MultiplyAn:

; 588  : #endif
; 589  :     }

	jmp	$LN2@MultiplyAn
$LN3@MultiplyAn:

; 590  : 
; 591  :     if (u_count & 0x10)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 16					; 00000010H
	je	$LN6@MultiplyAn

; 592  :     {
; 593  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 594  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 595  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 596  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 597  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 598  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 599  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 600  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 601  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 602  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 603  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 604  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 605  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 606  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 607  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 608  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 609  :         u_buf += 16;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _u_buf$[ebp], eax

; 610  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 611  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@MultiplyAn

; 612  :             AddToMULTI32Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN6@MultiplyAn
$LN7@MultiplyAn:

; 613  :         else
; 614  :             AddToMULTI64Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN6@MultiplyAn:

; 615  : #endif
; 616  :     }
; 617  : 
; 618  :     if (u_count & 0x8)

	mov	edx, DWORD PTR _u_count$[ebp]
	and	edx, 8
	je	$LN9@MultiplyAn

; 619  :     {
; 620  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 621  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 622  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 623  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	edx, 4
	imul	eax, edx, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 624  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 625  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	edx, 4
	imul	eax, edx, 5
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 626  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 627  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 628  :         u_buf += 8;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _u_buf$[ebp], edx

; 629  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 630  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@MultiplyAn

; 631  :             AddToMULTI32Counter(8);

	push	8
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN9@MultiplyAn
$LN10@MultiplyAn:

; 632  :         else
; 633  :             AddToMULTI64Counter(8);

	push	8
	call	_AddToMULTI64Counter
	add	esp, 4
$LN9@MultiplyAn:

; 634  : #endif
; 635  :     }
; 636  : 
; 637  :     if (u_count & 0x4)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 4
	je	$LN12@MultiplyAn

; 638  :     {
; 639  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 640  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 641  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 642  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 643  :         u_buf += 4;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _u_buf$[ebp], edx

; 644  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 645  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN13@MultiplyAn

; 646  :             AddToMULTI32Counter(4);

	push	4
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN12@MultiplyAn
$LN13@MultiplyAn:

; 647  :         else
; 648  :             AddToMULTI64Counter(4);

	push	4
	call	_AddToMULTI64Counter
	add	esp, 4
$LN12@MultiplyAn:

; 649  : #endif
; 650  :     }
; 651  : 
; 652  :     if (u_count & 0x2)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 2
	je	SHORT $LN15@MultiplyAn

; 653  :     {
; 654  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 655  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 656  :         u_buf += 2;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 8
	mov	DWORD PTR _u_buf$[ebp], edx

; 657  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 658  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN16@MultiplyAn

; 659  :             AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN15@MultiplyAn
$LN16@MultiplyAn:

; 660  :         else
; 661  :             AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
$LN15@MultiplyAn:

; 662  : #endif
; 663  :     }
; 664  : 
; 665  :     if (u_count & 0x1)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 1
	je	SHORT $LN18@MultiplyAn

; 666  :     {
; 667  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADCX_MULX
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 668  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax

; 669  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 670  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@MultiplyAn

; 671  :             IncrementMULTI32Counter();

	call	_IncrementMULTI32Counter
	jmp	SHORT $LN18@MultiplyAn
$LN19@MultiplyAn:

; 672  :         else
; 673  :             IncrementMULTI64Counter();

	call	_IncrementMULTI64Counter
$LN18@MultiplyAn:

; 674  : #endif
; 675  :     }
; 676  : 
; 677  :     if (k > 0)

	cmp	DWORD PTR _k$[ebp], 0
	jbe	SHORT $LN21@MultiplyAn

; 678  :     {
; 679  :         u_buf[0] = k;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 680  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax
$LN21@MultiplyAn:

; 681  :     }
; 682  : 
; 683  :     return (u_buf);

	mov	eax, DWORD PTR _u_buf$[ebp]

; 684  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MultiplyAndAdd_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
_MultiplyAndAdd_using_ADC_MUL PROC

; 401  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 402  :     __UNIT_TYPE k = x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _k$[ebp], eax

; 403  :     __UNIT_TYPE count = u_count >> 5;

	mov	ecx, DWORD PTR _u_count$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _count$[ebp], ecx
$LN2@MultiplyAn:

; 404  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN3@MultiplyAn

; 405  :     {
; 406  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 407  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 408  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 409  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 410  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 411  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 412  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	edx, 4
	imul	eax, edx, 6
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 413  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	eax, 4
	imul	ecx, eax, 7
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 414  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 415  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 416  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

	mov	ecx, 4
	imul	edx, ecx, 10
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 417  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

	mov	edx, 4
	imul	eax, edx, 11
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 418  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 419  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

	mov	ecx, 4
	imul	edx, ecx, 13
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 420  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

	mov	edx, 4
	imul	eax, edx, 14
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 421  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 422  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[16], &u_buf[16]);

	mov	ecx, 4
	shl	ecx, 4
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 4
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 423  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[17], &u_buf[17]);

	mov	eax, 4
	imul	ecx, eax, 17
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 17
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 424  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[18], &u_buf[18]);

	mov	ecx, 4
	imul	edx, ecx, 18
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 425  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[19], &u_buf[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 426  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[20], &u_buf[20]);

	mov	eax, 4
	imul	ecx, eax, 20
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 20
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 427  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[21], &u_buf[21]);

	mov	ecx, 4
	imul	edx, ecx, 21
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 428  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[22], &u_buf[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 429  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[23], &u_buf[23]);

	mov	eax, 4
	imul	ecx, eax, 23
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 23
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 430  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[24], &u_buf[24]);

	mov	ecx, 4
	imul	edx, ecx, 24
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 431  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[25], &u_buf[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 432  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[26], &u_buf[26]);

	mov	eax, 4
	imul	ecx, eax, 26
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 26
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 433  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[27], &u_buf[27]);

	mov	ecx, 4
	imul	edx, ecx, 27
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 434  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[28], &u_buf[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 435  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[29], &u_buf[29]);

	mov	eax, 4
	imul	ecx, eax, 29
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 29
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 436  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[30], &u_buf[30]);

	mov	ecx, 4
	imul	edx, ecx, 30
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 437  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[31], &u_buf[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 438  :         u_buf += 32;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _u_buf$[ebp], eax

; 439  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 440  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 441  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@MultiplyAn

; 442  :             AddToMULTI32Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN5@MultiplyAn
$LN4@MultiplyAn:

; 443  :         else
; 444  :             AddToMULTI64Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN5@MultiplyAn:

; 445  : #endif
; 446  :     }

	jmp	$LN2@MultiplyAn
$LN3@MultiplyAn:

; 447  : 
; 448  :     if (u_count & 0x10)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 16					; 00000010H
	je	$LN6@MultiplyAn

; 449  :     {
; 450  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 451  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 452  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 453  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 454  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 455  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 456  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 457  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 458  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 459  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 460  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 461  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 462  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 463  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 464  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 465  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 466  :         u_buf += 16;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _u_buf$[ebp], eax

; 467  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 468  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@MultiplyAn

; 469  :             AddToMULTI32Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN6@MultiplyAn
$LN7@MultiplyAn:

; 470  :         else
; 471  :             AddToMULTI64Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI64Counter
	add	esp, 4
$LN6@MultiplyAn:

; 472  : #endif
; 473  :     }
; 474  : 
; 475  :     if (u_count & 0x8)

	mov	edx, DWORD PTR _u_count$[ebp]
	and	edx, 8
	je	$LN9@MultiplyAn

; 476  :     {
; 477  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 478  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 479  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 480  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	edx, 4
	imul	eax, edx, 3
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 481  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 482  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

	mov	edx, 4
	imul	eax, edx, 5
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 483  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 484  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

	mov	ecx, 4
	imul	edx, ecx, 7
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 485  :         u_buf += 8;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _u_buf$[ebp], edx

; 486  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 487  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN10@MultiplyAn

; 488  :             AddToMULTI32Counter(8);

	push	8
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN9@MultiplyAn
$LN10@MultiplyAn:

; 489  :         else
; 490  :             AddToMULTI64Counter(8);

	push	8
	call	_AddToMULTI64Counter
	add	esp, 4
$LN9@MultiplyAn:

; 491  : #endif
; 492  :     }
; 493  : 
; 494  :     if (u_count & 0x4)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 4
	je	$LN12@MultiplyAn

; 495  :     {
; 496  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 497  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 498  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

	mov	edx, 4
	shl	edx, 1
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 499  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

	mov	ecx, 4
	imul	edx, ecx, 3
	add	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 500  :         u_buf += 4;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _u_buf$[ebp], edx

; 501  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 502  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN13@MultiplyAn

; 503  :             AddToMULTI32Counter(4);

	push	4
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN12@MultiplyAn
$LN13@MultiplyAn:

; 504  :         else
; 505  :             AddToMULTI64Counter(4);

	push	4
	call	_AddToMULTI64Counter
	add	esp, 4
$LN12@MultiplyAn:

; 506  : #endif
; 507  :     }
; 508  : 
; 509  :     if (u_count & 0x2)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 2
	je	SHORT $LN15@MultiplyAn

; 510  :     {
; 511  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 512  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	push	ecx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 513  :         u_buf += 2;

	mov	edx, DWORD PTR _u_buf$[ebp]
	add	edx, 8
	mov	DWORD PTR _u_buf$[ebp], edx

; 514  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 515  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN16@MultiplyAn

; 516  :             AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
	jmp	SHORT $LN15@MultiplyAn
$LN16@MultiplyAn:

; 517  :         else
; 518  :             AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
$LN15@MultiplyAn:

; 519  : #endif
; 520  :     }
; 521  : 
; 522  :     if (u_count & 0x1)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 1
	je	SHORT $LN18@MultiplyAn

; 523  :     {
; 524  :         k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	call	_MultiplyAndAdd1Word_using_ADC_MUL
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _k$[ebp], eax

; 525  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax

; 526  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 527  :         if (sizeof(k) == sizeof(_UINT32_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@MultiplyAn

; 528  :             IncrementMULTI32Counter();

	call	_IncrementMULTI32Counter
	jmp	SHORT $LN18@MultiplyAn
$LN19@MultiplyAn:

; 529  :         else
; 530  :             IncrementMULTI64Counter();

	call	_IncrementMULTI64Counter
$LN18@MultiplyAn:

; 531  : #endif
; 532  :     }
; 533  : 
; 534  :     if (k > 0)

	cmp	DWORD PTR _k$[ebp], 0
	jbe	SHORT $LN21@MultiplyAn

; 535  :     {
; 536  :         u_buf[0] = k;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u_buf$[ebp]
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 537  :         u_buf += 1;

	mov	eax, DWORD PTR _u_buf$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_buf$[ebp], eax
$LN21@MultiplyAn:

; 538  :     }
; 539  : 
; 540  :     return (u_buf);

	mov	eax, DWORD PTR _u_buf$[ebp]

; 541  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MultiplyAndAdd_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_t_lo$ = -20						; size = 4
_t_hi$ = -12						; size = 4
_base_value$ = -4					; size = 4
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
_MultiplyAndAdd1Word_using_ADCX_MULX PROC

; 386  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 387  : #ifdef _M_IX86
; 388  :     __UNIT_TYPE base_value = 1000000000U; // 10^9

	mov	DWORD PTR _base_value$[ebp], 1000000000	; 3b9aca00H

; 389  : #elif defined(_M_IX64)
; 390  :     __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19
; 391  : #else
; 392  : #error unknown platform
; 393  : #endif
; 394  :     __UNIT_TYPE t_hi;
; 395  :     __UNIT_TYPE t_lo = _MULTIPLYX_UNIT(u, base_value, &t_hi);

	lea	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base_value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	__MULTIPLYX_UNIT
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_lo$[ebp], eax

; 396  :     _ADDX_UNIT(_ADDX_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t_lo$[ebp]
	push	ecx
	push	0
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H
	movzx	edx, al
	push	edx
	call	__ADDX_UNIT
	add	esp, 16					; 00000010H

; 397  :     return (k);

	mov	eax, DWORD PTR _k$[ebp]

; 398  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MultiplyAn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@MultiplyAn:
	DD	1
	DD	$LN4@MultiplyAn
$LN4@MultiplyAn:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@MultiplyAn
$LN3@MultiplyAn:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_MultiplyAndAdd1Word_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_t_lo$ = -20						; size = 4
_t_hi$ = -12						; size = 4
_base_value$ = -4					; size = 4
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
_MultiplyAndAdd1Word_using_ADC_MUL PROC

; 371  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 372  : #ifdef _M_IX86
; 373  :     __UNIT_TYPE base_value = 1000000000U; // 10^9

	mov	DWORD PTR _base_value$[ebp], 1000000000	; 3b9aca00H

; 374  : #elif defined(_M_IX64)
; 375  :     __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19
; 376  : #else
; 377  : #error unknown platform
; 378  : #endif
; 379  :     __UNIT_TYPE t_hi;
; 380  :     __UNIT_TYPE t_lo = _MULTIPLY_UNIT(u, base_value, &t_hi);

	lea	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base_value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	__MULTIPLY_UNIT
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_lo$[ebp], eax

; 381  :     _ADD_UNIT(_ADD_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _k$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t_lo$[ebp]
	push	ecx
	push	0
	call	__ADD_UNIT
	add	esp, 16					; 00000010H
	movzx	edx, al
	push	edx
	call	__ADD_UNIT
	add	esp, 16					; 00000010H

; 382  :     return (k);

	mov	eax, DWORD PTR _k$[ebp]

; 383  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MultiplyAn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@MultiplyAn:
	DD	1
	DD	$LN4@MultiplyAn
$LN4@MultiplyAn:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@MultiplyAn
$LN3@MultiplyAn:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_MultiplyAndAdd1Word_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_r$ = -20						; size = 4
_source_count$ = -16					; size = 4
_out_ptr$ = -12						; size = 4
_in_ptr$ = -8						; size = 4
_word_digit_count$ = -4					; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_out_buf_count$ = 16					; size = 4
_BuildBinaryFromDecimalString PROC

; 343  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 344  : #ifdef _M_IX86
; 345  :     int word_digit_count = 9;

	mov	DWORD PTR _word_digit_count$[ebp], 9

; 346  : #elif defined(_M_IX64)
; 347  :     int word_digit_count = 19;
; 348  : #else
; 349  : #error unknown platform
; 350  : #endif
; 351  :     wchar_t* in_ptr = source;

	mov	eax, DWORD PTR _source$[ebp]
	mov	DWORD PTR _in_ptr$[ebp], eax

; 352  :     __UNIT_TYPE* out_ptr = out_buf;

	mov	ecx, DWORD PTR _out_buf$[ebp]
	mov	DWORD PTR _out_ptr$[ebp], ecx

; 353  :     __UNIT_TYPE source_count = lstrlenW(source);

	mov	esi, esp
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _source_count$[ebp], eax

; 354  :     int r = source_count % word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	xor	edx, edx
	div	DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _r$[ebp], edx

; 355  :     if (r > 0)

	cmp	DWORD PTR _r$[ebp], 0
	jle	SHORT $LN2@BuildBinar

; 356  :     {
; 357  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	push	ecx
	call	_BuildLeading1WordFromDecimalString
	add	esp, 8
	mov	edx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _out_ptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _out_ptr$[ebp], eax

; 358  :         in_ptr += r;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _in_ptr$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _in_ptr$[ebp], eax

; 359  :         source_count -= r;

	mov	ecx, DWORD PTR _source_count$[ebp]
	sub	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR _source_count$[ebp], ecx
$LN2@BuildBinar:

; 360  :     }
; 361  :     while (source_count > 0)

	cmp	DWORD PTR _source_count$[ebp], 0
	jbe	SHORT $LN3@BuildBinar

; 362  :     {
; 363  :         *out_ptr++ = Build1WordFromDecimalString(in_ptr);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	push	edx
	call	_Build1WordFromDecimalString
	add	esp, 4
	mov	ecx, DWORD PTR _out_ptr$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _out_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _out_ptr$[ebp], edx

; 364  :         in_ptr += word_digit_count;

	mov	eax, DWORD PTR _word_digit_count$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _in_ptr$[ebp], edx

; 365  :         source_count -= word_digit_count;

	mov	eax, DWORD PTR _source_count$[ebp]
	sub	eax, DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR _source_count$[ebp], eax

; 366  :     }

	jmp	SHORT $LN2@BuildBinar
$LN3@BuildBinar:

; 367  :     *out_buf_count = out_ptr - out_buf;

	mov	ecx, DWORD PTR _out_ptr$[ebp]
	sub	ecx, DWORD PTR _out_buf$[ebp]
	sar	ecx, 2
	mov	edx, DWORD PTR _out_buf_count$[ebp]
	mov	DWORD PTR [edx], ecx

; 368  : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildBinaryFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_Build1WordFromDecimalString PROC

; 306  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 307  :     __UNIT_TYPE x = (*in_ptr++ - L'0');

	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 308  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

	xor	eax, eax
	je	$LN2@Build1Word

; 309  :     {
; 310  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 311  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 312  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 313  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 314  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 315  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 316  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 317  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 318  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 319  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx
$LN2@Build1Word:

; 320  :     }
; 321  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	$LN3@Build1Word

; 322  :     {
; 323  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 324  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 325  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 326  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	ecx, DWORD PTR _x$[ebp], 10
	mov	edx, DWORD PTR _in_ptr$[ebp]
	movzx	eax, WORD PTR [edx]
	lea	ecx, DWORD PTR [ecx+eax-48]
	mov	DWORD PTR _x$[ebp], ecx
	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _in_ptr$[ebp], edx

; 327  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx
$LN3@Build1Word:

; 328  :     }
; 329  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@Build1Word

; 330  :     {
; 331  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 332  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax
$LN4@Build1Word:

; 333  :     }
; 334  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN5@Build1Word

; 335  :     {
; 336  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	edx, DWORD PTR _x$[ebp], 10
	mov	eax, DWORD PTR _in_ptr$[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx-48]
	mov	DWORD PTR _x$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax
$LN5@Build1Word:

; 337  :     }
; 338  :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 339  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Build1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
_BuildLeading1WordFromDecimalString PROC

; 295  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 296  :     __UNIT_TYPE x = 0;

	mov	DWORD PTR _x$[ebp], 0
$LN2@BuildLeadi:

; 297  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@BuildLeadi

; 298  :     {
; 299  :         x = x * 10 + (*in_ptr++ - L'0');

	imul	eax, DWORD PTR _x$[ebp], 10
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 300  :         --count;

	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 301  :     }

	jmp	SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 302  :     return (x);

	mov	eax, DWORD PTR _x$[ebp]

; 303  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BuildLeading1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_state$ = -88						; size = 80
__$ArrayPad$ = -4					; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_int_part_buf$ = 20					; size = 4
_ParseAsHexNumberString PROC

; 280  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 281  :     struct __tag_PARSER_STATE state;
; 282  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, NULL);

	push	0
	mov	eax, DWORD PTR _int_part_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format_option$[ebp]
	push	ecx
	mov	edx, DWORD PTR _number_styles$[ebp]
	push	edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_InitializeParserState
	add	esp, 24					; 00000018H

; 283  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 1
	je	SHORT $LN2@ParseAsHex

; 284  :         SkipSpace(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_SkipSpace
	add	esp, 4
$LN2@ParseAsHex:

; 285  :     ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4

; 286  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 2
	je	SHORT $LN3@ParseAsHex

; 287  :         SkipSpace(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_SkipSpace
	add	esp, 4
$LN3@ParseAsHex:

; 288  :     if (*state.IN_PTR != L'\0')

	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN4@ParseAsHex

; 289  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsHex
$LN4@ParseAsHex:

; 290  :     FinalizeParserState(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_FinalizeParserState
	add	esp, 4

; 291  :     return (1);

	mov	eax, 1
$LN1@ParseAsHex:

; 292  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ParseAsHex
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@ParseAsHex:
	DD	1
	DD	$LN7@ParseAsHex
$LN7@ParseAsHex:
	DD	-88					; ffffffa8H
	DD	80					; 00000050H
	DD	$LN6@ParseAsHex
$LN6@ParseAsHex:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_ParseAsHexNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_state$ = -88						; size = 80
__$ArrayPad$ = -4					; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_sign$ = 20						; size = 4
_int_part_buf$ = 24					; size = 4
_frac_part_buf$ = 28					; size = 4
_ParseAsDecimalNumberString PROC

; 183  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 184  :     struct __tag_PARSER_STATE state;
; 185  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, frac_part_buf);

	mov	eax, DWORD PTR _frac_part_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _int_part_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format_option$[ebp]
	push	edx
	mov	eax, DWORD PTR _number_styles$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_InitializeParserState
	add	esp, 24					; 00000018H

; 186  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 1
	je	SHORT $LN2@ParseAsDec

; 187  :         SkipSpace(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_SkipSpace
	add	esp, 4
$LN2@ParseAsDec:

; 188  :     if ((number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && *state.IN_PTR == L'(')

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 16					; 00000010H
	je	$LN3@ParseAsDec
	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 40					; 00000028H
	jne	$LN3@ParseAsDec

; 189  :     {
; 190  :         state.SIGN = -1;

	mov	DWORD PTR _state$[ebp+8], -1

; 191  :         state.IN_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 2
	mov	DWORD PTR _state$[ebp], edx

; 192  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN5@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN5@ParseAsDec

; 193  :             ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN5@ParseAsDec:

; 194  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN6@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@ParseAsDec

; 195  :         {
; 196  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+44]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 197  :             ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN6@ParseAsDec:

; 198  :         }
; 199  :         if (*state.IN_PTR != L')')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 41					; 00000029H
	je	SHORT $LN7@ParseAsDec

; 200  :             return (0);

	xor	eax, eax
	jmp	$LN1@ParseAsDec
$LN7@ParseAsDec:

; 201  :         state.IN_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 2
	mov	DWORD PTR _state$[ebp], edx

; 202  :     }

	jmp	$LN4@ParseAsDec
$LN3@ParseAsDec:

; 203  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 4
	je	$LN8@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@ParseAsDec

; 204  :     {
; 205  :         state.SIGN = 1;

	mov	DWORD PTR _state$[ebp+8], 1

; 206  :         state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+20]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 207  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN10@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN10@ParseAsDec

; 208  :             ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN10@ParseAsDec:

; 209  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN11@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@ParseAsDec

; 210  :         {
; 211  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+44]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 212  :             ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN11@ParseAsDec:

; 213  :         }
; 214  :     }

	jmp	$LN4@ParseAsDec
$LN8@ParseAsDec:

; 215  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 4
	je	$LN12@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+24]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@ParseAsDec

; 216  :     {
; 217  :         state.SIGN = -1;

	mov	DWORD PTR _state$[ebp+8], -1

; 218  :         state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+32]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 219  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN14@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN14@ParseAsDec

; 220  :             ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4
$LN14@ParseAsDec:

; 221  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN15@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@ParseAsDec

; 222  :         {
; 223  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+44]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 224  :             ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN15@ParseAsDec:

; 225  :         }
; 226  :     }

	jmp	$LN4@ParseAsDec
$LN12@ParseAsDec:

; 227  :     else if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	$LN16@ParseAsDec
	mov	edx, DWORD PTR _state$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 57					; 00000039H
	jg	$LN16@ParseAsDec

; 228  :     {
; 229  :         ParseAsIntegerPartNumberSequence(&state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ParseAsIntegerPartNumberSequence
	add	esp, 4

; 230  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	edx, DWORD PTR _number_styles$[ebp]
	and	edx, 32					; 00000020H
	je	SHORT $LN18@ParseAsDec
	lea	eax, DWORD PTR _state$[ebp+36]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@ParseAsDec

; 231  :         {
; 232  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	edx, DWORD PTR _state$[ebp+44]
	mov	eax, DWORD PTR _state$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _state$[ebp], ecx

; 233  :             ParseAsFractionPartNumberSequence(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4
$LN18@ParseAsDec:

; 234  :         }
; 235  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN19@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@ParseAsDec

; 236  :         {
; 237  :             state.SIGN = 1;

	mov	DWORD PTR _state$[ebp+8], 1

; 238  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+20]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 239  :         }

	jmp	SHORT $LN20@ParseAsDec
$LN19@ParseAsDec:

; 240  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 8
	je	SHORT $LN20@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+24]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@ParseAsDec

; 241  :         {
; 242  :             state.SIGN = -1;

	mov	DWORD PTR _state$[ebp+8], -1

; 243  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+32]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx
$LN20@ParseAsDec:

; 244  :         }
; 245  :         else
; 246  :         {
; 247  :         }
; 248  :     }

	jmp	$LN4@ParseAsDec
$LN16@ParseAsDec:

; 249  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 32					; 00000020H
	je	$LN23@ParseAsDec
	lea	ecx, DWORD PTR _state$[ebp+36]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN23@ParseAsDec

; 250  :     {
; 251  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp+44]
	mov	ecx, DWORD PTR _state$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _state$[ebp], edx

; 252  :         ParseAsFractionPartNumberSequence(&state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ParseAsFractionPartNumberSequence
	add	esp, 4

; 253  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN25@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+12]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN25@ParseAsDec

; 254  :         {
; 255  :             state.SIGN = 1;

	mov	DWORD PTR _state$[ebp+8], 1

; 256  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+20]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax

; 257  :         }

	jmp	SHORT $LN26@ParseAsDec
$LN25@ParseAsDec:

; 258  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 8
	je	SHORT $LN26@ParseAsDec
	lea	edx, DWORD PTR _state$[ebp+24]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN26@ParseAsDec

; 259  :         {
; 260  :             state.SIGN = -1;

	mov	DWORD PTR _state$[ebp+8], -1

; 261  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	mov	ecx, DWORD PTR _state$[ebp+32]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _state$[ebp], eax
$LN26@ParseAsDec:

; 262  :         }
; 263  :         else
; 264  :         {
; 265  :         }
; 266  :     }

	jmp	SHORT $LN4@ParseAsDec
$LN23@ParseAsDec:

; 267  :     else
; 268  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsDec
$LN4@ParseAsDec:

; 269  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	ecx, DWORD PTR _number_styles$[ebp]
	and	ecx, 2
	je	SHORT $LN29@ParseAsDec

; 270  :         SkipSpace(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_SkipSpace
	add	esp, 4
$LN29@ParseAsDec:

; 271  :     if (*state.IN_PTR != L'\0')

	mov	eax, DWORD PTR _state$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN30@ParseAsDec

; 272  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsDec
$LN30@ParseAsDec:

; 273  :     FinalizeParserState(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_FinalizeParserState
	add	esp, 4

; 274  :     *sign = state.SIGN;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	ecx, DWORD PTR _state$[ebp+8]
	mov	DWORD PTR [eax], ecx

; 275  :     return (1);

	mov	eax, 1
$LN1@ParseAsDec:

; 276  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@ParseAsDec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN34@ParseAsDec:
	DD	1
	DD	$LN33@ParseAsDec
$LN33@ParseAsDec:
	DD	-88					; ffffffa8H
	DD	80					; 00000050H
	DD	$LN32@ParseAsDec
$LN32@ParseAsDec:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_ParseAsDecimalNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_ParseAsFractionPartNumberSequence PROC

; 155  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@ParseAsFra:

; 156  :     for (;;)
; 157  :     {
; 158  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN5@ParseAsFra
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 57					; 00000039H
	jg	SHORT $LN5@ParseAsFra

; 159  :         {
; 160  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	cx, WORD PTR [ecx]
	mov	WORD PTR [eax], cx

; 161  :             state->FRAC_PART_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+76]
	add	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 162  :             state->IN_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx], eax

; 163  :         }

	jmp	$LN6@ParseAsFra
$LN5@ParseAsFra:

; 164  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 512				; 00000200H
	je	SHORT $LN7@ParseAsFra
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN7@ParseAsFra
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN7@ParseAsFra

; 165  :         {
; 166  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	dx, WORD PTR [edx]
	mov	WORD PTR [ecx], dx

; 167  :             state->FRAC_PART_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+76], ecx

; 168  :             state->IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx

; 169  :         }

	jmp	SHORT $LN6@ParseAsFra
$LN7@ParseAsFra:

; 170  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 512				; 00000200H
	je	SHORT $LN9@ParseAsFra
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN9@ParseAsFra
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 70					; 00000046H
	jg	SHORT $LN9@ParseAsFra

; 171  :         {
; 172  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [edx], ax

; 173  :             state->FRAC_PART_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+76], edx

; 174  :             state->IN_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], edx

; 175  :         }

	jmp	SHORT $LN6@ParseAsFra
$LN9@ParseAsFra:

; 176  :         else
; 177  :             break;

	jmp	SHORT $LN1@ParseAsFra
$LN6@ParseAsFra:

; 178  :     }

	jmp	$LN4@ParseAsFra
$LN1@ParseAsFra:

; 179  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ParseAsFractionPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_ParseAsIntegerPartNumberSequence PROC

; 124  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@ParseAsInt:

; 125  :     for (;;)
; 126  :     {
; 127  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN5@ParseAsInt
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 57					; 00000039H
	jg	SHORT $LN5@ParseAsInt

; 128  :         {
; 129  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	cx, WORD PTR [ecx]
	mov	WORD PTR [eax], cx

; 130  :             state->INT_PART_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+72]
	add	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 131  :             state->IN_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx], eax

; 132  :         }

	jmp	$LN6@ParseAsInt
$LN5@ParseAsInt:

; 133  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 512				; 00000200H
	je	SHORT $LN7@ParseAsInt
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN7@ParseAsInt
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN7@ParseAsInt

; 134  :         {
; 135  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	dx, WORD PTR [edx]
	mov	WORD PTR [ecx], dx

; 136  :             state->INT_PART_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 137  :             state->IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx

; 138  :         }

	jmp	$LN6@ParseAsInt
$LN7@ParseAsInt:

; 139  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 512				; 00000200H
	je	SHORT $LN9@ParseAsInt
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN9@ParseAsInt
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 70					; 00000046H
	jg	SHORT $LN9@ParseAsInt

; 140  :         {
; 141  :             *state->INT_PART_PTR = *state->IN_PTR;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [edx], ax

; 142  :             state->INT_PART_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+72], edx

; 143  :             state->IN_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax], edx

; 144  :         }

	jmp	SHORT $LN6@ParseAsInt
$LN9@ParseAsInt:

; 145  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && StartsWith(state->IN_PTR, state->GROUP_SEPARATOR))

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 64					; 00000040H
	je	SHORT $LN11@ParseAsInt
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@ParseAsInt

; 146  :             state->IN_PTR += state->GROUP_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN6@ParseAsInt
$LN11@ParseAsInt:

; 147  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && state->SECONDARY_GROUP_SEPARATOR_LENGTH > 0 && StartsWith(state->IN_PTR, state->SECONDARY_GROUP_SEPARATOR))

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 64					; 00000040H
	je	SHORT $LN13@ParseAsInt
	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+68], 0
	jle	SHORT $LN13@ParseAsInt
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_StartsWith
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@ParseAsInt

; 148  :             state->IN_PTR += state->SECONDARY_GROUP_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN6@ParseAsInt
$LN13@ParseAsInt:

; 149  :         else
; 150  :             break;

	jmp	SHORT $LN1@ParseAsInt
$LN6@ParseAsInt:

; 151  :     }

	jmp	$LN4@ParseAsInt
$LN1@ParseAsInt:

; 152  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ParseAsIntegerPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
tv67 = -4						; size = 4
_state$ = 8						; size = 4
_SkipSpace PROC

; 103  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@SkipSpace:

; 104  :     for (;;)
; 105  :     {
; 106  :         switch (*state->IN_PTR)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, WORD PTR [ecx]
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 9
	jl	SHORT $LN8@SkipSpace
	cmp	DWORD PTR tv67[ebp], 13			; 0000000dH
	jle	SHORT $LN7@SkipSpace
	cmp	DWORD PTR tv67[ebp], 32			; 00000020H
	je	SHORT $LN7@SkipSpace
	jmp	SHORT $LN8@SkipSpace
$LN7@SkipSpace:

; 107  :         {
; 108  :         case L' ':
; 109  :         case L'\t':
; 110  :         case L'\n':
; 111  :         case L'\r':
; 112  :         case L'\f':
; 113  :         case L'\v':
; 114  :             break;

	jmp	SHORT $LN5@SkipSpace
$LN8@SkipSpace:

; 115  : 
; 116  :         default:
; 117  :             return;

	jmp	SHORT $LN1@SkipSpace
$LN5@SkipSpace:

; 118  :         }
; 119  :         state->IN_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx], ecx

; 120  :     }

	jmp	SHORT $LN4@SkipSpace
$LN1@SkipSpace:

; 121  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SkipSpace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_FinalizeParserState PROC

; 95   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 96   :     *state->INT_PART_PTR = L'\0';

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	xor	edx, edx
	mov	WORD PTR [ecx], dx

; 97   :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 32					; 00000020H
	je	SHORT $LN1@FinalizePa

; 98   :         *state->FRAC_PART_PTR = L'\0';

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+76]
	xor	ecx, ecx
	mov	WORD PTR [eax], cx
$LN1@FinalizePa:

; 99   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FinalizeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_in_ptr$ = 12						; size = 4
_number_styles$ = 16					; size = 4
_format_option$ = 20					; size = 4
_int_part_buf$ = 24					; size = 4
_frac_part_buf$ = 28					; size = 4
_InitializeParserState PROC

; 67   : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 68   :     state->IN_PTR = in_ptr;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	mov	DWORD PTR [eax], ecx

; 69   :     state->NUMBER_STYLES = number_styles;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR _number_styles$[ebp]
	mov	DWORD PTR [edx+4], eax

; 70   :     state->SIGN = 0;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 71   :     lstrcpyW(state->POSITIVE_SIGN, format_option->PositiveSign);

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 16					; 00000010H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 72   :     state->POSITIVE_SIGN_LENGTH = lstrlenW(state->POSITIVE_SIGN);

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 12					; 0000000cH
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+20], eax

; 73   :     lstrcpyW(state->NEGATIVE_SIGN, format_option->NegativeSign);

	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 22					; 00000016H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 74   :     state->NEGATIVE_SIGN_LENGTH = lstrlenW(state->NEGATIVE_SIGN);

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 24					; 00000018H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 75   :     lstrcpyW(state->DECIMAL_SEPARATOR, format_option->DecimalSeparator);

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 10					; 0000000aH
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 76   :     state->DECIMAL_SEPARATOR_LENGTH = lstrlenW(state->DECIMAL_SEPARATOR);

	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 36					; 00000024H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+44], eax

; 77   :     lstrcpyW(state->GROUP_SEPARATOR, format_option->GroupSeparator);

	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 78   :     state->GROUP_SEPARATOR_LENGTH = lstrlenW(state->GROUP_SEPARATOR);

	mov	edx, DWORD PTR _state$[ebp]
	add	edx, 48					; 00000030H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 79   :     if (state->GROUP_SEPARATOR[0] == L'\xa0' && state->GROUP_SEPARATOR[1] == L'\0')

	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx+eax+48]
	cmp	edx, 160				; 000000a0H
	jne	SHORT $LN2@Initialize
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _state$[ebp]
	movzx	edx, WORD PTR [ecx+eax+48]
	test	edx, edx
	jne	SHORT $LN2@Initialize

; 80   :     {
; 81   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\x20';

	mov	eax, 2
	imul	ecx, eax, 0
	mov	edx, 32					; 00000020H
	mov	eax, DWORD PTR _state$[ebp]
	mov	WORD PTR [eax+ecx+60], dx

; 82   :         state->SECONDARY_GROUP_SEPARATOR[1] = L'\0';

	mov	ecx, 2
	shl	ecx, 0
	xor	edx, edx
	mov	eax, DWORD PTR _state$[ebp]
	mov	WORD PTR [eax+ecx+60], dx

; 83   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+68], 1

; 84   :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 85   :     else
; 86   :     {
; 87   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\0';

	mov	edx, 2
	imul	eax, edx, 0
	xor	ecx, ecx
	mov	edx, DWORD PTR _state$[ebp]
	mov	WORD PTR [edx+eax+60], cx

; 88   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 0;

	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+68], 0
$LN3@Initialize:

; 89   :     }
; 90   :     state->INT_PART_PTR = int_part_buf;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR _int_part_buf$[ebp]
	mov	DWORD PTR [ecx+72], edx

; 91   :     state->FRAC_PART_PTR = frac_part_buf;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _frac_part_buf$[ebp]
	mov	DWORD PTR [eax+76], ecx

; 92   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_InitializeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_StartsWith PROC

; 55   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@StartsWith:

; 56   :     while (*b != L'\0')

	mov	eax, DWORD PTR _b$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@StartsWith

; 57   :     {
; 58   :         if (*a != *b)

	mov	edx, DWORD PTR _a$[ebp]
	movzx	eax, WORD PTR [edx]
	mov	ecx, DWORD PTR _b$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	eax, edx
	je	SHORT $LN4@StartsWith

; 59   :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@StartsWith
$LN4@StartsWith:

; 60   :         ++a;

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 2
	mov	DWORD PTR _a$[ebp], eax

; 61   :         ++b;

	mov	ecx, DWORD PTR _b$[ebp]
	add	ecx, 2
	mov	DWORD PTR _b$[ebp], ecx

; 62   :     }

	jmp	SHORT $LN2@StartsWith
$LN3@StartsWith:

; 63   :     return (1);

	mov	eax, 1
$LN1@StartsWith:

; 64   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_StartsWith ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC

; 328  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 329  : #ifdef _MSC_VER
; 330  : #ifdef _M_IX86
; 331  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _w_hi$[ebp]
	push	eax
	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]
	push	edx
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH

; 332  : #elif defined(_M_X64)
; 333  :         return (_mulx_u64(u, v, w_hi));
; 334  : #else
; 335  : #error unknown platform
; 336  : #endif
; 337  : #elif defined(__GNUC__)
; 338  : #ifdef _M_IX86
; 339  :         _UINT32_T w_lo;
; 340  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 341  :         return (w_lo);
; 342  : #elif defined(_M_X64)
; 343  :         _UINT64_T w_lo;
; 344  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 345  :         return (w_lo);
; 346  : #else
; 347  : #error unknown platform
; 348  : #endif
; 349  : #else
; 350  : #error unknown compiler
; 351  : #endif
; 352  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC

; 290  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 291  : #ifdef _M_IX86
; 292  : #ifdef _MSC_VER
; 293  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _w_hi$[ebp]
	push	eax
	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]
	push	edx
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH

; 294  : #elif defined(__GNUC__)
; 295  :         _UINT32_T w_lo;
; 296  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 297  :         return (w_lo);
; 298  : #else
; 299  : #error unknown compiler
; 300  : #endif
; 301  : #elif defined(_M_X64)
; 302  :         return (_umul128(u, v, w_hi));
; 303  : #else
; 304  : #error unknown platform
; 305  : #endif
; 306  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC

; 234  :     {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 235  : #ifdef _M_IX86
; 236  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adcx	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 237  : #elif defined(_M_X64)
; 238  :         return (_addcarryx_u64(carry, u, v, w));
; 239  : #else
; 240  : #error unknown platform
; 241  : #endif
; 242  :     }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC

; 206  :     {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 207  : #ifdef _M_IX86
; 208  :         return (_addcarry_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adc	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 209  : #elif defined(_M_X64)
; 210  :         return (_addcarry_u64(carry, u, v, w));
; 211  : #else
; 212  : #error unknown platform
; 213  : #endif
; 214  :     }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_SIZE PROC

; 191  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 192  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 193  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 186  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 187  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 188  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 175  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 177  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 178  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 59   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 60   : #ifdef _M_IX86
; 61   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 62   : #elif defined(_M_X64)
; 63   :         __movsq(d, s, count);
; 64   : #else
; 65   : #error unknown platform
; 66   : #endif
; 67   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC

; 350  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 351  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 352  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC

; 344  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 346  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC

; 327  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 328  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 329  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC

; 321  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 323  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_mask$1 = -20						; size = 4
_no$ = -12						; size = 4
_result$ = -4						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o$ = 20						; size = 4
_PMC_TryParse@16 PROC

; 993  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 994  :     PMC_STATUS_CODE result;
; 995  :     if (source == NULL)

	cmp	DWORD PTR _source$[ebp], 0
	jne	SHORT $LN2@PMC_TryPar

; 996  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_TryPar
$LN2@PMC_TryPar:

; 997  :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN3@PMC_TryPar

; 998  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_TryPar
$LN3@PMC_TryPar:

; 999  :     if (format_option == NULL)

	cmp	DWORD PTR _format_option$[ebp], 0
	jne	SHORT $LN4@PMC_TryPar

; 1000 :         format_option = &default_number_format_option;

	mov	DWORD PTR _format_option$[ebp], OFFSET _default_number_format_option
$LN4@PMC_TryPar:

; 1001 :     NUMBER_HEADER* no;
; 1002 :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

	mov	eax, DWORD PTR _number_styles$[ebp]
	and	eax, 512				; 00000200H
	je	SHORT $LN5@PMC_TryPar

; 1003 :     {
; 1004 :         // 許可されている組み合わせのフラグ
; 1005 :         _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE;

	mov	DWORD PTR _mask$1[ebp], 515		; 00000203H

; 1006 : 
; 1007 :         // 許可されていないフラグが指定されていればエラー
; 1008 :         if (number_styles & ~mask)

	mov	ecx, DWORD PTR _mask$1[ebp]
	not	ecx
	and	ecx, DWORD PTR _number_styles$[ebp]
	je	SHORT $LN7@PMC_TryPar

; 1009 :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_TryPar
$LN7@PMC_TryPar:

; 1010 : 
; 1011 :         if ((result = TryParseX(source, number_styles, format_option, &no)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _no$[ebp]
	push	edx
	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	mov	ecx, DWORD PTR _number_styles$[ebp]
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	call	_TryParseX
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_TryPar

; 1012 :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN8@PMC_TryPar:

; 1013 :     }

	jmp	SHORT $LN6@PMC_TryPar
$LN5@PMC_TryPar:

; 1014 :     else
; 1015 :     {
; 1016 :         if ((result = TryParseDN(source, number_styles, format_option, &no)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format_option$[ebp]
	push	ecx
	mov	edx, DWORD PTR _number_styles$[ebp]
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	push	eax
	call	_TryParseDN
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_TryPar

; 1017 :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN6@PMC_TryPar:

; 1018 :     }
; 1019 :     *o = (PMC_HANDLE_UINT)no;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR _no$[ebp]
	mov	DWORD PTR [ecx], edx

; 1020 : #ifdef _DEBUG
; 1021 :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_TryPar

; 1022 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_TryPar
$LN10@PMC_TryPar:

; 1023 : #endif
; 1024 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_TryPar:

; 1025 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@PMC_TryPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN14@PMC_TryPar:
	DD	1
	DD	$LN13@PMC_TryPar
$LN13@PMC_TryPar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN12@PMC_TryPar
$LN12@PMC_TryPar:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	0
_PMC_TryParse@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Parse PROC

; 1028 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __4CD8546F_pmc_parse@c
	call	@__CheckForDebuggerJustMyCode@4

; 1029 :     default_number_format_option.DecimalDigits = 2;

	mov	DWORD PTR _default_number_format_option, 2

; 1030 :     lstrcpyW(default_number_format_option.GroupSeparator, L",");

	mov	esi, esp
	push	OFFSET $SG95397
	push	OFFSET _default_number_format_option+4
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1031 :     lstrcpyW(default_number_format_option.DecimalSeparator, L".");

	mov	esi, esp
	push	OFFSET $SG95398
	push	OFFSET _default_number_format_option+10
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1032 :     lstrcpy(default_number_format_option.GroupSizes, "3");

	mov	esi, esp
	push	OFFSET $SG95399
	push	OFFSET _default_number_format_option+28
	call	DWORD PTR __imp__lstrcpyA@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1033 :     lstrcpyW(default_number_format_option.PositiveSign, L"+");

	mov	esi, esp
	push	OFFSET $SG95400
	push	OFFSET _default_number_format_option+16
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1034 :     lstrcpyW(default_number_format_option.NegativeSign, L"-");

	mov	esi, esp
	push	OFFSET $SG95401
	push	OFFSET _default_number_format_option+22
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1035 : 
; 1036 :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)

	mov	eax, DWORD PTR _feature$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@Initialize
	mov	edx, DWORD PTR _feature$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 3
	and	eax, 1
	je	SHORT $LN2@Initialize

; 1037 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;

	mov	DWORD PTR _fp_MultiplyAndAdd, OFFSET _MultiplyAndAdd_using_ADCX_MULX
	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 1038 :     else
; 1039 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;

	mov	DWORD PTR _fp_MultiplyAndAdd, OFFSET _MultiplyAndAdd_using_ADC_MUL
$LN3@Initialize:

; 1040 : 
; 1041 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1042 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Parse ENDP
_TEXT	ENDS
END
