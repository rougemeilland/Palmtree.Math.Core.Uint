; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_subtruct.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E05E7037_autogenerated_inline_func@h DB 01H
__849DF3BE_pmc_subtruct@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG118025 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118048 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118080 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H
	DB	'C', 00H, '_', 00H, 'S', 00H, 'u', 00H, 'b', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, '_', 00H, 'I', 00H, '_', 00H
	DB	'X', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118081 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118088 DB	'v', 00H, 00H, 00H
$SG118089 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118095 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118101 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118104 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118119 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118125 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118145 DB	'u', 00H, 00H, 00H
$SG118141 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H
	DB	'C', 00H, '_', 00H, 'S', 00H, 'u', 00H, 'b', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, '_', 00H, 'X', 00H, '_', 00H
	DB	'I', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118142 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118146 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118181 DB	'v', 00H, 00H, 00H
$SG118177 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H
	DB	'C', 00H, '_', 00H, 'S', 00H, 'u', 00H, 'b', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, '_', 00H, 'L', 00H, '_', 00H
	DB	'X', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118178 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118182 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118188 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118198 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118202 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118206 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118212 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118216 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118220 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118249 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118259 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118265 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118271 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118287 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 'u', 00H
	DB	'b', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H
	DB	'C', 00H, '_', 00H, 'S', 00H, 'u', 00H, 'b', 00H, 't', 00H, 'r'
	DB	00H, 'u', 00H, 'c', 00H, 't', 00H, '_', 00H, 'X', 00H, '_', 00H
	DB	'L', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118288 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118291 DB	'v', 00H, 00H, 00H
$SG118292 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118308 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118313 DB	01bH, 'n', 097H, '{k0', 088H, '0', 08aH, '0', 0aaH, '0', 0fcH
	DB	'0', 0d0H, '0', 0fcH, '0', 0d5H, '0', 0edH, '0', 0fcH, '0L0zv', 01fH
	DB	'uW0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118330 DB	'u', 00H, 00H, 00H
$SG118331 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118334 DB	'v', 00H, 00H, 00H
$SG118335 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
CONST	ENDS
PUBLIC	??0exception@std@@QAE@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
PUBLIC	??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
PUBLIC	??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::OverflowException::~OverflowException
PUBLIC	??_GOverflowException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::OverflowException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?Subtruct_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0I@Z ; Palmtree::Math::Core::Internal::Subtruct_Imp
PUBLIC	?Initialize_Subtruct@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Subtruct
PUBLIC	?PMC_Subtruct_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_I_X
PUBLIC	?PMC_Subtruct_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_L_X
PUBLIC	?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_I
PUBLIC	?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_L
PUBLIC	?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7OverflowException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::OverflowException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVOverflowException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVOverflowException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::OverflowException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVOverflowException@Internal@Core@Math@Palmtree@@@8??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4OverflowException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::OverflowException::`RTTI Complete Object Locator'
PUBLIC	??_R3OverflowException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::OverflowException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2OverflowException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::OverflowException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@OverflowException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::OverflowException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EOverflowException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::OverflowException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@OverflowException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@OverflowException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVOverflowException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::OverflowException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3OverflowException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2OverflowException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2OverflowException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@OverflowException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::OverflowException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3OverflowException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3OverflowException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::OverflowException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2OverflowException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4OverflowException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4OverflowException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::OverflowException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVOverflowException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3OverflowException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVOverflowException@Internal@Core@Math@Palmtree@@@8??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVOverflowException@Internal@Core@Math@Palmtree@@@8??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVOverflowException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVOverflowException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVOverflowException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::OverflowException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVOverflowException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVOverflowException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVOverflowException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVOverflowException@Internal@Core@Math@Palmtree@@@8??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVOverflowException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVOverflowException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7OverflowException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7OverflowException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4OverflowException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::OverflowException::`vftable'
	DD	FLAT:??_EOverflowException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0
__unwindtable$?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0
__unwindtable$?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0
__unwindtable$?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z$0
__unwindtable$?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z$0
__unwindtable$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$2
__ehfuncinfo$?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
$T2 = -104						; size = 4
$T3 = -100						; size = 24
$T4 = -76						; size = 24
_w$5 = -52						; size = 4
_w_bit_count$6 = -48					; size = 4
_v_bit_count$7 = -44					; size = 4
_u_bit_count$8 = -40					; size = 4
_root$9 = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_X_Imp

; 652  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	57		 push	 edi
  00015	8d 7d 98	 lea	 edi, DWORD PTR [ebp-104]
  00018	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 653  :         if (u->IS_ZERO)

  0003f	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	83 e1 01	 and	 ecx, 1
  00048	74 37		 je	 SHORT $LN2@PMC_Subtru

; 654  :         {
; 655  :             if (v->IS_ZERO)

  0004a	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0004d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00050	83 e0 01	 and	 eax, 1
  00053	74 0c		 je	 SHORT $LN4@PMC_Subtru

; 656  :             {
; 657  :                 // y が 0 である場合
; 658  : 
; 659  :                 // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 660  :                 return (&number_zero);

  00055	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0005a	e9 36 01 00 00	 jmp	 $LN11@PMC_Subtru

; 661  :             }
; 662  :             else

  0005f	eb 1b		 jmp	 SHORT $LN5@PMC_Subtru
$LN4@PMC_Subtru:

; 663  :             {
; 664  :                 // y が 0 ではない場合
; 665  : 
; 666  :                 // 演算結果は負となってしまうのでエラーを返す。
; 667  :                 throw OverflowException(L"減算によりオーバーフローが発生しました。");

  00061	68 00 00 00 00	 push	 OFFSET $SG118308
  00066	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  00069	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  0006e	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  00073	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@PMC_Subtru:

; 668  :             }
; 669  :         }
; 670  :         else

  0007c	e9 14 01 00 00	 jmp	 $LN11@PMC_Subtru
$LN2@PMC_Subtru:

; 671  :         {
; 672  :             // x が 0 ではない場合
; 673  : 
; 674  :             if (v->IS_ZERO)

  00081	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00084	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00087	83 e0 01	 and	 eax, 1
  0008a	74 16		 je	 SHORT $LN6@PMC_Subtru

; 675  :             {
; 676  :                 // y が 0 である場合
; 677  : 
; 678  :                 // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 679  :                 return (DuplicateNumber(u));

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00095	83 c4 04	 add	 esp, 4
  00098	e9 f8 00 00 00	 jmp	 $LN11@PMC_Subtru

; 680  :             }
; 681  :             else

  0009d	e9 f3 00 00 00	 jmp	 $LN11@PMC_Subtru
$LN6@PMC_Subtru:

; 682  :             {
; 683  :                 // x と y がともに 0 ではない場合
; 684  : 
; 685  :                 // x と y の差を計算する
; 686  :                 ResourceHolderUINT root;

  000a2	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  000a5	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000aa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 687  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000b1	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000b4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000b7	89 45 d8	 mov	 DWORD PTR _u_bit_count$8[ebp], eax

; 688  :                 __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

  000ba	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000bd	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000c0	89 55 d4	 mov	 DWORD PTR _v_bit_count$7[ebp], edx

; 689  :                 if (u_bit_count < v_bit_count)

  000c3	8b 45 d8	 mov	 eax, DWORD PTR _u_bit_count$8[ebp]
  000c6	3b 45 d4	 cmp	 eax, DWORD PTR _v_bit_count$7[ebp]
  000c9	73 1b		 jae	 SHORT $LN8@PMC_Subtru

; 690  :                 {
; 691  :                     // 演算結果は負となってしまうのでエラーを返す。
; 692  :                     throw OverflowException(L"減算によりオーバーフローが発生しました。");

  000cb	68 00 00 00 00	 push	 OFFSET $SG118313
  000d0	8d 4d 9c	 lea	 ecx, DWORD PTR $T3[ebp]
  000d3	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  000d8	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  000dd	8d 4d 9c	 lea	 ecx, DWORD PTR $T3[ebp]
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@PMC_Subtru:

; 693  :                 }
; 694  :                 __UNIT_TYPE w_bit_count = u_bit_count;

  000e6	8b 55 d8	 mov	 edx, DWORD PTR _u_bit_count$8[ebp]
  000e9	89 55 d0	 mov	 DWORD PTR _w_bit_count$6[ebp], edx

; 695  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000ec	8b 45 d0	 mov	 eax, DWORD PTR _w_bit_count$6[ebp]
  000ef	50		 push	 eax
  000f0	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  000f3	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000f8	89 45 cc	 mov	 DWORD PTR _w$5[ebp], eax

; 696  :                 Subtruct_Imp(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, w->BLOCK, w->BLOCK_COUNT);

  000fb	8b 4d cc	 mov	 ecx, DWORD PTR _w$5[ebp]
  000fe	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00101	52		 push	 edx
  00102	8b 45 cc	 mov	 eax, DWORD PTR _w$5[ebp]
  00105	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00108	51		 push	 ecx
  00109	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0010c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0010f	50		 push	 eax
  00110	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00113	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00116	52		 push	 edx
  00117	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0011a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0011d	51		 push	 ecx
  0011e	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00121	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?Subtruct_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0I@Z ; Palmtree::Math::Core::Internal::Subtruct_Imp
  0012a	83 c4 18	 add	 esp, 24			; 00000018H

; 697  :                 root.CheckNumber(w);

  0012d	8b 4d cc	 mov	 ecx, DWORD PTR _w$5[ebp]
  00130	51		 push	 ecx
  00131	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  00134	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 698  :                 CommitNumber(w);

  00139	8b 55 cc	 mov	 edx, DWORD PTR _w$5[ebp]
  0013c	52		 push	 edx
  0013d	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00142	83 c4 04	 add	 esp, 4

; 699  :                 CommitNumber(w);

  00145	8b 45 cc	 mov	 eax, DWORD PTR _w$5[ebp]
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  0014e	83 c4 04	 add	 esp, 4

; 700  :                 if (w->IS_ZERO)

  00151	8b 4d cc	 mov	 ecx, DWORD PTR _w$5[ebp]
  00154	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00157	83 e2 01	 and	 edx, 1
  0015a	74 15		 je	 SHORT $LN9@PMC_Subtru

; 701  :                 {
; 702  :                     root.DeallocateNumber(w);

  0015c	8b 45 cc	 mov	 eax, DWORD PTR _w$5[ebp]
  0015f	50		 push	 eax
  00160	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  00163	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 703  :                     w = &number_zero;

  00168	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _w$5[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 704  :                 }
; 705  :                 else

  0016f	eb 0c		 jmp	 SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 706  :                     root.UnlinkNumber(w);

  00171	8b 4d cc	 mov	 ecx, DWORD PTR _w$5[ebp]
  00174	51		 push	 ecx
  00175	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  00178	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN10@PMC_Subtru:

; 707  :                 return (w);

  0017d	8b 55 cc	 mov	 edx, DWORD PTR _w$5[ebp]
  00180	89 55 98	 mov	 DWORD PTR $T2[ebp], edx
  00183	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0018a	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  0018d	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00192	8b 45 98	 mov	 eax, DWORD PTR $T2[ebp]
$LN11@PMC_Subtru:

; 708  :             }
; 709  :         }
; 710  :     }

  00195	52		 push	 edx
  00196	8b cd		 mov	 ecx, ebp
  00198	50		 push	 eax
  00199	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@PMC_Subtru
  0019f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001a4	58		 pop	 eax
  001a5	5a		 pop	 edx
  001a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b0	59		 pop	 ecx
  001b1	5f		 pop	 edi
  001b2	83 c4 68	 add	 esp, 104		; 00000068H
  001b5	3b ec		 cmp	 ebp, esp
  001b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bc	8b e5		 mov	 esp, ebp
  001be	5d		 pop	 ebp
  001bf	c3		 ret	 0
$LN16@PMC_Subtru:
  001c0	01 00 00 00	 DD	 1
  001c4	00 00 00 00	 DD	 $LN15@PMC_Subtru
$LN15@PMC_Subtru:
  001c8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001cc	10 00 00 00	 DD	 16			; 00000010H
  001d0	00 00 00 00	 DD	 $LN13@PMC_Subtru
$LN13@PMC_Subtru:
  001d4	72		 DB	 114			; 00000072H
  001d5	6f		 DB	 111			; 0000006fH
  001d6	6f		 DB	 111			; 0000006fH
  001d7	74		 DB	 116			; 00000074H
  001d8	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_X_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
$T2 = -252						; size = 4
$T3 = -248						; size = 24
$T4 = -224						; size = 4
$T5 = -220						; size = 24
$T6 = -196						; size = 4
$T7 = -192						; size = 24
$T8 = -168						; size = 24
_w$9 = -144						; size = 4
_w_bit_count$10 = -140					; size = 4
_y_bit_count$11 = -136					; size = 4
_x_bit_count$12 = -132					; size = 4
_root$13 = -124						; size = 16
_w$14 = -104						; size = 4
_w_bit_count$15 = -100					; size = 4
_v_bit_count$16 = -96					; size = 4
_root$17 = -88						; size = 16
_w$18 = -68						; size = 4
_w_bit_count$19 = -64					; size = 4
_root$20 = -56						; size = 16
_v_bit_count$21 = -36					; size = 4
_v_lo$22 = -32						; size = 4
_v_hi$23 = -24						; size = 4
_u_bit_count$24 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_L_Imp

; 506  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00017	57		 push	 edi
  00018	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  0001e	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  00040	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 507  :         if (u->IS_ZERO)

  00045	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	83 e1 01	 and	 ecx, 1
  0004e	74 3a		 je	 SHORT $LN2@PMC_Subtru

; 508  :         {
; 509  :             // u が 0 である場合
; 510  : 
; 511  :             if (v == 0)

  00050	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00053	0b 55 10	 or	 edx, DWORD PTR _v$[ebp+4]
  00056	75 0c		 jne	 SHORT $LN4@PMC_Subtru

; 512  :             {
; 513  :                 // v が 0 である場合
; 514  : 
; 515  :                 // u と v がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 516  :                 return (&number_zero);

  00058	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0005d	e9 9d 03 00 00	 jmp	 $LN22@PMC_Subtru

; 517  :             }
; 518  :             else

  00062	eb 21		 jmp	 SHORT $LN5@PMC_Subtru
$LN4@PMC_Subtru:

; 519  :             {
; 520  :                 // v が 0 ではない場合
; 521  : 
; 522  :                 // 演算結果は負となってしまうのでエラーを返す。
; 523  :                 throw OverflowException(L"減算によりオーバーフローが発生しました。");

  00064	68 00 00 00 00	 push	 OFFSET $SG118249
  00069	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0006f	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  00074	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  00079	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@PMC_Subtru:

; 524  :             }
; 525  :         }
; 526  :         else

  00085	e9 75 03 00 00	 jmp	 $LN22@PMC_Subtru
$LN2@PMC_Subtru:

; 527  :         {
; 528  :             // u が 0 ではない場合
; 529  : 
; 530  :             if (v == 0)

  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0008d	0b 4d 10	 or	 ecx, DWORD PTR _v$[ebp+4]
  00090	75 16		 jne	 SHORT $LN6@PMC_Subtru

; 531  :             {
; 532  :                 // v が 0 である場合
; 533  : 
; 534  :                 // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 535  :                 return (DuplicateNumber(u));

  00092	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00095	52		 push	 edx
  00096	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0009b	83 c4 04	 add	 esp, 4
  0009e	e9 5c 03 00 00	 jmp	 $LN22@PMC_Subtru

; 536  :             }
; 537  :             else

  000a3	e9 57 03 00 00	 jmp	 $LN22@PMC_Subtru
$LN6@PMC_Subtru:

; 538  :             {
; 539  :                 // u と v がともに 0 ではない場合
; 540  : 
; 541  :                 // u と v の差を計算する
; 542  :                 if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  000a8	b8 01 00 00 00	 mov	 eax, 1
  000ad	85 c0		 test	 eax, eax
  000af	0f 84 21 02 00
	00		 je	 $LN8@PMC_Subtru

; 543  :                 {
; 544  :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 545  : 
; 546  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000b5	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000b8	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000bb	89 55 f0	 mov	 DWORD PTR _u_bit_count$24[ebp], edx

; 547  :                     _UINT32_T v_hi;
; 548  :                     _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

  000be	8d 45 e8	 lea	 eax, DWORD PTR _v_hi$23[ebp]
  000c1	50		 push	 eax
  000c2	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp+4]
  000c5	51		 push	 ecx
  000c6	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d2	89 45 e0	 mov	 DWORD PTR _v_lo$22[ebp], eax

; 549  :                     if (v_hi == 0)

  000d5	83 7d e8 00	 cmp	 DWORD PTR _v_hi$23[ebp], 0
  000d9	0f 85 fc 00 00
	00		 jne	 $LN10@PMC_Subtru

; 550  :                     {
; 551  :                         // y の値が 32bit で表現可能な場合
; 552  :                         __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

  000df	8b 45 e0	 mov	 eax, DWORD PTR _v_lo$22[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000e8	83 c4 04	 add	 esp, 4
  000eb	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000f0	2b c8		 sub	 ecx, eax
  000f2	89 4d dc	 mov	 DWORD PTR _v_bit_count$21[ebp], ecx

; 553  :                         if (u_bit_count < v_bit_count)

  000f5	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$24[ebp]
  000f8	3b 55 dc	 cmp	 edx, DWORD PTR _v_bit_count$21[ebp]
  000fb	73 26		 jae	 SHORT $LN12@PMC_Subtru

; 554  :                         {
; 555  :                             // 演算結果は負となってしまうのでエラーを返す。
; 556  :                             throw OverflowException(L"減算によりオーバーフローが発生しました。");

  000fd	68 00 00 00 00	 push	 OFFSET $SG118259
  00102	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00108	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  0010d	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  00112	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 __CxxThrowException@8

; 557  :                         }
; 558  :                         else

  0011e	e9 b3 00 00 00	 jmp	 $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 559  :                         {
; 560  :                             ResourceHolderUINT root;

  00123	8d 4d c8	 lea	 ecx, DWORD PTR _root$20[ebp]
  00126	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0012b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 561  :                             __UNIT_TYPE w_bit_count = u_bit_count;

  00132	8b 4d f0	 mov	 ecx, DWORD PTR _u_bit_count$24[ebp]
  00135	89 4d c0	 mov	 DWORD PTR _w_bit_count$19[ebp], ecx

; 562  :                             NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  00138	8b 55 c0	 mov	 edx, DWORD PTR _w_bit_count$19[ebp]
  0013b	52		 push	 edx
  0013c	8d 4d c8	 lea	 ecx, DWORD PTR _root$20[ebp]
  0013f	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00144	89 45 bc	 mov	 DWORD PTR _w$18[ebp], eax

; 563  :                             Subtruct_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, w->BLOCK, w->BLOCK_COUNT);

  00147	8b 45 bc	 mov	 eax, DWORD PTR _w$18[ebp]
  0014a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0014d	51		 push	 ecx
  0014e	8b 55 bc	 mov	 edx, DWORD PTR _w$18[ebp]
  00151	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00154	50		 push	 eax
  00155	8b 4d e0	 mov	 ecx, DWORD PTR _v_lo$22[ebp]
  00158	51		 push	 ecx
  00159	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0015c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0015f	50		 push	 eax
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00163	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00166	52		 push	 edx
  00167	e8 00 00 00 00	 call	 ?Subtruct_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0I@Z ; Palmtree::Math::Core::Internal::Subtruct_X_1W
  0016c	83 c4 14	 add	 esp, 20			; 00000014H

; 564  :                             root.CheckNumber(w);

  0016f	8b 45 bc	 mov	 eax, DWORD PTR _w$18[ebp]
  00172	50		 push	 eax
  00173	8d 4d c8	 lea	 ecx, DWORD PTR _root$20[ebp]
  00176	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 565  :                             CommitNumber(w);

  0017b	8b 4d bc	 mov	 ecx, DWORD PTR _w$18[ebp]
  0017e	51		 push	 ecx
  0017f	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00184	83 c4 04	 add	 esp, 4

; 566  :                             if (w->IS_ZERO)

  00187	8b 55 bc	 mov	 edx, DWORD PTR _w$18[ebp]
  0018a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0018d	83 e0 01	 and	 eax, 1
  00190	74 15		 je	 SHORT $LN14@PMC_Subtru

; 567  :                             {
; 568  :                                 root.DeallocateNumber(w);

  00192	8b 4d bc	 mov	 ecx, DWORD PTR _w$18[ebp]
  00195	51		 push	 ecx
  00196	8d 4d c8	 lea	 ecx, DWORD PTR _root$20[ebp]
  00199	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 569  :                                 w = &number_zero;

  0019e	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _w$18[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 570  :                             }
; 571  :                             else

  001a5	eb 0c		 jmp	 SHORT $LN15@PMC_Subtru
$LN14@PMC_Subtru:

; 572  :                                 root.UnlinkNumber(w);

  001a7	8b 55 bc	 mov	 edx, DWORD PTR _w$18[ebp]
  001aa	52		 push	 edx
  001ab	8d 4d c8	 lea	 ecx, DWORD PTR _root$20[ebp]
  001ae	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN15@PMC_Subtru:

; 573  :                             return (w);

  001b3	8b 45 bc	 mov	 eax, DWORD PTR _w$18[ebp]
  001b6	89 85 3c ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  001bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c3	8d 4d c8	 lea	 ecx, DWORD PTR _root$20[ebp]
  001c6	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001cb	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  001d1	e9 29 02 00 00	 jmp	 $LN22@PMC_Subtru
$LN13@PMC_Subtru:

; 574  :                         }
; 575  :                     }
; 576  :                     else

  001d6	e9 f6 00 00 00	 jmp	 $LN11@PMC_Subtru
$LN10@PMC_Subtru:

; 577  :                     {
; 578  :                         // y の値が 32bit では表現できない場合
; 579  :                         ResourceHolderUINT root;

  001db	8d 4d a8	 lea	 ecx, DWORD PTR _root$17[ebp]
  001de	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  001e3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 580  :                         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

  001ea	8b 4d e8	 mov	 ecx, DWORD PTR _v_hi$23[ebp]
  001ed	51		 push	 ecx
  001ee	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  001f3	83 c4 04	 add	 esp, 4
  001f6	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001fb	2b d0		 sub	 edx, eax
  001fd	89 55 a0	 mov	 DWORD PTR _v_bit_count$16[ebp], edx

; 581  :                         if (u_bit_count < v_bit_count)

  00200	8b 45 f0	 mov	 eax, DWORD PTR _u_bit_count$24[ebp]
  00203	3b 45 a0	 cmp	 eax, DWORD PTR _v_bit_count$16[ebp]
  00206	73 21		 jae	 SHORT $LN16@PMC_Subtru

; 582  :                         {
; 583  :                             // 演算結果は負となってしまうのでエラーを返す。
; 584  :                             throw OverflowException(L"減算によりオーバーフローが発生しました。");

  00208	68 00 00 00 00	 push	 OFFSET $SG118265
  0020d	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00213	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  00218	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  0021d	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00223	51		 push	 ecx
  00224	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN16@PMC_Subtru:

; 585  :                         }
; 586  :                         __UNIT_TYPE w_bit_count = u_bit_count;

  00229	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$24[ebp]
  0022c	89 55 9c	 mov	 DWORD PTR _w_bit_count$15[ebp], edx

; 587  :                         NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  0022f	8b 45 9c	 mov	 eax, DWORD PTR _w_bit_count$15[ebp]
  00232	50		 push	 eax
  00233	8d 4d a8	 lea	 ecx, DWORD PTR _root$17[ebp]
  00236	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0023b	89 45 98	 mov	 DWORD PTR _w$14[ebp], eax

; 588  :                         Subtruct_X_2W(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, w->BLOCK, w->BLOCK_COUNT);

  0023e	8b 4d 98	 mov	 ecx, DWORD PTR _w$14[ebp]
  00241	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00244	52		 push	 edx
  00245	8b 45 98	 mov	 eax, DWORD PTR _w$14[ebp]
  00248	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0024b	51		 push	 ecx
  0024c	8b 55 e0	 mov	 edx, DWORD PTR _v_lo$22[ebp]
  0024f	52		 push	 edx
  00250	8b 45 e8	 mov	 eax, DWORD PTR _v_hi$23[ebp]
  00253	50		 push	 eax
  00254	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00257	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0025a	52		 push	 edx
  0025b	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0025e	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00261	51		 push	 ecx
  00262	e8 00 00 00 00	 call	 ?Subtruct_X_2W@Internal@Core@Math@Palmtree@@YAXPAIIII0I@Z ; Palmtree::Math::Core::Internal::Subtruct_X_2W
  00267	83 c4 18	 add	 esp, 24			; 00000018H

; 589  :                         root.CheckNumber(w);

  0026a	8b 55 98	 mov	 edx, DWORD PTR _w$14[ebp]
  0026d	52		 push	 edx
  0026e	8d 4d a8	 lea	 ecx, DWORD PTR _root$17[ebp]
  00271	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 590  :                         CommitNumber(w);

  00276	8b 45 98	 mov	 eax, DWORD PTR _w$14[ebp]
  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  0027f	83 c4 04	 add	 esp, 4

; 591  :                         if (w->IS_ZERO)

  00282	8b 4d 98	 mov	 ecx, DWORD PTR _w$14[ebp]
  00285	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00288	83 e2 01	 and	 edx, 1
  0028b	74 15		 je	 SHORT $LN17@PMC_Subtru

; 592  :                         {
; 593  :                             root.DeallocateNumber(w);

  0028d	8b 45 98	 mov	 eax, DWORD PTR _w$14[ebp]
  00290	50		 push	 eax
  00291	8d 4d a8	 lea	 ecx, DWORD PTR _root$17[ebp]
  00294	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 594  :                             w = &number_zero;

  00299	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _w$14[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 595  :                         }
; 596  :                         else

  002a0	eb 0c		 jmp	 SHORT $LN18@PMC_Subtru
$LN17@PMC_Subtru:

; 597  :                             root.UnlinkNumber(w);

  002a2	8b 4d 98	 mov	 ecx, DWORD PTR _w$14[ebp]
  002a5	51		 push	 ecx
  002a6	8d 4d a8	 lea	 ecx, DWORD PTR _root$17[ebp]
  002a9	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN18@PMC_Subtru:

; 598  :                         return (w);

  002ae	8b 55 98	 mov	 edx, DWORD PTR _w$14[ebp]
  002b1	89 95 20 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], edx
  002b7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002be	8d 4d a8	 lea	 ecx, DWORD PTR _root$17[ebp]
  002c1	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  002c6	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  002cc	e9 2e 01 00 00	 jmp	 $LN22@PMC_Subtru
$LN11@PMC_Subtru:

; 599  :                     }
; 600  :                 }
; 601  :                 else

  002d1	e9 29 01 00 00	 jmp	 $LN22@PMC_Subtru
$LN8@PMC_Subtru:

; 602  :                 {
; 603  :                     // _UINT64_T が 1 ワードで表現できる場合
; 604  :                     ResourceHolderUINT root;

  002d6	8d 4d 84	 lea	 ecx, DWORD PTR _root$13[ebp]
  002d9	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  002de	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 605  :                     __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;

  002e5	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  002e8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002eb	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _x_bit_count$12[ebp], ecx

; 606  :                     __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

  002f1	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  002f4	52		 push	 edx
  002f5	e8 00 00 00 00	 call	 __LZCNT_ALT_UNIT
  002fa	83 c4 04	 add	 esp, 4
  002fd	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00302	2b c8		 sub	 ecx, eax
  00304	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _y_bit_count$11[ebp], ecx

; 607  :                     if (x_bit_count < y_bit_count)

  0030a	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _x_bit_count$12[ebp]
  00310	3b 95 78 ff ff
	ff		 cmp	 edx, DWORD PTR _y_bit_count$11[ebp]
  00316	73 21		 jae	 SHORT $LN19@PMC_Subtru

; 608  :                     {
; 609  :                         // 演算結果は負となってしまうのでエラーを返す。
; 610  :                         throw OverflowException(L"減算によりオーバーフローが発生しました。");

  00318	68 00 00 00 00	 push	 OFFSET $SG118271
  0031d	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00323	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  00328	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  0032d	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN19@PMC_Subtru:

; 611  :                     }
; 612  :                     __UNIT_TYPE w_bit_count = x_bit_count;

  00339	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _x_bit_count$12[ebp]
  0033f	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _w_bit_count$10[ebp], ecx

; 613  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  00345	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _w_bit_count$10[ebp]
  0034b	52		 push	 edx
  0034c	8d 4d 84	 lea	 ecx, DWORD PTR _root$13[ebp]
  0034f	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00354	89 85 70 ff ff
	ff		 mov	 DWORD PTR _w$9[ebp], eax

; 614  :                     Subtruct_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, w->BLOCK, w->BLOCK_COUNT);

  0035a	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$9[ebp]
  00360	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00363	51		 push	 ecx
  00364	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _w$9[ebp]
  0036a	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0036d	50		 push	 eax
  0036e	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00371	51		 push	 ecx
  00372	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00375	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00378	50		 push	 eax
  00379	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0037c	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0037f	52		 push	 edx
  00380	e8 00 00 00 00	 call	 ?Subtruct_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0I@Z ; Palmtree::Math::Core::Internal::Subtruct_X_1W
  00385	83 c4 14	 add	 esp, 20			; 00000014H

; 615  :                     root.CheckNumber(w);

  00388	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$9[ebp]
  0038e	50		 push	 eax
  0038f	8d 4d 84	 lea	 ecx, DWORD PTR _root$13[ebp]
  00392	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 616  :                     CommitNumber(w);

  00397	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _w$9[ebp]
  0039d	51		 push	 ecx
  0039e	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  003a3	83 c4 04	 add	 esp, 4

; 617  :                     if (w->IS_ZERO)

  003a6	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _w$9[ebp]
  003ac	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  003af	83 e0 01	 and	 eax, 1
  003b2	74 1b		 je	 SHORT $LN20@PMC_Subtru

; 618  :                     {
; 619  :                         root.DeallocateNumber(w);

  003b4	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _w$9[ebp]
  003ba	51		 push	 ecx
  003bb	8d 4d 84	 lea	 ecx, DWORD PTR _root$13[ebp]
  003be	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 620  :                         w = &number_zero;

  003c3	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _w$9[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 621  :                     }
; 622  :                     else

  003cd	eb 0f		 jmp	 SHORT $LN21@PMC_Subtru
$LN20@PMC_Subtru:

; 623  :                         root.UnlinkNumber(w);

  003cf	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _w$9[ebp]
  003d5	52		 push	 edx
  003d6	8d 4d 84	 lea	 ecx, DWORD PTR _root$13[ebp]
  003d9	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN21@PMC_Subtru:

; 624  :                     return (w);

  003de	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$9[ebp]
  003e4	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003ea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003f1	8d 4d 84	 lea	 ecx, DWORD PTR _root$13[ebp]
  003f4	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  003f9	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN22@PMC_Subtru:

; 625  :                 }
; 626  :             }
; 627  :         }
; 628  :     }

  003ff	52		 push	 edx
  00400	8b cd		 mov	 ecx, ebp
  00402	50		 push	 eax
  00403	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@PMC_Subtru
  00409	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0040e	58		 pop	 eax
  0040f	5a		 pop	 edx
  00410	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00413	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0041a	59		 pop	 ecx
  0041b	5f		 pop	 edi
  0041c	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00422	3b ec		 cmp	 ebp, esp
  00424	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00429	8b e5		 mov	 esp, ebp
  0042b	5d		 pop	 ebp
  0042c	c3		 ret	 0
  0042d	0f 1f 00	 npad	 3
$LN32@PMC_Subtru:
  00430	04 00 00 00	 DD	 4
  00434	00 00 00 00	 DD	 $LN31@PMC_Subtru
$LN31@PMC_Subtru:
  00438	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0043c	04 00 00 00	 DD	 4
  00440	00 00 00 00	 DD	 $LN26@PMC_Subtru
  00444	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00448	10 00 00 00	 DD	 16			; 00000010H
  0044c	00 00 00 00	 DD	 $LN27@PMC_Subtru
  00450	a8 ff ff ff	 DD	 -88			; ffffffa8H
  00454	10 00 00 00	 DD	 16			; 00000010H
  00458	00 00 00 00	 DD	 $LN28@PMC_Subtru
  0045c	84 ff ff ff	 DD	 -124			; ffffff84H
  00460	10 00 00 00	 DD	 16			; 00000010H
  00464	00 00 00 00	 DD	 $LN29@PMC_Subtru
$LN29@PMC_Subtru:
  00468	72		 DB	 114			; 00000072H
  00469	6f		 DB	 111			; 0000006fH
  0046a	6f		 DB	 111			; 0000006fH
  0046b	74		 DB	 116			; 00000074H
  0046c	00		 DB	 0
$LN28@PMC_Subtru:
  0046d	72		 DB	 114			; 00000072H
  0046e	6f		 DB	 111			; 0000006fH
  0046f	6f		 DB	 111			; 0000006fH
  00470	74		 DB	 116			; 00000074H
  00471	00		 DB	 0
$LN27@PMC_Subtru:
  00472	72		 DB	 114			; 00000072H
  00473	6f		 DB	 111			; 0000006fH
  00474	6f		 DB	 111			; 0000006fH
  00475	74		 DB	 116			; 00000074H
  00476	00		 DB	 0
$LN26@PMC_Subtru:
  00477	76		 DB	 118			; 00000076H
  00478	5f		 DB	 95			; 0000005fH
  00479	68		 DB	 104			; 00000068H
  0047a	69		 DB	 105			; 00000069H
  0047b	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _root$20[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR _root$17[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$2:
  00010	8d 4d 84	 lea	 ecx, DWORD PTR _root$13[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_L_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
$T2 = -104						; size = 4
$T3 = -100						; size = 24
$T4 = -76						; size = 24
_w$5 = -52						; size = 4
_w_bit_count$6 = -48					; size = 4
_root$7 = -40						; size = 16
_v_bit_count$8 = -20					; size = 4
_u_bit_count$9 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_I_Imp

; 259  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	57		 push	 edi
  00015	8d 7d 98	 lea	 edi, DWORD PTR [ebp-104]
  00018	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 260  :         if (u->IS_ZERO)

  0003f	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	83 e1 01	 and	 ecx, 1
  00048	74 32		 je	 SHORT $LN2@PMC_Subtru

; 261  :         {
; 262  :             // u が 0 である場合
; 263  : 
; 264  :             if (v == 0)

  0004a	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  0004e	75 0c		 jne	 SHORT $LN4@PMC_Subtru

; 265  :             {
; 266  :                 // v が 0 である場合
; 267  : 
; 268  :                 // u と v がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 269  :                 return (&number_zero);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00055	e9 2d 01 00 00	 jmp	 $LN12@PMC_Subtru

; 270  :             }
; 271  :             else

  0005a	eb 1b		 jmp	 SHORT $LN5@PMC_Subtru
$LN4@PMC_Subtru:

; 272  :             {
; 273  :                 // v が 0 ではない場合
; 274  : 
; 275  :                 // 演算結果は負となってしまうのでエラーを返す。
; 276  :                 throw OverflowException(L"減算によりオーバーフローが発生しました。");

  0005c	68 00 00 00 00	 push	 OFFSET $SG118119
  00061	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  00064	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  00069	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  0006e	8d 55 b4	 lea	 edx, DWORD PTR $T4[ebp]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@PMC_Subtru:

; 277  :             }
; 278  :         }
; 279  :         else

  00077	e9 0b 01 00 00	 jmp	 $LN12@PMC_Subtru
$LN2@PMC_Subtru:

; 280  :         {
; 281  :             // u が 0 ではない場合
; 282  : 
; 283  :             if (v == 0)

  0007c	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00080	75 16		 jne	 SHORT $LN6@PMC_Subtru

; 284  :             {
; 285  :                 // v が 0 である場合
; 286  : 
; 287  :                 // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 288  :                 return (DuplicateNumber(u));

  00082	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0008b	83 c4 04	 add	 esp, 4
  0008e	e9 f4 00 00 00	 jmp	 $LN12@PMC_Subtru

; 289  :             }
; 290  :             else

  00093	e9 ef 00 00 00	 jmp	 $LN12@PMC_Subtru
$LN6@PMC_Subtru:

; 291  :             {
; 292  :                 // u と v がともに 0 ではない場合
; 293  : 
; 294  :                 // u と v の差を計算する
; 295  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00098	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0009b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0009e	89 55 f0	 mov	 DWORD PTR _u_bit_count$9[ebp], edx

; 296  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000aa	83 c4 04	 add	 esp, 4
  000ad	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000b2	2b c8		 sub	 ecx, eax
  000b4	89 4d ec	 mov	 DWORD PTR _v_bit_count$8[ebp], ecx

; 297  :                 if (u_bit_count < v_bit_count)

  000b7	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$9[ebp]
  000ba	3b 55 ec	 cmp	 edx, DWORD PTR _v_bit_count$8[ebp]
  000bd	73 20		 jae	 SHORT $LN8@PMC_Subtru

; 298  :                 {
; 299  :                     // 演算結果は負となってしまうのでエラーを返す。
; 300  :                     throw OverflowException(L"減算によりオーバーフローが発生しました。");

  000bf	68 00 00 00 00	 push	 OFFSET $SG118125
  000c4	8d 4d 9c	 lea	 ecx, DWORD PTR $T3[ebp]
  000c7	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  000cc	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  000d1	8d 45 9c	 lea	 eax, DWORD PTR $T3[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 __CxxThrowException@8

; 301  :                 }
; 302  :                 else

  000da	e9 a8 00 00 00	 jmp	 $LN12@PMC_Subtru
$LN8@PMC_Subtru:

; 303  :                 {
; 304  :                     ResourceHolderUINT root;

  000df	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  000e2	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000e7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 305  :                     __UNIT_TYPE w_bit_count = u_bit_count;

  000ee	8b 4d f0	 mov	 ecx, DWORD PTR _u_bit_count$9[ebp]
  000f1	89 4d d0	 mov	 DWORD PTR _w_bit_count$6[ebp], ecx

; 306  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000f4	8b 55 d0	 mov	 edx, DWORD PTR _w_bit_count$6[ebp]
  000f7	52		 push	 edx
  000f8	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  000fb	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00100	89 45 cc	 mov	 DWORD PTR _w$5[ebp], eax

; 307  :                     Subtruct_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v, w->BLOCK, w->BLOCK_COUNT);

  00103	8b 45 cc	 mov	 eax, DWORD PTR _w$5[ebp]
  00106	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00109	51		 push	 ecx
  0010a	8b 55 cc	 mov	 edx, DWORD PTR _w$5[ebp]
  0010d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00110	50		 push	 eax
  00111	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00114	51		 push	 ecx
  00115	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00118	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0011b	50		 push	 eax
  0011c	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0011f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00122	52		 push	 edx
  00123	e8 00 00 00 00	 call	 ?Subtruct_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0I@Z ; Palmtree::Math::Core::Internal::Subtruct_X_1W
  00128	83 c4 14	 add	 esp, 20			; 00000014H

; 308  :                     root.CheckNumber(w);

  0012b	8b 45 cc	 mov	 eax, DWORD PTR _w$5[ebp]
  0012e	50		 push	 eax
  0012f	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  00132	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 309  :                     CommitNumber(w);

  00137	8b 4d cc	 mov	 ecx, DWORD PTR _w$5[ebp]
  0013a	51		 push	 ecx
  0013b	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00140	83 c4 04	 add	 esp, 4

; 310  :                     if (w->IS_ZERO)

  00143	8b 55 cc	 mov	 edx, DWORD PTR _w$5[ebp]
  00146	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00149	83 e0 01	 and	 eax, 1
  0014c	74 15		 je	 SHORT $LN10@PMC_Subtru

; 311  :                     {
; 312  :                         root.DeallocateNumber(w);

  0014e	8b 4d cc	 mov	 ecx, DWORD PTR _w$5[ebp]
  00151	51		 push	 ecx
  00152	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  00155	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 313  :                         w = &number_zero;

  0015a	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _w$5[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 314  :                     }
; 315  :                     else

  00161	eb 0c		 jmp	 SHORT $LN11@PMC_Subtru
$LN10@PMC_Subtru:

; 316  :                         root.UnlinkNumber(w);

  00163	8b 55 cc	 mov	 edx, DWORD PTR _w$5[ebp]
  00166	52		 push	 edx
  00167	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  0016a	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN11@PMC_Subtru:

; 317  :                     return (w);

  0016f	8b 45 cc	 mov	 eax, DWORD PTR _w$5[ebp]
  00172	89 45 98	 mov	 DWORD PTR $T2[ebp], eax
  00175	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0017c	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  0017f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00184	8b 45 98	 mov	 eax, DWORD PTR $T2[ebp]
$LN12@PMC_Subtru:

; 318  :                 }
; 319  :             }
; 320  :         }
; 321  :     }

  00187	52		 push	 edx
  00188	8b cd		 mov	 ecx, ebp
  0018a	50		 push	 eax
  0018b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@PMC_Subtru
  00191	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00196	58		 pop	 eax
  00197	5a		 pop	 edx
  00198	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0019b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a2	59		 pop	 ecx
  001a3	5f		 pop	 edi
  001a4	83 c4 68	 add	 esp, 104		; 00000068H
  001a7	3b ec		 cmp	 ebp, esp
  001a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c3		 ret	 0
  001b2	66 90		 npad	 2
$LN17@PMC_Subtru:
  001b4	01 00 00 00	 DD	 1
  001b8	00 00 00 00	 DD	 $LN16@PMC_Subtru
$LN16@PMC_Subtru:
  001bc	d8 ff ff ff	 DD	 -40			; ffffffd8H
  001c0	10 00 00 00	 DD	 16			; 00000010H
  001c4	00 00 00 00	 DD	 $LN14@PMC_Subtru
$LN14@PMC_Subtru:
  001c8	72		 DB	 114			; 00000072H
  001c9	6f		 DB	 111			; 0000006fH
  001ca	6f		 DB	 111			; 0000006fH
  001cb	74		 DB	 116			; 00000074H
  001cc	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_I_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
tv84 = -44						; size = 4
tv80 = -40						; size = 4
tv75 = -36						; size = 4
tv71 = -32						; size = 4
$T1 = -28						; size = 24
_c$2 = -1						; size = 1
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_wp$ = 24						; size = 4
_w_count$ = 28						; size = 4
?Subtruct_X_2W@Internal@Core@Math@Palmtree@@YAXPAIIII0I@Z PROC ; Palmtree::Math::Core::Internal::Subtruct_X_2W

; 96   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi
  00007	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000a	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 97   :         if (u_count < 2)

  00020	83 7d 0c 02	 cmp	 DWORD PTR _u_count$[ebp], 2
  00024	73 20		 jae	 SHORT $LN2@Subtruct_X

; 98   :         {
; 99   :             // u が 1 ワードしかなかった場合
; 100  : 
; 101  :             // 明らかに演算結果が負になるのでエラーを通知する。
; 102  :             throw OverflowException(L"減算によりオーバーフローが発生しました。");

  00026	68 00 00 00 00	 push	 OFFSET $SG118048
  0002b	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0002e	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  00033	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  00038	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 __CxxThrowException@8

; 103  :         }
; 104  :         else

  00041	e9 a4 00 00 00	 jmp	 $LN4@Subtruct_X
$LN2@Subtruct_X:

; 105  :         {
; 106  :             // x が 2 ワード以上あった場合
; 107  : 
; 108  :             // 最下位のワードの減算をする
; 109  :             char c = _SUBTRUCT_UNIT(0, *up++, v_lo, wp++);

  00046	8b 4d 18	 mov	 ecx, DWORD PTR _wp$[ebp]
  00049	89 4d e0	 mov	 DWORD PTR tv71[ebp], ecx
  0004c	8b 55 18	 mov	 edx, DWORD PTR _wp$[ebp]
  0004f	83 c2 04	 add	 edx, 4
  00052	89 55 18	 mov	 DWORD PTR _wp$[ebp], edx
  00055	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	89 4d dc	 mov	 DWORD PTR tv75[ebp], ecx
  0005d	8b 55 08	 mov	 edx, DWORD PTR _up$[ebp]
  00060	83 c2 04	 add	 edx, 4
  00063	89 55 08	 mov	 DWORD PTR _up$[ebp], edx
  00066	8b 45 e0	 mov	 eax, DWORD PTR tv71[ebp]
  00069	50		 push	 eax
  0006a	8b 4d 14	 mov	 ecx, DWORD PTR _v_lo$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 55 dc	 mov	 edx, DWORD PTR tv75[ebp]
  00071	52		 push	 edx
  00072	6a 00		 push	 0
  00074	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00079	83 c4 10	 add	 esp, 16			; 00000010H
  0007c	88 45 ff	 mov	 BYTE PTR _c$2[ebp], al

; 110  : 
; 111  :             // 最下位から 2 番目のワードの減算をする。
; 112  :             c = _SUBTRUCT_UNIT(c, *up++, v_hi, wp++);

  0007f	8b 45 18	 mov	 eax, DWORD PTR _wp$[ebp]
  00082	89 45 d8	 mov	 DWORD PTR tv80[ebp], eax
  00085	8b 4d 18	 mov	 ecx, DWORD PTR _wp$[ebp]
  00088	83 c1 04	 add	 ecx, 4
  0008b	89 4d 18	 mov	 DWORD PTR _wp$[ebp], ecx
  0008e	8b 55 08	 mov	 edx, DWORD PTR _up$[ebp]
  00091	8b 02		 mov	 eax, DWORD PTR [edx]
  00093	89 45 d4	 mov	 DWORD PTR tv84[ebp], eax
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  00099	83 c1 04	 add	 ecx, 4
  0009c	89 4d 08	 mov	 DWORD PTR _up$[ebp], ecx
  0009f	8b 55 d8	 mov	 edx, DWORD PTR tv80[ebp]
  000a2	52		 push	 edx
  000a3	8b 45 10	 mov	 eax, DWORD PTR _v_hi$[ebp]
  000a6	50		 push	 eax
  000a7	8b 4d d4	 mov	 ecx, DWORD PTR tv84[ebp]
  000aa	51		 push	 ecx
  000ab	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$2[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  000b5	83 c4 10	 add	 esp, 16			; 00000010H
  000b8	88 45 ff	 mov	 BYTE PTR _c$2[ebp], al

; 113  :             u_count -= 2;

  000bb	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  000be	83 e8 02	 sub	 eax, 2
  000c1	89 45 0c	 mov	 DWORD PTR _u_count$[ebp], eax

; 114  :             w_count -= 2;

  000c4	8b 4d 1c	 mov	 ecx, DWORD PTR _w_count$[ebp]
  000c7	83 e9 02	 sub	 ecx, 2
  000ca	89 4d 1c	 mov	 DWORD PTR _w_count$[ebp], ecx

; 115  : 
; 116  :             // 残りの桁の繰り上がりを計算し、復帰する。
; 117  :             DoBorrow(c, up, u_count, wp, w_count);

  000cd	8b 55 1c	 mov	 edx, DWORD PTR _w_count$[ebp]
  000d0	52		 push	 edx
  000d1	8b 45 18	 mov	 eax, DWORD PTR _wp$[ebp]
  000d4	50		 push	 eax
  000d5	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  000d8	51		 push	 ecx
  000d9	8b 55 08	 mov	 edx, DWORD PTR _up$[ebp]
  000dc	52		 push	 edx
  000dd	0f b6 45 ff	 movzx	 eax, BYTE PTR _c$2[ebp]
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 ?DoBorrow@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z ; Palmtree::Math::Core::Internal::DoBorrow
  000e7	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@Subtruct_X:

; 118  :         }
; 119  :     }

  000ea	5f		 pop	 edi
  000eb	83 c4 2c	 add	 esp, 44			; 0000002cH
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
?Subtruct_X_2W@Internal@Core@Math@Palmtree@@YAXPAIIII0I@Z ENDP ; Palmtree::Math::Core::Internal::Subtruct_X_2W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
tv70 = -12						; size = 4
tv66 = -8						; size = 4
_c$ = -1						; size = 1
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
_w_count$ = 24						; size = 4
?Subtruct_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0I@Z PROC ; Palmtree::Math::Core::Internal::Subtruct_X_1W

; 84   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 85   :         // 最下桁の減算を行う
; 86   :         char c = _SUBTRUCT_UNIT(0, *up++, v, wp++);

  00025	8b 45 14	 mov	 eax, DWORD PTR _wp$[ebp]
  00028	89 45 f8	 mov	 DWORD PTR tv66[ebp], eax
  0002b	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  0002e	83 c1 04	 add	 ecx, 4
  00031	89 4d 14	 mov	 DWORD PTR _wp$[ebp], ecx
  00034	8b 55 08	 mov	 edx, DWORD PTR _up$[ebp]
  00037	8b 02		 mov	 eax, DWORD PTR [edx]
  00039	89 45 f4	 mov	 DWORD PTR tv70[ebp], eax
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  0003f	83 c1 04	 add	 ecx, 4
  00042	89 4d 08	 mov	 DWORD PTR _up$[ebp], ecx
  00045	8b 55 f8	 mov	 edx, DWORD PTR tv66[ebp]
  00048	52		 push	 edx
  00049	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR tv70[ebp]
  00050	51		 push	 ecx
  00051	6a 00		 push	 0
  00053	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00058	83 c4 10	 add	 esp, 16			; 00000010H
  0005b	88 45 ff	 mov	 BYTE PTR _c$[ebp], al

; 87   :         --u_count;

  0005e	8b 55 0c	 mov	 edx, DWORD PTR _u_count$[ebp]
  00061	83 ea 01	 sub	 edx, 1
  00064	89 55 0c	 mov	 DWORD PTR _u_count$[ebp], edx

; 88   :         --w_count;

  00067	8b 45 18	 mov	 eax, DWORD PTR _w_count$[ebp]
  0006a	83 e8 01	 sub	 eax, 1
  0006d	89 45 18	 mov	 DWORD PTR _w_count$[ebp], eax

; 89   : 
; 90   :         // 残りの桁の繰上りを行い復帰する。
; 91   :         DoBorrow(c, up, u_count, wp, w_count);

  00070	8b 4d 18	 mov	 ecx, DWORD PTR _w_count$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 14	 mov	 edx, DWORD PTR _wp$[ebp]
  00077	52		 push	 edx
  00078	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  0007f	51		 push	 ecx
  00080	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 ?DoBorrow@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z ; Palmtree::Math::Core::Internal::DoBorrow
  0008a	83 c4 14	 add	 esp, 20			; 00000014H

; 92   :     }

  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
?Subtruct_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0I@Z ENDP ; Palmtree::Math::Core::Internal::Subtruct_X_1W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
tv88 = -36						; size = 4
tv79 = -32						; size = 4
tv75 = -28						; size = 4
$T1 = -24						; size = 24
_c$ = 8							; size = 1
_up$ = 12						; size = 4
_u_count$ = 16						; size = 4
_wp$ = 20						; size = 4
_w_count$ = 24						; size = 4
?DoBorrow@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z PROC ; Palmtree::Math::Core::Internal::DoBorrow

; 38   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  0002b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@DoBorrow:

; 39   :         // 桁借りを続く限り行う
; 40   :         for (;;)
; 41   :         {
; 42   :             if (u_count <= 0)

  00030	83 7d 10 00	 cmp	 DWORD PTR _u_count$[ebp], 0
  00034	77 2d		 ja	 SHORT $LN7@DoBorrow

; 43   :             {
; 44   :                 // x の最上位まで達してしまった場合
; 45   : 
; 46   :                 if (c)

  00036	0f be 45 08	 movsx	 eax, BYTE PTR _c$[ebp]
  0003a	85 c0		 test	 eax, eax
  0003c	74 1b		 je	 SHORT $LN9@DoBorrow

; 47   :                 {
; 48   :                     // かつそれでも桁借りを行う必要がある場合
; 49   : 
; 50   :                     // 減算結果が負になってしまったので呼び出し元に通知する。
; 51   :                     throw OverflowException(L"減算によりオーバーフローが発生しました。");

  0003e	68 00 00 00 00	 push	 OFFSET $SG118025
  00043	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00046	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  0004b	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  00050	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@DoBorrow:

; 52   :                 }
; 53   : 
; 54   :                 // xの最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 55   : 
; 56   :                 return;

  00059	e9 9e 00 00 00	 jmp	 $LN12@DoBorrow
  0005e	e9 94 00 00 00	 jmp	 $LN8@DoBorrow
$LN7@DoBorrow:

; 57   :             }
; 58   :             else if (c)

  00063	0f be 55 08	 movsx	 edx, BYTE PTR _c$[ebp]
  00067	85 d2		 test	 edx, edx
  00069	74 4e		 je	 SHORT $LN5@DoBorrow

; 59   :             {
; 60   :                 // xの最上位に達しておらず、かつボローが立っている場合
; 61   : 
; 62   :                 // 桁借りを継続する
; 63   :                 c = _SUBTRUCT_UNIT(c, *up++, 0, wp++);

  0006b	8b 45 14	 mov	 eax, DWORD PTR _wp$[ebp]
  0006e	89 45 e4	 mov	 DWORD PTR tv75[ebp], eax
  00071	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  00074	83 c1 04	 add	 ecx, 4
  00077	89 4d 14	 mov	 DWORD PTR _wp$[ebp], ecx
  0007a	8b 55 0c	 mov	 edx, DWORD PTR _up$[ebp]
  0007d	8b 02		 mov	 eax, DWORD PTR [edx]
  0007f	89 45 e0	 mov	 DWORD PTR tv79[ebp], eax
  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _up$[ebp]
  00085	83 c1 04	 add	 ecx, 4
  00088	89 4d 0c	 mov	 DWORD PTR _up$[ebp], ecx
  0008b	8b 55 e4	 mov	 edx, DWORD PTR tv75[ebp]
  0008e	52		 push	 edx
  0008f	6a 00		 push	 0
  00091	8b 45 e0	 mov	 eax, DWORD PTR tv79[ebp]
  00094	50		 push	 eax
  00095	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0009f	83 c4 10	 add	 esp, 16			; 00000010H
  000a2	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 64   :                 --u_count;

  000a5	8b 55 10	 mov	 edx, DWORD PTR _u_count$[ebp]
  000a8	83 ea 01	 sub	 edx, 1
  000ab	89 55 10	 mov	 DWORD PTR _u_count$[ebp], edx

; 65   :                 --w_count;

  000ae	8b 45 18	 mov	 eax, DWORD PTR _w_count$[ebp]
  000b1	83 e8 01	 sub	 eax, 1
  000b4	89 45 18	 mov	 DWORD PTR _w_count$[ebp], eax

; 66   :             }
; 67   :             else

  000b7	eb 3e		 jmp	 SHORT $LN8@DoBorrow
$LN5@DoBorrow:

; 68   :             {
; 69   :                 // xの最上位に達しておらず、かつボローが立っていない場合
; 70   : 
; 71   :                 // 桁借りを中断し、xの残りのデータをzにそのまま複写し、正常復帰する。
; 72   :                 while (u_count > 0)

  000b9	83 7d 10 00	 cmp	 DWORD PTR _u_count$[ebp], 0
  000bd	76 36		 jbe	 SHORT $LN6@DoBorrow

; 73   :                 {
; 74   :                     *wp++ = *up++;

  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _up$[ebp]
  000c2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c4	89 55 dc	 mov	 DWORD PTR tv88[ebp], edx
  000c7	8b 45 0c	 mov	 eax, DWORD PTR _up$[ebp]
  000ca	83 c0 04	 add	 eax, 4
  000cd	89 45 0c	 mov	 DWORD PTR _up$[ebp], eax
  000d0	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  000d3	8b 55 dc	 mov	 edx, DWORD PTR tv88[ebp]
  000d6	89 11		 mov	 DWORD PTR [ecx], edx
  000d8	8b 45 14	 mov	 eax, DWORD PTR _wp$[ebp]
  000db	83 c0 04	 add	 eax, 4
  000de	89 45 14	 mov	 DWORD PTR _wp$[ebp], eax

; 75   :                     --u_count;

  000e1	8b 4d 10	 mov	 ecx, DWORD PTR _u_count$[ebp]
  000e4	83 e9 01	 sub	 ecx, 1
  000e7	89 4d 10	 mov	 DWORD PTR _u_count$[ebp], ecx

; 76   :                     --w_count;

  000ea	8b 55 18	 mov	 edx, DWORD PTR _w_count$[ebp]
  000ed	83 ea 01	 sub	 edx, 1
  000f0	89 55 18	 mov	 DWORD PTR _w_count$[ebp], edx

; 77   :                 }

  000f3	eb c4		 jmp	 SHORT $LN5@DoBorrow
$LN6@DoBorrow:

; 78   :                 return;

  000f5	eb 05		 jmp	 SHORT $LN12@DoBorrow
$LN8@DoBorrow:

; 79   :             }
; 80   :         }

  000f7	e9 34 ff ff ff	 jmp	 $LN4@DoBorrow
$LN12@DoBorrow:

; 81   :     }

  000fc	83 c4 24	 add	 esp, 36			; 00000024H
  000ff	3b ec		 cmp	 ebp, esp
  00101	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
?DoBorrow@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z ENDP ; Palmtree::Math::Core::Internal::DoBorrow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_2WORDS_SBB PROC

; 2314 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2315 : #ifdef _MSC_VER
; 2316 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2317 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2318 : #elif defined(__GNUC__)
; 2319 : #ifdef _M_IX86
; 2320 :     __asm__ volatile (
; 2321 :         "addb\t$-1, %0\n\t"
; 2322 :         "movl\t(%1), %%ecx\n\t"
; 2323 :         "sbbl\t(%2), %%ecx\n\t"
; 2324 :         "movl\t%%ecx, (%3)\n\t"
; 2325 :         "movl\t4(%1), %%ecx\n\t"
; 2326 :         "sbbl\t4(%2), %%ecx\n\t"
; 2327 :         "movl\t%%ecx, 4(%3)\n\t"
; 2328 :         "setc\t%0"
; 2329 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2330 :         :
; 2331 :         : "cc", "memory", "%ecx"
; 2332 : );
; 2333 : #elif defined(_M_X64)
; 2334 :     __asm__ volatile (
; 2335 :         "addb\t$-1, %0\n\t"
; 2336 :         "movq\t(%1), %%rcx\n\t"
; 2337 :         "sbbq\t(%2), %%rcx\n\t"
; 2338 :         "movq\t%%rcx, (%3)\n\t"
; 2339 :         "movq\t8(%1), %%rcx\n\t"
; 2340 :         "sbbq\t8(%2), %%rcx\n\t"
; 2341 :         "movq\t%%rcx, 8(%3)\n\t"
; 2342 :         "setc\t%0"
; 2343 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2344 :         :
; 2345 :         : "cc", "memory", "%rcx"
; 2346 : );
; 2347 : #else
; 2348 : #error unknown platform
; 2349 : #endif
; 2350 : #else
; 2351 : #error unknown compiler
; 2352 : #endif
; 2353 :     return (c);

  00081	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 2354 : }

  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
__SUBTRUCT_2WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_4WORDS_SBB PROC

; 2128 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2129 : #ifdef _MSC_VER
; 2130 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2131 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2132 :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2133 :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2134 : #elif defined(__GNUC__)
; 2135 : #ifdef _M_IX86
; 2136 :     __asm__ volatile (
; 2137 :         "addb\t$-1, %0\n\t"
; 2138 :         "movl\t(%1), %%ecx\n\t"
; 2139 :         "sbbl\t(%2), %%ecx\n\t"
; 2140 :         "movl\t%%ecx, (%3)\n\t"
; 2141 :         "movl\t4(%1), %%ecx\n\t"
; 2142 :         "sbbl\t4(%2), %%ecx\n\t"
; 2143 :         "movl\t%%ecx, 4(%3)\n\t"
; 2144 :         "movl\t8(%1), %%ecx\n\t"
; 2145 :         "sbbl\t8(%2), %%ecx\n\t"
; 2146 :         "movl\t%%ecx, 8(%3)\n\t"
; 2147 :         "movl\t12(%1), %%ecx\n\t"
; 2148 :         "sbbl\t12(%2), %%ecx\n\t"
; 2149 :         "movl\t%%ecx, 12(%3)\n\t"
; 2150 :         "setc\t%0"
; 2151 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2152 :         :
; 2153 :         : "cc", "memory", "%ecx"
; 2154 : );
; 2155 : #elif defined(_M_X64)
; 2156 :     __asm__ volatile (
; 2157 :         "addb\t$-1, %0\n\t"
; 2158 :         "movq\t(%1), %%rcx\n\t"
; 2159 :         "sbbq\t(%2), %%rcx\n\t"
; 2160 :         "movq\t%%rcx, (%3)\n\t"
; 2161 :         "movq\t8(%1), %%rcx\n\t"
; 2162 :         "sbbq\t8(%2), %%rcx\n\t"
; 2163 :         "movq\t%%rcx, 8(%3)\n\t"
; 2164 :         "movq\t16(%1), %%rcx\n\t"
; 2165 :         "sbbq\t16(%2), %%rcx\n\t"
; 2166 :         "movq\t%%rcx, 16(%3)\n\t"
; 2167 :         "movq\t24(%1), %%rcx\n\t"
; 2168 :         "sbbq\t24(%2), %%rcx\n\t"
; 2169 :         "movq\t%%rcx, 24(%3)\n\t"
; 2170 :         "setc\t%0"
; 2171 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2172 :         :
; 2173 :         : "cc", "memory", "%rcx"
; 2174 : );
; 2175 : #else
; 2176 : #error unknown platform
; 2177 : #endif
; 2178 : #else
; 2179 : #error unknown compiler
; 2180 : #endif
; 2181 :     return (c);

  000f2	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 2182 : }

  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
__SUBTRUCT_4WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_8WORDS_SBB PROC

; 1872 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1873 : #ifdef _MSC_VER
; 1874 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1875 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1876 :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1877 :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1878 :     c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1879 :     c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1880 :     c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1881 :     c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1882 : #elif defined(__GNUC__)
; 1883 : #ifdef _M_IX86
; 1884 :     __asm__ volatile (
; 1885 :         "addb\t$-1, %0\n\t"
; 1886 :         "movl\t(%1), %%ecx\n\t"
; 1887 :         "sbbl\t(%2), %%ecx\n\t"
; 1888 :         "movl\t%%ecx, (%3)\n\t"
; 1889 :         "movl\t4(%1), %%ecx\n\t"
; 1890 :         "sbbl\t4(%2), %%ecx\n\t"
; 1891 :         "movl\t%%ecx, 4(%3)\n\t"
; 1892 :         "movl\t8(%1), %%ecx\n\t"
; 1893 :         "sbbl\t8(%2), %%ecx\n\t"
; 1894 :         "movl\t%%ecx, 8(%3)\n\t"
; 1895 :         "movl\t12(%1), %%ecx\n\t"
; 1896 :         "sbbl\t12(%2), %%ecx\n\t"
; 1897 :         "movl\t%%ecx, 12(%3)\n\t"
; 1898 :         "movl\t16(%1), %%ecx\n\t"
; 1899 :         "sbbl\t16(%2), %%ecx\n\t"
; 1900 :         "movl\t%%ecx, 16(%3)\n\t"
; 1901 :         "movl\t20(%1), %%ecx\n\t"
; 1902 :         "sbbl\t20(%2), %%ecx\n\t"
; 1903 :         "movl\t%%ecx, 20(%3)\n\t"
; 1904 :         "movl\t24(%1), %%ecx\n\t"
; 1905 :         "sbbl\t24(%2), %%ecx\n\t"
; 1906 :         "movl\t%%ecx, 24(%3)\n\t"
; 1907 :         "movl\t28(%1), %%ecx\n\t"
; 1908 :         "sbbl\t28(%2), %%ecx\n\t"
; 1909 :         "movl\t%%ecx, 28(%3)\n\t"
; 1910 :         "setc\t%0"
; 1911 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1912 :         :
; 1913 :         : "cc", "memory", "%ecx"
; 1914 : );
; 1915 : #elif defined(_M_X64)
; 1916 :     __asm__ volatile (
; 1917 :         "addb\t$-1, %0\n\t"
; 1918 :         "movq\t(%1), %%rcx\n\t"
; 1919 :         "sbbq\t(%2), %%rcx\n\t"
; 1920 :         "movq\t%%rcx, (%3)\n\t"
; 1921 :         "movq\t8(%1), %%rcx\n\t"
; 1922 :         "sbbq\t8(%2), %%rcx\n\t"
; 1923 :         "movq\t%%rcx, 8(%3)\n\t"
; 1924 :         "movq\t16(%1), %%rcx\n\t"
; 1925 :         "sbbq\t16(%2), %%rcx\n\t"
; 1926 :         "movq\t%%rcx, 16(%3)\n\t"
; 1927 :         "movq\t24(%1), %%rcx\n\t"
; 1928 :         "sbbq\t24(%2), %%rcx\n\t"
; 1929 :         "movq\t%%rcx, 24(%3)\n\t"
; 1930 :         "movq\t32(%1), %%rcx\n\t"
; 1931 :         "sbbq\t32(%2), %%rcx\n\t"
; 1932 :         "movq\t%%rcx, 32(%3)\n\t"
; 1933 :         "movq\t40(%1), %%rcx\n\t"
; 1934 :         "sbbq\t40(%2), %%rcx\n\t"
; 1935 :         "movq\t%%rcx, 40(%3)\n\t"
; 1936 :         "movq\t48(%1), %%rcx\n\t"
; 1937 :         "sbbq\t48(%2), %%rcx\n\t"
; 1938 :         "movq\t%%rcx, 48(%3)\n\t"
; 1939 :         "movq\t56(%1), %%rcx\n\t"
; 1940 :         "sbbq\t56(%2), %%rcx\n\t"
; 1941 :         "movq\t%%rcx, 56(%3)\n\t"
; 1942 :         "setc\t%0"
; 1943 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1944 :         :
; 1945 :         : "cc", "memory", "%rcx"
; 1946 : );
; 1947 : #else
; 1948 : #error unknown platform
; 1949 : #endif
; 1950 : #else
; 1951 : #error unknown compiler
; 1952 : #endif
; 1953 :     return (c);

  001da	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1954 : }

  001dd	3b ec		 cmp	 ebp, esp
  001df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
__SUBTRUCT_8WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_16WORDS_SBB PROC

; 1476 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1477 : #ifdef _MSC_VER
; 1478 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1479 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1480 :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1481 :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1482 :     c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1483 :     c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1484 :     c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1485 :     c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1486 :     c = _SUBTRUCT_UNIT(c, xp[8], yp[8], &zp[8]);

  001da	b9 04 00 00 00	 mov	 ecx, 4
  001df	c1 e1 03	 shl	 ecx, 3
  001e2	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 03	 shl	 edx, 3
  001ee	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 03	 shl	 edx, 3
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00200	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00203	51		 push	 ecx
  00204	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1487 :     c = _SUBTRUCT_UNIT(c, xp[9], yp[9], &zp[9]);

  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 09	 imul	 ecx, eax, 9
  0021c	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0021f	51		 push	 ecx
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	6b c2 09	 imul	 eax, edx, 9
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0022b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0022e	52		 push	 edx
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 09	 imul	 ecx, eax, 9
  00237	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0023a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0023d	50		 push	 eax
  0023e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00248	83 c4 10	 add	 esp, 16			; 00000010H
  0024b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1488 :     c = _SUBTRUCT_UNIT(c, xp[10], yp[10], &zp[10]);

  0024e	ba 04 00 00 00	 mov	 edx, 4
  00253	6b c2 0a	 imul	 eax, edx, 10
  00256	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00259	50		 push	 eax
  0025a	b9 04 00 00 00	 mov	 ecx, 4
  0025f	6b d1 0a	 imul	 edx, ecx, 10
  00262	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00265	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00268	51		 push	 ecx
  00269	ba 04 00 00 00	 mov	 edx, 4
  0026e	6b c2 0a	 imul	 eax, edx, 10
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00274	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00277	52		 push	 edx
  00278	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1489 :     c = _SUBTRUCT_UNIT(c, xp[11], yp[11], &zp[11]);

  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	6b d1 0b	 imul	 edx, ecx, 11
  00290	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00293	52		 push	 edx
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 0b	 imul	 ecx, eax, 11
  0029c	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0029f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002a2	50		 push	 eax
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 0b	 imul	 edx, ecx, 11
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  002ae	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002b1	51		 push	 ecx
  002b2	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1490 :     c = _SUBTRUCT_UNIT(c, xp[12], yp[12], &zp[12]);

  002c2	b8 04 00 00 00	 mov	 eax, 4
  002c7	6b c8 0c	 imul	 ecx, eax, 12
  002ca	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  002cd	51		 push	 ecx
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	6b c2 0c	 imul	 eax, edx, 12
  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  002d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002dc	52		 push	 edx
  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 0c	 imul	 ecx, eax, 12
  002e5	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  002e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002eb	50		 push	 eax
  002ec	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  002f6	83 c4 10	 add	 esp, 16			; 00000010H
  002f9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1491 :     c = _SUBTRUCT_UNIT(c, xp[13], yp[13], &zp[13]);

  002fc	ba 04 00 00 00	 mov	 edx, 4
  00301	6b c2 0d	 imul	 eax, edx, 13
  00304	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00307	50		 push	 eax
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	6b d1 0d	 imul	 edx, ecx, 13
  00310	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00313	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00316	51		 push	 ecx
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 0d	 imul	 eax, edx, 13
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00322	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00325	52		 push	 edx
  00326	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1492 :     c = _SUBTRUCT_UNIT(c, xp[14], yp[14], &zp[14]);

  00336	b9 04 00 00 00	 mov	 ecx, 4
  0033b	6b d1 0e	 imul	 edx, ecx, 14
  0033e	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00341	52		 push	 edx
  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 0e	 imul	 ecx, eax, 14
  0034a	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0034d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00350	50		 push	 eax
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	6b d1 0e	 imul	 edx, ecx, 14
  00359	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0035c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0035f	51		 push	 ecx
  00360	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1493 :     c = _SUBTRUCT_UNIT(c, xp[15], yp[15], &zp[15]);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 0f	 imul	 ecx, eax, 15
  00378	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0037b	51		 push	 ecx
  0037c	ba 04 00 00 00	 mov	 edx, 4
  00381	6b c2 0f	 imul	 eax, edx, 15
  00384	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00387	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0038a	52		 push	 edx
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 0f	 imul	 ecx, eax, 15
  00393	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00396	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00399	50		 push	 eax
  0039a	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  003a4	83 c4 10	 add	 esp, 16			; 00000010H
  003a7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1494 : #elif defined(__GNUC__)
; 1495 : #ifdef _M_IX86
; 1496 :     __asm__ volatile (
; 1497 :         "addb\t$-1, %0\n\t"
; 1498 :         "movl\t(%1), %%ecx\n\t"
; 1499 :         "sbbl\t(%2), %%ecx\n\t"
; 1500 :         "movl\t%%ecx, (%3)\n\t"
; 1501 :         "movl\t4(%1), %%ecx\n\t"
; 1502 :         "sbbl\t4(%2), %%ecx\n\t"
; 1503 :         "movl\t%%ecx, 4(%3)\n\t"
; 1504 :         "movl\t8(%1), %%ecx\n\t"
; 1505 :         "sbbl\t8(%2), %%ecx\n\t"
; 1506 :         "movl\t%%ecx, 8(%3)\n\t"
; 1507 :         "movl\t12(%1), %%ecx\n\t"
; 1508 :         "sbbl\t12(%2), %%ecx\n\t"
; 1509 :         "movl\t%%ecx, 12(%3)\n\t"
; 1510 :         "movl\t16(%1), %%ecx\n\t"
; 1511 :         "sbbl\t16(%2), %%ecx\n\t"
; 1512 :         "movl\t%%ecx, 16(%3)\n\t"
; 1513 :         "movl\t20(%1), %%ecx\n\t"
; 1514 :         "sbbl\t20(%2), %%ecx\n\t"
; 1515 :         "movl\t%%ecx, 20(%3)\n\t"
; 1516 :         "movl\t24(%1), %%ecx\n\t"
; 1517 :         "sbbl\t24(%2), %%ecx\n\t"
; 1518 :         "movl\t%%ecx, 24(%3)\n\t"
; 1519 :         "movl\t28(%1), %%ecx\n\t"
; 1520 :         "sbbl\t28(%2), %%ecx\n\t"
; 1521 :         "movl\t%%ecx, 28(%3)\n\t"
; 1522 :         "movl\t32(%1), %%ecx\n\t"
; 1523 :         "sbbl\t32(%2), %%ecx\n\t"
; 1524 :         "movl\t%%ecx, 32(%3)\n\t"
; 1525 :         "movl\t36(%1), %%ecx\n\t"
; 1526 :         "sbbl\t36(%2), %%ecx\n\t"
; 1527 :         "movl\t%%ecx, 36(%3)\n\t"
; 1528 :         "movl\t40(%1), %%ecx\n\t"
; 1529 :         "sbbl\t40(%2), %%ecx\n\t"
; 1530 :         "movl\t%%ecx, 40(%3)\n\t"
; 1531 :         "movl\t44(%1), %%ecx\n\t"
; 1532 :         "sbbl\t44(%2), %%ecx\n\t"
; 1533 :         "movl\t%%ecx, 44(%3)\n\t"
; 1534 :         "movl\t48(%1), %%ecx\n\t"
; 1535 :         "sbbl\t48(%2), %%ecx\n\t"
; 1536 :         "movl\t%%ecx, 48(%3)\n\t"
; 1537 :         "movl\t52(%1), %%ecx\n\t"
; 1538 :         "sbbl\t52(%2), %%ecx\n\t"
; 1539 :         "movl\t%%ecx, 52(%3)\n\t"
; 1540 :         "movl\t56(%1), %%ecx\n\t"
; 1541 :         "sbbl\t56(%2), %%ecx\n\t"
; 1542 :         "movl\t%%ecx, 56(%3)\n\t"
; 1543 :         "movl\t60(%1), %%ecx\n\t"
; 1544 :         "sbbl\t60(%2), %%ecx\n\t"
; 1545 :         "movl\t%%ecx, 60(%3)\n\t"
; 1546 :         "setc\t%0"
; 1547 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1548 :         :
; 1549 :         : "cc", "memory", "%ecx"
; 1550 : );
; 1551 : #elif defined(_M_X64)
; 1552 :     __asm__ volatile (
; 1553 :         "addb\t$-1, %0\n\t"
; 1554 :         "movq\t(%1), %%rcx\n\t"
; 1555 :         "sbbq\t(%2), %%rcx\n\t"
; 1556 :         "movq\t%%rcx, (%3)\n\t"
; 1557 :         "movq\t8(%1), %%rcx\n\t"
; 1558 :         "sbbq\t8(%2), %%rcx\n\t"
; 1559 :         "movq\t%%rcx, 8(%3)\n\t"
; 1560 :         "movq\t16(%1), %%rcx\n\t"
; 1561 :         "sbbq\t16(%2), %%rcx\n\t"
; 1562 :         "movq\t%%rcx, 16(%3)\n\t"
; 1563 :         "movq\t24(%1), %%rcx\n\t"
; 1564 :         "sbbq\t24(%2), %%rcx\n\t"
; 1565 :         "movq\t%%rcx, 24(%3)\n\t"
; 1566 :         "movq\t32(%1), %%rcx\n\t"
; 1567 :         "sbbq\t32(%2), %%rcx\n\t"
; 1568 :         "movq\t%%rcx, 32(%3)\n\t"
; 1569 :         "movq\t40(%1), %%rcx\n\t"
; 1570 :         "sbbq\t40(%2), %%rcx\n\t"
; 1571 :         "movq\t%%rcx, 40(%3)\n\t"
; 1572 :         "movq\t48(%1), %%rcx\n\t"
; 1573 :         "sbbq\t48(%2), %%rcx\n\t"
; 1574 :         "movq\t%%rcx, 48(%3)\n\t"
; 1575 :         "movq\t56(%1), %%rcx\n\t"
; 1576 :         "sbbq\t56(%2), %%rcx\n\t"
; 1577 :         "movq\t%%rcx, 56(%3)\n\t"
; 1578 :         "movq\t64(%1), %%rcx\n\t"
; 1579 :         "sbbq\t64(%2), %%rcx\n\t"
; 1580 :         "movq\t%%rcx, 64(%3)\n\t"
; 1581 :         "movq\t72(%1), %%rcx\n\t"
; 1582 :         "sbbq\t72(%2), %%rcx\n\t"
; 1583 :         "movq\t%%rcx, 72(%3)\n\t"
; 1584 :         "movq\t80(%1), %%rcx\n\t"
; 1585 :         "sbbq\t80(%2), %%rcx\n\t"
; 1586 :         "movq\t%%rcx, 80(%3)\n\t"
; 1587 :         "movq\t88(%1), %%rcx\n\t"
; 1588 :         "sbbq\t88(%2), %%rcx\n\t"
; 1589 :         "movq\t%%rcx, 88(%3)\n\t"
; 1590 :         "movq\t96(%1), %%rcx\n\t"
; 1591 :         "sbbq\t96(%2), %%rcx\n\t"
; 1592 :         "movq\t%%rcx, 96(%3)\n\t"
; 1593 :         "movq\t104(%1), %%rcx\n\t"
; 1594 :         "sbbq\t104(%2), %%rcx\n\t"
; 1595 :         "movq\t%%rcx, 104(%3)\n\t"
; 1596 :         "movq\t112(%1), %%rcx\n\t"
; 1597 :         "sbbq\t112(%2), %%rcx\n\t"
; 1598 :         "movq\t%%rcx, 112(%3)\n\t"
; 1599 :         "movq\t120(%1), %%rcx\n\t"
; 1600 :         "sbbq\t120(%2), %%rcx\n\t"
; 1601 :         "movq\t%%rcx, 120(%3)\n\t"
; 1602 :         "setc\t%0"
; 1603 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1604 :         :
; 1605 :         : "cc", "memory", "%rcx"
; 1606 : );
; 1607 : #else
; 1608 : #error unknown platform
; 1609 : #endif
; 1610 : #else
; 1611 : #error unknown compiler
; 1612 : #endif
; 1613 :     return (c);

  003aa	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1614 : }

  003ad	3b ec		 cmp	 ebp, esp
  003af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
__SUBTRUCT_16WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_32WORDS_SBB PROC

; 800  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 801  : #ifdef _MSC_VER
; 802  :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 803  :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 804  :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 805  :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 806  :     c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 807  :     c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 808  :     c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 809  :     c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 810  :     c = _SUBTRUCT_UNIT(c, xp[8], yp[8], &zp[8]);

  001da	b9 04 00 00 00	 mov	 ecx, 4
  001df	c1 e1 03	 shl	 ecx, 3
  001e2	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 03	 shl	 edx, 3
  001ee	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 03	 shl	 edx, 3
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00200	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00203	51		 push	 ecx
  00204	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 811  :     c = _SUBTRUCT_UNIT(c, xp[9], yp[9], &zp[9]);

  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 09	 imul	 ecx, eax, 9
  0021c	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0021f	51		 push	 ecx
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	6b c2 09	 imul	 eax, edx, 9
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0022b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0022e	52		 push	 edx
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 09	 imul	 ecx, eax, 9
  00237	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0023a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0023d	50		 push	 eax
  0023e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00248	83 c4 10	 add	 esp, 16			; 00000010H
  0024b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 812  :     c = _SUBTRUCT_UNIT(c, xp[10], yp[10], &zp[10]);

  0024e	ba 04 00 00 00	 mov	 edx, 4
  00253	6b c2 0a	 imul	 eax, edx, 10
  00256	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00259	50		 push	 eax
  0025a	b9 04 00 00 00	 mov	 ecx, 4
  0025f	6b d1 0a	 imul	 edx, ecx, 10
  00262	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00265	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00268	51		 push	 ecx
  00269	ba 04 00 00 00	 mov	 edx, 4
  0026e	6b c2 0a	 imul	 eax, edx, 10
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00274	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00277	52		 push	 edx
  00278	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 813  :     c = _SUBTRUCT_UNIT(c, xp[11], yp[11], &zp[11]);

  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	6b d1 0b	 imul	 edx, ecx, 11
  00290	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00293	52		 push	 edx
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 0b	 imul	 ecx, eax, 11
  0029c	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0029f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002a2	50		 push	 eax
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 0b	 imul	 edx, ecx, 11
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  002ae	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002b1	51		 push	 ecx
  002b2	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 814  :     c = _SUBTRUCT_UNIT(c, xp[12], yp[12], &zp[12]);

  002c2	b8 04 00 00 00	 mov	 eax, 4
  002c7	6b c8 0c	 imul	 ecx, eax, 12
  002ca	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  002cd	51		 push	 ecx
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	6b c2 0c	 imul	 eax, edx, 12
  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  002d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002dc	52		 push	 edx
  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 0c	 imul	 ecx, eax, 12
  002e5	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  002e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002eb	50		 push	 eax
  002ec	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  002f6	83 c4 10	 add	 esp, 16			; 00000010H
  002f9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 815  :     c = _SUBTRUCT_UNIT(c, xp[13], yp[13], &zp[13]);

  002fc	ba 04 00 00 00	 mov	 edx, 4
  00301	6b c2 0d	 imul	 eax, edx, 13
  00304	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00307	50		 push	 eax
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	6b d1 0d	 imul	 edx, ecx, 13
  00310	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00313	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00316	51		 push	 ecx
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 0d	 imul	 eax, edx, 13
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00322	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00325	52		 push	 edx
  00326	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 816  :     c = _SUBTRUCT_UNIT(c, xp[14], yp[14], &zp[14]);

  00336	b9 04 00 00 00	 mov	 ecx, 4
  0033b	6b d1 0e	 imul	 edx, ecx, 14
  0033e	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00341	52		 push	 edx
  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 0e	 imul	 ecx, eax, 14
  0034a	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0034d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00350	50		 push	 eax
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	6b d1 0e	 imul	 edx, ecx, 14
  00359	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0035c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0035f	51		 push	 ecx
  00360	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 817  :     c = _SUBTRUCT_UNIT(c, xp[15], yp[15], &zp[15]);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 0f	 imul	 ecx, eax, 15
  00378	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0037b	51		 push	 ecx
  0037c	ba 04 00 00 00	 mov	 edx, 4
  00381	6b c2 0f	 imul	 eax, edx, 15
  00384	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00387	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0038a	52		 push	 edx
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 0f	 imul	 ecx, eax, 15
  00393	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00396	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00399	50		 push	 eax
  0039a	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  003a4	83 c4 10	 add	 esp, 16			; 00000010H
  003a7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 818  :     c = _SUBTRUCT_UNIT(c, xp[16], yp[16], &zp[16]);

  003aa	ba 04 00 00 00	 mov	 edx, 4
  003af	c1 e2 04	 shl	 edx, 4
  003b2	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  003b5	52		 push	 edx
  003b6	b8 04 00 00 00	 mov	 eax, 4
  003bb	c1 e0 04	 shl	 eax, 4
  003be	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  003c1	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003c4	52		 push	 edx
  003c5	b8 04 00 00 00	 mov	 eax, 4
  003ca	c1 e0 04	 shl	 eax, 4
  003cd	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  003d0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003d3	52		 push	 edx
  003d4	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  003d8	50		 push	 eax
  003d9	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  003de	83 c4 10	 add	 esp, 16			; 00000010H
  003e1	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 819  :     c = _SUBTRUCT_UNIT(c, xp[17], yp[17], &zp[17]);

  003e4	b9 04 00 00 00	 mov	 ecx, 4
  003e9	6b d1 11	 imul	 edx, ecx, 17
  003ec	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  003ef	52		 push	 edx
  003f0	b8 04 00 00 00	 mov	 eax, 4
  003f5	6b c8 11	 imul	 ecx, eax, 17
  003f8	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  003fb	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003fe	50		 push	 eax
  003ff	b9 04 00 00 00	 mov	 ecx, 4
  00404	6b d1 11	 imul	 edx, ecx, 17
  00407	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0040a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0040d	51		 push	 ecx
  0040e	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00412	52		 push	 edx
  00413	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00418	83 c4 10	 add	 esp, 16			; 00000010H
  0041b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 820  :     c = _SUBTRUCT_UNIT(c, xp[18], yp[18], &zp[18]);

  0041e	b8 04 00 00 00	 mov	 eax, 4
  00423	6b c8 12	 imul	 ecx, eax, 18
  00426	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00429	51		 push	 ecx
  0042a	ba 04 00 00 00	 mov	 edx, 4
  0042f	6b c2 12	 imul	 eax, edx, 18
  00432	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00435	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00438	52		 push	 edx
  00439	b8 04 00 00 00	 mov	 eax, 4
  0043e	6b c8 12	 imul	 ecx, eax, 18
  00441	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00444	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00447	50		 push	 eax
  00448	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0044c	51		 push	 ecx
  0044d	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00452	83 c4 10	 add	 esp, 16			; 00000010H
  00455	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 821  :     c = _SUBTRUCT_UNIT(c, xp[19], yp[19], &zp[19]);

  00458	ba 04 00 00 00	 mov	 edx, 4
  0045d	6b c2 13	 imul	 eax, edx, 19
  00460	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00463	50		 push	 eax
  00464	b9 04 00 00 00	 mov	 ecx, 4
  00469	6b d1 13	 imul	 edx, ecx, 19
  0046c	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  0046f	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00472	51		 push	 ecx
  00473	ba 04 00 00 00	 mov	 edx, 4
  00478	6b c2 13	 imul	 eax, edx, 19
  0047b	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0047e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00481	52		 push	 edx
  00482	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0048c	83 c4 10	 add	 esp, 16			; 00000010H
  0048f	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 822  :     c = _SUBTRUCT_UNIT(c, xp[20], yp[20], &zp[20]);

  00492	b9 04 00 00 00	 mov	 ecx, 4
  00497	6b d1 14	 imul	 edx, ecx, 20
  0049a	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  0049d	52		 push	 edx
  0049e	b8 04 00 00 00	 mov	 eax, 4
  004a3	6b c8 14	 imul	 ecx, eax, 20
  004a6	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  004a9	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004ac	50		 push	 eax
  004ad	b9 04 00 00 00	 mov	 ecx, 4
  004b2	6b d1 14	 imul	 edx, ecx, 20
  004b5	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  004b8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  004bb	51		 push	 ecx
  004bc	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  004c0	52		 push	 edx
  004c1	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  004c6	83 c4 10	 add	 esp, 16			; 00000010H
  004c9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 823  :     c = _SUBTRUCT_UNIT(c, xp[21], yp[21], &zp[21]);

  004cc	b8 04 00 00 00	 mov	 eax, 4
  004d1	6b c8 15	 imul	 ecx, eax, 21
  004d4	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  004d7	51		 push	 ecx
  004d8	ba 04 00 00 00	 mov	 edx, 4
  004dd	6b c2 15	 imul	 eax, edx, 21
  004e0	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  004e3	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  004e6	52		 push	 edx
  004e7	b8 04 00 00 00	 mov	 eax, 4
  004ec	6b c8 15	 imul	 ecx, eax, 21
  004ef	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  004f2	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004f5	50		 push	 eax
  004f6	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  004fa	51		 push	 ecx
  004fb	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00500	83 c4 10	 add	 esp, 16			; 00000010H
  00503	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 824  :     c = _SUBTRUCT_UNIT(c, xp[22], yp[22], &zp[22]);

  00506	ba 04 00 00 00	 mov	 edx, 4
  0050b	6b c2 16	 imul	 eax, edx, 22
  0050e	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00511	50		 push	 eax
  00512	b9 04 00 00 00	 mov	 ecx, 4
  00517	6b d1 16	 imul	 edx, ecx, 22
  0051a	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  0051d	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00520	51		 push	 ecx
  00521	ba 04 00 00 00	 mov	 edx, 4
  00526	6b c2 16	 imul	 eax, edx, 22
  00529	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0052c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0052f	52		 push	 edx
  00530	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00534	50		 push	 eax
  00535	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0053a	83 c4 10	 add	 esp, 16			; 00000010H
  0053d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 825  :     c = _SUBTRUCT_UNIT(c, xp[23], yp[23], &zp[23]);

  00540	b9 04 00 00 00	 mov	 ecx, 4
  00545	6b d1 17	 imul	 edx, ecx, 23
  00548	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  0054b	52		 push	 edx
  0054c	b8 04 00 00 00	 mov	 eax, 4
  00551	6b c8 17	 imul	 ecx, eax, 23
  00554	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00557	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0055a	50		 push	 eax
  0055b	b9 04 00 00 00	 mov	 ecx, 4
  00560	6b d1 17	 imul	 edx, ecx, 23
  00563	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00566	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00569	51		 push	 ecx
  0056a	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0056e	52		 push	 edx
  0056f	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00574	83 c4 10	 add	 esp, 16			; 00000010H
  00577	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 826  :     c = _SUBTRUCT_UNIT(c, xp[24], yp[24], &zp[24]);

  0057a	b8 04 00 00 00	 mov	 eax, 4
  0057f	6b c8 18	 imul	 ecx, eax, 24
  00582	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00585	51		 push	 ecx
  00586	ba 04 00 00 00	 mov	 edx, 4
  0058b	6b c2 18	 imul	 eax, edx, 24
  0058e	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00591	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00594	52		 push	 edx
  00595	b8 04 00 00 00	 mov	 eax, 4
  0059a	6b c8 18	 imul	 ecx, eax, 24
  0059d	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  005a0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005a3	50		 push	 eax
  005a4	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  005a8	51		 push	 ecx
  005a9	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  005ae	83 c4 10	 add	 esp, 16			; 00000010H
  005b1	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 827  :     c = _SUBTRUCT_UNIT(c, xp[25], yp[25], &zp[25]);

  005b4	ba 04 00 00 00	 mov	 edx, 4
  005b9	6b c2 19	 imul	 eax, edx, 25
  005bc	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  005bf	50		 push	 eax
  005c0	b9 04 00 00 00	 mov	 ecx, 4
  005c5	6b d1 19	 imul	 edx, ecx, 25
  005c8	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  005cb	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  005ce	51		 push	 ecx
  005cf	ba 04 00 00 00	 mov	 edx, 4
  005d4	6b c2 19	 imul	 eax, edx, 25
  005d7	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  005da	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005dd	52		 push	 edx
  005de	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  005e2	50		 push	 eax
  005e3	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  005e8	83 c4 10	 add	 esp, 16			; 00000010H
  005eb	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 828  :     c = _SUBTRUCT_UNIT(c, xp[26], yp[26], &zp[26]);

  005ee	b9 04 00 00 00	 mov	 ecx, 4
  005f3	6b d1 1a	 imul	 edx, ecx, 26
  005f6	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  005f9	52		 push	 edx
  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	6b c8 1a	 imul	 ecx, eax, 26
  00602	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00605	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00608	50		 push	 eax
  00609	b9 04 00 00 00	 mov	 ecx, 4
  0060e	6b d1 1a	 imul	 edx, ecx, 26
  00611	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00614	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00617	51		 push	 ecx
  00618	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0061c	52		 push	 edx
  0061d	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00622	83 c4 10	 add	 esp, 16			; 00000010H
  00625	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 829  :     c = _SUBTRUCT_UNIT(c, xp[27], yp[27], &zp[27]);

  00628	b8 04 00 00 00	 mov	 eax, 4
  0062d	6b c8 1b	 imul	 ecx, eax, 27
  00630	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00633	51		 push	 ecx
  00634	ba 04 00 00 00	 mov	 edx, 4
  00639	6b c2 1b	 imul	 eax, edx, 27
  0063c	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0063f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00642	52		 push	 edx
  00643	b8 04 00 00 00	 mov	 eax, 4
  00648	6b c8 1b	 imul	 ecx, eax, 27
  0064b	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0064e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00651	50		 push	 eax
  00652	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00656	51		 push	 ecx
  00657	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0065c	83 c4 10	 add	 esp, 16			; 00000010H
  0065f	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 830  :     c = _SUBTRUCT_UNIT(c, xp[28], yp[28], &zp[28]);

  00662	ba 04 00 00 00	 mov	 edx, 4
  00667	6b c2 1c	 imul	 eax, edx, 28
  0066a	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  0066d	50		 push	 eax
  0066e	b9 04 00 00 00	 mov	 ecx, 4
  00673	6b d1 1c	 imul	 edx, ecx, 28
  00676	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00679	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0067c	51		 push	 ecx
  0067d	ba 04 00 00 00	 mov	 edx, 4
  00682	6b c2 1c	 imul	 eax, edx, 28
  00685	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00688	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0068b	52		 push	 edx
  0068c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00690	50		 push	 eax
  00691	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00696	83 c4 10	 add	 esp, 16			; 00000010H
  00699	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 831  :     c = _SUBTRUCT_UNIT(c, xp[29], yp[29], &zp[29]);

  0069c	b9 04 00 00 00	 mov	 ecx, 4
  006a1	6b d1 1d	 imul	 edx, ecx, 29
  006a4	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  006a7	52		 push	 edx
  006a8	b8 04 00 00 00	 mov	 eax, 4
  006ad	6b c8 1d	 imul	 ecx, eax, 29
  006b0	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  006b3	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006b6	50		 push	 eax
  006b7	b9 04 00 00 00	 mov	 ecx, 4
  006bc	6b d1 1d	 imul	 edx, ecx, 29
  006bf	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  006c2	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  006c5	51		 push	 ecx
  006c6	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  006ca	52		 push	 edx
  006cb	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  006d0	83 c4 10	 add	 esp, 16			; 00000010H
  006d3	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 832  :     c = _SUBTRUCT_UNIT(c, xp[30], yp[30], &zp[30]);

  006d6	b8 04 00 00 00	 mov	 eax, 4
  006db	6b c8 1e	 imul	 ecx, eax, 30
  006de	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  006e1	51		 push	 ecx
  006e2	ba 04 00 00 00	 mov	 edx, 4
  006e7	6b c2 1e	 imul	 eax, edx, 30
  006ea	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  006ed	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  006f0	52		 push	 edx
  006f1	b8 04 00 00 00	 mov	 eax, 4
  006f6	6b c8 1e	 imul	 ecx, eax, 30
  006f9	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  006fc	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006ff	50		 push	 eax
  00700	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00704	51		 push	 ecx
  00705	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0070a	83 c4 10	 add	 esp, 16			; 00000010H
  0070d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 833  :     c = _SUBTRUCT_UNIT(c, xp[31], yp[31], &zp[31]);

  00710	ba 04 00 00 00	 mov	 edx, 4
  00715	6b c2 1f	 imul	 eax, edx, 31
  00718	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  0071b	50		 push	 eax
  0071c	b9 04 00 00 00	 mov	 ecx, 4
  00721	6b d1 1f	 imul	 edx, ecx, 31
  00724	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00727	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0072a	51		 push	 ecx
  0072b	ba 04 00 00 00	 mov	 edx, 4
  00730	6b c2 1f	 imul	 eax, edx, 31
  00733	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00736	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00739	52		 push	 edx
  0073a	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0073e	50		 push	 eax
  0073f	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00744	83 c4 10	 add	 esp, 16			; 00000010H
  00747	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 834  : #elif defined(__GNUC__)
; 835  : #ifdef _M_IX86
; 836  :     __asm__ volatile (
; 837  :         "addb\t$-1, %0\n\t"
; 838  :         "movl\t(%1), %%ecx\n\t"
; 839  :         "sbbl\t(%2), %%ecx\n\t"
; 840  :         "movl\t%%ecx, (%3)\n\t"
; 841  :         "movl\t4(%1), %%ecx\n\t"
; 842  :         "sbbl\t4(%2), %%ecx\n\t"
; 843  :         "movl\t%%ecx, 4(%3)\n\t"
; 844  :         "movl\t8(%1), %%ecx\n\t"
; 845  :         "sbbl\t8(%2), %%ecx\n\t"
; 846  :         "movl\t%%ecx, 8(%3)\n\t"
; 847  :         "movl\t12(%1), %%ecx\n\t"
; 848  :         "sbbl\t12(%2), %%ecx\n\t"
; 849  :         "movl\t%%ecx, 12(%3)\n\t"
; 850  :         "movl\t16(%1), %%ecx\n\t"
; 851  :         "sbbl\t16(%2), %%ecx\n\t"
; 852  :         "movl\t%%ecx, 16(%3)\n\t"
; 853  :         "movl\t20(%1), %%ecx\n\t"
; 854  :         "sbbl\t20(%2), %%ecx\n\t"
; 855  :         "movl\t%%ecx, 20(%3)\n\t"
; 856  :         "movl\t24(%1), %%ecx\n\t"
; 857  :         "sbbl\t24(%2), %%ecx\n\t"
; 858  :         "movl\t%%ecx, 24(%3)\n\t"
; 859  :         "movl\t28(%1), %%ecx\n\t"
; 860  :         "sbbl\t28(%2), %%ecx\n\t"
; 861  :         "movl\t%%ecx, 28(%3)\n\t"
; 862  :         "movl\t32(%1), %%ecx\n\t"
; 863  :         "sbbl\t32(%2), %%ecx\n\t"
; 864  :         "movl\t%%ecx, 32(%3)\n\t"
; 865  :         "movl\t36(%1), %%ecx\n\t"
; 866  :         "sbbl\t36(%2), %%ecx\n\t"
; 867  :         "movl\t%%ecx, 36(%3)\n\t"
; 868  :         "movl\t40(%1), %%ecx\n\t"
; 869  :         "sbbl\t40(%2), %%ecx\n\t"
; 870  :         "movl\t%%ecx, 40(%3)\n\t"
; 871  :         "movl\t44(%1), %%ecx\n\t"
; 872  :         "sbbl\t44(%2), %%ecx\n\t"
; 873  :         "movl\t%%ecx, 44(%3)\n\t"
; 874  :         "movl\t48(%1), %%ecx\n\t"
; 875  :         "sbbl\t48(%2), %%ecx\n\t"
; 876  :         "movl\t%%ecx, 48(%3)\n\t"
; 877  :         "movl\t52(%1), %%ecx\n\t"
; 878  :         "sbbl\t52(%2), %%ecx\n\t"
; 879  :         "movl\t%%ecx, 52(%3)\n\t"
; 880  :         "movl\t56(%1), %%ecx\n\t"
; 881  :         "sbbl\t56(%2), %%ecx\n\t"
; 882  :         "movl\t%%ecx, 56(%3)\n\t"
; 883  :         "movl\t60(%1), %%ecx\n\t"
; 884  :         "sbbl\t60(%2), %%ecx\n\t"
; 885  :         "movl\t%%ecx, 60(%3)\n\t"
; 886  :         "movl\t64(%1), %%ecx\n\t"
; 887  :         "sbbl\t64(%2), %%ecx\n\t"
; 888  :         "movl\t%%ecx, 64(%3)\n\t"
; 889  :         "movl\t68(%1), %%ecx\n\t"
; 890  :         "sbbl\t68(%2), %%ecx\n\t"
; 891  :         "movl\t%%ecx, 68(%3)\n\t"
; 892  :         "movl\t72(%1), %%ecx\n\t"
; 893  :         "sbbl\t72(%2), %%ecx\n\t"
; 894  :         "movl\t%%ecx, 72(%3)\n\t"
; 895  :         "movl\t76(%1), %%ecx\n\t"
; 896  :         "sbbl\t76(%2), %%ecx\n\t"
; 897  :         "movl\t%%ecx, 76(%3)\n\t"
; 898  :         "movl\t80(%1), %%ecx\n\t"
; 899  :         "sbbl\t80(%2), %%ecx\n\t"
; 900  :         "movl\t%%ecx, 80(%3)\n\t"
; 901  :         "movl\t84(%1), %%ecx\n\t"
; 902  :         "sbbl\t84(%2), %%ecx\n\t"
; 903  :         "movl\t%%ecx, 84(%3)\n\t"
; 904  :         "movl\t88(%1), %%ecx\n\t"
; 905  :         "sbbl\t88(%2), %%ecx\n\t"
; 906  :         "movl\t%%ecx, 88(%3)\n\t"
; 907  :         "movl\t92(%1), %%ecx\n\t"
; 908  :         "sbbl\t92(%2), %%ecx\n\t"
; 909  :         "movl\t%%ecx, 92(%3)\n\t"
; 910  :         "movl\t96(%1), %%ecx\n\t"
; 911  :         "sbbl\t96(%2), %%ecx\n\t"
; 912  :         "movl\t%%ecx, 96(%3)\n\t"
; 913  :         "movl\t100(%1), %%ecx\n\t"
; 914  :         "sbbl\t100(%2), %%ecx\n\t"
; 915  :         "movl\t%%ecx, 100(%3)\n\t"
; 916  :         "movl\t104(%1), %%ecx\n\t"
; 917  :         "sbbl\t104(%2), %%ecx\n\t"
; 918  :         "movl\t%%ecx, 104(%3)\n\t"
; 919  :         "movl\t108(%1), %%ecx\n\t"
; 920  :         "sbbl\t108(%2), %%ecx\n\t"
; 921  :         "movl\t%%ecx, 108(%3)\n\t"
; 922  :         "movl\t112(%1), %%ecx\n\t"
; 923  :         "sbbl\t112(%2), %%ecx\n\t"
; 924  :         "movl\t%%ecx, 112(%3)\n\t"
; 925  :         "movl\t116(%1), %%ecx\n\t"
; 926  :         "sbbl\t116(%2), %%ecx\n\t"
; 927  :         "movl\t%%ecx, 116(%3)\n\t"
; 928  :         "movl\t120(%1), %%ecx\n\t"
; 929  :         "sbbl\t120(%2), %%ecx\n\t"
; 930  :         "movl\t%%ecx, 120(%3)\n\t"
; 931  :         "movl\t124(%1), %%ecx\n\t"
; 932  :         "sbbl\t124(%2), %%ecx\n\t"
; 933  :         "movl\t%%ecx, 124(%3)\n\t"
; 934  :         "setc\t%0"
; 935  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 936  :         :
; 937  :         : "cc", "memory", "%ecx"
; 938  : );
; 939  : #elif defined(_M_X64)
; 940  :     __asm__ volatile (
; 941  :         "addb\t$-1, %0\n\t"
; 942  :         "movq\t(%1), %%rcx\n\t"
; 943  :         "sbbq\t(%2), %%rcx\n\t"
; 944  :         "movq\t%%rcx, (%3)\n\t"
; 945  :         "movq\t8(%1), %%rcx\n\t"
; 946  :         "sbbq\t8(%2), %%rcx\n\t"
; 947  :         "movq\t%%rcx, 8(%3)\n\t"
; 948  :         "movq\t16(%1), %%rcx\n\t"
; 949  :         "sbbq\t16(%2), %%rcx\n\t"
; 950  :         "movq\t%%rcx, 16(%3)\n\t"
; 951  :         "movq\t24(%1), %%rcx\n\t"
; 952  :         "sbbq\t24(%2), %%rcx\n\t"
; 953  :         "movq\t%%rcx, 24(%3)\n\t"
; 954  :         "movq\t32(%1), %%rcx\n\t"
; 955  :         "sbbq\t32(%2), %%rcx\n\t"
; 956  :         "movq\t%%rcx, 32(%3)\n\t"
; 957  :         "movq\t40(%1), %%rcx\n\t"
; 958  :         "sbbq\t40(%2), %%rcx\n\t"
; 959  :         "movq\t%%rcx, 40(%3)\n\t"
; 960  :         "movq\t48(%1), %%rcx\n\t"
; 961  :         "sbbq\t48(%2), %%rcx\n\t"
; 962  :         "movq\t%%rcx, 48(%3)\n\t"
; 963  :         "movq\t56(%1), %%rcx\n\t"
; 964  :         "sbbq\t56(%2), %%rcx\n\t"
; 965  :         "movq\t%%rcx, 56(%3)\n\t"
; 966  :         "movq\t64(%1), %%rcx\n\t"
; 967  :         "sbbq\t64(%2), %%rcx\n\t"
; 968  :         "movq\t%%rcx, 64(%3)\n\t"
; 969  :         "movq\t72(%1), %%rcx\n\t"
; 970  :         "sbbq\t72(%2), %%rcx\n\t"
; 971  :         "movq\t%%rcx, 72(%3)\n\t"
; 972  :         "movq\t80(%1), %%rcx\n\t"
; 973  :         "sbbq\t80(%2), %%rcx\n\t"
; 974  :         "movq\t%%rcx, 80(%3)\n\t"
; 975  :         "movq\t88(%1), %%rcx\n\t"
; 976  :         "sbbq\t88(%2), %%rcx\n\t"
; 977  :         "movq\t%%rcx, 88(%3)\n\t"
; 978  :         "movq\t96(%1), %%rcx\n\t"
; 979  :         "sbbq\t96(%2), %%rcx\n\t"
; 980  :         "movq\t%%rcx, 96(%3)\n\t"
; 981  :         "movq\t104(%1), %%rcx\n\t"
; 982  :         "sbbq\t104(%2), %%rcx\n\t"
; 983  :         "movq\t%%rcx, 104(%3)\n\t"
; 984  :         "movq\t112(%1), %%rcx\n\t"
; 985  :         "sbbq\t112(%2), %%rcx\n\t"
; 986  :         "movq\t%%rcx, 112(%3)\n\t"
; 987  :         "movq\t120(%1), %%rcx\n\t"
; 988  :         "sbbq\t120(%2), %%rcx\n\t"
; 989  :         "movq\t%%rcx, 120(%3)\n\t"
; 990  :         "movq\t128(%1), %%rcx\n\t"
; 991  :         "sbbq\t128(%2), %%rcx\n\t"
; 992  :         "movq\t%%rcx, 128(%3)\n\t"
; 993  :         "movq\t136(%1), %%rcx\n\t"
; 994  :         "sbbq\t136(%2), %%rcx\n\t"
; 995  :         "movq\t%%rcx, 136(%3)\n\t"
; 996  :         "movq\t144(%1), %%rcx\n\t"
; 997  :         "sbbq\t144(%2), %%rcx\n\t"
; 998  :         "movq\t%%rcx, 144(%3)\n\t"
; 999  :         "movq\t152(%1), %%rcx\n\t"
; 1000 :         "sbbq\t152(%2), %%rcx\n\t"
; 1001 :         "movq\t%%rcx, 152(%3)\n\t"
; 1002 :         "movq\t160(%1), %%rcx\n\t"
; 1003 :         "sbbq\t160(%2), %%rcx\n\t"
; 1004 :         "movq\t%%rcx, 160(%3)\n\t"
; 1005 :         "movq\t168(%1), %%rcx\n\t"
; 1006 :         "sbbq\t168(%2), %%rcx\n\t"
; 1007 :         "movq\t%%rcx, 168(%3)\n\t"
; 1008 :         "movq\t176(%1), %%rcx\n\t"
; 1009 :         "sbbq\t176(%2), %%rcx\n\t"
; 1010 :         "movq\t%%rcx, 176(%3)\n\t"
; 1011 :         "movq\t184(%1), %%rcx\n\t"
; 1012 :         "sbbq\t184(%2), %%rcx\n\t"
; 1013 :         "movq\t%%rcx, 184(%3)\n\t"
; 1014 :         "movq\t192(%1), %%rcx\n\t"
; 1015 :         "sbbq\t192(%2), %%rcx\n\t"
; 1016 :         "movq\t%%rcx, 192(%3)\n\t"
; 1017 :         "movq\t200(%1), %%rcx\n\t"
; 1018 :         "sbbq\t200(%2), %%rcx\n\t"
; 1019 :         "movq\t%%rcx, 200(%3)\n\t"
; 1020 :         "movq\t208(%1), %%rcx\n\t"
; 1021 :         "sbbq\t208(%2), %%rcx\n\t"
; 1022 :         "movq\t%%rcx, 208(%3)\n\t"
; 1023 :         "movq\t216(%1), %%rcx\n\t"
; 1024 :         "sbbq\t216(%2), %%rcx\n\t"
; 1025 :         "movq\t%%rcx, 216(%3)\n\t"
; 1026 :         "movq\t224(%1), %%rcx\n\t"
; 1027 :         "sbbq\t224(%2), %%rcx\n\t"
; 1028 :         "movq\t%%rcx, 224(%3)\n\t"
; 1029 :         "movq\t232(%1), %%rcx\n\t"
; 1030 :         "sbbq\t232(%2), %%rcx\n\t"
; 1031 :         "movq\t%%rcx, 232(%3)\n\t"
; 1032 :         "movq\t240(%1), %%rcx\n\t"
; 1033 :         "sbbq\t240(%2), %%rcx\n\t"
; 1034 :         "movq\t%%rcx, 240(%3)\n\t"
; 1035 :         "movq\t248(%1), %%rcx\n\t"
; 1036 :         "sbbq\t248(%2), %%rcx\n\t"
; 1037 :         "movq\t%%rcx, 248(%3)\n\t"
; 1038 :         "setc\t%0"
; 1039 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1040 :         :
; 1041 :         : "cc", "memory", "%rcx"
; 1042 : );
; 1043 : #else
; 1044 : #error unknown platform
; 1045 : #endif
; 1046 : #else
; 1047 : #error unknown compiler
; 1048 : #endif
; 1049 :     return (c);

  0074a	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1050 : }

  0074d	3b ec		 cmp	 ebp, esp
  0074f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00754	5d		 pop	 ebp
  00755	c3		 ret	 0
__SUBTRUCT_32WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 454  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 455  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 456  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 457  : #ifdef _M_IX86
; 458  :             DWORD pos;
; 459  : #ifdef _MSC_VER
; 460  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);
; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 480  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 421  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 422  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 423  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 424  :             DWORD pos;
; 425  : #ifdef _MSC_VER
; 426  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 427  : #elif defined(__GNUC__)
; 428  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 429  : #else
; 430  : #error unknown compiler
; 431  : #endif
; 432  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 433  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_borrow$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__SUBTRUCT_UNIT PROC

; 198  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 199  : #ifdef _M_IX86
; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _borrow$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	1b d1		 sbb	 edx, ecx
  0001f	0f 92 c1	 setb	 cl
  00022	89 10		 mov	 DWORD PTR [eax], edx
  00024	8a c1		 mov	 al, cl

; 201  : #elif defined(_M_X64)
; 202  :             return (_subborrow_u64(borrow, u, v, w));
; 203  : #else
; 204  : #error unknown platform
; 205  : #endif
; 206  :         }

  00026	5b		 pop	 ebx
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
__SUBTRUCT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 145  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp+4]
  00013	b1 20		 mov	 cl, 32			; 00000020H
  00015	e8 00 00 00 00	 call	 __aullshr
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _result_high$[ebp]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 147  :             return ((_UINT32_T)value);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 148  :         }

  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC

; 140  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0000d	33 d2		 xor	 edx, edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _value_high$[ebp]
  00012	b1 20		 mov	 cl, 32			; 00000020H
  00014	e8 00 00 00 00	 call	 __allshl
  00019	33 c9		 xor	 ecx, ecx
  0001b	0b 45 0c	 or	 eax, DWORD PTR _value_low$[ebp]
  0001e	0b d1		 or	 edx, ecx

; 142  :         }

  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
$T2 = -100						; size = 4
$T3 = -96						; size = 24
$T4 = -72						; size = 24
_w$ = -48						; size = 4
_root$ = -40						; size = 16
_nv$ = -20						; size = 4
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_X

; 713  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	57		 push	 edi
  00015	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  00018	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 714  :         if (u == nullptr)

  0003f	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00043	75 20		 jne	 SHORT $LN2@PMC_Subtru

; 715  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00045	68 00 00 00 00	 push	 OFFSET $SG118330
  0004a	68 00 00 00 00	 push	 OFFSET $SG118331
  0004f	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  00052	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0005c	8d 45 b8	 lea	 eax, DWORD PTR $T4[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Subtru:

; 716  :         if (v == nullptr)

  00065	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00069	75 20		 jne	 SHORT $LN3@PMC_Subtru

; 717  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0006b	68 00 00 00 00	 push	 OFFSET $SG118334
  00070	68 00 00 00 00	 push	 OFFSET $SG118335
  00075	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  00078	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007d	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00082	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Subtru:

; 718  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  0008b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0008e	89 55 f0	 mov	 DWORD PTR _nu$[ebp], edx

; 719  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  00091	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00094	89 45 ec	 mov	 DWORD PTR _nv$[ebp], eax

; 720  :         CheckNumber(nu);

  00097	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000a0	83 c4 04	 add	 esp, 4

; 721  :         CheckNumber(nv);

  000a3	8b 55 ec	 mov	 edx, DWORD PTR _nv$[ebp]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000ac	83 c4 04	 add	 esp, 4

; 722  :         ResourceHolderUINT root;

  000af	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000b2	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 723  :         NUMBER_HEADER* w = PMC_Subtruct_X_X_Imp(nu, nv);

  000be	8b 45 ec	 mov	 eax, DWORD PTR _nv$[ebp]
  000c1	50		 push	 eax
  000c2	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ?PMC_Subtruct_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_X_Imp
  000cb	83 c4 08	 add	 esp, 8
  000ce	89 45 d0	 mov	 DWORD PTR _w$[ebp], eax

; 724  :         root.HookNumber(w);

  000d1	8b 55 d0	 mov	 edx, DWORD PTR _w$[ebp]
  000d4	52		 push	 edx
  000d5	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000d8	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 725  : #ifdef _DEBUG
; 726  :         CheckNumber(w);

  000dd	8b 45 d0	 mov	 eax, DWORD PTR _w$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000e6	83 c4 04	 add	 esp, 4

; 727  : #endif
; 728  :         root.UnlinkNumber(w);

  000e9	8b 4d d0	 mov	 ecx, DWORD PTR _w$[ebp]
  000ec	51		 push	 ecx
  000ed	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000f0	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 729  :         return ((PMC_HANDLE_UINT)w);

  000f5	8b 55 d0	 mov	 edx, DWORD PTR _w$[ebp]
  000f8	89 55 9c	 mov	 DWORD PTR $T2[ebp], edx
  000fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00102	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00105	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0010a	8b 45 9c	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Subtru:

; 730  :     }

  0010d	52		 push	 edx
  0010e	8b cd		 mov	 ecx, ebp
  00110	50		 push	 eax
  00111	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Subtru
  00117	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011c	58		 pop	 eax
  0011d	5a		 pop	 edx
  0011e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00121	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00128	59		 pop	 ecx
  00129	5f		 pop	 edi
  0012a	83 c4 64	 add	 esp, 100		; 00000064H
  0012d	3b ec		 cmp	 ebp, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 08 00	 ret	 8
  0013a	66 90		 npad	 2
$LN9@PMC_Subtru:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN8@PMC_Subtru
$LN8@PMC_Subtru:
  00144	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00148	10 00 00 00	 DD	 16			; 00000010H
  0014c	00 00 00 00	 DD	 $LN6@PMC_Subtru
$LN6@PMC_Subtru:
  00150	72		 DB	 114			; 00000072H
  00151	6f		 DB	 111			; 0000006fH
  00152	6f		 DB	 111			; 0000006fH
  00153	74		 DB	 116			; 00000074H
  00154	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
$T2 = -96						; size = 4
$T3 = -92						; size = 24
$T4 = -68						; size = 24
_w$ = -44						; size = 4
_root$ = -36						; size = 16
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_L

; 631  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 632  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Subtru

; 633  :         {
; 634  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 635  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_subtruct.cpp;PMC_Subtruct_X_L;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118287
  00048	68 00 00 00 00	 push	 OFFSET $SG118288
  0004d	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Subtru:

; 636  :         }
; 637  :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Subtru

; 638  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00069	68 00 00 00 00	 push	 OFFSET $SG118291
  0006e	68 00 00 00 00	 push	 OFFSET $SG118292
  00073	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a4	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Subtru:

; 639  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _nu$[ebp], eax

; 640  :         CheckNumber(nu);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00098	83 c4 04	 add	 esp, 4

; 641  :         ResourceHolderUINT root;

  0009b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 642  :         NUMBER_HEADER* w = PMC_Subtruct_X_L_Imp(nu, v);

  000aa	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp+4]
  000ad	52		 push	 edx
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000b1	50		 push	 eax
  000b2	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 ?PMC_Subtruct_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_L_Imp
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000be	89 45 d4	 mov	 DWORD PTR _w$[ebp], eax

; 643  :         root.HookNumber(w);

  000c1	8b 55 d4	 mov	 edx, DWORD PTR _w$[ebp]
  000c4	52		 push	 edx
  000c5	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000c8	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 644  : #ifdef _DEBUG
; 645  :         CheckNumber(w);

  000cd	8b 45 d4	 mov	 eax, DWORD PTR _w$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d6	83 c4 04	 add	 esp, 4

; 646  : #endif
; 647  :         root.UnlinkNumber(w);

  000d9	8b 4d d4	 mov	 ecx, DWORD PTR _w$[ebp]
  000dc	51		 push	 ecx
  000dd	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000e0	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 648  :         return ((PMC_HANDLE_UINT)w);

  000e5	8b 55 d4	 mov	 edx, DWORD PTR _w$[ebp]
  000e8	89 55 a0	 mov	 DWORD PTR $T2[ebp], edx
  000eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f2	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000f5	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000fa	8b 45 a0	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Subtru:

; 649  :     }

  000fd	52		 push	 edx
  000fe	8b cd		 mov	 ecx, ebp
  00100	50		 push	 eax
  00101	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Subtru
  00107	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010c	58		 pop	 eax
  0010d	5a		 pop	 edx
  0010e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00111	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00118	59		 pop	 ecx
  00119	5f		 pop	 edi
  0011a	83 c4 60	 add	 esp, 96			; 00000060H
  0011d	3b ec		 cmp	 ebp, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c2 0c 00	 ret	 12			; 0000000cH
  0012a	66 90		 npad	 2
$LN9@PMC_Subtru:
  0012c	01 00 00 00	 DD	 1
  00130	00 00 00 00	 DD	 $LN8@PMC_Subtru
$LN8@PMC_Subtru:
  00134	dc ff ff ff	 DD	 -36			; ffffffdcH
  00138	10 00 00 00	 DD	 16			; 00000010H
  0013c	00 00 00 00	 DD	 $LN6@PMC_Subtru
$LN6@PMC_Subtru:
  00140	72		 DB	 114			; 00000072H
  00141	6f		 DB	 111			; 0000006fH
  00142	6f		 DB	 111			; 0000006fH
  00143	74		 DB	 116			; 00000074H
  00144	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_L
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
$T2 = -96						; size = 4
$T3 = -92						; size = 24
$T4 = -68						; size = 24
_w$ = -44						; size = 4
_root$ = -36						; size = 16
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_I

; 324  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 325  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Subtru

; 326  :         {
; 327  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 328  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_subtruct.cpp;PMC_Subtruct_X_I;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118141
  00048	68 00 00 00 00	 push	 OFFSET $SG118142
  0004d	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Subtru:

; 329  :         }
; 330  :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Subtru

; 331  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00069	68 00 00 00 00	 push	 OFFSET $SG118145
  0006e	68 00 00 00 00	 push	 OFFSET $SG118146
  00073	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a4	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Subtru:

; 332  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _nu$[ebp], eax

; 333  :         CheckNumber(nu);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00098	83 c4 04	 add	 esp, 4

; 334  :         ResourceHolderUINT root;

  0009b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 335  :         NUMBER_HEADER* w = PMC_Subtruct_X_I_Imp(nu, v);

  000aa	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000ad	52		 push	 edx
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _nu$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?PMC_Subtruct_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_I_Imp
  000b7	83 c4 08	 add	 esp, 8
  000ba	89 45 d4	 mov	 DWORD PTR _w$[ebp], eax

; 336  :         root.HookNumber(w);

  000bd	8b 4d d4	 mov	 ecx, DWORD PTR _w$[ebp]
  000c0	51		 push	 ecx
  000c1	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000c4	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 337  : #ifdef _DEBUG
; 338  :         CheckNumber(w);

  000c9	8b 55 d4	 mov	 edx, DWORD PTR _w$[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d2	83 c4 04	 add	 esp, 4

; 339  : #endif
; 340  :         root.UnlinkNumber(w);

  000d5	8b 45 d4	 mov	 eax, DWORD PTR _w$[ebp]
  000d8	50		 push	 eax
  000d9	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000dc	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 341  :         return ((PMC_HANDLE_UINT)w);

  000e1	8b 4d d4	 mov	 ecx, DWORD PTR _w$[ebp]
  000e4	89 4d a0	 mov	 DWORD PTR $T2[ebp], ecx
  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000f1	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f6	8b 45 a0	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Subtru:

; 342  :     }

  000f9	52		 push	 edx
  000fa	8b cd		 mov	 ecx, ebp
  000fc	50		 push	 eax
  000fd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Subtru
  00103	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00108	58		 pop	 eax
  00109	5a		 pop	 edx
  0010a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00114	59		 pop	 ecx
  00115	5f		 pop	 edi
  00116	83 c4 60	 add	 esp, 96			; 00000060H
  00119	3b ec		 cmp	 ebp, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 08 00	 ret	 8
  00126	66 90		 npad	 2
$LN9@PMC_Subtru:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN8@PMC_Subtru
$LN8@PMC_Subtru:
  00130	dc ff ff ff	 DD	 -36			; ffffffdcH
  00134	10 00 00 00	 DD	 16			; 00000010H
  00138	00 00 00 00	 DD	 $LN6@PMC_Subtru
$LN6@PMC_Subtru:
  0013c	72		 DB	 114			; 00000072H
  0013d	6f		 DB	 111			; 0000006fH
  0013e	6f		 DB	 111			; 0000006fH
  0013f	74		 DB	 116			; 00000074H
  00140	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_I
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
$T1 = -320						; size = 24
$T2 = -296						; size = 24
$T3 = -272						; size = 24
$T4 = -248						; size = 24
$T5 = -224						; size = 24
$T6 = -200						; size = 24
$T7 = -176						; size = 24
$T8 = -152						; size = 24
$T9 = -128						; size = 24
_borrow$10 = -101					; size = 1
_temp_w$11 = -96					; size = 4
_v_bit_count$12 = -88					; size = 4
_u_bit_count$13 = -84					; size = 4
_borrow$14 = -77					; size = 1
_temp_w_lo$15 = -72					; size = 4
_temp_w_hi$16 = -60					; size = 4
_v_bit_count$17 = -52					; size = 4
_u_bit_count$18 = -48					; size = 4
_borrow$19 = -41					; size = 1
_temp_w$20 = -36					; size = 4
_v_bit_count$21 = -28					; size = 4
_u_bit_count$22 = -24					; size = 4
_u_lo$23 = -20						; size = 4
_u_hi$24 = -12						; size = 4
_nv$ = -4						; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
?PMC_Subtruct_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_L_X

; 345  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  00009	57		 push	 edi
  0000a	8d bd c0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-320]
  00010	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 346  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

  00026	33 c0		 xor	 eax, eax
  00028	74 20		 je	 SHORT $LN2@PMC_Subtru

; 347  :         {
; 348  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 349  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_subtruct.cpp;PMC_Subtruct_L_X;1");

  0002a	68 00 00 00 00	 push	 OFFSET $SG118177
  0002f	68 00 00 00 00	 push	 OFFSET $SG118178
  00034	8d 4d 80	 lea	 ecx, DWORD PTR $T9[ebp]
  00037	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00041	8d 4d 80	 lea	 ecx, DWORD PTR $T9[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Subtru:

; 350  :         }
; 351  :         if (v == nullptr)

  0004a	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp], 0
  0004e	75 26		 jne	 SHORT $LN3@PMC_Subtru

; 352  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00050	68 00 00 00 00	 push	 OFFSET $SG118181
  00055	68 00 00 00 00	 push	 OFFSET $SG118182
  0005a	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00060	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00065	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0006a	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Subtru:

; 353  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  00076	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00079	89 45 fc	 mov	 DWORD PTR _nv$[ebp], eax

; 354  :         CheckNumber(nv);

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _nv$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00085	83 c4 04	 add	 esp, 4

; 355  :         if (u == 0)

  00088	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0008b	0b 55 0c	 or	 edx, DWORD PTR _u$[ebp+4]
  0008e	75 3c		 jne	 SHORT $LN4@PMC_Subtru

; 356  :         {
; 357  :             // u が 0 である場合
; 358  : 
; 359  :             if (nv->IS_ZERO)

  00090	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  00093	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00096	83 e1 01	 and	 ecx, 1
  00099	74 0b		 je	 SHORT $LN6@PMC_Subtru

; 360  :             {
; 361  :                 // v が 0 である場合
; 362  : 
; 363  :                 // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 364  :                 return (0);

  0009b	33 c0		 xor	 eax, eax
  0009d	33 d2		 xor	 edx, edx
  0009f	e9 c5 02 00 00	 jmp	 $LN28@PMC_Subtru

; 365  :             }
; 366  :             else

  000a4	eb 21		 jmp	 SHORT $LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 367  :             {
; 368  :                 // v が 0 ではない場合
; 369  : 
; 370  :                 // 演算結果は負となってしまうのでエラーを返す。
; 371  :                 throw OverflowException(L"減算によりオーバーフローが発生しました。");

  000a6	68 00 00 00 00	 push	 OFFSET $SG118188
  000ab	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  000b1	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  000b6	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  000bb	8d 95 50 ff ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@PMC_Subtru:

; 372  :             }
; 373  :         }
; 374  :         else

  000c7	e9 9d 02 00 00	 jmp	 $LN28@PMC_Subtru
$LN4@PMC_Subtru:

; 375  :         {
; 376  :             // u が 0 ではない場合
; 377  : 
; 378  :             if (nv->IS_ZERO)

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  000cf	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d2	83 e1 01	 and	 ecx, 1
  000d5	74 10		 je	 SHORT $LN8@PMC_Subtru

; 379  :             {
; 380  :                 // v が 0 である場合
; 381  : 
; 382  :                 // 演算結果となる u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 383  :                 return (u);

  000d7	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000da	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp+4]
  000dd	e9 87 02 00 00	 jmp	 $LN28@PMC_Subtru

; 384  :             }
; 385  :             else

  000e2	e9 82 02 00 00	 jmp	 $LN28@PMC_Subtru
$LN8@PMC_Subtru:

; 386  :             {
; 387  :                 // u と v がともに 0 ではない場合
; 388  : 
; 389  :                 // u と v の差を計算する
; 390  :                 if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

  000e7	ba 01 00 00 00	 mov	 edx, 1
  000ec	85 d2		 test	 edx, edx
  000ee	0f 84 d4 01 00
	00		 je	 $LN10@PMC_Subtru

; 391  :                 {
; 392  :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 393  : 
; 394  :                     _UINT32_T u_hi;
; 395  :                     _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);

  000f4	8d 45 f4	 lea	 eax, DWORD PTR _u_hi$24[ebp]
  000f7	50		 push	 eax
  000f8	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp+4]
  000fb	51		 push	 ecx
  000fc	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH
  00108	89 45 ec	 mov	 DWORD PTR _u_lo$23[ebp], eax

; 396  :                     if (u_hi == 0)

  0010b	83 7d f4 00	 cmp	 DWORD PTR _u_hi$24[ebp], 0
  0010f	0f 85 ab 00 00
	00		 jne	 $LN12@PMC_Subtru

; 397  :                     {
; 398  :                         // u の値が 32bit で表現可能な場合
; 399  :                         __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

  00115	8b 45 ec	 mov	 eax, DWORD PTR _u_lo$23[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  0011e	83 c4 04	 add	 esp, 4
  00121	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00126	2b c8		 sub	 ecx, eax
  00128	89 4d e8	 mov	 DWORD PTR _u_bit_count$22[ebp], ecx

; 400  :                         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  0012b	8b 55 fc	 mov	 edx, DWORD PTR _nv$[ebp]
  0012e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00131	89 45 e4	 mov	 DWORD PTR _v_bit_count$21[ebp], eax

; 401  :                         if (u_bit_count < v_bit_count)

  00134	8b 4d e8	 mov	 ecx, DWORD PTR _u_bit_count$22[ebp]
  00137	3b 4d e4	 cmp	 ecx, DWORD PTR _v_bit_count$21[ebp]
  0013a	73 23		 jae	 SHORT $LN14@PMC_Subtru

; 402  :                         {
; 403  :                             // 明らかに u < v である場合
; 404  : 
; 405  :                             // 演算結果は負となってしまうのでエラーを返す。
; 406  :                             throw OverflowException(L"減算によりオーバーフローが発生しました。");

  0013c	68 00 00 00 00	 push	 OFFSET $SG118198
  00141	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00147	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  0014c	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  00151	8d 95 38 ff ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 __CxxThrowException@8

; 407  :                         }
; 408  :                         else

  0015d	eb 5c		 jmp	 SHORT $LN15@PMC_Subtru
$LN14@PMC_Subtru:

; 409  :                         {
; 410  :                             // u のビット長が v のビット長以上である場合
; 411  : 
; 412  :                             // u が32bit 整数で表現できるので v も 32bit 整数で表現できる
; 413  : 
; 414  :                             __UNIT_TYPE temp_w;
; 415  :                             char borrow = _SUBTRUCT_UNIT(0, u_lo, nv->BLOCK[0], &temp_w);

  0015f	8d 45 dc	 lea	 eax, DWORD PTR _temp_w$20[ebp]
  00162	50		 push	 eax
  00163	b9 04 00 00 00	 mov	 ecx, 4
  00168	6b d1 00	 imul	 edx, ecx, 0
  0016b	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  0016e	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00171	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00174	52		 push	 edx
  00175	8b 45 ec	 mov	 eax, DWORD PTR _u_lo$23[ebp]
  00178	50		 push	 eax
  00179	6a 00		 push	 0
  0017b	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	88 45 d7	 mov	 BYTE PTR _borrow$19[ebp], al

; 416  :                             if (borrow)

  00186	0f be 4d d7	 movsx	 ecx, BYTE PTR _borrow$19[ebp]
  0018a	85 c9		 test	 ecx, ecx
  0018c	74 23		 je	 SHORT $LN16@PMC_Subtru

; 417  :                             {
; 418  :                                 // ボローが発生した場合は演算結果が負なのでエラーとする
; 419  :                                 throw OverflowException(L"減算によりオーバーフローが発生しました。");

  0018e	68 00 00 00 00	 push	 OFFSET $SG118202
  00193	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00199	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  0019e	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  001a3	8d 95 20 ff ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  001a9	52		 push	 edx
  001aa	e8 00 00 00 00	 call	 __CxxThrowException@8

; 420  :                             }
; 421  :                             else

  001af	eb 0a		 jmp	 SHORT $LN15@PMC_Subtru
$LN16@PMC_Subtru:

; 422  :                                 return (temp_w);

  001b1	33 d2		 xor	 edx, edx
  001b3	8b 45 dc	 mov	 eax, DWORD PTR _temp_w$20[ebp]
  001b6	e9 ae 01 00 00	 jmp	 $LN28@PMC_Subtru
$LN15@PMC_Subtru:

; 423  :                         }
; 424  :                     }
; 425  :                     else

  001bb	e9 03 01 00 00	 jmp	 $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 426  :                     {
; 427  :                         // u の値が 32bit では表現できない場合
; 428  :                         __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

  001c0	8b 45 f4	 mov	 eax, DWORD PTR _u_hi$24[ebp]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  001c9	83 c4 04	 add	 esp, 4
  001cc	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001d1	2b c8		 sub	 ecx, eax
  001d3	89 4d d0	 mov	 DWORD PTR _u_bit_count$18[ebp], ecx

; 429  :                         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  001d6	8b 55 fc	 mov	 edx, DWORD PTR _nv$[ebp]
  001d9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001dc	89 45 cc	 mov	 DWORD PTR _v_bit_count$17[ebp], eax

; 430  :                         if (u_bit_count < v_bit_count)

  001df	8b 4d d0	 mov	 ecx, DWORD PTR _u_bit_count$18[ebp]
  001e2	3b 4d cc	 cmp	 ecx, DWORD PTR _v_bit_count$17[ebp]
  001e5	73 26		 jae	 SHORT $LN18@PMC_Subtru

; 431  :                         {
; 432  :                             // 明らかに u < v である場合
; 433  : 
; 434  :                             // 演算結果は負となってしまうのでエラーを返す。
; 435  :                             throw OverflowException(L"減算によりオーバーフローが発生しました。");

  001e7	68 00 00 00 00	 push	 OFFSET $SG118206
  001ec	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  001f2	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  001f7	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  001fc	8d 95 08 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00202	52		 push	 edx
  00203	e8 00 00 00 00	 call	 __CxxThrowException@8

; 436  :                         }
; 437  :                         else

  00208	e9 b6 00 00 00	 jmp	 $LN13@PMC_Subtru
$LN18@PMC_Subtru:

; 438  :                         {
; 439  :                             // u のビット長が v のビット長以上である場合
; 440  : 
; 441  :                             // この時点では u は 33 ～ 64bit 整数であり、v は 1 ～ 64bit整数である
; 442  : 
; 443  :                             __UNIT_TYPE temp_w_hi;
; 444  :                             __UNIT_TYPE temp_w_lo;
; 445  :                             char borrow;
; 446  :                             borrow = _SUBTRUCT_UNIT(0, u_lo, nv->BLOCK[0], &temp_w_lo);

  0020d	8d 45 b8	 lea	 eax, DWORD PTR _temp_w_lo$15[ebp]
  00210	50		 push	 eax
  00211	b9 04 00 00 00	 mov	 ecx, 4
  00216	6b d1 00	 imul	 edx, ecx, 0
  00219	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  0021c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0021f	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00222	52		 push	 edx
  00223	8b 45 ec	 mov	 eax, DWORD PTR _u_lo$23[ebp]
  00226	50		 push	 eax
  00227	6a 00		 push	 0
  00229	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0022e	83 c4 10	 add	 esp, 16			; 00000010H
  00231	88 45 b3	 mov	 BYTE PTR _borrow$14[ebp], al

; 447  :                             if (nv->UNIT_WORD_COUNT <= 1)

  00234	8b 4d fc	 mov	 ecx, DWORD PTR _nv$[ebp]
  00237	83 79 10 01	 cmp	 DWORD PTR [ecx+16], 1
  0023b	77 1c		 ja	 SHORT $LN20@PMC_Subtru

; 448  :                             {
; 449  :                                 // v が 1 ワードで表現できる場合(1 ～ 32bit 整数)
; 450  :                                 borrow = _SUBTRUCT_UNIT(borrow, u_hi, 0, &temp_w_hi);

  0023d	8d 55 c4	 lea	 edx, DWORD PTR _temp_w_hi$16[ebp]
  00240	52		 push	 edx
  00241	6a 00		 push	 0
  00243	8b 45 f4	 mov	 eax, DWORD PTR _u_hi$24[ebp]
  00246	50		 push	 eax
  00247	0f b6 4d b3	 movzx	 ecx, BYTE PTR _borrow$14[ebp]
  0024b	51		 push	 ecx
  0024c	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00251	83 c4 10	 add	 esp, 16			; 00000010H
  00254	88 45 b3	 mov	 BYTE PTR _borrow$14[ebp], al

; 451  :                             }
; 452  :                             else

  00257	eb 2a		 jmp	 SHORT $LN21@PMC_Subtru
$LN20@PMC_Subtru:

; 453  :                             {
; 454  :                                 // v が 1 ワードで表現できない場合(33 ～ 64bit 整数)
; 455  :                                 borrow = _SUBTRUCT_UNIT(borrow, u_hi, nv->BLOCK[1], &temp_w_hi);

  00259	8d 55 c4	 lea	 edx, DWORD PTR _temp_w_hi$16[ebp]
  0025c	52		 push	 edx
  0025d	b8 04 00 00 00	 mov	 eax, 4
  00262	c1 e0 00	 shl	 eax, 0
  00265	8b 4d fc	 mov	 ecx, DWORD PTR _nv$[ebp]
  00268	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0026b	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  0026e	50		 push	 eax
  0026f	8b 4d f4	 mov	 ecx, DWORD PTR _u_hi$24[ebp]
  00272	51		 push	 ecx
  00273	0f b6 55 b3	 movzx	 edx, BYTE PTR _borrow$14[ebp]
  00277	52		 push	 edx
  00278	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0027d	83 c4 10	 add	 esp, 16			; 00000010H
  00280	88 45 b3	 mov	 BYTE PTR _borrow$14[ebp], al
$LN21@PMC_Subtru:

; 456  :                             }
; 457  :                             if (borrow)

  00283	0f be 45 b3	 movsx	 eax, BYTE PTR _borrow$14[ebp]
  00287	85 c0		 test	 eax, eax
  00289	74 23		 je	 SHORT $LN22@PMC_Subtru

; 458  :                             {
; 459  :                                 // ボローが発生した場合は演算結果が負なのでエラーとする
; 460  :                                 throw OverflowException(L"減算によりオーバーフローが発生しました。");

  0028b	68 00 00 00 00	 push	 OFFSET $SG118212
  00290	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00296	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  0029b	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  002a0	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  002a6	51		 push	 ecx
  002a7	e8 00 00 00 00	 call	 __CxxThrowException@8

; 461  :                             }
; 462  :                             else

  002ac	eb 15		 jmp	 SHORT $LN13@PMC_Subtru
$LN22@PMC_Subtru:

; 463  :                             {
; 464  :                                 return (_FROMWORDTODWORD((_UINT32_T)temp_w_hi, (_UINT32_T)temp_w_lo));

  002ae	8b 55 b8	 mov	 edx, DWORD PTR _temp_w_lo$15[ebp]
  002b1	52		 push	 edx
  002b2	8b 45 c4	 mov	 eax, DWORD PTR _temp_w_hi$16[ebp]
  002b5	50		 push	 eax
  002b6	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  002bb	83 c4 08	 add	 esp, 8
  002be	e9 a6 00 00 00	 jmp	 $LN28@PMC_Subtru
$LN13@PMC_Subtru:

; 465  :                             }
; 466  :                         }
; 467  :                     }
; 468  :                 }
; 469  :                 else

  002c3	e9 a1 00 00 00	 jmp	 $LN28@PMC_Subtru
$LN10@PMC_Subtru:

; 470  :                 {
; 471  :                     // _UINT64_T が 1 ワードで表現できる場合
; 472  : 
; 473  :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);

  002c8	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  002cb	51		 push	 ecx
  002cc	e8 00 00 00 00	 call	 __LZCNT_ALT_UNIT
  002d1	83 c4 04	 add	 esp, 4
  002d4	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002d9	2b d0		 sub	 edx, eax
  002db	89 55 ac	 mov	 DWORD PTR _u_bit_count$13[ebp], edx

; 474  :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  002de	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  002e1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002e4	89 4d a8	 mov	 DWORD PTR _v_bit_count$12[ebp], ecx

; 475  :                     if (u_bit_count < v_bit_count)

  002e7	8b 55 ac	 mov	 edx, DWORD PTR _u_bit_count$13[ebp]
  002ea	3b 55 a8	 cmp	 edx, DWORD PTR _v_bit_count$12[ebp]
  002ed	73 23		 jae	 SHORT $LN24@PMC_Subtru

; 476  :                     {
; 477  :                         // 明らかに u < v である場合
; 478  : 
; 479  :                         // 演算結果は負となってしまうのでエラーを返す。
; 480  :                         throw OverflowException(L"減算によりオーバーフローが発生しました。");

  002ef	68 00 00 00 00	 push	 OFFSET $SG118216
  002f4	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  002fa	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  002ff	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  00304	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0030a	50		 push	 eax
  0030b	e8 00 00 00 00	 call	 __CxxThrowException@8

; 481  :                     }
; 482  :                     else

  00310	eb 57		 jmp	 SHORT $LN28@PMC_Subtru
$LN24@PMC_Subtru:

; 483  :                     {
; 484  :                         // u のビット長が v のビット長以上である場合
; 485  : 
; 486  :                         // u が 64bit 整数で表現できるので v も 64bit 整数で表現できる
; 487  : 
; 488  :                         __UNIT_TYPE temp_w;
; 489  :                         char borrow = _SUBTRUCT_UNIT(0, (__UNIT_TYPE)u, nv->BLOCK[0], &temp_w);

  00312	8d 4d a0	 lea	 ecx, DWORD PTR _temp_w$11[ebp]
  00315	51		 push	 ecx
  00316	ba 04 00 00 00	 mov	 edx, 4
  0031b	6b c2 00	 imul	 eax, edx, 0
  0031e	8b 4d fc	 mov	 ecx, DWORD PTR _nv$[ebp]
  00321	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00324	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00327	50		 push	 eax
  00328	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0032b	51		 push	 ecx
  0032c	6a 00		 push	 0
  0032e	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00333	83 c4 10	 add	 esp, 16			; 00000010H
  00336	88 45 9b	 mov	 BYTE PTR _borrow$10[ebp], al

; 490  :                         if (borrow)

  00339	0f be 55 9b	 movsx	 edx, BYTE PTR _borrow$10[ebp]
  0033d	85 d2		 test	 edx, edx
  0033f	74 23		 je	 SHORT $LN26@PMC_Subtru

; 491  :                         {
; 492  :                             // ボローが発生した場合は演算結果が負なのでエラーとする
; 493  :                             throw OverflowException(L"減算によりオーバーフローが発生しました。");

  00341	68 00 00 00 00	 push	 OFFSET $SG118220
  00346	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0034c	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  00351	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  00356	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0035c	50		 push	 eax
  0035d	e8 00 00 00 00	 call	 __CxxThrowException@8

; 494  :                         }
; 495  :                         else

  00362	eb 05		 jmp	 SHORT $LN28@PMC_Subtru
$LN26@PMC_Subtru:

; 496  :                         {
; 497  :                             return (temp_w);

  00364	33 d2		 xor	 edx, edx
  00366	8b 45 a0	 mov	 eax, DWORD PTR _temp_w$11[ebp]
$LN28@PMC_Subtru:

; 498  :                         }
; 499  :                     }
; 500  :                 }
; 501  :             }
; 502  :         }
; 503  :     }

  00369	52		 push	 edx
  0036a	8b cd		 mov	 ecx, ebp
  0036c	50		 push	 eax
  0036d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN35@PMC_Subtru
  00373	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00378	58		 pop	 eax
  00379	5a		 pop	 edx
  0037a	5f		 pop	 edi
  0037b	81 c4 40 01 00
	00		 add	 esp, 320		; 00000140H
  00381	3b ec		 cmp	 ebp, esp
  00383	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00388	8b e5		 mov	 esp, ebp
  0038a	5d		 pop	 ebp
  0038b	c2 0c 00	 ret	 12			; 0000000cH
  0038e	66 90		 npad	 2
$LN35@PMC_Subtru:
  00390	05 00 00 00	 DD	 5
  00394	00 00 00 00	 DD	 $LN34@PMC_Subtru
$LN34@PMC_Subtru:
  00398	f4 ff ff ff	 DD	 -12			; fffffff4H
  0039c	04 00 00 00	 DD	 4
  003a0	00 00 00 00	 DD	 $LN29@PMC_Subtru
  003a4	dc ff ff ff	 DD	 -36			; ffffffdcH
  003a8	04 00 00 00	 DD	 4
  003ac	00 00 00 00	 DD	 $LN30@PMC_Subtru
  003b0	c4 ff ff ff	 DD	 -60			; ffffffc4H
  003b4	04 00 00 00	 DD	 4
  003b8	00 00 00 00	 DD	 $LN31@PMC_Subtru
  003bc	b8 ff ff ff	 DD	 -72			; ffffffb8H
  003c0	04 00 00 00	 DD	 4
  003c4	00 00 00 00	 DD	 $LN32@PMC_Subtru
  003c8	a0 ff ff ff	 DD	 -96			; ffffffa0H
  003cc	04 00 00 00	 DD	 4
  003d0	00 00 00 00	 DD	 $LN33@PMC_Subtru
$LN33@PMC_Subtru:
  003d4	74		 DB	 116			; 00000074H
  003d5	65		 DB	 101			; 00000065H
  003d6	6d		 DB	 109			; 0000006dH
  003d7	70		 DB	 112			; 00000070H
  003d8	5f		 DB	 95			; 0000005fH
  003d9	77		 DB	 119			; 00000077H
  003da	00		 DB	 0
$LN32@PMC_Subtru:
  003db	74		 DB	 116			; 00000074H
  003dc	65		 DB	 101			; 00000065H
  003dd	6d		 DB	 109			; 0000006dH
  003de	70		 DB	 112			; 00000070H
  003df	5f		 DB	 95			; 0000005fH
  003e0	77		 DB	 119			; 00000077H
  003e1	5f		 DB	 95			; 0000005fH
  003e2	6c		 DB	 108			; 0000006cH
  003e3	6f		 DB	 111			; 0000006fH
  003e4	00		 DB	 0
$LN31@PMC_Subtru:
  003e5	74		 DB	 116			; 00000074H
  003e6	65		 DB	 101			; 00000065H
  003e7	6d		 DB	 109			; 0000006dH
  003e8	70		 DB	 112			; 00000070H
  003e9	5f		 DB	 95			; 0000005fH
  003ea	77		 DB	 119			; 00000077H
  003eb	5f		 DB	 95			; 0000005fH
  003ec	68		 DB	 104			; 00000068H
  003ed	69		 DB	 105			; 00000069H
  003ee	00		 DB	 0
$LN30@PMC_Subtru:
  003ef	74		 DB	 116			; 00000074H
  003f0	65		 DB	 101			; 00000065H
  003f1	6d		 DB	 109			; 0000006dH
  003f2	70		 DB	 112			; 00000070H
  003f3	5f		 DB	 95			; 0000005fH
  003f4	77		 DB	 119			; 00000077H
  003f5	00		 DB	 0
$LN29@PMC_Subtru:
  003f6	75		 DB	 117			; 00000075H
  003f7	5f		 DB	 95			; 0000005fH
  003f8	68		 DB	 104			; 00000068H
  003f9	69		 DB	 105			; 00000069H
  003fa	00		 DB	 0
?PMC_Subtruct_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Subtruct_L_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
$T1 = -148						; size = 24
$T2 = -124						; size = 24
$T3 = -100						; size = 24
$T4 = -76						; size = 24
$T5 = -52						; size = 24
_borrow$6 = -25						; size = 1
_temp_w$7 = -20						; size = 4
_v_bit_count$8 = -12					; size = 4
_u_bit_count$9 = -8					; size = 4
_nv$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Subtruct_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_I_X

; 187  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	57		 push	 edi
  0000a	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-148]
  00010	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 188  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

  00026	33 c0		 xor	 eax, eax
  00028	74 20		 je	 SHORT $LN2@PMC_Subtru

; 189  :         {
; 190  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 191  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_subtruct.cpp;PMC_Subtruct_I_X;1");

  0002a	68 00 00 00 00	 push	 OFFSET $SG118080
  0002f	68 00 00 00 00	 push	 OFFSET $SG118081
  00034	8d 4d cc	 lea	 ecx, DWORD PTR $T5[ebp]
  00037	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0003c	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00041	8d 4d cc	 lea	 ecx, DWORD PTR $T5[ebp]
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Subtru:

; 192  :         }
; 193  :         if (v == nullptr)

  0004a	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  0004e	75 20		 jne	 SHORT $LN3@PMC_Subtru

; 194  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00050	68 00 00 00 00	 push	 OFFSET $SG118088
  00055	68 00 00 00 00	 push	 OFFSET $SG118089
  0005a	8d 4d b4	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00062	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00067	8d 55 b4	 lea	 edx, DWORD PTR $T4[ebp]
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Subtru:

; 195  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  00070	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00073	89 45 fc	 mov	 DWORD PTR _nv$[ebp], eax

; 196  :         CheckNumber(nv);

  00076	8b 4d fc	 mov	 ecx, DWORD PTR _nv$[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  0007f	83 c4 04	 add	 esp, 4

; 197  :         if (u == 0)

  00082	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00086	75 34		 jne	 SHORT $LN4@PMC_Subtru

; 198  :         {
; 199  :             // u が 0 である場合
; 200  : 
; 201  :             if (nv->IS_ZERO)

  00088	8b 55 fc	 mov	 edx, DWORD PTR _nv$[ebp]
  0008b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008e	83 e0 01	 and	 eax, 1
  00091	74 09		 je	 SHORT $LN6@PMC_Subtru

; 202  :             {
; 203  :                 // v が 0 である場合
; 204  : 
; 205  :                 // u と v がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 206  :                 return (0);

  00093	33 c0		 xor	 eax, eax
  00095	e9 d1 00 00 00	 jmp	 $LN13@PMC_Subtru

; 207  :             }
; 208  :             else

  0009a	eb 1b		 jmp	 SHORT $LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 209  :             {
; 210  :                 // v が 0 ではない場合
; 211  : 
; 212  :                 // 演算結果は負となってしまうのでエラーを返す。
; 213  :                 throw OverflowException(L"減算によりオーバーフローが発生しました。");

  0009c	68 00 00 00 00	 push	 OFFSET $SG118095
  000a1	8d 4d 9c	 lea	 ecx, DWORD PTR $T3[ebp]
  000a4	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  000a9	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  000ae	8d 4d 9c	 lea	 ecx, DWORD PTR $T3[ebp]
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@PMC_Subtru:

; 214  :             }
; 215  :         }
; 216  :         else

  000b7	e9 af 00 00 00	 jmp	 $LN13@PMC_Subtru
$LN4@PMC_Subtru:

; 217  :         {
; 218  :             // u が 0 ではない場合
; 219  : 
; 220  :             if (nv->IS_ZERO)

  000bc	8b 55 fc	 mov	 edx, DWORD PTR _nv$[ebp]
  000bf	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c2	83 e0 01	 and	 eax, 1
  000c5	74 0d		 je	 SHORT $LN8@PMC_Subtru

; 221  :             {
; 222  :                 // v が 0 である場合
; 223  : 
; 224  :                 // 演算結果となる u の値を返す。
; 225  :                 return (u);

  000c7	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000ca	e9 9c 00 00 00	 jmp	 $LN13@PMC_Subtru

; 226  :             }
; 227  :             else

  000cf	e9 97 00 00 00	 jmp	 $LN13@PMC_Subtru
$LN8@PMC_Subtru:

; 228  :             {
; 229  :                 // u と v がともに 0 ではない場合
; 230  : 
; 231  :                 // x と y の差を計算する
; 232  :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

  000d4	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000d7	51		 push	 ecx
  000d8	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000dd	83 c4 04	 add	 esp, 4
  000e0	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000e5	2b d0		 sub	 edx, eax
  000e7	89 55 f8	 mov	 DWORD PTR _u_bit_count$9[ebp], edx

; 233  :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  000ea	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  000ed	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000f0	89 4d f4	 mov	 DWORD PTR _v_bit_count$8[ebp], ecx

; 234  :                 if (u_bit_count < v_bit_count)

  000f3	8b 55 f8	 mov	 edx, DWORD PTR _u_bit_count$9[ebp]
  000f6	3b 55 f4	 cmp	 edx, DWORD PTR _v_bit_count$8[ebp]
  000f9	73 1d		 jae	 SHORT $LN10@PMC_Subtru

; 235  :                 {
; 236  :                     // 明らかに u < v である場合
; 237  :                     // 演算結果は負となってしまうのでエラーを返す。
; 238  :                     throw OverflowException(L"減算によりオーバーフローが発生しました。");

  000fb	68 00 00 00 00	 push	 OFFSET $SG118101
  00100	8d 4d 84	 lea	 ecx, DWORD PTR $T2[ebp]
  00103	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  00108	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  0010d	8d 45 84	 lea	 eax, DWORD PTR $T2[ebp]
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 __CxxThrowException@8

; 239  :                 }
; 240  :                 else

  00116	eb 53		 jmp	 SHORT $LN13@PMC_Subtru
$LN10@PMC_Subtru:

; 241  :                 {
; 242  :                     // u のビット長が v のビット長以上である場合
; 243  : 
; 244  :                     // u が 32bit 整数なので、v も32bit 整数で表現できる
; 245  :                     __UNIT_TYPE temp_w;
; 246  :                     char borrow = _SUBTRUCT_UNIT(0, u, nv->BLOCK[0], &temp_w);

  00118	8d 4d ec	 lea	 ecx, DWORD PTR _temp_w$7[ebp]
  0011b	51		 push	 ecx
  0011c	ba 04 00 00 00	 mov	 edx, 4
  00121	6b c2 00	 imul	 eax, edx, 0
  00124	8b 4d fc	 mov	 ecx, DWORD PTR _nv$[ebp]
  00127	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0012a	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  0012d	50		 push	 eax
  0012e	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00131	51		 push	 ecx
  00132	6a 00		 push	 0
  00134	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00139	83 c4 10	 add	 esp, 16			; 00000010H
  0013c	88 45 e7	 mov	 BYTE PTR _borrow$6[ebp], al

; 247  :                     if (borrow)

  0013f	0f be 55 e7	 movsx	 edx, BYTE PTR _borrow$6[ebp]
  00143	85 d2		 test	 edx, edx
  00145	74 21		 je	 SHORT $LN12@PMC_Subtru

; 248  :                     {
; 249  :                         // ボローが発生した場合は演算結果が負なのでエラーとする
; 250  :                         throw OverflowException(L"減算によりオーバーフローが発生しました。");

  00147	68 00 00 00 00	 push	 OFFSET $SG118104
  0014c	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00152	e8 00 00 00 00	 call	 ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
  00157	68 00 00 00 00	 push	 OFFSET __TI2?AVOverflowException@Internal@Core@Math@Palmtree@@
  0015c	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN12@PMC_Subtru:

; 251  :                     }
; 252  :                     return ((_UINT32_T)temp_w);

  00168	8b 45 ec	 mov	 eax, DWORD PTR _temp_w$7[ebp]
$LN13@PMC_Subtru:

; 253  :                 }
; 254  :             }
; 255  :         }
; 256  :     }

  0016b	52		 push	 edx
  0016c	8b cd		 mov	 ecx, ebp
  0016e	50		 push	 eax
  0016f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@PMC_Subtru
  00175	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0017a	58		 pop	 eax
  0017b	5a		 pop	 edx
  0017c	5f		 pop	 edi
  0017d	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  00183	3b ec		 cmp	 ebp, esp
  00185	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	c2 08 00	 ret	 8
$LN16@PMC_Subtru:
  00190	01 00 00 00	 DD	 1
  00194	00 00 00 00	 DD	 $LN15@PMC_Subtru
$LN15@PMC_Subtru:
  00198	ec ff ff ff	 DD	 -20			; ffffffecH
  0019c	04 00 00 00	 DD	 4
  001a0	00 00 00 00	 DD	 $LN14@PMC_Subtru
$LN14@PMC_Subtru:
  001a4	74		 DB	 116			; 00000074H
  001a5	65		 DB	 101			; 00000065H
  001a6	6d		 DB	 109			; 0000006dH
  001a7	70		 DB	 112			; 00000070H
  001a8	5f		 DB	 95			; 0000005fH
  001a9	77		 DB	 119			; 00000077H
  001aa	00		 DB	 0
?PMC_Subtruct_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Subtruct_I_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_Subtruct@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Subtruct

; 733  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 734  :         return (PMC_STATUS_OK);

  0000d	33 c0		 xor	 eax, eax

; 735  :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Initialize_Subtruct@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Subtruct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.cpp
_TEXT	SEGMENT
tv157 = -20						; size = 4
tv154 = -16						; size = 4
tv151 = -12						; size = 4
_count$ = -8						; size = 4
_c$ = -1						; size = 1
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_vp$ = 16						; size = 4
_v_count$ = 20						; size = 4
_wp$ = 24						; size = 4
_w_count$ = 28						; size = 4
?Subtruct_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0I@Z PROC ; Palmtree::Math::Core::Internal::Subtruct_Imp

; 123  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __849DF3BE_pmc_subtruct@cpp
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  :         char c = 0;

  00024	c6 45 ff 00	 mov	 BYTE PTR _c$[ebp], 0

; 125  : 
; 126  :         // まず 32 ワードずつ減算をする。
; 127  :         __UNIT_TYPE count = v_count >> 5;

  00028	8b 45 14	 mov	 eax, DWORD PTR _v_count$[ebp]
  0002b	c1 e8 05	 shr	 eax, 5
  0002e	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN2@Subtruct_I:

; 128  :         while (count != 0)

  00031	83 7d f8 00	 cmp	 DWORD PTR _count$[ebp], 0
  00035	74 4a		 je	 SHORT $LN3@Subtruct_I

; 129  :         {
; 130  :             c = _SUBTRUCT_32WORDS_SBB(c, up, vp, wp);

  00037	8b 4d 18	 mov	 ecx, DWORD PTR _wp$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 10	 mov	 edx, DWORD PTR _vp$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00042	50		 push	 eax
  00043	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 __SUBTRUCT_32WORDS_SBB
  0004d	83 c4 10	 add	 esp, 16			; 00000010H
  00050	88 45 ff	 mov	 BYTE PTR _c$[ebp], al

; 131  :             up += 32;

  00053	8b 55 08	 mov	 edx, DWORD PTR _up$[ebp]
  00056	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  0005c	89 55 08	 mov	 DWORD PTR _up$[ebp], edx

; 132  :             vp += 32;

  0005f	8b 45 10	 mov	 eax, DWORD PTR _vp$[ebp]
  00062	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00067	89 45 10	 mov	 DWORD PTR _vp$[ebp], eax

; 133  :             wp += 32;

  0006a	8b 4d 18	 mov	 ecx, DWORD PTR _wp$[ebp]
  0006d	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00073	89 4d 18	 mov	 DWORD PTR _wp$[ebp], ecx

; 134  :             --count;

  00076	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  00079	83 ea 01	 sub	 edx, 1
  0007c	89 55 f8	 mov	 DWORD PTR _count$[ebp], edx

; 135  :         }

  0007f	eb b0		 jmp	 SHORT $LN2@Subtruct_I
$LN3@Subtruct_I:

; 136  :         // この時点で未処理の桁は 32 ワード未満のはず
; 137  : 
; 138  :         // 未処理の桁が 16 ワード以上あるなら 16 ワード減算を行う。
; 139  :         if (v_count & 0x10)

  00081	8b 45 14	 mov	 eax, DWORD PTR _v_count$[ebp]
  00084	83 e0 10	 and	 eax, 16			; 00000010H
  00087	74 37		 je	 SHORT $LN4@Subtruct_I

; 140  :         {
; 141  :             c = _SUBTRUCT_16WORDS_SBB(c, up, vp, wp);

  00089	8b 4d 18	 mov	 ecx, DWORD PTR _wp$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 55 10	 mov	 edx, DWORD PTR _vp$[ebp]
  00090	52		 push	 edx
  00091	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00094	50		 push	 eax
  00095	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00099	51		 push	 ecx
  0009a	e8 00 00 00 00	 call	 __SUBTRUCT_16WORDS_SBB
  0009f	83 c4 10	 add	 esp, 16			; 00000010H
  000a2	88 45 ff	 mov	 BYTE PTR _c$[ebp], al

; 142  :             up += 16;

  000a5	8b 55 08	 mov	 edx, DWORD PTR _up$[ebp]
  000a8	83 c2 40	 add	 edx, 64			; 00000040H
  000ab	89 55 08	 mov	 DWORD PTR _up$[ebp], edx

; 143  :             vp += 16;

  000ae	8b 45 10	 mov	 eax, DWORD PTR _vp$[ebp]
  000b1	83 c0 40	 add	 eax, 64			; 00000040H
  000b4	89 45 10	 mov	 DWORD PTR _vp$[ebp], eax

; 144  :             wp += 16;

  000b7	8b 4d 18	 mov	 ecx, DWORD PTR _wp$[ebp]
  000ba	83 c1 40	 add	 ecx, 64			; 00000040H
  000bd	89 4d 18	 mov	 DWORD PTR _wp$[ebp], ecx
$LN4@Subtruct_I:

; 145  :         }
; 146  :         // この時点で未処理の桁は 16 ワード未満のはず
; 147  : 
; 148  :         // 未処理の桁が 8 ワード以上あるなら 8 ワード減算を行う。
; 149  :         if (v_count & 0x8)

  000c0	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  000c3	83 e2 08	 and	 edx, 8
  000c6	74 37		 je	 SHORT $LN5@Subtruct_I

; 150  :         {
; 151  :             c = _SUBTRUCT_8WORDS_SBB(c, up, vp, wp);

  000c8	8b 45 18	 mov	 eax, DWORD PTR _wp$[ebp]
  000cb	50		 push	 eax
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _vp$[ebp]
  000cf	51		 push	 ecx
  000d0	8b 55 08	 mov	 edx, DWORD PTR _up$[ebp]
  000d3	52		 push	 edx
  000d4	0f b6 45 ff	 movzx	 eax, BYTE PTR _c$[ebp]
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 __SUBTRUCT_8WORDS_SBB
  000de	83 c4 10	 add	 esp, 16			; 00000010H
  000e1	88 45 ff	 mov	 BYTE PTR _c$[ebp], al

; 152  :             up += 8;

  000e4	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  000e7	83 c1 20	 add	 ecx, 32			; 00000020H
  000ea	89 4d 08	 mov	 DWORD PTR _up$[ebp], ecx

; 153  :             vp += 8;

  000ed	8b 55 10	 mov	 edx, DWORD PTR _vp$[ebp]
  000f0	83 c2 20	 add	 edx, 32			; 00000020H
  000f3	89 55 10	 mov	 DWORD PTR _vp$[ebp], edx

; 154  :             wp += 8;

  000f6	8b 45 18	 mov	 eax, DWORD PTR _wp$[ebp]
  000f9	83 c0 20	 add	 eax, 32			; 00000020H
  000fc	89 45 18	 mov	 DWORD PTR _wp$[ebp], eax
$LN5@Subtruct_I:

; 155  :         }
; 156  :         // この時点で未処理の桁は 8 ワード未満のはず
; 157  : 
; 158  :         // 未処理の桁が 4 ワード以上あるなら 4 ワード減算を行う。
; 159  :         if (v_count & 0x4)

  000ff	8b 4d 14	 mov	 ecx, DWORD PTR _v_count$[ebp]
  00102	83 e1 04	 and	 ecx, 4
  00105	74 37		 je	 SHORT $LN6@Subtruct_I

; 160  :         {
; 161  :             c = _SUBTRUCT_4WORDS_SBB(c, up, vp, wp);

  00107	8b 55 18	 mov	 edx, DWORD PTR _wp$[ebp]
  0010a	52		 push	 edx
  0010b	8b 45 10	 mov	 eax, DWORD PTR _vp$[ebp]
  0010e	50		 push	 eax
  0010f	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  00112	51		 push	 ecx
  00113	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 __SUBTRUCT_4WORDS_SBB
  0011d	83 c4 10	 add	 esp, 16			; 00000010H
  00120	88 45 ff	 mov	 BYTE PTR _c$[ebp], al

; 162  :             up += 4;

  00123	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00126	83 c0 10	 add	 eax, 16			; 00000010H
  00129	89 45 08	 mov	 DWORD PTR _up$[ebp], eax

; 163  :             vp += 4;

  0012c	8b 4d 10	 mov	 ecx, DWORD PTR _vp$[ebp]
  0012f	83 c1 10	 add	 ecx, 16			; 00000010H
  00132	89 4d 10	 mov	 DWORD PTR _vp$[ebp], ecx

; 164  :             wp += 4;

  00135	8b 55 18	 mov	 edx, DWORD PTR _wp$[ebp]
  00138	83 c2 10	 add	 edx, 16			; 00000010H
  0013b	89 55 18	 mov	 DWORD PTR _wp$[ebp], edx
$LN6@Subtruct_I:

; 165  :         }
; 166  :         // この時点で未処理の桁は 4 ワード未満のはず
; 167  : 
; 168  :         // 未処理の桁が 2 ワード以上あるなら 2 ワード減算を行う。
; 169  :         if (v_count & 0x2)

  0013e	8b 45 14	 mov	 eax, DWORD PTR _v_count$[ebp]
  00141	83 e0 02	 and	 eax, 2
  00144	74 37		 je	 SHORT $LN7@Subtruct_I

; 170  :         {
; 171  :             c = _SUBTRUCT_2WORDS_SBB(c, up, vp, wp);

  00146	8b 4d 18	 mov	 ecx, DWORD PTR _wp$[ebp]
  00149	51		 push	 ecx
  0014a	8b 55 10	 mov	 edx, DWORD PTR _vp$[ebp]
  0014d	52		 push	 edx
  0014e	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00151	50		 push	 eax
  00152	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  00156	51		 push	 ecx
  00157	e8 00 00 00 00	 call	 __SUBTRUCT_2WORDS_SBB
  0015c	83 c4 10	 add	 esp, 16			; 00000010H
  0015f	88 45 ff	 mov	 BYTE PTR _c$[ebp], al

; 172  :             up += 2;

  00162	8b 55 08	 mov	 edx, DWORD PTR _up$[ebp]
  00165	83 c2 08	 add	 edx, 8
  00168	89 55 08	 mov	 DWORD PTR _up$[ebp], edx

; 173  :             vp += 2;

  0016b	8b 45 10	 mov	 eax, DWORD PTR _vp$[ebp]
  0016e	83 c0 08	 add	 eax, 8
  00171	89 45 10	 mov	 DWORD PTR _vp$[ebp], eax

; 174  :             wp += 2;

  00174	8b 4d 18	 mov	 ecx, DWORD PTR _wp$[ebp]
  00177	83 c1 08	 add	 ecx, 8
  0017a	89 4d 18	 mov	 DWORD PTR _wp$[ebp], ecx
$LN7@Subtruct_I:

; 175  :         }
; 176  :         // この時点で未処理の桁は 2 ワード未満のはず
; 177  : 
; 178  :         // 未処理の桁が 1 ワード以上あるなら 1 ワード減算を行う。
; 179  :         if (v_count & 1)

  0017d	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  00180	83 e2 01	 and	 edx, 1
  00183	74 4d		 je	 SHORT $LN8@Subtruct_I

; 180  :             c = _SUBTRUCT_UNIT(c, *up++, *vp++, wp++);

  00185	8b 45 18	 mov	 eax, DWORD PTR _wp$[ebp]
  00188	89 45 f4	 mov	 DWORD PTR tv151[ebp], eax
  0018b	8b 4d 18	 mov	 ecx, DWORD PTR _wp$[ebp]
  0018e	83 c1 04	 add	 ecx, 4
  00191	89 4d 18	 mov	 DWORD PTR _wp$[ebp], ecx
  00194	8b 55 10	 mov	 edx, DWORD PTR _vp$[ebp]
  00197	8b 02		 mov	 eax, DWORD PTR [edx]
  00199	89 45 f0	 mov	 DWORD PTR tv154[ebp], eax
  0019c	8b 4d 10	 mov	 ecx, DWORD PTR _vp$[ebp]
  0019f	83 c1 04	 add	 ecx, 4
  001a2	89 4d 10	 mov	 DWORD PTR _vp$[ebp], ecx
  001a5	8b 55 08	 mov	 edx, DWORD PTR _up$[ebp]
  001a8	8b 02		 mov	 eax, DWORD PTR [edx]
  001aa	89 45 ec	 mov	 DWORD PTR tv157[ebp], eax
  001ad	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  001b0	83 c1 04	 add	 ecx, 4
  001b3	89 4d 08	 mov	 DWORD PTR _up$[ebp], ecx
  001b6	8b 55 f4	 mov	 edx, DWORD PTR tv151[ebp]
  001b9	52		 push	 edx
  001ba	8b 45 f0	 mov	 eax, DWORD PTR tv154[ebp]
  001bd	50		 push	 eax
  001be	8b 4d ec	 mov	 ecx, DWORD PTR tv157[ebp]
  001c1	51		 push	 ecx
  001c2	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  001c6	52		 push	 edx
  001c7	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  001cc	83 c4 10	 add	 esp, 16			; 00000010H
  001cf	88 45 ff	 mov	 BYTE PTR _c$[ebp], al
$LN8@Subtruct_I:

; 181  : 
; 182  :         // 残りの桁の繰り上がりを計算し、復帰する。
; 183  :         DoBorrow(c, up, u_count - v_count, wp, w_count - v_count);

  001d2	8b 45 1c	 mov	 eax, DWORD PTR _w_count$[ebp]
  001d5	2b 45 14	 sub	 eax, DWORD PTR _v_count$[ebp]
  001d8	50		 push	 eax
  001d9	8b 4d 18	 mov	 ecx, DWORD PTR _wp$[ebp]
  001dc	51		 push	 ecx
  001dd	8b 55 0c	 mov	 edx, DWORD PTR _u_count$[ebp]
  001e0	2b 55 14	 sub	 edx, DWORD PTR _v_count$[ebp]
  001e3	52		 push	 edx
  001e4	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  001e7	50		 push	 eax
  001e8	0f b6 4d ff	 movzx	 ecx, BYTE PTR _c$[ebp]
  001ec	51		 push	 ecx
  001ed	e8 00 00 00 00	 call	 ?DoBorrow@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z ; Palmtree::Math::Core::Internal::DoBorrow
  001f2	83 c4 14	 add	 esp, 20			; 00000014H

; 184  :     }

  001f5	83 c4 14	 add	 esp, 20			; 00000014H
  001f8	3b ec		 cmp	 ebp, esp
  001fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c3		 ret	 0
?Subtruct_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0I@Z ENDP ; Palmtree::Math::Core::Internal::Subtruct_Imp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 296  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	68 00 ff ff ff	 push	 -256			; ffffff00H
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 286  :         {

  00053	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00056	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GOverflowException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GOverflowException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::OverflowException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::OverflowException::~OverflowException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GOverflowException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::OverflowException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::OverflowException::~OverflowException, COMDAT
; _this$ = ecx

; 162  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7OverflowException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 163  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1OverflowException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::OverflowException::~OverflowException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::OverflowException::OverflowException, COMDAT
; _this$ = ecx

; 158  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 157  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 158  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7OverflowException@Internal@Core@Math@Palmtree@@6B@

; 159  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0OverflowException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::OverflowException::OverflowException, COMDAT
; _this$ = ecx

; 153  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 152  :             : Exception(PMC_STATUS_OVERFLOW, message)

  00037	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	6a fc		 push	 -4			; fffffffcH
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 153  :         {

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7OverflowException@Internal@Core@Math@Palmtree@@6B@

; 154  :         }

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0OverflowException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::OverflowException::OverflowException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :         {

  00050	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 71   :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 63   :         {
; 64   :             _code = p._code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00055	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00058	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   :             _message = p._message;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   :             _data = p._data;

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 67   :         }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 55   :         {
; 56   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 57   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 58   :             _data = data;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00067	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 59   :         }

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 48   :         {
; 49   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 50   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 51   :             _data = nullptr;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 52   :         }

  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	83 c4 10	 add	 esp, 16			; 00000010H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004c	83 c4 04	 add	 esp, 4

; 87   :     }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 49   :         : _Data()

  00040	33 c9		 xor	 ecx, ecx
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 51   :     }

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
END
