; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_bitwiseand.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__59184A5E_pmc_bitwiseand@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG117907 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'b', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'a', 00H, 'n'
	DB	00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H
	DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H, 't'
	DB	00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n', 00H
	DB	'd', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ';', 00H, '1'
	DB	00H, 00H, 00H
$SG117908 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG117915 DB	'v', 00H, 00H, 00H
$SG117916 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG117930 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'b', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'a', 00H, 'n'
	DB	00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H
	DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H, 't'
	DB	00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ';', 00H, '1'
	DB	00H, 00H, 00H
$SG117931 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG117934 DB	'u', 00H, 00H, 00H
$SG117935 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG117954 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'b', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'a', 00H, 'n'
	DB	00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H
	DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H, 't'
	DB	00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n', 00H
	DB	'd', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ';', 00H, '1'
	DB	00H, 00H, 00H
$SG117955 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG117958 DB	'v', 00H, 00H, 00H
$SG117959 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG117980 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'b', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'a', 00H, 'n'
	DB	00H, 'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H
	DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H, 't'
	DB	00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ';', 00H, '1'
	DB	00H, 00H, 00H
$SG117981 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG117984 DB	'v', 00H, 00H, 00H
$SG117985 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118023 DB	'u', 00H, 00H, 00H
$SG118024 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118027 DB	'v', 00H, 00H, 00H
$SG118028 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
CONST	ENDS
PUBLIC	??0exception@std@@QAE@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?Initialize_BitwiseAnd@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_BitwiseAnd
PUBLIC	?PMC_BitwiseAnd_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_I_X
PUBLIC	?PMC_BitwiseAnd_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_L_X
PUBLIC	?PMC_BitwiseAnd_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@I@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_I
PUBLIC	?PMC_BitwiseAnd_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_K@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_L
PUBLIC	?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0
__unwindtable$?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0
__ehfuncinfo$?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.cpp
_TEXT	SEGMENT
$T2 = -64						; size = 4
$T3 = -60						; size = 4
_w_word_count$4 = -56					; size = 4
_w$5 = -52						; size = 4
_w_bit_count$6 = -48					; size = 4
_v_bit_count$7 = -44					; size = 4
_u_bit_count$8 = -40					; size = 4
_root$9 = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_X_Imp

; 295  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	57		 push	 edi
  00015	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00018	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __59184A5E_pmc_bitwiseand@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 296  :         if (u->IS_ZERO)

  0003f	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	83 e1 01	 and	 ecx, 1
  00048	74 0f		 je	 SHORT $LN2@PMC_Bitwis

; 297  :             return (&number_zero);

  0004a	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0004f	e9 02 01 00 00	 jmp	 $LN1@PMC_Bitwis
  00054	e9 fd 00 00 00	 jmp	 $LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 298  :         else if (v->IS_ZERO)

  00059	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0005c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005f	83 e0 01	 and	 eax, 1
  00062	74 0f		 je	 SHORT $LN4@PMC_Bitwis

; 299  :             return (&number_zero);

  00064	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00069	e9 e8 00 00 00	 jmp	 $LN1@PMC_Bitwis

; 300  :         else

  0006e	e9 e3 00 00 00	 jmp	 $LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 301  :         {
; 302  :             ResourceHolderUINT root;

  00073	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  00076	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 303  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00082	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00085	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00088	89 55 d8	 mov	 DWORD PTR _u_bit_count$8[ebp], edx

; 304  :             __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

  0008b	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0008e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00091	89 4d d4	 mov	 DWORD PTR _v_bit_count$7[ebp], ecx

; 305  :             __UNIT_TYPE w_bit_count = _MINIMUM_UNIT(u_bit_count, v_bit_count);

  00094	8b 55 d4	 mov	 edx, DWORD PTR _v_bit_count$7[ebp]
  00097	52		 push	 edx
  00098	8b 45 d8	 mov	 eax, DWORD PTR _u_bit_count$8[ebp]
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 __MINIMUM_UNIT
  000a1	83 c4 08	 add	 esp, 8
  000a4	89 45 d0	 mov	 DWORD PTR _w_bit_count$6[ebp], eax

; 306  :             NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000a7	8b 4d d0	 mov	 ecx, DWORD PTR _w_bit_count$6[ebp]
  000aa	51		 push	 ecx
  000ab	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  000ae	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000b3	89 45 cc	 mov	 DWORD PTR _w$5[ebp], eax

; 307  :             __UNIT_TYPE w_word_count = _DIVIDE_CEILING_UNIT(w_bit_count, __UNIT_TYPE_BIT_COUNT);

  000b6	6a 20		 push	 32			; 00000020H
  000b8	8b 55 d0	 mov	 edx, DWORD PTR _w_bit_count$6[ebp]
  000bb	52		 push	 edx
  000bc	e8 00 00 00 00	 call	 __DIVIDE_CEILING_UNIT
  000c1	83 c4 08	 add	 esp, 8
  000c4	89 45 c8	 mov	 DWORD PTR _w_word_count$4[ebp], eax

; 308  :             BitwiseAnd_X_X(u->BLOCK, v->BLOCK, w->BLOCK, w_word_count);

  000c7	8b 45 c8	 mov	 eax, DWORD PTR _w_word_count$4[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d cc	 mov	 ecx, DWORD PTR _w$5[ebp]
  000ce	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000d1	52		 push	 edx
  000d2	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000d5	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000d8	51		 push	 ecx
  000d9	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000dc	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YAXPAI00I@Z ; Palmtree::Math::Core::Internal::BitwiseAnd_X_X
  000e5	83 c4 10	 add	 esp, 16			; 00000010H

; 309  :             root.CheckNumber(w);

  000e8	8b 4d cc	 mov	 ecx, DWORD PTR _w$5[ebp]
  000eb	51		 push	 ecx
  000ec	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  000ef	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 310  :             CommitNumber(w);

  000f4	8b 55 cc	 mov	 edx, DWORD PTR _w$5[ebp]
  000f7	52		 push	 edx
  000f8	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  000fd	83 c4 04	 add	 esp, 4

; 311  :             if (w->IS_ZERO)

  00100	8b 45 cc	 mov	 eax, DWORD PTR _w$5[ebp]
  00103	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00106	83 e1 01	 and	 ecx, 1
  00109	74 27		 je	 SHORT $LN6@PMC_Bitwis

; 312  :             {
; 313  :                 root.DeallocateNumber(w);

  0010b	8b 55 cc	 mov	 edx, DWORD PTR _w$5[ebp]
  0010e	52		 push	 edx
  0010f	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  00112	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 314  :                 return (&number_zero);

  00117	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0011e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00125	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  00128	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0012d	8b 45 c4	 mov	 eax, DWORD PTR $T3[ebp]
  00130	eb 24		 jmp	 SHORT $LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 315  :             }
; 316  :             root.UnlinkNumber(w);

  00132	8b 45 cc	 mov	 eax, DWORD PTR _w$5[ebp]
  00135	50		 push	 eax
  00136	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  00139	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 317  :             return (w);

  0013e	8b 4d cc	 mov	 ecx, DWORD PTR _w$5[ebp]
  00141	89 4d c0	 mov	 DWORD PTR $T2[ebp], ecx
  00144	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014b	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  0014e	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00153	8b 45 c0	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_Bitwis:

; 318  :         }
; 319  :     }

  00156	52		 push	 edx
  00157	8b cd		 mov	 ecx, ebp
  00159	50		 push	 eax
  0015a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@PMC_Bitwis
  00160	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00165	58		 pop	 eax
  00166	5a		 pop	 edx
  00167	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00171	59		 pop	 ecx
  00172	5f		 pop	 edi
  00173	83 c4 40	 add	 esp, 64			; 00000040H
  00176	3b ec		 cmp	 ebp, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c3		 ret	 0
  00181	0f 1f 00	 npad	 3
$LN12@PMC_Bitwis:
  00184	01 00 00 00	 DD	 1
  00188	00 00 00 00	 DD	 $LN11@PMC_Bitwis
$LN11@PMC_Bitwis:
  0018c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00190	10 00 00 00	 DD	 16			; 00000010H
  00194	00 00 00 00	 DD	 $LN9@PMC_Bitwis
$LN9@PMC_Bitwis:
  00198	72		 DB	 114			; 00000072H
  00199	6f		 DB	 111			; 0000006fH
  0019a	6f		 DB	 111			; 0000006fH
  0019b	74		 DB	 116			; 00000074H
  0019c	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$9[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_X_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.cpp
_TEXT	SEGMENT
_count$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_w_count$ = 20						; size = 4
?BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YAXPAI00I@Z PROC ; Palmtree::Math::Core::Internal::BitwiseAnd_X_X

; 37   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __59184A5E_pmc_bitwiseand@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :         __UNIT_TYPE count = w_count >> 5;

  00016	8b 45 14	 mov	 eax, DWORD PTR _w_count$[ebp]
  00019	c1 e8 05	 shr	 eax, 5
  0001c	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN2@BitwiseAnd:

; 39   :         while (count != 0)

  0001f	83 7d fc 00	 cmp	 DWORD PTR _count$[ebp], 0
  00023	0f 84 6e 05 00
	00		 je	 $LN3@BitwiseAnd

; 40   :         {
; 41   :             w[0] = u[0] & v[0];

  00029	b9 04 00 00 00	 mov	 ecx, 4
  0002e	6b d1 00	 imul	 edx, ecx, 0
  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	6b c8 00	 imul	 ecx, eax, 0
  00039	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0003c	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0003f	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00042	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00045	b8 04 00 00 00	 mov	 eax, 4
  0004a	6b c8 00	 imul	 ecx, eax, 0
  0004d	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00050	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 42   :             w[1] = u[1] & v[1];

  00053	b9 04 00 00 00	 mov	 ecx, 4
  00058	c1 e1 00	 shl	 ecx, 0
  0005b	ba 04 00 00 00	 mov	 edx, 4
  00060	c1 e2 00	 shl	 edx, 0
  00063	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00066	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00069	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  0006c	23 0c 16	 and	 ecx, DWORD PTR [esi+edx]
  0006f	ba 04 00 00 00	 mov	 edx, 4
  00074	c1 e2 00	 shl	 edx, 0
  00077	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  0007a	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 43   :             w[2] = u[2] & v[2];

  0007d	b9 04 00 00 00	 mov	 ecx, 4
  00082	d1 e1		 shl	 ecx, 1
  00084	ba 04 00 00 00	 mov	 edx, 4
  00089	d1 e2		 shl	 edx, 1
  0008b	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008e	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00091	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00094	23 0c 16	 and	 ecx, DWORD PTR [esi+edx]
  00097	ba 04 00 00 00	 mov	 edx, 4
  0009c	d1 e2		 shl	 edx, 1
  0009e	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  000a1	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 44   :             w[3] = u[3] & v[3];

  000a4	b9 04 00 00 00	 mov	 ecx, 4
  000a9	6b d1 03	 imul	 edx, ecx, 3
  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	6b c8 03	 imul	 ecx, eax, 3
  000b4	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000b7	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000ba	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  000bd	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  000c0	b8 04 00 00 00	 mov	 eax, 4
  000c5	6b c8 03	 imul	 ecx, eax, 3
  000c8	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  000cb	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 45   :             w[4] = u[4] & v[4];

  000ce	b9 04 00 00 00	 mov	 ecx, 4
  000d3	c1 e1 02	 shl	 ecx, 2
  000d6	ba 04 00 00 00	 mov	 edx, 4
  000db	c1 e2 02	 shl	 edx, 2
  000de	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000e1	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000e4	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  000e7	23 0c 16	 and	 ecx, DWORD PTR [esi+edx]
  000ea	ba 04 00 00 00	 mov	 edx, 4
  000ef	c1 e2 02	 shl	 edx, 2
  000f2	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  000f5	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 46   :             w[5] = u[5] & v[5];

  000f8	b9 04 00 00 00	 mov	 ecx, 4
  000fd	6b d1 05	 imul	 edx, ecx, 5
  00100	b8 04 00 00 00	 mov	 eax, 4
  00105	6b c8 05	 imul	 ecx, eax, 5
  00108	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0010b	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0010e	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00111	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00114	b8 04 00 00 00	 mov	 eax, 4
  00119	6b c8 05	 imul	 ecx, eax, 5
  0011c	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  0011f	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 47   :             w[6] = u[6] & v[6];

  00122	b9 04 00 00 00	 mov	 ecx, 4
  00127	6b d1 06	 imul	 edx, ecx, 6
  0012a	b8 04 00 00 00	 mov	 eax, 4
  0012f	6b c8 06	 imul	 ecx, eax, 6
  00132	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00135	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00138	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0013b	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  0013e	b8 04 00 00 00	 mov	 eax, 4
  00143	6b c8 06	 imul	 ecx, eax, 6
  00146	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00149	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 48   :             w[7] = u[7] & v[7];

  0014c	b9 04 00 00 00	 mov	 ecx, 4
  00151	6b d1 07	 imul	 edx, ecx, 7
  00154	b8 04 00 00 00	 mov	 eax, 4
  00159	6b c8 07	 imul	 ecx, eax, 7
  0015c	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0015f	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00162	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00165	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00168	b8 04 00 00 00	 mov	 eax, 4
  0016d	6b c8 07	 imul	 ecx, eax, 7
  00170	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00173	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 49   :             w[8] = u[8] & v[8];

  00176	b9 04 00 00 00	 mov	 ecx, 4
  0017b	c1 e1 03	 shl	 ecx, 3
  0017e	ba 04 00 00 00	 mov	 edx, 4
  00183	c1 e2 03	 shl	 edx, 3
  00186	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00189	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0018c	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  0018f	23 0c 16	 and	 ecx, DWORD PTR [esi+edx]
  00192	ba 04 00 00 00	 mov	 edx, 4
  00197	c1 e2 03	 shl	 edx, 3
  0019a	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  0019d	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 50   :             w[9] = u[9] & v[9];

  001a0	b9 04 00 00 00	 mov	 ecx, 4
  001a5	6b d1 09	 imul	 edx, ecx, 9
  001a8	b8 04 00 00 00	 mov	 eax, 4
  001ad	6b c8 09	 imul	 ecx, eax, 9
  001b0	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  001b3	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  001b6	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  001b9	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  001bc	b8 04 00 00 00	 mov	 eax, 4
  001c1	6b c8 09	 imul	 ecx, eax, 9
  001c4	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  001c7	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 51   :             w[10] = u[10] & v[10];

  001ca	b9 04 00 00 00	 mov	 ecx, 4
  001cf	6b d1 0a	 imul	 edx, ecx, 10
  001d2	b8 04 00 00 00	 mov	 eax, 4
  001d7	6b c8 0a	 imul	 ecx, eax, 10
  001da	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  001dd	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  001e0	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  001e3	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  001e6	b8 04 00 00 00	 mov	 eax, 4
  001eb	6b c8 0a	 imul	 ecx, eax, 10
  001ee	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  001f1	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 52   :             w[11] = u[11] & v[11];

  001f4	b9 04 00 00 00	 mov	 ecx, 4
  001f9	6b d1 0b	 imul	 edx, ecx, 11
  001fc	b8 04 00 00 00	 mov	 eax, 4
  00201	6b c8 0b	 imul	 ecx, eax, 11
  00204	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00207	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0020a	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0020d	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00210	b8 04 00 00 00	 mov	 eax, 4
  00215	6b c8 0b	 imul	 ecx, eax, 11
  00218	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  0021b	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 53   :             w[12] = u[12] & v[12];

  0021e	b9 04 00 00 00	 mov	 ecx, 4
  00223	6b d1 0c	 imul	 edx, ecx, 12
  00226	b8 04 00 00 00	 mov	 eax, 4
  0022b	6b c8 0c	 imul	 ecx, eax, 12
  0022e	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00231	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00234	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00237	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  0023a	b8 04 00 00 00	 mov	 eax, 4
  0023f	6b c8 0c	 imul	 ecx, eax, 12
  00242	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00245	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 54   :             w[13] = u[13] & v[13];

  00248	b9 04 00 00 00	 mov	 ecx, 4
  0024d	6b d1 0d	 imul	 edx, ecx, 13
  00250	b8 04 00 00 00	 mov	 eax, 4
  00255	6b c8 0d	 imul	 ecx, eax, 13
  00258	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0025b	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0025e	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00261	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00264	b8 04 00 00 00	 mov	 eax, 4
  00269	6b c8 0d	 imul	 ecx, eax, 13
  0026c	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  0026f	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 55   :             w[14] = u[14] & v[14];

  00272	b9 04 00 00 00	 mov	 ecx, 4
  00277	6b d1 0e	 imul	 edx, ecx, 14
  0027a	b8 04 00 00 00	 mov	 eax, 4
  0027f	6b c8 0e	 imul	 ecx, eax, 14
  00282	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00285	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00288	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0028b	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  0028e	b8 04 00 00 00	 mov	 eax, 4
  00293	6b c8 0e	 imul	 ecx, eax, 14
  00296	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00299	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 56   :             w[15] = u[15] & v[15];

  0029c	b9 04 00 00 00	 mov	 ecx, 4
  002a1	6b d1 0f	 imul	 edx, ecx, 15
  002a4	b8 04 00 00 00	 mov	 eax, 4
  002a9	6b c8 0f	 imul	 ecx, eax, 15
  002ac	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  002af	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  002b2	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  002b5	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  002b8	b8 04 00 00 00	 mov	 eax, 4
  002bd	6b c8 0f	 imul	 ecx, eax, 15
  002c0	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  002c3	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 57   :             w[16] = u[16] & v[16];

  002c6	b9 04 00 00 00	 mov	 ecx, 4
  002cb	c1 e1 04	 shl	 ecx, 4
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	c1 e2 04	 shl	 edx, 4
  002d6	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  002d9	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  002dc	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  002df	23 0c 16	 and	 ecx, DWORD PTR [esi+edx]
  002e2	ba 04 00 00 00	 mov	 edx, 4
  002e7	c1 e2 04	 shl	 edx, 4
  002ea	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  002ed	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 58   :             w[17] = u[17] & v[17];

  002f0	b9 04 00 00 00	 mov	 ecx, 4
  002f5	6b d1 11	 imul	 edx, ecx, 17
  002f8	b8 04 00 00 00	 mov	 eax, 4
  002fd	6b c8 11	 imul	 ecx, eax, 17
  00300	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00303	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00306	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00309	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  0030c	b8 04 00 00 00	 mov	 eax, 4
  00311	6b c8 11	 imul	 ecx, eax, 17
  00314	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00317	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 59   :             w[18] = u[18] & v[18];

  0031a	b9 04 00 00 00	 mov	 ecx, 4
  0031f	6b d1 12	 imul	 edx, ecx, 18
  00322	b8 04 00 00 00	 mov	 eax, 4
  00327	6b c8 12	 imul	 ecx, eax, 18
  0032a	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0032d	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00330	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00333	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00336	b8 04 00 00 00	 mov	 eax, 4
  0033b	6b c8 12	 imul	 ecx, eax, 18
  0033e	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00341	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 60   :             w[19] = u[19] & v[19];

  00344	b9 04 00 00 00	 mov	 ecx, 4
  00349	6b d1 13	 imul	 edx, ecx, 19
  0034c	b8 04 00 00 00	 mov	 eax, 4
  00351	6b c8 13	 imul	 ecx, eax, 19
  00354	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00357	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0035a	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0035d	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00360	b8 04 00 00 00	 mov	 eax, 4
  00365	6b c8 13	 imul	 ecx, eax, 19
  00368	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  0036b	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 61   :             w[20] = u[20] & v[20];

  0036e	b9 04 00 00 00	 mov	 ecx, 4
  00373	6b d1 14	 imul	 edx, ecx, 20
  00376	b8 04 00 00 00	 mov	 eax, 4
  0037b	6b c8 14	 imul	 ecx, eax, 20
  0037e	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00381	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00384	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00387	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  0038a	b8 04 00 00 00	 mov	 eax, 4
  0038f	6b c8 14	 imul	 ecx, eax, 20
  00392	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00395	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 62   :             w[21] = u[21] & v[21];

  00398	b9 04 00 00 00	 mov	 ecx, 4
  0039d	6b d1 15	 imul	 edx, ecx, 21
  003a0	b8 04 00 00 00	 mov	 eax, 4
  003a5	6b c8 15	 imul	 ecx, eax, 21
  003a8	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  003ab	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  003ae	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  003b1	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  003b4	b8 04 00 00 00	 mov	 eax, 4
  003b9	6b c8 15	 imul	 ecx, eax, 21
  003bc	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  003bf	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 63   :             w[22] = u[22] & v[22];

  003c2	b9 04 00 00 00	 mov	 ecx, 4
  003c7	6b d1 16	 imul	 edx, ecx, 22
  003ca	b8 04 00 00 00	 mov	 eax, 4
  003cf	6b c8 16	 imul	 ecx, eax, 22
  003d2	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  003d5	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  003d8	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  003db	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  003de	b8 04 00 00 00	 mov	 eax, 4
  003e3	6b c8 16	 imul	 ecx, eax, 22
  003e6	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  003e9	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 64   :             w[23] = u[23] & v[23];

  003ec	b9 04 00 00 00	 mov	 ecx, 4
  003f1	6b d1 17	 imul	 edx, ecx, 23
  003f4	b8 04 00 00 00	 mov	 eax, 4
  003f9	6b c8 17	 imul	 ecx, eax, 23
  003fc	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  003ff	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00402	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00405	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00408	b8 04 00 00 00	 mov	 eax, 4
  0040d	6b c8 17	 imul	 ecx, eax, 23
  00410	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00413	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 65   :             w[24] = u[24] & v[24];

  00416	b9 04 00 00 00	 mov	 ecx, 4
  0041b	6b d1 18	 imul	 edx, ecx, 24
  0041e	b8 04 00 00 00	 mov	 eax, 4
  00423	6b c8 18	 imul	 ecx, eax, 24
  00426	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00429	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0042c	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0042f	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00432	b8 04 00 00 00	 mov	 eax, 4
  00437	6b c8 18	 imul	 ecx, eax, 24
  0043a	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  0043d	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 66   :             w[25] = u[25] & v[25];

  00440	b9 04 00 00 00	 mov	 ecx, 4
  00445	6b d1 19	 imul	 edx, ecx, 25
  00448	b8 04 00 00 00	 mov	 eax, 4
  0044d	6b c8 19	 imul	 ecx, eax, 25
  00450	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00453	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00456	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00459	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  0045c	b8 04 00 00 00	 mov	 eax, 4
  00461	6b c8 19	 imul	 ecx, eax, 25
  00464	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00467	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 67   :             w[26] = u[26] & v[26];

  0046a	b9 04 00 00 00	 mov	 ecx, 4
  0046f	6b d1 1a	 imul	 edx, ecx, 26
  00472	b8 04 00 00 00	 mov	 eax, 4
  00477	6b c8 1a	 imul	 ecx, eax, 26
  0047a	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0047d	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00480	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00483	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00486	b8 04 00 00 00	 mov	 eax, 4
  0048b	6b c8 1a	 imul	 ecx, eax, 26
  0048e	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00491	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 68   :             w[27] = u[27] & v[27];

  00494	b9 04 00 00 00	 mov	 ecx, 4
  00499	6b d1 1b	 imul	 edx, ecx, 27
  0049c	b8 04 00 00 00	 mov	 eax, 4
  004a1	6b c8 1b	 imul	 ecx, eax, 27
  004a4	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  004a7	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  004aa	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  004ad	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  004b0	b8 04 00 00 00	 mov	 eax, 4
  004b5	6b c8 1b	 imul	 ecx, eax, 27
  004b8	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  004bb	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 69   :             w[28] = u[28] & v[28];

  004be	b9 04 00 00 00	 mov	 ecx, 4
  004c3	6b d1 1c	 imul	 edx, ecx, 28
  004c6	b8 04 00 00 00	 mov	 eax, 4
  004cb	6b c8 1c	 imul	 ecx, eax, 28
  004ce	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  004d1	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  004d4	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  004d7	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  004da	b8 04 00 00 00	 mov	 eax, 4
  004df	6b c8 1c	 imul	 ecx, eax, 28
  004e2	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  004e5	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 70   :             w[29] = u[29] & v[29];

  004e8	b9 04 00 00 00	 mov	 ecx, 4
  004ed	6b d1 1d	 imul	 edx, ecx, 29
  004f0	b8 04 00 00 00	 mov	 eax, 4
  004f5	6b c8 1d	 imul	 ecx, eax, 29
  004f8	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  004fb	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  004fe	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00501	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00504	b8 04 00 00 00	 mov	 eax, 4
  00509	6b c8 1d	 imul	 ecx, eax, 29
  0050c	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  0050f	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 71   :             w[30] = u[30] & v[30];

  00512	b9 04 00 00 00	 mov	 ecx, 4
  00517	6b d1 1e	 imul	 edx, ecx, 30
  0051a	b8 04 00 00 00	 mov	 eax, 4
  0051f	6b c8 1e	 imul	 ecx, eax, 30
  00522	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00525	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00528	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0052b	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  0052e	b8 04 00 00 00	 mov	 eax, 4
  00533	6b c8 1e	 imul	 ecx, eax, 30
  00536	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00539	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 72   :             w[31] = u[31] & v[31];

  0053c	b9 04 00 00 00	 mov	 ecx, 4
  00541	6b d1 1f	 imul	 edx, ecx, 31
  00544	b8 04 00 00 00	 mov	 eax, 4
  00549	6b c8 1f	 imul	 ecx, eax, 31
  0054c	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0054f	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00552	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00555	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00558	b8 04 00 00 00	 mov	 eax, 4
  0055d	6b c8 1f	 imul	 ecx, eax, 31
  00560	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00563	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 73   :             u += 32;

  00566	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00569	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  0056f	89 4d 08	 mov	 DWORD PTR _u$[ebp], ecx

; 74   :             v += 32;

  00572	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00575	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  0057b	89 55 0c	 mov	 DWORD PTR _v$[ebp], edx

; 75   :             w += 32;

  0057e	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00581	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00586	89 45 10	 mov	 DWORD PTR _w$[ebp], eax

; 76   :             --count;

  00589	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  0058c	83 e9 01	 sub	 ecx, 1
  0058f	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx

; 77   :         }

  00592	e9 88 fa ff ff	 jmp	 $LN2@BitwiseAnd
$LN3@BitwiseAnd:

; 78   : 
; 79   :         if (w_count & 0x10)

  00597	8b 55 14	 mov	 edx, DWORD PTR _w_count$[ebp]
  0059a	83 e2 10	 and	 edx, 16			; 00000010H
  0059d	0f 84 b8 02 00
	00		 je	 $LN4@BitwiseAnd

; 80   :         {
; 81   :             w[0] = u[0] & v[0];

  005a3	b8 04 00 00 00	 mov	 eax, 4
  005a8	6b c8 00	 imul	 ecx, eax, 0
  005ab	ba 04 00 00 00	 mov	 edx, 4
  005b0	6b c2 00	 imul	 eax, edx, 0
  005b3	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  005b6	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  005b9	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  005bc	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  005bf	ba 04 00 00 00	 mov	 edx, 4
  005c4	6b c2 00	 imul	 eax, edx, 0
  005c7	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  005ca	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 82   :             w[1] = u[1] & v[1];

  005cd	b8 04 00 00 00	 mov	 eax, 4
  005d2	c1 e0 00	 shl	 eax, 0
  005d5	b9 04 00 00 00	 mov	 ecx, 4
  005da	c1 e1 00	 shl	 ecx, 0
  005dd	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  005e0	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  005e3	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  005e6	23 04 0e	 and	 eax, DWORD PTR [esi+ecx]
  005e9	b9 04 00 00 00	 mov	 ecx, 4
  005ee	c1 e1 00	 shl	 ecx, 0
  005f1	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  005f4	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 83   :             w[2] = u[2] & v[2];

  005f7	b8 04 00 00 00	 mov	 eax, 4
  005fc	d1 e0		 shl	 eax, 1
  005fe	b9 04 00 00 00	 mov	 ecx, 4
  00603	d1 e1		 shl	 ecx, 1
  00605	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00608	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0060b	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  0060e	23 04 0e	 and	 eax, DWORD PTR [esi+ecx]
  00611	b9 04 00 00 00	 mov	 ecx, 4
  00616	d1 e1		 shl	 ecx, 1
  00618	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  0061b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 84   :             w[3] = u[3] & v[3];

  0061e	b8 04 00 00 00	 mov	 eax, 4
  00623	6b c8 03	 imul	 ecx, eax, 3
  00626	ba 04 00 00 00	 mov	 edx, 4
  0062b	6b c2 03	 imul	 eax, edx, 3
  0062e	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00631	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00634	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00637	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  0063a	ba 04 00 00 00	 mov	 edx, 4
  0063f	6b c2 03	 imul	 eax, edx, 3
  00642	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00645	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 85   :             w[4] = u[4] & v[4];

  00648	b8 04 00 00 00	 mov	 eax, 4
  0064d	c1 e0 02	 shl	 eax, 2
  00650	b9 04 00 00 00	 mov	 ecx, 4
  00655	c1 e1 02	 shl	 ecx, 2
  00658	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0065b	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0065e	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00661	23 04 0e	 and	 eax, DWORD PTR [esi+ecx]
  00664	b9 04 00 00 00	 mov	 ecx, 4
  00669	c1 e1 02	 shl	 ecx, 2
  0066c	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  0066f	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 86   :             w[5] = u[5] & v[5];

  00672	b8 04 00 00 00	 mov	 eax, 4
  00677	6b c8 05	 imul	 ecx, eax, 5
  0067a	ba 04 00 00 00	 mov	 edx, 4
  0067f	6b c2 05	 imul	 eax, edx, 5
  00682	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00685	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00688	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0068b	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  0068e	ba 04 00 00 00	 mov	 edx, 4
  00693	6b c2 05	 imul	 eax, edx, 5
  00696	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00699	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 87   :             w[6] = u[6] & v[6];

  0069c	b8 04 00 00 00	 mov	 eax, 4
  006a1	6b c8 06	 imul	 ecx, eax, 6
  006a4	ba 04 00 00 00	 mov	 edx, 4
  006a9	6b c2 06	 imul	 eax, edx, 6
  006ac	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  006af	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  006b2	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  006b5	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  006b8	ba 04 00 00 00	 mov	 edx, 4
  006bd	6b c2 06	 imul	 eax, edx, 6
  006c0	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  006c3	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 88   :             w[7] = u[7] & v[7];

  006c6	b8 04 00 00 00	 mov	 eax, 4
  006cb	6b c8 07	 imul	 ecx, eax, 7
  006ce	ba 04 00 00 00	 mov	 edx, 4
  006d3	6b c2 07	 imul	 eax, edx, 7
  006d6	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  006d9	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  006dc	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  006df	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  006e2	ba 04 00 00 00	 mov	 edx, 4
  006e7	6b c2 07	 imul	 eax, edx, 7
  006ea	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  006ed	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 89   :             w[8] = u[8] & v[8];

  006f0	b8 04 00 00 00	 mov	 eax, 4
  006f5	c1 e0 03	 shl	 eax, 3
  006f8	b9 04 00 00 00	 mov	 ecx, 4
  006fd	c1 e1 03	 shl	 ecx, 3
  00700	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00703	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00706	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00709	23 04 0e	 and	 eax, DWORD PTR [esi+ecx]
  0070c	b9 04 00 00 00	 mov	 ecx, 4
  00711	c1 e1 03	 shl	 ecx, 3
  00714	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00717	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 90   :             w[9] = u[9] & v[9];

  0071a	b8 04 00 00 00	 mov	 eax, 4
  0071f	6b c8 09	 imul	 ecx, eax, 9
  00722	ba 04 00 00 00	 mov	 edx, 4
  00727	6b c2 09	 imul	 eax, edx, 9
  0072a	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0072d	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00730	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00733	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  00736	ba 04 00 00 00	 mov	 edx, 4
  0073b	6b c2 09	 imul	 eax, edx, 9
  0073e	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00741	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 91   :             w[10] = u[10] & v[10];

  00744	b8 04 00 00 00	 mov	 eax, 4
  00749	6b c8 0a	 imul	 ecx, eax, 10
  0074c	ba 04 00 00 00	 mov	 edx, 4
  00751	6b c2 0a	 imul	 eax, edx, 10
  00754	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00757	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0075a	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0075d	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  00760	ba 04 00 00 00	 mov	 edx, 4
  00765	6b c2 0a	 imul	 eax, edx, 10
  00768	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  0076b	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 92   :             w[11] = u[11] & v[11];

  0076e	b8 04 00 00 00	 mov	 eax, 4
  00773	6b c8 0b	 imul	 ecx, eax, 11
  00776	ba 04 00 00 00	 mov	 edx, 4
  0077b	6b c2 0b	 imul	 eax, edx, 11
  0077e	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00781	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00784	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00787	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  0078a	ba 04 00 00 00	 mov	 edx, 4
  0078f	6b c2 0b	 imul	 eax, edx, 11
  00792	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00795	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 93   :             w[12] = u[12] & v[12];

  00798	b8 04 00 00 00	 mov	 eax, 4
  0079d	6b c8 0c	 imul	 ecx, eax, 12
  007a0	ba 04 00 00 00	 mov	 edx, 4
  007a5	6b c2 0c	 imul	 eax, edx, 12
  007a8	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  007ab	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  007ae	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  007b1	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  007b4	ba 04 00 00 00	 mov	 edx, 4
  007b9	6b c2 0c	 imul	 eax, edx, 12
  007bc	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  007bf	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 94   :             w[13] = u[13] & v[13];

  007c2	b8 04 00 00 00	 mov	 eax, 4
  007c7	6b c8 0d	 imul	 ecx, eax, 13
  007ca	ba 04 00 00 00	 mov	 edx, 4
  007cf	6b c2 0d	 imul	 eax, edx, 13
  007d2	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  007d5	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  007d8	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  007db	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  007de	ba 04 00 00 00	 mov	 edx, 4
  007e3	6b c2 0d	 imul	 eax, edx, 13
  007e6	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  007e9	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 95   :             w[14] = u[14] & v[14];

  007ec	b8 04 00 00 00	 mov	 eax, 4
  007f1	6b c8 0e	 imul	 ecx, eax, 14
  007f4	ba 04 00 00 00	 mov	 edx, 4
  007f9	6b c2 0e	 imul	 eax, edx, 14
  007fc	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  007ff	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00802	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00805	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  00808	ba 04 00 00 00	 mov	 edx, 4
  0080d	6b c2 0e	 imul	 eax, edx, 14
  00810	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00813	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 96   :             w[15] = u[15] & v[15];

  00816	b8 04 00 00 00	 mov	 eax, 4
  0081b	6b c8 0f	 imul	 ecx, eax, 15
  0081e	ba 04 00 00 00	 mov	 edx, 4
  00823	6b c2 0f	 imul	 eax, edx, 15
  00826	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00829	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0082c	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0082f	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  00832	ba 04 00 00 00	 mov	 edx, 4
  00837	6b c2 0f	 imul	 eax, edx, 15
  0083a	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  0083d	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 97   :             u += 16;

  00840	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00843	83 c0 40	 add	 eax, 64			; 00000040H
  00846	89 45 08	 mov	 DWORD PTR _u$[ebp], eax

; 98   :             v += 16;

  00849	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0084c	83 c1 40	 add	 ecx, 64			; 00000040H
  0084f	89 4d 0c	 mov	 DWORD PTR _v$[ebp], ecx

; 99   :             w += 16;

  00852	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00855	83 c2 40	 add	 edx, 64			; 00000040H
  00858	89 55 10	 mov	 DWORD PTR _w$[ebp], edx
$LN4@BitwiseAnd:

; 100  :         }
; 101  : 
; 102  :         if (w_count & 0x8)

  0085b	8b 45 14	 mov	 eax, DWORD PTR _w_count$[ebp]
  0085e	83 e0 08	 and	 eax, 8
  00861	0f 84 68 01 00
	00		 je	 $LN5@BitwiseAnd

; 103  :         {
; 104  :             w[0] = u[0] & v[0];

  00867	b9 04 00 00 00	 mov	 ecx, 4
  0086c	6b d1 00	 imul	 edx, ecx, 0
  0086f	b8 04 00 00 00	 mov	 eax, 4
  00874	6b c8 00	 imul	 ecx, eax, 0
  00877	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0087a	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0087d	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00880	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00883	b8 04 00 00 00	 mov	 eax, 4
  00888	6b c8 00	 imul	 ecx, eax, 0
  0088b	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  0088e	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 105  :             w[1] = u[1] & v[1];

  00891	b9 04 00 00 00	 mov	 ecx, 4
  00896	c1 e1 00	 shl	 ecx, 0
  00899	ba 04 00 00 00	 mov	 edx, 4
  0089e	c1 e2 00	 shl	 edx, 0
  008a1	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  008a4	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  008a7	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  008aa	23 0c 16	 and	 ecx, DWORD PTR [esi+edx]
  008ad	ba 04 00 00 00	 mov	 edx, 4
  008b2	c1 e2 00	 shl	 edx, 0
  008b5	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  008b8	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 106  :             w[2] = u[2] & v[2];

  008bb	b9 04 00 00 00	 mov	 ecx, 4
  008c0	d1 e1		 shl	 ecx, 1
  008c2	ba 04 00 00 00	 mov	 edx, 4
  008c7	d1 e2		 shl	 edx, 1
  008c9	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  008cc	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  008cf	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  008d2	23 0c 16	 and	 ecx, DWORD PTR [esi+edx]
  008d5	ba 04 00 00 00	 mov	 edx, 4
  008da	d1 e2		 shl	 edx, 1
  008dc	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  008df	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 107  :             w[3] = u[3] & v[3];

  008e2	b9 04 00 00 00	 mov	 ecx, 4
  008e7	6b d1 03	 imul	 edx, ecx, 3
  008ea	b8 04 00 00 00	 mov	 eax, 4
  008ef	6b c8 03	 imul	 ecx, eax, 3
  008f2	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  008f5	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  008f8	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  008fb	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  008fe	b8 04 00 00 00	 mov	 eax, 4
  00903	6b c8 03	 imul	 ecx, eax, 3
  00906	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00909	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 108  :             w[4] = u[4] & v[4];

  0090c	b9 04 00 00 00	 mov	 ecx, 4
  00911	c1 e1 02	 shl	 ecx, 2
  00914	ba 04 00 00 00	 mov	 edx, 4
  00919	c1 e2 02	 shl	 edx, 2
  0091c	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0091f	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00922	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00925	23 0c 16	 and	 ecx, DWORD PTR [esi+edx]
  00928	ba 04 00 00 00	 mov	 edx, 4
  0092d	c1 e2 02	 shl	 edx, 2
  00930	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00933	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 109  :             w[5] = u[5] & v[5];

  00936	b9 04 00 00 00	 mov	 ecx, 4
  0093b	6b d1 05	 imul	 edx, ecx, 5
  0093e	b8 04 00 00 00	 mov	 eax, 4
  00943	6b c8 05	 imul	 ecx, eax, 5
  00946	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00949	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0094c	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0094f	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00952	b8 04 00 00 00	 mov	 eax, 4
  00957	6b c8 05	 imul	 ecx, eax, 5
  0095a	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  0095d	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 110  :             w[6] = u[6] & v[6];

  00960	b9 04 00 00 00	 mov	 ecx, 4
  00965	6b d1 06	 imul	 edx, ecx, 6
  00968	b8 04 00 00 00	 mov	 eax, 4
  0096d	6b c8 06	 imul	 ecx, eax, 6
  00970	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00973	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00976	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00979	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  0097c	b8 04 00 00 00	 mov	 eax, 4
  00981	6b c8 06	 imul	 ecx, eax, 6
  00984	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00987	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 111  :             w[7] = u[7] & v[7];

  0098a	b9 04 00 00 00	 mov	 ecx, 4
  0098f	6b d1 07	 imul	 edx, ecx, 7
  00992	b8 04 00 00 00	 mov	 eax, 4
  00997	6b c8 07	 imul	 ecx, eax, 7
  0099a	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0099d	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  009a0	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  009a3	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  009a6	b8 04 00 00 00	 mov	 eax, 4
  009ab	6b c8 07	 imul	 ecx, eax, 7
  009ae	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  009b1	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 112  :             u += 8;

  009b4	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  009b7	83 c1 20	 add	 ecx, 32			; 00000020H
  009ba	89 4d 08	 mov	 DWORD PTR _u$[ebp], ecx

; 113  :             v += 8;

  009bd	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  009c0	83 c2 20	 add	 edx, 32			; 00000020H
  009c3	89 55 0c	 mov	 DWORD PTR _v$[ebp], edx

; 114  :             w += 8;

  009c6	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  009c9	83 c0 20	 add	 eax, 32			; 00000020H
  009cc	89 45 10	 mov	 DWORD PTR _w$[ebp], eax
$LN5@BitwiseAnd:

; 115  :         }
; 116  : 
; 117  :         if (w_count & 0x4)

  009cf	8b 4d 14	 mov	 ecx, DWORD PTR _w_count$[ebp]
  009d2	83 e1 04	 and	 ecx, 4
  009d5	0f 84 c0 00 00
	00		 je	 $LN6@BitwiseAnd

; 118  :         {
; 119  :             w[0] = u[0] & v[0];

  009db	ba 04 00 00 00	 mov	 edx, 4
  009e0	6b c2 00	 imul	 eax, edx, 0
  009e3	b9 04 00 00 00	 mov	 ecx, 4
  009e8	6b d1 00	 imul	 edx, ecx, 0
  009eb	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  009ee	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  009f1	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  009f4	23 04 16	 and	 eax, DWORD PTR [esi+edx]
  009f7	b9 04 00 00 00	 mov	 ecx, 4
  009fc	6b d1 00	 imul	 edx, ecx, 0
  009ff	8b 4d 10	 mov	 ecx, DWORD PTR _w$[ebp]
  00a02	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 120  :             w[1] = u[1] & v[1];

  00a05	ba 04 00 00 00	 mov	 edx, 4
  00a0a	c1 e2 00	 shl	 edx, 0
  00a0d	b8 04 00 00 00	 mov	 eax, 4
  00a12	c1 e0 00	 shl	 eax, 0
  00a15	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00a18	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00a1b	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00a1e	23 14 06	 and	 edx, DWORD PTR [esi+eax]
  00a21	b8 04 00 00 00	 mov	 eax, 4
  00a26	c1 e0 00	 shl	 eax, 0
  00a29	8b 4d 10	 mov	 ecx, DWORD PTR _w$[ebp]
  00a2c	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 121  :             w[2] = u[2] & v[2];

  00a2f	ba 04 00 00 00	 mov	 edx, 4
  00a34	d1 e2		 shl	 edx, 1
  00a36	b8 04 00 00 00	 mov	 eax, 4
  00a3b	d1 e0		 shl	 eax, 1
  00a3d	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00a40	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00a43	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00a46	23 14 06	 and	 edx, DWORD PTR [esi+eax]
  00a49	b8 04 00 00 00	 mov	 eax, 4
  00a4e	d1 e0		 shl	 eax, 1
  00a50	8b 4d 10	 mov	 ecx, DWORD PTR _w$[ebp]
  00a53	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 122  :             w[3] = u[3] & v[3];

  00a56	ba 04 00 00 00	 mov	 edx, 4
  00a5b	6b c2 03	 imul	 eax, edx, 3
  00a5e	b9 04 00 00 00	 mov	 ecx, 4
  00a63	6b d1 03	 imul	 edx, ecx, 3
  00a66	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00a69	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00a6c	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00a6f	23 04 16	 and	 eax, DWORD PTR [esi+edx]
  00a72	b9 04 00 00 00	 mov	 ecx, 4
  00a77	6b d1 03	 imul	 edx, ecx, 3
  00a7a	8b 4d 10	 mov	 ecx, DWORD PTR _w$[ebp]
  00a7d	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 123  :             u += 4;

  00a80	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00a83	83 c2 10	 add	 edx, 16			; 00000010H
  00a86	89 55 08	 mov	 DWORD PTR _u$[ebp], edx

; 124  :             v += 4;

  00a89	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00a8c	83 c0 10	 add	 eax, 16			; 00000010H
  00a8f	89 45 0c	 mov	 DWORD PTR _v$[ebp], eax

; 125  :             w += 4;

  00a92	8b 4d 10	 mov	 ecx, DWORD PTR _w$[ebp]
  00a95	83 c1 10	 add	 ecx, 16			; 00000010H
  00a98	89 4d 10	 mov	 DWORD PTR _w$[ebp], ecx
$LN6@BitwiseAnd:

; 126  :         }
; 127  : 
; 128  :         if (w_count & 0x2)

  00a9b	8b 55 14	 mov	 edx, DWORD PTR _w_count$[ebp]
  00a9e	83 e2 02	 and	 edx, 2
  00aa1	74 6f		 je	 SHORT $LN7@BitwiseAnd

; 129  :         {
; 130  :             w[0] = u[0] & v[0];

  00aa3	b8 04 00 00 00	 mov	 eax, 4
  00aa8	6b c8 00	 imul	 ecx, eax, 0
  00aab	ba 04 00 00 00	 mov	 edx, 4
  00ab0	6b c2 00	 imul	 eax, edx, 0
  00ab3	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00ab6	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00ab9	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00abc	23 0c 06	 and	 ecx, DWORD PTR [esi+eax]
  00abf	ba 04 00 00 00	 mov	 edx, 4
  00ac4	6b c2 00	 imul	 eax, edx, 0
  00ac7	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00aca	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 131  :             w[1] = u[1] & v[1];

  00acd	b8 04 00 00 00	 mov	 eax, 4
  00ad2	c1 e0 00	 shl	 eax, 0
  00ad5	b9 04 00 00 00	 mov	 ecx, 4
  00ada	c1 e1 00	 shl	 ecx, 0
  00add	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00ae0	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00ae3	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00ae6	23 04 0e	 and	 eax, DWORD PTR [esi+ecx]
  00ae9	b9 04 00 00 00	 mov	 ecx, 4
  00aee	c1 e1 00	 shl	 ecx, 0
  00af1	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00af4	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 132  :             u += 2;

  00af7	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00afa	83 c0 08	 add	 eax, 8
  00afd	89 45 08	 mov	 DWORD PTR _u$[ebp], eax

; 133  :             v += 2;

  00b00	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00b03	83 c1 08	 add	 ecx, 8
  00b06	89 4d 0c	 mov	 DWORD PTR _v$[ebp], ecx

; 134  :             w += 2;

  00b09	8b 55 10	 mov	 edx, DWORD PTR _w$[ebp]
  00b0c	83 c2 08	 add	 edx, 8
  00b0f	89 55 10	 mov	 DWORD PTR _w$[ebp], edx
$LN7@BitwiseAnd:

; 135  :         }
; 136  : 
; 137  :         if (w_count & 0x1)

  00b12	8b 45 14	 mov	 eax, DWORD PTR _w_count$[ebp]
  00b15	83 e0 01	 and	 eax, 1
  00b18	74 45		 je	 SHORT $LN1@BitwiseAnd

; 138  :         {
; 139  :             w[0] = u[0] & v[0];

  00b1a	b9 04 00 00 00	 mov	 ecx, 4
  00b1f	6b d1 00	 imul	 edx, ecx, 0
  00b22	b8 04 00 00 00	 mov	 eax, 4
  00b27	6b c8 00	 imul	 ecx, eax, 0
  00b2a	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00b2d	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00b30	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00b33	23 14 0e	 and	 edx, DWORD PTR [esi+ecx]
  00b36	b8 04 00 00 00	 mov	 eax, 4
  00b3b	6b c8 00	 imul	 ecx, eax, 0
  00b3e	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00b41	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 140  :             u += 1;

  00b44	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00b47	83 c1 04	 add	 ecx, 4
  00b4a	89 4d 08	 mov	 DWORD PTR _u$[ebp], ecx

; 141  :             v += 1;

  00b4d	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00b50	83 c2 04	 add	 edx, 4
  00b53	89 55 0c	 mov	 DWORD PTR _v$[ebp], edx

; 142  :             w += 1;

  00b56	8b 45 10	 mov	 eax, DWORD PTR _w$[ebp]
  00b59	83 c0 04	 add	 eax, 4
  00b5c	89 45 10	 mov	 DWORD PTR _w$[ebp], eax
$LN1@BitwiseAnd:

; 143  :         }
; 144  :     }

  00b5f	5e		 pop	 esi
  00b60	83 c4 04	 add	 esp, 4
  00b63	3b ec		 cmp	 ebp, esp
  00b65	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b6a	8b e5		 mov	 esp, ebp
  00b6c	5d		 pop	 ebp
  00b6d	c3		 ret	 0
?BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YAXPAI00I@Z ENDP ; Palmtree::Math::Core::Internal::BitwiseAnd_X_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
tv65 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MINIMUM_UNIT PROC

; 171  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 172  :             return (x <= y ? x : y);

  00015	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00018	3b 45 0c	 cmp	 eax, DWORD PTR _y$[ebp]
  0001b	77 08		 ja	 SHORT $LN3@MINIMUM_UN
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00020	89 4d fc	 mov	 DWORD PTR tv65[ebp], ecx
  00023	eb 06		 jmp	 SHORT $LN4@MINIMUM_UN
$LN3@MINIMUM_UN:
  00025	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00028	89 55 fc	 mov	 DWORD PTR tv65[ebp], edx
$LN4@MINIMUM_UN:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]

; 173  :         }

  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
__MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 156  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 157  :             return ((u + v - 1) / v);

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00013	8d 44 01 ff	 lea	 eax, DWORD PTR [ecx+eax-1]
  00017	33 d2		 xor	 edx, edx
  00019	f7 75 0c	 div	 DWORD PTR _v$[ebp]

; 158  :         }

  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 145  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp+4]
  00013	b1 20		 mov	 cl, 32			; 00000020H
  00015	e8 00 00 00 00	 call	 __aullshr
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _result_high$[ebp]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 147  :             return ((_UINT32_T)value);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 148  :         }

  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC

; 140  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0000d	33 d2		 xor	 edx, edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _value_high$[ebp]
  00012	b1 20		 mov	 cl, 32			; 00000020H
  00014	e8 00 00 00 00	 call	 __allshl
  00019	33 c9		 xor	 ecx, ecx
  0001b	0b 45 0c	 or	 eax, DWORD PTR _value_low$[ebp]
  0001e	0b d1		 or	 edx, ecx

; 142  :         }

  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.cpp
_TEXT	SEGMENT
$T2 = -100						; size = 4
$T3 = -96						; size = 24
$T4 = -72						; size = 24
_nw$ = -48						; size = 4
_root$ = -40						; size = 16
_nv$ = -20						; size = 4
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_X

; 322  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	57		 push	 edi
  00015	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  00018	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __59184A5E_pmc_bitwiseand@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 323  :         if (u == nullptr)

  0003f	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00043	75 20		 jne	 SHORT $LN2@PMC_Bitwis

; 324  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00045	68 00 00 00 00	 push	 OFFSET $SG118023
  0004a	68 00 00 00 00	 push	 OFFSET $SG118024
  0004f	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  00052	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0005c	8d 45 b8	 lea	 eax, DWORD PTR $T4[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Bitwis:

; 325  :         if (v == nullptr)

  00065	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00069	75 20		 jne	 SHORT $LN3@PMC_Bitwis

; 326  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0006b	68 00 00 00 00	 push	 OFFSET $SG118027
  00070	68 00 00 00 00	 push	 OFFSET $SG118028
  00075	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  00078	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007d	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00082	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Bitwis:

; 327  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  0008b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0008e	89 55 f0	 mov	 DWORD PTR _nu$[ebp], edx

; 328  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  00091	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00094	89 45 ec	 mov	 DWORD PTR _nv$[ebp], eax

; 329  :         CheckNumber(nu);

  00097	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000a0	83 c4 04	 add	 esp, 4

; 330  :         CheckNumber(nv);

  000a3	8b 55 ec	 mov	 edx, DWORD PTR _nv$[ebp]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000ac	83 c4 04	 add	 esp, 4

; 331  :         ResourceHolderUINT root;

  000af	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000b2	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 332  :         NUMBER_HEADER* nw = PMC_BitwiseAnd_X_X_Imp(nu, nv);

  000be	8b 45 ec	 mov	 eax, DWORD PTR _nv$[ebp]
  000c1	50		 push	 eax
  000c2	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ?PMC_BitwiseAnd_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_X_Imp
  000cb	83 c4 08	 add	 esp, 8
  000ce	89 45 d0	 mov	 DWORD PTR _nw$[ebp], eax

; 333  :         root.HookNumber(nw);

  000d1	8b 55 d0	 mov	 edx, DWORD PTR _nw$[ebp]
  000d4	52		 push	 edx
  000d5	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000d8	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 334  : #ifdef _DEBUG
; 335  :         CheckNumber(nw);

  000dd	8b 45 d0	 mov	 eax, DWORD PTR _nw$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000e6	83 c4 04	 add	 esp, 4

; 336  : #endif
; 337  :         root.UnlinkNumber(nw);

  000e9	8b 4d d0	 mov	 ecx, DWORD PTR _nw$[ebp]
  000ec	51		 push	 ecx
  000ed	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000f0	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 338  :         return ((PMC_HANDLE_UINT)nw);

  000f5	8b 55 d0	 mov	 edx, DWORD PTR _nw$[ebp]
  000f8	89 55 9c	 mov	 DWORD PTR $T2[ebp], edx
  000fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00102	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00105	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0010a	8b 45 9c	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Bitwis:

; 339  :     }

  0010d	52		 push	 edx
  0010e	8b cd		 mov	 ecx, ebp
  00110	50		 push	 eax
  00111	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Bitwis
  00117	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011c	58		 pop	 eax
  0011d	5a		 pop	 edx
  0011e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00121	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00128	59		 pop	 ecx
  00129	5f		 pop	 edi
  0012a	83 c4 64	 add	 esp, 100		; 00000064H
  0012d	3b ec		 cmp	 ebp, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 08 00	 ret	 8
  0013a	66 90		 npad	 2
$LN9@PMC_Bitwis:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN8@PMC_Bitwis
$LN8@PMC_Bitwis:
  00144	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00148	10 00 00 00	 DD	 16			; 00000010H
  0014c	00 00 00 00	 DD	 $LN6@PMC_Bitwis
$LN6@PMC_Bitwis:
  00150	72		 DB	 114			; 00000072H
  00151	6f		 DB	 111			; 0000006fH
  00152	6f		 DB	 111			; 0000006fH
  00153	74		 DB	 116			; 00000074H
  00154	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.cpp
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 24
$T2 = -52						; size = 24
_w_lo$3 = -28						; size = 4
_w_hi$4 = -24						; size = 4
_v_lo$5 = -20						; size = 4
_v_hi$6 = -12						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_BitwiseAnd_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_L

; 251  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	57		 push	 edi
  00007	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0000a	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __59184A5E_pmc_bitwiseand@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 252  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

  00020	33 c0		 xor	 eax, eax
  00022	74 20		 je	 SHORT $LN2@PMC_Bitwis

; 253  :         {
; 254  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 255  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_bitwiseand.cpp;PMC_BitwiseAnd_X_L;1");

  00024	68 00 00 00 00	 push	 OFFSET $SG117980
  00029	68 00 00 00 00	 push	 OFFSET $SG117981
  0002e	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00031	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0003b	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Bitwis:

; 256  :         }
; 257  :         if (u == nullptr)

  00044	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00048	75 20		 jne	 SHORT $LN3@PMC_Bitwis

; 258  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0004a	68 00 00 00 00	 push	 OFFSET $SG117984
  0004f	68 00 00 00 00	 push	 OFFSET $SG117985
  00054	8d 4d b4	 lea	 ecx, DWORD PTR $T1[ebp]
  00057	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0005c	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00061	8d 55 b4	 lea	 edx, DWORD PTR $T1[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Bitwis:

; 259  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  0006a	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0006d	89 45 fc	 mov	 DWORD PTR _nu$[ebp], eax

; 260  :         CheckNumber(nu);

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _nu$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00079	83 c4 04	 add	 esp, 4

; 261  :         if (nu->IS_ZERO)

  0007c	8b 55 fc	 mov	 edx, DWORD PTR _nu$[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	83 e0 01	 and	 eax, 1
  00085	74 0e		 je	 SHORT $LN4@PMC_Bitwis

; 262  :         {
; 263  :             // u が 0 である場合
; 264  :             return (0);

  00087	33 c0		 xor	 eax, eax
  00089	33 d2		 xor	 edx, edx
  0008b	e9 ae 00 00 00	 jmp	 $LN10@PMC_Bitwis
  00090	e9 a9 00 00 00	 jmp	 $LN10@PMC_Bitwis
$LN4@PMC_Bitwis:

; 265  :         }
; 266  :         else if (v == 0)

  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00098	0b 4d 10	 or	 ecx, DWORD PTR _v$[ebp+4]
  0009b	75 0e		 jne	 SHORT $LN6@PMC_Bitwis

; 267  :         {
; 268  :             // v が 0 である場合
; 269  :             return (0);

  0009d	33 c0		 xor	 eax, eax
  0009f	33 d2		 xor	 edx, edx
  000a1	e9 98 00 00 00	 jmp	 $LN10@PMC_Bitwis

; 270  :         }
; 271  :         else

  000a6	e9 93 00 00 00	 jmp	 $LN10@PMC_Bitwis
$LN6@PMC_Bitwis:

; 272  :         {
; 273  :             // u と v がともに 0 ではない場合
; 274  : 
; 275  :             // x と y の bit AND を計算する
; 276  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  000ab	ba 01 00 00 00	 mov	 edx, 1
  000b0	85 d2		 test	 edx, edx
  000b2	74 71		 je	 SHORT $LN8@PMC_Bitwis

; 277  :             {
; 278  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 279  : 
; 280  :                 _UINT32_T v_hi;
; 281  :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

  000b4	8d 45 f4	 lea	 eax, DWORD PTR _v_hi$6[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp+4]
  000bb	51		 push	 ecx
  000bc	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c8	89 45 ec	 mov	 DWORD PTR _v_lo$5[ebp], eax

; 282  :                 _UINT32_T w_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] & v_hi : 0;

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _nu$[ebp]
  000ce	83 78 10 01	 cmp	 DWORD PTR [eax+16], 1
  000d2	76 19		 jbe	 SHORT $LN11@PMC_Bitwis
  000d4	b9 04 00 00 00	 mov	 ecx, 4
  000d9	c1 e1 00	 shl	 ecx, 0
  000dc	8b 55 fc	 mov	 edx, DWORD PTR _nu$[ebp]
  000df	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000e2	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  000e5	23 4d f4	 and	 ecx, DWORD PTR _v_hi$6[ebp]
  000e8	89 4d b0	 mov	 DWORD PTR tv91[ebp], ecx
  000eb	eb 07		 jmp	 SHORT $LN12@PMC_Bitwis
$LN11@PMC_Bitwis:
  000ed	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN12@PMC_Bitwis:
  000f4	8b 55 b0	 mov	 edx, DWORD PTR tv91[ebp]
  000f7	89 55 e8	 mov	 DWORD PTR _w_hi$4[ebp], edx

; 283  :                 _UINT32_T w_lo = nu->BLOCK[0] & v_lo;

  000fa	b8 04 00 00 00	 mov	 eax, 4
  000ff	6b c8 00	 imul	 ecx, eax, 0
  00102	8b 55 fc	 mov	 edx, DWORD PTR _nu$[ebp]
  00105	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00108	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  0010b	23 4d ec	 and	 ecx, DWORD PTR _v_lo$5[ebp]
  0010e	89 4d e4	 mov	 DWORD PTR _w_lo$3[ebp], ecx

; 284  :                 return (_FROMWORDTODWORD(w_hi, w_lo));

  00111	8b 55 e4	 mov	 edx, DWORD PTR _w_lo$3[ebp]
  00114	52		 push	 edx
  00115	8b 45 e8	 mov	 eax, DWORD PTR _w_hi$4[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  0011e	83 c4 08	 add	 esp, 8
  00121	eb 1b		 jmp	 SHORT $LN10@PMC_Bitwis

; 285  :             }
; 286  :             else

  00123	eb 19		 jmp	 SHORT $LN10@PMC_Bitwis
$LN8@PMC_Bitwis:

; 287  :             {
; 288  :                 // _UINT64_T が 1 ワードで表現できる場合
; 289  :                 return (nu->BLOCK[0] & v);

  00125	b9 04 00 00 00	 mov	 ecx, 4
  0012a	6b d1 00	 imul	 edx, ecx, 0
  0012d	8b 45 fc	 mov	 eax, DWORD PTR _nu$[ebp]
  00130	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00133	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00136	33 d2		 xor	 edx, edx
  00138	23 45 0c	 and	 eax, DWORD PTR _v$[ebp]
  0013b	23 55 10	 and	 edx, DWORD PTR _v$[ebp+4]
$LN10@PMC_Bitwis:

; 290  :             }
; 291  :         }
; 292  :     }

  0013e	52		 push	 edx
  0013f	8b cd		 mov	 ecx, ebp
  00141	50		 push	 eax
  00142	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@PMC_Bitwis
  00148	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014d	58		 pop	 eax
  0014e	5a		 pop	 edx
  0014f	5f		 pop	 edi
  00150	83 c4 50	 add	 esp, 80			; 00000050H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c2 0c 00	 ret	 12			; 0000000cH
$LN15@PMC_Bitwis:
  00160	01 00 00 00	 DD	 1
  00164	00 00 00 00	 DD	 $LN14@PMC_Bitwis
$LN14@PMC_Bitwis:
  00168	f4 ff ff ff	 DD	 -12			; fffffff4H
  0016c	04 00 00 00	 DD	 4
  00170	00 00 00 00	 DD	 $LN13@PMC_Bitwis
$LN13@PMC_Bitwis:
  00174	76		 DB	 118			; 00000076H
  00175	5f		 DB	 95			; 0000005fH
  00176	68		 DB	 104			; 00000068H
  00177	69		 DB	 105			; 00000069H
  00178	00		 DB	 0
?PMC_BitwiseAnd_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_L
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.cpp
_TEXT	SEGMENT
$T1 = -52						; size = 24
$T2 = -28						; size = 24
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_BitwiseAnd_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_I

; 177  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	57		 push	 edi
  00007	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000a	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __59184A5E_pmc_bitwiseand@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 178  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  00020	33 c0		 xor	 eax, eax
  00022	74 20		 je	 SHORT $LN2@PMC_Bitwis

; 179  :         {
; 180  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 181  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_bitwiseand.cpp;PMC_BitwiseAnd_X_I;1");

  00024	68 00 00 00 00	 push	 OFFSET $SG117930
  00029	68 00 00 00 00	 push	 OFFSET $SG117931
  0002e	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00031	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0003b	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Bitwis:

; 182  :         }
; 183  :         if (u == nullptr)

  00044	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00048	75 20		 jne	 SHORT $LN3@PMC_Bitwis

; 184  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  0004a	68 00 00 00 00	 push	 OFFSET $SG117934
  0004f	68 00 00 00 00	 push	 OFFSET $SG117935
  00054	8d 4d cc	 lea	 ecx, DWORD PTR $T1[ebp]
  00057	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0005c	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00061	8d 55 cc	 lea	 edx, DWORD PTR $T1[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Bitwis:

; 185  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  0006a	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0006d	89 45 fc	 mov	 DWORD PTR _nu$[ebp], eax

; 186  :         CheckNumber(nu);

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _nu$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00079	83 c4 04	 add	 esp, 4

; 187  :         if (nu->IS_ZERO)

  0007c	8b 55 fc	 mov	 edx, DWORD PTR _nu$[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	83 e0 01	 and	 eax, 1
  00085	74 06		 je	 SHORT $LN4@PMC_Bitwis

; 188  :         {
; 189  :             // u が 0 である場合
; 190  :             return (0);

  00087	33 c0		 xor	 eax, eax
  00089	eb 22		 jmp	 SHORT $LN8@PMC_Bitwis
  0008b	eb 20		 jmp	 SHORT $LN8@PMC_Bitwis
$LN4@PMC_Bitwis:

; 191  :         }
; 192  :         else  if (v == 0)

  0008d	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00091	75 06		 jne	 SHORT $LN6@PMC_Bitwis

; 193  :         {
; 194  :             // v が 0 である場合
; 195  :             return (0);

  00093	33 c0		 xor	 eax, eax
  00095	eb 16		 jmp	 SHORT $LN8@PMC_Bitwis

; 196  :         }
; 197  :         else

  00097	eb 14		 jmp	 SHORT $LN8@PMC_Bitwis
$LN6@PMC_Bitwis:

; 198  :         {
; 199  :             // u と v がともに 0 ではない場合
; 200  : 
; 201  :             // u と v の bit AND を計算する
; 202  :             return (nu->BLOCK[0] & v);

  00099	b9 04 00 00 00	 mov	 ecx, 4
  0009e	6b d1 00	 imul	 edx, ecx, 0
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _nu$[ebp]
  000a4	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000a7	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000aa	23 45 0c	 and	 eax, DWORD PTR _v$[ebp]
$LN8@PMC_Bitwis:

; 203  :         }
; 204  :     }

  000ad	5f		 pop	 edi
  000ae	83 c4 34	 add	 esp, 52			; 00000034H
  000b1	3b ec		 cmp	 ebp, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?PMC_BitwiseAnd_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_I
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.cpp
_TEXT	SEGMENT
tv91 = -80						; size = 4
$T1 = -76						; size = 24
$T2 = -52						; size = 24
_w_lo$3 = -28						; size = 4
_w_hi$4 = -24						; size = 4
_u_lo$5 = -20						; size = 4
_u_hi$6 = -12						; size = 4
_nv$ = -4						; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
?PMC_BitwiseAnd_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_L_X

; 207  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	57		 push	 edi
  00007	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0000a	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __59184A5E_pmc_bitwiseand@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 208  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

  00020	33 c0		 xor	 eax, eax
  00022	74 20		 je	 SHORT $LN2@PMC_Bitwis

; 209  :         {
; 210  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 211  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_bitwiseand.cpp;PMC_BitwiseAnd_L_X;1");

  00024	68 00 00 00 00	 push	 OFFSET $SG117954
  00029	68 00 00 00 00	 push	 OFFSET $SG117955
  0002e	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00031	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0003b	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Bitwis:

; 212  :         }
; 213  :         if (v == nullptr)

  00044	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp], 0
  00048	75 20		 jne	 SHORT $LN3@PMC_Bitwis

; 214  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0004a	68 00 00 00 00	 push	 OFFSET $SG117958
  0004f	68 00 00 00 00	 push	 OFFSET $SG117959
  00054	8d 4d b4	 lea	 ecx, DWORD PTR $T1[ebp]
  00057	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0005c	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00061	8d 55 b4	 lea	 edx, DWORD PTR $T1[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Bitwis:

; 215  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  0006a	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0006d	89 45 fc	 mov	 DWORD PTR _nv$[ebp], eax

; 216  :         CheckNumber(nv);

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _nv$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00079	83 c4 04	 add	 esp, 4

; 217  :         if (nv->IS_ZERO)

  0007c	8b 55 fc	 mov	 edx, DWORD PTR _nv$[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	83 e0 01	 and	 eax, 1
  00085	74 0e		 je	 SHORT $LN4@PMC_Bitwis

; 218  :         {
; 219  :             // v が 0 である場合
; 220  :             return (0);

  00087	33 c0		 xor	 eax, eax
  00089	33 d2		 xor	 edx, edx
  0008b	e9 ae 00 00 00	 jmp	 $LN10@PMC_Bitwis
  00090	e9 a9 00 00 00	 jmp	 $LN10@PMC_Bitwis
$LN4@PMC_Bitwis:

; 221  :         }
; 222  :         else if (u == 0)

  00095	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00098	0b 4d 0c	 or	 ecx, DWORD PTR _u$[ebp+4]
  0009b	75 0e		 jne	 SHORT $LN6@PMC_Bitwis

; 223  :         {
; 224  :             // u が 0 である場合
; 225  :             return (0);

  0009d	33 c0		 xor	 eax, eax
  0009f	33 d2		 xor	 edx, edx
  000a1	e9 98 00 00 00	 jmp	 $LN10@PMC_Bitwis

; 226  :         }
; 227  :         else

  000a6	e9 93 00 00 00	 jmp	 $LN10@PMC_Bitwis
$LN6@PMC_Bitwis:

; 228  :         {
; 229  :             // u と v がともに 0 ではない場合
; 230  : 
; 231  :             // x と y の bit AND を計算する
; 232  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

  000ab	ba 01 00 00 00	 mov	 edx, 1
  000b0	85 d2		 test	 edx, edx
  000b2	74 71		 je	 SHORT $LN8@PMC_Bitwis

; 233  :             {
; 234  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 235  : 
; 236  :                 _UINT32_T u_hi;
; 237  :                 _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);

  000b4	8d 45 f4	 lea	 eax, DWORD PTR _u_hi$6[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp+4]
  000bb	51		 push	 ecx
  000bc	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c8	89 45 ec	 mov	 DWORD PTR _u_lo$5[ebp], eax

; 238  :                 _UINT32_T w_hi = nv->UNIT_WORD_COUNT > 1 ? nv->BLOCK[1] & u_hi : 0;

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  000ce	83 78 10 01	 cmp	 DWORD PTR [eax+16], 1
  000d2	76 19		 jbe	 SHORT $LN11@PMC_Bitwis
  000d4	b9 04 00 00 00	 mov	 ecx, 4
  000d9	c1 e1 00	 shl	 ecx, 0
  000dc	8b 55 fc	 mov	 edx, DWORD PTR _nv$[ebp]
  000df	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000e2	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  000e5	23 4d f4	 and	 ecx, DWORD PTR _u_hi$6[ebp]
  000e8	89 4d b0	 mov	 DWORD PTR tv91[ebp], ecx
  000eb	eb 07		 jmp	 SHORT $LN12@PMC_Bitwis
$LN11@PMC_Bitwis:
  000ed	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN12@PMC_Bitwis:
  000f4	8b 55 b0	 mov	 edx, DWORD PTR tv91[ebp]
  000f7	89 55 e8	 mov	 DWORD PTR _w_hi$4[ebp], edx

; 239  :                 _UINT32_T w_lo = nv->BLOCK[0] & u_lo;

  000fa	b8 04 00 00 00	 mov	 eax, 4
  000ff	6b c8 00	 imul	 ecx, eax, 0
  00102	8b 55 fc	 mov	 edx, DWORD PTR _nv$[ebp]
  00105	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00108	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  0010b	23 4d ec	 and	 ecx, DWORD PTR _u_lo$5[ebp]
  0010e	89 4d e4	 mov	 DWORD PTR _w_lo$3[ebp], ecx

; 240  :                 return (_FROMWORDTODWORD(w_hi, w_lo));

  00111	8b 55 e4	 mov	 edx, DWORD PTR _w_lo$3[ebp]
  00114	52		 push	 edx
  00115	8b 45 e8	 mov	 eax, DWORD PTR _w_hi$4[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  0011e	83 c4 08	 add	 esp, 8
  00121	eb 1b		 jmp	 SHORT $LN10@PMC_Bitwis

; 241  :             }
; 242  :             else

  00123	eb 19		 jmp	 SHORT $LN10@PMC_Bitwis
$LN8@PMC_Bitwis:

; 243  :             {
; 244  :                 // _UINT64_T が 1 ワードで表現できる場合
; 245  :                 return (nv->BLOCK[0] & u);

  00125	b9 04 00 00 00	 mov	 ecx, 4
  0012a	6b d1 00	 imul	 edx, ecx, 0
  0012d	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  00130	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00133	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00136	33 d2		 xor	 edx, edx
  00138	23 45 08	 and	 eax, DWORD PTR _u$[ebp]
  0013b	23 55 0c	 and	 edx, DWORD PTR _u$[ebp+4]
$LN10@PMC_Bitwis:

; 246  :             }
; 247  :         }
; 248  :     }

  0013e	52		 push	 edx
  0013f	8b cd		 mov	 ecx, ebp
  00141	50		 push	 eax
  00142	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@PMC_Bitwis
  00148	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014d	58		 pop	 eax
  0014e	5a		 pop	 edx
  0014f	5f		 pop	 edi
  00150	83 c4 50	 add	 esp, 80			; 00000050H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c2 0c 00	 ret	 12			; 0000000cH
$LN15@PMC_Bitwis:
  00160	01 00 00 00	 DD	 1
  00164	00 00 00 00	 DD	 $LN14@PMC_Bitwis
$LN14@PMC_Bitwis:
  00168	f4 ff ff ff	 DD	 -12			; fffffff4H
  0016c	04 00 00 00	 DD	 4
  00170	00 00 00 00	 DD	 $LN13@PMC_Bitwis
$LN13@PMC_Bitwis:
  00174	75		 DB	 117			; 00000075H
  00175	5f		 DB	 95			; 0000005fH
  00176	68		 DB	 104			; 00000068H
  00177	69		 DB	 105			; 00000069H
  00178	00		 DB	 0
?PMC_BitwiseAnd_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_L_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.cpp
_TEXT	SEGMENT
$T1 = -52						; size = 24
$T2 = -28						; size = 24
_nv$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_BitwiseAnd_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_I_X

; 147  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	57		 push	 edi
  00007	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000a	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __59184A5E_pmc_bitwiseand@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 148  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

  00020	33 c0		 xor	 eax, eax
  00022	74 20		 je	 SHORT $LN2@PMC_Bitwis

; 149  :         {
; 150  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 151  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_bitwiseand.cpp;PMC_BitwiseAnd_I_X;1");

  00024	68 00 00 00 00	 push	 OFFSET $SG117907
  00029	68 00 00 00 00	 push	 OFFSET $SG117908
  0002e	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00031	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0003b	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Bitwis:

; 152  :         }
; 153  :         if (v == nullptr)

  00044	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00048	75 20		 jne	 SHORT $LN3@PMC_Bitwis

; 154  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0004a	68 00 00 00 00	 push	 OFFSET $SG117915
  0004f	68 00 00 00 00	 push	 OFFSET $SG117916
  00054	8d 4d cc	 lea	 ecx, DWORD PTR $T1[ebp]
  00057	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0005c	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00061	8d 55 cc	 lea	 edx, DWORD PTR $T1[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Bitwis:

; 155  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  0006a	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0006d	89 45 fc	 mov	 DWORD PTR _nv$[ebp], eax

; 156  :         CheckNumber(nv);

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _nv$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00079	83 c4 04	 add	 esp, 4

; 157  :         if (nv->IS_ZERO)

  0007c	8b 55 fc	 mov	 edx, DWORD PTR _nv$[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	83 e0 01	 and	 eax, 1
  00085	74 06		 je	 SHORT $LN4@PMC_Bitwis

; 158  :         {
; 159  :             // v が 0 である場合
; 160  :             return (0);

  00087	33 c0		 xor	 eax, eax
  00089	eb 22		 jmp	 SHORT $LN8@PMC_Bitwis
  0008b	eb 20		 jmp	 SHORT $LN8@PMC_Bitwis
$LN4@PMC_Bitwis:

; 161  :         }
; 162  :         else if (u == 0)

  0008d	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00091	75 06		 jne	 SHORT $LN6@PMC_Bitwis

; 163  :         {
; 164  :             // u が 0 である場合
; 165  :             return (0);

  00093	33 c0		 xor	 eax, eax
  00095	eb 16		 jmp	 SHORT $LN8@PMC_Bitwis

; 166  :         }
; 167  :         else

  00097	eb 14		 jmp	 SHORT $LN8@PMC_Bitwis
$LN6@PMC_Bitwis:

; 168  :         {
; 169  :             // u と v がともに 0 ではない場合
; 170  : 
; 171  :             // u と v の bit AND を計算する
; 172  :             return (nv->BLOCK[0] & u);

  00099	b9 04 00 00 00	 mov	 ecx, 4
  0009e	6b d1 00	 imul	 edx, ecx, 0
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  000a4	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000a7	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  000aa	23 45 08	 and	 eax, DWORD PTR _u$[ebp]
$LN8@PMC_Bitwis:

; 173  :         }
; 174  :     }

  000ad	5f		 pop	 edi
  000ae	83 c4 34	 add	 esp, 52			; 00000034H
  000b1	3b ec		 cmp	 ebp, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?PMC_BitwiseAnd_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_I_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.cpp
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_BitwiseAnd@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_BitwiseAnd

; 342  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __59184A5E_pmc_bitwiseand@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 343  :         return (PMC_STATUS_OK);

  0000d	33 c0		 xor	 eax, eax

; 344  :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Initialize_BitwiseAnd@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_BitwiseAnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 296  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	68 00 ff ff ff	 push	 -256			; ffffff00H
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 286  :         {

  00053	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00056	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :         {

  00050	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 71   :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 63   :         {
; 64   :             _code = p._code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00055	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00058	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   :             _message = p._message;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   :             _data = p._data;

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 67   :         }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 55   :         {
; 56   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 57   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 58   :             _data = data;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00067	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 59   :         }

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004c	83 c4 04	 add	 esp, 4

; 87   :     }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 49   :         : _Data()

  00040	33 c9		 xor	 ecx, ecx
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 51   :     }

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
END
