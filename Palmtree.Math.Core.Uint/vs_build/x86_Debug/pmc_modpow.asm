; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_modpow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__6553949D_pmc_modpow@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_ModPow
PUBLIC	_PMC_ModPow_X_X_X@16
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_Multiply_X_X_Imp:PROC
EXTRN	_DivRem_X_X:PROC
EXTRN	_Compare_Imp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_number_zero:BYTE
EXTRN	_number_one:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_m$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_ModPow_X_X_X_Imp PROC

; 507  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __6553949D_pmc_modpow@c
	call	@__CheckForDebuggerJustMyCode@4

; 508  :     PMC_STATUS_CODE result;
; 509  : 
; 510  :     if (m->IS_ZERO)

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_ModPow

; 511  :     {
; 512  :         // m が 0 の場合
; 513  : 
; 514  :         // 0 による除算は許されないのでエラーを通知する
; 515  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_ModPow

; 516  :     }

	jmp	$LN3@PMC_ModPow
$LN2@PMC_ModPow:

; 517  :     else if (m->IS_ONE)

	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+24]
	shr	eax, 2
	and	eax, 1
	je	SHORT $LN4@PMC_ModPow

; 518  :     {
; 519  :         // m が 1 の場合
; 520  :         if (v->IS_ZERO)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN6@PMC_ModPow

; 521  :         {
; 522  :             // v が 0 の場合
; 523  :             if (e->IS_ZERO)

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN8@PMC_ModPow

; 524  :             {
; 525  :                 // e が 0 の場合
; 526  : 
; 527  :                 // 0 の 0 乗となるので、エラーを返す
; 528  :                 return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_ModPow

; 529  :             }

	jmp	SHORT $LN9@PMC_ModPow
$LN8@PMC_ModPow:

; 530  :             else
; 531  :             {
; 532  :                 // e が 0 ではない場合
; 533  : 
; 534  :                 // v の e 乗がどんな値であっても 1 では必ず割り切れるので剰余は 0 となる。
; 535  :                 *r = &number_zero;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero
$LN9@PMC_ModPow:

; 536  :             }
; 537  :         }

	jmp	SHORT $LN7@PMC_ModPow
$LN6@PMC_ModPow:

; 538  :         else
; 539  :         {
; 540  :             // v が 0 ではない場合
; 541  : 
; 542  :             // v の e 乗がどんな値であっても 1 では必ず割り切れるので剰余は 0 となる。
; 543  :             *r = &number_zero;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
$LN7@PMC_ModPow:

; 544  :         }
; 545  :     }

	jmp	$LN3@PMC_ModPow
$LN4@PMC_ModPow:

; 546  :     else
; 547  :     {
; 548  :         // m が 2 以上の場合
; 549  :         if (v->IS_ZERO)

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN10@PMC_ModPow

; 550  :         {
; 551  :             // v が 0 の場合
; 552  :             if (e->IS_ZERO)

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN12@PMC_ModPow

; 553  :             {
; 554  :                 // e が 0 の場合
; 555  : 
; 556  :                 // 0 の 0 乗となるので、エラーを返す
; 557  :                 return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_ModPow

; 558  :             }

	jmp	SHORT $LN13@PMC_ModPow
$LN12@PMC_ModPow:

; 559  :             else
; 560  :             {
; 561  :                 // e が 0 ではない場合
; 562  : 
; 563  :                 *r = &number_zero;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero
$LN13@PMC_ModPow:

; 564  :             }
; 565  :         }

	jmp	$LN3@PMC_ModPow
$LN10@PMC_ModPow:

; 566  :         else if (v->IS_ONE)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN14@PMC_ModPow

; 567  :         {
; 568  :             // v が 1 の場合
; 569  : 
; 570  :             // 1 を何乗しても 1 であり、1 を 2 以上の数で割ればその剰余は必ず 1 となる
; 571  :             *r = &number_one;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_one

; 572  :         }

	jmp	SHORT $LN3@PMC_ModPow
$LN14@PMC_ModPow:

; 573  :         else
; 574  :         {
; 575  :             // v が 2 以上の場合
; 576  :             if (e->IS_ZERO)

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN16@PMC_ModPow

; 577  :             {
; 578  :                 // e が 0 の場合
; 579  :                 *r = &number_one;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_one

; 580  :             }

	jmp	SHORT $LN3@PMC_ModPow
$LN16@PMC_ModPow:

; 581  :             else if (e->IS_ONE)

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN18@PMC_ModPow

; 582  :             {
; 583  :                 // e が 1 の場合
; 584  : 
; 585  :                 // v % m を計算して返す
; 586  :                 if ((result = Remainder(v, m, r)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_Remainder
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_ModPow

; 587  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_ModPow
$LN20@PMC_ModPow:

; 588  :             }

	jmp	SHORT $LN3@PMC_ModPow
$LN18@PMC_ModPow:

; 589  :             else
; 590  :             {
; 591  :                 // v、e、m がすべて 2 以上である場合
; 592  :                 // v の e 乗 の m による剰余を計算して返す
; 593  :                 if ((result = ModulePower(v, e, m, r)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_ModulePower
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@PMC_ModPow

; 594  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_ModPow
$LN3@PMC_ModPow:

; 595  :             }
; 596  :         }
; 597  :     }
; 598  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_ModPow:

; 599  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_PMC_ModPow_X_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
_TEXT	SEGMENT
_u_count$ = -236					; size = 4
_w_ptr$ = -228						; size = 4
_v_ptr$ = -220						; size = 4
_u_ptr$ = -212						; size = 4
_e_mask$ = -204						; size = 4
_e_count$ = -200					; size = 4
_cmp$ = -196						; size = 4
_v_count$ = -192					; size = 4
_r_check_code$ = -184					; size = 4
_r_bit_count$ = -176					; size = 4
_q_buf$ = -172						; size = 4
_q_buf_words$ = -164					; size = 4
_q_buf_code$ = -152					; size = 4
_q_buf_bit_count$ = -144				; size = 4
_work_v_buf$ = -140					; size = 4
_work_v_buf_words$ = -132				; size = 4
_work_v_buf_code$ = -120				; size = 4
_work_v_bit_count$ = -112				; size = 4
_work_2_buf$ = -108					; size = 4
_work_2_buf_words$ = -100				; size = 4
_work_2_buf_code$ = -88					; size = 4
_work_2_bit_count$ = -80				; size = 4
_work_1_buf$ = -76					; size = 4
_work_1_buf_words$ = -68				; size = 4
_work_1_buf_code$ = -56					; size = 4
_work_1_bit_count$ = -48				; size = 4
_v_2_buf$ = -44						; size = 4
_v_2_buf_words$ = -36					; size = 4
_v_2_buf_code$ = -24					; size = 4
_v_2_bit_count$ = -16					; size = 4
_m_count$ = -12						; size = 4
_m_buf$ = -8						; size = 4
_result$ = -4						; size = 4
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_m$ = 16						; size = 4
_r$ = 20						; size = 4
_ModulePower PROC

; 162  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6553949D_pmc_modpow@c
	call	@__CheckForDebuggerJustMyCode@4

; 163  : #ifdef DO_TRACE
; 164  :     ReportIN(v, e, m);
; 165  : #endif
; 166  :     PMC_STATUS_CODE result;
; 167  :     __UNIT_TYPE* m_buf = m->BLOCK;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _m_buf$[ebp], ecx

; 168  :     __UNIT_TYPE m_count = m->UNIT_WORD_COUNT;

	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _m_count$[ebp], eax

; 169  : 
; 170  :     // 作業域を獲得する
; 171  : 
; 172  :     __UNIT_TYPE v_2_bit_count = v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 5
	add	edx, 32					; 00000020H
	mov	DWORD PTR _v_2_bit_count$[ebp], edx

; 173  :     __UNIT_TYPE v_2_buf_code;
; 174  :     __UNIT_TYPE v_2_buf_words;
; 175  :     __UNIT_TYPE* v_2_buf = AllocateBlock(v_2_bit_count, &v_2_buf_words, &v_2_buf_code);

	lea	eax, DWORD PTR _v_2_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_2_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_2_bit_count$[ebp]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_2_buf$[ebp], eax

; 176  :     if (v_2_buf == NULL)

	cmp	DWORD PTR _v_2_buf$[ebp], 0
	jne	SHORT $LN10@ModulePowe

; 177  :     {
; 178  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ModulePowe
$LN10@ModulePowe:

; 179  :     }
; 180  : 
; 181  :     __UNIT_TYPE work_1_bit_count = m_count * 2 * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _m_count$[ebp]
	shl	eax, 1
	shl	eax, 5
	add	eax, 32					; 00000020H
	mov	DWORD PTR _work_1_bit_count$[ebp], eax

; 182  :     __UNIT_TYPE work_1_buf_code;
; 183  :     __UNIT_TYPE work_1_buf_words;
; 184  :     __UNIT_TYPE* work_1_buf = AllocateBlock(work_1_bit_count, &work_1_buf_words, &work_1_buf_code);

	lea	ecx, DWORD PTR _work_1_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _work_1_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_1_bit_count$[ebp]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_1_buf$[ebp], eax

; 185  :     if (work_1_buf == NULL)

	cmp	DWORD PTR _work_1_buf$[ebp], 0
	jne	SHORT $LN11@ModulePowe

; 186  :     {
; 187  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	ecx, DWORD PTR _v_2_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_2_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 188  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ModulePowe
$LN11@ModulePowe:

; 189  :     }
; 190  : 
; 191  :     __UNIT_TYPE work_2_bit_count = m_count * 2 * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _m_count$[ebp]
	shl	eax, 1
	shl	eax, 5
	add	eax, 32					; 00000020H
	mov	DWORD PTR _work_2_bit_count$[ebp], eax

; 192  :     __UNIT_TYPE work_2_buf_code;
; 193  :     __UNIT_TYPE work_2_buf_words;
; 194  :     __UNIT_TYPE* work_2_buf = AllocateBlock(work_2_bit_count, &work_2_buf_words, &work_2_buf_code);

	lea	ecx, DWORD PTR _work_2_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _work_2_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_2_bit_count$[ebp]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_2_buf$[ebp], eax

; 195  :     if (work_2_buf == NULL)

	cmp	DWORD PTR _work_2_buf$[ebp], 0
	jne	SHORT $LN12@ModulePowe

; 196  :     {
; 197  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_1_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 198  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	eax, DWORD PTR _v_2_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_2_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 199  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ModulePowe
$LN12@ModulePowe:

; 200  :     }
; 201  : 
; 202  :     __UNIT_TYPE work_v_bit_count = m_count * __UNIT_TYPE_BIT_COUNT;

	mov	edx, DWORD PTR _m_count$[ebp]
	shl	edx, 5
	mov	DWORD PTR _work_v_bit_count$[ebp], edx

; 203  :     __UNIT_TYPE work_v_buf_code;
; 204  :     __UNIT_TYPE work_v_buf_words;
; 205  :     __UNIT_TYPE* work_v_buf = AllocateBlock(work_v_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _work_v_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_bit_count$[ebp]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$[ebp], eax

; 206  :     if (work_v_buf == NULL)

	cmp	DWORD PTR _work_v_buf$[ebp], 0
	jne	SHORT $LN13@ModulePowe

; 207  :     {
; 208  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	eax, DWORD PTR _work_2_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_2_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 209  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	edx, DWORD PTR _work_1_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_1_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 210  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	ecx, DWORD PTR _v_2_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_2_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 211  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ModulePowe
$LN13@ModulePowe:

; 212  :     }
; 213  : 
; 214  :     __UNIT_TYPE q_buf_bit_count = _MAXIMUM_UNIT(v->UNIT_BIT_COUNT, m->UNIT_BIT_COUNT * 2) - m->UNIT_BIT_COUNT + 1 + __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	__MAXIMUM_UNIT
	add	esp, 8
	mov	ecx, DWORD PTR _m$[ebp]
	sub	eax, DWORD PTR [ecx+12]
	add	eax, 33					; 00000021H
	mov	DWORD PTR _q_buf_bit_count$[ebp], eax

; 215  :     __UNIT_TYPE q_buf_code;
; 216  :     __UNIT_TYPE q_buf_words;
; 217  :     __UNIT_TYPE* q_buf = AllocateBlock(q_buf_bit_count, &q_buf_words, &q_buf_code);

	lea	edx, DWORD PTR _q_buf_code$[ebp]
	push	edx
	lea	eax, DWORD PTR _q_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_buf_bit_count$[ebp]
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _q_buf$[ebp], eax

; 218  :     if (q_buf == NULL)

	cmp	DWORD PTR _q_buf$[ebp], 0
	jne	SHORT $LN14@ModulePowe

; 219  :     {
; 220  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	edx, DWORD PTR _work_v_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 221  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	ecx, DWORD PTR _work_2_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_2_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 222  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	eax, DWORD PTR _work_1_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_1_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 223  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	edx, DWORD PTR _v_2_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_2_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 224  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ModulePowe
$LN14@ModulePowe:

; 225  :     }
; 226  : 
; 227  :     __UNIT_TYPE r_bit_count = m->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _r_bit_count$[ebp], edx

; 228  :     __UNIT_TYPE r_check_code;
; 229  :     if ((result = AllocateNumber(r, r_bit_count, &r_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _r_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r_bit_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@ModulePowe

; 230  :     {
; 231  :         DeallocateBlock(q_buf, q_buf_words);

	mov	eax, DWORD PTR _q_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 232  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	edx, DWORD PTR _work_v_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 233  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	ecx, DWORD PTR _work_2_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_2_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 234  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	eax, DWORD PTR _work_1_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_1_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 235  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	edx, DWORD PTR _v_2_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_2_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 236  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ModulePowe
$LN15@ModulePowe:

; 237  :     }
; 238  : 
; 239  :     __UNIT_TYPE v_count;
; 240  :     int cmp = Compare_Easy(v->BLOCK, v->UNIT_WORD_COUNT, m_buf, m_count);

	mov	ecx, DWORD PTR _m_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_Compare_Easy
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cmp$[ebp], eax

; 241  :     if (cmp == 0)

	cmp	DWORD PTR _cmp$[ebp], 0
	jne	SHORT $LN16@ModulePowe

; 242  :     {
; 243  :         // v == m である場合
; 244  : 
; 245  :         // v を何乗してもその剰余は 0 であるため、0 を返す。
; 246  : 
; 247  :         DeallocateNumber(*r);

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 248  :         DeallocateBlock(q_buf, q_buf_words);

	mov	eax, DWORD PTR _q_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 249  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	edx, DWORD PTR _work_v_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 250  :         DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	ecx, DWORD PTR _work_2_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_2_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 251  :         DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	eax, DWORD PTR _work_1_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_1_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 252  :         DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	edx, DWORD PTR _v_2_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_2_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 253  :         *r = &number_zero;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], OFFSET _number_zero

; 254  : #ifdef DO_TRACE
; 255  :         ReportOUT(*r);
; 256  : #endif
; 257  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@ModulePowe

; 258  :     }

	jmp	$LN17@ModulePowe
$LN16@ModulePowe:

; 259  :     else if (cmp > 0)

	cmp	DWORD PTR _cmp$[ebp], 0
	jle	$LN18@ModulePowe

; 260  :     {
; 261  :         // v > m である場合
; 262  : 
; 263  :         // v2 を v % m に設定する。
; 264  : 
; 265  :         DivRem_X_X(v->BLOCK, v->UNIT_WORD_COUNT, m_buf, m_count, work_v_buf, q_buf, v_2_buf);

	mov	edx, DWORD PTR _v_2_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _m_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_DivRem_X_X
	add	esp, 28					; 0000001cH

; 266  :         if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_v_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@ModulePowe

; 267  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN20@ModulePowe:

; 268  :         if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _q_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@ModulePowe

; 269  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN21@ModulePowe:

; 270  :         if ((result = CheckBlockLight(v_2_buf, v_2_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _v_2_buf_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_2_buf$[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@ModulePowe

; 271  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN22@ModulePowe:

; 272  :         v_count = m_count;

	mov	edx, DWORD PTR _m_count$[ebp]
	mov	DWORD PTR _v_count$[ebp], edx
$LN2@ModulePowe:

; 273  :         while (v_count > 0 && v_2_buf[v_count - 1] == 0)

	cmp	DWORD PTR _v_count$[ebp], 0
	jbe	SHORT $LN3@ModulePowe
	mov	eax, DWORD PTR _v_count$[ebp]
	mov	ecx, DWORD PTR _v_2_buf$[ebp]
	cmp	DWORD PTR [ecx+eax*4-4], 0
	jne	SHORT $LN3@ModulePowe

; 274  :             --v_count;

	mov	edx, DWORD PTR _v_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _v_count$[ebp], edx
	jmp	SHORT $LN2@ModulePowe
$LN3@ModulePowe:

; 275  : 
; 276  :         if (v_count <= 0)

	cmp	DWORD PTR _v_count$[ebp], 0
	ja	SHORT $LN23@ModulePowe

; 277  :         {
; 278  :             // v2 が 0 になってしまった場合はべき乗を繰り返しても 0 になることが確定なので 0 を返す
; 279  :             DeallocateNumber(*r);

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 280  :             DeallocateBlock(q_buf, q_buf_words);

	mov	edx, DWORD PTR _q_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 281  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	ecx, DWORD PTR _work_v_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 282  :             DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	eax, DWORD PTR _work_2_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_2_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 283  :             DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	edx, DWORD PTR _work_1_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_1_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 284  :             DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	ecx, DWORD PTR _v_2_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_2_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 285  :             *r = &number_zero;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 286  : #ifdef DO_TRACE
; 287  :             ReportOUT(*r);
; 288  : #endif
; 289  :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@ModulePowe
$LN23@ModulePowe:

; 290  :         }
; 291  :     }

	jmp	SHORT $LN17@ModulePowe
$LN18@ModulePowe:

; 292  :     else
; 293  :     {
; 294  :         // v2 を v に設定する。
; 295  : 
; 296  :         _COPY_MEMORY_UNIT(v_2_buf, v->BLOCK, v->UNIT_WORD_COUNT);

	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _v_2_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 297  :         v_count = v->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _v_count$[ebp], ecx
$LN17@ModulePowe:

; 298  :     }
; 299  : 
; 300  : #ifdef DO_TRACE
; 301  :     ReportLabel("vの初期化");
; 302  :     ReportDump("v", v_2_buf, v_count);
; 303  : #endif
; 304  :     __UNIT_TYPE e_count = e->UNIT_WORD_COUNT;

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _e_count$[ebp], eax

; 305  :     __UNIT_TYPE e_mask = ~((__UNIT_TYPE)-1 >> 1);

	mov	DWORD PTR _e_mask$[ebp], -2147483648	; 80000000H

; 306  :     e_mask = e_mask >> _LZCNT_ALT_UNIT(e->BLOCK[e_count - 1]);

	mov	ecx, DWORD PTR _e$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _e_count$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4-4]
	push	ecx
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	edx, DWORD PTR _e_mask$[ebp]
	mov	ecx, eax
	shr	edx, cl
	mov	DWORD PTR _e_mask$[ebp], edx

; 307  :     // e_mask は e の最上位 bit を示しているはず
; 308  :     // かつ、e は 2以上であるので、同時に最下位 bit であることはあり得ない
; 309  :     _COPY_MEMORY_UNIT(work_1_buf, v_2_buf, m_count);

	mov	eax, DWORD PTR _m_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_2_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_1_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 310  : 
; 311  : #ifdef _DEBUG
; 312  :     if ((e_mask & e->BLOCK[e_count - 1]) == 0)

	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _e_count$[ebp]
	mov	eax, DWORD PTR _e_mask$[ebp]
	and	eax, DWORD PTR [ecx+edx*4-4]
	jne	SHORT $LN24@ModulePowe

; 313  :         *((int*)0) = 0;

	mov	DWORD PTR ds:0, 0
$LN24@ModulePowe:

; 314  : #endif
; 315  : 
; 316  :     __UNIT_TYPE* u_ptr = work_1_buf;

	mov	ecx, DWORD PTR _work_1_buf$[ebp]
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 317  :     __UNIT_TYPE* v_ptr = v_2_buf;

	mov	edx, DWORD PTR _v_2_buf$[ebp]
	mov	DWORD PTR _v_ptr$[ebp], edx

; 318  :     __UNIT_TYPE* w_ptr = work_2_buf;

	mov	eax, DWORD PTR _work_2_buf$[ebp]
	mov	DWORD PTR _w_ptr$[ebp], eax

; 319  :     __UNIT_TYPE u_count = v_count;

	mov	ecx, DWORD PTR _v_count$[ebp]
	mov	DWORD PTR _u_count$[ebp], ecx
$LN4@ModulePowe:

; 320  : 
; 321  :     while (e_count > 0)

	cmp	DWORD PTR _e_count$[ebp], 0
	jbe	$LN5@ModulePowe

; 322  :     {
; 323  : #ifdef DO_TRACE
; 324  :         ReportLabel("ループ開始");
; 325  :         ReportVar("e_count", e_count);
; 326  :         ReportVar("e_mask", e_mask);
; 327  : #endif
; 328  : 
; 329  :         // 次の桁の準備をする
; 330  :         e_mask >>= 1;

	mov	edx, DWORD PTR _e_mask$[ebp]
	shr	edx, 1
	mov	DWORD PTR _e_mask$[ebp], edx

; 331  :         if (e_mask == 0)

	jne	SHORT $LN25@ModulePowe

; 332  :         {
; 333  :             e_mask = ~((__UNIT_TYPE)-1 >> 1);

	mov	DWORD PTR _e_mask$[ebp], -2147483648	; 80000000H

; 334  :             --e_count;

	mov	eax, DWORD PTR _e_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _e_count$[ebp], eax
$LN25@ModulePowe:

; 335  :         }
; 336  : 
; 337  :         if (e_count <= 0)

	cmp	DWORD PTR _e_count$[ebp], 0
	ja	SHORT $LN26@ModulePowe

; 338  :             break;

	jmp	$LN5@ModulePowe
$LN26@ModulePowe:

; 339  : 
; 340  : #ifdef DO_TRACE
; 341  :         ReportLabel("e の更新");
; 342  :         ReportVar("e_count", e_count);
; 343  :         ReportVar("e_mask", e_mask);
; 344  : #endif
; 345  : 
; 346  :         // w := u * u を計算する
; 347  : #ifdef DO_TRACE
; 348  :         ReportLabel("w := u * u");
; 349  :         ReportDump("u", u_ptr, u_count);
; 350  : #endif
; 351  :         _ZERO_MEMORY_UNIT(w_ptr, work_1_buf_words);

	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_ptr$[ebp]
	push	edx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8

; 352  :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	mov	eax, DWORD PTR _w_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	call	_Multiply_X_X_Imp
	add	esp, 20					; 00000014H

; 353  :         if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_1_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_1_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN27@ModulePowe

; 354  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN27@ModulePowe:

; 355  :         if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work_2_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_2_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN28@ModulePowe

; 356  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN28@ModulePowe:

; 357  :         SwapPointer(&u_ptr, &w_ptr);

	lea	eax, DWORD PTR _w_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	call	_SwapPointer
	add	esp, 8

; 358  :         u_count *= 2;

	mov	edx, DWORD PTR _u_count$[ebp]
	shl	edx, 1
	mov	DWORD PTR _u_count$[ebp], edx

; 359  :         if (u_ptr[u_count - 1] == 0)

	mov	eax, DWORD PTR _u_count$[ebp]
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	cmp	DWORD PTR [ecx+eax*4-4], 0
	jne	SHORT $LN29@ModulePowe

; 360  :             --u_count;

	mov	edx, DWORD PTR _u_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _u_count$[ebp], edx
$LN29@ModulePowe:

; 361  : #ifdef DO_TRACE
; 362  :         ReportDump("w", u_ptr, u_count);
; 363  : #endif
; 364  : 
; 365  :         // w := u % m を計算する
; 366  : #ifdef DO_TRACE
; 367  :         ReportLabel("w := u % m");
; 368  :         ReportDump("u", u_ptr, u_count);
; 369  :         ReportDump("m", m_buf, m_count);
; 370  : #endif
; 371  :         if (u_count >= m_count)

	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, DWORD PTR _m_count$[ebp]
	jb	$LN30@ModulePowe

; 372  :         {
; 373  :             _ZERO_MEMORY_UNIT(work_v_buf, work_v_buf_words);

	mov	ecx, DWORD PTR _work_v_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$[ebp]
	push	edx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8

; 374  :             _ZERO_MEMORY_UNIT(q_buf, q_buf_words);

	mov	eax, DWORD PTR _q_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_buf$[ebp]
	push	ecx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8

; 375  :             _ZERO_MEMORY_UNIT(w_ptr, work_1_buf_words);

	mov	edx, DWORD PTR _work_1_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _w_ptr$[ebp]
	push	eax
	call	__ZERO_MEMORY_UNIT
	add	esp, 8

; 376  :             DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, q_buf, w_ptr);

	mov	ecx, DWORD PTR _w_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	call	_DivRem_X_X
	add	esp, 28					; 0000001cH

; 377  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_v_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN31@ModulePowe

; 378  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN31@ModulePowe:

; 379  :             if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _q_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN32@ModulePowe

; 380  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN32@ModulePowe:

; 381  :             if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _work_1_buf_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_1_buf$[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN33@ModulePowe

; 382  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN33@ModulePowe:

; 383  :             if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_2_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_2_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN34@ModulePowe

; 384  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN34@ModulePowe:

; 385  :             SwapPointer(&u_ptr, &w_ptr);

	lea	ecx, DWORD PTR _w_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	call	_SwapPointer
	add	esp, 8

; 386  :             u_count = m_count;

	mov	eax, DWORD PTR _m_count$[ebp]
	mov	DWORD PTR _u_count$[ebp], eax
$LN6@ModulePowe:

; 387  :             while (u_count > 0 && u_ptr[u_count - 1] == 0)

	cmp	DWORD PTR _u_count$[ebp], 0
	jbe	SHORT $LN7@ModulePowe
	mov	ecx, DWORD PTR _u_count$[ebp]
	mov	edx, DWORD PTR _u_ptr$[ebp]
	cmp	DWORD PTR [edx+ecx*4-4], 0
	jne	SHORT $LN7@ModulePowe

; 388  :                 --u_count;

	mov	eax, DWORD PTR _u_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _u_count$[ebp], eax
	jmp	SHORT $LN6@ModulePowe
$LN7@ModulePowe:

; 389  : 
; 390  :             if (u_count <= 0)

	cmp	DWORD PTR _u_count$[ebp], 0
	ja	SHORT $LN30@ModulePowe

; 391  :             {
; 392  :                 // 剰余が 0 になった場合はこれ以上続行しても解が 0 以外にはならないので、処理を中断して 0 を返す
; 393  :                 DeallocateNumber(*r);

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 394  :                 DeallocateBlock(q_buf, q_buf_words);

	mov	eax, DWORD PTR _q_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 395  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	edx, DWORD PTR _work_v_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 396  :                 DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	ecx, DWORD PTR _work_2_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_2_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 397  :                 DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	eax, DWORD PTR _work_1_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_1_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 398  :                 DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	edx, DWORD PTR _v_2_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_2_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 399  :                 *r = &number_zero;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], OFFSET _number_zero

; 400  : #ifdef DO_TRACE
; 401  :                 ReportOUT(*r);
; 402  : #endif
; 403  :                 return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@ModulePowe
$LN30@ModulePowe:

; 404  :             }
; 405  :         }
; 406  : #ifdef DO_TRACE
; 407  :         ReportDump("w", u_ptr, u_count);
; 408  : #endif
; 409  : 
; 410  : #ifdef DO_TRACE
; 411  :         ReportLabel("e のビット検査");
; 412  :         ReportDump("e", e->BLOCK, e->UNIT_WORD_COUNT);
; 413  :         ReportVar("e_count", e_count);
; 414  :         ReportVar("e_mask", e_mask);
; 415  :         ReportVar("e_mask & e->BLOCK[e_count - 1]", e_mask & e->BLOCK[e_count - 1]);
; 416  : #endif
; 417  :         if (e_mask & e->BLOCK[e_count - 1])

	mov	edx, DWORD PTR _e$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _e_count$[ebp]
	mov	edx, DWORD PTR _e_mask$[ebp]
	and	edx, DWORD PTR [eax+ecx*4-4]
	je	$LN36@ModulePowe

; 418  :         {
; 419  :             // e の当該桁のビットが立っている場合
; 420  : 
; 421  : #ifdef DO_TRACE
; 422  :             ReportLabel("w := u * v");
; 423  :             ReportDump("u", u_ptr, u_count);
; 424  :             ReportDump("v", v_ptr, v_count);
; 425  : #endif
; 426  : 
; 427  :             // w := u * v を計算する
; 428  :             _ZERO_MEMORY_UNIT(w_ptr, work_1_buf_words);

	mov	eax, DWORD PTR _work_1_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w_ptr$[ebp]
	push	ecx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8

; 429  :             Multiply_X_X_Imp(u_ptr, u_count, v_ptr, v_count, w_ptr);

	mov	edx, DWORD PTR _w_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	call	_Multiply_X_X_Imp
	add	esp, 20					; 00000014H

; 430  :             if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work_1_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_1_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN37@ModulePowe

; 431  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN37@ModulePowe:

; 432  :             if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _work_2_buf_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_2_buf$[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN38@ModulePowe

; 433  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN38@ModulePowe:

; 434  :             SwapPointer(&u_ptr, &w_ptr);

	lea	edx, DWORD PTR _w_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	call	_SwapPointer
	add	esp, 8

; 435  :             u_count += v_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	add	ecx, DWORD PTR _v_count$[ebp]
	mov	DWORD PTR _u_count$[ebp], ecx

; 436  :             if (u_ptr[u_count - 1] == 0)

	mov	edx, DWORD PTR _u_count$[ebp]
	mov	eax, DWORD PTR _u_ptr$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], 0
	jne	SHORT $LN39@ModulePowe

; 437  :                 --u_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _u_count$[ebp], ecx
$LN39@ModulePowe:

; 438  : #ifdef DO_TRACE
; 439  :             ReportDump("w", u_ptr, u_count);
; 440  : #endif
; 441  : 
; 442  :             // w := u % m を計算する
; 443  : 
; 444  : #ifdef DO_TRACE
; 445  :             ReportLabel("w := u % m");
; 446  :             ReportDump("u", u_ptr, u_count);
; 447  :             ReportDump("m", m_buf, m_count);
; 448  : #endif
; 449  :             if (u_count >= m_count)

	mov	edx, DWORD PTR _u_count$[ebp]
	cmp	edx, DWORD PTR _m_count$[ebp]
	jb	$LN36@ModulePowe

; 450  :             {
; 451  :                 _ZERO_MEMORY_UNIT(work_v_buf, work_v_buf_words);

	mov	eax, DWORD PTR _work_v_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	push	ecx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8

; 452  :                 _ZERO_MEMORY_UNIT(q_buf, q_buf_words);

	mov	edx, DWORD PTR _q_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_buf$[ebp]
	push	eax
	call	__ZERO_MEMORY_UNIT
	add	esp, 8

; 453  :                 _ZERO_MEMORY_UNIT(w_ptr, work_1_buf_words);

	mov	ecx, DWORD PTR _work_1_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_ptr$[ebp]
	push	edx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8

; 454  :                 DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, q_buf, w_ptr);

	mov	eax, DWORD PTR _w_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _m_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	call	_DivRem_X_X
	add	esp, 28					; 0000001cH

; 455  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work_v_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN41@ModulePowe

; 456  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN41@ModulePowe:

; 457  :                 if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _q_buf_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_buf$[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN42@ModulePowe

; 458  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN42@ModulePowe:

; 459  :                 if ((result = CheckBlockLight(work_1_buf, work_1_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_1_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_1_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN43@ModulePowe

; 460  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN43@ModulePowe:

; 461  :                 if ((result = CheckBlockLight(work_2_buf, work_2_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work_2_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_2_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN44@ModulePowe

; 462  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ModulePowe
$LN44@ModulePowe:

; 463  :                 SwapPointer(&u_ptr, &w_ptr);

	lea	eax, DWORD PTR _w_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	call	_SwapPointer
	add	esp, 8

; 464  :                 u_count = m_count;

	mov	edx, DWORD PTR _m_count$[ebp]
	mov	DWORD PTR _u_count$[ebp], edx
$LN8@ModulePowe:

; 465  :                 while (u_count > 0 && u_ptr[u_count - 1] == 0)

	cmp	DWORD PTR _u_count$[ebp], 0
	jbe	SHORT $LN9@ModulePowe
	mov	eax, DWORD PTR _u_count$[ebp]
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	cmp	DWORD PTR [ecx+eax*4-4], 0
	jne	SHORT $LN9@ModulePowe

; 466  :                     --u_count;

	mov	edx, DWORD PTR _u_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _u_count$[ebp], edx
	jmp	SHORT $LN8@ModulePowe
$LN9@ModulePowe:

; 467  : 
; 468  :                 if (u_count <= 0)

	cmp	DWORD PTR _u_count$[ebp], 0
	ja	SHORT $LN36@ModulePowe

; 469  :                 {
; 470  :                     // 剰余が 0 になった場合はこれ以上続行しても解が 0 以外にはならないので、処理を中断して 0 を返す
; 471  :                     DeallocateNumber(*r);

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 472  :                     DeallocateBlock(q_buf, q_buf_words);

	mov	edx, DWORD PTR _q_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 473  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	ecx, DWORD PTR _work_v_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 474  :                     DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	eax, DWORD PTR _work_2_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_2_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 475  :                     DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	edx, DWORD PTR _work_1_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_1_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 476  :                     DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	ecx, DWORD PTR _v_2_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_2_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 477  :                     *r = &number_zero;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 478  : #ifdef DO_TRACE
; 479  :                     ReportOUT(*r);
; 480  : #endif
; 481  :                     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@ModulePowe
$LN36@ModulePowe:

; 482  :                 }
; 483  :             }
; 484  : #ifdef DO_TRACE
; 485  :             ReportDump("w", u_ptr, u_count);
; 486  : #endif
; 487  :         }
; 488  :     }

	jmp	$LN4@ModulePowe
$LN5@ModulePowe:

; 489  : 
; 490  :     // 最下位桁まで達したので u_ptr と u_count を解として帰る
; 491  :     _COPY_MEMORY_UNIT((*r)->BLOCK, u_ptr, u_count);

	mov	ecx, DWORD PTR _u_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 492  :     if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r_check_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN46@ModulePowe

; 493  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@ModulePowe
$LN46@ModulePowe:

; 494  :     CommitNumber(*r);

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CommitNumber
	add	esp, 4

; 495  :     DeallocateBlock(q_buf, q_buf_words);

	mov	eax, DWORD PTR _q_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 496  :     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	edx, DWORD PTR _work_v_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 497  :     DeallocateBlock(work_2_buf, work_2_buf_words);

	mov	ecx, DWORD PTR _work_2_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_2_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 498  :     DeallocateBlock(work_1_buf, work_1_buf_words);

	mov	eax, DWORD PTR _work_1_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_1_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 499  :     DeallocateBlock(v_2_buf, v_2_buf_words);

	mov	edx, DWORD PTR _v_2_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_2_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 500  : #ifdef DO_TRACE
; 501  :     ReportOUT(*r);
; 502  : #endif
; 503  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@ModulePowe:

; 504  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN62@ModulePowe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN62@ModulePowe:
	DD	13					; 0000000dH
	DD	$LN61@ModulePowe
$LN61@ModulePowe:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN48@ModulePowe
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN49@ModulePowe
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN50@ModulePowe
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN51@ModulePowe
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN52@ModulePowe
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN53@ModulePowe
	DD	-120					; ffffff88H
	DD	4
	DD	$LN54@ModulePowe
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN55@ModulePowe
	DD	-152					; ffffff68H
	DD	4
	DD	$LN56@ModulePowe
	DD	-164					; ffffff5cH
	DD	4
	DD	$LN57@ModulePowe
	DD	-184					; ffffff48H
	DD	4
	DD	$LN58@ModulePowe
	DD	-212					; ffffff2cH
	DD	4
	DD	$LN59@ModulePowe
	DD	-228					; ffffff1cH
	DD	4
	DD	$LN60@ModulePowe
$LN60@ModulePowe:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN59@ModulePowe:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN58@ModulePowe:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN57@ModulePowe:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN56@ModulePowe:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN55@ModulePowe:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN54@ModulePowe:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN53@ModulePowe:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN52@ModulePowe:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN51@ModulePowe:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN50@ModulePowe:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN49@ModulePowe:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN48@ModulePowe:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ModulePower ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
_TEXT	SEGMENT
_r_check_code$1 = -68					; size = 4
_q_buf$2 = -60						; size = 4
_q_buf_words$3 = -52					; size = 4
_q_buf_code$4 = -40					; size = 4
_work_v_buf$5 = -32					; size = 4
_work_v_buf_words$6 = -24				; size = 4
_work_v_buf_code$7 = -12				; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_r$ = 16						; size = 4
_Remainder PROC

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6553949D_pmc_modpow@c
	call	@__CheckForDebuggerJustMyCode@4

; 106  :     PMC_STATUS_CODE result;
; 107  : 
; 108  :     if (u->UNIT_BIT_COUNT < v->UNIT_BIT_COUNT)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+12]
	jae	SHORT $LN2@Remainder

; 109  :     {
; 110  :         if ((result = DuplicateNumber(u, r)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@Remainder

; 111  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@Remainder
$LN4@Remainder:

; 112  :     }

	jmp	$LN3@Remainder
$LN2@Remainder:

; 113  :     else
; 114  :     {
; 115  :         __UNIT_TYPE work_v_buf_code;
; 116  :         __UNIT_TYPE work_v_buf_words;
; 117  :         __UNIT_TYPE* work_v_buf = AllocateBlock(v->UNIT_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	lea	edx, DWORD PTR _work_v_buf_code$7[ebp]
	push	edx
	lea	eax, DWORD PTR _work_v_buf_words$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$5[ebp], eax

; 118  :         if (work_v_buf == NULL)

	cmp	DWORD PTR _work_v_buf$5[ebp], 0
	jne	SHORT $LN5@Remainder

; 119  :         {
; 120  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@Remainder
$LN5@Remainder:

; 121  :         }
; 122  :         __UNIT_TYPE q_buf_code;
; 123  :         __UNIT_TYPE q_buf_words;
; 124  :         __UNIT_TYPE* q_buf = AllocateBlock(u->UNIT_BIT_COUNT - v->UNIT_BIT_COUNT + 1 + __UNIT_TYPE_BIT_COUNT, &q_buf_words, &q_buf_code);

	lea	eax, DWORD PTR _q_buf_code$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _q_buf_words$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+12]
	add	ecx, 33					; 00000021H
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _q_buf$2[ebp], eax

; 125  :         if (q_buf == NULL)

	cmp	DWORD PTR _q_buf$2[ebp], 0
	jne	SHORT $LN6@Remainder

; 126  :         {
; 127  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	edx, DWORD PTR _work_v_buf_words$6[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$5[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 128  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@Remainder
$LN6@Remainder:

; 129  :         }
; 130  :         __UNIT_TYPE r_check_code;
; 131  :         if ((result = AllocateNumber(r, u->UNIT_BIT_COUNT + __UNIT_TYPE_BIT_COUNT, &r_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _r_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@Remainder

; 132  :         {
; 133  :             DeallocateBlock(q_buf, q_buf_words);

	mov	edx, DWORD PTR _q_buf_words$3[ebp]
	push	edx
	mov	eax, DWORD PTR _q_buf$2[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 134  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	ecx, DWORD PTR _work_v_buf_words$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$5[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 135  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@Remainder
$LN7@Remainder:

; 136  :         }
; 137  : 
; 138  :         if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN8@Remainder

; 139  :         {
; 140  :             q_buf[0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _q_buf$2[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 141  :             _COPY_MEMORY_UNIT((*r)->BLOCK, u->BLOCK, u->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 142  :         }

	jmp	$LN9@Remainder
$LN8@Remainder:

; 143  :         else
; 144  :         {
; 145  :             DivRem_X_X(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, q_buf, (*r)->BLOCK);

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _q_buf$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$5[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_DivRem_X_X
	add	esp, 28					; 0000001cH

; 146  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_v_buf_code$7[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$5[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@Remainder

; 147  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@Remainder
$LN10@Remainder:

; 148  :             if ((result = CheckBlockLight(q_buf, q_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _q_buf_code$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_buf$2[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@Remainder

; 149  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@Remainder
$LN11@Remainder:

; 150  :             if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@Remainder

; 151  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@Remainder
$LN9@Remainder:

; 152  :         }
; 153  : 
; 154  :         DeallocateBlock(q_buf, q_buf_words);

	mov	ecx, DWORD PTR _q_buf_words$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_buf$2[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 155  :         DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	eax, DWORD PTR _work_v_buf_words$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$5[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 156  :         CommitNumber(*r);

	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CommitNumber
	add	esp, 4
$LN3@Remainder:

; 157  :     }
; 158  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Remainder:

; 159  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@Remainder
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@Remainder:
	DD	5
	DD	$LN19@Remainder
$LN19@Remainder:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@Remainder
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@Remainder
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN16@Remainder
	DD	-52					; ffffffccH
	DD	4
	DD	$LN17@Remainder
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN18@Remainder
$LN18@Remainder:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN17@Remainder:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN16@Remainder:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN15@Remainder:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN14@Remainder:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_Remainder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
_TEXT	SEGMENT
_t$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_SwapPointer PROC

; 98   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __6553949D_pmc_modpow@c
	call	@__CheckForDebuggerJustMyCode@4

; 99   :     __UNIT_TYPE* t = *u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _t$[ebp], ecx

; 100  :     *u = *v;

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 101  :     *v = t;

	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR [edx], eax

; 102  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SwapPointer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_Compare_Easy PROC

; 88   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __6553949D_pmc_modpow@c
	call	@__CheckForDebuggerJustMyCode@4

; 89   :     if (u_count > v_count)

	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, DWORD PTR _v_count$[ebp]
	jbe	SHORT $LN2@Compare_Ea

; 90   :         return (1);

	mov	eax, 1
	jmp	SHORT $LN1@Compare_Ea
	jmp	SHORT $LN1@Compare_Ea
$LN2@Compare_Ea:

; 91   :     else if (u_count < v_count)

	mov	ecx, DWORD PTR _u_count$[ebp]
	cmp	ecx, DWORD PTR _v_count$[ebp]
	jae	SHORT $LN4@Compare_Ea

; 92   :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@Compare_Ea
	jmp	SHORT $LN1@Compare_Ea
$LN4@Compare_Ea:

; 93   :     else
; 94   :         return (Compare_Imp(u, v, u_count));

	mov	edx, DWORD PTR _u_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_Compare_Imp
	add	esp, 12					; 0000000cH
$LN1@Compare_Ea:

; 95   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Compare_Easy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 629  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 630  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);
; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 655  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
tv65 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC

; 203  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 204  :         return (x >= y ? x : y);

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _y$[ebp]
	jb	SHORT $LN3@MAXIMUM_UN
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN4@MAXIMUM_UN
$LN3@MAXIMUM_UN:
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN4@MAXIMUM_UN:
	mov	eax, DWORD PTR tv65[ebp]

; 205  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT PROC

; 116  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 117  : #ifdef _M_IX86
; 118  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 119  : #elif defined(_M_X64)
; 120  :         __stosq(d, 0, count);
; 121  : #else
; 122  : #error unknown platform
; 123  : #endif
; 124  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 67   : #ifdef _M_IX86
; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 69   : #elif defined(_M_X64)
; 70   :         __movsq(d, s, count);
; 71   : #else
; 72   : #error unknown platform
; 73   : #endif
; 74   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_m$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_ModPow_X_X_X@16 PROC

; 602  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __6553949D_pmc_modpow@c
	call	@__CheckForDebuggerJustMyCode@4

; 603  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_ModPow

; 604  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_ModPow
$LN2@PMC_ModPow:

; 605  :     if (e == NULL)

	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN3@PMC_ModPow

; 606  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_ModPow
$LN3@PMC_ModPow:

; 607  :     if (m == NULL)

	cmp	DWORD PTR _m$[ebp], 0
	jne	SHORT $LN4@PMC_ModPow

; 608  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_ModPow
$LN4@PMC_ModPow:

; 609  :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN5@PMC_ModPow

; 610  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_ModPow
$LN5@PMC_ModPow:

; 611  :     PMC_STATUS_CODE result;
; 612  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_ModPow

; 613  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_ModPow
$LN6@PMC_ModPow:

; 614  :     if ((result = CheckNumber((NUMBER_HEADER*)e)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_ModPow

; 615  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_ModPow
$LN7@PMC_ModPow:

; 616  :     if ((result = CheckNumber((NUMBER_HEADER*)m)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_ModPow

; 617  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_ModPow
$LN8@PMC_ModPow:

; 618  :     if ((result = PMC_ModPow_X_X_X_Imp((NUMBER_HEADER*)v, (NUMBER_HEADER*)e, (NUMBER_HEADER*)m, (NUMBER_HEADER**)r)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_PMC_ModPow_X_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_ModPow

; 619  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_ModPow
$LN9@PMC_ModPow:

; 620  : #ifdef _DEBUG
; 621  :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_ModPow

; 622  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_ModPow
$LN10@PMC_ModPow:

; 623  : #endif
; 624  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_ModPow:

; 625  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_ModPow_X_X_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_ModPow PROC

; 628  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __6553949D_pmc_modpow@c
	call	@__CheckForDebuggerJustMyCode@4

; 629  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 630  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_ModPow ENDP
_TEXT	ENDS
END
